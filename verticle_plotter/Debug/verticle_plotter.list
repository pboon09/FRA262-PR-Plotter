
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d834  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c74  0800da0c  0800da0c  0000ea0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e680  0800e680  000101b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e680  0800e680  0000f680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e688  0800e688  000101b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e688  0800e688  0000f688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e68c  0800e68c  0000f68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800e690  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b04  200001b4  0800e844  000101b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cb8  0800e844  00010cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d114  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000516a  00000000  00000000  0003d2f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b90  00000000  00000000  00042468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001542  00000000  00000000  00043ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cd90  00000000  00000000  0004553a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002980f  00000000  00000000  000722ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a7ec  00000000  00000000  0009bad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b62c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  001b6308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bdf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d9f4 	.word	0x0800d9f4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800d9f4 	.word	0x0800d9f4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 ff45 	bl	8005cc8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f004 f82e 	bl	8004eac <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 fbc5 	bl	80016a6 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fc5b 	bl	8001864 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_duty>:

void MDXX_set_duty(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_duty+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_duty+0x54>
			PWM_write_duty(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_duty+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc51 	bl	80018a8 <PWM_write_duty>
			PWM_write_duty(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_duty+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc48 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_duty(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_duty+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_duty+0x98>
			PWM_write_duty(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_duty+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc34 	bl	80018a8 <PWM_write_duty>
			PWM_write_duty(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fc2b 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_duty+0x1a2>
			PWM_write_duty(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_duty+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc19 	bl	80018a8 <PWM_write_duty>
			PWM_write_duty(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc0c 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_duty+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_duty+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_duty+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 fd42 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_duty(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_duty+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fbe3 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_duty+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_duty+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f005 fd25 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_duty(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbc6 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_duty+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f005 fd0a 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_duty(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fba7 	bl	80018a8 <PWM_write_duty>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <MDXX_set_range>:

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	ed87 0a02 	vstr	s0, [r7, #8]
 800118c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001196:	2b00      	cmp	r3, #0
 8001198:	d15f      	bne.n	800125a <MDXX_set_range+0xda>
		if (duty == 0) {
 800119a:	edd7 7a01 	vldr	s15, [r7, #4]
 800119e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d115      	bne.n	80011d4 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3310      	adds	r3, #16
 80011ac:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800132c <MDXX_set_range+0x1ac>
 80011b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fc7b 	bl	8001ab0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3328      	adds	r3, #40	@ 0x28
 80011be:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800132c <MDXX_set_range+0x1ac>
 80011c2:	ed97 0a02 	vldr	s0, [r7, #8]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 fc72 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = 0;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80011d2:	e0a6      	b.n	8001322 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	dd1a      	ble.n	8001218 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3310      	adds	r3, #16
 80011e6:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800132c <MDXX_set_range+0x1ac>
 80011ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f000 fc5e 	bl	8001ab0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3328      	adds	r3, #40	@ 0x28
 80011f8:	edd7 0a01 	vldr	s1, [r7, #4]
 80011fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fc55 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = duty;
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120e:	ee17 2a90 	vmov	r2, s15
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001216:	e084      	b.n	8001322 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	3310      	adds	r3, #16
 800121c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001330 <MDXX_set_range+0x1b0>
 8001220:	ed97 0a02 	vldr	s0, [r7, #8]
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fc43 	bl	8001ab0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3328      	adds	r3, #40	@ 0x28
 800122e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001232:	eef0 7ae7 	vabs.f32	s15, s15
 8001236:	eef0 0a67 	vmov.f32	s1, s15
 800123a:	ed97 0a02 	vldr	s0, [r7, #8]
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fc36 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	eef0 7ae7 	vabs.f32	s15, s15
 800124c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001250:	ee17 2a90 	vmov	r2, s15
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001258:	e063      	b.n	8001322 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001260:	2b01      	cmp	r3, #1
 8001262:	d15e      	bne.n	8001322 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	eef5 7a40 	vcmp.f32	s15, #0.0
 800126c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001270:	d115      	bne.n	800129e <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800127c:	2200      	movs	r2, #0
 800127e:	4619      	mov	r1, r3
 8001280:	f005 fc68 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3328      	adds	r3, #40	@ 0x28
 8001288:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800132c <MDXX_set_range+0x1ac>
 800128c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fc0d 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = 0;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2200      	movs	r2, #0
 800129a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800129c:	e041      	b.n	8001322 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800129e:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	dd1a      	ble.n	80012e2 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012b6:	2200      	movs	r2, #0
 80012b8:	4619      	mov	r1, r3
 80012ba:	f005 fc4b 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3328      	adds	r3, #40	@ 0x28
 80012c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80012c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 fbf0 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = duty;
 80012d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d8:	ee17 2a90 	vmov	r2, s15
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012e0:	e01f      	b.n	8001322 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012ec:	2201      	movs	r2, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	f005 fc30 	bl	8006b54 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3328      	adds	r3, #40	@ 0x28
 80012f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012fc:	eef0 7ae7 	vabs.f32	s15, s15
 8001300:	eef0 0a67 	vmov.f32	s1, s15
 8001304:	ed97 0a02 	vldr	s0, [r7, #8]
 8001308:	4618      	mov	r0, r3
 800130a:	f000 fbd1 	bl	8001ab0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	eef0 7ae7 	vabs.f32	s15, s15
 8001316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800131a:	ee17 2a90 	vmov	r2, s15
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	00000000 	.word	0x00000000
 8001330:	42c80000 	.word	0x42c80000

08001334 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	601a      	str	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	605a      	str	r2, [r3, #4]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	ed2d 8b02 	vpush	{d8}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	460b      	mov	r3, r1
 80013c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80013c6:	edc7 0a00 	vstr	s1, [r7]
 80013ca:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <FIR_init+0x2a>
        numTaps += 1;
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	3301      	adds	r3, #1
 80013dc:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	897a      	ldrh	r2, [r7, #10]
 80013e2:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80013ea:	897b      	ldrh	r3, [r7, #10]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f00b f896 	bl	800c520 <malloc>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4618      	mov	r0, r3
 8001402:	f00b f88d 	bl	800c520 <malloc>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80e0 	beq.w	80015d8 <FIR_init+0x224>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80db 	beq.w	80015d8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001422:	2300      	movs	r3, #0
 8001424:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001426:	e00a      	b.n	800143e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001438:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800143a:	3301      	adds	r3, #1
 800143c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800143e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001440:	897b      	ldrh	r3, [r7, #10]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3f0      	bcc.n	8001428 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001446:	edd7 6a01 	vldr	s13, [r7, #4]
 800144a:	ed97 7a00 	vldr	s14, [r7]
 800144e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001452:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001456:	897b      	ldrh	r3, [r7, #10]
 8001458:	085b      	lsrs	r3, r3, #1
 800145a:	b29b      	uxth	r3, r3
 800145c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800145e:	2300      	movs	r3, #0
 8001460:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001462:	e077      	b.n	8001554 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001464:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001468:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800146c:	429a      	cmp	r2, r3
 800146e:	d10c      	bne.n	800148a <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001484:	edc3 7a00 	vstr	s15, [r3]
 8001488:	e02c      	b.n	80014e4 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800148a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800148c:	8afb      	ldrh	r3, [r7, #22]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29b      	uxth	r3, r3
 8001492:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001494:	edd7 7a06 	vldr	s15, [r7, #24]
 8001498:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80015e4 <FIR_init+0x230>
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b0:	eeb0 0a67 	vmov.f32	s0, s15
 80014b4:	f00b f9ea 	bl	800c88c <sinf>
 80014b8:	eef0 6a40 	vmov.f32	s13, s0
 80014bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80015e8 <FIR_init+0x234>
 80014cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4413      	add	r3, r2
 80014dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014e0:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	ed93 8a00 	vldr	s16, [r3]
 80014f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001500:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80015e4 <FIR_init+0x230>
 8001504:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	3b01      	subs	r3, #1
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001514:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001518:	eeb0 0a66 	vmov.f32	s0, s13
 800151c:	f00b f972 	bl	800c804 <cosf>
 8001520:	eef0 7a40 	vmov.f32	s15, s0
 8001524:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80015ec <FIR_init+0x238>
 8001528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800152c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80015f0 <FIR_init+0x23c>
 8001530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001544:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001548:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800154c:	b29b      	uxth	r3, r3
 800154e:	3301      	adds	r3, #1
 8001550:	b29b      	uxth	r3, r3
 8001552:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001554:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001558:	897b      	ldrh	r3, [r7, #10]
 800155a:	429a      	cmp	r2, r3
 800155c:	db82      	blt.n	8001464 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	83fb      	strh	r3, [r7, #30]
 8001568:	e00f      	b.n	800158a <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	8bfb      	ldrh	r3, [r7, #30]
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	ed97 7a08 	vldr	s14, [r7, #32]
 800157c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001580:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001584:	8bfb      	ldrh	r3, [r7, #30]
 8001586:	3301      	adds	r3, #1
 8001588:	83fb      	strh	r3, [r7, #30]
 800158a:	8bfa      	ldrh	r2, [r7, #30]
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	429a      	cmp	r2, r3
 8001590:	d3eb      	bcc.n	800156a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001592:	edd7 7a08 	vldr	s15, [r7, #32]
 8001596:	eef5 7a40 	vcmp.f32	s15, #0.0
 800159a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800159e:	d01b      	beq.n	80015d8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80015a0:	2300      	movs	r3, #0
 80015a2:	83bb      	strh	r3, [r7, #28]
 80015a4:	e014      	b.n	80015d0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	8bbb      	ldrh	r3, [r7, #28]
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	edd3 6a00 	vldr	s13, [r3]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	8bbb      	ldrh	r3, [r7, #28]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	ed97 7a08 	vldr	s14, [r7, #32]
 80015c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015c6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	83bb      	strh	r3, [r7, #28]
 80015d0:	8bba      	ldrh	r2, [r7, #28]
 80015d2:	897b      	ldrh	r3, [r7, #10]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d3e6      	bcc.n	80015a6 <FIR_init+0x1f2>
            }
        }
    }
}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	ecbd 8b02 	vpop	{d8}
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40c90fdb 	.word	0x40c90fdb
 80015e8:	40490fdb 	.word	0x40490fdb
 80015ec:	3eeb851f 	.word	0x3eeb851f
 80015f0:	3f0a3d71 	.word	0x3f0a3d71

080015f4 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	895b      	ldrh	r3, [r3, #10]
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	895b      	ldrh	r3, [r3, #10]
 800161a:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 800161c:	2300      	movs	r3, #0
 800161e:	813b      	strh	r3, [r7, #8]
 8001620:	e023      	b.n	800166a <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	897b      	ldrh	r3, [r7, #10]
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	4413      	add	r3, r2
 800163a:	edd3 7a00 	vldr	s15, [r3]
 800163e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001642:	ed97 7a03 	vldr	s14, [r7, #12]
 8001646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164a:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 800164e:	897b      	ldrh	r3, [r7, #10]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	891b      	ldrh	r3, [r3, #8]
 8001658:	3b01      	subs	r3, #1
 800165a:	817b      	strh	r3, [r7, #10]
 800165c:	e002      	b.n	8001664 <FIR_process+0x70>
        } else {
            index--;
 800165e:	897b      	ldrh	r3, [r7, #10]
 8001660:	3b01      	subs	r3, #1
 8001662:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001664:	893b      	ldrh	r3, [r7, #8]
 8001666:	3301      	adds	r3, #1
 8001668:	813b      	strh	r3, [r7, #8]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	891b      	ldrh	r3, [r3, #8]
 800166e:	893a      	ldrh	r2, [r7, #8]
 8001670:	429a      	cmp	r2, r3
 8001672:	d3d6      	bcc.n	8001622 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	895b      	ldrh	r3, [r3, #10]
 8001678:	3301      	adds	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	895a      	ldrh	r2, [r3, #10]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	891b      	ldrh	r3, [r3, #8]
 8001688:	429a      	cmp	r2, r3
 800168a:	d302      	bcc.n	8001692 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	ee07 3a90 	vmov	s15, r3
}
 8001698:	eeb0 0a67 	vmov.f32	s0, s15
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80016a6:	b480      	push	{r7}
 80016a8:	b089      	sub	sp, #36	@ 0x24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	ed87 0a05 	vstr	s0, [r7, #20]
 80016b0:	edc7 0a04 	vstr	s1, [r7, #16]
 80016b4:	ed87 1a03 	vstr	s2, [r7, #12]
 80016b8:	edc7 1a02 	vstr	s3, [r7, #8]
 80016bc:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 80016c0:	ed97 7a05 	vldr	s14, [r7, #20]
 80016c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016c8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80016d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016dc:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 80016e0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80016f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fc:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	ee07 3a90 	vmov	s15, r3
}
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	3724      	adds	r7, #36	@ 0x24
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001718:	4b0d      	ldr	r3, [pc, #52]	@ (8001750 <modbus_1t5_Timeout+0x3c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001720:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <modbus_1t5_Timeout+0x3c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 800172c:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <modbus_1t5_Timeout+0x3c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <modbus_1t5_Timeout+0x3c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	691b      	ldr	r3, [r3, #16]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	200001d0 	.word	0x200001d0

08001754 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <modbus_3t5_Timeout+0x1c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	755a      	strb	r2, [r3, #21]

}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	200001d0 	.word	0x200001d0

08001774 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f009 f893 	bl	800a8a8 <HAL_UART_GetError>
 8001782:	4603      	mov	r3, r0
 8001784:	2b20      	cmp	r3, #32
 8001786:	d101      	bne.n	800178c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001788:	f7ff ffc4 	bl	8001714 <modbus_1t5_Timeout>

	}
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80017a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001858 <Modbus_init+0xc4>)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80017a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <Modbus_init+0xc4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <Modbus_init+0xc4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <Modbus_init+0xc4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 80017c0:	4b25      	ldr	r3, [pc, #148]	@ (8001858 <Modbus_init+0xc4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	7e3a      	ldrb	r2, [r7, #24]
 80017c6:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 80017c8:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <Modbus_init+0xc4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a21      	ldr	r2, [pc, #132]	@ (800185c <Modbus_init+0xc8>)
 80017d6:	210e      	movs	r1, #14
 80017d8:	4618      	mov	r0, r3
 80017da:	f007 fb13 	bl	8008e04 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2110      	movs	r1, #16
 80017e4:	4618      	mov	r0, r3
 80017e6:	f009 f809 	bl	800a7fc <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f009 f820 	bl	800a834 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4a19      	ldr	r2, [pc, #100]	@ (8001860 <Modbus_init+0xcc>)
 80017fa:	2104      	movs	r1, #4
 80017fc:	4618      	mov	r0, r3
 80017fe:	f008 fb51 	bl	8009ea4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <Modbus_init+0xc4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001808:	4b13      	ldr	r3, [pc, #76]	@ (8001858 <Modbus_init+0xc4>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <Modbus_init+0xc4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001814:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001818:	4413      	add	r3, r2
 800181a:	3302      	adds	r3, #2
 800181c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001820:	4619      	mov	r1, r3
 8001822:	f008 fbf9 	bl	800a018 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001826:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <Modbus_init+0xc4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10c      	bne.n	8001850 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <Modbus_init+0xc4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fabd 	bl	8007dbc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <Modbus_init+0xc4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f006 fd0c 	bl	8008268 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001d0 	.word	0x200001d0
 800185c:	08001755 	.word	0x08001755
 8001860:	08001775 	.word	0x08001775

08001864 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	4613      	mov	r3, r2
 8001870:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <PWM_init+0x40>)
 8001876:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800188a:	68b8      	ldr	r0, [r7, #8]
 800188c:	f006 fa26 	bl	8007cdc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4619      	mov	r1, r3
 8001894:	68b8      	ldr	r0, [r7, #8]
 8001896:	f006 fb6d 	bl	8007f74 <HAL_TIM_PWM_Start>
}
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	0a21fe80 	.word	0x0a21fe80

080018a8 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018b4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80018b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80018c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c4:	d137      	bne.n	8001936 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	889b      	ldrh	r3, [r3, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <PWM_write_duty+0x32>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80018d8:	e0e1      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	889b      	ldrh	r3, [r3, #4]
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d105      	bne.n	80018ee <PWM_write_duty+0x46>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	6393      	str	r3, [r2, #56]	@ 0x38
 80018ec:	e0d7      	b.n	8001a9e <PWM_write_duty+0x1f6>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	2b08      	cmp	r3, #8
 80018f4:	d105      	bne.n	8001902 <PWM_write_duty+0x5a>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001900:	e0cd      	b.n	8001a9e <PWM_write_duty+0x1f6>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	889b      	ldrh	r3, [r3, #4]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d105      	bne.n	8001916 <PWM_write_duty+0x6e>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	2300      	movs	r3, #0
 8001912:	6413      	str	r3, [r2, #64]	@ 0x40
 8001914:	e0c3      	b.n	8001a9e <PWM_write_duty+0x1f6>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	889b      	ldrh	r3, [r3, #4]
 800191a:	2b10      	cmp	r3, #16
 800191c:	d105      	bne.n	800192a <PWM_write_duty+0x82>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	6493      	str	r3, [r2, #72]	@ 0x48
 8001928:	e0b9      	b.n	8001a9e <PWM_write_duty+0x1f6>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001934:	e0b3      	b.n	8001a9e <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	ee07 3a90 	vmov	s15, r3
 800193e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001942:	ed97 7a02 	vldr	s14, [r7, #8]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194e:	ee17 2a90 	vmov	r2, s15
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800195e:	33fe      	adds	r3, #254	@ 0xfe
 8001960:	4a51      	ldr	r2, [pc, #324]	@ (8001aa8 <PWM_write_duty+0x200>)
 8001962:	fba2 2303 	umull	r2, r3, r2, r3
 8001966:	0bdb      	lsrs	r3, r3, #15
 8001968:	b29b      	uxth	r3, r3
 800196a:	3b01      	subs	r3, #1
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	899b      	ldrh	r3, [r3, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001990:	ed97 7a02 	vldr	s14, [r7, #8]
 8001994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800199c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a4:	ee17 3a90 	vmov	r3, s15
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	89db      	ldrh	r3, [r3, #14]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fd82 	bl	80004bc <__aeabi_i2d>
 80019b8:	4604      	mov	r4, r0
 80019ba:	460d      	mov	r5, r1
 80019bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80019c0:	eef0 7ae7 	vabs.f32	s15, s15
 80019c4:	ee17 0a90 	vmov	r0, s15
 80019c8:	f7fe fd8a 	bl	80004e0 <__aeabi_f2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7fe fddc 	bl	8000590 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <PWM_write_duty+0x204>)
 80019e6:	f7fe fefd 	bl	80007e4 <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7fe ffdf 	bl	80009b4 <__aeabi_d2uiz>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	899a      	ldrh	r2, [r3, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	89da      	ldrh	r2, [r3, #14]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	89da      	ldrh	r2, [r3, #14]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d106      	bne.n	8001a38 <PWM_write_duty+0x190>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	6952      	ldr	r2, [r2, #20]
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a36:	e032      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	889b      	ldrh	r3, [r3, #4]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d106      	bne.n	8001a4e <PWM_write_duty+0x1a6>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a4c:	e027      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d106      	bne.n	8001a64 <PWM_write_duty+0x1bc>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a62:	e01c      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	2b0c      	cmp	r3, #12
 8001a6a:	d106      	bne.n	8001a7a <PWM_write_duty+0x1d2>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a78:	e011      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d106      	bne.n	8001a90 <PWM_write_duty+0x1e8>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001a8e:	e006      	b.n	8001a9e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001a9c:	e7ff      	b.n	8001a9e <PWM_write_duty+0x1f6>
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	80008001 	.word	0x80008001
 8001aac:	40590000 	.word	0x40590000

08001ab0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001abc:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001ac0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ac4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001acc:	d137      	bne.n	8001b3e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d105      	bne.n	8001ae2 <PWM_write_range+0x32>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001ae0:	e0e1      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	889b      	ldrh	r3, [r3, #4]
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d105      	bne.n	8001af6 <PWM_write_range+0x46>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001af4:	e0d7      	b.n	8001ca6 <PWM_write_range+0x1f6>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	889b      	ldrh	r3, [r3, #4]
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d105      	bne.n	8001b0a <PWM_write_range+0x5a>
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001b08:	e0cd      	b.n	8001ca6 <PWM_write_range+0x1f6>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	889b      	ldrh	r3, [r3, #4]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d105      	bne.n	8001b1e <PWM_write_range+0x6e>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1c:	e0c3      	b.n	8001ca6 <PWM_write_range+0x1f6>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	889b      	ldrh	r3, [r3, #4]
 8001b22:	2b10      	cmp	r3, #16
 8001b24:	d105      	bne.n	8001b32 <PWM_write_range+0x82>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b30:	e0b9      	b.n	8001ca6 <PWM_write_range+0x1f6>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001b3c:	e0b3      	b.n	8001ca6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b56:	ee17 2a90 	vmov	r2, s15
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001b66:	33fe      	adds	r3, #254	@ 0xfe
 8001b68:	4a53      	ldr	r2, [pc, #332]	@ (8001cb8 <PWM_write_range+0x208>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0bdb      	lsrs	r3, r3, #15
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	899b      	ldrh	r3, [r3, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b98:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bac:	ee17 3a90 	vmov	r3, s15
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	89db      	ldrh	r3, [r3, #14]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fc7e 	bl	80004bc <__aeabi_i2d>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	460d      	mov	r5, r1
 8001bc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bcc:	ee17 0a90 	vmov	r0, s15
 8001bd0:	f7fe fc86 	bl	80004e0 <__aeabi_f2d>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4620      	mov	r0, r4
 8001bda:	4629      	mov	r1, r5
 8001bdc:	f7fe fcd8 	bl	8000590 <__aeabi_dmul>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	a331      	add	r3, pc, #196	@ (adr r3, 8001cb0 <PWM_write_range+0x200>)
 8001bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bee:	f7fe fdf9 	bl	80007e4 <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f7fe fedb 	bl	80009b4 <__aeabi_d2uiz>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	899a      	ldrh	r2, [r3, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	89da      	ldrh	r2, [r3, #14]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	89da      	ldrh	r2, [r3, #14]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	889b      	ldrh	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d106      	bne.n	8001c40 <PWM_write_range+0x190>
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	6952      	ldr	r2, [r2, #20]
 8001c3c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c3e:	e032      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	889b      	ldrh	r3, [r3, #4]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d106      	bne.n	8001c56 <PWM_write_range+0x1a6>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c54:	e027      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	889b      	ldrh	r3, [r3, #4]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d106      	bne.n	8001c6c <PWM_write_range+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c6a:	e01c      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	889b      	ldrh	r3, [r3, #4]
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	d106      	bne.n	8001c82 <PWM_write_range+0x1d2>
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c80:	e011      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	889b      	ldrh	r3, [r3, #4]
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d106      	bne.n	8001c98 <PWM_write_range+0x1e8>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001c96:	e006      	b.n	8001ca6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001ca4:	e7ff      	b.n	8001ca6 <PWM_write_range+0x1f6>
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bdb0      	pop	{r4, r5, r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	40efffe0 	.word	0x40efffe0
 8001cb8:	80008001 	.word	0x80008001

08001cbc <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6178      	str	r0, [r7, #20]
 8001cc4:	6139      	str	r1, [r7, #16]
 8001cc6:	60fa      	str	r2, [r7, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f04f 0200 	mov.w	r2, #0
 8001cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d0e:	68f9      	ldr	r1, [r7, #12]
 8001d10:	fb01 f202 	mul.w	r2, r1, r2
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f04f 0200 	mov.w	r2, #0
 8001d32:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001d4a:	213c      	movs	r1, #60	@ 0x3c
 8001d4c:	6938      	ldr	r0, [r7, #16]
 8001d4e:	f006 fbcd 	bl	80084ec <HAL_TIM_Encoder_Start>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	0000      	movs	r0, r0
 8001d5c:	0000      	movs	r0, r0
	...

08001d60 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001d60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d64:	b084      	sub	sp, #16
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	0fda      	lsrs	r2, r3, #31
 8001d88:	4413      	add	r3, r2
 8001d8a:	105b      	asrs	r3, r3, #1
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4293      	cmp	r3, r2
 8001d92:	dd05      	ble.n	8001da0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	e00e      	b.n	8001dbe <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	425b      	negs	r3, r3
 8001da6:	0fda      	lsrs	r2, r3, #31
 8001da8:	4413      	add	r3, r2
 8001daa:	105b      	asrs	r3, r3, #1
 8001dac:	461a      	mov	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4293      	cmp	r3, r2
 8001db2:	da04      	bge.n	8001dbe <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	441a      	add	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69db      	ldr	r3, [r3, #28]
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb67 	bl	80004e0 <__aeabi_f2d>
 8001e12:	4604      	mov	r4, r0
 8001e14:	460d      	mov	r5, r1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e32:	ee16 0a90 	vmov	r0, s13
 8001e36:	f7fe fb53 	bl	80004e0 <__aeabi_f2d>
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <QEI_get_diff_count+0x1b8>)
 8001e40:	f7fe fba6 	bl	8000590 <__aeabi_dmul>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4690      	mov	r8, r2
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fb45 	bl	80004e0 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4640      	mov	r0, r8
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	f7fe fb97 	bl	8000590 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	f7fe f9db 	bl	8000224 <__adddf3>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fdbd 	bl	80009f4 <__aeabi_d2f>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb2b 	bl	80004e0 <__aeabi_f2d>
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	460d      	mov	r5, r1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eae:	ee17 0a90 	vmov	r0, s15
 8001eb2:	f7fe fb15 	bl	80004e0 <__aeabi_f2d>
 8001eb6:	a316      	add	r3, pc, #88	@ (adr r3, 8001f10 <QEI_get_diff_count+0x1b0>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb68 	bl	8000590 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4690      	mov	r8, r2
 8001ec6:	4699      	mov	r9, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb07 	bl	80004e0 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4640      	mov	r0, r8
 8001ed8:	4649      	mov	r1, r9
 8001eda:	f7fe fb59 	bl	8000590 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	f7fe f99d 	bl	8000224 <__adddf3>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f7fe fd7f 	bl	80009f4 <__aeabi_d2f>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	605a      	str	r2, [r3, #4]
}
 8001f04:	bf00      	nop
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f0e:	bf00      	nop
 8001f10:	54442d18 	.word	0x54442d18
 8001f14:	400921fb 	.word	0x400921fb
 8001f18:	40240000 	.word	0x40240000
 8001f1c:	00000000 	.word	0x00000000

08001f20 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6a12      	ldr	r2, [r2, #32]
 8001f30:	fb02 f303 	mul.w	r3, r2, r3
 8001f34:	ee07 3a90 	vmov	s15, r3
 8001f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe faca 	bl	80004e0 <__aeabi_f2d>
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	4b6b      	ldr	r3, [pc, #428]	@ (8002100 <QEI_compute_data+0x1e0>)
 8001f52:	f7fe fb1d 	bl	8000590 <__aeabi_dmul>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ee17 0a90 	vmov	r0, s15
 8001f6e:	f7fe fab7 	bl	80004e0 <__aeabi_f2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe fc33 	bl	80007e4 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4614      	mov	r4, r2
 8001f84:	461d      	mov	r5, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe faa8 	bl	80004e0 <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe fafa 	bl	8000590 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd26 	bl	80009f4 <__aeabi_d2f>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001fb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fb8:	ee17 0a90 	vmov	r0, s15
 8001fbc:	f7fe fa90 	bl	80004e0 <__aeabi_f2d>
 8001fc0:	a34d      	add	r3, pc, #308	@ (adr r3, 80020f8 <QEI_compute_data+0x1d8>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	f7fe fae3 	bl	8000590 <__aeabi_dmul>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	ee07 3a90 	vmov	s15, r3
 8001fda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fde:	ee17 0a90 	vmov	r0, s15
 8001fe2:	f7fe fa7d 	bl	80004e0 <__aeabi_f2d>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	460b      	mov	r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f7fe fbf9 	bl	80007e4 <__aeabi_ddiv>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	4614      	mov	r4, r2
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa6e 	bl	80004e0 <__aeabi_f2d>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4620      	mov	r0, r4
 800200a:	4629      	mov	r1, r5
 800200c:	f7fe fac0 	bl	8000590 <__aeabi_dmul>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	f7fe fcec 	bl	80009f4 <__aeabi_d2f>
 800201c:	4602      	mov	r2, r0
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fa5a 	bl	80004e0 <__aeabi_f2d>
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	4b34      	ldr	r3, [pc, #208]	@ (8002104 <QEI_compute_data+0x1e4>)
 8002032:	f7fe faad 	bl	8000590 <__aeabi_dmul>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4614      	mov	r4, r2
 800203c:	461d      	mov	r5, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800204a:	ee17 0a90 	vmov	r0, s15
 800204e:	f7fe fa47 	bl	80004e0 <__aeabi_f2d>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe fbc3 	bl	80007e4 <__aeabi_ddiv>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4614      	mov	r4, r2
 8002064:	461d      	mov	r5, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fa38 	bl	80004e0 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe fa8a 	bl	8000590 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fcb6 	bl	80009f4 <__aeabi_d2f>
 8002088:	4602      	mov	r2, r0
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	ed93 7a02 	vldr	s14, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	edd3 7a03 	vldr	s15, [r3, #12]
 80020a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 80020aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80020ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b6:	d104      	bne.n	80020c2 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020c0:	e00f      	b.n	80020e2 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d102      	bne.n	80020d0 <QEI_compute_data+0x1b0>
 80020ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80020ce:	e001      	b.n	80020d4 <QEI_compute_data+0x1b4>
 80020d0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002108 <QEI_compute_data+0x1e8>
 80020d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80020d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	60da      	str	r2, [r3, #12]
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	54442d18 	.word	0x54442d18
 80020fc:	400921fb 	.word	0x400921fb
 8002100:	404e0000 	.word	0x404e0000
 8002104:	40240000 	.word	0x40240000
 8002108:	00000000 	.word	0x00000000

0800210c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	@ 0x30
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002112:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2220      	movs	r2, #32
 8002122:	2100      	movs	r1, #0
 8002124:	4618      	mov	r0, r3
 8002126:	f00a fab1 	bl	800c68c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800212a:	4b39      	ldr	r3, [pc, #228]	@ (8002210 <MX_ADC1_Init+0x104>)
 800212c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002132:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002134:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002138:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800213a:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <MX_ADC1_Init+0x104>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002140:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002146:	4b32      	ldr	r3, [pc, #200]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800214c:	4b30      	ldr	r3, [pc, #192]	@ (8002210 <MX_ADC1_Init+0x104>)
 800214e:	2201      	movs	r2, #1
 8002150:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002152:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002154:	2204      	movs	r2, #4
 8002156:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002158:	4b2d      	ldr	r3, [pc, #180]	@ (8002210 <MX_ADC1_Init+0x104>)
 800215a:	2200      	movs	r2, #0
 800215c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800215e:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002160:	2201      	movs	r2, #1
 8002162:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002164:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002166:	2202      	movs	r2, #2
 8002168:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800216a:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <MX_ADC1_Init+0x104>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002172:	4b27      	ldr	r3, [pc, #156]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002174:	2200      	movs	r2, #0
 8002176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <MX_ADC1_Init+0x104>)
 800217a:	2200      	movs	r2, #0
 800217c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800217e:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002180:	2201      	movs	r2, #1
 8002182:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002188:	2200      	movs	r2, #0
 800218a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800218c:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <MX_ADC1_Init+0x104>)
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002194:	481e      	ldr	r0, [pc, #120]	@ (8002210 <MX_ADC1_Init+0x104>)
 8002196:	f002 fccd 	bl	8004b34 <HAL_ADC_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80021a0:	f000 fdfc 	bl	8002d9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021a4:	2300      	movs	r3, #0
 80021a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4818      	ldr	r0, [pc, #96]	@ (8002210 <MX_ADC1_Init+0x104>)
 80021b0:	f003 fdec 	bl	8005d8c <HAL_ADCEx_MultiModeConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80021ba:	f000 fdef 	bl	8002d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_ADC1_Init+0x108>)
 80021c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c2:	2306      	movs	r3, #6
 80021c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80021c6:	2307      	movs	r3, #7
 80021c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021ca:	237f      	movs	r3, #127	@ 0x7f
 80021cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021ce:	2304      	movs	r3, #4
 80021d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	@ (8002210 <MX_ADC1_Init+0x104>)
 80021dc:	f002 ff58 	bl	8005090 <HAL_ADC_ConfigChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80021e6:	f000 fdd9 	bl	8002d9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_ADC1_Init+0x10c>)
 80021ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021ee:	230c      	movs	r3, #12
 80021f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	@ (8002210 <MX_ADC1_Init+0x104>)
 80021f8:	f002 ff4a 	bl	8005090 <HAL_ADC_ConfigChannel>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002202:	f000 fdcb 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	@ 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001d4 	.word	0x200001d4
 8002214:	19200040 	.word	0x19200040
 8002218:	1d500080 	.word	0x1d500080

0800221c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b09e      	sub	sp, #120	@ 0x78
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
 8002232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	2254      	movs	r2, #84	@ 0x54
 800223a:	2100      	movs	r1, #0
 800223c:	4618      	mov	r0, r3
 800223e:	f00a fa25 	bl	800c68c <memset>
  if(adcHandle->Instance==ADC1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800224a:	d15e      	bne.n	800230a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800224c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002250:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002252:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002256:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002258:	f107 0310 	add.w	r3, r7, #16
 800225c:	4618      	mov	r0, r3
 800225e:	f005 fa8b 	bl	8007778 <HAL_RCCEx_PeriphCLKConfig>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002268:	f000 fd98 	bl	8002d9c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800226c:	4b29      	ldr	r3, [pc, #164]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002270:	4a28      	ldr	r2, [pc, #160]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 8002272:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002278:	4b26      	ldr	r3, [pc, #152]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002284:	4b23      	ldr	r3, [pc, #140]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002290:	4b20      	ldr	r3, [pc, #128]	@ (8002314 <HAL_ADC_MspInit+0xf8>)
 8002292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800229c:	2303      	movs	r3, #3
 800229e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022a0:	2303      	movs	r3, #3
 80022a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022ac:	4619      	mov	r1, r3
 80022ae:	481a      	ldr	r0, [pc, #104]	@ (8002318 <HAL_ADC_MspInit+0xfc>)
 80022b0:	f004 fab6 	bl	8006820 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022b6:	4a1a      	ldr	r2, [pc, #104]	@ (8002320 <HAL_ADC_MspInit+0x104>)
 80022b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80022ba:	4b18      	ldr	r3, [pc, #96]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022bc:	2205      	movs	r2, #5
 80022be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c0:	4b16      	ldr	r3, [pc, #88]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022ce:	2280      	movs	r2, #128	@ 0x80
 80022d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022dc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022e4:	2220      	movs	r2, #32
 80022e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022e8:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022ee:	480b      	ldr	r0, [pc, #44]	@ (800231c <HAL_ADC_MspInit+0x100>)
 80022f0:	f003 ff64 	bl	80061bc <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80022fa:	f000 fd4f 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_ADC_MspInit+0x100>)
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
 8002304:	4a05      	ldr	r2, [pc, #20]	@ (800231c <HAL_ADC_MspInit+0x100>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800230a:	bf00      	nop
 800230c:	3778      	adds	r7, #120	@ 0x78
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	48000800 	.word	0x48000800
 800231c:	20000240 	.word	0x20000240
 8002320:	40020008 	.word	0x40020008

08002324 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800232a:	4b1a      	ldr	r3, [pc, #104]	@ (8002394 <MX_DMA_Init+0x70>)
 800232c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232e:	4a19      	ldr	r2, [pc, #100]	@ (8002394 <MX_DMA_Init+0x70>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	6493      	str	r3, [r2, #72]	@ 0x48
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <MX_DMA_Init+0x70>)
 8002338:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002342:	4b14      	ldr	r3, [pc, #80]	@ (8002394 <MX_DMA_Init+0x70>)
 8002344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002346:	4a13      	ldr	r2, [pc, #76]	@ (8002394 <MX_DMA_Init+0x70>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6493      	str	r3, [r2, #72]	@ 0x48
 800234e:	4b11      	ldr	r3, [pc, #68]	@ (8002394 <MX_DMA_Init+0x70>)
 8002350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800235a:	2200      	movs	r2, #0
 800235c:	2100      	movs	r1, #0
 800235e:	200b      	movs	r0, #11
 8002360:	f003 fef7 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002364:	200b      	movs	r0, #11
 8002366:	f003 ff0e 	bl	8006186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	200c      	movs	r0, #12
 8002370:	f003 feef 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002374:	200c      	movs	r0, #12
 8002376:	f003 ff06 	bl	8006186 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	200d      	movs	r0, #13
 8002380:	f003 fee7 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002384:	200d      	movs	r0, #13
 8002386:	f003 fefe 	bl	8006186 <HAL_NVIC_EnableIRQ>

}
 800238a:	bf00      	nop
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b08a      	sub	sp, #40	@ 0x28
 800239c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]
 80023aa:	60da      	str	r2, [r3, #12]
 80023ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ae:	4b4f      	ldr	r3, [pc, #316]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b2:	4a4e      	ldr	r2, [pc, #312]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023b4:	f043 0304 	orr.w	r3, r3, #4
 80023b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ba:	4b4c      	ldr	r3, [pc, #304]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c6:	4b49      	ldr	r3, [pc, #292]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ca:	4a48      	ldr	r2, [pc, #288]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023cc:	f043 0320 	orr.w	r3, r3, #32
 80023d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d2:	4b46      	ldr	r3, [pc, #280]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b43      	ldr	r3, [pc, #268]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e2:	4a42      	ldr	r2, [pc, #264]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023ea:	4b40      	ldr	r3, [pc, #256]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b3d      	ldr	r3, [pc, #244]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	4a3c      	ldr	r2, [pc, #240]	@ (80024ec <MX_GPIO_Init+0x154>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002402:	4b3a      	ldr	r3, [pc, #232]	@ (80024ec <MX_GPIO_Init+0x154>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002418:	f004 fb9c 	bl	8006b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800241c:	2200      	movs	r2, #0
 800241e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002422:	4833      	ldr	r0, [pc, #204]	@ (80024f0 <MX_GPIO_Init+0x158>)
 8002424:	f004 fb96 	bl	8006b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002428:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800242c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800242e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002438:	f107 0314 	add.w	r3, r7, #20
 800243c:	4619      	mov	r1, r3
 800243e:	482c      	ldr	r0, [pc, #176]	@ (80024f0 <MX_GPIO_Init+0x158>)
 8002440:	f004 f9ee 	bl	8006820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002444:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244a:	2301      	movs	r3, #1
 800244c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002452:	2300      	movs	r3, #0
 8002454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002456:	f107 0314 	add.w	r3, r7, #20
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002460:	f004 f9de 	bl	8006820 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002464:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 8002468:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	481e      	ldr	r0, [pc, #120]	@ (80024f4 <MX_GPIO_Init+0x15c>)
 800247a:	f004 f9d1 	bl	8006820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002484:	2301      	movs	r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	4619      	mov	r1, r3
 8002496:	4816      	ldr	r0, [pc, #88]	@ (80024f0 <MX_GPIO_Init+0x158>)
 8002498:	f004 f9c2 	bl	8006820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 800249c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 0314 	add.w	r3, r7, #20
 80024ae:	4619      	mov	r1, r3
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024b4:	f004 f9b4 	bl	8006820 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 80024b8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80024bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c6:	f107 0314 	add.w	r3, r7, #20
 80024ca:	4619      	mov	r1, r3
 80024cc:	4808      	ldr	r0, [pc, #32]	@ (80024f0 <MX_GPIO_Init+0x158>)
 80024ce:	f004 f9a7 	bl	8006820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2028      	movs	r0, #40	@ 0x28
 80024d8:	f003 fe3b 	bl	8006152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024dc:	2028      	movs	r0, #40	@ 0x28
 80024de:	f003 fe52 	bl	8006186 <HAL_NVIC_EnableIRQ>

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	@ 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	48000800 	.word	0x48000800
 80024f4:	48000400 	.word	0x48000400

080024f8 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b096      	sub	sp, #88	@ 0x58
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	ed87 0a02 	vstr	s0, [r7, #8]
 8002504:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2201      	movs	r2, #1
 8002512:	2101      	movs	r1, #1
 8002514:	f009 fb49 	bl	800bbaa <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f009 ffb9 	bl	800c49e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8002538:	4619      	mov	r1, r3
 800253a:	4610      	mov	r0, r2
 800253c:	f009 ffaf 	bl	800c49e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f009 ffa5 	bl	800c49e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8002560:	4619      	mov	r1, r3
 8002562:	ed97 0a02 	vldr	s0, [r7, #8]
 8002566:	4610      	mov	r0, r2
 8002568:	f009 ff28 	bl	800c3bc <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800257e:	461a      	mov	r2, r3
 8002580:	f009 fea2 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002596:	461a      	mov	r2, r3
 8002598:	f009 facc 	bl	800bb34 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80025ae:	461a      	mov	r2, r3
 80025b0:	f009 fe8a 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80025c6:	461a      	mov	r2, r3
 80025c8:	f009 fe7e 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80025de:	461a      	mov	r2, r3
 80025e0:	f009 fe72 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80025f6:	4619      	mov	r1, r3
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	4610      	mov	r0, r2
 80025fe:	f009 fedd 	bl	800c3bc <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002614:	461a      	mov	r2, r3
 8002616:	f009 fa8d 	bl	800bb34 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800262c:	461a      	mov	r2, r3
 800262e:	f009 fe4b 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002644:	461a      	mov	r2, r3
 8002646:	f009 fe3f 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800265c:	461a      	mov	r2, r3
 800265e:	f009 fa69 	bl	800bb34 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800266e:	4619      	mov	r1, r3
 8002670:	4610      	mov	r0, r2
 8002672:	f009 fab2 	bl	800bbda <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002688:	461a      	mov	r2, r3
 800268a:	f009 fe1d 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80026a0:	461a      	mov	r2, r3
 80026a2:	f009 fe11 	bl	800c2c8 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80026b8:	461a      	mov	r2, r3
 80026ba:	f009 fe05 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80026d0:	461a      	mov	r2, r3
 80026d2:	f009 fea9 	bl	800c428 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80026e8:	461a      	mov	r2, r3
 80026ea:	f009 fded 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002700:	461a      	mov	r2, r3
 8002702:	f009 fa17 	bl	800bb34 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8002718:	461a      	mov	r2, r3
 800271a:	f009 fdd5 	bl	800c2c8 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800271e:	f107 0310 	add.w	r3, r7, #16
 8002722:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002726:	2204      	movs	r2, #4
 8002728:	2104      	movs	r1, #4
 800272a:	f009 fa3e 	bl	800bbaa <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800273a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800273e:	4619      	mov	r1, r3
 8002740:	f009 fdc2 	bl	800c2c8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800274a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800274e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002752:	4618      	mov	r0, r3
 8002754:	f009 fe68 	bl	800c428 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8002764:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002768:	4618      	mov	r0, r3
 800276a:	f009 fdad 	bl	800c2c8 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800277e:	ee07 3a90 	vmov	s15, r3
}
 8002782:	eeb0 0a67 	vmov.f32	s0, s15
 8002786:	3758      	adds	r7, #88	@ 0x58
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 800278c:	b5b0      	push	{r4, r5, r7, lr}
 800278e:	b0a4      	sub	sp, #144	@ 0x90
 8002790:	af00      	add	r7, sp, #0
 8002792:	6178      	str	r0, [r7, #20]
 8002794:	6139      	str	r1, [r7, #16]
 8002796:	60fa      	str	r2, [r7, #12]
 8002798:	ed87 0a02 	vstr	s0, [r7, #8]
 800279c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80027b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027d4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	677b      	str	r3, [r7, #116]	@ 0x74
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80027e6:	4bc6      	ldr	r3, [pc, #792]	@ (8002b00 <Kalman_Start+0x374>)
 80027e8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80027ec:	461d      	mov	r5, r3
 80027ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	605a      	str	r2, [r3, #4]
 800280c:	609a      	str	r2, [r3, #8]
 800280e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002820:	e028      	b.n	8002874 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8002822:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	6979      	ldr	r1, [r7, #20]
 8002830:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002834:	3314      	adds	r3, #20
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800283c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	3390      	adds	r3, #144	@ 0x90
 8002844:	443b      	add	r3, r7
 8002846:	3b64      	subs	r3, #100	@ 0x64
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	6979      	ldr	r1, [r7, #20]
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002850:	3398      	adds	r3, #152	@ 0x98
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800285e:	3304      	adds	r3, #4
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800286a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800286e:	3301      	adds	r3, #1
 8002870:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002874:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002878:	2b0f      	cmp	r3, #15
 800287a:	ddd2      	ble.n	8002822 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 800287c:	2300      	movs	r3, #0
 800287e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002882:	e03a      	b.n	80028fa <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8002884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	3390      	adds	r3, #144	@ 0x90
 800288c:	443b      	add	r3, r7
 800288e:	3b74      	subs	r3, #116	@ 0x74
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	6979      	ldr	r1, [r7, #20]
 8002894:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 800289e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	6979      	ldr	r1, [r7, #20]
 80028ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b0:	3324      	adds	r3, #36	@ 0x24
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80028b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3390      	adds	r3, #144	@ 0x90
 80028c0:	443b      	add	r3, r7
 80028c2:	3b14      	subs	r3, #20
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	6979      	ldr	r1, [r7, #20]
 80028c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028cc:	3328      	adds	r3, #40	@ 0x28
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80028d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	3390      	adds	r3, #144	@ 0x90
 80028dc:	443b      	add	r3, r7
 80028de:	3b24      	subs	r3, #36	@ 0x24
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	6979      	ldr	r1, [r7, #20]
 80028e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e8:	332c      	adds	r3, #44	@ 0x2c
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80028f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028f4:	3301      	adds	r3, #1
 80028f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80028fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028fe:	2b03      	cmp	r3, #3
 8002900:	ddc0      	ble.n	8002884 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2201      	movs	r2, #1
 800290c:	2104      	movs	r1, #4
 800290e:	f009 f94c 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	3310      	adds	r3, #16
 800291c:	2204      	movs	r2, #4
 800291e:	2104      	movs	r1, #4
 8002920:	f009 f943 	bl	800bbaa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	3350      	adds	r3, #80	@ 0x50
 800292e:	2204      	movs	r2, #4
 8002930:	2104      	movs	r1, #4
 8002932:	f009 f93a 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3390      	adds	r3, #144	@ 0x90
 8002940:	2201      	movs	r2, #1
 8002942:	2104      	movs	r1, #4
 8002944:	f009 f931 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	33a0      	adds	r3, #160	@ 0xa0
 8002952:	2204      	movs	r2, #4
 8002954:	2101      	movs	r1, #1
 8002956:	f009 f928 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	33b0      	adds	r3, #176	@ 0xb0
 8002964:	2201      	movs	r2, #1
 8002966:	2104      	movs	r1, #4
 8002968:	f009 f91f 	bl	800bbaa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	33c8      	adds	r3, #200	@ 0xc8
 8002976:	2204      	movs	r2, #4
 8002978:	2104      	movs	r1, #4
 800297a:	f009 f916 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800298a:	2201      	movs	r2, #1
 800298c:	2104      	movs	r1, #4
 800298e:	f009 f90c 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800299e:	2204      	movs	r2, #4
 80029a0:	2101      	movs	r1, #1
 80029a2:	f009 f902 	bl	800bbaa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029b2:	2204      	movs	r2, #4
 80029b4:	2104      	movs	r1, #4
 80029b6:	f009 f8f8 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029c6:	2204      	movs	r2, #4
 80029c8:	2104      	movs	r1, #4
 80029ca:	f009 f8ee 	bl	800bbaa <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80029da:	2201      	movs	r2, #1
 80029dc:	2104      	movs	r1, #4
 80029de:	f009 f8e4 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80029ee:	2201      	movs	r2, #1
 80029f0:	2104      	movs	r1, #4
 80029f2:	f009 f8da 	bl	800bbaa <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002a02:	2204      	movs	r2, #4
 8002a04:	2101      	movs	r1, #1
 8002a06:	f009 f8d0 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002a16:	2201      	movs	r2, #1
 8002a18:	2101      	movs	r1, #1
 8002a1a:	f009 f8c6 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	f009 f8bc 	bl	800bbaa <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2104      	movs	r1, #4
 8002a42:	f009 f8b2 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002a52:	2201      	movs	r2, #1
 8002a54:	2104      	movs	r1, #4
 8002a56:	f009 f8a8 	bl	800bbaa <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002a66:	2201      	movs	r2, #1
 8002a68:	2101      	movs	r1, #1
 8002a6a:	f009 f89e 	bl	800bbaa <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	f009 f894 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2101      	movs	r1, #1
 8002a92:	f009 f88a 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2104      	movs	r1, #4
 8002aa6:	f009 f880 	bl	800bbaa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f009 f876 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002aca:	2204      	movs	r2, #4
 8002acc:	2104      	movs	r1, #4
 8002ace:	f009 f86c 	bl	800bbaa <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	33c4      	adds	r3, #196	@ 0xc4
 8002adc:	2201      	movs	r2, #1
 8002ade:	2101      	movs	r1, #1
 8002ae0:	f009 f863 	bl	800bbaa <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002af0:	2201      	movs	r2, #1
 8002af2:	2101      	movs	r1, #1
 8002af4:	f009 f859 	bl	800bbaa <arm_mat_init_f32>
}
 8002af8:	bf00      	nop
 8002afa:	3790      	adds	r7, #144	@ 0x90
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bdb0      	pop	{r4, r5, r7, pc}
 8002b00:	0800da0c 	.word	0x0800da0c

08002b04 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b08:	f3bf 8f4f 	dsb	sy
}
 8002b0c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002b0e:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <__NVIC_SystemReset+0x24>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002b16:	4904      	ldr	r1, [pc, #16]	@ (8002b28 <__NVIC_SystemReset+0x24>)
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <__NVIC_SystemReset+0x28>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b1e:	f3bf 8f4f 	dsb	sy
}
 8002b22:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <__NVIC_SystemReset+0x20>
 8002b28:	e000ed00 	.word	0xe000ed00
 8002b2c:	05fa0004 	.word	0x05fa0004

08002b30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b34:	f001 fd49 	bl	80045ca <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b38:	f000 f83e 	bl	8002bb8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b3c:	f7ff fc2c 	bl	8002398 <MX_GPIO_Init>
	MX_DMA_Init();
 8002b40:	f7ff fbf0 	bl	8002324 <MX_DMA_Init>
	MX_ADC1_Init();
 8002b44:	f7ff fae2 	bl	800210c <MX_ADC1_Init>
	MX_TIM2_Init();
 8002b48:	f001 f840 	bl	8003bcc <MX_TIM2_Init>
	MX_TIM3_Init();
 8002b4c:	f001 f88c 	bl	8003c68 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002b50:	f001 f8e0 	bl	8003d14 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002b54:	f001 f934 	bl	8003dc0 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002b58:	f001 f980 	bl	8003e5c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8002b5c:	f001 fc02 	bl	8004364 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002b60:	f001 fa44 	bl	8003fec <MX_TIM16_Init>
	MX_TIM1_Init();
 8002b64:	f000 ff9e 	bl	8003aa4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002b68:	f000 f91e 	bl	8002da8 <plotter_begin>
//			trajectoryActive = true;
//
//			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
//		}
//		button_pressed_previous = b1;
		if (b1) {
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <main+0x78>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d002      	beq.n	8002b7a <main+0x4a>
			pen_down();
 8002b74:	f000 fb94 	bl	80032a0 <pen_down>
 8002b78:	e005      	b.n	8002b86 <main+0x56>
		} else if (b4) {
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002bac <main+0x7c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <main+0x56>
			pen_up();
 8002b82:	f000 fb7d 	bl	8003280 <pen_up>
		}

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <main+0x80>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002b92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b96:	f003 ffdd 	bl	8006b54 <HAL_GPIO_WritePin>

		if (b3) {
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <main+0x84>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0e4      	beq.n	8002b6c <main+0x3c>
			NVIC_SystemReset();
 8002ba2:	f7ff ffaf 	bl	8002b04 <__NVIC_SystemReset>
 8002ba6:	bf00      	nop
 8002ba8:	20001420 	.word	0x20001420
 8002bac:	2000142c 	.word	0x2000142c
 8002bb0:	20001424 	.word	0x20001424
 8002bb4:	20001428 	.word	0x20001428

08002bb8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b094      	sub	sp, #80	@ 0x50
 8002bbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002bbe:	f107 0318 	add.w	r3, r7, #24
 8002bc2:	2238      	movs	r2, #56	@ 0x38
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f009 fd60 	bl	800c68c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	609a      	str	r2, [r3, #8]
 8002bd6:	60da      	str	r2, [r3, #12]
 8002bd8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f003 ffea 	bl	8006bb4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002be0:	2302      	movs	r3, #2
 8002be2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bea:	2340      	movs	r3, #64	@ 0x40
 8002bec:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002bf6:	2304      	movs	r3, #4
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002bfa:	2355      	movs	r3, #85	@ 0x55
 8002bfc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c02:	2302      	movs	r3, #2
 8002c04:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c06:	2302      	movs	r3, #2
 8002c08:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002c0a:	f107 0318 	add.w	r3, r7, #24
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f004 f884 	bl	8006d1c <HAL_RCC_OscConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <SystemClock_Config+0x66>
		Error_Handler();
 8002c1a:	f000 f8bf 	bl	8002d9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002c1e:	230f      	movs	r3, #15
 8002c20:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c22:	2303      	movs	r3, #3
 8002c24:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002c32:	1d3b      	adds	r3, r7, #4
 8002c34:	2104      	movs	r1, #4
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fb82 	bl	8007340 <HAL_RCC_ClockConfig>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <SystemClock_Config+0x8e>
		Error_Handler();
 8002c42:	f000 f8ab 	bl	8002d9c <Error_Handler>
	}
}
 8002c46:	bf00      	nop
 8002c48:	3750      	adds	r7, #80	@ 0x50
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	80fb      	strh	r3, [r7, #6]

}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a37      	ldr	r2, [pc, #220]	@ (8002d60 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d160      	bne.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0xd2>
		update_sensors();
 8002c88:	f000 fa58 	bl	800313c <update_sensors>
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&revolute_motor, 2000, cmd_ux);
//
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8002c8c:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8002d64 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002c90:	4835      	ldr	r0, [pc, #212]	@ (8002d68 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002c92:	f000 fc9d 	bl	80035d0 <SIGNAL_generate>
 8002c96:	eef0 7a40 	vmov.f32	s15, s0
 8002c9a:	4b34      	ldr	r3, [pc, #208]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002c9c:	edc3 7a00 	vstr	s15, [r3]
		sine_sample = SIGNAL_generate(&sine_sg, 0.001f);
 8002ca0:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8002d64 <HAL_TIM_PeriodElapsedCallback+0xec>
 8002ca4:	4832      	ldr	r0, [pc, #200]	@ (8002d70 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002ca6:	f000 fc93 	bl	80035d0 <SIGNAL_generate>
 8002caa:	eef0 7a40 	vmov.f32	s15, s0
 8002cae:	4b31      	ldr	r3, [pc, #196]	@ (8002d74 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8002cb0:	edc3 7a00 	vstr	s15, [r3]
//
//		lp_filt = FIR_process(&prismatic_lp_velocity,prismatic_encoder.radps);
//
//		MDXX_set_duty(&prismatic_motor, 2000, square_sample);

		QEI_get_diff_count(&revolute_encoder);
 8002cb4:	4830      	ldr	r0, [pc, #192]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002cb6:	f7ff f853 	bl	8001d60 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8002cba:	482f      	ldr	r0, [pc, #188]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002cbc:	f7ff f930 	bl	8001f20 <QEI_compute_data>
		vin = square_sample * 12.0 / 65535.0;
 8002cc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fc0b 	bl	80004e0 <__aeabi_f2d>
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b2b      	ldr	r3, [pc, #172]	@ (8002d7c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8002cd0:	f7fd fc5e 	bl	8000590 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	a31e      	add	r3, pc, #120	@ (adr r3, 8002d58 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f7fd fd7f 	bl	80007e4 <__aeabi_ddiv>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4610      	mov	r0, r2
 8002cec:	4619      	mov	r1, r3
 8002cee:	f7fd fe81 	bl	80009f4 <__aeabi_d2f>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002cf6:	6013      	str	r3, [r2, #0]

		kal_flit = SteadyStateKalmanFilter(&revolute_kalman, vin,
 8002cf8:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d00:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8002d04:	eef0 0a47 	vmov.f32	s1, s14
 8002d08:	eeb0 0a67 	vmov.f32	s0, s15
 8002d0c:	481d      	ldr	r0, [pc, #116]	@ (8002d84 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8002d0e:	f7ff fbf3 	bl	80024f8 <SteadyStateKalmanFilter>
 8002d12:	eef0 7a40 	vmov.f32	s15, s0
 8002d16:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]
				revolute_encoder.rads);

		lp_filt = FIR_process(&revolute_lp_velocity, revolute_encoder.radps);
 8002d1c:	4b16      	ldr	r3, [pc, #88]	@ (8002d78 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002d22:	eeb0 0a67 	vmov.f32	s0, s15
 8002d26:	4819      	ldr	r0, [pc, #100]	@ (8002d8c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8002d28:	f7fe fc64 	bl	80015f4 <FIR_process>
 8002d2c:	eef0 7a40 	vmov.f32	s15, s0
 8002d30:	4b17      	ldr	r3, [pc, #92]	@ (8002d90 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8002d32:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_duty(&revolute_motor, 2000, square_sample);
 8002d36:	4b0d      	ldr	r3, [pc, #52]	@ (8002d6c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	eef0 0a67 	vmov.f32	s1, s15
 8002d40:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002d94 <HAL_TIM_PeriodElapsedCallback+0x11c>
 8002d44:	4814      	ldr	r0, [pc, #80]	@ (8002d98 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8002d46:	f7fe f941 	bl	8000fcc <MDXX_set_duty>
	}
}
 8002d4a:	bf00      	nop
 8002d4c:	3708      	adds	r7, #8
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	f3af 8000 	nop.w
 8002d58:	00000000 	.word	0x00000000
 8002d5c:	40efffe0 	.word	0x40efffe0
 8002d60:	20001518 	.word	0x20001518
 8002d64:	3a83126f 	.word	0x3a83126f
 8002d68:	200005a8 	.word	0x200005a8
 8002d6c:	200002ac 	.word	0x200002ac
 8002d70:	200004dc 	.word	0x200004dc
 8002d74:	200002b0 	.word	0x200002b0
 8002d78:	20000398 	.word	0x20000398
 8002d7c:	40280000 	.word	0x40280000
 8002d80:	200002a8 	.word	0x200002a8
 8002d84:	200009e0 	.word	0x200009e0
 8002d88:	200002a0 	.word	0x200002a0
 8002d8c:	20000648 	.word	0x20000648
 8002d90:	200002a4 	.word	0x200002a4
 8002d94:	44fa0000 	.word	0x44fa0000
 8002d98:	20000300 	.word	0x20000300

08002d9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002da0:	b672      	cpsid	i
}
 8002da2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <Error_Handler+0x8>

08002da8 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002dae:	2100      	movs	r1, #0
 8002db0:	48a8      	ldr	r0, [pc, #672]	@ (8003054 <plotter_begin+0x2ac>)
 8002db2:	f000 faeb 	bl	800338c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002db6:	eddf 2aa8 	vldr	s5, [pc, #672]	@ 8003058 <plotter_begin+0x2b0>
 8002dba:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 800305c <plotter_begin+0x2b4>
 8002dbe:	eddf 1aa8 	vldr	s3, [pc, #672]	@ 8003060 <plotter_begin+0x2b8>
 8002dc2:	ed9f 1aa7 	vldr	s2, [pc, #668]	@ 8003060 <plotter_begin+0x2b8>
 8002dc6:	eddf 0aa7 	vldr	s1, [pc, #668]	@ 8003064 <plotter_begin+0x2bc>
 8002dca:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8003058 <plotter_begin+0x2b0>
 8002dce:	48a1      	ldr	r0, [pc, #644]	@ (8003054 <plotter_begin+0x2ac>)
 8002dd0:	f000 fb3a 	bl	8003448 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	48a4      	ldr	r0, [pc, #656]	@ (8003068 <plotter_begin+0x2c0>)
 8002dd8:	f000 fad8 	bl	800338c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 8002ddc:	eddf 2aa3 	vldr	s5, [pc, #652]	@ 800306c <plotter_begin+0x2c4>
 8002de0:	ed9f 2aa3 	vldr	s4, [pc, #652]	@ 8003070 <plotter_begin+0x2c8>
 8002de4:	2100      	movs	r1, #0
 8002de6:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002dea:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002dee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002df2:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 800306c <plotter_begin+0x2c4>
 8002df6:	489c      	ldr	r0, [pc, #624]	@ (8003068 <plotter_begin+0x2c0>)
 8002df8:	f000 fb51 	bl	800349e <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	489d      	ldr	r0, [pc, #628]	@ (8003074 <plotter_begin+0x2cc>)
 8002e00:	f000 fac4 	bl	800338c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 8002e04:	eddf 2a99 	vldr	s5, [pc, #612]	@ 800306c <plotter_begin+0x2c4>
 8002e08:	ed9f 2a99 	vldr	s4, [pc, #612]	@ 8003070 <plotter_begin+0x2c8>
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002e12:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002e16:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e1a:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 800306c <plotter_begin+0x2c4>
 8002e1e:	4895      	ldr	r0, [pc, #596]	@ (8003074 <plotter_begin+0x2cc>)
 8002e20:	f000 fb3d 	bl	800349e <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002e24:	2102      	movs	r1, #2
 8002e26:	4894      	ldr	r0, [pc, #592]	@ (8003078 <plotter_begin+0x2d0>)
 8002e28:	f000 fab0 	bl	800338c <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002e2c:	ed9f 3a8a 	vldr	s6, [pc, #552]	@ 8003058 <plotter_begin+0x2b0>
 8002e30:	eddf 2a8a 	vldr	s5, [pc, #552]	@ 800305c <plotter_begin+0x2b4>
 8002e34:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 8003060 <plotter_begin+0x2b8>
 8002e38:	eddf 1a89 	vldr	s3, [pc, #548]	@ 8003060 <plotter_begin+0x2b8>
 8002e3c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002e40:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8003064 <plotter_begin+0x2bc>
 8002e44:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8003058 <plotter_begin+0x2b0>
 8002e48:	488b      	ldr	r0, [pc, #556]	@ (8003078 <plotter_begin+0x2d0>)
 8002e4a:	f000 fb5c 	bl	8003506 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002e4e:	2103      	movs	r1, #3
 8002e50:	488a      	ldr	r0, [pc, #552]	@ (800307c <plotter_begin+0x2d4>)
 8002e52:	f000 fa9b 	bl	800338c <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002e56:	eddf 3a85 	vldr	s7, [pc, #532]	@ 800306c <plotter_begin+0x2c4>
 8002e5a:	ed9f 3a85 	vldr	s6, [pc, #532]	@ 8003070 <plotter_begin+0x2c8>
 8002e5e:	eddf 2a80 	vldr	s5, [pc, #512]	@ 8003060 <plotter_begin+0x2b8>
 8002e62:	ed9f 2a7f 	vldr	s4, [pc, #508]	@ 8003060 <plotter_begin+0x2b8>
 8002e66:	eddf 1a81 	vldr	s3, [pc, #516]	@ 800306c <plotter_begin+0x2c4>
 8002e6a:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8003070 <plotter_begin+0x2c8>
 8002e6e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e72:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800306c <plotter_begin+0x2c4>
 8002e76:	4881      	ldr	r0, [pc, #516]	@ (800307c <plotter_begin+0x2d4>)
 8002e78:	f000 fb75 	bl	8003566 <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002e7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e88:	497d      	ldr	r1, [pc, #500]	@ (8003080 <plotter_begin+0x2d8>)
 8002e8a:	487e      	ldr	r0, [pc, #504]	@ (8003084 <plotter_begin+0x2dc>)
 8002e8c:	f7fe ff16 	bl	8001cbc <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002e90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e9c:	497a      	ldr	r1, [pc, #488]	@ (8003088 <plotter_begin+0x2e0>)
 8002e9e:	487b      	ldr	r0, [pc, #492]	@ (800308c <plotter_begin+0x2e4>)
 8002ea0:	f7fe ff0c 	bl	8001cbc <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8002ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4977      	ldr	r1, [pc, #476]	@ (8003090 <plotter_begin+0x2e8>)
 8002eb2:	4878      	ldr	r0, [pc, #480]	@ (8003094 <plotter_begin+0x2ec>)
 8002eb4:	f7fe f866 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8002eb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <plotter_begin+0x2f0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4973      	ldr	r1, [pc, #460]	@ (8003090 <plotter_begin+0x2e8>)
 8002ec4:	4875      	ldr	r0, [pc, #468]	@ (800309c <plotter_begin+0x2f4>)
 8002ec6:	f7fe f85d 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002eca:	220c      	movs	r2, #12
 8002ecc:	4974      	ldr	r1, [pc, #464]	@ (80030a0 <plotter_begin+0x2f8>)
 8002ece:	4875      	ldr	r0, [pc, #468]	@ (80030a4 <plotter_begin+0x2fc>)
 8002ed0:	f7fe fcc8 	bl	8001864 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002ed4:	eddf 0a62 	vldr	s1, [pc, #392]	@ 8003060 <plotter_begin+0x2b8>
 8002ed8:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 80030a8 <plotter_begin+0x300>
 8002edc:	486d      	ldr	r0, [pc, #436]	@ (8003094 <plotter_begin+0x2ec>)
 8002ede:	f7fe f94f 	bl	8001180 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002ee2:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8003060 <plotter_begin+0x2b8>
 8002ee6:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 80030a8 <plotter_begin+0x300>
 8002eea:	486c      	ldr	r0, [pc, #432]	@ (800309c <plotter_begin+0x2f4>)
 8002eec:	f7fe f948 	bl	8001180 <MDXX_set_range>
	pen_up();
 8002ef0:	f000 f9c6 	bl	8003280 <pen_up>

//  Low Pass PID Control
	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 8002ef4:	4b6d      	ldr	r3, [pc, #436]	@ (80030ac <plotter_begin+0x304>)
 8002ef6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	f7fd fd79 	bl	80009f4 <__aeabi_d2f>
 8002f02:	4603      	mov	r3, r0
 8002f04:	ee01 3a90 	vmov	s3, r3
 8002f08:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f0c:	eddf 0a68 	vldr	s1, [pc, #416]	@ 80030b0 <plotter_begin+0x308>
 8002f10:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002f14:	4867      	ldr	r0, [pc, #412]	@ (80030b4 <plotter_begin+0x30c>)
 8002f16:	f7fe f80b 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 8002f1a:	4b64      	ldr	r3, [pc, #400]	@ (80030ac <plotter_begin+0x304>)
 8002f1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f7fd fd66 	bl	80009f4 <__aeabi_d2f>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	ee01 3a90 	vmov	s3, r3
 8002f2e:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 8003060 <plotter_begin+0x2b8>
 8002f32:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8002f36:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80030b8 <plotter_begin+0x310>
 8002f3a:	4860      	ldr	r0, [pc, #384]	@ (80030bc <plotter_begin+0x314>)
 8002f3c:	f7fd fff8 	bl	8000f30 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 2, 1e-7, 1, ZGX45RGG_150RPM_Constant.U_max);
 8002f40:	4b5f      	ldr	r3, [pc, #380]	@ (80030c0 <plotter_begin+0x318>)
 8002f42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fd53 	bl	80009f4 <__aeabi_d2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	ee01 3a90 	vmov	s3, r3
 8002f54:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f58:	eddf 0a55 	vldr	s1, [pc, #340]	@ 80030b0 <plotter_begin+0x308>
 8002f5c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002f60:	4858      	ldr	r0, [pc, #352]	@ (80030c4 <plotter_begin+0x31c>)
 8002f62:	f7fd ffe5 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 50, 0, ZGX45RGG_150RPM_Constant.U_max);
 8002f66:	4b56      	ldr	r3, [pc, #344]	@ (80030c0 <plotter_begin+0x318>)
 8002f68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	4619      	mov	r1, r3
 8002f70:	f7fd fd40 	bl	80009f4 <__aeabi_d2f>
 8002f74:	4603      	mov	r3, r0
 8002f76:	ee01 3a90 	vmov	s3, r3
 8002f7a:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8003060 <plotter_begin+0x2b8>
 8002f7e:	eddf 0a52 	vldr	s1, [pc, #328]	@ 80030c8 <plotter_begin+0x320>
 8002f82:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80030cc <plotter_begin+0x324>
 8002f86:	4852      	ldr	r0, [pc, #328]	@ (80030d0 <plotter_begin+0x328>)
 8002f88:	f7fd ffd2 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002f8c:	494c      	ldr	r1, [pc, #304]	@ (80030c0 <plotter_begin+0x318>)
 8002f8e:	4851      	ldr	r0, [pc, #324]	@ (80030d4 <plotter_begin+0x32c>)
 8002f90:	f7fe f9d0 	bl	8001334 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002f94:	4945      	ldr	r1, [pc, #276]	@ (80030ac <plotter_begin+0x304>)
 8002f96:	4850      	ldr	r0, [pc, #320]	@ (80030d8 <plotter_begin+0x330>)
 8002f98:	f7fe f9ec 	bl	8001374 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8002f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80030dc <plotter_begin+0x334>)
 8002f9e:	4948      	ldr	r1, [pc, #288]	@ (80030c0 <plotter_begin+0x318>)
 8002fa0:	484f      	ldr	r0, [pc, #316]	@ (80030e0 <plotter_begin+0x338>)
 8002fa2:	f7fe f9d5 	bl	8001350 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8002fa6:	4a4d      	ldr	r2, [pc, #308]	@ (80030dc <plotter_begin+0x334>)
 8002fa8:	4940      	ldr	r1, [pc, #256]	@ (80030ac <plotter_begin+0x304>)
 8002faa:	484e      	ldr	r0, [pc, #312]	@ (80030e4 <plotter_begin+0x33c>)
 8002fac:	f7fe f9f0 	bl	8001390 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 80030e8 <plotter_begin+0x340>
 8002fb8:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80030ec <plotter_begin+0x344>
 8002fbc:	2328      	movs	r3, #40	@ 0x28
 8002fbe:	4a4c      	ldr	r2, [pc, #304]	@ (80030f0 <plotter_begin+0x348>)
 8002fc0:	494c      	ldr	r1, [pc, #304]	@ (80030f4 <plotter_begin+0x34c>)
 8002fc2:	484d      	ldr	r0, [pc, #308]	@ (80030f8 <plotter_begin+0x350>)
 8002fc4:	f7fd fefc 	bl	8000dc0 <ADC_DMA_Init>
			ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8002fc8:	484b      	ldr	r0, [pc, #300]	@ (80030f8 <plotter_begin+0x350>)
 8002fca:	f7fd ff2e 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002fce:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80030cc <plotter_begin+0x324>
 8002fd2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002fd6:	211f      	movs	r1, #31
 8002fd8:	4848      	ldr	r0, [pc, #288]	@ (80030fc <plotter_begin+0x354>)
 8002fda:	f7fe f9eb 	bl	80013b4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002fde:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 80030cc <plotter_begin+0x324>
 8002fe2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002fe6:	211f      	movs	r1, #31
 8002fe8:	4845      	ldr	r0, [pc, #276]	@ (8003100 <plotter_begin+0x358>)
 8002fea:	f7fe f9e3 	bl	80013b4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002fee:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80030cc <plotter_begin+0x324>
 8002ff2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002ff6:	211f      	movs	r1, #31
 8002ff8:	4842      	ldr	r0, [pc, #264]	@ (8003104 <plotter_begin+0x35c>)
 8002ffa:	f7fe f9db 	bl	80013b4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002ffe:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80030cc <plotter_begin+0x324>
 8003002:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003006:	211f      	movs	r1, #31
 8003008:	483f      	ldr	r0, [pc, #252]	@ (8003108 <plotter_begin+0x360>)
 800300a:	f7fe f9d3 	bl	80013b4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q, REVOLUTE_R);
 800300e:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 800310c <plotter_begin+0x364>
 8003012:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003016:	4a3e      	ldr	r2, [pc, #248]	@ (8003110 <plotter_begin+0x368>)
 8003018:	493e      	ldr	r1, [pc, #248]	@ (8003114 <plotter_begin+0x36c>)
 800301a:	483f      	ldr	r0, [pc, #252]	@ (8003118 <plotter_begin+0x370>)
 800301c:	f7ff fbb6 	bl	800278c <Kalman_Start>
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q, PRISMATIC_R);
 8003020:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 800310c <plotter_begin+0x364>
 8003024:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003028:	4a3c      	ldr	r2, [pc, #240]	@ (800311c <plotter_begin+0x374>)
 800302a:	493d      	ldr	r1, [pc, #244]	@ (8003120 <plotter_begin+0x378>)
 800302c:	483d      	ldr	r0, [pc, #244]	@ (8003124 <plotter_begin+0x37c>)
 800302e:	f7ff fbad 	bl	800278c <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8003032:	23c8      	movs	r3, #200	@ 0xc8
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2315      	movs	r3, #21
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <plotter_begin+0x380>)
 800303c:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <plotter_begin+0x384>)
 800303e:	493c      	ldr	r1, [pc, #240]	@ (8003130 <plotter_begin+0x388>)
 8003040:	483c      	ldr	r0, [pc, #240]	@ (8003134 <plotter_begin+0x38c>)
 8003042:	f7fe fba7 	bl	8001794 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003046:	483c      	ldr	r0, [pc, #240]	@ (8003138 <plotter_begin+0x390>)
 8003048:	f004 feb8 	bl	8007dbc <HAL_TIM_Base_Start_IT>
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	200004dc 	.word	0x200004dc
 8003058:	477fff00 	.word	0x477fff00
 800305c:	c77fff00 	.word	0xc77fff00
 8003060:	00000000 	.word	0x00000000
 8003064:	3dcccccd 	.word	0x3dcccccd
 8003068:	20000520 	.word	0x20000520
 800306c:	3e6eeeef 	.word	0x3e6eeeef
 8003070:	be6eeeef 	.word	0xbe6eeeef
 8003074:	20000564 	.word	0x20000564
 8003078:	200005a8 	.word	0x200005a8
 800307c:	200005ec 	.word	0x200005ec
 8003080:	200016b0 	.word	0x200016b0
 8003084:	2000034c 	.word	0x2000034c
 8003088:	200015e4 	.word	0x200015e4
 800308c:	20000398 	.word	0x20000398
 8003090:	20001848 	.word	0x20001848
 8003094:	200002b4 	.word	0x200002b4
 8003098:	48000800 	.word	0x48000800
 800309c:	20000300 	.word	0x20000300
 80030a0:	2000144c 	.word	0x2000144c
 80030a4:	200004ac 	.word	0x200004ac
 80030a8:	44fa0000 	.word	0x44fa0000
 80030ac:	20000048 	.word	0x20000048
 80030b0:	33d6bf95 	.word	0x33d6bf95
 80030b4:	200003e4 	.word	0x200003e4
 80030b8:	43fa0000 	.word	0x43fa0000
 80030bc:	20000410 	.word	0x20000410
 80030c0:	20000000 	.word	0x20000000
 80030c4:	2000043c 	.word	0x2000043c
 80030c8:	42480000 	.word	0x42480000
 80030cc:	447a0000 	.word	0x447a0000
 80030d0:	20000468 	.word	0x20000468
 80030d4:	200004a0 	.word	0x200004a0
 80030d8:	20000494 	.word	0x20000494
 80030dc:	20000090 	.word	0x20000090
 80030e0:	200004a4 	.word	0x200004a4
 80030e4:	20000498 	.word	0x20000498
 80030e8:	457ff000 	.word	0x457ff000
 80030ec:	40533333 	.word	0x40533333
 80030f0:	20000d60 	.word	0x20000d60
 80030f4:	200001d4 	.word	0x200001d4
 80030f8:	200004c4 	.word	0x200004c4
 80030fc:	2000063c 	.word	0x2000063c
 8003100:	20000630 	.word	0x20000630
 8003104:	20000654 	.word	0x20000654
 8003108:	20000648 	.word	0x20000648
 800310c:	3d4ccccd 	.word	0x3d4ccccd
 8003110:	20000148 	.word	0x20000148
 8003114:	20000108 	.word	0x20000108
 8003118:	200009e0 	.word	0x200009e0
 800311c:	200000f8 	.word	0x200000f8
 8003120:	200000b8 	.word	0x200000b8
 8003124:	20000660 	.word	0x20000660
 8003128:	20001288 	.word	0x20001288
 800312c:	20001914 	.word	0x20001914
 8003130:	200019e0 	.word	0x200019e0
 8003134:	20000db0 	.word	0x20000db0
 8003138:	20001518 	.word	0x20001518

0800313c <update_sensors>:

void update_sensors() {
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8003140:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003144:	2106      	movs	r1, #6
 8003146:	483f      	ldr	r0, [pc, #252]	@ (8003244 <update_sensors+0x108>)
 8003148:	f7fd feca 	bl	8000ee0 <ADC_DMA_GetJoystick>
 800314c:	eef0 7a40 	vmov.f32	s15, s0
 8003150:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <update_sensors+0x10c>)
 8003152:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8003156:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800315a:	2107      	movs	r1, #7
 800315c:	4839      	ldr	r0, [pc, #228]	@ (8003244 <update_sensors+0x108>)
 800315e:	f7fd febf 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8003162:	eef0 7a40 	vmov.f32	s15, s0
 8003166:	4b39      	ldr	r3, [pc, #228]	@ (800324c <update_sensors+0x110>)
 8003168:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 800316c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003170:	4837      	ldr	r0, [pc, #220]	@ (8003250 <update_sensors+0x114>)
 8003172:	f003 fcd7 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	4b33      	ldr	r3, [pc, #204]	@ (8003254 <update_sensors+0x118>)
 8003186:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	4833      	ldr	r0, [pc, #204]	@ (8003258 <update_sensors+0x11c>)
 800318c:	f003 fcca 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	461a      	mov	r2, r3
 800319e:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <update_sensors+0x120>)
 80031a0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 80031a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031a6:	482a      	ldr	r0, [pc, #168]	@ (8003250 <update_sensors+0x114>)
 80031a8:	f003 fcbc 	bl	8006b24 <HAL_GPIO_ReadPin>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	bf0c      	ite	eq
 80031b2:	2301      	moveq	r3, #1
 80031b4:	2300      	movne	r3, #0
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b29      	ldr	r3, [pc, #164]	@ (8003260 <update_sensors+0x124>)
 80031bc:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 80031be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80031c2:	4823      	ldr	r0, [pc, #140]	@ (8003250 <update_sensors+0x114>)
 80031c4:	f003 fcae 	bl	8006b24 <HAL_GPIO_ReadPin>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	bf0c      	ite	eq
 80031ce:	2301      	moveq	r3, #1
 80031d0:	2300      	movne	r3, #0
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	461a      	mov	r2, r3
 80031d6:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <update_sensors+0x128>)
 80031d8:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80031da:	2120      	movs	r1, #32
 80031dc:	481e      	ldr	r0, [pc, #120]	@ (8003258 <update_sensors+0x11c>)
 80031de:	f003 fca1 	bl	8006b24 <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b20      	ldr	r3, [pc, #128]	@ (8003268 <update_sensors+0x12c>)
 80031e8:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 80031ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80031ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031f2:	f003 fc97 	bl	8006b24 <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	4b1c      	ldr	r3, [pc, #112]	@ (800326c <update_sensors+0x130>)
 80031fc:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 80031fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003202:	4815      	ldr	r0, [pc, #84]	@ (8003258 <update_sensors+0x11c>)
 8003204:	f003 fc8e 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	461a      	mov	r2, r3
 800320c:	4b18      	ldr	r3, [pc, #96]	@ (8003270 <update_sensors+0x134>)
 800320e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8003210:	2102      	movs	r1, #2
 8003212:	4811      	ldr	r0, [pc, #68]	@ (8003258 <update_sensors+0x11c>)
 8003214:	f003 fc86 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	4b15      	ldr	r3, [pc, #84]	@ (8003274 <update_sensors+0x138>)
 800321e:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8003220:	2104      	movs	r1, #4
 8003222:	480d      	ldr	r0, [pc, #52]	@ (8003258 <update_sensors+0x11c>)
 8003224:	f003 fc7e 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	4b12      	ldr	r3, [pc, #72]	@ (8003278 <update_sensors+0x13c>)
 800322e:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8003230:	2110      	movs	r1, #16
 8003232:	4809      	ldr	r0, [pc, #36]	@ (8003258 <update_sensors+0x11c>)
 8003234:	f003 fc76 	bl	8006b24 <HAL_GPIO_ReadPin>
 8003238:	4603      	mov	r3, r0
 800323a:	461a      	mov	r2, r3
 800323c:	4b0f      	ldr	r3, [pc, #60]	@ (800327c <update_sensors+0x140>)
 800323e:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	200004c4 	.word	0x200004c4
 8003248:	20001418 	.word	0x20001418
 800324c:	2000141c 	.word	0x2000141c
 8003250:	48000800 	.word	0x48000800
 8003254:	20001420 	.word	0x20001420
 8003258:	48000400 	.word	0x48000400
 800325c:	20001424 	.word	0x20001424
 8003260:	20001428 	.word	0x20001428
 8003264:	2000142c 	.word	0x2000142c
 8003268:	20001430 	.word	0x20001430
 800326c:	20001438 	.word	0x20001438
 8003270:	2000143c 	.word	0x2000143c
 8003274:	20001440 	.word	0x20001440
 8003278:	20001444 	.word	0x20001444
 800327c:	20001434 	.word	0x20001434

08003280 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8003284:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8003288:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003298 <pen_up+0x18>
 800328c:	4803      	ldr	r0, [pc, #12]	@ (800329c <pen_up+0x1c>)
 800328e:	f7fe fb0b 	bl	80018a8 <PWM_write_duty>
}
 8003292:	bf00      	nop
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	42480000 	.word	0x42480000
 800329c:	200004ac 	.word	0x200004ac

080032a0 <pen_down>:

void pen_down() {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 80032a4:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80032a8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80032b8 <pen_down+0x18>
 80032ac:	4803      	ldr	r0, [pc, #12]	@ (80032bc <pen_down+0x1c>)
 80032ae:	f7fe fafb 	bl	80018a8 <PWM_write_duty>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	42480000 	.word	0x42480000
 80032bc:	200004ac 	.word	0x200004ac

080032c0 <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 80032c0:	b480      	push	{r7}
 80032c2:	b085      	sub	sp, #20
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 80032ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80032ce:	eef0 7ae7 	vabs.f32	s15, s15
 80032d2:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 80032d6:	4b17      	ldr	r3, [pc, #92]	@ (8003334 <wrap_phase+0x74>)
 80032d8:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 80032da:	e007      	b.n	80032ec <wrap_phase+0x2c>
        phase -= two_pi;
 80032dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80032e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e8:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 80032ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80032f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fc:	dcee      	bgt.n	80032dc <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 80032fe:	e007      	b.n	8003310 <wrap_phase+0x50>
        phase += two_pi;
 8003300:	ed97 7a01 	vldr	s14, [r7, #4]
 8003304:	edd7 7a03 	vldr	s15, [r7, #12]
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 8003310:	edd7 7a01 	vldr	s15, [r7, #4]
 8003314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d4f0      	bmi.n	8003300 <wrap_phase+0x40>
    }
    return phase;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	ee07 3a90 	vmov	s15, r3
}
 8003324:	eeb0 0a67 	vmov.f32	s0, s15
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40c90fdb 	.word	0x40c90fdb

08003338 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003342:	edc7 0a02 	vstr	s1, [r7, #8]
 8003346:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 800334a:	ed97 7a03 	vldr	s14, [r7, #12]
 800334e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003352:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	d501      	bpl.n	8003360 <limit_setpoint+0x28>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	e00b      	b.n	8003378 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 8003360:	ed97 7a03 	vldr	s14, [r7, #12]
 8003364:	edd7 7a01 	vldr	s15, [r7, #4]
 8003368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	dd01      	ble.n	8003376 <limit_setpoint+0x3e>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	e000      	b.n	8003378 <limit_setpoint+0x40>
    return value;
 8003376:	68fb      	ldr	r3, [r7, #12]
}
 8003378:	ee07 3a90 	vmov	s15, r3
 800337c:	eeb0 0a67 	vmov.f32	s0, s15
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033a4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033ac:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003440 <SIGNAL_init+0xb4>)
 80033d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d828      	bhi.n	8003434 <SIGNAL_init+0xa8>
 80033e2:	a201      	add	r2, pc, #4	@ (adr r2, 80033e8 <SIGNAL_init+0x5c>)
 80033e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e8:	08003433 	.word	0x08003433
 80033ec:	080033f9 	.word	0x080033f9
 80033f0:	08003417 	.word	0x08003417
 80033f4:	08003421 	.word	0x08003421
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003404:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a0e      	ldr	r2, [pc, #56]	@ (8003444 <SIGNAL_init+0xb8>)
 800340a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003412:	621a      	str	r2, [r3, #32]
            break;
 8003414:	e00e      	b.n	8003434 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800341c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800341e:	e009      	b.n	8003434 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003430:	e000      	b.n	8003434 <SIGNAL_init+0xa8>
            break;
 8003432:	bf00      	nop
    }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	bf800000 	.word	0xbf800000
 8003444:	41200000 	.word	0x41200000

08003448 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003448:	b480      	push	{r7}
 800344a:	b089      	sub	sp, #36	@ 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	61f8      	str	r0, [r7, #28]
 8003450:	ed87 0a06 	vstr	s0, [r7, #24]
 8003454:	edc7 0a05 	vstr	s1, [r7, #20]
 8003458:	ed87 1a04 	vstr	s2, [r7, #16]
 800345c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003460:	ed87 2a02 	vstr	s4, [r7, #8]
 8003464:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003492:	bf00      	nop
 8003494:	3724      	adds	r7, #36	@ 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 800349e:	b480      	push	{r7}
 80034a0:	b089      	sub	sp, #36	@ 0x24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	61f8      	str	r0, [r7, #28]
 80034a6:	ed87 0a06 	vstr	s0, [r7, #24]
 80034aa:	edc7 0a05 	vstr	s1, [r7, #20]
 80034ae:	ed87 1a04 	vstr	s2, [r7, #16]
 80034b2:	edc7 1a03 	vstr	s3, [r7, #12]
 80034b6:	460b      	mov	r3, r1
 80034b8:	ed87 2a01 	vstr	s4, [r7, #4]
 80034bc:	edc7 2a00 	vstr	s5, [r7]
 80034c0:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	7afa      	ldrb	r2, [r7, #11]
 80034e4:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80034fa:	bf00      	nop
 80034fc:	3724      	adds	r7, #36	@ 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003506:	b480      	push	{r7}
 8003508:	b089      	sub	sp, #36	@ 0x24
 800350a:	af00      	add	r7, sp, #0
 800350c:	61f8      	str	r0, [r7, #28]
 800350e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003512:	edc7 0a05 	vstr	s1, [r7, #20]
 8003516:	ed87 1a04 	vstr	s2, [r7, #16]
 800351a:	edc7 1a03 	vstr	s3, [r7, #12]
 800351e:	ed87 2a02 	vstr	s4, [r7, #8]
 8003522:	edc7 2a01 	vstr	s5, [r7, #4]
 8003526:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800355a:	bf00      	nop
 800355c:	3724      	adds	r7, #36	@ 0x24
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003566:	b480      	push	{r7}
 8003568:	b08b      	sub	sp, #44	@ 0x2c
 800356a:	af00      	add	r7, sp, #0
 800356c:	6278      	str	r0, [r7, #36]	@ 0x24
 800356e:	ed87 0a08 	vstr	s0, [r7, #32]
 8003572:	edc7 0a07 	vstr	s1, [r7, #28]
 8003576:	ed87 1a06 	vstr	s2, [r7, #24]
 800357a:	edc7 1a05 	vstr	s3, [r7, #20]
 800357e:	ed87 2a04 	vstr	s4, [r7, #16]
 8003582:	edc7 2a03 	vstr	s5, [r7, #12]
 8003586:	ed87 3a02 	vstr	s6, [r7, #8]
 800358a:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	2203      	movs	r2, #3
 8003592:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003596:	6a3a      	ldr	r2, [r7, #32]
 8003598:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80035c4:	bf00      	nop
 80035c6:	372c      	adds	r7, #44	@ 0x2c
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 80035d0:	b580      	push	{r7, lr}
 80035d2:	ed2d 8b02 	vpush	{d8}
 80035d6:	b08c      	sub	sp, #48	@ 0x30
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 80035e6:	4bb2      	ldr	r3, [pc, #712]	@ (80038b0 <SIGNAL_generate+0x2e0>)
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80035f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80035fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035fe:	edd7 7a00 	vldr	s15, [r7]
 8003602:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003606:	ee77 7a27 	vadd.f32	s15, s14, s15
 800360a:	eeb0 0a67 	vmov.f32	s0, s15
 800360e:	f7ff fe57 	bl	80032c0 <wrap_phase>
 8003612:	eef0 7a40 	vmov.f32	s15, s0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003622:	edd7 7a00 	vldr	s15, [r7]
 8003626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b03      	cmp	r3, #3
 8003636:	f200 8123 	bhi.w	8003880 <SIGNAL_generate+0x2b0>
 800363a:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <SIGNAL_generate+0x70>)
 800363c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003640:	08003651 	.word	0x08003651
 8003644:	0800368f 	.word	0x0800368f
 8003648:	080037a9 	.word	0x080037a9
 800364c:	08003815 	.word	0x08003815
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	edd3 7a03 	vldr	s15, [r3, #12]
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 8003664:	ed97 0a02 	vldr	s0, [r7, #8]
 8003668:	f008 f9e2 	bl	800ba30 <arm_sin_f32>
 800366c:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	ed93 7a01 	vldr	s14, [r3, #4]
 8003676:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800367a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	edd3 7a04 	vldr	s15, [r3, #16]
 8003684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003688:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800368c:	e0f8      	b.n	8003880 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	ed93 7a08 	vldr	s14, [r3, #32]
 800369a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369e:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7d1b      	ldrb	r3, [r3, #20]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d032      	beq.n	8003710 <SIGNAL_generate+0x140>
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	dc48      	bgt.n	8003740 <SIGNAL_generate+0x170>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d002      	beq.n	80036b8 <SIGNAL_generate+0xe8>
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d014      	beq.n	80036e0 <SIGNAL_generate+0x110>
 80036b6:	e043      	b.n	8003740 <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	edd3 6a07 	vldr	s13, [r3, #28]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80036ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80036d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036da:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 80036de:	e02f      	b.n	8003740 <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	ed93 8a06 	vldr	s16, [r3, #24]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	ed93 7a07 	vldr	s14, [r3, #28]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80036f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036f6:	edd7 0a04 	vldr	s1, [r7, #16]
 80036fa:	eeb0 0a66 	vmov.f32	s0, s13
 80036fe:	f009 f829 	bl	800c754 <powf>
 8003702:	eef0 7a40 	vmov.f32	s15, s0
 8003706:	ee68 7a27 	vmul.f32	s15, s16, s15
 800370a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800370e:	e017      	b.n	8003740 <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	ed93 7a06 	vldr	s14, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	edd3 6a07 	vldr	s13, [r3, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003726:	edd7 7a04 	vldr	s15, [r7, #16]
 800372a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800372e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800373a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800373e:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 8003740:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003744:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003756:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003760:	edd7 7a03 	vldr	s15, [r7, #12]
 8003764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003768:	eeb0 0a67 	vmov.f32	s0, s15
 800376c:	f008 f960 	bl	800ba30 <arm_sin_f32>
 8003770:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	edd3 7a01 	vldr	s15, [r3, #4]
 800377a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003782:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	edd3 7a08 	vldr	s15, [r3, #32]
 8003792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	da00      	bge.n	800379e <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 800379c:	e070      	b.n	8003880 <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80037a6:	e06b      	b.n	8003880 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b8:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80037bc:	eeb0 0a67 	vmov.f32	s0, s15
 80037c0:	f008 ffa8 	bl	800c714 <fmodf>
 80037c4:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80037ce:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80037d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d6:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 80037da:	ed97 7a06 	vldr	s14, [r7, #24]
 80037de:	edd7 7a05 	vldr	s15, [r7, #20]
 80037e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	d508      	bpl.n	80037fe <SIGNAL_generate+0x22e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	ed93 7a01 	vldr	s14, [r3, #4]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	edd3 7a04 	vldr	s15, [r3, #16]
 80037f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fc:	e007      	b.n	800380e <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	ed93 7a04 	vldr	s14, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 800380a:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 800380e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003812:	e035      	b.n	8003880 <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003824:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003828:	eeb0 0a67 	vmov.f32	s0, s15
 800382c:	f008 ff72 	bl	800c714 <fmodf>
 8003830:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 8003834:	edd7 6a08 	vldr	s13, [r7, #32]
 8003838:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800383c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003840:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003856:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800385a:	edd7 7a07 	vldr	s15, [r7, #28]
 800385e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	edd3 7a01 	vldr	s15, [r3, #4]
 8003868:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 800386c:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 8003876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800387e:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800388c:	eeb0 1a47 	vmov.f32	s2, s14
 8003890:	eef0 0a67 	vmov.f32	s1, s15
 8003894:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003898:	f7ff fd4e 	bl	8003338 <limit_setpoint>
 800389c:	eef0 7a40 	vmov.f32	s15, s0
}
 80038a0:	eeb0 0a67 	vmov.f32	s0, s15
 80038a4:	3730      	adds	r7, #48	@ 0x30
 80038a6:	46bd      	mov	sp, r7
 80038a8:	ecbd 8b02 	vpop	{d8}
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40c90fdb 	.word	0x40c90fdb

080038b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	4b0f      	ldr	r3, [pc, #60]	@ (80038f8 <HAL_MspInit+0x44>)
 80038bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038be:	4a0e      	ldr	r2, [pc, #56]	@ (80038f8 <HAL_MspInit+0x44>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038c6:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <HAL_MspInit+0x44>)
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_MspInit+0x44>)
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	4a08      	ldr	r2, [pc, #32]	@ (80038f8 <HAL_MspInit+0x44>)
 80038d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038de:	4b06      	ldr	r3, [pc, #24]	@ (80038f8 <HAL_MspInit+0x44>)
 80038e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80038ea:	f003 fa07 	bl	8006cfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000

080038fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <NMI_Handler+0x4>

08003904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <HardFault_Handler+0x4>

0800390c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <MemManage_Handler+0x4>

08003914 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <BusFault_Handler+0x4>

0800391c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <UsageFault_Handler+0x4>

08003924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003932:	b480      	push	{r7}
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003944:	bf00      	nop
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003952:	f000 fe8d 	bl	8004670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003956:	bf00      	nop
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003960:	4802      	ldr	r0, [pc, #8]	@ (800396c <DMA1_Channel1_IRQHandler+0x10>)
 8003962:	f002 fe0e 	bl	8006582 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000240 	.word	0x20000240

08003970 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003974:	4802      	ldr	r0, [pc, #8]	@ (8003980 <DMA1_Channel2_IRQHandler+0x10>)
 8003976:	f002 fe04 	bl	8006582 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	20001aac 	.word	0x20001aac

08003984 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003988:	4802      	ldr	r0, [pc, #8]	@ (8003994 <DMA1_Channel3_IRQHandler+0x10>)
 800398a:	f002 fdfa 	bl	8006582 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800398e:	bf00      	nop
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20001b0c 	.word	0x20001b0c

08003998 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800399c:	4803      	ldr	r0, [pc, #12]	@ (80039ac <TIM1_UP_TIM16_IRQHandler+0x14>)
 800399e:	f004 fe33 	bl	8008608 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80039a2:	4803      	ldr	r0, [pc, #12]	@ (80039b0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80039a4:	f004 fe30 	bl	8008608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	2000144c 	.word	0x2000144c
 80039b0:	20001914 	.word	0x20001914

080039b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039b8:	4802      	ldr	r0, [pc, #8]	@ (80039c4 <TIM2_IRQHandler+0x10>)
 80039ba:	f004 fe25 	bl	8008608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20001518 	.word	0x20001518

080039c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039cc:	4802      	ldr	r0, [pc, #8]	@ (80039d8 <TIM3_IRQHandler+0x10>)
 80039ce:	f004 fe1b 	bl	8008608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200015e4 	.word	0x200015e4

080039dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039e0:	4802      	ldr	r0, [pc, #8]	@ (80039ec <TIM4_IRQHandler+0x10>)
 80039e2:	f004 fe11 	bl	8008608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200016b0 	.word	0x200016b0

080039f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80039f4:	4802      	ldr	r0, [pc, #8]	@ (8003a00 <USART2_IRQHandler+0x10>)
 80039f6:	f006 fb5b 	bl	800a0b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200019e0 	.word	0x200019e0

08003a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003a0c:	f003 f8ba 	bl	8006b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a1c:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <_sbrk+0x5c>)
 8003a1e:	4b15      	ldr	r3, [pc, #84]	@ (8003a74 <_sbrk+0x60>)
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a28:	4b13      	ldr	r3, [pc, #76]	@ (8003a78 <_sbrk+0x64>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d102      	bne.n	8003a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a30:	4b11      	ldr	r3, [pc, #68]	@ (8003a78 <_sbrk+0x64>)
 8003a32:	4a12      	ldr	r2, [pc, #72]	@ (8003a7c <_sbrk+0x68>)
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a36:	4b10      	ldr	r3, [pc, #64]	@ (8003a78 <_sbrk+0x64>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d207      	bcs.n	8003a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a44:	f008 fe3a 	bl	800c6bc <__errno>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	220c      	movs	r2, #12
 8003a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a52:	e009      	b.n	8003a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a54:	4b08      	ldr	r3, [pc, #32]	@ (8003a78 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a5a:	4b07      	ldr	r3, [pc, #28]	@ (8003a78 <_sbrk+0x64>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	4a05      	ldr	r2, [pc, #20]	@ (8003a78 <_sbrk+0x64>)
 8003a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a66:	68fb      	ldr	r3, [r7, #12]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3718      	adds	r7, #24
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	20020000 	.word	0x20020000
 8003a74:	00000400 	.word	0x00000400
 8003a78:	20001448 	.word	0x20001448
 8003a7c:	20001cb8 	.word	0x20001cb8

08003a80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a84:	4b06      	ldr	r3, [pc, #24]	@ (8003aa0 <SystemInit+0x20>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a8a:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <SystemInit+0x20>)
 8003a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a94:	bf00      	nop
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b098      	sub	sp, #96	@ 0x60
 8003aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aaa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	605a      	str	r2, [r3, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	611a      	str	r2, [r3, #16]
 8003ac6:	615a      	str	r2, [r3, #20]
 8003ac8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	2234      	movs	r2, #52	@ 0x34
 8003ace:	2100      	movs	r1, #0
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f008 fddb 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003ad8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bc8 <MX_TIM1_Init+0x124>)
 8003ada:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003adc:	4b39      	ldr	r3, [pc, #228]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ae2:	4b38      	ldr	r3, [pc, #224]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003ae8:	4b36      	ldr	r3, [pc, #216]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af0:	4b34      	ldr	r3, [pc, #208]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003af6:	4b33      	ldr	r3, [pc, #204]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003afc:	4b31      	ldr	r3, [pc, #196]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b02:	4830      	ldr	r0, [pc, #192]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003b04:	f004 f9d2 	bl	8007eac <HAL_TIM_PWM_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003b0e:	f7ff f945 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b16:	2300      	movs	r3, #0
 8003b18:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b22:	4619      	mov	r1, r3
 8003b24:	4827      	ldr	r0, [pc, #156]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003b26:	f005 ffe3 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b30:	f7ff f934 	bl	8002d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b34:	2360      	movs	r3, #96	@ 0x60
 8003b36:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b40:	2300      	movs	r3, #0
 8003b42:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b54:	220c      	movs	r2, #12
 8003b56:	4619      	mov	r1, r3
 8003b58:	481a      	ldr	r0, [pc, #104]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003b5a:	f004 fecf 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003b64:	f7ff f91a 	bl	8002d9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003b86:	2300      	movs	r3, #0
 8003b88:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003ba0:	1d3b      	adds	r3, r7, #4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4807      	ldr	r0, [pc, #28]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003ba6:	f006 f839 	bl	8009c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003bb0:	f7ff f8f4 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003bb4:	4803      	ldr	r0, [pc, #12]	@ (8003bc4 <MX_TIM1_Init+0x120>)
 8003bb6:	f000 fb5b 	bl	8004270 <HAL_TIM_MspPostInit>

}
 8003bba:	bf00      	nop
 8003bbc:	3760      	adds	r7, #96	@ 0x60
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000144c 	.word	0x2000144c
 8003bc8:	40012c00 	.word	0x40012c00

08003bcc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003bd2:	f107 0310 	add.w	r3, r7, #16
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	605a      	str	r2, [r3, #4]
 8003bdc:	609a      	str	r2, [r3, #8]
 8003bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003be0:	1d3b      	adds	r3, r7, #4
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
 8003be8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003bea:	4b1e      	ldr	r3, [pc, #120]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003bec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003bf0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003bf4:	22a9      	movs	r2, #169	@ 0xa9
 8003bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003bfe:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c00:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c06:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c0c:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c12:	4814      	ldr	r0, [pc, #80]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c14:	f003 fffe 	bl	8007c14 <HAL_TIM_Base_Init>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c1e:	f7ff f8bd 	bl	8002d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480d      	ldr	r0, [pc, #52]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c30:	f004 ff78 	bl	8008b24 <HAL_TIM_ConfigClockSource>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c3a:	f7ff f8af 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c46:	1d3b      	adds	r3, r7, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4806      	ldr	r0, [pc, #24]	@ (8003c64 <MX_TIM2_Init+0x98>)
 8003c4c:	f005 ff50 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c56:	f7ff f8a1 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c5a:	bf00      	nop
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20001518 	.word	0x20001518

08003c68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08c      	sub	sp, #48	@ 0x30
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003c6e:	f107 030c 	add.w	r3, r7, #12
 8003c72:	2224      	movs	r2, #36	@ 0x24
 8003c74:	2100      	movs	r1, #0
 8003c76:	4618      	mov	r0, r3
 8003c78:	f008 fd08 	bl	800c68c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c86:	4b21      	ldr	r3, [pc, #132]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003c88:	4a21      	ldr	r2, [pc, #132]	@ (8003d10 <MX_TIM3_Init+0xa8>)
 8003c8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c92:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c98:	4b1c      	ldr	r3, [pc, #112]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003c9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ca6:	4b19      	ldr	r3, [pc, #100]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cac:	2303      	movs	r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003cd0:	f107 030c 	add.w	r3, r7, #12
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	480d      	ldr	r0, [pc, #52]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003cd8:	f004 fb54 	bl	8008384 <HAL_TIM_Encoder_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003ce2:	f7ff f85b 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003cee:	463b      	mov	r3, r7
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4806      	ldr	r0, [pc, #24]	@ (8003d0c <MX_TIM3_Init+0xa4>)
 8003cf4:	f005 fefc 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003cfe:	f7ff f84d 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d02:	bf00      	nop
 8003d04:	3730      	adds	r7, #48	@ 0x30
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200015e4 	.word	0x200015e4
 8003d10:	40000400 	.word	0x40000400

08003d14 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	@ 0x30
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	2224      	movs	r2, #36	@ 0x24
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f008 fcb2 	bl	800c68c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d28:	463b      	mov	r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d32:	4b21      	ldr	r3, [pc, #132]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d34:	4a21      	ldr	r2, [pc, #132]	@ (8003dbc <MX_TIM4_Init+0xa8>)
 8003d36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d38:	4b1f      	ldr	r3, [pc, #124]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d44:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d4a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d52:	4b19      	ldr	r3, [pc, #100]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d60:	2301      	movs	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d64:	2300      	movs	r3, #0
 8003d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d70:	2301      	movs	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d74:	2300      	movs	r3, #0
 8003d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4619      	mov	r1, r3
 8003d82:	480d      	ldr	r0, [pc, #52]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003d84:	f004 fafe 	bl	8008384 <HAL_TIM_Encoder_Init>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003d8e:	f7ff f805 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d92:	2300      	movs	r3, #0
 8003d94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4806      	ldr	r0, [pc, #24]	@ (8003db8 <MX_TIM4_Init+0xa4>)
 8003da0:	f005 fea6 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003daa:	f7fe fff7 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003dae:	bf00      	nop
 8003db0:	3730      	adds	r7, #48	@ 0x30
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200016b0 	.word	0x200016b0
 8003dbc:	40000800 	.word	0x40000800

08003dc0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b088      	sub	sp, #32
 8003dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dc6:	f107 0310 	add.w	r3, r7, #16
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	605a      	str	r2, [r3, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
 8003dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dd4:	1d3b      	adds	r3, r7, #4
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003de0:	4a1d      	ldr	r2, [pc, #116]	@ (8003e58 <MX_TIM5_Init+0x98>)
 8003de2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003de4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003de6:	22a9      	movs	r2, #169	@ 0xa9
 8003de8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dea:	4b1a      	ldr	r3, [pc, #104]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003df0:	4b18      	ldr	r3, [pc, #96]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003df2:	f04f 32ff 	mov.w	r2, #4294967295
 8003df6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003df8:	4b16      	ldr	r3, [pc, #88]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e04:	4813      	ldr	r0, [pc, #76]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003e06:	f003 ff05 	bl	8007c14 <HAL_TIM_Base_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003e10:	f7fe ffc4 	bl	8002d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e1a:	f107 0310 	add.w	r3, r7, #16
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480c      	ldr	r0, [pc, #48]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003e22:	f004 fe7f 	bl	8008b24 <HAL_TIM_ConfigClockSource>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003e2c:	f7fe ffb6 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e30:	2300      	movs	r3, #0
 8003e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e38:	1d3b      	adds	r3, r7, #4
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4805      	ldr	r0, [pc, #20]	@ (8003e54 <MX_TIM5_Init+0x94>)
 8003e3e:	f005 fe57 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003e48:	f7fe ffa8 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e4c:	bf00      	nop
 8003e4e:	3720      	adds	r7, #32
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	2000177c 	.word	0x2000177c
 8003e58:	40000c00 	.word	0x40000c00

08003e5c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b09c      	sub	sp, #112	@ 0x70
 8003e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e62:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
 8003e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e70:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
 8003e8c:	615a      	str	r2, [r3, #20]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2234      	movs	r2, #52	@ 0x34
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f008 fbf8 	bl	800c68c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e9c:	4b51      	ldr	r3, [pc, #324]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003e9e:	4a52      	ldr	r2, [pc, #328]	@ (8003fe8 <MX_TIM8_Init+0x18c>)
 8003ea0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003ea2:	4b50      	ldr	r3, [pc, #320]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003eae:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003eb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ebc:	4b49      	ldr	r3, [pc, #292]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec2:	4b48      	ldr	r3, [pc, #288]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003ec8:	4846      	ldr	r0, [pc, #280]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003eca:	f003 fea3 	bl	8007c14 <HAL_TIM_Base_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003ed4:	f7fe ff62 	bl	8002d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ed8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003edc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003ede:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	483f      	ldr	r0, [pc, #252]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003ee6:	f004 fe1d 	bl	8008b24 <HAL_TIM_ConfigClockSource>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003ef0:	f7fe ff54 	bl	8002d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003ef4:	483b      	ldr	r0, [pc, #236]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003ef6:	f003 ffd9 	bl	8007eac <HAL_TIM_PWM_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003f00:	f7fe ff4c 	bl	8002d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f04:	2300      	movs	r3, #0
 8003f06:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f14:	4619      	mov	r1, r3
 8003f16:	4833      	ldr	r0, [pc, #204]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003f18:	f005 fdea 	bl	8009af0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003f22:	f7fe ff3b 	bl	8002d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f26:	2360      	movs	r3, #96	@ 0x60
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f32:	2300      	movs	r3, #0
 8003f34:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f36:	2300      	movs	r3, #0
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f46:	2200      	movs	r2, #0
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4826      	ldr	r0, [pc, #152]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003f4c:	f004 fcd6 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003f56:	f7fe ff21 	bl	8002d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f5e:	2204      	movs	r2, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4820      	ldr	r0, [pc, #128]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003f64:	f004 fcca 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003f6e:	f7fe ff15 	bl	8002d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f76:	2208      	movs	r2, #8
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481a      	ldr	r0, [pc, #104]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003f7c:	f004 fcbe 	bl	80088fc <HAL_TIM_PWM_ConfigChannel>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003f86:	f7fe ff09 	bl	8002d9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fa2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003fac:	2300      	movs	r3, #0
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003fb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4807      	ldr	r0, [pc, #28]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003fc8:	f005 fe28 	bl	8009c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003fd2:	f7fe fee3 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003fd6:	4803      	ldr	r0, [pc, #12]	@ (8003fe4 <MX_TIM8_Init+0x188>)
 8003fd8:	f000 f94a 	bl	8004270 <HAL_TIM_MspPostInit>

}
 8003fdc:	bf00      	nop
 8003fde:	3770      	adds	r7, #112	@ 0x70
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20001848 	.word	0x20001848
 8003fe8:	40013400 	.word	0x40013400

08003fec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ff0:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <MX_TIM16_Init+0x58>)
 8003ff2:	4a15      	ldr	r2, [pc, #84]	@ (8004048 <MX_TIM16_Init+0x5c>)
 8003ff4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <MX_TIM16_Init+0x58>)
 8003ff8:	22a9      	movs	r2, #169	@ 0xa9
 8003ffa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	@ (8004044 <MX_TIM16_Init+0x58>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004002:	4b10      	ldr	r3, [pc, #64]	@ (8004044 <MX_TIM16_Init+0x58>)
 8004004:	f240 4279 	movw	r2, #1145	@ 0x479
 8004008:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800400a:	4b0e      	ldr	r3, [pc, #56]	@ (8004044 <MX_TIM16_Init+0x58>)
 800400c:	2200      	movs	r2, #0
 800400e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004010:	4b0c      	ldr	r3, [pc, #48]	@ (8004044 <MX_TIM16_Init+0x58>)
 8004012:	2200      	movs	r2, #0
 8004014:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <MX_TIM16_Init+0x58>)
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800401c:	4809      	ldr	r0, [pc, #36]	@ (8004044 <MX_TIM16_Init+0x58>)
 800401e:	f003 fdf9 	bl	8007c14 <HAL_TIM_Base_Init>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004028:	f7fe feb8 	bl	8002d9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800402c:	2108      	movs	r1, #8
 800402e:	4805      	ldr	r0, [pc, #20]	@ (8004044 <MX_TIM16_Init+0x58>)
 8004030:	f004 f8b2 	bl	8008198 <HAL_TIM_OnePulse_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800403a:	f7fe feaf 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	20001914 	.word	0x20001914
 8004048:	40014400 	.word	0x40014400

0800404c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0d      	ldr	r2, [pc, #52]	@ (8004090 <HAL_TIM_PWM_MspInit+0x44>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d113      	bne.n	8004086 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800405e:	4b0d      	ldr	r3, [pc, #52]	@ (8004094 <HAL_TIM_PWM_MspInit+0x48>)
 8004060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004062:	4a0c      	ldr	r2, [pc, #48]	@ (8004094 <HAL_TIM_PWM_MspInit+0x48>)
 8004064:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004068:	6613      	str	r3, [r2, #96]	@ 0x60
 800406a:	4b0a      	ldr	r3, [pc, #40]	@ (8004094 <HAL_TIM_PWM_MspInit+0x48>)
 800406c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800406e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004072:	60fb      	str	r3, [r7, #12]
 8004074:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004076:	2200      	movs	r2, #0
 8004078:	2100      	movs	r1, #0
 800407a:	2019      	movs	r0, #25
 800407c:	f002 f869 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004080:	2019      	movs	r0, #25
 8004082:	f002 f880 	bl	8006186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004086:	bf00      	nop
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40021000 	.word	0x40021000

08004098 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d114      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b6:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	201c      	movs	r0, #28
 80040c8:	f002 f843 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80040cc:	201c      	movs	r0, #28
 80040ce:	f002 f85a 	bl	8006186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80040d2:	e03c      	b.n	800414e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a20      	ldr	r2, [pc, #128]	@ (800415c <HAL_TIM_Base_MspInit+0xc4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	e02a      	b.n	800414e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_TIM_Base_MspInit+0xc8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d10c      	bne.n	800411c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004102:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	4a14      	ldr	r2, [pc, #80]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 8004108:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800410c:	6613      	str	r3, [r2, #96]	@ 0x60
 800410e:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	68fb      	ldr	r3, [r7, #12]
}
 800411a:	e018      	b.n	800414e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a10      	ldr	r2, [pc, #64]	@ (8004164 <HAL_TIM_Base_MspInit+0xcc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d113      	bne.n	800414e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004126:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 8004128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412a:	4a0b      	ldr	r2, [pc, #44]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 800412c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004130:	6613      	str	r3, [r2, #96]	@ 0x60
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <HAL_TIM_Base_MspInit+0xc0>)
 8004134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	2019      	movs	r0, #25
 8004144:	f002 f805 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004148:	2019      	movs	r0, #25
 800414a:	f002 f81c 	bl	8006186 <HAL_NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40013400 	.word	0x40013400
 8004164:	40014400 	.word	0x40014400

08004168 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	@ 0x30
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 031c 	add.w	r3, r7, #28
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a37      	ldr	r2, [pc, #220]	@ (8004264 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d131      	bne.n	80041ee <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800418a:	4b37      	ldr	r3, [pc, #220]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 800418c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418e:	4a36      	ldr	r2, [pc, #216]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 8004190:	f043 0302 	orr.w	r3, r3, #2
 8004194:	6593      	str	r3, [r2, #88]	@ 0x58
 8004196:	4b34      	ldr	r3, [pc, #208]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	61bb      	str	r3, [r7, #24]
 80041a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041a2:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 80041a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a6:	4a30      	ldr	r2, [pc, #192]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 80041a8:	f043 0301 	orr.w	r3, r3, #1
 80041ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041ae:	4b2e      	ldr	r3, [pc, #184]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ba:	23c0      	movs	r3, #192	@ 0xc0
 80041bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041be:	2302      	movs	r3, #2
 80041c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80041ca:	2302      	movs	r3, #2
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ce:	f107 031c 	add.w	r3, r7, #28
 80041d2:	4619      	mov	r1, r3
 80041d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80041d8:	f002 fb22 	bl	8006820 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80041dc:	2200      	movs	r2, #0
 80041de:	2100      	movs	r1, #0
 80041e0:	201d      	movs	r0, #29
 80041e2:	f001 ffb6 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80041e6:	201d      	movs	r0, #29
 80041e8:	f001 ffcd 	bl	8006186 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80041ec:	e036      	b.n	800425c <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a1e      	ldr	r2, [pc, #120]	@ (800426c <HAL_TIM_Encoder_MspInit+0x104>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d131      	bne.n	800425c <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 80041fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 80041fe:	f043 0304 	orr.w	r3, r3, #4
 8004202:	6593      	str	r3, [r2, #88]	@ 0x58
 8004204:	4b18      	ldr	r3, [pc, #96]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f003 0304 	and.w	r3, r3, #4
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004210:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 8004212:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004214:	4a14      	ldr	r2, [pc, #80]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800421c:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <HAL_TIM_Encoder_MspInit+0x100>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004228:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800422c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800422e:	2302      	movs	r3, #2
 8004230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004236:	2300      	movs	r3, #0
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800423a:	230a      	movs	r3, #10
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800423e:	f107 031c 	add.w	r3, r7, #28
 8004242:	4619      	mov	r1, r3
 8004244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004248:	f002 faea 	bl	8006820 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800424c:	2200      	movs	r2, #0
 800424e:	2100      	movs	r1, #0
 8004250:	201e      	movs	r0, #30
 8004252:	f001 ff7e 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004256:	201e      	movs	r0, #30
 8004258:	f001 ff95 	bl	8006186 <HAL_NVIC_EnableIRQ>
}
 800425c:	bf00      	nop
 800425e:	3730      	adds	r7, #48	@ 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40000400 	.word	0x40000400
 8004268:	40021000 	.word	0x40021000
 800426c:	40000800 	.word	0x40000800

08004270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 0314 	add.w	r3, r7, #20
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a30      	ldr	r2, [pc, #192]	@ (8004350 <HAL_TIM_MspPostInit+0xe0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d11c      	bne.n	80042cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004292:	4b30      	ldr	r3, [pc, #192]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 8004294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004296:	4a2f      	ldr	r2, [pc, #188]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800429e:	4b2d      	ldr	r3, [pc, #180]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042aa:	2308      	movs	r3, #8
 80042ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042b6:	2300      	movs	r3, #0
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80042ba:	2302      	movs	r3, #2
 80042bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	4824      	ldr	r0, [pc, #144]	@ (8004358 <HAL_TIM_MspPostInit+0xe8>)
 80042c6:	f002 faab 	bl	8006820 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80042ca:	e03d      	b.n	8004348 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	@ (800435c <HAL_TIM_MspPostInit+0xec>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d138      	bne.n	8004348 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042da:	4a1e      	ldr	r2, [pc, #120]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042dc:	f043 0304 	orr.w	r3, r3, #4
 80042e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	f003 0304 	and.w	r3, r3, #4
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042fa:	4b16      	ldr	r3, [pc, #88]	@ (8004354 <HAL_TIM_MspPostInit+0xe4>)
 80042fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	60bb      	str	r3, [r7, #8]
 8004304:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004306:	23c0      	movs	r3, #192	@ 0xc0
 8004308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800430a:	2302      	movs	r3, #2
 800430c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004312:	2300      	movs	r3, #0
 8004314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004316:	2304      	movs	r3, #4
 8004318:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800431a:	f107 0314 	add.w	r3, r7, #20
 800431e:	4619      	mov	r1, r3
 8004320:	480d      	ldr	r0, [pc, #52]	@ (8004358 <HAL_TIM_MspPostInit+0xe8>)
 8004322:	f002 fa7d 	bl	8006820 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004334:	2300      	movs	r3, #0
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004338:	230a      	movs	r3, #10
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4619      	mov	r1, r3
 8004342:	4807      	ldr	r0, [pc, #28]	@ (8004360 <HAL_TIM_MspPostInit+0xf0>)
 8004344:	f002 fa6c 	bl	8006820 <HAL_GPIO_Init>
}
 8004348:	bf00      	nop
 800434a:	3728      	adds	r7, #40	@ 0x28
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40021000 	.word	0x40021000
 8004358:	48000800 	.word	0x48000800
 800435c:	40013400 	.word	0x40013400
 8004360:	48000400 	.word	0x48000400

08004364 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004368:	4b23      	ldr	r3, [pc, #140]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 800436a:	4a24      	ldr	r2, [pc, #144]	@ (80043fc <MX_USART2_UART_Init+0x98>)
 800436c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800436e:	4b22      	ldr	r3, [pc, #136]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 8004370:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004376:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 8004378:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800437c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800437e:	4b1e      	ldr	r3, [pc, #120]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 8004380:	2200      	movs	r2, #0
 8004382:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004384:	4b1c      	ldr	r3, [pc, #112]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 8004386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800438c:	4b1a      	ldr	r3, [pc, #104]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 800438e:	220c      	movs	r2, #12
 8004390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004392:	4b19      	ldr	r3, [pc, #100]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 8004394:	2200      	movs	r2, #0
 8004396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004398:	4b17      	ldr	r3, [pc, #92]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 800439a:	2200      	movs	r2, #0
 800439c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800439e:	4b16      	ldr	r3, [pc, #88]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043a4:	4b14      	ldr	r3, [pc, #80]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043aa:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043b0:	4811      	ldr	r0, [pc, #68]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043b2:	f005 fd17 	bl	8009de4 <HAL_UART_Init>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d001      	beq.n	80043c0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80043bc:	f7fe fcee 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043c0:	2100      	movs	r1, #0
 80043c2:	480d      	ldr	r0, [pc, #52]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043c4:	f007 fa6a 	bl	800b89c <HAL_UARTEx_SetTxFifoThreshold>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80043ce:	f7fe fce5 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80043d2:	2100      	movs	r1, #0
 80043d4:	4808      	ldr	r0, [pc, #32]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043d6:	f007 fa9f 	bl	800b918 <HAL_UARTEx_SetRxFifoThreshold>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80043e0:	f7fe fcdc 	bl	8002d9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80043e4:	4804      	ldr	r0, [pc, #16]	@ (80043f8 <MX_USART2_UART_Init+0x94>)
 80043e6:	f007 fa20 	bl	800b82a <HAL_UARTEx_DisableFifoMode>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80043f0:	f7fe fcd4 	bl	8002d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80043f4:	bf00      	nop
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	200019e0 	.word	0x200019e0
 80043fc:	40004400 	.word	0x40004400

08004400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b09e      	sub	sp, #120	@ 0x78
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004418:	f107 0310 	add.w	r3, r7, #16
 800441c:	2254      	movs	r2, #84	@ 0x54
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f008 f933 	bl	800c68c <memset>
  if(uartHandle->Instance==USART2)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a4d      	ldr	r2, [pc, #308]	@ (8004560 <HAL_UART_MspInit+0x160>)
 800442c:	4293      	cmp	r3, r2
 800442e:	f040 8092 	bne.w	8004556 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004432:	2302      	movs	r3, #2
 8004434:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004436:	2300      	movs	r3, #0
 8004438:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800443a:	f107 0310 	add.w	r3, r7, #16
 800443e:	4618      	mov	r0, r3
 8004440:	f003 f99a 	bl	8007778 <HAL_RCCEx_PeriphCLKConfig>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800444a:	f7fe fca7 	bl	8002d9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800444e:	4b45      	ldr	r3, [pc, #276]	@ (8004564 <HAL_UART_MspInit+0x164>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004452:	4a44      	ldr	r2, [pc, #272]	@ (8004564 <HAL_UART_MspInit+0x164>)
 8004454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004458:	6593      	str	r3, [r2, #88]	@ 0x58
 800445a:	4b42      	ldr	r3, [pc, #264]	@ (8004564 <HAL_UART_MspInit+0x164>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004466:	4b3f      	ldr	r3, [pc, #252]	@ (8004564 <HAL_UART_MspInit+0x164>)
 8004468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800446a:	4a3e      	ldr	r2, [pc, #248]	@ (8004564 <HAL_UART_MspInit+0x164>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004472:	4b3c      	ldr	r3, [pc, #240]	@ (8004564 <HAL_UART_MspInit+0x164>)
 8004474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800447e:	230c      	movs	r3, #12
 8004480:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004486:	2300      	movs	r3, #0
 8004488:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800448a:	2300      	movs	r3, #0
 800448c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800448e:	2307      	movs	r3, #7
 8004490:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004492:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004496:	4619      	mov	r1, r3
 8004498:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800449c:	f002 f9c0 	bl	8006820 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80044a0:	4b31      	ldr	r3, [pc, #196]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044a2:	4a32      	ldr	r2, [pc, #200]	@ (800456c <HAL_UART_MspInit+0x16c>)
 80044a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80044a6:	4b30      	ldr	r3, [pc, #192]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044a8:	221a      	movs	r2, #26
 80044aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044b2:	4b2d      	ldr	r3, [pc, #180]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044be:	4b2a      	ldr	r3, [pc, #168]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044c4:	4b28      	ldr	r3, [pc, #160]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80044ca:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044d0:	4b25      	ldr	r3, [pc, #148]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80044d6:	4824      	ldr	r0, [pc, #144]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044d8:	f001 fe70 	bl	80061bc <HAL_DMA_Init>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80044e2:	f7fe fc5b 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80044ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004568 <HAL_UART_MspInit+0x168>)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80044f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004570 <HAL_UART_MspInit+0x170>)
 80044f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004574 <HAL_UART_MspInit+0x174>)
 80044f8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80044fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004570 <HAL_UART_MspInit+0x170>)
 80044fc:	221b      	movs	r2, #27
 80044fe:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004500:	4b1b      	ldr	r3, [pc, #108]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004502:	2210      	movs	r2, #16
 8004504:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004506:	4b1a      	ldr	r3, [pc, #104]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004508:	2200      	movs	r2, #0
 800450a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800450c:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <HAL_UART_MspInit+0x170>)
 800450e:	2280      	movs	r2, #128	@ 0x80
 8004510:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004512:	4b17      	ldr	r3, [pc, #92]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004514:	2200      	movs	r2, #0
 8004516:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <HAL_UART_MspInit+0x170>)
 800451a:	2200      	movs	r2, #0
 800451c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800451e:	4b14      	ldr	r3, [pc, #80]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004520:	2200      	movs	r2, #0
 8004522:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004524:	4b12      	ldr	r3, [pc, #72]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004526:	2200      	movs	r2, #0
 8004528:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800452a:	4811      	ldr	r0, [pc, #68]	@ (8004570 <HAL_UART_MspInit+0x170>)
 800452c:	f001 fe46 	bl	80061bc <HAL_DMA_Init>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004536:	f7fe fc31 	bl	8002d9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a0c      	ldr	r2, [pc, #48]	@ (8004570 <HAL_UART_MspInit+0x170>)
 800453e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004540:	4a0b      	ldr	r2, [pc, #44]	@ (8004570 <HAL_UART_MspInit+0x170>)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004546:	2200      	movs	r2, #0
 8004548:	2100      	movs	r1, #0
 800454a:	2026      	movs	r0, #38	@ 0x26
 800454c:	f001 fe01 	bl	8006152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004550:	2026      	movs	r0, #38	@ 0x26
 8004552:	f001 fe18 	bl	8006186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004556:	bf00      	nop
 8004558:	3778      	adds	r7, #120	@ 0x78
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40004400 	.word	0x40004400
 8004564:	40021000 	.word	0x40021000
 8004568:	20001aac 	.word	0x20001aac
 800456c:	4002001c 	.word	0x4002001c
 8004570:	20001b0c 	.word	0x20001b0c
 8004574:	40020030 	.word	0x40020030

08004578 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004578:	480d      	ldr	r0, [pc, #52]	@ (80045b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800457a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800457c:	f7ff fa80 	bl	8003a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004580:	480c      	ldr	r0, [pc, #48]	@ (80045b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004582:	490d      	ldr	r1, [pc, #52]	@ (80045b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004584:	4a0d      	ldr	r2, [pc, #52]	@ (80045bc <LoopForever+0xe>)
  movs r3, #0
 8004586:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004588:	e002      	b.n	8004590 <LoopCopyDataInit>

0800458a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800458a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800458c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458e:	3304      	adds	r3, #4

08004590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004594:	d3f9      	bcc.n	800458a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004596:	4a0a      	ldr	r2, [pc, #40]	@ (80045c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004598:	4c0a      	ldr	r4, [pc, #40]	@ (80045c4 <LoopForever+0x16>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800459c:	e001      	b.n	80045a2 <LoopFillZerobss>

0800459e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800459e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045a0:	3204      	adds	r2, #4

080045a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a4:	d3fb      	bcc.n	800459e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045a6:	f008 f88f 	bl	800c6c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045aa:	f7fe fac1 	bl	8002b30 <main>

080045ae <LoopForever>:

LoopForever:
    b LoopForever
 80045ae:	e7fe      	b.n	80045ae <LoopForever>
  ldr   r0, =_estack
 80045b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045b8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80045bc:	0800e690 	.word	0x0800e690
  ldr r2, =_sbss
 80045c0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80045c4:	20001cb8 	.word	0x20001cb8

080045c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80045c8:	e7fe      	b.n	80045c8 <ADC1_2_IRQHandler>

080045ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045d4:	2003      	movs	r0, #3
 80045d6:	f001 fdb1 	bl	800613c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045da:	2000      	movs	r0, #0
 80045dc:	f000 f80e 	bl	80045fc <HAL_InitTick>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	71fb      	strb	r3, [r7, #7]
 80045ea:	e001      	b.n	80045f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80045ec:	f7ff f962 	bl	80038b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80045f0:	79fb      	ldrb	r3, [r7, #7]

}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004608:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <HAL_InitTick+0x68>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d022      	beq.n	8004656 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004610:	4b15      	ldr	r3, [pc, #84]	@ (8004668 <HAL_InitTick+0x6c>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <HAL_InitTick+0x68>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800461c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fdbc 	bl	80061a2 <HAL_SYSTICK_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10f      	bne.n	8004650 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b0f      	cmp	r3, #15
 8004634:	d809      	bhi.n	800464a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004636:	2200      	movs	r2, #0
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	f04f 30ff 	mov.w	r0, #4294967295
 800463e:	f001 fd88 	bl	8006152 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004642:	4a0a      	ldr	r2, [pc, #40]	@ (800466c <HAL_InitTick+0x70>)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	e007      	b.n	800465a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e004      	b.n	800465a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
 8004654:	e001      	b.n	800465a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000160 	.word	0x20000160
 8004668:	20000158 	.word	0x20000158
 800466c:	2000015c 	.word	0x2000015c

08004670 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_IncTick+0x1c>)
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b05      	ldr	r3, [pc, #20]	@ (8004690 <HAL_IncTick+0x20>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4413      	add	r3, r2
 800467e:	4a03      	ldr	r2, [pc, #12]	@ (800468c <HAL_IncTick+0x1c>)
 8004680:	6013      	str	r3, [r2, #0]
}
 8004682:	bf00      	nop
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	20001b6c 	.word	0x20001b6c
 8004690:	20000160 	.word	0x20000160

08004694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0
  return uwTick;
 8004698:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <HAL_GetTick+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	20001b6c 	.word	0x20001b6c

080046ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	431a      	orrs	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
}
 80046c6:	bf00      	nop
 80046c8:	370c      	adds	r7, #12
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr

080046d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80046d2:	b480      	push	{r7}
 80046d4:	b083      	sub	sp, #12
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3360      	adds	r3, #96	@ 0x60
 8004726:	461a      	mov	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <LL_ADC_SetOffset+0x44>)
 8004736:	4013      	ands	r3, r2
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800474c:	bf00      	nop
 800474e:	371c      	adds	r7, #28
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	03fff000 	.word	0x03fff000

0800475c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3360      	adds	r3, #96	@ 0x60
 800476a:	461a      	mov	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	3360      	adds	r3, #96	@ 0x60
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4413      	add	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	431a      	orrs	r2, r3
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80047be:	b480      	push	{r7}
 80047c0:	b087      	sub	sp, #28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	60b9      	str	r1, [r7, #8]
 80047c8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	3360      	adds	r3, #96	@ 0x60
 80047ce:	461a      	mov	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80047e8:	bf00      	nop
 80047ea:	371c      	adds	r7, #28
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	3360      	adds	r3, #96	@ 0x60
 8004804:	461a      	mov	r2, r3
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	431a      	orrs	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800481e:	bf00      	nop
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800482a:	b480      	push	{r7}
 800482c:	b083      	sub	sp, #12
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	431a      	orrs	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	615a      	str	r2, [r3, #20]
}
 8004844:	bf00      	nop
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	3330      	adds	r3, #48	@ 0x30
 8004886:	461a      	mov	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	f003 030c 	and.w	r3, r3, #12
 8004892:	4413      	add	r3, r2
 8004894:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f003 031f 	and.w	r3, r3, #31
 80048a0:	211f      	movs	r1, #31
 80048a2:	fa01 f303 	lsl.w	r3, r1, r3
 80048a6:	43db      	mvns	r3, r3
 80048a8:	401a      	ands	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	0e9b      	lsrs	r3, r3, #26
 80048ae:	f003 011f 	and.w	r1, r3, #31
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa01 f303 	lsl.w	r3, r1, r3
 80048bc:	431a      	orrs	r2, r3
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b087      	sub	sp, #28
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3314      	adds	r3, #20
 80048de:	461a      	mov	r2, r3
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0e5b      	lsrs	r3, r3, #25
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	f003 0304 	and.w	r3, r3, #4
 80048ea:	4413      	add	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	0d1b      	lsrs	r3, r3, #20
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	2107      	movs	r1, #7
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	43db      	mvns	r3, r3
 8004902:	401a      	ands	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0d1b      	lsrs	r3, r3, #20
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	431a      	orrs	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	43db      	mvns	r3, r3
 800493e:	401a      	ands	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0318 	and.w	r3, r3, #24
 8004946:	4908      	ldr	r1, [pc, #32]	@ (8004968 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004948:	40d9      	lsrs	r1, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	400b      	ands	r3, r1
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	431a      	orrs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800495a:	bf00      	nop
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	0007ffff 	.word	0x0007ffff

0800496c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 031f 	and.w	r3, r3, #31
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004998:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6093      	str	r3, [r2, #8]
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049c0:	d101      	bne.n	80049c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80049e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a10:	d101      	bne.n	8004a16 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a38:	f043 0201 	orr.w	r2, r3, #1
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a60:	f043 0202 	orr.w	r2, r3, #2
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0301 	and.w	r3, r3, #1
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <LL_ADC_IsEnabled+0x18>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <LL_ADC_IsEnabled+0x1a>
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d101      	bne.n	8004ab2 <LL_ADC_IsDisableOngoing+0x18>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <LL_ADC_IsDisableOngoing+0x1a>
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ad0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ad4:	f043 0204 	orr.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d101      	bne.n	8004b00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d101      	bne.n	8004b26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b34:	b590      	push	{r4, r7, lr}
 8004b36:	b089      	sub	sp, #36	@ 0x24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e1a9      	b.n	8004ea2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7fd fb5d 	bl	800221c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7ff ff19 	bl	80049ac <LL_ADC_IsDeepPowerDownEnabled>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff feff 	bl	8004988 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff34 	bl	80049fc <LL_ADC_IsInternalRegulatorEnabled>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d115      	bne.n	8004bc6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff ff18 	bl	80049d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ba4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e18 <HAL_ADC_Init+0x2e4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	099b      	lsrs	r3, r3, #6
 8004baa:	4a9c      	ldr	r2, [pc, #624]	@ (8004e1c <HAL_ADC_Init+0x2e8>)
 8004bac:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb0:	099b      	lsrs	r3, r3, #6
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bb8:	e002      	b.n	8004bc0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f9      	bne.n	8004bba <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff ff16 	bl	80049fc <LL_ADC_IsInternalRegulatorEnabled>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bda:	f043 0210 	orr.w	r2, r3, #16
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be6:	f043 0201 	orr.w	r2, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ff76 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004bfc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 8142 	bne.w	8004e90 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f040 813e 	bne.w	8004e90 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c1c:	f043 0202 	orr.w	r2, r3, #2
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff23 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d141      	bne.n	8004cb8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c3c:	d004      	beq.n	8004c48 <HAL_ADC_Init+0x114>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a77      	ldr	r2, [pc, #476]	@ (8004e20 <HAL_ADC_Init+0x2ec>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d10f      	bne.n	8004c68 <HAL_ADC_Init+0x134>
 8004c48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c4c:	f7ff ff12 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c50:	4604      	mov	r4, r0
 8004c52:	4873      	ldr	r0, [pc, #460]	@ (8004e20 <HAL_ADC_Init+0x2ec>)
 8004c54:	f7ff ff0e 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4323      	orrs	r3, r4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e012      	b.n	8004c8e <HAL_ADC_Init+0x15a>
 8004c68:	486e      	ldr	r0, [pc, #440]	@ (8004e24 <HAL_ADC_Init+0x2f0>)
 8004c6a:	f7ff ff03 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c6e:	4604      	mov	r4, r0
 8004c70:	486d      	ldr	r0, [pc, #436]	@ (8004e28 <HAL_ADC_Init+0x2f4>)
 8004c72:	f7ff feff 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c76:	4603      	mov	r3, r0
 8004c78:	431c      	orrs	r4, r3
 8004c7a:	486c      	ldr	r0, [pc, #432]	@ (8004e2c <HAL_ADC_Init+0x2f8>)
 8004c7c:	f7ff fefa 	bl	8004a74 <LL_ADC_IsEnabled>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4323      	orrs	r3, r4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	bf0c      	ite	eq
 8004c88:	2301      	moveq	r3, #1
 8004c8a:	2300      	movne	r3, #0
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d012      	beq.n	8004cb8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c9a:	d004      	beq.n	8004ca6 <HAL_ADC_Init+0x172>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e20 <HAL_ADC_Init+0x2ec>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_ADC_Init+0x176>
 8004ca6:	4a62      	ldr	r2, [pc, #392]	@ (8004e30 <HAL_ADC_Init+0x2fc>)
 8004ca8:	e000      	b.n	8004cac <HAL_ADC_Init+0x178>
 8004caa:	4a62      	ldr	r2, [pc, #392]	@ (8004e34 <HAL_ADC_Init+0x300>)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7ff fcfa 	bl	80046ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7f5b      	ldrb	r3, [r3, #29]
 8004cbc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cc2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004cc8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004cce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cd6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d106      	bne.n	8004cf4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cea:	3b01      	subs	r3, #1
 8004cec:	045b      	lsls	r3, r3, #17
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68da      	ldr	r2, [r3, #12]
 8004d16:	4b48      	ldr	r3, [pc, #288]	@ (8004e38 <HAL_ADC_Init+0x304>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	69b9      	ldr	r1, [r7, #24]
 8004d20:	430b      	orrs	r3, r1
 8004d22:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fee5 	bl	8004b0e <LL_ADC_INJ_IsConversionOngoing>
 8004d44:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d17f      	bne.n	8004e4c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d17c      	bne.n	8004e4c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d56:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d6e:	f023 0302 	bic.w	r3, r3, #2
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6812      	ldr	r2, [r2, #0]
 8004d76:	69b9      	ldr	r1, [r7, #24]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d017      	beq.n	8004db4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004d92:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004d9c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004da0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6911      	ldr	r1, [r2, #16]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6812      	ldr	r2, [r2, #0]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004db2:	e013      	b.n	8004ddc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004dc2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004dd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dd8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d12a      	bne.n	8004e3c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dfc:	4311      	orrs	r1, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e02:	4311      	orrs	r1, r2
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f042 0201 	orr.w	r2, r2, #1
 8004e14:	611a      	str	r2, [r3, #16]
 8004e16:	e019      	b.n	8004e4c <HAL_ADC_Init+0x318>
 8004e18:	20000158 	.word	0x20000158
 8004e1c:	053e2d63 	.word	0x053e2d63
 8004e20:	50000100 	.word	0x50000100
 8004e24:	50000400 	.word	0x50000400
 8004e28:	50000500 	.word	0x50000500
 8004e2c:	50000600 	.word	0x50000600
 8004e30:	50000300 	.word	0x50000300
 8004e34:	50000700 	.word	0x50000700
 8004e38:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691a      	ldr	r2, [r3, #16]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0201 	bic.w	r2, r2, #1
 8004e4a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d10c      	bne.n	8004e6e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5a:	f023 010f 	bic.w	r1, r3, #15
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a1b      	ldr	r3, [r3, #32]
 8004e62:	1e5a      	subs	r2, r3, #1
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e6c:	e007      	b.n	8004e7e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 020f 	bic.w	r2, r2, #15
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	f043 0201 	orr.w	r2, r3, #1
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e8e:	e007      	b.n	8004ea0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e94:	f043 0210 	orr.w	r2, r3, #16
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3724      	adds	r7, #36	@ 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd90      	pop	{r4, r7, pc}
 8004eaa:	bf00      	nop

08004eac <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ec0:	d004      	beq.n	8004ecc <HAL_ADC_Start_DMA+0x20>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a5a      	ldr	r2, [pc, #360]	@ (8005030 <HAL_ADC_Start_DMA+0x184>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d101      	bne.n	8004ed0 <HAL_ADC_Start_DMA+0x24>
 8004ecc:	4b59      	ldr	r3, [pc, #356]	@ (8005034 <HAL_ADC_Start_DMA+0x188>)
 8004ece:	e000      	b.n	8004ed2 <HAL_ADC_Start_DMA+0x26>
 8004ed0:	4b59      	ldr	r3, [pc, #356]	@ (8005038 <HAL_ADC_Start_DMA+0x18c>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fd4a 	bl	800496c <LL_ADC_GetMultimode>
 8004ed8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff fe02 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f040 809b 	bne.w	8005022 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_ADC_Start_DMA+0x4e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e096      	b.n	8005028 <HAL_ADC_Start_DMA+0x17c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a4d      	ldr	r2, [pc, #308]	@ (800503c <HAL_ADC_Start_DMA+0x190>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d008      	beq.n	8004f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d005      	beq.n	8004f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	d002      	beq.n	8004f1e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d17a      	bne.n	8005014 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fcf6 	bl	8005910 <ADC_Enable>
 8004f24:	4603      	mov	r3, r0
 8004f26:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f28:	7dfb      	ldrb	r3, [r7, #23]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d16d      	bne.n	800500a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f32:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a3a      	ldr	r2, [pc, #232]	@ (8005030 <HAL_ADC_Start_DMA+0x184>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d009      	beq.n	8004f60 <HAL_ADC_Start_DMA+0xb4>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a3b      	ldr	r2, [pc, #236]	@ (8005040 <HAL_ADC_Start_DMA+0x194>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d002      	beq.n	8004f5c <HAL_ADC_Start_DMA+0xb0>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	e003      	b.n	8004f64 <HAL_ADC_Start_DMA+0xb8>
 8004f5c:	4b39      	ldr	r3, [pc, #228]	@ (8005044 <HAL_ADC_Start_DMA+0x198>)
 8004f5e:	e001      	b.n	8004f64 <HAL_ADC_Start_DMA+0xb8>
 8004f60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d002      	beq.n	8004f72 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d105      	bne.n	8004f7e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f76:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8e:	f023 0206 	bic.w	r2, r3, #6
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f96:	e002      	b.n	8004f9e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa2:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <HAL_ADC_Start_DMA+0x19c>)
 8004fa4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004faa:	4a28      	ldr	r2, [pc, #160]	@ (800504c <HAL_ADC_Start_DMA+0x1a0>)
 8004fac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb2:	4a27      	ldr	r2, [pc, #156]	@ (8005050 <HAL_ADC_Start_DMA+0x1a4>)
 8004fb4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	221c      	movs	r2, #28
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0210 	orr.w	r2, r2, #16
 8004fd4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3340      	adds	r3, #64	@ 0x40
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f001 f989 	bl	800630c <HAL_DMA_Start_IT>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7ff fd5c 	bl	8004ac0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005008:	e00d      	b.n	8005026 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005012:	e008      	b.n	8005026 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005020:	e001      	b.n	8005026 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005022:	2302      	movs	r3, #2
 8005024:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005026:	7dfb      	ldrb	r3, [r7, #23]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	50000100 	.word	0x50000100
 8005034:	50000300 	.word	0x50000300
 8005038:	50000700 	.word	0x50000700
 800503c:	50000600 	.word	0x50000600
 8005040:	50000500 	.word	0x50000500
 8005044:	50000400 	.word	0x50000400
 8005048:	08005afb 	.word	0x08005afb
 800504c:	08005bd3 	.word	0x08005bd3
 8005050:	08005bef 	.word	0x08005bef

08005054 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0b6      	sub	sp, #216	@ 0xd8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d102      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x24>
 80050ae:	2302      	movs	r3, #2
 80050b0:	f000 bc13 	b.w	80058da <HAL_ADC_ConfigChannel+0x84a>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fd11 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 83f3 	bne.w	80058b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	461a      	mov	r2, r3
 80050dc:	f7ff fbcb 	bl	8004876 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff fcff 	bl	8004ae8 <LL_ADC_REG_IsConversionOngoing>
 80050ea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7ff fd0b 	bl	8004b0e <LL_ADC_INJ_IsConversionOngoing>
 80050f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 81d9 	bne.w	80054b8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005106:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800510a:	2b00      	cmp	r3, #0
 800510c:	f040 81d4 	bne.w	80054b8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005118:	d10f      	bne.n	800513a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2200      	movs	r2, #0
 8005124:	4619      	mov	r1, r3
 8005126:	f7ff fbd2 	bl	80048ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fb79 	bl	800482a <LL_ADC_SetSamplingTimeCommonConfig>
 8005138:	e00e      	b.n	8005158 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6819      	ldr	r1, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	461a      	mov	r2, r3
 8005148:	f7ff fbc1 	bl	80048ce <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2100      	movs	r1, #0
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fb69 	bl	800482a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	695a      	ldr	r2, [r3, #20]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68db      	ldr	r3, [r3, #12]
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f003 0303 	and.w	r3, r3, #3
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b04      	cmp	r3, #4
 8005178:	d022      	beq.n	80051c0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6919      	ldr	r1, [r3, #16]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800518a:	f7ff fac3 	bl	8004714 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6919      	ldr	r1, [r3, #16]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	461a      	mov	r2, r3
 800519c:	f7ff fb0f 	bl	80047be <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d102      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x126>
 80051b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051b4:	e000      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x128>
 80051b6:	2300      	movs	r3, #0
 80051b8:	461a      	mov	r2, r3
 80051ba:	f7ff fb1b 	bl	80047f4 <LL_ADC_SetOffsetSaturation>
 80051be:	e17b      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2100      	movs	r1, #0
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff fac8 	bl	800475c <LL_ADC_GetOffsetChannel>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x15c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2100      	movs	r1, #0
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fabd 	bl	800475c <LL_ADC_GetOffsetChannel>
 80051e2:	4603      	mov	r3, r0
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 021f 	and.w	r2, r3, #31
 80051ea:	e01e      	b.n	800522a <HAL_ADC_ConfigChannel+0x19a>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2100      	movs	r1, #0
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff fab2 	bl	800475c <LL_ADC_GetOffsetChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005202:	fa93 f3a3 	rbit	r3, r3
 8005206:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800520a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800520e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005212:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800521a:	2320      	movs	r3, #32
 800521c:	e004      	b.n	8005228 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800521e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005222:	fab3 f383 	clz	r3, r3
 8005226:	b2db      	uxtb	r3, r3
 8005228:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005232:	2b00      	cmp	r3, #0
 8005234:	d105      	bne.n	8005242 <HAL_ADC_ConfigChannel+0x1b2>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	0e9b      	lsrs	r3, r3, #26
 800523c:	f003 031f 	and.w	r3, r3, #31
 8005240:	e018      	b.n	8005274 <HAL_ADC_ConfigChannel+0x1e4>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800525a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800525e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005266:	2320      	movs	r3, #32
 8005268:	e004      	b.n	8005274 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800526a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005274:	429a      	cmp	r2, r3
 8005276:	d106      	bne.n	8005286 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2200      	movs	r2, #0
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fa81 	bl	8004788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2101      	movs	r1, #1
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff fa65 	bl	800475c <LL_ADC_GetOffsetChannel>
 8005292:	4603      	mov	r3, r0
 8005294:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x222>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2101      	movs	r1, #1
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff fa5a 	bl	800475c <LL_ADC_GetOffsetChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	f003 021f 	and.w	r2, r3, #31
 80052b0:	e01e      	b.n	80052f0 <HAL_ADC_ConfigChannel+0x260>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2101      	movs	r1, #1
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fa4f 	bl	800475c <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80052c8:	fa93 f3a3 	rbit	r3, r3
 80052cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80052d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80052d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80052e0:	2320      	movs	r3, #32
 80052e2:	e004      	b.n	80052ee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80052e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80052e8:	fab3 f383 	clz	r3, r3
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d105      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x278>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0e9b      	lsrs	r3, r3, #26
 8005302:	f003 031f 	and.w	r3, r3, #31
 8005306:	e018      	b.n	800533a <HAL_ADC_ConfigChannel+0x2aa>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800531c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005320:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005324:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800532c:	2320      	movs	r3, #32
 800532e:	e004      	b.n	800533a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800533a:	429a      	cmp	r2, r3
 800533c:	d106      	bne.n	800534c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	2101      	movs	r1, #1
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fa1e 	bl	8004788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2102      	movs	r1, #2
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fa02 	bl	800475c <LL_ADC_GetOffsetChannel>
 8005358:	4603      	mov	r3, r0
 800535a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <HAL_ADC_ConfigChannel+0x2e8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f7ff f9f7 	bl	800475c <LL_ADC_GetOffsetChannel>
 800536e:	4603      	mov	r3, r0
 8005370:	0e9b      	lsrs	r3, r3, #26
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	e01e      	b.n	80053b6 <HAL_ADC_ConfigChannel+0x326>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2102      	movs	r1, #2
 800537e:	4618      	mov	r0, r3
 8005380:	f7ff f9ec 	bl	800475c <LL_ADC_GetOffsetChannel>
 8005384:	4603      	mov	r3, r0
 8005386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005396:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800539a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800539e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80053a6:	2320      	movs	r3, #32
 80053a8:	e004      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80053aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ae:	fab3 f383 	clz	r3, r3
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d105      	bne.n	80053ce <HAL_ADC_ConfigChannel+0x33e>
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	0e9b      	lsrs	r3, r3, #26
 80053c8:	f003 031f 	and.w	r3, r3, #31
 80053cc:	e016      	b.n	80053fc <HAL_ADC_ConfigChannel+0x36c>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80053e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80053e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80053ee:	2320      	movs	r3, #32
 80053f0:	e004      	b.n	80053fc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80053f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053f6:	fab3 f383 	clz	r3, r3
 80053fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d106      	bne.n	800540e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	2102      	movs	r1, #2
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff f9bd 	bl	8004788 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2103      	movs	r1, #3
 8005414:	4618      	mov	r0, r3
 8005416:	f7ff f9a1 	bl	800475c <LL_ADC_GetOffsetChannel>
 800541a:	4603      	mov	r3, r0
 800541c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_ADC_ConfigChannel+0x3aa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2103      	movs	r1, #3
 800542a:	4618      	mov	r0, r3
 800542c:	f7ff f996 	bl	800475c <LL_ADC_GetOffsetChannel>
 8005430:	4603      	mov	r3, r0
 8005432:	0e9b      	lsrs	r3, r3, #26
 8005434:	f003 021f 	and.w	r2, r3, #31
 8005438:	e017      	b.n	800546a <HAL_ADC_ConfigChannel+0x3da>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2103      	movs	r1, #3
 8005440:	4618      	mov	r0, r3
 8005442:	f7ff f98b 	bl	800475c <LL_ADC_GetOffsetChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800544c:	fa93 f3a3 	rbit	r3, r3
 8005450:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005452:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005454:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005456:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800545c:	2320      	movs	r3, #32
 800545e:	e003      	b.n	8005468 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	2b00      	cmp	r3, #0
 8005474:	d105      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x3f2>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0e9b      	lsrs	r3, r3, #26
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	e011      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x416>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005488:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800548a:	fa93 f3a3 	rbit	r3, r3
 800548e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005490:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005492:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800549a:	2320      	movs	r3, #32
 800549c:	e003      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800549e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d106      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	2103      	movs	r1, #3
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff f968 	bl	8004788 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff fad9 	bl	8004a74 <LL_ADC_IsEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f040 813d 	bne.w	8005744 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6819      	ldr	r1, [r3, #0]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f7ff fa24 	bl	8004924 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4aa2      	ldr	r2, [pc, #648]	@ (800576c <HAL_ADC_ConfigChannel+0x6dc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	f040 812e 	bne.w	8005744 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10b      	bne.n	8005510 <HAL_ADC_ConfigChannel+0x480>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	0e9b      	lsrs	r3, r3, #26
 80054fe:	3301      	adds	r3, #1
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	2b09      	cmp	r3, #9
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	e019      	b.n	8005544 <HAL_ADC_ConfigChannel+0x4b4>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005516:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005518:	fa93 f3a3 	rbit	r3, r3
 800551c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800551e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005520:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005522:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005528:	2320      	movs	r3, #32
 800552a:	e003      	b.n	8005534 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800552c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800552e:	fab3 f383 	clz	r3, r3
 8005532:	b2db      	uxtb	r3, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	2b09      	cmp	r3, #9
 800553c:	bf94      	ite	ls
 800553e:	2301      	movls	r3, #1
 8005540:	2300      	movhi	r3, #0
 8005542:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005544:	2b00      	cmp	r3, #0
 8005546:	d079      	beq.n	800563c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005550:	2b00      	cmp	r3, #0
 8005552:	d107      	bne.n	8005564 <HAL_ADC_ConfigChannel+0x4d4>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	0e9b      	lsrs	r3, r3, #26
 800555a:	3301      	adds	r3, #1
 800555c:	069b      	lsls	r3, r3, #26
 800555e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005562:	e015      	b.n	8005590 <HAL_ADC_ConfigChannel+0x500>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800556a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556c:	fa93 f3a3 	rbit	r3, r3
 8005570:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800557c:	2320      	movs	r3, #32
 800557e:	e003      	b.n	8005588 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005582:	fab3 f383 	clz	r3, r3
 8005586:	b2db      	uxtb	r3, r3
 8005588:	3301      	adds	r3, #1
 800558a:	069b      	lsls	r3, r3, #26
 800558c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x520>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	0e9b      	lsrs	r3, r3, #26
 80055a2:	3301      	adds	r3, #1
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2101      	movs	r1, #1
 80055aa:	fa01 f303 	lsl.w	r3, r1, r3
 80055ae:	e017      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x550>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80055be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80055c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80055cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	f003 031f 	and.w	r3, r3, #31
 80055da:	2101      	movs	r1, #1
 80055dc:	fa01 f303 	lsl.w	r3, r1, r3
 80055e0:	ea42 0103 	orr.w	r1, r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <HAL_ADC_ConfigChannel+0x576>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	0e9b      	lsrs	r3, r3, #26
 80055f6:	3301      	adds	r3, #1
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	4613      	mov	r3, r2
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	4413      	add	r3, r2
 8005602:	051b      	lsls	r3, r3, #20
 8005604:	e018      	b.n	8005638 <HAL_ADC_ConfigChannel+0x5a8>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	fa93 f3a3 	rbit	r3, r3
 8005612:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800561e:	2320      	movs	r3, #32
 8005620:	e003      	b.n	800562a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005622:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005624:	fab3 f383 	clz	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	3301      	adds	r3, #1
 800562c:	f003 021f 	and.w	r2, r3, #31
 8005630:	4613      	mov	r3, r2
 8005632:	005b      	lsls	r3, r3, #1
 8005634:	4413      	add	r3, r2
 8005636:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005638:	430b      	orrs	r3, r1
 800563a:	e07e      	b.n	800573a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	2b00      	cmp	r3, #0
 8005646:	d107      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x5c8>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	0e9b      	lsrs	r3, r3, #26
 800564e:	3301      	adds	r3, #1
 8005650:	069b      	lsls	r3, r3, #26
 8005652:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005656:	e015      	b.n	8005684 <HAL_ADC_ConfigChannel+0x5f4>
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800565e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005660:	fa93 f3a3 	rbit	r3, r3
 8005664:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005668:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800566a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005670:	2320      	movs	r3, #32
 8005672:	e003      	b.n	800567c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005676:	fab3 f383 	clz	r3, r3
 800567a:	b2db      	uxtb	r3, r3
 800567c:	3301      	adds	r3, #1
 800567e:	069b      	lsls	r3, r3, #26
 8005680:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x614>
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	3301      	adds	r3, #1
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2101      	movs	r1, #1
 800569e:	fa01 f303 	lsl.w	r3, r1, r3
 80056a2:	e017      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x644>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	61fb      	str	r3, [r7, #28]
  return result;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80056bc:	2320      	movs	r3, #32
 80056be:	e003      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3301      	adds	r3, #1
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	2101      	movs	r1, #1
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	ea42 0103 	orr.w	r1, r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x670>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	0e9b      	lsrs	r3, r3, #26
 80056ea:	3301      	adds	r3, #1
 80056ec:	f003 021f 	and.w	r2, r3, #31
 80056f0:	4613      	mov	r3, r2
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	4413      	add	r3, r2
 80056f6:	3b1e      	subs	r3, #30
 80056f8:	051b      	lsls	r3, r3, #20
 80056fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056fe:	e01b      	b.n	8005738 <HAL_ADC_ConfigChannel+0x6a8>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	613b      	str	r3, [r7, #16]
  return result;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e003      	b.n	8005724 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	f003 021f 	and.w	r2, r3, #31
 800572a:	4613      	mov	r3, r2
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	4413      	add	r3, r2
 8005730:	3b1e      	subs	r3, #30
 8005732:	051b      	lsls	r3, r3, #20
 8005734:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005738:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800573e:	4619      	mov	r1, r3
 8005740:	f7ff f8c5 	bl	80048ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b09      	ldr	r3, [pc, #36]	@ (8005770 <HAL_ADC_ConfigChannel+0x6e0>)
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80be 	beq.w	80058ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800575a:	d004      	beq.n	8005766 <HAL_ADC_ConfigChannel+0x6d6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a04      	ldr	r2, [pc, #16]	@ (8005774 <HAL_ADC_ConfigChannel+0x6e4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d10a      	bne.n	800577c <HAL_ADC_ConfigChannel+0x6ec>
 8005766:	4b04      	ldr	r3, [pc, #16]	@ (8005778 <HAL_ADC_ConfigChannel+0x6e8>)
 8005768:	e009      	b.n	800577e <HAL_ADC_ConfigChannel+0x6ee>
 800576a:	bf00      	nop
 800576c:	407f0000 	.word	0x407f0000
 8005770:	80080000 	.word	0x80080000
 8005774:	50000100 	.word	0x50000100
 8005778:	50000300 	.word	0x50000300
 800577c:	4b59      	ldr	r3, [pc, #356]	@ (80058e4 <HAL_ADC_ConfigChannel+0x854>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe ffba 	bl	80046f8 <LL_ADC_GetCommonPathInternalCh>
 8005784:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a56      	ldr	r2, [pc, #344]	@ (80058e8 <HAL_ADC_ConfigChannel+0x858>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d004      	beq.n	800579c <HAL_ADC_ConfigChannel+0x70c>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a55      	ldr	r2, [pc, #340]	@ (80058ec <HAL_ADC_ConfigChannel+0x85c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d13a      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800579c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d134      	bne.n	8005812 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057b0:	d005      	beq.n	80057be <HAL_ADC_ConfigChannel+0x72e>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a4e      	ldr	r2, [pc, #312]	@ (80058f0 <HAL_ADC_ConfigChannel+0x860>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	f040 8085 	bne.w	80058c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057c6:	d004      	beq.n	80057d2 <HAL_ADC_ConfigChannel+0x742>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a49      	ldr	r2, [pc, #292]	@ (80058f4 <HAL_ADC_ConfigChannel+0x864>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_ADC_ConfigChannel+0x746>
 80057d2:	4a49      	ldr	r2, [pc, #292]	@ (80058f8 <HAL_ADC_ConfigChannel+0x868>)
 80057d4:	e000      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x748>
 80057d6:	4a43      	ldr	r2, [pc, #268]	@ (80058e4 <HAL_ADC_ConfigChannel+0x854>)
 80057d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7fe ff75 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057e8:	4b44      	ldr	r3, [pc, #272]	@ (80058fc <HAL_ADC_ConfigChannel+0x86c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	4a44      	ldr	r2, [pc, #272]	@ (8005900 <HAL_ADC_ConfigChannel+0x870>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	099b      	lsrs	r3, r3, #6
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	4613      	mov	r3, r2
 80057fa:	005b      	lsls	r3, r3, #1
 80057fc:	4413      	add	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005802:	e002      	b.n	800580a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b01      	subs	r3, #1
 8005808:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f9      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005810:	e05a      	b.n	80058c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a3b      	ldr	r2, [pc, #236]	@ (8005904 <HAL_ADC_ConfigChannel+0x874>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d125      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800581c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d11f      	bne.n	8005868 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a31      	ldr	r2, [pc, #196]	@ (80058f4 <HAL_ADC_ConfigChannel+0x864>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d104      	bne.n	800583c <HAL_ADC_ConfigChannel+0x7ac>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a34      	ldr	r2, [pc, #208]	@ (8005908 <HAL_ADC_ConfigChannel+0x878>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d047      	beq.n	80058cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005844:	d004      	beq.n	8005850 <HAL_ADC_ConfigChannel+0x7c0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <HAL_ADC_ConfigChannel+0x864>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <HAL_ADC_ConfigChannel+0x7c4>
 8005850:	4a29      	ldr	r2, [pc, #164]	@ (80058f8 <HAL_ADC_ConfigChannel+0x868>)
 8005852:	e000      	b.n	8005856 <HAL_ADC_ConfigChannel+0x7c6>
 8005854:	4a23      	ldr	r2, [pc, #140]	@ (80058e4 <HAL_ADC_ConfigChannel+0x854>)
 8005856:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800585a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800585e:	4619      	mov	r1, r3
 8005860:	4610      	mov	r0, r2
 8005862:	f7fe ff36 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005866:	e031      	b.n	80058cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a27      	ldr	r2, [pc, #156]	@ (800590c <HAL_ADC_ConfigChannel+0x87c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d12d      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d127      	bne.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1c      	ldr	r2, [pc, #112]	@ (80058f4 <HAL_ADC_ConfigChannel+0x864>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005890:	d004      	beq.n	800589c <HAL_ADC_ConfigChannel+0x80c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a17      	ldr	r2, [pc, #92]	@ (80058f4 <HAL_ADC_ConfigChannel+0x864>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x810>
 800589c:	4a16      	ldr	r2, [pc, #88]	@ (80058f8 <HAL_ADC_ConfigChannel+0x868>)
 800589e:	e000      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x812>
 80058a0:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <HAL_ADC_ConfigChannel+0x854>)
 80058a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe ff10 	bl	80046d2 <LL_ADC_SetCommonPathInternalCh>
 80058b2:	e00c      	b.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80058c6:	e002      	b.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c8:	bf00      	nop
 80058ca:	e000      	b.n	80058ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80058d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80058da:	4618      	mov	r0, r3
 80058dc:	37d8      	adds	r7, #216	@ 0xd8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	50000700 	.word	0x50000700
 80058e8:	c3210000 	.word	0xc3210000
 80058ec:	90c00010 	.word	0x90c00010
 80058f0:	50000600 	.word	0x50000600
 80058f4:	50000100 	.word	0x50000100
 80058f8:	50000300 	.word	0x50000300
 80058fc:	20000158 	.word	0x20000158
 8005900:	053e2d63 	.word	0x053e2d63
 8005904:	c7520000 	.word	0xc7520000
 8005908:	50000500 	.word	0x50000500
 800590c:	cb840000 	.word	0xcb840000

08005910 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005918:	2300      	movs	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f7ff f8a7 	bl	8004a74 <LL_ADC_IsEnabled>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d176      	bne.n	8005a1a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	689a      	ldr	r2, [r3, #8]
 8005932:	4b3c      	ldr	r3, [pc, #240]	@ (8005a24 <ADC_Enable+0x114>)
 8005934:	4013      	ands	r3, r2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00d      	beq.n	8005956 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800593e:	f043 0210 	orr.w	r2, r3, #16
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594a:	f043 0201 	orr.w	r2, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e062      	b.n	8005a1c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff f862 	bl	8004a24 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005968:	d004      	beq.n	8005974 <ADC_Enable+0x64>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2e      	ldr	r2, [pc, #184]	@ (8005a28 <ADC_Enable+0x118>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d101      	bne.n	8005978 <ADC_Enable+0x68>
 8005974:	4b2d      	ldr	r3, [pc, #180]	@ (8005a2c <ADC_Enable+0x11c>)
 8005976:	e000      	b.n	800597a <ADC_Enable+0x6a>
 8005978:	4b2d      	ldr	r3, [pc, #180]	@ (8005a30 <ADC_Enable+0x120>)
 800597a:	4618      	mov	r0, r3
 800597c:	f7fe febc 	bl	80046f8 <LL_ADC_GetCommonPathInternalCh>
 8005980:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005986:	2b00      	cmp	r3, #0
 8005988:	d013      	beq.n	80059b2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800598a:	4b2a      	ldr	r3, [pc, #168]	@ (8005a34 <ADC_Enable+0x124>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	099b      	lsrs	r3, r3, #6
 8005990:	4a29      	ldr	r2, [pc, #164]	@ (8005a38 <ADC_Enable+0x128>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	099b      	lsrs	r3, r3, #6
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059a4:	e002      	b.n	80059ac <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f9      	bne.n	80059a6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059b2:	f7fe fe6f 	bl	8004694 <HAL_GetTick>
 80059b6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059b8:	e028      	b.n	8005a0c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff f858 	bl	8004a74 <LL_ADC_IsEnabled>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d104      	bne.n	80059d4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff f828 	bl	8004a24 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80059d4:	f7fe fe5e 	bl	8004694 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d914      	bls.n	8005a0c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d00d      	beq.n	8005a0c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f4:	f043 0210 	orr.w	r2, r3, #16
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a00:	f043 0201 	orr.w	r2, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e007      	b.n	8005a1c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d1cf      	bne.n	80059ba <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	8000003f 	.word	0x8000003f
 8005a28:	50000100 	.word	0x50000100
 8005a2c:	50000300 	.word	0x50000300
 8005a30:	50000700 	.word	0x50000700
 8005a34:	20000158 	.word	0x20000158
 8005a38:	053e2d63 	.word	0x053e2d63

08005a3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff f826 	bl	8004a9a <LL_ADC_IsDisableOngoing>
 8005a4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f80d 	bl	8004a74 <LL_ADC_IsEnabled>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d047      	beq.n	8005af0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d144      	bne.n	8005af0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030d 	and.w	r3, r3, #13
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d10c      	bne.n	8005a8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7fe ffe7 	bl	8004a4c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2203      	movs	r2, #3
 8005a84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a86:	f7fe fe05 	bl	8004694 <HAL_GetTick>
 8005a8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a8c:	e029      	b.n	8005ae2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a92:	f043 0210 	orr.w	r2, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a9e:	f043 0201 	orr.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e023      	b.n	8005af2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005aaa:	f7fe fdf3 	bl	8004694 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d914      	bls.n	8005ae2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00d      	beq.n	8005ae2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aca:	f043 0210 	orr.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad6:	f043 0201 	orr.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e007      	b.n	8005af2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1dc      	bne.n	8005aaa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d14b      	bne.n	8005bac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b18:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d021      	beq.n	8005b72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fe8c 	bl	8004850 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d032      	beq.n	8005ba4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d12b      	bne.n	8005ba4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11f      	bne.n	8005ba4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b68:	f043 0201 	orr.w	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b70:	e018      	b.n	8005ba4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d111      	bne.n	8005ba4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d105      	bne.n	8005ba4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fa55 	bl	8005054 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005baa:	e00e      	b.n	8005bca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d003      	beq.n	8005bc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f7ff fa5f 	bl	800507c <HAL_ADC_ErrorCallback>
}
 8005bbe:	e004      	b.n	8005bca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	4798      	blx	r3
}
 8005bca:	bf00      	nop
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f7ff fa41 	bl	8005068 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c0c:	f043 0204 	orr.w	r2, r3, #4
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fa31 	bl	800507c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <LL_ADC_IsEnabled>:
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <LL_ADC_IsEnabled+0x18>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <LL_ADC_IsEnabled+0x1a>
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_ADC_StartCalibration>:
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005c5a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	609a      	str	r2, [r3, #8]
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <LL_ADC_IsCalibrationOnGoing>:
{
 8005c7a:	b480      	push	{r7}
 8005c7c:	b083      	sub	sp, #12
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c8e:	d101      	bne.n	8005c94 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr

08005ca2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005ca2:	b480      	push	{r7}
 8005ca4:	b083      	sub	sp, #12
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d101      	bne.n	8005cba <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_ADCEx_Calibration_Start+0x1c>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e04d      	b.n	8005d80 <HAL_ADCEx_Calibration_Start+0xb8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fea5 	bl	8005a3c <ADC_Disable>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d136      	bne.n	8005d6a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d04:	f023 0302 	bic.w	r3, r3, #2
 8005d08:	f043 0202 	orr.w	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7ff ff96 	bl	8005c48 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d1c:	e014      	b.n	8005d48 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4a18      	ldr	r2, [pc, #96]	@ (8005d88 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d90d      	bls.n	8005d48 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	f023 0312 	bic.w	r3, r3, #18
 8005d34:	f043 0210 	orr.w	r2, r3, #16
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e01b      	b.n	8005d80 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff94 	bl	8005c7a <LL_ADC_IsCalibrationOnGoing>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1e2      	bne.n	8005d1e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d5c:	f023 0303 	bic.w	r3, r3, #3
 8005d60:	f043 0201 	orr.w	r2, r3, #1
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d68:	e005      	b.n	8005d76 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6e:	f043 0210 	orr.w	r2, r3, #16
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	0004de01 	.word	0x0004de01

08005d8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b0a1      	sub	sp, #132	@ 0x84
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0e7      	b.n	8005f7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005db2:	2300      	movs	r3, #0
 8005db4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005db6:	2300      	movs	r3, #0
 8005db8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dc2:	d102      	bne.n	8005dca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	e009      	b.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a6e      	ldr	r2, [pc, #440]	@ (8005f88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d102      	bne.n	8005dda <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	@ (8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005dd6:	60bb      	str	r3, [r7, #8]
 8005dd8:	e001      	b.n	8005dde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10b      	bne.n	8005dfc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0be      	b.n	8005f7a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff ff4f 	bl	8005ca2 <LL_ADC_REG_IsConversionOngoing>
 8005e04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ff49 	bl	8005ca2 <LL_ADC_REG_IsConversionOngoing>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 80a0 	bne.w	8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 809c 	bne.w	8005f58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e28:	d004      	beq.n	8005e34 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a55      	ldr	r2, [pc, #340]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d101      	bne.n	8005e38 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e34:	4b56      	ldr	r3, [pc, #344]	@ (8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005e36:	e000      	b.n	8005e3a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005e38:	4b56      	ldr	r3, [pc, #344]	@ (8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005e3a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d04b      	beq.n	8005edc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	6859      	ldr	r1, [r3, #4]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e56:	035b      	lsls	r3, r3, #13
 8005e58:	430b      	orrs	r3, r1
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e5e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e68:	d004      	beq.n	8005e74 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a45      	ldr	r2, [pc, #276]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d10f      	bne.n	8005e94 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005e74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e78:	f7ff fed3 	bl	8005c22 <LL_ADC_IsEnabled>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	4841      	ldr	r0, [pc, #260]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e80:	f7ff fecf 	bl	8005c22 <LL_ADC_IsEnabled>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4323      	orrs	r3, r4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	bf0c      	ite	eq
 8005e8c:	2301      	moveq	r3, #1
 8005e8e:	2300      	movne	r3, #0
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	e012      	b.n	8005eba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005e94:	483c      	ldr	r0, [pc, #240]	@ (8005f88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e96:	f7ff fec4 	bl	8005c22 <LL_ADC_IsEnabled>
 8005e9a:	4604      	mov	r4, r0
 8005e9c:	483b      	ldr	r0, [pc, #236]	@ (8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e9e:	f7ff fec0 	bl	8005c22 <LL_ADC_IsEnabled>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	431c      	orrs	r4, r3
 8005ea6:	483c      	ldr	r0, [pc, #240]	@ (8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ea8:	f7ff febb 	bl	8005c22 <LL_ADC_IsEnabled>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4323      	orrs	r3, r4
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf0c      	ite	eq
 8005eb4:	2301      	moveq	r3, #1
 8005eb6:	2300      	movne	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d056      	beq.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005ebe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005ec6:	f023 030f 	bic.w	r3, r3, #15
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	6811      	ldr	r1, [r2, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	6892      	ldr	r2, [r2, #8]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ed8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005eda:	e047      	b.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005edc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ee4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ee6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ef0:	d004      	beq.n	8005efc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a23      	ldr	r2, [pc, #140]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d10f      	bne.n	8005f1c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005efc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f00:	f7ff fe8f 	bl	8005c22 <LL_ADC_IsEnabled>
 8005f04:	4604      	mov	r4, r0
 8005f06:	481f      	ldr	r0, [pc, #124]	@ (8005f84 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f08:	f7ff fe8b 	bl	8005c22 <LL_ADC_IsEnabled>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4323      	orrs	r3, r4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	e012      	b.n	8005f42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005f1c:	481a      	ldr	r0, [pc, #104]	@ (8005f88 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f1e:	f7ff fe80 	bl	8005c22 <LL_ADC_IsEnabled>
 8005f22:	4604      	mov	r4, r0
 8005f24:	4819      	ldr	r0, [pc, #100]	@ (8005f8c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f26:	f7ff fe7c 	bl	8005c22 <LL_ADC_IsEnabled>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	431c      	orrs	r4, r3
 8005f2e:	481a      	ldr	r0, [pc, #104]	@ (8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f30:	f7ff fe77 	bl	8005c22 <LL_ADC_IsEnabled>
 8005f34:	4603      	mov	r3, r0
 8005f36:	4323      	orrs	r3, r4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2301      	moveq	r3, #1
 8005f3e:	2300      	movne	r3, #0
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d012      	beq.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f4e:	f023 030f 	bic.w	r3, r3, #15
 8005f52:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005f54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f56:	e009      	b.n	8005f6c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5c:	f043 0220 	orr.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005f6a:	e000      	b.n	8005f6e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f76:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3784      	adds	r7, #132	@ 0x84
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd90      	pop	{r4, r7, pc}
 8005f82:	bf00      	nop
 8005f84:	50000100 	.word	0x50000100
 8005f88:	50000400 	.word	0x50000400
 8005f8c:	50000500 	.word	0x50000500
 8005f90:	50000300 	.word	0x50000300
 8005f94:	50000700 	.word	0x50000700
 8005f98:	50000600 	.word	0x50000600

08005f9c <__NVIC_SetPriorityGrouping>:
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005fac:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005fb8:	4013      	ands	r3, r2
 8005fba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005fc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005fce:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	60d3      	str	r3, [r2, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	e000ed00 	.word	0xe000ed00

08005fe4 <__NVIC_GetPriorityGrouping>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005fe8:	4b04      	ldr	r3, [pc, #16]	@ (8005ffc <__NVIC_GetPriorityGrouping+0x18>)
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	0a1b      	lsrs	r3, r3, #8
 8005fee:	f003 0307 	and.w	r3, r3, #7
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	e000ed00 	.word	0xe000ed00

08006000 <__NVIC_EnableIRQ>:
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800600a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800600e:	2b00      	cmp	r3, #0
 8006010:	db0b      	blt.n	800602a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006012:	79fb      	ldrb	r3, [r7, #7]
 8006014:	f003 021f 	and.w	r2, r3, #31
 8006018:	4907      	ldr	r1, [pc, #28]	@ (8006038 <__NVIC_EnableIRQ+0x38>)
 800601a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800601e:	095b      	lsrs	r3, r3, #5
 8006020:	2001      	movs	r0, #1
 8006022:	fa00 f202 	lsl.w	r2, r0, r2
 8006026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	e000e100 	.word	0xe000e100

0800603c <__NVIC_SetPriority>:
{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	6039      	str	r1, [r7, #0]
 8006046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604c:	2b00      	cmp	r3, #0
 800604e:	db0a      	blt.n	8006066 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	b2da      	uxtb	r2, r3
 8006054:	490c      	ldr	r1, [pc, #48]	@ (8006088 <__NVIC_SetPriority+0x4c>)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	0112      	lsls	r2, r2, #4
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	440b      	add	r3, r1
 8006060:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006064:	e00a      	b.n	800607c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	b2da      	uxtb	r2, r3
 800606a:	4908      	ldr	r1, [pc, #32]	@ (800608c <__NVIC_SetPriority+0x50>)
 800606c:	79fb      	ldrb	r3, [r7, #7]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	3b04      	subs	r3, #4
 8006074:	0112      	lsls	r2, r2, #4
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	440b      	add	r3, r1
 800607a:	761a      	strb	r2, [r3, #24]
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	e000e100 	.word	0xe000e100
 800608c:	e000ed00 	.word	0xe000ed00

08006090 <NVIC_EncodePriority>:
{
 8006090:	b480      	push	{r7}
 8006092:	b089      	sub	sp, #36	@ 0x24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f003 0307 	and.w	r3, r3, #7
 80060a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	f1c3 0307 	rsb	r3, r3, #7
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	bf28      	it	cs
 80060ae:	2304      	movcs	r3, #4
 80060b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	3304      	adds	r3, #4
 80060b6:	2b06      	cmp	r3, #6
 80060b8:	d902      	bls.n	80060c0 <NVIC_EncodePriority+0x30>
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3b03      	subs	r3, #3
 80060be:	e000      	b.n	80060c2 <NVIC_EncodePriority+0x32>
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060c4:	f04f 32ff 	mov.w	r2, #4294967295
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43da      	mvns	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	401a      	ands	r2, r3
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80060d8:	f04f 31ff 	mov.w	r1, #4294967295
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	fa01 f303 	lsl.w	r3, r1, r3
 80060e2:	43d9      	mvns	r1, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80060e8:	4313      	orrs	r3, r2
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3724      	adds	r7, #36	@ 0x24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3b01      	subs	r3, #1
 8006104:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006108:	d301      	bcc.n	800610e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800610a:	2301      	movs	r3, #1
 800610c:	e00f      	b.n	800612e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800610e:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <SysTick_Config+0x40>)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	3b01      	subs	r3, #1
 8006114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006116:	210f      	movs	r1, #15
 8006118:	f04f 30ff 	mov.w	r0, #4294967295
 800611c:	f7ff ff8e 	bl	800603c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006120:	4b05      	ldr	r3, [pc, #20]	@ (8006138 <SysTick_Config+0x40>)
 8006122:	2200      	movs	r2, #0
 8006124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006126:	4b04      	ldr	r3, [pc, #16]	@ (8006138 <SysTick_Config+0x40>)
 8006128:	2207      	movs	r2, #7
 800612a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	e000e010 	.word	0xe000e010

0800613c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f7ff ff29 	bl	8005f9c <__NVIC_SetPriorityGrouping>
}
 800614a:	bf00      	nop
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b086      	sub	sp, #24
 8006156:	af00      	add	r7, sp, #0
 8006158:	4603      	mov	r3, r0
 800615a:	60b9      	str	r1, [r7, #8]
 800615c:	607a      	str	r2, [r7, #4]
 800615e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006160:	f7ff ff40 	bl	8005fe4 <__NVIC_GetPriorityGrouping>
 8006164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68b9      	ldr	r1, [r7, #8]
 800616a:	6978      	ldr	r0, [r7, #20]
 800616c:	f7ff ff90 	bl	8006090 <NVIC_EncodePriority>
 8006170:	4602      	mov	r2, r0
 8006172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006176:	4611      	mov	r1, r2
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ff5f 	bl	800603c <__NVIC_SetPriority>
}
 800617e:	bf00      	nop
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}

08006186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006186:	b580      	push	{r7, lr}
 8006188:	b082      	sub	sp, #8
 800618a:	af00      	add	r7, sp, #0
 800618c:	4603      	mov	r3, r0
 800618e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ff33 	bl	8006000 <__NVIC_EnableIRQ>
}
 800619a:	bf00      	nop
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff ffa4 	bl	80060f8 <SysTick_Config>
 80061b0:	4603      	mov	r3, r0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e08d      	b.n	80062ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b47      	ldr	r3, [pc, #284]	@ (80062f4 <HAL_DMA_Init+0x138>)
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d80f      	bhi.n	80061fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	4b45      	ldr	r3, [pc, #276]	@ (80062f8 <HAL_DMA_Init+0x13c>)
 80061e2:	4413      	add	r3, r2
 80061e4:	4a45      	ldr	r2, [pc, #276]	@ (80062fc <HAL_DMA_Init+0x140>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	091b      	lsrs	r3, r3, #4
 80061ec:	009a      	lsls	r2, r3, #2
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a42      	ldr	r2, [pc, #264]	@ (8006300 <HAL_DMA_Init+0x144>)
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80061f8:	e00e      	b.n	8006218 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	4b40      	ldr	r3, [pc, #256]	@ (8006304 <HAL_DMA_Init+0x148>)
 8006202:	4413      	add	r3, r2
 8006204:	4a3d      	ldr	r2, [pc, #244]	@ (80062fc <HAL_DMA_Init+0x140>)
 8006206:	fba2 2303 	umull	r2, r3, r2, r3
 800620a:	091b      	lsrs	r3, r3, #4
 800620c:	009a      	lsls	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a3c      	ldr	r2, [pc, #240]	@ (8006308 <HAL_DMA_Init+0x14c>)
 8006216:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800622e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006232:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800623c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006248:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006254:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fa76 	bl	800675c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006278:	d102      	bne.n	8006280 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006294:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d010      	beq.n	80062c0 <HAL_DMA_Init+0x104>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d80c      	bhi.n	80062c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fa96 	bl	80067d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	2200      	movs	r2, #0
 80062b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80062bc:	605a      	str	r2, [r3, #4]
 80062be:	e008      	b.n	80062d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40020407 	.word	0x40020407
 80062f8:	bffdfff8 	.word	0xbffdfff8
 80062fc:	cccccccd 	.word	0xcccccccd
 8006300:	40020000 	.word	0x40020000
 8006304:	bffdfbf8 	.word	0xbffdfbf8
 8006308:	40020400 	.word	0x40020400

0800630c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b086      	sub	sp, #24
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006324:	2b01      	cmp	r3, #1
 8006326:	d101      	bne.n	800632c <HAL_DMA_Start_IT+0x20>
 8006328:	2302      	movs	r3, #2
 800632a:	e066      	b.n	80063fa <HAL_DMA_Start_IT+0xee>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b01      	cmp	r3, #1
 800633e:	d155      	bne.n	80063ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0201 	bic.w	r2, r2, #1
 800635c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f9bb 	bl	80066e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f042 020e 	orr.w	r2, r2, #14
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e00f      	b.n	80063a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0204 	bic.w	r2, r2, #4
 8006392:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 020a 	orr.w	r2, r2, #10
 80063a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f042 0201 	orr.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
 80063ea:	e005      	b.n	80063f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80063f4:	2302      	movs	r3, #2
 80063f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80063f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d005      	beq.n	8006426 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e037      	b.n	8006496 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f022 020e 	bic.w	r2, r2, #14
 8006434:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006444:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0201 	bic.w	r2, r2, #1
 8006454:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800645a:	f003 021f 	and.w	r2, r3, #31
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f202 	lsl.w	r2, r1, r2
 8006468:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006472:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00c      	beq.n	8006496 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800648a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006494:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3714      	adds	r7, #20
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064bc:	2300      	movs	r3, #0
 80064be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d00d      	beq.n	80064e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2204      	movs	r2, #4
 80064d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	73fb      	strb	r3, [r7, #15]
 80064e6:	e047      	b.n	8006578 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 020e 	bic.w	r2, r2, #14
 80064f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0201 	bic.w	r2, r2, #1
 8006506:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006512:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006516:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	f003 021f 	and.w	r2, r3, #31
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	2101      	movs	r1, #1
 8006526:	fa01 f202 	lsl.w	r2, r1, r2
 800652a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006534:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800653a:	2b00      	cmp	r3, #0
 800653c:	d00c      	beq.n	8006558 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006548:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800654c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006556:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
    }
  }
  return status;
 8006578:	7bfb      	ldrb	r3, [r7, #15]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659e:	f003 031f 	and.w	r3, r3, #31
 80065a2:	2204      	movs	r2, #4
 80065a4:	409a      	lsls	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4013      	ands	r3, r2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d026      	beq.n	80065fc <HAL_DMA_IRQHandler+0x7a>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d021      	beq.n	80065fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d107      	bne.n	80065d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0204 	bic.w	r2, r2, #4
 80065d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065da:	f003 021f 	and.w	r2, r3, #31
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e2:	2104      	movs	r1, #4
 80065e4:	fa01 f202 	lsl.w	r2, r1, r2
 80065e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d071      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80065fa:	e06c      	b.n	80066d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006600:	f003 031f 	and.w	r3, r3, #31
 8006604:	2202      	movs	r2, #2
 8006606:	409a      	lsls	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4013      	ands	r3, r2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02e      	beq.n	800666e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d029      	beq.n	800666e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f022 020a 	bic.w	r2, r2, #10
 8006636:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006644:	f003 021f 	and.w	r2, r3, #31
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664c:	2102      	movs	r1, #2
 800664e:	fa01 f202 	lsl.w	r2, r1, r2
 8006652:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d038      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800666c:	e033      	b.n	80066d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	2208      	movs	r2, #8
 8006678:	409a      	lsls	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4013      	ands	r3, r2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d02a      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d025      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f022 020e 	bic.w	r2, r2, #14
 800669a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a0:	f003 021f 	and.w	r2, r3, #31
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	2101      	movs	r1, #1
 80066aa:	fa01 f202 	lsl.w	r2, r1, r2
 80066ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d004      	beq.n	80066d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
}
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80066f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d004      	beq.n	800670a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006708:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670e:	f003 021f 	and.w	r2, r3, #31
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006716:	2101      	movs	r1, #1
 8006718:	fa01 f202 	lsl.w	r2, r1, r2
 800671c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b10      	cmp	r3, #16
 800672c:	d108      	bne.n	8006740 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800673e:	e007      	b.n	8006750 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	60da      	str	r2, [r3, #12]
}
 8006750:	bf00      	nop
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	4b16      	ldr	r3, [pc, #88]	@ (80067c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d802      	bhi.n	8006776 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006770:	4b15      	ldr	r3, [pc, #84]	@ (80067c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	e001      	b.n	800677a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006778:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	b2db      	uxtb	r3, r3
 8006784:	3b08      	subs	r3, #8
 8006786:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006788:	fba2 2303 	umull	r2, r3, r2, r3
 800678c:	091b      	lsrs	r3, r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006794:	089b      	lsrs	r3, r3, #2
 8006796:	009a      	lsls	r2, r3, #2
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	4413      	add	r3, r2
 800679c:	461a      	mov	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a0b      	ldr	r2, [pc, #44]	@ (80067d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f003 031f 	and.w	r3, r3, #31
 80067ae:	2201      	movs	r2, #1
 80067b0:	409a      	lsls	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40020407 	.word	0x40020407
 80067c8:	40020800 	.word	0x40020800
 80067cc:	40020820 	.word	0x40020820
 80067d0:	cccccccd 	.word	0xcccccccd
 80067d4:	40020880 	.word	0x40020880

080067d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	461a      	mov	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a08      	ldr	r2, [pc, #32]	@ (800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80067fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3b01      	subs	r3, #1
 8006800:	f003 031f 	and.w	r3, r3, #31
 8006804:	2201      	movs	r2, #1
 8006806:	409a      	lsls	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800680c:	bf00      	nop
 800680e:	3714      	adds	r7, #20
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	1000823f 	.word	0x1000823f
 800681c:	40020940 	.word	0x40020940

08006820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800682a:	2300      	movs	r3, #0
 800682c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800682e:	e15a      	b.n	8006ae6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	2101      	movs	r1, #1
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	4013      	ands	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 814c 	beq.w	8006ae0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	2b01      	cmp	r3, #1
 8006852:	d005      	beq.n	8006860 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800685c:	2b02      	cmp	r3, #2
 800685e:	d130      	bne.n	80068c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	2203      	movs	r2, #3
 800686c:	fa02 f303 	lsl.w	r3, r2, r3
 8006870:	43db      	mvns	r3, r3
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	4013      	ands	r3, r2
 8006876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	68da      	ldr	r2, [r3, #12]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006896:	2201      	movs	r2, #1
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4013      	ands	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	091b      	lsrs	r3, r3, #4
 80068ac:	f003 0201 	and.w	r2, r3, #1
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b03      	cmp	r3, #3
 80068cc:	d017      	beq.n	80068fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	005b      	lsls	r3, r3, #1
 80068d8:	2203      	movs	r2, #3
 80068da:	fa02 f303 	lsl.w	r3, r2, r3
 80068de:	43db      	mvns	r3, r3
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4013      	ands	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	693a      	ldr	r2, [r7, #16]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	2b02      	cmp	r3, #2
 8006908:	d123      	bne.n	8006952 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	08da      	lsrs	r2, r3, #3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	3208      	adds	r2, #8
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	220f      	movs	r2, #15
 8006922:	fa02 f303 	lsl.w	r3, r2, r3
 8006926:	43db      	mvns	r3, r3
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	4013      	ands	r3, r2
 800692c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	08da      	lsrs	r2, r3, #3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	3208      	adds	r2, #8
 800694c:	6939      	ldr	r1, [r7, #16]
 800694e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	005b      	lsls	r3, r3, #1
 800695c:	2203      	movs	r2, #3
 800695e:	fa02 f303 	lsl.w	r3, r2, r3
 8006962:	43db      	mvns	r3, r3
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4013      	ands	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f003 0203 	and.w	r2, r3, #3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	fa02 f303 	lsl.w	r3, r2, r3
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80a6 	beq.w	8006ae0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006994:	4b5b      	ldr	r3, [pc, #364]	@ (8006b04 <HAL_GPIO_Init+0x2e4>)
 8006996:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006998:	4a5a      	ldr	r2, [pc, #360]	@ (8006b04 <HAL_GPIO_Init+0x2e4>)
 800699a:	f043 0301 	orr.w	r3, r3, #1
 800699e:	6613      	str	r3, [r2, #96]	@ 0x60
 80069a0:	4b58      	ldr	r3, [pc, #352]	@ (8006b04 <HAL_GPIO_Init+0x2e4>)
 80069a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	60bb      	str	r3, [r7, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069ac:	4a56      	ldr	r2, [pc, #344]	@ (8006b08 <HAL_GPIO_Init+0x2e8>)
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	089b      	lsrs	r3, r3, #2
 80069b2:	3302      	adds	r3, #2
 80069b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f003 0303 	and.w	r3, r3, #3
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	220f      	movs	r2, #15
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	693a      	ldr	r2, [r7, #16]
 80069cc:	4013      	ands	r3, r2
 80069ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069d6:	d01f      	beq.n	8006a18 <HAL_GPIO_Init+0x1f8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a4c      	ldr	r2, [pc, #304]	@ (8006b0c <HAL_GPIO_Init+0x2ec>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d019      	beq.n	8006a14 <HAL_GPIO_Init+0x1f4>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a4b      	ldr	r2, [pc, #300]	@ (8006b10 <HAL_GPIO_Init+0x2f0>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <HAL_GPIO_Init+0x1f0>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a4a      	ldr	r2, [pc, #296]	@ (8006b14 <HAL_GPIO_Init+0x2f4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00d      	beq.n	8006a0c <HAL_GPIO_Init+0x1ec>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a49      	ldr	r2, [pc, #292]	@ (8006b18 <HAL_GPIO_Init+0x2f8>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d007      	beq.n	8006a08 <HAL_GPIO_Init+0x1e8>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a48      	ldr	r2, [pc, #288]	@ (8006b1c <HAL_GPIO_Init+0x2fc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d101      	bne.n	8006a04 <HAL_GPIO_Init+0x1e4>
 8006a00:	2305      	movs	r3, #5
 8006a02:	e00a      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a04:	2306      	movs	r3, #6
 8006a06:	e008      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a08:	2304      	movs	r3, #4
 8006a0a:	e006      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e004      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a10:	2302      	movs	r3, #2
 8006a12:	e002      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_GPIO_Init+0x1fa>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	f002 0203 	and.w	r2, r2, #3
 8006a20:	0092      	lsls	r2, r2, #2
 8006a22:	4093      	lsls	r3, r2
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a2a:	4937      	ldr	r1, [pc, #220]	@ (8006b08 <HAL_GPIO_Init+0x2e8>)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	089b      	lsrs	r3, r3, #2
 8006a30:	3302      	adds	r3, #2
 8006a32:	693a      	ldr	r2, [r7, #16]
 8006a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a38:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	4013      	ands	r3, r2
 8006a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a54:	693a      	ldr	r2, [r7, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a5c:	4a30      	ldr	r2, [pc, #192]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a62:	4b2f      	ldr	r3, [pc, #188]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	43db      	mvns	r3, r3
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4013      	ands	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a86:	4a26      	ldr	r2, [pc, #152]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006a8c:	4b24      	ldr	r3, [pc, #144]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	43db      	mvns	r3, r3
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4013      	ands	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d003      	beq.n	8006ab0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	43db      	mvns	r3, r3
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4013      	ands	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d003      	beq.n	8006ada <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ad2:	693a      	ldr	r2, [r7, #16]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006ada:	4a11      	ldr	r2, [pc, #68]	@ (8006b20 <HAL_GPIO_Init+0x300>)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	fa22 f303 	lsr.w	r3, r2, r3
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f47f ae9d 	bne.w	8006830 <HAL_GPIO_Init+0x10>
  }
}
 8006af6:	bf00      	nop
 8006af8:	bf00      	nop
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	40021000 	.word	0x40021000
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	48000400 	.word	0x48000400
 8006b10:	48000800 	.word	0x48000800
 8006b14:	48000c00 	.word	0x48000c00
 8006b18:	48001000 	.word	0x48001000
 8006b1c:	48001400 	.word	0x48001400
 8006b20:	40010400 	.word	0x40010400

08006b24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	691a      	ldr	r2, [r3, #16]
 8006b34:	887b      	ldrh	r3, [r7, #2]
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d002      	beq.n	8006b42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	73fb      	strb	r3, [r7, #15]
 8006b40:	e001      	b.n	8006b46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3714      	adds	r7, #20
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	807b      	strh	r3, [r7, #2]
 8006b60:	4613      	mov	r3, r2
 8006b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b64:	787b      	ldrb	r3, [r7, #1]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b6a:	887a      	ldrh	r2, [r7, #2]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b70:	e002      	b.n	8006b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b72:	887a      	ldrh	r2, [r7, #2]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006b8e:	4b08      	ldr	r3, [pc, #32]	@ (8006bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b90:	695a      	ldr	r2, [r3, #20]
 8006b92:	88fb      	ldrh	r3, [r7, #6]
 8006b94:	4013      	ands	r3, r2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b9a:	4a05      	ldr	r2, [pc, #20]	@ (8006bb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b9c:	88fb      	ldrh	r3, [r7, #6]
 8006b9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006ba0:	88fb      	ldrh	r3, [r7, #6]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fc f853 	bl	8002c4e <HAL_GPIO_EXTI_Callback>
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40010400 	.word	0x40010400

08006bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d141      	bne.n	8006c46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006bc2:	4b4b      	ldr	r3, [pc, #300]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bce:	d131      	bne.n	8006c34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006bd0:	4b47      	ldr	r3, [pc, #284]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006bd6:	4a46      	ldr	r2, [pc, #280]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006be0:	4b43      	ldr	r3, [pc, #268]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006be8:	4a41      	ldr	r2, [pc, #260]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006bee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006bf0:	4b40      	ldr	r3, [pc, #256]	@ (8006cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2232      	movs	r2, #50	@ 0x32
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
 8006bfa:	4a3f      	ldr	r2, [pc, #252]	@ (8006cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	0c9b      	lsrs	r3, r3, #18
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c06:	e002      	b.n	8006c0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c0e:	4b38      	ldr	r3, [pc, #224]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1a:	d102      	bne.n	8006c22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f2      	bne.n	8006c08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c22:	4b33      	ldr	r3, [pc, #204]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c2e:	d158      	bne.n	8006ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e057      	b.n	8006ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c34:	4b2e      	ldr	r3, [pc, #184]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c3a:	4a2d      	ldr	r2, [pc, #180]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c44:	e04d      	b.n	8006ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4c:	d141      	bne.n	8006cd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c4e:	4b28      	ldr	r3, [pc, #160]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c5a:	d131      	bne.n	8006cc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c5c:	4b24      	ldr	r3, [pc, #144]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c62:	4a23      	ldr	r2, [pc, #140]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c6c:	4b20      	ldr	r3, [pc, #128]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c74:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006cf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2232      	movs	r2, #50	@ 0x32
 8006c82:	fb02 f303 	mul.w	r3, r2, r3
 8006c86:	4a1c      	ldr	r2, [pc, #112]	@ (8006cf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c88:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8c:	0c9b      	lsrs	r3, r3, #18
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c92:	e002      	b.n	8006c9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca6:	d102      	bne.n	8006cae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f2      	bne.n	8006c94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cae:	4b10      	ldr	r3, [pc, #64]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cba:	d112      	bne.n	8006ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e011      	b.n	8006ce4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006cd0:	e007      	b.n	8006ce2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006cd2:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cda:	4a05      	ldr	r2, [pc, #20]	@ (8006cf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ce0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40007000 	.word	0x40007000
 8006cf4:	20000158 	.word	0x20000158
 8006cf8:	431bde83 	.word	0x431bde83

08006cfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d00:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4a04      	ldr	r2, [pc, #16]	@ (8006d18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d0a:	6093      	str	r3, [r2, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	40007000 	.word	0x40007000

08006d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b088      	sub	sp, #32
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e2fe      	b.n	800732c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d075      	beq.n	8006e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d3a:	4b97      	ldr	r3, [pc, #604]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 030c 	and.w	r3, r3, #12
 8006d42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d44:	4b94      	ldr	r3, [pc, #592]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d102      	bne.n	8006d5a <HAL_RCC_OscConfig+0x3e>
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d002      	beq.n	8006d60 <HAL_RCC_OscConfig+0x44>
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	d10b      	bne.n	8006d78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d60:	4b8d      	ldr	r3, [pc, #564]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d05b      	beq.n	8006e24 <HAL_RCC_OscConfig+0x108>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d157      	bne.n	8006e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e2d9      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d80:	d106      	bne.n	8006d90 <HAL_RCC_OscConfig+0x74>
 8006d82:	4b85      	ldr	r3, [pc, #532]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a84      	ldr	r2, [pc, #528]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	e01d      	b.n	8006dcc <HAL_RCC_OscConfig+0xb0>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x98>
 8006d9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b7c      	ldr	r3, [pc, #496]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a7b      	ldr	r2, [pc, #492]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0xb0>
 8006db4:	4b78      	ldr	r3, [pc, #480]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a77      	ldr	r2, [pc, #476]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	4b75      	ldr	r3, [pc, #468]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a74      	ldr	r2, [pc, #464]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d013      	beq.n	8006dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fd fc5e 	bl	8004694 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fc5a 	bl	8004694 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b64      	cmp	r3, #100	@ 0x64
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e29e      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dee:	4b6a      	ldr	r3, [pc, #424]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0xc0>
 8006dfa:	e014      	b.n	8006e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dfc:	f7fd fc4a 	bl	8004694 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e02:	e008      	b.n	8006e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e04:	f7fd fc46 	bl	8004694 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	2b64      	cmp	r3, #100	@ 0x64
 8006e10:	d901      	bls.n	8006e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e28a      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e16:	4b60      	ldr	r3, [pc, #384]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f0      	bne.n	8006e04 <HAL_RCC_OscConfig+0xe8>
 8006e22:	e000      	b.n	8006e26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d075      	beq.n	8006f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e32:	4b59      	ldr	r3, [pc, #356]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 030c 	and.w	r3, r3, #12
 8006e3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e3c:	4b56      	ldr	r3, [pc, #344]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b0c      	cmp	r3, #12
 8006e4a:	d102      	bne.n	8006e52 <HAL_RCC_OscConfig+0x136>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <HAL_RCC_OscConfig+0x13c>
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d11f      	bne.n	8006e98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e58:	4b4f      	ldr	r3, [pc, #316]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_OscConfig+0x154>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e25d      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e70:	4b49      	ldr	r3, [pc, #292]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	061b      	lsls	r3, r3, #24
 8006e7e:	4946      	ldr	r1, [pc, #280]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006e84:	4b45      	ldr	r3, [pc, #276]	@ (8006f9c <HAL_RCC_OscConfig+0x280>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd fbb7 	bl	80045fc <HAL_InitTick>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d043      	beq.n	8006f1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e249      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d023      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eac:	f7fd fbf2 	bl	8004694 <HAL_GetTick>
 8006eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006eb2:	e008      	b.n	8006ec6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eb4:	f7fd fbee 	bl	8004694 <HAL_GetTick>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d901      	bls.n	8006ec6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	e232      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ec6:	4b34      	ldr	r3, [pc, #208]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0f0      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ed2:	4b31      	ldr	r3, [pc, #196]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	061b      	lsls	r3, r3, #24
 8006ee0:	492d      	ldr	r1, [pc, #180]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	604b      	str	r3, [r1, #4]
 8006ee6:	e01a      	b.n	8006f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef4:	f7fd fbce 	bl	8004694 <HAL_GetTick>
 8006ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006efc:	f7fd fbca 	bl	8004694 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e20e      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f0e:	4b22      	ldr	r3, [pc, #136]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f0      	bne.n	8006efc <HAL_RCC_OscConfig+0x1e0>
 8006f1a:	e000      	b.n	8006f1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 0308 	and.w	r3, r3, #8
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d041      	beq.n	8006fae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d01c      	beq.n	8006f6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f32:	4b19      	ldr	r3, [pc, #100]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f38:	4a17      	ldr	r2, [pc, #92]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f043 0301 	orr.w	r3, r3, #1
 8006f3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f42:	f7fd fba7 	bl	8004694 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fd fba3 	bl	8004694 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e1e7      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0ef      	beq.n	8006f4a <HAL_RCC_OscConfig+0x22e>
 8006f6a:	e020      	b.n	8006fae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f72:	4a09      	ldr	r2, [pc, #36]	@ (8006f98 <HAL_RCC_OscConfig+0x27c>)
 8006f74:	f023 0301 	bic.w	r3, r3, #1
 8006f78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f7c:	f7fd fb8a 	bl	8004694 <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f82:	e00d      	b.n	8006fa0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f84:	f7fd fb86 	bl	8004694 <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d906      	bls.n	8006fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e1ca      	b.n	800732c <HAL_RCC_OscConfig+0x610>
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	2000015c 	.word	0x2000015c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1ea      	bne.n	8006f84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0304 	and.w	r3, r3, #4
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80a6 	beq.w	8007108 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006fc0:	4b84      	ldr	r3, [pc, #528]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x2b4>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e000      	b.n	8006fd2 <HAL_RCC_OscConfig+0x2b6>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fda:	4a7e      	ldr	r2, [pc, #504]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fe2:	4b7c      	ldr	r3, [pc, #496]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff2:	4b79      	ldr	r3, [pc, #484]	@ (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d118      	bne.n	8007030 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ffe:	4b76      	ldr	r3, [pc, #472]	@ (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a75      	ldr	r2, [pc, #468]	@ (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007004:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800700a:	f7fd fb43 	bl	8004694 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007012:	f7fd fb3f 	bl	8004694 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e183      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007024:	4b6c      	ldr	r3, [pc, #432]	@ (80071d8 <HAL_RCC_OscConfig+0x4bc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0f0      	beq.n	8007012 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d108      	bne.n	800704a <HAL_RCC_OscConfig+0x32e>
 8007038:	4b66      	ldr	r3, [pc, #408]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800703a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703e:	4a65      	ldr	r2, [pc, #404]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007048:	e024      	b.n	8007094 <HAL_RCC_OscConfig+0x378>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	2b05      	cmp	r3, #5
 8007050:	d110      	bne.n	8007074 <HAL_RCC_OscConfig+0x358>
 8007052:	4b60      	ldr	r3, [pc, #384]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007058:	4a5e      	ldr	r2, [pc, #376]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007062:	4b5c      	ldr	r3, [pc, #368]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007068:	4a5a      	ldr	r2, [pc, #360]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007072:	e00f      	b.n	8007094 <HAL_RCC_OscConfig+0x378>
 8007074:	4b57      	ldr	r3, [pc, #348]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707a:	4a56      	ldr	r2, [pc, #344]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800707c:	f023 0301 	bic.w	r3, r3, #1
 8007080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007084:	4b53      	ldr	r3, [pc, #332]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708a:	4a52      	ldr	r2, [pc, #328]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800708c:	f023 0304 	bic.w	r3, r3, #4
 8007090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d016      	beq.n	80070ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800709c:	f7fd fafa 	bl	8004694 <HAL_GetTick>
 80070a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070a2:	e00a      	b.n	80070ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070a4:	f7fd faf6 	bl	8004694 <HAL_GetTick>
 80070a8:	4602      	mov	r2, r0
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e138      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ba:	4b46      	ldr	r3, [pc, #280]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0ed      	beq.n	80070a4 <HAL_RCC_OscConfig+0x388>
 80070c8:	e015      	b.n	80070f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fd fae3 	bl	8004694 <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070d0:	e00a      	b.n	80070e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070d2:	f7fd fadf 	bl	8004694 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d901      	bls.n	80070e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e121      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070e8:	4b3a      	ldr	r3, [pc, #232]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1ed      	bne.n	80070d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070f6:	7ffb      	ldrb	r3, [r7, #31]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d105      	bne.n	8007108 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070fc:	4b35      	ldr	r3, [pc, #212]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007100:	4a34      	ldr	r2, [pc, #208]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007102:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007106:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	d03c      	beq.n	800718e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d01c      	beq.n	8007156 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800711c:	4b2d      	ldr	r3, [pc, #180]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800711e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007122:	4a2c      	ldr	r2, [pc, #176]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007124:	f043 0301 	orr.w	r3, r3, #1
 8007128:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800712c:	f7fd fab2 	bl	8004694 <HAL_GetTick>
 8007130:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007132:	e008      	b.n	8007146 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007134:	f7fd faae 	bl	8004694 <HAL_GetTick>
 8007138:	4602      	mov	r2, r0
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	2b02      	cmp	r3, #2
 8007140:	d901      	bls.n	8007146 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0f2      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007146:	4b23      	ldr	r3, [pc, #140]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007148:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d0ef      	beq.n	8007134 <HAL_RCC_OscConfig+0x418>
 8007154:	e01b      	b.n	800718e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007156:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007158:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800715c:	4a1d      	ldr	r2, [pc, #116]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007166:	f7fd fa95 	bl	8004694 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800716c:	e008      	b.n	8007180 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800716e:	f7fd fa91 	bl	8004694 <HAL_GetTick>
 8007172:	4602      	mov	r2, r0
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	1ad3      	subs	r3, r2, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0d5      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007180:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 8007182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1ef      	bne.n	800716e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	69db      	ldr	r3, [r3, #28]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 80c9 	beq.w	800732a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007198:	4b0e      	ldr	r3, [pc, #56]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 030c 	and.w	r3, r3, #12
 80071a0:	2b0c      	cmp	r3, #12
 80071a2:	f000 8083 	beq.w	80072ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d15e      	bne.n	800726c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a08      	ldr	r2, [pc, #32]	@ (80071d4 <HAL_RCC_OscConfig+0x4b8>)
 80071b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ba:	f7fd fa6b 	bl	8004694 <HAL_GetTick>
 80071be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c0:	e00c      	b.n	80071dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fd fa67 	bl	8004694 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d905      	bls.n	80071dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e0ab      	b.n	800732c <HAL_RCC_OscConfig+0x610>
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071dc:	4b55      	ldr	r3, [pc, #340]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1ec      	bne.n	80071c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071e8:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	4b52      	ldr	r3, [pc, #328]	@ (8007338 <HAL_RCC_OscConfig+0x61c>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	6a11      	ldr	r1, [r2, #32]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071f8:	3a01      	subs	r2, #1
 80071fa:	0112      	lsls	r2, r2, #4
 80071fc:	4311      	orrs	r1, r2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007202:	0212      	lsls	r2, r2, #8
 8007204:	4311      	orrs	r1, r2
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800720a:	0852      	lsrs	r2, r2, #1
 800720c:	3a01      	subs	r2, #1
 800720e:	0552      	lsls	r2, r2, #21
 8007210:	4311      	orrs	r1, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007216:	0852      	lsrs	r2, r2, #1
 8007218:	3a01      	subs	r2, #1
 800721a:	0652      	lsls	r2, r2, #25
 800721c:	4311      	orrs	r1, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007222:	06d2      	lsls	r2, r2, #27
 8007224:	430a      	orrs	r2, r1
 8007226:	4943      	ldr	r1, [pc, #268]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 8007228:	4313      	orrs	r3, r2
 800722a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800722c:	4b41      	ldr	r3, [pc, #260]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a40      	ldr	r2, [pc, #256]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 8007232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007238:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	4a3d      	ldr	r2, [pc, #244]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 800723e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007242:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007244:	f7fd fa26 	bl	8004694 <HAL_GetTick>
 8007248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fd fa22 	bl	8004694 <HAL_GetTick>
 8007250:	4602      	mov	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e066      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	4b35      	ldr	r3, [pc, #212]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x530>
 800726a:	e05e      	b.n	800732a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726c:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a30      	ldr	r2, [pc, #192]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 8007272:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007278:	f7fd fa0c 	bl	8004694 <HAL_GetTick>
 800727c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800727e:	e008      	b.n	8007292 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007280:	f7fd fa08 	bl	8004694 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e04c      	b.n	800732c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007292:	4b28      	ldr	r3, [pc, #160]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1f0      	bne.n	8007280 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800729e:	4b25      	ldr	r3, [pc, #148]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	4924      	ldr	r1, [pc, #144]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 80072a4:	4b25      	ldr	r3, [pc, #148]	@ (800733c <HAL_RCC_OscConfig+0x620>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	60cb      	str	r3, [r1, #12]
 80072aa:	e03e      	b.n	800732a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69db      	ldr	r3, [r3, #28]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e039      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80072b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <HAL_RCC_OscConfig+0x618>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f003 0203 	and.w	r2, r3, #3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d12c      	bne.n	8007326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d6:	3b01      	subs	r3, #1
 80072d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072da:	429a      	cmp	r2, r3
 80072dc:	d123      	bne.n	8007326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d11b      	bne.n	8007326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d113      	bne.n	8007326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	3b01      	subs	r3, #1
 800730c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d109      	bne.n	8007326 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731c:	085b      	lsrs	r3, r3, #1
 800731e:	3b01      	subs	r3, #1
 8007320:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007322:	429a      	cmp	r2, r3
 8007324:	d001      	beq.n	800732a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3720      	adds	r7, #32
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	40021000 	.word	0x40021000
 8007338:	019f800c 	.word	0x019f800c
 800733c:	feeefffc 	.word	0xfeeefffc

08007340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800734a:	2300      	movs	r3, #0
 800734c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e11e      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b91      	ldr	r3, [pc, #580]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d910      	bls.n	8007388 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b8e      	ldr	r3, [pc, #568]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 020f 	bic.w	r2, r3, #15
 800736e:	498c      	ldr	r1, [pc, #560]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	4313      	orrs	r3, r2
 8007374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007376:	4b8a      	ldr	r3, [pc, #552]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d001      	beq.n	8007388 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e106      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d073      	beq.n	800747c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d129      	bne.n	80073f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800739c:	4b81      	ldr	r3, [pc, #516]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0f4      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80073ac:	f000 f99e 	bl	80076ec <RCC_GetSysClockFreqFromPLLSource>
 80073b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	4a7c      	ldr	r2, [pc, #496]	@ (80075a8 <HAL_RCC_ClockConfig+0x268>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d93f      	bls.n	800743a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073ba:	4b7a      	ldr	r3, [pc, #488]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d009      	beq.n	80073da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d033      	beq.n	800743a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d12f      	bne.n	800743a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80073da:	4b72      	ldr	r3, [pc, #456]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073e2:	4a70      	ldr	r2, [pc, #448]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80073e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80073ea:	2380      	movs	r3, #128	@ 0x80
 80073ec:	617b      	str	r3, [r7, #20]
 80073ee:	e024      	b.n	800743a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	2b02      	cmp	r3, #2
 80073f6:	d107      	bne.n	8007408 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073f8:	4b6a      	ldr	r3, [pc, #424]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d109      	bne.n	8007418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0c6      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007408:	4b66      	ldr	r3, [pc, #408]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	e0be      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007418:	f000 f8ce 	bl	80075b8 <HAL_RCC_GetSysClockFreq>
 800741c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	4a61      	ldr	r2, [pc, #388]	@ (80075a8 <HAL_RCC_ClockConfig+0x268>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d909      	bls.n	800743a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007426:	4b5f      	ldr	r3, [pc, #380]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800742e:	4a5d      	ldr	r2, [pc, #372]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007434:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800743a:	4b5a      	ldr	r3, [pc, #360]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f023 0203 	bic.w	r2, r3, #3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	4957      	ldr	r1, [pc, #348]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007448:	4313      	orrs	r3, r2
 800744a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744c:	f7fd f922 	bl	8004694 <HAL_GetTick>
 8007450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007452:	e00a      	b.n	800746a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007454:	f7fd f91e 	bl	8004694 <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007462:	4293      	cmp	r3, r2
 8007464:	d901      	bls.n	800746a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e095      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746a:	4b4e      	ldr	r3, [pc, #312]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 020c 	and.w	r2, r3, #12
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	429a      	cmp	r2, r3
 800747a:	d1eb      	bne.n	8007454 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d023      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007494:	4b43      	ldr	r3, [pc, #268]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4a42      	ldr	r2, [pc, #264]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800749a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800749e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80074ac:	4b3d      	ldr	r3, [pc, #244]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80074b4:	4a3b      	ldr	r2, [pc, #236]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074bc:	4b39      	ldr	r3, [pc, #228]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4936      	ldr	r1, [pc, #216]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	608b      	str	r3, [r1, #8]
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2b80      	cmp	r3, #128	@ 0x80
 80074d4:	d105      	bne.n	80074e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80074d6:	4b33      	ldr	r3, [pc, #204]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	4a32      	ldr	r2, [pc, #200]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 80074dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80074e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074e2:	4b2f      	ldr	r3, [pc, #188]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d21d      	bcs.n	800752c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f0:	4b2b      	ldr	r3, [pc, #172]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f023 020f 	bic.w	r2, r3, #15
 80074f8:	4929      	ldr	r1, [pc, #164]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007500:	f7fd f8c8 	bl	8004694 <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	e00a      	b.n	800751e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007508:	f7fd f8c4 	bl	8004694 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e03b      	b.n	8007596 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800751e:	4b20      	ldr	r3, [pc, #128]	@ (80075a0 <HAL_RCC_ClockConfig+0x260>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d1ed      	bne.n	8007508 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b00      	cmp	r3, #0
 8007536:	d008      	beq.n	800754a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007538:	4b1a      	ldr	r3, [pc, #104]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4917      	ldr	r1, [pc, #92]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007546:	4313      	orrs	r3, r2
 8007548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d009      	beq.n	800756a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007556:	4b13      	ldr	r3, [pc, #76]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	00db      	lsls	r3, r3, #3
 8007564:	490f      	ldr	r1, [pc, #60]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007566:	4313      	orrs	r3, r2
 8007568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800756a:	f000 f825 	bl	80075b8 <HAL_RCC_GetSysClockFreq>
 800756e:	4602      	mov	r2, r0
 8007570:	4b0c      	ldr	r3, [pc, #48]	@ (80075a4 <HAL_RCC_ClockConfig+0x264>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	091b      	lsrs	r3, r3, #4
 8007576:	f003 030f 	and.w	r3, r3, #15
 800757a:	490c      	ldr	r1, [pc, #48]	@ (80075ac <HAL_RCC_ClockConfig+0x26c>)
 800757c:	5ccb      	ldrb	r3, [r1, r3]
 800757e:	f003 031f 	and.w	r3, r3, #31
 8007582:	fa22 f303 	lsr.w	r3, r2, r3
 8007586:	4a0a      	ldr	r2, [pc, #40]	@ (80075b0 <HAL_RCC_ClockConfig+0x270>)
 8007588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800758a:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <HAL_RCC_ClockConfig+0x274>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd f834 	bl	80045fc <HAL_InitTick>
 8007594:	4603      	mov	r3, r0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40022000 	.word	0x40022000
 80075a4:	40021000 	.word	0x40021000
 80075a8:	04c4b400 	.word	0x04c4b400
 80075ac:	0800da4c 	.word	0x0800da4c
 80075b0:	20000158 	.word	0x20000158
 80075b4:	2000015c 	.word	0x2000015c

080075b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80075be:	4b2c      	ldr	r3, [pc, #176]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	f003 030c 	and.w	r3, r3, #12
 80075c6:	2b04      	cmp	r3, #4
 80075c8:	d102      	bne.n	80075d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075ca:	4b2a      	ldr	r3, [pc, #168]	@ (8007674 <HAL_RCC_GetSysClockFreq+0xbc>)
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	e047      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80075d0:	4b27      	ldr	r3, [pc, #156]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 030c 	and.w	r3, r3, #12
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d102      	bne.n	80075e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075dc:	4b26      	ldr	r3, [pc, #152]	@ (8007678 <HAL_RCC_GetSysClockFreq+0xc0>)
 80075de:	613b      	str	r3, [r7, #16]
 80075e0:	e03e      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80075e2:	4b23      	ldr	r3, [pc, #140]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f003 030c 	and.w	r3, r3, #12
 80075ea:	2b0c      	cmp	r3, #12
 80075ec:	d136      	bne.n	800765c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075ee:	4b20      	ldr	r3, [pc, #128]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	091b      	lsrs	r3, r3, #4
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	3301      	adds	r3, #1
 8007604:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d10c      	bne.n	8007626 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800760c:	4a1a      	ldr	r2, [pc, #104]	@ (8007678 <HAL_RCC_GetSysClockFreq+0xc0>)
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	fbb2 f3f3 	udiv	r3, r2, r3
 8007614:	4a16      	ldr	r2, [pc, #88]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007616:	68d2      	ldr	r2, [r2, #12]
 8007618:	0a12      	lsrs	r2, r2, #8
 800761a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800761e:	fb02 f303 	mul.w	r3, r2, r3
 8007622:	617b      	str	r3, [r7, #20]
      break;
 8007624:	e00c      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007626:	4a13      	ldr	r2, [pc, #76]	@ (8007674 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	fbb2 f3f3 	udiv	r3, r2, r3
 800762e:	4a10      	ldr	r2, [pc, #64]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007630:	68d2      	ldr	r2, [r2, #12]
 8007632:	0a12      	lsrs	r2, r2, #8
 8007634:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007638:	fb02 f303 	mul.w	r3, r2, r3
 800763c:	617b      	str	r3, [r7, #20]
      break;
 800763e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007640:	4b0b      	ldr	r3, [pc, #44]	@ (8007670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	0e5b      	lsrs	r3, r3, #25
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	3301      	adds	r3, #1
 800764c:	005b      	lsls	r3, r3, #1
 800764e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	fbb2 f3f3 	udiv	r3, r2, r3
 8007658:	613b      	str	r3, [r7, #16]
 800765a:	e001      	b.n	8007660 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800765c:	2300      	movs	r3, #0
 800765e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007660:	693b      	ldr	r3, [r7, #16]
}
 8007662:	4618      	mov	r0, r3
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40021000 	.word	0x40021000
 8007674:	00f42400 	.word	0x00f42400
 8007678:	016e3600 	.word	0x016e3600

0800767c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007680:	4b03      	ldr	r3, [pc, #12]	@ (8007690 <HAL_RCC_GetHCLKFreq+0x14>)
 8007682:	681b      	ldr	r3, [r3, #0]
}
 8007684:	4618      	mov	r0, r3
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000158 	.word	0x20000158

08007694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007698:	f7ff fff0 	bl	800767c <HAL_RCC_GetHCLKFreq>
 800769c:	4602      	mov	r2, r0
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	0a1b      	lsrs	r3, r3, #8
 80076a4:	f003 0307 	and.w	r3, r3, #7
 80076a8:	4904      	ldr	r1, [pc, #16]	@ (80076bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80076aa:	5ccb      	ldrb	r3, [r1, r3]
 80076ac:	f003 031f 	and.w	r3, r3, #31
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40021000 	.word	0x40021000
 80076bc:	0800da5c 	.word	0x0800da5c

080076c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076c4:	f7ff ffda 	bl	800767c <HAL_RCC_GetHCLKFreq>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	0adb      	lsrs	r3, r3, #11
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	4904      	ldr	r1, [pc, #16]	@ (80076e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076d6:	5ccb      	ldrb	r3, [r1, r3]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40021000 	.word	0x40021000
 80076e8:	0800da5c 	.word	0x0800da5c

080076ec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b087      	sub	sp, #28
 80076f0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80076f2:	4b1e      	ldr	r3, [pc, #120]	@ (800776c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076f4:	68db      	ldr	r3, [r3, #12]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80076fc:	4b1b      	ldr	r3, [pc, #108]	@ (800776c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	3301      	adds	r3, #1
 8007708:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b03      	cmp	r3, #3
 800770e:	d10c      	bne.n	800772a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007710:	4a17      	ldr	r2, [pc, #92]	@ (8007770 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	fbb2 f3f3 	udiv	r3, r2, r3
 8007718:	4a14      	ldr	r2, [pc, #80]	@ (800776c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800771a:	68d2      	ldr	r2, [r2, #12]
 800771c:	0a12      	lsrs	r2, r2, #8
 800771e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007722:	fb02 f303 	mul.w	r3, r2, r3
 8007726:	617b      	str	r3, [r7, #20]
    break;
 8007728:	e00c      	b.n	8007744 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800772a:	4a12      	ldr	r2, [pc, #72]	@ (8007774 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007732:	4a0e      	ldr	r2, [pc, #56]	@ (800776c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007734:	68d2      	ldr	r2, [r2, #12]
 8007736:	0a12      	lsrs	r2, r2, #8
 8007738:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800773c:	fb02 f303 	mul.w	r3, r2, r3
 8007740:	617b      	str	r3, [r7, #20]
    break;
 8007742:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007744:	4b09      	ldr	r3, [pc, #36]	@ (800776c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	0e5b      	lsrs	r3, r3, #25
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	3301      	adds	r3, #1
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007754:	697a      	ldr	r2, [r7, #20]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	fbb2 f3f3 	udiv	r3, r2, r3
 800775c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800775e:	687b      	ldr	r3, [r7, #4]
}
 8007760:	4618      	mov	r0, r3
 8007762:	371c      	adds	r7, #28
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr
 800776c:	40021000 	.word	0x40021000
 8007770:	016e3600 	.word	0x016e3600
 8007774:	00f42400 	.word	0x00f42400

08007778 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007780:	2300      	movs	r3, #0
 8007782:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007784:	2300      	movs	r3, #0
 8007786:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 8098 	beq.w	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007796:	2300      	movs	r3, #0
 8007798:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800779a:	4b43      	ldr	r3, [pc, #268]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800779c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800779e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d10d      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a6:	4b40      	ldr	r3, [pc, #256]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077aa:	4a3f      	ldr	r2, [pc, #252]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80077b2:	4b3d      	ldr	r3, [pc, #244]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077be:	2301      	movs	r3, #1
 80077c0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077c2:	4b3a      	ldr	r3, [pc, #232]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a39      	ldr	r2, [pc, #228]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077cc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80077ce:	f7fc ff61 	bl	8004694 <HAL_GetTick>
 80077d2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077d4:	e009      	b.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077d6:	f7fc ff5d 	bl	8004694 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d902      	bls.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	74fb      	strb	r3, [r7, #19]
        break;
 80077e8:	e005      	b.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80077ea:	4b30      	ldr	r3, [pc, #192]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0ef      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80077f6:	7cfb      	ldrb	r3, [r7, #19]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d159      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80077fc:	4b2a      	ldr	r3, [pc, #168]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007806:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d01e      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	429a      	cmp	r2, r3
 8007816:	d019      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007818:	4b23      	ldr	r3, [pc, #140]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007822:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007824:	4b20      	ldr	r3, [pc, #128]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800782a:	4a1f      	ldr	r2, [pc, #124]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800782c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007830:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007834:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783a:	4a1b      	ldr	r2, [pc, #108]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800783c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007840:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007844:	4a18      	ldr	r2, [pc, #96]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007856:	f7fc ff1d 	bl	8004694 <HAL_GetTick>
 800785a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800785c:	e00b      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800785e:	f7fc ff19 	bl	8004694 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	f241 3288 	movw	r2, #5000	@ 0x1388
 800786c:	4293      	cmp	r3, r2
 800786e:	d902      	bls.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	74fb      	strb	r3, [r7, #19]
            break;
 8007874:	e006      	b.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d0ec      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007884:	7cfb      	ldrb	r3, [r7, #19]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10b      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800788a:	4b07      	ldr	r3, [pc, #28]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800788c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007890:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007898:	4903      	ldr	r1, [pc, #12]	@ (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800789a:	4313      	orrs	r3, r2
 800789c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80078a0:	e008      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078a2:	7cfb      	ldrb	r3, [r7, #19]
 80078a4:	74bb      	strb	r3, [r7, #18]
 80078a6:	e005      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80078a8:	40021000 	.word	0x40021000
 80078ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078b4:	7c7b      	ldrb	r3, [r7, #17]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d105      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078ba:	4ba7      	ldr	r3, [pc, #668]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078be:	4aa6      	ldr	r2, [pc, #664]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078d2:	4ba1      	ldr	r3, [pc, #644]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d8:	f023 0203 	bic.w	r2, r3, #3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	499d      	ldr	r1, [pc, #628]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80078f4:	4b98      	ldr	r3, [pc, #608]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078fa:	f023 020c 	bic.w	r2, r3, #12
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	4995      	ldr	r1, [pc, #596]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007916:	4b90      	ldr	r3, [pc, #576]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800791c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	498c      	ldr	r1, [pc, #560]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007938:	4b87      	ldr	r3, [pc, #540]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	4984      	ldr	r1, [pc, #528]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0310 	and.w	r3, r3, #16
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00a      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800795a:	4b7f      	ldr	r3, [pc, #508]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800795c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007960:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	497b      	ldr	r1, [pc, #492]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800796a:	4313      	orrs	r3, r2
 800796c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 0320 	and.w	r3, r3, #32
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800797c:	4b76      	ldr	r3, [pc, #472]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800797e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007982:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	4973      	ldr	r1, [pc, #460]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798c:	4313      	orrs	r3, r2
 800798e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800799e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	496a      	ldr	r1, [pc, #424]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80079c0:	4b65      	ldr	r3, [pc, #404]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	4962      	ldr	r1, [pc, #392]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80079e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	4959      	ldr	r1, [pc, #356]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a04:	4b54      	ldr	r3, [pc, #336]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a0a:	f023 0203 	bic.w	r2, r3, #3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a12:	4951      	ldr	r1, [pc, #324]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a26:	4b4c      	ldr	r3, [pc, #304]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	4948      	ldr	r1, [pc, #288]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d015      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a48:	4b43      	ldr	r3, [pc, #268]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a56:	4940      	ldr	r1, [pc, #256]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a66:	d105      	bne.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a68:	4b3b      	ldr	r3, [pc, #236]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	4a3a      	ldr	r2, [pc, #232]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a72:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d015      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a80:	4b35      	ldr	r3, [pc, #212]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a86:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a8e:	4932      	ldr	r1, [pc, #200]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a9e:	d105      	bne.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007aaa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d015      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007ab8:	4b27      	ldr	r3, [pc, #156]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007abe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ac6:	4924      	ldr	r1, [pc, #144]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ad6:	d105      	bne.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ad8:	4b1f      	ldr	r3, [pc, #124]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	4a1e      	ldr	r2, [pc, #120]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ae2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d015      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007af0:	4b19      	ldr	r3, [pc, #100]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007afe:	4916      	ldr	r1, [pc, #88]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b0e:	d105      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b10:	4b11      	ldr	r3, [pc, #68]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4a10      	ldr	r2, [pc, #64]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d019      	beq.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b28:	4b0b      	ldr	r3, [pc, #44]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b36:	4908      	ldr	r1, [pc, #32]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b46:	d109      	bne.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b48:	4b03      	ldr	r3, [pc, #12]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	4a02      	ldr	r2, [pc, #8]	@ (8007b58 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b52:	60d3      	str	r3, [r2, #12]
 8007b54:	e002      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007b56:	bf00      	nop
 8007b58:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d015      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007b68:	4b29      	ldr	r3, [pc, #164]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b76:	4926      	ldr	r1, [pc, #152]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b86:	d105      	bne.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007b88:	4b21      	ldr	r3, [pc, #132]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	4a20      	ldr	r2, [pc, #128]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b92:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d015      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bae:	4918      	ldr	r1, [pc, #96]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bbe:	d105      	bne.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bc0:	4b13      	ldr	r3, [pc, #76]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4a12      	ldr	r2, [pc, #72]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bca:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d015      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007be6:	490a      	ldr	r1, [pc, #40]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bf2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007bf6:	d105      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007bf8:	4b05      	ldr	r3, [pc, #20]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	4a04      	ldr	r2, [pc, #16]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c04:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	40021000 	.word	0x40021000

08007c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e054      	b.n	8007cd0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d111      	bne.n	8007c56 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f001 fee2 	bl	8009a04 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a23      	ldr	r2, [pc, #140]	@ (8007cd8 <HAL_TIM_Base_Init+0xc4>)
 8007c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f001 fa2b 	bl	80090c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cce:	2300      	movs	r3, #0
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	08004099 	.word	0x08004099

08007cdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d001      	beq.n	8007cf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e04c      	b.n	8007d8e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a26      	ldr	r2, [pc, #152]	@ (8007d9c <HAL_TIM_Base_Start+0xc0>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d022      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d0e:	d01d      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a22      	ldr	r2, [pc, #136]	@ (8007da0 <HAL_TIM_Base_Start+0xc4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d018      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a21      	ldr	r2, [pc, #132]	@ (8007da4 <HAL_TIM_Base_Start+0xc8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d013      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a1f      	ldr	r2, [pc, #124]	@ (8007da8 <HAL_TIM_Base_Start+0xcc>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00e      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a1e      	ldr	r2, [pc, #120]	@ (8007dac <HAL_TIM_Base_Start+0xd0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d009      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <HAL_TIM_Base_Start+0xd4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d004      	beq.n	8007d4c <HAL_TIM_Base_Start+0x70>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a1b      	ldr	r2, [pc, #108]	@ (8007db4 <HAL_TIM_Base_Start+0xd8>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d115      	bne.n	8007d78 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689a      	ldr	r2, [r3, #8]
 8007d52:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_TIM_Base_Start+0xdc>)
 8007d54:	4013      	ands	r3, r2
 8007d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b06      	cmp	r3, #6
 8007d5c:	d015      	beq.n	8007d8a <HAL_TIM_Base_Start+0xae>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d64:	d011      	beq.n	8007d8a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f042 0201 	orr.w	r2, r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d76:	e008      	b.n	8007d8a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 0201 	orr.w	r2, r2, #1
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	e000      	b.n	8007d8c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40000400 	.word	0x40000400
 8007da4:	40000800 	.word	0x40000800
 8007da8:	40000c00 	.word	0x40000c00
 8007dac:	40013400 	.word	0x40013400
 8007db0:	40014000 	.word	0x40014000
 8007db4:	40015000 	.word	0x40015000
 8007db8:	00010007 	.word	0x00010007

08007dbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d001      	beq.n	8007dd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e054      	b.n	8007e7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f042 0201 	orr.w	r2, r2, #1
 8007dea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a26      	ldr	r2, [pc, #152]	@ (8007e8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d022      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dfe:	d01d      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a22      	ldr	r2, [pc, #136]	@ (8007e90 <HAL_TIM_Base_Start_IT+0xd4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d018      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a21      	ldr	r2, [pc, #132]	@ (8007e94 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a1f      	ldr	r2, [pc, #124]	@ (8007e98 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d00e      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a1e      	ldr	r2, [pc, #120]	@ (8007e9c <HAL_TIM_Base_Start_IT+0xe0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ea0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d004      	beq.n	8007e3c <HAL_TIM_Base_Start_IT+0x80>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a1b      	ldr	r2, [pc, #108]	@ (8007ea4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d115      	bne.n	8007e68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <HAL_TIM_Base_Start_IT+0xec>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2b06      	cmp	r3, #6
 8007e4c:	d015      	beq.n	8007e7a <HAL_TIM_Base_Start_IT+0xbe>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e54:	d011      	beq.n	8007e7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f042 0201 	orr.w	r2, r2, #1
 8007e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e66:	e008      	b.n	8007e7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f042 0201 	orr.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	e000      	b.n	8007e7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	40012c00 	.word	0x40012c00
 8007e90:	40000400 	.word	0x40000400
 8007e94:	40000800 	.word	0x40000800
 8007e98:	40000c00 	.word	0x40000c00
 8007e9c:	40013400 	.word	0x40013400
 8007ea0:	40014000 	.word	0x40014000
 8007ea4:	40015000 	.word	0x40015000
 8007ea8:	00010007 	.word	0x00010007

08007eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b082      	sub	sp, #8
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e054      	b.n	8007f68 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d111      	bne.n	8007eee <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f001 fd96 	bl	8009a04 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a23      	ldr	r2, [pc, #140]	@ (8007f70 <HAL_TIM_PWM_Init+0xc4>)
 8007ee4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f001 f8df 	bl	80090c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2201      	movs	r2, #1
 8007f1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	0800404d 	.word	0x0800404d

08007f74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d109      	bne.n	8007f98 <HAL_TIM_PWM_Start+0x24>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	bf14      	ite	ne
 8007f90:	2301      	movne	r3, #1
 8007f92:	2300      	moveq	r3, #0
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	e03c      	b.n	8008012 <HAL_TIM_PWM_Start+0x9e>
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	2b04      	cmp	r3, #4
 8007f9c:	d109      	bne.n	8007fb2 <HAL_TIM_PWM_Start+0x3e>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	bf14      	ite	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	2300      	moveq	r3, #0
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	e02f      	b.n	8008012 <HAL_TIM_PWM_Start+0x9e>
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d109      	bne.n	8007fcc <HAL_TIM_PWM_Start+0x58>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	bf14      	ite	ne
 8007fc4:	2301      	movne	r3, #1
 8007fc6:	2300      	moveq	r3, #0
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	e022      	b.n	8008012 <HAL_TIM_PWM_Start+0x9e>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b0c      	cmp	r3, #12
 8007fd0:	d109      	bne.n	8007fe6 <HAL_TIM_PWM_Start+0x72>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e015      	b.n	8008012 <HAL_TIM_PWM_Start+0x9e>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b10      	cmp	r3, #16
 8007fea:	d109      	bne.n	8008000 <HAL_TIM_PWM_Start+0x8c>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	e008      	b.n	8008012 <HAL_TIM_PWM_Start+0x9e>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	bf14      	ite	ne
 800800c:	2301      	movne	r3, #1
 800800e:	2300      	moveq	r3, #0
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d001      	beq.n	800801a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e0a6      	b.n	8008168 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d104      	bne.n	800802a <HAL_TIM_PWM_Start+0xb6>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008028:	e023      	b.n	8008072 <HAL_TIM_PWM_Start+0xfe>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b04      	cmp	r3, #4
 800802e:	d104      	bne.n	800803a <HAL_TIM_PWM_Start+0xc6>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008038:	e01b      	b.n	8008072 <HAL_TIM_PWM_Start+0xfe>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d104      	bne.n	800804a <HAL_TIM_PWM_Start+0xd6>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008048:	e013      	b.n	8008072 <HAL_TIM_PWM_Start+0xfe>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b0c      	cmp	r3, #12
 800804e:	d104      	bne.n	800805a <HAL_TIM_PWM_Start+0xe6>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008058:	e00b      	b.n	8008072 <HAL_TIM_PWM_Start+0xfe>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b10      	cmp	r3, #16
 800805e:	d104      	bne.n	800806a <HAL_TIM_PWM_Start+0xf6>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2202      	movs	r2, #2
 8008064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008068:	e003      	b.n	8008072 <HAL_TIM_PWM_Start+0xfe>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2202      	movs	r2, #2
 800806e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2201      	movs	r2, #1
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	4618      	mov	r0, r3
 800807c:	f001 fc9c 	bl	80099b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a3a      	ldr	r2, [pc, #232]	@ (8008170 <HAL_TIM_PWM_Start+0x1fc>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d018      	beq.n	80080bc <HAL_TIM_PWM_Start+0x148>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a39      	ldr	r2, [pc, #228]	@ (8008174 <HAL_TIM_PWM_Start+0x200>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <HAL_TIM_PWM_Start+0x148>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a37      	ldr	r2, [pc, #220]	@ (8008178 <HAL_TIM_PWM_Start+0x204>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d00e      	beq.n	80080bc <HAL_TIM_PWM_Start+0x148>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a36      	ldr	r2, [pc, #216]	@ (800817c <HAL_TIM_PWM_Start+0x208>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d009      	beq.n	80080bc <HAL_TIM_PWM_Start+0x148>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	@ (8008180 <HAL_TIM_PWM_Start+0x20c>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d004      	beq.n	80080bc <HAL_TIM_PWM_Start+0x148>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a33      	ldr	r2, [pc, #204]	@ (8008184 <HAL_TIM_PWM_Start+0x210>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d101      	bne.n	80080c0 <HAL_TIM_PWM_Start+0x14c>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <HAL_TIM_PWM_Start+0x14e>
 80080c0:	2300      	movs	r3, #0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80080d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a25      	ldr	r2, [pc, #148]	@ (8008170 <HAL_TIM_PWM_Start+0x1fc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d022      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080e8:	d01d      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a26      	ldr	r2, [pc, #152]	@ (8008188 <HAL_TIM_PWM_Start+0x214>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d018      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a24      	ldr	r2, [pc, #144]	@ (800818c <HAL_TIM_PWM_Start+0x218>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d013      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a23      	ldr	r2, [pc, #140]	@ (8008190 <HAL_TIM_PWM_Start+0x21c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d00e      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a19      	ldr	r2, [pc, #100]	@ (8008174 <HAL_TIM_PWM_Start+0x200>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d009      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a18      	ldr	r2, [pc, #96]	@ (8008178 <HAL_TIM_PWM_Start+0x204>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d004      	beq.n	8008126 <HAL_TIM_PWM_Start+0x1b2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a18      	ldr	r2, [pc, #96]	@ (8008184 <HAL_TIM_PWM_Start+0x210>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d115      	bne.n	8008152 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <HAL_TIM_PWM_Start+0x220>)
 800812e:	4013      	ands	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b06      	cmp	r3, #6
 8008136:	d015      	beq.n	8008164 <HAL_TIM_PWM_Start+0x1f0>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800813e:	d011      	beq.n	8008164 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008150:	e008      	b.n	8008164 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0201 	orr.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e000      	b.n	8008166 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	40012c00 	.word	0x40012c00
 8008174:	40013400 	.word	0x40013400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800
 8008184:	40015000 	.word	0x40015000
 8008188:	40000400 	.word	0x40000400
 800818c:	40000800 	.word	0x40000800
 8008190:	40000c00 	.word	0x40000c00
 8008194:	00010007 	.word	0x00010007

08008198 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e04c      	b.n	8008246 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d111      	bne.n	80081dc <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 fc1f 	bl	8009a04 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d102      	bne.n	80081d4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1f      	ldr	r2, [pc, #124]	@ (8008250 <HAL_TIM_OnePulse_Init+0xb8>)
 80081d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2202      	movs	r2, #2
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	3304      	adds	r3, #4
 80081ec:	4619      	mov	r1, r3
 80081ee:	4610      	mov	r0, r2
 80081f0:	f000 ff68 	bl	80090c4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f022 0208 	bic.w	r2, r2, #8
 8008202:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6819      	ldr	r1, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	430a      	orrs	r2, r1
 8008212:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3708      	adds	r7, #8
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	08008255 	.word	0x08008255

08008254 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008278:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008280:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008288:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008290:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b01      	cmp	r3, #1
 8008296:	d108      	bne.n	80082aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d105      	bne.n	80082aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800829e:	7b7b      	ldrb	r3, [r7, #13]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d102      	bne.n	80082aa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80082a4:	7b3b      	ldrb	r3, [r7, #12]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d001      	beq.n	80082ae <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e059      	b.n	8008362 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2202      	movs	r2, #2
 80082ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2202      	movs	r2, #2
 80082c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2202      	movs	r2, #2
 80082ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f042 0202 	orr.w	r2, r2, #2
 80082dc:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f042 0204 	orr.w	r2, r2, #4
 80082ec:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	2201      	movs	r2, #1
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fb5e 	bl	80099b8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2201      	movs	r2, #1
 8008302:	2104      	movs	r1, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f001 fb57 	bl	80099b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a17      	ldr	r2, [pc, #92]	@ (800836c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a15      	ldr	r2, [pc, #84]	@ (8008370 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_TIM_OnePulse_Start_IT+0xde>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a14      	ldr	r2, [pc, #80]	@ (8008374 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a12      	ldr	r2, [pc, #72]	@ (8008378 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a11      	ldr	r2, [pc, #68]	@ (800837c <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_TIM_OnePulse_Start_IT+0xde>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a0f      	ldr	r2, [pc, #60]	@ (8008380 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d101      	bne.n	800834a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800834a:	2300      	movs	r3, #0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800835e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40012c00 	.word	0x40012c00
 8008370:	40013400 	.word	0x40013400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800
 8008380:	40015000 	.word	0x40015000

08008384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0a2      	b.n	80084de <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d111      	bne.n	80083c8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fb29 	bl	8009a04 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d102      	bne.n	80083c0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a4a      	ldr	r2, [pc, #296]	@ (80084e8 <HAL_TIM_Encoder_Init+0x164>)
 80083be:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6812      	ldr	r2, [r2, #0]
 80083da:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80083de:	f023 0307 	bic.w	r3, r3, #7
 80083e2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f000 fe68 	bl	80090c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	689a      	ldr	r2, [r3, #8]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	021b      	lsls	r3, r3, #8
 800842c:	4313      	orrs	r3, r2
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	4313      	orrs	r3, r2
 8008432:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800843a:	f023 030c 	bic.w	r3, r3, #12
 800843e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008446:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	69db      	ldr	r3, [r3, #28]
 8008454:	021b      	lsls	r3, r3, #8
 8008456:	4313      	orrs	r3, r2
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	011a      	lsls	r2, r3, #4
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	031b      	lsls	r3, r3, #12
 800846a:	4313      	orrs	r3, r2
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	4313      	orrs	r3, r2
 8008470:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008478:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008480:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4313      	orrs	r3, r2
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4313      	orrs	r3, r2
 8008492:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3718      	adds	r7, #24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	08004169 	.word	0x08004169

080084ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80084fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008504:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800850c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008514:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d110      	bne.n	800853e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d102      	bne.n	8008528 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008522:	7b7b      	ldrb	r3, [r7, #13]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d001      	beq.n	800852c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e069      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800853c:	e031      	b.n	80085a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b04      	cmp	r3, #4
 8008542:	d110      	bne.n	8008566 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008544:	7bbb      	ldrb	r3, [r7, #14]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d102      	bne.n	8008550 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800854a:	7b3b      	ldrb	r3, [r7, #12]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d001      	beq.n	8008554 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e055      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2202      	movs	r2, #2
 8008558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2202      	movs	r2, #2
 8008560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008564:	e01d      	b.n	80085a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d108      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d105      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008572:	7b7b      	ldrb	r3, [r7, #13]
 8008574:	2b01      	cmp	r3, #1
 8008576:	d102      	bne.n	800857e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008578:	7b3b      	ldrb	r3, [r7, #12]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d001      	beq.n	8008582 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e03e      	b.n	8008600 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2202      	movs	r2, #2
 8008586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2202      	movs	r2, #2
 800858e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2202      	movs	r2, #2
 8008596:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2202      	movs	r2, #2
 800859e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_TIM_Encoder_Start+0xc4>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b04      	cmp	r3, #4
 80085ac:	d008      	beq.n	80085c0 <HAL_TIM_Encoder_Start+0xd4>
 80085ae:	e00f      	b.n	80085d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2201      	movs	r2, #1
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 f9fd 	bl	80099b8 <TIM_CCxChannelCmd>
      break;
 80085be:	e016      	b.n	80085ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	2104      	movs	r1, #4
 80085c8:	4618      	mov	r0, r3
 80085ca:	f001 f9f5 	bl	80099b8 <TIM_CCxChannelCmd>
      break;
 80085ce:	e00e      	b.n	80085ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f001 f9ed 	bl	80099b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2201      	movs	r2, #1
 80085e4:	2104      	movs	r1, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f001 f9e6 	bl	80099b8 <TIM_CCxChannelCmd>
      break;
 80085ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0201 	orr.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68db      	ldr	r3, [r3, #12]
 8008616:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d026      	beq.n	8008678 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d021      	beq.n	8008678 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f06f 0202 	mvn.w	r2, #2
 800863c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2201      	movs	r2, #1
 8008642:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	699b      	ldr	r3, [r3, #24]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d005      	beq.n	800865e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	4798      	blx	r3
 800865c:	e009      	b.n	8008672 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	f003 0304 	and.w	r3, r3, #4
 800867e:	2b00      	cmp	r3, #0
 8008680:	d026      	beq.n	80086d0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f003 0304 	and.w	r3, r3, #4
 8008688:	2b00      	cmp	r3, #0
 800868a:	d021      	beq.n	80086d0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f06f 0204 	mvn.w	r2, #4
 8008694:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2202      	movs	r2, #2
 800869a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	699b      	ldr	r3, [r3, #24]
 80086a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
 80086b4:	e009      	b.n	80086ca <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d026      	beq.n	8008728 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f003 0308 	and.w	r3, r3, #8
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d021      	beq.n	8008728 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f06f 0208 	mvn.w	r2, #8
 80086ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2204      	movs	r2, #4
 80086f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d005      	beq.n	800870e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
 800870c:	e009      	b.n	8008722 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2200      	movs	r2, #0
 8008726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b00      	cmp	r3, #0
 8008730:	d026      	beq.n	8008780 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d021      	beq.n	8008780 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f06f 0210 	mvn.w	r2, #16
 8008744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2208      	movs	r2, #8
 800874a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008756:	2b00      	cmp	r3, #0
 8008758:	d005      	beq.n	8008766 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
 8008764:	e009      	b.n	800877a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	2b00      	cmp	r3, #0
 8008792:	d009      	beq.n	80087a8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0201 	mvn.w	r2, #1
 800879c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d104      	bne.n	80087bc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00e      	beq.n	80087da <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d009      	beq.n	80087da <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80087ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d00e      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d009      	beq.n	8008802 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80087f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800881e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	f003 0320 	and.w	r3, r3, #32
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00e      	beq.n	8008852 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f003 0320 	and.w	r3, r3, #32
 800883a:	2b00      	cmp	r3, #0
 800883c:	d009      	beq.n	8008852 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f06f 0220 	mvn.w	r2, #32
 8008846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00e      	beq.n	800887a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008862:	2b00      	cmp	r3, #0
 8008864:	d009      	beq.n	800887a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800886e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d009      	beq.n	80088a2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d00e      	beq.n	80088ca <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d009      	beq.n	80088ca <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00e      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d009      	beq.n	80088f2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f2:	bf00      	nop
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b086      	sub	sp, #24
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008912:	2b01      	cmp	r3, #1
 8008914:	d101      	bne.n	800891a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008916:	2302      	movs	r3, #2
 8008918:	e0ff      	b.n	8008b1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b14      	cmp	r3, #20
 8008926:	f200 80f0 	bhi.w	8008b0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800892a:	a201      	add	r2, pc, #4	@ (adr r2, 8008930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800892c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008930:	08008985 	.word	0x08008985
 8008934:	08008b0b 	.word	0x08008b0b
 8008938:	08008b0b 	.word	0x08008b0b
 800893c:	08008b0b 	.word	0x08008b0b
 8008940:	080089c5 	.word	0x080089c5
 8008944:	08008b0b 	.word	0x08008b0b
 8008948:	08008b0b 	.word	0x08008b0b
 800894c:	08008b0b 	.word	0x08008b0b
 8008950:	08008a07 	.word	0x08008a07
 8008954:	08008b0b 	.word	0x08008b0b
 8008958:	08008b0b 	.word	0x08008b0b
 800895c:	08008b0b 	.word	0x08008b0b
 8008960:	08008a47 	.word	0x08008a47
 8008964:	08008b0b 	.word	0x08008b0b
 8008968:	08008b0b 	.word	0x08008b0b
 800896c:	08008b0b 	.word	0x08008b0b
 8008970:	08008a89 	.word	0x08008a89
 8008974:	08008b0b 	.word	0x08008b0b
 8008978:	08008b0b 	.word	0x08008b0b
 800897c:	08008b0b 	.word	0x08008b0b
 8008980:	08008ac9 	.word	0x08008ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fc4e 	bl	800922c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	699a      	ldr	r2, [r3, #24]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	699a      	ldr	r2, [r3, #24]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0204 	bic.w	r2, r2, #4
 80089ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6999      	ldr	r1, [r3, #24]
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	619a      	str	r2, [r3, #24]
      break;
 80089c2:	e0a5      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fcc8 	bl	8009360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6999      	ldr	r1, [r3, #24]
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	021a      	lsls	r2, r3, #8
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	619a      	str	r2, [r3, #24]
      break;
 8008a04:	e084      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68b9      	ldr	r1, [r7, #8]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f000 fd3b 	bl	8009488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f042 0208 	orr.w	r2, r2, #8
 8008a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69da      	ldr	r2, [r3, #28]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0204 	bic.w	r2, r2, #4
 8008a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69d9      	ldr	r1, [r3, #28]
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	691a      	ldr	r2, [r3, #16]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	61da      	str	r2, [r3, #28]
      break;
 8008a44:	e064      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68b9      	ldr	r1, [r7, #8]
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f000 fdad 	bl	80095ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69da      	ldr	r2, [r3, #28]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	69d9      	ldr	r1, [r3, #28]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	021a      	lsls	r2, r3, #8
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	61da      	str	r2, [r3, #28]
      break;
 8008a86:	e043      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68b9      	ldr	r1, [r7, #8]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 fe20 	bl	80096d4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0208 	orr.w	r2, r2, #8
 8008aa2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0204 	bic.w	r2, r2, #4
 8008ab2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	691a      	ldr	r2, [r3, #16]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ac6:	e023      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	68b9      	ldr	r1, [r7, #8]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 fe6a 	bl	80097a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ae2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008af2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	021a      	lsls	r2, r3, #8
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b08:	e002      	b.n	8008b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop

08008b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d101      	bne.n	8008b40 <HAL_TIM_ConfigClockSource+0x1c>
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	e0f6      	b.n	8008d2e <HAL_TIM_ConfigClockSource+0x20a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008b5e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a6f      	ldr	r2, [pc, #444]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x214>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	f000 80c1 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008b80:	4a6d      	ldr	r2, [pc, #436]	@ (8008d38 <HAL_TIM_ConfigClockSource+0x214>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	f200 80c6 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b88:	4a6c      	ldr	r2, [pc, #432]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x218>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	f000 80b9 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008b90:	4a6a      	ldr	r2, [pc, #424]	@ (8008d3c <HAL_TIM_ConfigClockSource+0x218>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	f200 80be 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b98:	4a69      	ldr	r2, [pc, #420]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	f000 80b1 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008ba0:	4a67      	ldr	r2, [pc, #412]	@ (8008d40 <HAL_TIM_ConfigClockSource+0x21c>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	f200 80b6 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008ba8:	4a66      	ldr	r2, [pc, #408]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x220>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f000 80a9 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008bb0:	4a64      	ldr	r2, [pc, #400]	@ (8008d44 <HAL_TIM_ConfigClockSource+0x220>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f200 80ae 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bb8:	4a63      	ldr	r2, [pc, #396]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x224>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	f000 80a1 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008bc0:	4a61      	ldr	r2, [pc, #388]	@ (8008d48 <HAL_TIM_ConfigClockSource+0x224>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	f200 80a6 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bc8:	4a60      	ldr	r2, [pc, #384]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x228>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f000 8099 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008bd0:	4a5e      	ldr	r2, [pc, #376]	@ (8008d4c <HAL_TIM_ConfigClockSource+0x228>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	f200 809e 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008bdc:	f000 8091 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008be0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008be4:	f200 8096 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008be8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bec:	f000 8089 	beq.w	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bf4:	f200 808e 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bfc:	d03e      	beq.n	8008c7c <HAL_TIM_ConfigClockSource+0x158>
 8008bfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c02:	f200 8087 	bhi.w	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c0a:	f000 8086 	beq.w	8008d1a <HAL_TIM_ConfigClockSource+0x1f6>
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c12:	d87f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c14:	2b70      	cmp	r3, #112	@ 0x70
 8008c16:	d01a      	beq.n	8008c4e <HAL_TIM_ConfigClockSource+0x12a>
 8008c18:	2b70      	cmp	r3, #112	@ 0x70
 8008c1a:	d87b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c1c:	2b60      	cmp	r3, #96	@ 0x60
 8008c1e:	d050      	beq.n	8008cc2 <HAL_TIM_ConfigClockSource+0x19e>
 8008c20:	2b60      	cmp	r3, #96	@ 0x60
 8008c22:	d877      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c24:	2b50      	cmp	r3, #80	@ 0x50
 8008c26:	d03c      	beq.n	8008ca2 <HAL_TIM_ConfigClockSource+0x17e>
 8008c28:	2b50      	cmp	r3, #80	@ 0x50
 8008c2a:	d873      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c2c:	2b40      	cmp	r3, #64	@ 0x40
 8008c2e:	d058      	beq.n	8008ce2 <HAL_TIM_ConfigClockSource+0x1be>
 8008c30:	2b40      	cmp	r3, #64	@ 0x40
 8008c32:	d86f      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c34:	2b30      	cmp	r3, #48	@ 0x30
 8008c36:	d064      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008c38:	2b30      	cmp	r3, #48	@ 0x30
 8008c3a:	d86b      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c3c:	2b20      	cmp	r3, #32
 8008c3e:	d060      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008c40:	2b20      	cmp	r3, #32
 8008c42:	d867      	bhi.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d05c      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008c48:	2b10      	cmp	r3, #16
 8008c4a:	d05a      	beq.n	8008d02 <HAL_TIM_ConfigClockSource+0x1de>
 8008c4c:	e062      	b.n	8008d14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c5e:	f000 fe8b 	bl	8009978 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008c70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68ba      	ldr	r2, [r7, #8]
 8008c78:	609a      	str	r2, [r3, #8]
      break;
 8008c7a:	e04f      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008c8c:	f000 fe74 	bl	8009978 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	689a      	ldr	r2, [r3, #8]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c9e:	609a      	str	r2, [r3, #8]
      break;
 8008ca0:	e03c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f000 fde6 	bl	8009880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2150      	movs	r1, #80	@ 0x50
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f000 fe3f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 8008cc0:	e02c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cce:	461a      	mov	r2, r3
 8008cd0:	f000 fe05 	bl	80098de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2160      	movs	r1, #96	@ 0x60
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f000 fe2f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 8008ce0:	e01c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cee:	461a      	mov	r2, r3
 8008cf0:	f000 fdc6 	bl	8009880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2140      	movs	r1, #64	@ 0x40
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f000 fe1f 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 8008d00:	e00c      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	f000 fe16 	bl	800993e <TIM_ITRx_SetConfig>
      break;
 8008d12:	e003      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	73fb      	strb	r3, [r7, #15]
      break;
 8008d18:	e000      	b.n	8008d1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008d1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	00100070 	.word	0x00100070
 8008d3c:	00100060 	.word	0x00100060
 8008d40:	00100050 	.word	0x00100050
 8008d44:	00100040 	.word	0x00100040
 8008d48:	00100030 	.word	0x00100030
 8008d4c:	00100020 	.word	0x00100020

08008d50 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b083      	sub	sp, #12
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	607a      	str	r2, [r7, #4]
 8008e10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e12:	2300      	movs	r3, #0
 8008e14:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d101      	bne.n	8008e20 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	e14a      	b.n	80090b6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	f040 80dd 	bne.w	8008fe8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008e2e:	7afb      	ldrb	r3, [r7, #11]
 8008e30:	2b1f      	cmp	r3, #31
 8008e32:	f200 80d6 	bhi.w	8008fe2 <HAL_TIM_RegisterCallback+0x1de>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <HAL_TIM_RegisterCallback+0x38>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008ebd 	.word	0x08008ebd
 8008e40:	08008ec5 	.word	0x08008ec5
 8008e44:	08008ecd 	.word	0x08008ecd
 8008e48:	08008ed5 	.word	0x08008ed5
 8008e4c:	08008edd 	.word	0x08008edd
 8008e50:	08008ee5 	.word	0x08008ee5
 8008e54:	08008eed 	.word	0x08008eed
 8008e58:	08008ef5 	.word	0x08008ef5
 8008e5c:	08008efd 	.word	0x08008efd
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f0d 	.word	0x08008f0d
 8008e68:	08008f15 	.word	0x08008f15
 8008e6c:	08008f1d 	.word	0x08008f1d
 8008e70:	08008f25 	.word	0x08008f25
 8008e74:	08008f2f 	.word	0x08008f2f
 8008e78:	08008f39 	.word	0x08008f39
 8008e7c:	08008f43 	.word	0x08008f43
 8008e80:	08008f4d 	.word	0x08008f4d
 8008e84:	08008f57 	.word	0x08008f57
 8008e88:	08008f61 	.word	0x08008f61
 8008e8c:	08008f6b 	.word	0x08008f6b
 8008e90:	08008f75 	.word	0x08008f75
 8008e94:	08008f7f 	.word	0x08008f7f
 8008e98:	08008f89 	.word	0x08008f89
 8008e9c:	08008f93 	.word	0x08008f93
 8008ea0:	08008f9d 	.word	0x08008f9d
 8008ea4:	08008fa7 	.word	0x08008fa7
 8008ea8:	08008fb1 	.word	0x08008fb1
 8008eac:	08008fbb 	.word	0x08008fbb
 8008eb0:	08008fc5 	.word	0x08008fc5
 8008eb4:	08008fcf 	.word	0x08008fcf
 8008eb8:	08008fd9 	.word	0x08008fd9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ec2:	e0f7      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008eca:	e0f3      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ed2:	e0ef      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008eda:	e0eb      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ee2:	e0e7      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008eea:	e0e3      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008ef2:	e0df      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008efa:	e0db      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008f02:	e0d7      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f0a:	e0d3      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f12:	e0cf      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f1a:	e0cb      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f22:	e0c7      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f2c:	e0c2      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008f36:	e0bd      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008f40:	e0b8      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008f4a:	e0b3      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008f54:	e0ae      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008f5e:	e0a9      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008f68:	e0a4      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008f72:	e09f      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008f7c:	e09a      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008f86:	e095      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008f90:	e090      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008f9a:	e08b      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008fa4:	e086      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008fae:	e081      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008fb8:	e07c      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008fc2:	e077      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008fcc:	e072      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008fd6:	e06d      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008fe0:	e068      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	75fb      	strb	r3, [r7, #23]
        break;
 8008fe6:	e065      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d15d      	bne.n	80090b0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	2b0d      	cmp	r3, #13
 8008ff8:	d857      	bhi.n	80090aa <HAL_TIM_RegisterCallback+0x2a6>
 8008ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8009000 <HAL_TIM_RegisterCallback+0x1fc>)
 8008ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009000:	08009039 	.word	0x08009039
 8009004:	08009041 	.word	0x08009041
 8009008:	08009049 	.word	0x08009049
 800900c:	08009051 	.word	0x08009051
 8009010:	08009059 	.word	0x08009059
 8009014:	08009061 	.word	0x08009061
 8009018:	08009069 	.word	0x08009069
 800901c:	08009071 	.word	0x08009071
 8009020:	08009079 	.word	0x08009079
 8009024:	08009081 	.word	0x08009081
 8009028:	08009089 	.word	0x08009089
 800902c:	08009091 	.word	0x08009091
 8009030:	08009099 	.word	0x08009099
 8009034:	080090a1 	.word	0x080090a1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800903e:	e039      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009046:	e035      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800904e:	e031      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009056:	e02d      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800905e:	e029      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009066:	e025      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800906e:	e021      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009076:	e01d      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800907e:	e019      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009086:	e015      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800908e:	e011      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009096:	e00d      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800909e:	e009      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80090a8:	e004      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	75fb      	strb	r3, [r7, #23]
        break;
 80090ae:	e001      	b.n	80090b4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop

080090c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a4c      	ldr	r2, [pc, #304]	@ (8009208 <TIM_Base_SetConfig+0x144>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d017      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090e2:	d013      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a49      	ldr	r2, [pc, #292]	@ (800920c <TIM_Base_SetConfig+0x148>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00f      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a48      	ldr	r2, [pc, #288]	@ (8009210 <TIM_Base_SetConfig+0x14c>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d00b      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a47      	ldr	r2, [pc, #284]	@ (8009214 <TIM_Base_SetConfig+0x150>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d007      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a46      	ldr	r2, [pc, #280]	@ (8009218 <TIM_Base_SetConfig+0x154>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_Base_SetConfig+0x48>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a45      	ldr	r2, [pc, #276]	@ (800921c <TIM_Base_SetConfig+0x158>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d108      	bne.n	800911e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	4313      	orrs	r3, r2
 800911c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a39      	ldr	r2, [pc, #228]	@ (8009208 <TIM_Base_SetConfig+0x144>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d023      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912c:	d01f      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a36      	ldr	r2, [pc, #216]	@ (800920c <TIM_Base_SetConfig+0x148>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d01b      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a35      	ldr	r2, [pc, #212]	@ (8009210 <TIM_Base_SetConfig+0x14c>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d017      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a34      	ldr	r2, [pc, #208]	@ (8009214 <TIM_Base_SetConfig+0x150>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d013      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a33      	ldr	r2, [pc, #204]	@ (8009218 <TIM_Base_SetConfig+0x154>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d00f      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a33      	ldr	r2, [pc, #204]	@ (8009220 <TIM_Base_SetConfig+0x15c>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d00b      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a32      	ldr	r2, [pc, #200]	@ (8009224 <TIM_Base_SetConfig+0x160>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d007      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a31      	ldr	r2, [pc, #196]	@ (8009228 <TIM_Base_SetConfig+0x164>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d003      	beq.n	800916e <TIM_Base_SetConfig+0xaa>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a2c      	ldr	r2, [pc, #176]	@ (800921c <TIM_Base_SetConfig+0x158>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d108      	bne.n	8009180 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	695b      	ldr	r3, [r3, #20]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	689a      	ldr	r2, [r3, #8]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	4a18      	ldr	r2, [pc, #96]	@ (8009208 <TIM_Base_SetConfig+0x144>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d013      	beq.n	80091d4 <TIM_Base_SetConfig+0x110>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a1a      	ldr	r2, [pc, #104]	@ (8009218 <TIM_Base_SetConfig+0x154>)
 80091b0:	4293      	cmp	r3, r2
 80091b2:	d00f      	beq.n	80091d4 <TIM_Base_SetConfig+0x110>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009220 <TIM_Base_SetConfig+0x15c>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d00b      	beq.n	80091d4 <TIM_Base_SetConfig+0x110>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	4a19      	ldr	r2, [pc, #100]	@ (8009224 <TIM_Base_SetConfig+0x160>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d007      	beq.n	80091d4 <TIM_Base_SetConfig+0x110>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a18      	ldr	r2, [pc, #96]	@ (8009228 <TIM_Base_SetConfig+0x164>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d003      	beq.n	80091d4 <TIM_Base_SetConfig+0x110>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a13      	ldr	r2, [pc, #76]	@ (800921c <TIM_Base_SetConfig+0x158>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d103      	bne.n	80091dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2201      	movs	r2, #1
 80091e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d105      	bne.n	80091fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	f023 0201 	bic.w	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	611a      	str	r2, [r3, #16]
  }
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
 8009206:	bf00      	nop
 8009208:	40012c00 	.word	0x40012c00
 800920c:	40000400 	.word	0x40000400
 8009210:	40000800 	.word	0x40000800
 8009214:	40000c00 	.word	0x40000c00
 8009218:	40013400 	.word	0x40013400
 800921c:	40015000 	.word	0x40015000
 8009220:	40014000 	.word	0x40014000
 8009224:	40014400 	.word	0x40014400
 8009228:	40014800 	.word	0x40014800

0800922c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	f023 0201 	bic.w	r2, r3, #1
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	699b      	ldr	r3, [r3, #24]
 8009252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800925a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800925e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0303 	bic.w	r3, r3, #3
 8009266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f023 0302 	bic.w	r3, r3, #2
 8009278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	4313      	orrs	r3, r2
 8009282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a30      	ldr	r2, [pc, #192]	@ (8009348 <TIM_OC1_SetConfig+0x11c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <TIM_OC1_SetConfig+0x88>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a2f      	ldr	r2, [pc, #188]	@ (800934c <TIM_OC1_SetConfig+0x120>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00f      	beq.n	80092b4 <TIM_OC1_SetConfig+0x88>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a2e      	ldr	r2, [pc, #184]	@ (8009350 <TIM_OC1_SetConfig+0x124>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00b      	beq.n	80092b4 <TIM_OC1_SetConfig+0x88>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a2d      	ldr	r2, [pc, #180]	@ (8009354 <TIM_OC1_SetConfig+0x128>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d007      	beq.n	80092b4 <TIM_OC1_SetConfig+0x88>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a2c      	ldr	r2, [pc, #176]	@ (8009358 <TIM_OC1_SetConfig+0x12c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_OC1_SetConfig+0x88>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a2b      	ldr	r2, [pc, #172]	@ (800935c <TIM_OC1_SetConfig+0x130>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d10c      	bne.n	80092ce <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f023 0308 	bic.w	r3, r3, #8
 80092ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	697a      	ldr	r2, [r7, #20]
 80092c2:	4313      	orrs	r3, r2
 80092c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f023 0304 	bic.w	r3, r3, #4
 80092cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009348 <TIM_OC1_SetConfig+0x11c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d013      	beq.n	80092fe <TIM_OC1_SetConfig+0xd2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a1c      	ldr	r2, [pc, #112]	@ (800934c <TIM_OC1_SetConfig+0x120>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00f      	beq.n	80092fe <TIM_OC1_SetConfig+0xd2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009350 <TIM_OC1_SetConfig+0x124>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00b      	beq.n	80092fe <TIM_OC1_SetConfig+0xd2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009354 <TIM_OC1_SetConfig+0x128>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d007      	beq.n	80092fe <TIM_OC1_SetConfig+0xd2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a19      	ldr	r2, [pc, #100]	@ (8009358 <TIM_OC1_SetConfig+0x12c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d003      	beq.n	80092fe <TIM_OC1_SetConfig+0xd2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a18      	ldr	r2, [pc, #96]	@ (800935c <TIM_OC1_SetConfig+0x130>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d111      	bne.n	8009322 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800930c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	693a      	ldr	r2, [r7, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	693a      	ldr	r2, [r7, #16]
 8009326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685a      	ldr	r2, [r3, #4]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	621a      	str	r2, [r3, #32]
}
 800933c:	bf00      	nop
 800933e:	371c      	adds	r7, #28
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	40012c00 	.word	0x40012c00
 800934c:	40013400 	.word	0x40013400
 8009350:	40014000 	.word	0x40014000
 8009354:	40014400 	.word	0x40014400
 8009358:	40014800 	.word	0x40014800
 800935c:	40015000 	.word	0x40015000

08009360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009360:	b480      	push	{r7}
 8009362:	b087      	sub	sp, #28
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a1b      	ldr	r3, [r3, #32]
 8009374:	f023 0210 	bic.w	r2, r3, #16
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800938e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800939a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	021b      	lsls	r3, r3, #8
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f023 0320 	bic.w	r3, r3, #32
 80093ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	011b      	lsls	r3, r3, #4
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a2c      	ldr	r2, [pc, #176]	@ (8009470 <TIM_OC2_SetConfig+0x110>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d007      	beq.n	80093d4 <TIM_OC2_SetConfig+0x74>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a2b      	ldr	r2, [pc, #172]	@ (8009474 <TIM_OC2_SetConfig+0x114>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d003      	beq.n	80093d4 <TIM_OC2_SetConfig+0x74>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009478 <TIM_OC2_SetConfig+0x118>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d10d      	bne.n	80093f0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	011b      	lsls	r3, r3, #4
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a1f      	ldr	r2, [pc, #124]	@ (8009470 <TIM_OC2_SetConfig+0x110>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d013      	beq.n	8009420 <TIM_OC2_SetConfig+0xc0>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009474 <TIM_OC2_SetConfig+0x114>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_OC2_SetConfig+0xc0>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a1e      	ldr	r2, [pc, #120]	@ (800947c <TIM_OC2_SetConfig+0x11c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_OC2_SetConfig+0xc0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1d      	ldr	r2, [pc, #116]	@ (8009480 <TIM_OC2_SetConfig+0x120>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC2_SetConfig+0xc0>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a1c      	ldr	r2, [pc, #112]	@ (8009484 <TIM_OC2_SetConfig+0x124>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC2_SetConfig+0xc0>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a17      	ldr	r2, [pc, #92]	@ (8009478 <TIM_OC2_SetConfig+0x118>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d113      	bne.n	8009448 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800942e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4313      	orrs	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	4313      	orrs	r3, r2
 8009446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40015000 	.word	0x40015000
 800947c:	40014000 	.word	0x40014000
 8009480:	40014400 	.word	0x40014400
 8009484:	40014800 	.word	0x40014800

08009488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009488:	b480      	push	{r7}
 800948a:	b087      	sub	sp, #28
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a1b      	ldr	r3, [r3, #32]
 8009496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0303 	bic.w	r3, r3, #3
 80094c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	021b      	lsls	r3, r3, #8
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009594 <TIM_OC3_SetConfig+0x10c>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d007      	beq.n	80094fa <TIM_OC3_SetConfig+0x72>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a2a      	ldr	r2, [pc, #168]	@ (8009598 <TIM_OC3_SetConfig+0x110>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d003      	beq.n	80094fa <TIM_OC3_SetConfig+0x72>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a29      	ldr	r2, [pc, #164]	@ (800959c <TIM_OC3_SetConfig+0x114>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d10d      	bne.n	8009516 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	021b      	lsls	r3, r3, #8
 8009508:	697a      	ldr	r2, [r7, #20]
 800950a:	4313      	orrs	r3, r2
 800950c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a1e      	ldr	r2, [pc, #120]	@ (8009594 <TIM_OC3_SetConfig+0x10c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d013      	beq.n	8009546 <TIM_OC3_SetConfig+0xbe>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	4a1d      	ldr	r2, [pc, #116]	@ (8009598 <TIM_OC3_SetConfig+0x110>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00f      	beq.n	8009546 <TIM_OC3_SetConfig+0xbe>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4a1d      	ldr	r2, [pc, #116]	@ (80095a0 <TIM_OC3_SetConfig+0x118>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d00b      	beq.n	8009546 <TIM_OC3_SetConfig+0xbe>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a1c      	ldr	r2, [pc, #112]	@ (80095a4 <TIM_OC3_SetConfig+0x11c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d007      	beq.n	8009546 <TIM_OC3_SetConfig+0xbe>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a1b      	ldr	r2, [pc, #108]	@ (80095a8 <TIM_OC3_SetConfig+0x120>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d003      	beq.n	8009546 <TIM_OC3_SetConfig+0xbe>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a16      	ldr	r2, [pc, #88]	@ (800959c <TIM_OC3_SetConfig+0x114>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d113      	bne.n	800956e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800954c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	011b      	lsls	r3, r3, #4
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	4313      	orrs	r3, r2
 8009560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	699b      	ldr	r3, [r3, #24]
 8009566:	011b      	lsls	r3, r3, #4
 8009568:	693a      	ldr	r2, [r7, #16]
 800956a:	4313      	orrs	r3, r2
 800956c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	621a      	str	r2, [r3, #32]
}
 8009588:	bf00      	nop
 800958a:	371c      	adds	r7, #28
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr
 8009594:	40012c00 	.word	0x40012c00
 8009598:	40013400 	.word	0x40013400
 800959c:	40015000 	.word	0x40015000
 80095a0:	40014000 	.word	0x40014000
 80095a4:	40014400 	.word	0x40014400
 80095a8:	40014800 	.word	0x40014800

080095ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b087      	sub	sp, #28
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a1b      	ldr	r3, [r3, #32]
 80095ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6a1b      	ldr	r3, [r3, #32]
 80095c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80095da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	68fa      	ldr	r2, [r7, #12]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	031b      	lsls	r3, r3, #12
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a2c      	ldr	r2, [pc, #176]	@ (80096bc <TIM_OC4_SetConfig+0x110>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d007      	beq.n	8009620 <TIM_OC4_SetConfig+0x74>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a2b      	ldr	r2, [pc, #172]	@ (80096c0 <TIM_OC4_SetConfig+0x114>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d003      	beq.n	8009620 <TIM_OC4_SetConfig+0x74>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2a      	ldr	r2, [pc, #168]	@ (80096c4 <TIM_OC4_SetConfig+0x118>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d10d      	bne.n	800963c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	031b      	lsls	r3, r3, #12
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800963a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a1f      	ldr	r2, [pc, #124]	@ (80096bc <TIM_OC4_SetConfig+0x110>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d013      	beq.n	800966c <TIM_OC4_SetConfig+0xc0>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a1e      	ldr	r2, [pc, #120]	@ (80096c0 <TIM_OC4_SetConfig+0x114>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00f      	beq.n	800966c <TIM_OC4_SetConfig+0xc0>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <TIM_OC4_SetConfig+0x11c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d00b      	beq.n	800966c <TIM_OC4_SetConfig+0xc0>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a1d      	ldr	r2, [pc, #116]	@ (80096cc <TIM_OC4_SetConfig+0x120>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d007      	beq.n	800966c <TIM_OC4_SetConfig+0xc0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a1c      	ldr	r2, [pc, #112]	@ (80096d0 <TIM_OC4_SetConfig+0x124>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d003      	beq.n	800966c <TIM_OC4_SetConfig+0xc0>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a17      	ldr	r2, [pc, #92]	@ (80096c4 <TIM_OC4_SetConfig+0x118>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d113      	bne.n	8009694 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009672:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800967a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	019b      	lsls	r3, r3, #6
 8009682:	693a      	ldr	r2, [r7, #16]
 8009684:	4313      	orrs	r3, r2
 8009686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	019b      	lsls	r3, r3, #6
 800968e:	693a      	ldr	r2, [r7, #16]
 8009690:	4313      	orrs	r3, r2
 8009692:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	685a      	ldr	r2, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	697a      	ldr	r2, [r7, #20]
 80096ac:	621a      	str	r2, [r3, #32]
}
 80096ae:	bf00      	nop
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40012c00 	.word	0x40012c00
 80096c0:	40013400 	.word	0x40013400
 80096c4:	40015000 	.word	0x40015000
 80096c8:	40014000 	.word	0x40014000
 80096cc:	40014400 	.word	0x40014400
 80096d0:	40014800 	.word	0x40014800

080096d4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b087      	sub	sp, #28
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a1b      	ldr	r3, [r3, #32]
 80096e8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009718:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	041b      	lsls	r3, r3, #16
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	4313      	orrs	r3, r2
 8009724:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	4a19      	ldr	r2, [pc, #100]	@ (8009790 <TIM_OC5_SetConfig+0xbc>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d013      	beq.n	8009756 <TIM_OC5_SetConfig+0x82>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	4a18      	ldr	r2, [pc, #96]	@ (8009794 <TIM_OC5_SetConfig+0xc0>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00f      	beq.n	8009756 <TIM_OC5_SetConfig+0x82>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a17      	ldr	r2, [pc, #92]	@ (8009798 <TIM_OC5_SetConfig+0xc4>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d00b      	beq.n	8009756 <TIM_OC5_SetConfig+0x82>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	4a16      	ldr	r2, [pc, #88]	@ (800979c <TIM_OC5_SetConfig+0xc8>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d007      	beq.n	8009756 <TIM_OC5_SetConfig+0x82>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a15      	ldr	r2, [pc, #84]	@ (80097a0 <TIM_OC5_SetConfig+0xcc>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d003      	beq.n	8009756 <TIM_OC5_SetConfig+0x82>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a14      	ldr	r2, [pc, #80]	@ (80097a4 <TIM_OC5_SetConfig+0xd0>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d109      	bne.n	800976a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800975c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	695b      	ldr	r3, [r3, #20]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	697a      	ldr	r2, [r7, #20]
 8009766:	4313      	orrs	r3, r2
 8009768:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68fa      	ldr	r2, [r7, #12]
 8009774:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	685a      	ldr	r2, [r3, #4]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	621a      	str	r2, [r3, #32]
}
 8009784:	bf00      	nop
 8009786:	371c      	adds	r7, #28
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40012c00 	.word	0x40012c00
 8009794:	40013400 	.word	0x40013400
 8009798:	40014000 	.word	0x40014000
 800979c:	40014400 	.word	0x40014400
 80097a0:	40014800 	.word	0x40014800
 80097a4:	40015000 	.word	0x40015000

080097a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a1b      	ldr	r3, [r3, #32]
 80097bc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80097d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	021b      	lsls	r3, r3, #8
 80097e2:	68fa      	ldr	r2, [r7, #12]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80097ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	4313      	orrs	r3, r2
 80097fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a1a      	ldr	r2, [pc, #104]	@ (8009868 <TIM_OC6_SetConfig+0xc0>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d013      	beq.n	800982c <TIM_OC6_SetConfig+0x84>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a19      	ldr	r2, [pc, #100]	@ (800986c <TIM_OC6_SetConfig+0xc4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d00f      	beq.n	800982c <TIM_OC6_SetConfig+0x84>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a18      	ldr	r2, [pc, #96]	@ (8009870 <TIM_OC6_SetConfig+0xc8>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d00b      	beq.n	800982c <TIM_OC6_SetConfig+0x84>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	4a17      	ldr	r2, [pc, #92]	@ (8009874 <TIM_OC6_SetConfig+0xcc>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d007      	beq.n	800982c <TIM_OC6_SetConfig+0x84>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a16      	ldr	r2, [pc, #88]	@ (8009878 <TIM_OC6_SetConfig+0xd0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC6_SetConfig+0x84>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a15      	ldr	r2, [pc, #84]	@ (800987c <TIM_OC6_SetConfig+0xd4>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d109      	bne.n	8009840 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009832:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	029b      	lsls	r3, r3, #10
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68fa      	ldr	r2, [r7, #12]
 800984a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685a      	ldr	r2, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	621a      	str	r2, [r3, #32]
}
 800985a:	bf00      	nop
 800985c:	371c      	adds	r7, #28
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr
 8009866:	bf00      	nop
 8009868:	40012c00 	.word	0x40012c00
 800986c:	40013400 	.word	0x40013400
 8009870:	40014000 	.word	0x40014000
 8009874:	40014400 	.word	0x40014400
 8009878:	40014800 	.word	0x40014800
 800987c:	40015000 	.word	0x40015000

08009880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	f023 0201 	bic.w	r2, r3, #1
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	699b      	ldr	r3, [r3, #24]
 80098a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f023 030a 	bic.w	r3, r3, #10
 80098bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098de:	b480      	push	{r7}
 80098e0:	b087      	sub	sp, #28
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6a1b      	ldr	r3, [r3, #32]
 80098ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6a1b      	ldr	r3, [r3, #32]
 80098f4:	f023 0210 	bic.w	r2, r3, #16
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	699b      	ldr	r3, [r3, #24]
 8009900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	031b      	lsls	r3, r3, #12
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4313      	orrs	r3, r2
 8009912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800991a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	621a      	str	r2, [r3, #32]
}
 8009932:	bf00      	nop
 8009934:	371c      	adds	r7, #28
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009954:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	f043 0307 	orr.w	r3, r3, #7
 8009964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	609a      	str	r2, [r3, #8]
}
 800996c:	bf00      	nop
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009978:	b480      	push	{r7}
 800997a:	b087      	sub	sp, #28
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
 8009984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	021a      	lsls	r2, r3, #8
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	431a      	orrs	r2, r3
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	4313      	orrs	r3, r2
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	609a      	str	r2, [r3, #8]
}
 80099ac:	bf00      	nop
 80099ae:	371c      	adds	r7, #28
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 031f 	and.w	r3, r3, #31
 80099ca:	2201      	movs	r2, #1
 80099cc:	fa02 f303 	lsl.w	r3, r2, r3
 80099d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a1a      	ldr	r2, [r3, #32]
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	43db      	mvns	r3, r3
 80099da:	401a      	ands	r2, r3
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a1a      	ldr	r2, [r3, #32]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 031f 	and.w	r3, r3, #31
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	fa01 f303 	lsl.w	r3, r1, r3
 80099f0:	431a      	orrs	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	621a      	str	r2, [r3, #32]
}
 80099f6:	bf00      	nop
 80099f8:	371c      	adds	r7, #28
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
	...

08009a04 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a26      	ldr	r2, [pc, #152]	@ (8009aa8 <TIM_ResetCallback+0xa4>)
 8009a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a25      	ldr	r2, [pc, #148]	@ (8009aac <TIM_ResetCallback+0xa8>)
 8009a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	4a24      	ldr	r2, [pc, #144]	@ (8009ab0 <TIM_ResetCallback+0xac>)
 8009a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	4a23      	ldr	r2, [pc, #140]	@ (8009ab4 <TIM_ResetCallback+0xb0>)
 8009a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a22      	ldr	r2, [pc, #136]	@ (8009ab8 <TIM_ResetCallback+0xb4>)
 8009a30:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a21      	ldr	r2, [pc, #132]	@ (8009abc <TIM_ResetCallback+0xb8>)
 8009a38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a20      	ldr	r2, [pc, #128]	@ (8009ac0 <TIM_ResetCallback+0xbc>)
 8009a40:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a1f      	ldr	r2, [pc, #124]	@ (8009ac4 <TIM_ResetCallback+0xc0>)
 8009a48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac8 <TIM_ResetCallback+0xc4>)
 8009a50:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a1d      	ldr	r2, [pc, #116]	@ (8009acc <TIM_ResetCallback+0xc8>)
 8009a58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad0 <TIM_ResetCallback+0xcc>)
 8009a60:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad4 <TIM_ResetCallback+0xd0>)
 8009a68:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad8 <TIM_ResetCallback+0xd4>)
 8009a70:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a19      	ldr	r2, [pc, #100]	@ (8009adc <TIM_ResetCallback+0xd8>)
 8009a78:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a18      	ldr	r2, [pc, #96]	@ (8009ae0 <TIM_ResetCallback+0xdc>)
 8009a80:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a17      	ldr	r2, [pc, #92]	@ (8009ae4 <TIM_ResetCallback+0xe0>)
 8009a88:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a16      	ldr	r2, [pc, #88]	@ (8009ae8 <TIM_ResetCallback+0xe4>)
 8009a90:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a15      	ldr	r2, [pc, #84]	@ (8009aec <TIM_ResetCallback+0xe8>)
 8009a98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	08002c79 	.word	0x08002c79
 8009aac:	08008d51 	.word	0x08008d51
 8009ab0:	08008dc9 	.word	0x08008dc9
 8009ab4:	08008ddd 	.word	0x08008ddd
 8009ab8:	08008d79 	.word	0x08008d79
 8009abc:	08008d8d 	.word	0x08008d8d
 8009ac0:	08008d65 	.word	0x08008d65
 8009ac4:	08008da1 	.word	0x08008da1
 8009ac8:	08008db5 	.word	0x08008db5
 8009acc:	08008df1 	.word	0x08008df1
 8009ad0:	08009d45 	.word	0x08009d45
 8009ad4:	08009d59 	.word	0x08009d59
 8009ad8:	08009d6d 	.word	0x08009d6d
 8009adc:	08009d81 	.word	0x08009d81
 8009ae0:	08009d95 	.word	0x08009d95
 8009ae4:	08009da9 	.word	0x08009da9
 8009ae8:	08009dbd 	.word	0x08009dbd
 8009aec:	08009dd1 	.word	0x08009dd1

08009af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b085      	sub	sp, #20
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e074      	b.n	8009bf2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a34      	ldr	r2, [pc, #208]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d009      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a33      	ldr	r2, [pc, #204]	@ (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d004      	beq.n	8009b46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a31      	ldr	r2, [pc, #196]	@ (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d108      	bne.n	8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a21      	ldr	r2, [pc, #132]	@ (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d022      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b88:	d01d      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d018      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1d      	ldr	r2, [pc, #116]	@ (8009c10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d013      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d00e      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a15      	ldr	r2, [pc, #84]	@ (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d009      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a18      	ldr	r2, [pc, #96]	@ (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d004      	beq.n	8009bc6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a11      	ldr	r2, [pc, #68]	@ (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d10c      	bne.n	8009be0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2201      	movs	r2, #1
 8009be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	40012c00 	.word	0x40012c00
 8009c04:	40013400 	.word	0x40013400
 8009c08:	40015000 	.word	0x40015000
 8009c0c:	40000400 	.word	0x40000400
 8009c10:	40000800 	.word	0x40000800
 8009c14:	40000c00 	.word	0x40000c00
 8009c18:	40014000 	.word	0x40014000

08009c1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d101      	bne.n	8009c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c34:	2302      	movs	r3, #2
 8009c36:	e078      	b.n	8009d2a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	4313      	orrs	r3, r2
 8009c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	695b      	ldr	r3, [r3, #20]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	699b      	ldr	r3, [r3, #24]
 8009cac:	041b      	lsls	r3, r3, #16
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009d38 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d009      	beq.n	8009cde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a1b      	ldr	r2, [pc, #108]	@ (8009d3c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d004      	beq.n	8009cde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a19      	ldr	r2, [pc, #100]	@ (8009d40 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d11c      	bne.n	8009d18 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce8:	051b      	lsls	r3, r3, #20
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d06:	4313      	orrs	r3, r2
 8009d08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d14:	4313      	orrs	r3, r2
 8009d16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr
 8009d36:	bf00      	nop
 8009d38:	40012c00 	.word	0x40012c00
 8009d3c:	40013400 	.word	0x40013400
 8009d40:	40015000 	.word	0x40015000

08009d44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d4c:	bf00      	nop
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr

08009d58 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009d60:	bf00      	nop
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d74:	bf00      	nop
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7e:	4770      	bx	lr

08009d80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d80:	b480      	push	{r7}
 8009d82:	b083      	sub	sp, #12
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d88:	bf00      	nop
 8009d8a:	370c      	adds	r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d92:	4770      	bx	lr

08009d94 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009dd8:	bf00      	nop
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e050      	b.n	8009e98 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d114      	bne.n	8009e2a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fd5b 	bl	800a8c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d103      	bne.n	8009e20 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a21      	ldr	r2, [pc, #132]	@ (8009ea0 <HAL_UART_Init+0xbc>)
 8009e1c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2224      	movs	r2, #36	@ 0x24
 8009e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f022 0201 	bic.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 f888 	bl	800af60 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fd89 	bl	800a968 <UART_SetConfig>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d101      	bne.n	8009e60 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e01b      	b.n	8009e98 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f042 0201 	orr.w	r2, r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f907 	bl	800b0a4 <UART_CheckIdleState>
 8009e96:	4603      	mov	r3, r0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	08004401 	.word	0x08004401

08009ea4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	460b      	mov	r3, r1
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ec2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e09c      	b.n	800a00a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	d16c      	bne.n	8009fb4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009eda:	7afb      	ldrb	r3, [r7, #11]
 8009edc:	2b0c      	cmp	r3, #12
 8009ede:	d85e      	bhi.n	8009f9e <HAL_UART_RegisterCallback+0xfa>
 8009ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <HAL_UART_RegisterCallback+0x44>)
 8009ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee6:	bf00      	nop
 8009ee8:	08009f1d 	.word	0x08009f1d
 8009eec:	08009f27 	.word	0x08009f27
 8009ef0:	08009f31 	.word	0x08009f31
 8009ef4:	08009f3b 	.word	0x08009f3b
 8009ef8:	08009f45 	.word	0x08009f45
 8009efc:	08009f4f 	.word	0x08009f4f
 8009f00:	08009f59 	.word	0x08009f59
 8009f04:	08009f63 	.word	0x08009f63
 8009f08:	08009f6d 	.word	0x08009f6d
 8009f0c:	08009f77 	.word	0x08009f77
 8009f10:	08009f81 	.word	0x08009f81
 8009f14:	08009f8b 	.word	0x08009f8b
 8009f18:	08009f95 	.word	0x08009f95
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009f24:	e070      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f2e:	e06b      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f38:	e066      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f42:	e061      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f4c:	e05c      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009f56:	e057      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009f60:	e052      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009f6a:	e04d      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	687a      	ldr	r2, [r7, #4]
 8009f70:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009f74:	e048      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009f7e:	e043      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009f88:	e03e      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009f92:	e039      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009f9c:	e034      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fa4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8009fb2:	e029      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d11a      	bne.n	8009ff4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	2b0b      	cmp	r3, #11
 8009fc2:	d002      	beq.n	8009fca <HAL_UART_RegisterCallback+0x126>
 8009fc4:	2b0c      	cmp	r3, #12
 8009fc6:	d005      	beq.n	8009fd4 <HAL_UART_RegisterCallback+0x130>
 8009fc8:	e009      	b.n	8009fde <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009fd2:	e019      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fdc:	e014      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fe4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	75fb      	strb	r3, [r7, #23]
        break;
 8009ff2:	e009      	b.n	800a008 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ffa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a008:	7dfb      	ldrb	r3, [r7, #23]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	371c      	adds	r7, #28
 800a00e:	46bd      	mov	sp, r7
 800a010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop

0800a018 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	@ 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a02c:	2b20      	cmp	r3, #32
 800a02e:	d137      	bne.n	800a0a0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_UART_Receive_DMA+0x24>
 800a036:	88fb      	ldrh	r3, [r7, #6]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e030      	b.n	800a0a2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a18      	ldr	r2, [pc, #96]	@ (800a0ac <HAL_UART_Receive_DMA+0x94>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d01f      	beq.n	800a090 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d018      	beq.n	800a090 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	613b      	str	r3, [r7, #16]
   return(result);
 800a06c:	693b      	ldr	r3, [r7, #16]
 800a06e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a072:	627b      	str	r3, [r7, #36]	@ 0x24
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07c:	623b      	str	r3, [r7, #32]
 800a07e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	69f9      	ldr	r1, [r7, #28]
 800a082:	6a3a      	ldr	r2, [r7, #32]
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	61bb      	str	r3, [r7, #24]
   return(result);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a090:	88fb      	ldrh	r3, [r7, #6]
 800a092:	461a      	mov	r2, r3
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f001 f91c 	bl	800b2d4 <UART_Start_Receive_DMA>
 800a09c:	4603      	mov	r3, r0
 800a09e:	e000      	b.n	800a0a2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0a0:	2302      	movs	r3, #2
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3728      	adds	r7, #40	@ 0x28
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	40008000 	.word	0x40008000

0800a0b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b0ba      	sub	sp, #232	@ 0xe8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	69db      	ldr	r3, [r3, #28]
 800a0be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a0da:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a0de:	4013      	ands	r3, r2
 800a0e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a0e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d11b      	bne.n	800a124 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0f0:	f003 0320 	and.w	r3, r3, #32
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d015      	beq.n	800a124 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d105      	bne.n	800a110 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d009      	beq.n	800a124 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a114:	2b00      	cmp	r3, #0
 800a116:	f000 8312 	beq.w	800a73e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
      }
      return;
 800a122:	e30c      	b.n	800a73e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a124:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8129 	beq.w	800a380 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a12e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a132:	4b90      	ldr	r3, [pc, #576]	@ (800a374 <HAL_UART_IRQHandler+0x2c4>)
 800a134:	4013      	ands	r3, r2
 800a136:	2b00      	cmp	r3, #0
 800a138:	d106      	bne.n	800a148 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a13a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a13e:	4b8e      	ldr	r3, [pc, #568]	@ (800a378 <HAL_UART_IRQHandler+0x2c8>)
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	f000 811c 	beq.w	800a380 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a14c:	f003 0301 	and.w	r3, r3, #1
 800a150:	2b00      	cmp	r3, #0
 800a152:	d011      	beq.n	800a178 <HAL_UART_IRQHandler+0xc8>
 800a154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00b      	beq.n	800a178 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2201      	movs	r2, #1
 800a166:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a16e:	f043 0201 	orr.w	r2, r3, #1
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d011      	beq.n	800a1a8 <HAL_UART_IRQHandler+0xf8>
 800a184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d00b      	beq.n	800a1a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2202      	movs	r2, #2
 800a196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a19e:	f043 0204 	orr.w	r2, r3, #4
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1ac:	f003 0304 	and.w	r3, r3, #4
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d011      	beq.n	800a1d8 <HAL_UART_IRQHandler+0x128>
 800a1b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00b      	beq.n	800a1d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2204      	movs	r2, #4
 800a1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ce:	f043 0202 	orr.w	r2, r3, #2
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1dc:	f003 0308 	and.w	r3, r3, #8
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d017      	beq.n	800a214 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1e8:	f003 0320 	and.w	r3, r3, #32
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d105      	bne.n	800a1fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a1f4:	4b5f      	ldr	r3, [pc, #380]	@ (800a374 <HAL_UART_IRQHandler+0x2c4>)
 800a1f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d00b      	beq.n	800a214 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2208      	movs	r2, #8
 800a202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20a:	f043 0208 	orr.w	r2, r3, #8
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a218:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d012      	beq.n	800a246 <HAL_UART_IRQHandler+0x196>
 800a220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d00c      	beq.n	800a246 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a23c:	f043 0220 	orr.w	r2, r3, #32
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8278 	beq.w	800a742 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a256:	f003 0320 	and.w	r3, r3, #32
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d013      	beq.n	800a286 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d105      	bne.n	800a276 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a26a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a26e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a272:	2b00      	cmp	r3, #0
 800a274:	d007      	beq.n	800a286 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a28c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29a:	2b40      	cmp	r3, #64	@ 0x40
 800a29c:	d005      	beq.n	800a2aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a29e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2a2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d058      	beq.n	800a35c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f001 f8f9 	bl	800b4a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d148      	bne.n	800a350 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3308      	adds	r3, #8
 800a2c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2cc:	e853 3f00 	ldrex	r3, [r3]
 800a2d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a2d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a2d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a2ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a2ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a2f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a2fa:	e841 2300 	strex	r3, r2, [r1]
 800a2fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a302:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1d9      	bne.n	800a2be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a31a:	4a18      	ldr	r2, [pc, #96]	@ (800a37c <HAL_UART_IRQHandler+0x2cc>)
 800a31c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a324:	4618      	mov	r0, r3
 800a326:	f7fc f8c5 	bl	80064b4 <HAL_DMA_Abort_IT>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01f      	beq.n	800a370 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a338:	687a      	ldr	r2, [r7, #4]
 800a33a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a33e:	4610      	mov	r0, r2
 800a340:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a342:	e015      	b.n	800a370 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34e:	e00f      	b.n	800a370 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a35a:	e009      	b.n	800a370 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a36e:	e1e8      	b.n	800a742 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a370:	bf00      	nop
    return;
 800a372:	e1e6      	b.n	800a742 <HAL_UART_IRQHandler+0x692>
 800a374:	10000001 	.word	0x10000001
 800a378:	04000120 	.word	0x04000120
 800a37c:	0800b76d 	.word	0x0800b76d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a384:	2b01      	cmp	r3, #1
 800a386:	f040 8176 	bne.w	800a676 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a38a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a38e:	f003 0310 	and.w	r3, r3, #16
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 816f 	beq.w	800a676 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a39c:	f003 0310 	and.w	r3, r3, #16
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 8168 	beq.w	800a676 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2210      	movs	r2, #16
 800a3ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3b8:	2b40      	cmp	r3, #64	@ 0x40
 800a3ba:	f040 80dc 	bne.w	800a576 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a3cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 80b1 	beq.w	800a538 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a3dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	f080 80a9 	bcs.w	800a538 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a3ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f040 8087 	bne.w	800a512 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a40c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a410:	e853 3f00 	ldrex	r3, [r3]
 800a414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a418:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a41c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	461a      	mov	r2, r3
 800a42a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a42e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a432:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a436:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a43a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a43e:	e841 2300 	strex	r3, r2, [r1]
 800a442:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a446:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1da      	bne.n	800a404 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3308      	adds	r3, #8
 800a454:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a45e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a472:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a476:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a47a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a47e:	e841 2300 	strex	r3, r2, [r1]
 800a482:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a484:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1e1      	bne.n	800a44e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	3308      	adds	r3, #8
 800a490:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a492:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a494:	e853 3f00 	ldrex	r3, [r3]
 800a498:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a49a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a49c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a4b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a4bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e3      	bne.n	800a48a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a4d8:	e853 3f00 	ldrex	r3, [r3]
 800a4dc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a4de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a4e0:	f023 0310 	bic.w	r3, r3, #16
 800a4e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4f4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a4f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a4fa:	e841 2300 	strex	r3, r2, [r1]
 800a4fe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1e4      	bne.n	800a4d0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fb ff78 	bl	8006402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2202      	movs	r2, #2
 800a516:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a52a:	b292      	uxth	r2, r2
 800a52c:	1a8a      	subs	r2, r1, r2
 800a52e:	b292      	uxth	r2, r2
 800a530:	4611      	mov	r1, r2
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a536:	e106      	b.n	800a746 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a53e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a542:	429a      	cmp	r2, r3
 800a544:	f040 80ff 	bne.w	800a746 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	2b20      	cmp	r3, #32
 800a558:	f040 80f5 	bne.w	800a746 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2202      	movs	r2, #2
 800a560:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a56e:	4611      	mov	r1, r2
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	4798      	blx	r3
      return;
 800a574:	e0e7      	b.n	800a746 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a582:	b29b      	uxth	r3, r3
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a590:	b29b      	uxth	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	f000 80d9 	beq.w	800a74a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	f000 80d4 	beq.w	800a74a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5aa:	e853 3f00 	ldrex	r3, [r3]
 800a5ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a5b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a5c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a5c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a5ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5cc:	e841 2300 	strex	r3, r2, [r1]
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d1e4      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	3308      	adds	r3, #8
 800a5de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5e2:	e853 3f00 	ldrex	r3, [r3]
 800a5e6:	623b      	str	r3, [r7, #32]
   return(result);
 800a5e8:	6a3b      	ldr	r3, [r7, #32]
 800a5ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a600:	633a      	str	r2, [r7, #48]	@ 0x30
 800a602:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a604:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a608:	e841 2300 	strex	r3, r2, [r1]
 800a60c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e1      	bne.n	800a5d8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	e853 3f00 	ldrex	r3, [r3]
 800a634:	60fb      	str	r3, [r7, #12]
   return(result);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f023 0310 	bic.w	r3, r3, #16
 800a63c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	461a      	mov	r2, r3
 800a646:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a64a:	61fb      	str	r3, [r7, #28]
 800a64c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64e:	69b9      	ldr	r1, [r7, #24]
 800a650:	69fa      	ldr	r2, [r7, #28]
 800a652:	e841 2300 	strex	r3, r2, [r1]
 800a656:	617b      	str	r3, [r7, #20]
   return(result);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1e4      	bne.n	800a628 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2202      	movs	r2, #2
 800a662:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a66a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a66e:	4611      	mov	r1, r2
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a674:	e069      	b.n	800a74a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d010      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x5f4>
 800a682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a696:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6a2:	e055      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d014      	beq.n	800a6da <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d105      	bne.n	800a6c8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d008      	beq.n	800a6da <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d03e      	beq.n	800a74e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	4798      	blx	r3
    }
    return;
 800a6d8:	e039      	b.n	800a74e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d009      	beq.n	800a6fa <HAL_UART_IRQHandler+0x64a>
 800a6e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f84e 	bl	800b794 <UART_EndTransmit_IT>
    return;
 800a6f8:	e02a      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <HAL_UART_IRQHandler+0x66e>
 800a706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a70a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a71c:	e018      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d012      	beq.n	800a750 <HAL_UART_IRQHandler+0x6a0>
 800a72a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	da0e      	bge.n	800a750 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a73c:	e008      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a73e:	bf00      	nop
 800a740:	e006      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a742:	bf00      	nop
 800a744:	e004      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a746:	bf00      	nop
 800a748:	e002      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a74a:	bf00      	nop
 800a74c:	e000      	b.n	800a750 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a74e:	bf00      	nop
  }
}
 800a750:	37e8      	adds	r7, #232	@ 0xe8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop

0800a758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a7b0:	bf00      	nop
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a7c4:	bf00      	nop
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a09      	ldr	r2, [pc, #36]	@ (800a830 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d009      	beq.n	800a824 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	615a      	str	r2, [r3, #20]
  }
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	40008000 	.word	0x40008000

0800a834 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a18      	ldr	r2, [pc, #96]	@ (800a8a4 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d027      	beq.n	800a896 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d120      	bne.n	800a892 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_UART_EnableReceiverTimeout+0x2a>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e01c      	b.n	800a898 <HAL_UART_EnableReceiverTimeout+0x64>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2224      	movs	r2, #36	@ 0x24
 800a86a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	685a      	ldr	r2, [r3, #4]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a87c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	e002      	b.n	800a898 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a892:	2302      	movs	r3, #2
 800a894:	e000      	b.n	800a898 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
  }
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	40008000 	.word	0x40008000

0800a8a8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	370c      	adds	r7, #12
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
	...

0800a8c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a1a      	ldr	r2, [pc, #104]	@ (800a938 <UART_InitCallbacksToDefault+0x74>)
 800a8d0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	4a19      	ldr	r2, [pc, #100]	@ (800a93c <UART_InitCallbacksToDefault+0x78>)
 800a8d8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4a18      	ldr	r2, [pc, #96]	@ (800a940 <UART_InitCallbacksToDefault+0x7c>)
 800a8e0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a17      	ldr	r2, [pc, #92]	@ (800a944 <UART_InitCallbacksToDefault+0x80>)
 800a8e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	4a16      	ldr	r2, [pc, #88]	@ (800a948 <UART_InitCallbacksToDefault+0x84>)
 800a8f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a15      	ldr	r2, [pc, #84]	@ (800a94c <UART_InitCallbacksToDefault+0x88>)
 800a8f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a14      	ldr	r2, [pc, #80]	@ (800a950 <UART_InitCallbacksToDefault+0x8c>)
 800a900:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a13      	ldr	r2, [pc, #76]	@ (800a954 <UART_InitCallbacksToDefault+0x90>)
 800a908:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a12      	ldr	r2, [pc, #72]	@ (800a958 <UART_InitCallbacksToDefault+0x94>)
 800a910:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a11      	ldr	r2, [pc, #68]	@ (800a95c <UART_InitCallbacksToDefault+0x98>)
 800a918:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a10      	ldr	r2, [pc, #64]	@ (800a960 <UART_InitCallbacksToDefault+0x9c>)
 800a920:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a0f      	ldr	r2, [pc, #60]	@ (800a964 <UART_InitCallbacksToDefault+0xa0>)
 800a928:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a92c:	bf00      	nop
 800a92e:	370c      	adds	r7, #12
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	0800a76d 	.word	0x0800a76d
 800a93c:	0800a759 	.word	0x0800a759
 800a940:	0800a781 	.word	0x0800a781
 800a944:	08002c65 	.word	0x08002c65
 800a948:	0800a795 	.word	0x0800a795
 800a94c:	0800a7a9 	.word	0x0800a7a9
 800a950:	0800a7bd 	.word	0x0800a7bd
 800a954:	0800a7d1 	.word	0x0800a7d1
 800a958:	0800b7ef 	.word	0x0800b7ef
 800a95c:	0800b803 	.word	0x0800b803
 800a960:	0800b817 	.word	0x0800b817
 800a964:	0800a7e5 	.word	0x0800a7e5

0800a968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a968:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a96c:	b08c      	sub	sp, #48	@ 0x30
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a972:	2300      	movs	r3, #0
 800a974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	431a      	orrs	r2, r3
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	695b      	ldr	r3, [r3, #20]
 800a986:	431a      	orrs	r2, r3
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	4baa      	ldr	r3, [pc, #680]	@ (800ac40 <UART_SetConfig+0x2d8>)
 800a998:	4013      	ands	r3, r2
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	6812      	ldr	r2, [r2, #0]
 800a99e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	430a      	orrs	r2, r1
 800a9b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a9f      	ldr	r2, [pc, #636]	@ (800ac44 <UART_SetConfig+0x2dc>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d004      	beq.n	800a9d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a9de:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	6812      	ldr	r2, [r2, #0]
 800a9e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f2:	f023 010f 	bic.w	r1, r3, #15
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	4a90      	ldr	r2, [pc, #576]	@ (800ac48 <UART_SetConfig+0x2e0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d125      	bne.n	800aa58 <UART_SetConfig+0xf0>
 800aa0c:	4b8f      	ldr	r3, [pc, #572]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa12:	f003 0303 	and.w	r3, r3, #3
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	d81a      	bhi.n	800aa50 <UART_SetConfig+0xe8>
 800aa1a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa20 <UART_SetConfig+0xb8>)
 800aa1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa20:	0800aa31 	.word	0x0800aa31
 800aa24:	0800aa41 	.word	0x0800aa41
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aa49 	.word	0x0800aa49
 800aa30:	2301      	movs	r3, #1
 800aa32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa36:	e116      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa3e:	e112      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aa40:	2304      	movs	r3, #4
 800aa42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa46:	e10e      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aa48:	2308      	movs	r3, #8
 800aa4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa4e:	e10a      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aa50:	2310      	movs	r3, #16
 800aa52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa56:	e106      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a7c      	ldr	r2, [pc, #496]	@ (800ac50 <UART_SetConfig+0x2e8>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d138      	bne.n	800aad4 <UART_SetConfig+0x16c>
 800aa62:	4b7a      	ldr	r3, [pc, #488]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800aa64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa68:	f003 030c 	and.w	r3, r3, #12
 800aa6c:	2b0c      	cmp	r3, #12
 800aa6e:	d82d      	bhi.n	800aacc <UART_SetConfig+0x164>
 800aa70:	a201      	add	r2, pc, #4	@ (adr r2, 800aa78 <UART_SetConfig+0x110>)
 800aa72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa76:	bf00      	nop
 800aa78:	0800aaad 	.word	0x0800aaad
 800aa7c:	0800aacd 	.word	0x0800aacd
 800aa80:	0800aacd 	.word	0x0800aacd
 800aa84:	0800aacd 	.word	0x0800aacd
 800aa88:	0800aabd 	.word	0x0800aabd
 800aa8c:	0800aacd 	.word	0x0800aacd
 800aa90:	0800aacd 	.word	0x0800aacd
 800aa94:	0800aacd 	.word	0x0800aacd
 800aa98:	0800aab5 	.word	0x0800aab5
 800aa9c:	0800aacd 	.word	0x0800aacd
 800aaa0:	0800aacd 	.word	0x0800aacd
 800aaa4:	0800aacd 	.word	0x0800aacd
 800aaa8:	0800aac5 	.word	0x0800aac5
 800aaac:	2300      	movs	r3, #0
 800aaae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab2:	e0d8      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaba:	e0d4      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac2:	e0d0      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaca:	e0cc      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aad2:	e0c8      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a5e      	ldr	r2, [pc, #376]	@ (800ac54 <UART_SetConfig+0x2ec>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d125      	bne.n	800ab2a <UART_SetConfig+0x1c2>
 800aade:	4b5b      	ldr	r3, [pc, #364]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800aae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aae4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800aae8:	2b30      	cmp	r3, #48	@ 0x30
 800aaea:	d016      	beq.n	800ab1a <UART_SetConfig+0x1b2>
 800aaec:	2b30      	cmp	r3, #48	@ 0x30
 800aaee:	d818      	bhi.n	800ab22 <UART_SetConfig+0x1ba>
 800aaf0:	2b20      	cmp	r3, #32
 800aaf2:	d00a      	beq.n	800ab0a <UART_SetConfig+0x1a2>
 800aaf4:	2b20      	cmp	r3, #32
 800aaf6:	d814      	bhi.n	800ab22 <UART_SetConfig+0x1ba>
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <UART_SetConfig+0x19a>
 800aafc:	2b10      	cmp	r3, #16
 800aafe:	d008      	beq.n	800ab12 <UART_SetConfig+0x1aa>
 800ab00:	e00f      	b.n	800ab22 <UART_SetConfig+0x1ba>
 800ab02:	2300      	movs	r3, #0
 800ab04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab08:	e0ad      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab10:	e0a9      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab12:	2304      	movs	r3, #4
 800ab14:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab18:	e0a5      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab1a:	2308      	movs	r3, #8
 800ab1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab20:	e0a1      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab22:	2310      	movs	r3, #16
 800ab24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab28:	e09d      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a4a      	ldr	r2, [pc, #296]	@ (800ac58 <UART_SetConfig+0x2f0>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d125      	bne.n	800ab80 <UART_SetConfig+0x218>
 800ab34:	4b45      	ldr	r3, [pc, #276]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800ab36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab40:	d016      	beq.n	800ab70 <UART_SetConfig+0x208>
 800ab42:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab44:	d818      	bhi.n	800ab78 <UART_SetConfig+0x210>
 800ab46:	2b80      	cmp	r3, #128	@ 0x80
 800ab48:	d00a      	beq.n	800ab60 <UART_SetConfig+0x1f8>
 800ab4a:	2b80      	cmp	r3, #128	@ 0x80
 800ab4c:	d814      	bhi.n	800ab78 <UART_SetConfig+0x210>
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <UART_SetConfig+0x1f0>
 800ab52:	2b40      	cmp	r3, #64	@ 0x40
 800ab54:	d008      	beq.n	800ab68 <UART_SetConfig+0x200>
 800ab56:	e00f      	b.n	800ab78 <UART_SetConfig+0x210>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab5e:	e082      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab60:	2302      	movs	r3, #2
 800ab62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab66:	e07e      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6e:	e07a      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab70:	2308      	movs	r3, #8
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab76:	e076      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab7e:	e072      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a35      	ldr	r2, [pc, #212]	@ (800ac5c <UART_SetConfig+0x2f4>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d12a      	bne.n	800abe0 <UART_SetConfig+0x278>
 800ab8a:	4b30      	ldr	r3, [pc, #192]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800ab8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ab94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab98:	d01a      	beq.n	800abd0 <UART_SetConfig+0x268>
 800ab9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab9e:	d81b      	bhi.n	800abd8 <UART_SetConfig+0x270>
 800aba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aba4:	d00c      	beq.n	800abc0 <UART_SetConfig+0x258>
 800aba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abaa:	d815      	bhi.n	800abd8 <UART_SetConfig+0x270>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <UART_SetConfig+0x250>
 800abb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abb4:	d008      	beq.n	800abc8 <UART_SetConfig+0x260>
 800abb6:	e00f      	b.n	800abd8 <UART_SetConfig+0x270>
 800abb8:	2300      	movs	r3, #0
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e052      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800abc0:	2302      	movs	r3, #2
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc6:	e04e      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800abc8:	2304      	movs	r3, #4
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abce:	e04a      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800abd0:	2308      	movs	r3, #8
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abd6:	e046      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800abd8:	2310      	movs	r3, #16
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abde:	e042      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a17      	ldr	r2, [pc, #92]	@ (800ac44 <UART_SetConfig+0x2dc>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d13a      	bne.n	800ac60 <UART_SetConfig+0x2f8>
 800abea:	4b18      	ldr	r3, [pc, #96]	@ (800ac4c <UART_SetConfig+0x2e4>)
 800abec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abf0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800abf4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abf8:	d01a      	beq.n	800ac30 <UART_SetConfig+0x2c8>
 800abfa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abfe:	d81b      	bhi.n	800ac38 <UART_SetConfig+0x2d0>
 800ac00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac04:	d00c      	beq.n	800ac20 <UART_SetConfig+0x2b8>
 800ac06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac0a:	d815      	bhi.n	800ac38 <UART_SetConfig+0x2d0>
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <UART_SetConfig+0x2b0>
 800ac10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac14:	d008      	beq.n	800ac28 <UART_SetConfig+0x2c0>
 800ac16:	e00f      	b.n	800ac38 <UART_SetConfig+0x2d0>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1e:	e022      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ac20:	2302      	movs	r3, #2
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac26:	e01e      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ac28:	2304      	movs	r3, #4
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2e:	e01a      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ac30:	2308      	movs	r3, #8
 800ac32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	e016      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ac38:	2310      	movs	r3, #16
 800ac3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac3e:	e012      	b.n	800ac66 <UART_SetConfig+0x2fe>
 800ac40:	cfff69f3 	.word	0xcfff69f3
 800ac44:	40008000 	.word	0x40008000
 800ac48:	40013800 	.word	0x40013800
 800ac4c:	40021000 	.word	0x40021000
 800ac50:	40004400 	.word	0x40004400
 800ac54:	40004800 	.word	0x40004800
 800ac58:	40004c00 	.word	0x40004c00
 800ac5c:	40005000 	.word	0x40005000
 800ac60:	2310      	movs	r3, #16
 800ac62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4aae      	ldr	r2, [pc, #696]	@ (800af24 <UART_SetConfig+0x5bc>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	f040 8097 	bne.w	800ada0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac76:	2b08      	cmp	r3, #8
 800ac78:	d823      	bhi.n	800acc2 <UART_SetConfig+0x35a>
 800ac7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <UART_SetConfig+0x318>)
 800ac7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac80:	0800aca5 	.word	0x0800aca5
 800ac84:	0800acc3 	.word	0x0800acc3
 800ac88:	0800acad 	.word	0x0800acad
 800ac8c:	0800acc3 	.word	0x0800acc3
 800ac90:	0800acb3 	.word	0x0800acb3
 800ac94:	0800acc3 	.word	0x0800acc3
 800ac98:	0800acc3 	.word	0x0800acc3
 800ac9c:	0800acc3 	.word	0x0800acc3
 800aca0:	0800acbb 	.word	0x0800acbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aca4:	f7fc fcf6 	bl	8007694 <HAL_RCC_GetPCLK1Freq>
 800aca8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acaa:	e010      	b.n	800acce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acac:	4b9e      	ldr	r3, [pc, #632]	@ (800af28 <UART_SetConfig+0x5c0>)
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acb0:	e00d      	b.n	800acce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acb2:	f7fc fc81 	bl	80075b8 <HAL_RCC_GetSysClockFreq>
 800acb6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acb8:	e009      	b.n	800acce <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acc0:	e005      	b.n	800acce <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800accc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 8130 	beq.w	800af36 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	4a94      	ldr	r2, [pc, #592]	@ (800af2c <UART_SetConfig+0x5c4>)
 800acdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	4613      	mov	r3, r2
 800acf0:	005b      	lsls	r3, r3, #1
 800acf2:	4413      	add	r3, r2
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d305      	bcc.n	800ad06 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d903      	bls.n	800ad0e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad0c:	e113      	b.n	800af36 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	2200      	movs	r2, #0
 800ad12:	60bb      	str	r3, [r7, #8]
 800ad14:	60fa      	str	r2, [r7, #12]
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1a:	4a84      	ldr	r2, [pc, #528]	@ (800af2c <UART_SetConfig+0x5c4>)
 800ad1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad20:	b29b      	uxth	r3, r3
 800ad22:	2200      	movs	r2, #0
 800ad24:	603b      	str	r3, [r7, #0]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad2c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad30:	f7f5 feb0 	bl	8000a94 <__aeabi_uldivmod>
 800ad34:	4602      	mov	r2, r0
 800ad36:	460b      	mov	r3, r1
 800ad38:	4610      	mov	r0, r2
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f04f 0200 	mov.w	r2, #0
 800ad40:	f04f 0300 	mov.w	r3, #0
 800ad44:	020b      	lsls	r3, r1, #8
 800ad46:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad4a:	0202      	lsls	r2, r0, #8
 800ad4c:	6979      	ldr	r1, [r7, #20]
 800ad4e:	6849      	ldr	r1, [r1, #4]
 800ad50:	0849      	lsrs	r1, r1, #1
 800ad52:	2000      	movs	r0, #0
 800ad54:	460c      	mov	r4, r1
 800ad56:	4605      	mov	r5, r0
 800ad58:	eb12 0804 	adds.w	r8, r2, r4
 800ad5c:	eb43 0905 	adc.w	r9, r3, r5
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	469a      	mov	sl, r3
 800ad68:	4693      	mov	fp, r2
 800ad6a:	4652      	mov	r2, sl
 800ad6c:	465b      	mov	r3, fp
 800ad6e:	4640      	mov	r0, r8
 800ad70:	4649      	mov	r1, r9
 800ad72:	f7f5 fe8f 	bl	8000a94 <__aeabi_uldivmod>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad84:	d308      	bcc.n	800ad98 <UART_SetConfig+0x430>
 800ad86:	6a3b      	ldr	r3, [r7, #32]
 800ad88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad8c:	d204      	bcs.n	800ad98 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	60da      	str	r2, [r3, #12]
 800ad96:	e0ce      	b.n	800af36 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad9e:	e0ca      	b.n	800af36 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	69db      	ldr	r3, [r3, #28]
 800ada4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ada8:	d166      	bne.n	800ae78 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adaa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d827      	bhi.n	800ae02 <UART_SetConfig+0x49a>
 800adb2:	a201      	add	r2, pc, #4	@ (adr r2, 800adb8 <UART_SetConfig+0x450>)
 800adb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adb8:	0800addd 	.word	0x0800addd
 800adbc:	0800ade5 	.word	0x0800ade5
 800adc0:	0800aded 	.word	0x0800aded
 800adc4:	0800ae03 	.word	0x0800ae03
 800adc8:	0800adf3 	.word	0x0800adf3
 800adcc:	0800ae03 	.word	0x0800ae03
 800add0:	0800ae03 	.word	0x0800ae03
 800add4:	0800ae03 	.word	0x0800ae03
 800add8:	0800adfb 	.word	0x0800adfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800addc:	f7fc fc5a 	bl	8007694 <HAL_RCC_GetPCLK1Freq>
 800ade0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ade2:	e014      	b.n	800ae0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ade4:	f7fc fc6c 	bl	80076c0 <HAL_RCC_GetPCLK2Freq>
 800ade8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adea:	e010      	b.n	800ae0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800adec:	4b4e      	ldr	r3, [pc, #312]	@ (800af28 <UART_SetConfig+0x5c0>)
 800adee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adf0:	e00d      	b.n	800ae0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adf2:	f7fc fbe1 	bl	80075b8 <HAL_RCC_GetSysClockFreq>
 800adf6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adf8:	e009      	b.n	800ae0e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae00:	e005      	b.n	800ae0e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8090 	beq.w	800af36 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1a:	4a44      	ldr	r2, [pc, #272]	@ (800af2c <UART_SetConfig+0x5c4>)
 800ae1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae20:	461a      	mov	r2, r3
 800ae22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae24:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae28:	005a      	lsls	r2, r3, #1
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	085b      	lsrs	r3, r3, #1
 800ae30:	441a      	add	r2, r3
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae3c:	6a3b      	ldr	r3, [r7, #32]
 800ae3e:	2b0f      	cmp	r3, #15
 800ae40:	d916      	bls.n	800ae70 <UART_SetConfig+0x508>
 800ae42:	6a3b      	ldr	r3, [r7, #32]
 800ae44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae48:	d212      	bcs.n	800ae70 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f023 030f 	bic.w	r3, r3, #15
 800ae52:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	085b      	lsrs	r3, r3, #1
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	f003 0307 	and.w	r3, r3, #7
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	8bfb      	ldrh	r3, [r7, #30]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	8bfa      	ldrh	r2, [r7, #30]
 800ae6c:	60da      	str	r2, [r3, #12]
 800ae6e:	e062      	b.n	800af36 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae76:	e05e      	b.n	800af36 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae7c:	2b08      	cmp	r3, #8
 800ae7e:	d828      	bhi.n	800aed2 <UART_SetConfig+0x56a>
 800ae80:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <UART_SetConfig+0x520>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800aead 	.word	0x0800aead
 800ae8c:	0800aeb5 	.word	0x0800aeb5
 800ae90:	0800aebd 	.word	0x0800aebd
 800ae94:	0800aed3 	.word	0x0800aed3
 800ae98:	0800aec3 	.word	0x0800aec3
 800ae9c:	0800aed3 	.word	0x0800aed3
 800aea0:	0800aed3 	.word	0x0800aed3
 800aea4:	0800aed3 	.word	0x0800aed3
 800aea8:	0800aecb 	.word	0x0800aecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aeac:	f7fc fbf2 	bl	8007694 <HAL_RCC_GetPCLK1Freq>
 800aeb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aeb2:	e014      	b.n	800aede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aeb4:	f7fc fc04 	bl	80076c0 <HAL_RCC_GetPCLK2Freq>
 800aeb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aeba:	e010      	b.n	800aede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aebc:	4b1a      	ldr	r3, [pc, #104]	@ (800af28 <UART_SetConfig+0x5c0>)
 800aebe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aec0:	e00d      	b.n	800aede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aec2:	f7fc fb79 	bl	80075b8 <HAL_RCC_GetSysClockFreq>
 800aec6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aec8:	e009      	b.n	800aede <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aed0:	e005      	b.n	800aede <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aedc:	bf00      	nop
    }

    if (pclk != 0U)
 800aede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d028      	beq.n	800af36 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee8:	4a10      	ldr	r2, [pc, #64]	@ (800af2c <UART_SetConfig+0x5c4>)
 800aeea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	fbb3 f2f2 	udiv	r2, r3, r2
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	085b      	lsrs	r3, r3, #1
 800aefc:	441a      	add	r2, r3
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	fbb2 f3f3 	udiv	r3, r2, r3
 800af06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	2b0f      	cmp	r3, #15
 800af0c:	d910      	bls.n	800af30 <UART_SetConfig+0x5c8>
 800af0e:	6a3b      	ldr	r3, [r7, #32]
 800af10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af14:	d20c      	bcs.n	800af30 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	b29a      	uxth	r2, r3
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	60da      	str	r2, [r3, #12]
 800af20:	e009      	b.n	800af36 <UART_SetConfig+0x5ce>
 800af22:	bf00      	nop
 800af24:	40008000 	.word	0x40008000
 800af28:	00f42400 	.word	0x00f42400
 800af2c:	0800da64 	.word	0x0800da64
      }
      else
      {
        ret = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2201      	movs	r2, #1
 800af3a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	2201      	movs	r2, #1
 800af42:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	2200      	movs	r2, #0
 800af4a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	2200      	movs	r2, #0
 800af50:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800af56:	4618      	mov	r0, r3
 800af58:	3730      	adds	r7, #48	@ 0x30
 800af5a:	46bd      	mov	sp, r7
 800af5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af6c:	f003 0308 	and.w	r3, r3, #8
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00a      	beq.n	800af8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	430a      	orrs	r2, r1
 800af88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	d00a      	beq.n	800afac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb0:	f003 0302 	and.w	r3, r3, #2
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00a      	beq.n	800afce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	430a      	orrs	r2, r1
 800afcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd2:	f003 0304 	and.w	r3, r3, #4
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00a      	beq.n	800aff0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	430a      	orrs	r2, r1
 800afee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff4:	f003 0310 	and.w	r3, r3, #16
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d00a      	beq.n	800b012 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	430a      	orrs	r2, r1
 800b010:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b016:	f003 0320 	and.w	r3, r3, #32
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d01a      	beq.n	800b076 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	430a      	orrs	r2, r1
 800b054:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b05a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b05e:	d10a      	bne.n	800b076 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	430a      	orrs	r2, r1
 800b074:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b07a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00a      	beq.n	800b098 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	685b      	ldr	r3, [r3, #4]
 800b088:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	430a      	orrs	r2, r1
 800b096:	605a      	str	r2, [r3, #4]
  }
}
 800b098:	bf00      	nop
 800b09a:	370c      	adds	r7, #12
 800b09c:	46bd      	mov	sp, r7
 800b09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a2:	4770      	bx	lr

0800b0a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b098      	sub	sp, #96	@ 0x60
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b0b4:	f7f9 faee 	bl	8004694 <HAL_GetTick>
 800b0b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b08      	cmp	r3, #8
 800b0c6:	d12f      	bne.n	800b128 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f88e 	bl	800b1f8 <UART_WaitOnFlagUntilTimeout>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d022      	beq.n	800b128 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	e853 3f00 	ldrex	r3, [r3]
 800b0ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b100:	647b      	str	r3, [r7, #68]	@ 0x44
 800b102:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b108:	e841 2300 	strex	r3, r2, [r1]
 800b10c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1e6      	bne.n	800b0e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2220      	movs	r2, #32
 800b118:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b124:	2303      	movs	r3, #3
 800b126:	e063      	b.n	800b1f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 0304 	and.w	r3, r3, #4
 800b132:	2b04      	cmp	r3, #4
 800b134:	d149      	bne.n	800b1ca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b136:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b13e:	2200      	movs	r2, #0
 800b140:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f857 	bl	800b1f8 <UART_WaitOnFlagUntilTimeout>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d03c      	beq.n	800b1ca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	623b      	str	r3, [r7, #32]
   return(result);
 800b15e:	6a3b      	ldr	r3, [r7, #32]
 800b160:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b164:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b16e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b170:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e6      	bne.n	800b150 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	3308      	adds	r3, #8
 800b188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	e853 3f00 	ldrex	r3, [r3]
 800b190:	60fb      	str	r3, [r7, #12]
   return(result);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f023 0301 	bic.w	r3, r3, #1
 800b198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	3308      	adds	r3, #8
 800b1a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1a2:	61fa      	str	r2, [r7, #28]
 800b1a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a6:	69b9      	ldr	r1, [r7, #24]
 800b1a8:	69fa      	ldr	r2, [r7, #28]
 800b1aa:	e841 2300 	strex	r3, r2, [r1]
 800b1ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1e5      	bne.n	800b182 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e012      	b.n	800b1f0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2220      	movs	r2, #32
 800b1d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3758      	adds	r7, #88	@ 0x58
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b084      	sub	sp, #16
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	4613      	mov	r3, r2
 800b206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b208:	e04f      	b.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b210:	d04b      	beq.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b212:	f7f9 fa3f 	bl	8004694 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	69ba      	ldr	r2, [r7, #24]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d302      	bcc.n	800b228 <UART_WaitOnFlagUntilTimeout+0x30>
 800b222:	69bb      	ldr	r3, [r7, #24]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d101      	bne.n	800b22c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e04e      	b.n	800b2ca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f003 0304 	and.w	r3, r3, #4
 800b236:	2b00      	cmp	r3, #0
 800b238:	d037      	beq.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	2b80      	cmp	r3, #128	@ 0x80
 800b23e:	d034      	beq.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2b40      	cmp	r3, #64	@ 0x40
 800b244:	d031      	beq.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69db      	ldr	r3, [r3, #28]
 800b24c:	f003 0308 	and.w	r3, r3, #8
 800b250:	2b08      	cmp	r3, #8
 800b252:	d110      	bne.n	800b276 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2208      	movs	r2, #8
 800b25a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	f000 f920 	bl	800b4a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2208      	movs	r2, #8
 800b266:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e029      	b.n	800b2ca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b284:	d111      	bne.n	800b2aa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b28e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 f906 	bl	800b4a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2220      	movs	r2, #32
 800b29a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e00f      	b.n	800b2ca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	bf0c      	ite	eq
 800b2ba:	2301      	moveq	r3, #1
 800b2bc:	2300      	movne	r3, #0
 800b2be:	b2db      	uxtb	r3, r3
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d0a0      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
	...

0800b2d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b096      	sub	sp, #88	@ 0x58
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	88fa      	ldrh	r2, [r7, #6]
 800b2ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2222      	movs	r2, #34	@ 0x22
 800b2fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b306:	2b00      	cmp	r3, #0
 800b308:	d02d      	beq.n	800b366 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b310:	4a40      	ldr	r2, [pc, #256]	@ (800b414 <UART_Start_Receive_DMA+0x140>)
 800b312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b31a:	4a3f      	ldr	r2, [pc, #252]	@ (800b418 <UART_Start_Receive_DMA+0x144>)
 800b31c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b324:	4a3d      	ldr	r2, [pc, #244]	@ (800b41c <UART_Start_Receive_DMA+0x148>)
 800b326:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b32e:	2200      	movs	r2, #0
 800b330:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3324      	adds	r3, #36	@ 0x24
 800b33e:	4619      	mov	r1, r3
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b344:	461a      	mov	r2, r3
 800b346:	88fb      	ldrh	r3, [r7, #6]
 800b348:	f7fa ffe0 	bl	800630c <HAL_DMA_Start_IT>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d009      	beq.n	800b366 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	2210      	movs	r2, #16
 800b356:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2220      	movs	r2, #32
 800b35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e051      	b.n	800b40a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d018      	beq.n	800b3a0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b382:	657b      	str	r3, [r7, #84]	@ 0x54
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	461a      	mov	r2, r3
 800b38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b38c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b38e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e6      	bne.n	800b36e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3308      	adds	r3, #8
 800b3a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3aa:	e853 3f00 	ldrex	r3, [r3]
 800b3ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b2:	f043 0301 	orr.w	r3, r3, #1
 800b3b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3308      	adds	r3, #8
 800b3be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b3c0:	637a      	str	r2, [r7, #52]	@ 0x34
 800b3c2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b3c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e5      	bne.n	800b3a0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3308      	adds	r3, #8
 800b3da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	e853 3f00 	ldrex	r3, [r3]
 800b3e2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b3f4:	623a      	str	r2, [r7, #32]
 800b3f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f8:	69f9      	ldr	r1, [r7, #28]
 800b3fa:	6a3a      	ldr	r2, [r7, #32]
 800b3fc:	e841 2300 	strex	r3, r2, [r1]
 800b400:	61bb      	str	r3, [r7, #24]
   return(result);
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d1e5      	bne.n	800b3d4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3758      	adds	r7, #88	@ 0x58
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	0800b56f 	.word	0x0800b56f
 800b418:	0800b6a3 	.word	0x0800b6a3
 800b41c:	0800b6e9 	.word	0x0800b6e9

0800b420 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b420:	b480      	push	{r7}
 800b422:	b08f      	sub	sp, #60	@ 0x3c
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42e:	6a3b      	ldr	r3, [r7, #32]
 800b430:	e853 3f00 	ldrex	r3, [r3]
 800b434:	61fb      	str	r3, [r7, #28]
   return(result);
 800b436:	69fb      	ldr	r3, [r7, #28]
 800b438:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	461a      	mov	r2, r3
 800b444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b448:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b44c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44e:	e841 2300 	strex	r3, r2, [r1]
 800b452:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1e6      	bne.n	800b428 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3308      	adds	r3, #8
 800b460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	60bb      	str	r3, [r7, #8]
   return(result);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b470:	633b      	str	r3, [r7, #48]	@ 0x30
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	3308      	adds	r3, #8
 800b478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b47a:	61ba      	str	r2, [r7, #24]
 800b47c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47e:	6979      	ldr	r1, [r7, #20]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	613b      	str	r3, [r7, #16]
   return(result);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e5      	bne.n	800b45a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2220      	movs	r2, #32
 800b492:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b496:	bf00      	nop
 800b498:	373c      	adds	r7, #60	@ 0x3c
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr

0800b4a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4a2:	b480      	push	{r7}
 800b4a4:	b095      	sub	sp, #84	@ 0x54
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	461a      	mov	r2, r3
 800b4c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b4ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b4ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e6      	bne.n	800b4aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6a3b      	ldr	r3, [r7, #32]
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b4f2:	f023 0301 	bic.w	r3, r3, #1
 800b4f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b500:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b502:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b50e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e3      	bne.n	800b4dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d118      	bne.n	800b54e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	e853 3f00 	ldrex	r3, [r3]
 800b528:	60bb      	str	r3, [r7, #8]
   return(result);
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f023 0310 	bic.w	r3, r3, #16
 800b530:	647b      	str	r3, [r7, #68]	@ 0x44
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53e:	6979      	ldr	r1, [r7, #20]
 800b540:	69ba      	ldr	r2, [r7, #24]
 800b542:	e841 2300 	strex	r3, r2, [r1]
 800b546:	613b      	str	r3, [r7, #16]
   return(result);
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1e6      	bne.n	800b51c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2200      	movs	r2, #0
 800b55a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2200      	movs	r2, #0
 800b560:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b562:	bf00      	nop
 800b564:	3754      	adds	r7, #84	@ 0x54
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b09c      	sub	sp, #112	@ 0x70
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f003 0320 	and.w	r3, r3, #32
 800b586:	2b00      	cmp	r3, #0
 800b588:	d171      	bne.n	800b66e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b59a:	e853 3f00 	ldrex	r3, [r3]
 800b59e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5b2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b5b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b5b8:	e841 2300 	strex	r3, r2, [r1]
 800b5bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b5be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1e6      	bne.n	800b592 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	3308      	adds	r3, #8
 800b5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ce:	e853 3f00 	ldrex	r3, [r3]
 800b5d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b5d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5d6:	f023 0301 	bic.w	r3, r3, #1
 800b5da:	667b      	str	r3, [r7, #100]	@ 0x64
 800b5dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b5e4:	647a      	str	r2, [r7, #68]	@ 0x44
 800b5e6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b5ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b5ec:	e841 2300 	strex	r3, r2, [r1]
 800b5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b5f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d1e5      	bne.n	800b5c4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	e853 3f00 	ldrex	r3, [r3]
 800b606:	623b      	str	r3, [r7, #32]
   return(result);
 800b608:	6a3b      	ldr	r3, [r7, #32]
 800b60a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b60e:	663b      	str	r3, [r7, #96]	@ 0x60
 800b610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3308      	adds	r3, #8
 800b616:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b618:	633a      	str	r2, [r7, #48]	@ 0x30
 800b61a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b61e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b620:	e841 2300 	strex	r3, r2, [r1]
 800b624:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e5      	bne.n	800b5f8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b62c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b62e:	2220      	movs	r2, #32
 800b630:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b634:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b638:	2b01      	cmp	r3, #1
 800b63a:	d118      	bne.n	800b66e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b63c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	e853 3f00 	ldrex	r3, [r3]
 800b648:	60fb      	str	r3, [r7, #12]
   return(result);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f023 0310 	bic.w	r3, r3, #16
 800b650:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b652:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b65a:	61fb      	str	r3, [r7, #28]
 800b65c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b65e:	69b9      	ldr	r1, [r7, #24]
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	e841 2300 	strex	r3, r2, [r1]
 800b666:	617b      	str	r3, [r7, #20]
   return(result);
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e6      	bne.n	800b63c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b66e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b670:	2200      	movs	r2, #0
 800b672:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d109      	bne.n	800b690 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b682:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b684:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b688:	4611      	mov	r1, r2
 800b68a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b68c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b68e:	e004      	b.n	800b69a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b696:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b698:	4798      	blx	r3
}
 800b69a:	bf00      	nop
 800b69c:	3770      	adds	r7, #112	@ 0x70
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d10b      	bne.n	800b6d6 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6c4:	68fa      	ldr	r2, [r7, #12]
 800b6c6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6ca:	0852      	lsrs	r2, r2, #1
 800b6cc:	b292      	uxth	r2, r2
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6d4:	e004      	b.n	800b6e0 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	4798      	blx	r3
}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6fc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b704:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b710:	2b80      	cmp	r3, #128	@ 0x80
 800b712:	d109      	bne.n	800b728 <UART_DMAError+0x40>
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b21      	cmp	r3, #33	@ 0x21
 800b718:	d106      	bne.n	800b728 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	2200      	movs	r2, #0
 800b71e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b722:	6978      	ldr	r0, [r7, #20]
 800b724:	f7ff fe7c 	bl	800b420 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b732:	2b40      	cmp	r3, #64	@ 0x40
 800b734:	d109      	bne.n	800b74a <UART_DMAError+0x62>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b22      	cmp	r3, #34	@ 0x22
 800b73a:	d106      	bne.n	800b74a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b744:	6978      	ldr	r0, [r7, #20]
 800b746:	f7ff feac 	bl	800b4a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b750:	f043 0210 	orr.w	r2, r3, #16
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b760:	6978      	ldr	r0, [r7, #20]
 800b762:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b764:	bf00      	nop
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b084      	sub	sp, #16
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b778:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78c:	bf00      	nop
 800b78e:	3710      	adds	r7, #16
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b088      	sub	sp, #32
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	e853 3f00 	ldrex	r3, [r3]
 800b7a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7b0:	61fb      	str	r3, [r7, #28]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	61bb      	str	r3, [r7, #24]
 800b7bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7be:	6979      	ldr	r1, [r7, #20]
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	e841 2300 	strex	r3, r2, [r1]
 800b7c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1e6      	bne.n	800b79c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7e2:	6878      	ldr	r0, [r7, #4]
 800b7e4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7e6:	bf00      	nop
 800b7e8:	3720      	adds	r7, #32
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7f6:	bf00      	nop
 800b7f8:	370c      	adds	r7, #12
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b802:	b480      	push	{r7}
 800b804:	b083      	sub	sp, #12
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b80a:	bf00      	nop
 800b80c:	370c      	adds	r7, #12
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b81e:	bf00      	nop
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr

0800b82a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b82a:	b480      	push	{r7}
 800b82c:	b085      	sub	sp, #20
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b838:	2b01      	cmp	r3, #1
 800b83a:	d101      	bne.n	800b840 <HAL_UARTEx_DisableFifoMode+0x16>
 800b83c:	2302      	movs	r3, #2
 800b83e:	e027      	b.n	800b890 <HAL_UARTEx_DisableFifoMode+0x66>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2224      	movs	r2, #36	@ 0x24
 800b84c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f022 0201 	bic.w	r2, r2, #1
 800b866:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b86e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	68fa      	ldr	r2, [r7, #12]
 800b87c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2220      	movs	r2, #32
 800b882:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d101      	bne.n	800b8b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	e02d      	b.n	800b910 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2224      	movs	r2, #36	@ 0x24
 800b8c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f022 0201 	bic.w	r2, r2, #1
 800b8da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	683a      	ldr	r2, [r7, #0]
 800b8ec:	430a      	orrs	r2, r1
 800b8ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f84f 	bl	800b994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2220      	movs	r2, #32
 800b902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
 800b920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d101      	bne.n	800b930 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b92c:	2302      	movs	r3, #2
 800b92e:	e02d      	b.n	800b98c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2224      	movs	r2, #36	@ 0x24
 800b93c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f022 0201 	bic.w	r2, r2, #1
 800b956:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f811 	bl	800b994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3710      	adds	r7, #16
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d108      	bne.n	800b9b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9b4:	e031      	b.n	800ba1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9ba:	2308      	movs	r3, #8
 800b9bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	689b      	ldr	r3, [r3, #8]
 800b9c4:	0e5b      	lsrs	r3, r3, #25
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	f003 0307 	and.w	r3, r3, #7
 800b9cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	0f5b      	lsrs	r3, r3, #29
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
 800b9e0:	7b3a      	ldrb	r2, [r7, #12]
 800b9e2:	4911      	ldr	r1, [pc, #68]	@ (800ba28 <UARTEx_SetNbDataToProcess+0x94>)
 800b9e4:	5c8a      	ldrb	r2, [r1, r2]
 800b9e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b9ea:	7b3a      	ldrb	r2, [r7, #12]
 800b9ec:	490f      	ldr	r1, [pc, #60]	@ (800ba2c <UARTEx_SetNbDataToProcess+0x98>)
 800b9ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	7b7a      	ldrb	r2, [r7, #13]
 800ba00:	4909      	ldr	r1, [pc, #36]	@ (800ba28 <UARTEx_SetNbDataToProcess+0x94>)
 800ba02:	5c8a      	ldrb	r2, [r1, r2]
 800ba04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba08:	7b7a      	ldrb	r2, [r7, #13]
 800ba0a:	4908      	ldr	r1, [pc, #32]	@ (800ba2c <UARTEx_SetNbDataToProcess+0x98>)
 800ba0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba12:	b29a      	uxth	r2, r3
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	0800da7c 	.word	0x0800da7c
 800ba2c:	0800da84 	.word	0x0800da84

0800ba30 <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b08b      	sub	sp, #44	@ 0x2c
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800ba3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba3e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bb28 <arm_sin_f32+0xf8>
 800ba42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba46:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ba4a:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba52:	ee17 3a90 	vmov	r3, s15
 800ba56:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800ba58:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba64:	d502      	bpl.n	800ba6c <arm_sin_f32+0x3c>
  {
    n--;
 800ba66:	6a3b      	ldr	r3, [r7, #32]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	ee07 3a90 	vmov	s15, r3
 800ba72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba76:	ed97 7a06 	vldr	s14, [r7, #24]
 800ba7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba7e:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800ba82:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba86:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800bb2c <arm_sin_f32+0xfc>
 800ba8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba8e:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800ba92:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba9a:	ee17 3a90 	vmov	r3, s15
 800ba9e:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800baa0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800baa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baa6:	d309      	bcc.n	800babc <arm_sin_f32+0x8c>
    index = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800baac:	edd7 7a07 	vldr	s15, [r7, #28]
 800bab0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800bb2c <arm_sin_f32+0xfc>
 800bab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bab8:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800babc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800babe:	ee07 3a90 	vmov	s15, r3
 800bac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac6:	ed97 7a07 	vldr	s14, [r7, #28]
 800baca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bace:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800bad2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bad4:	4a16      	ldr	r2, [pc, #88]	@ (800bb30 <arm_sin_f32+0x100>)
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	4413      	add	r3, r2
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800bade:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bae0:	3301      	adds	r3, #1
 800bae2:	4a13      	ldr	r2, [pc, #76]	@ (800bb30 <arm_sin_f32+0x100>)
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800baec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800baf0:	edd7 7a05 	vldr	s15, [r7, #20]
 800baf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800baf8:	edd7 7a04 	vldr	s15, [r7, #16]
 800bafc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb00:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb04:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb10:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	ee07 3a90 	vmov	s15, r3
}
 800bb1a:	eeb0 0a67 	vmov.f32	s0, s15
 800bb1e:	372c      	adds	r7, #44	@ 0x2c
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr
 800bb28:	3e22f983 	.word	0x3e22f983
 800bb2c:	44000000 	.word	0x44000000
 800bb30:	0800da8c 	.word	0x0800da8c

0800bb34 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b08b      	sub	sp, #44	@ 0x2c
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	60b9      	str	r1, [r7, #8]
 800bb3e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	885b      	ldrh	r3, [r3, #2]
 800bb5c:	fb02 f303 	mul.w	r3, r2, r3
 800bb60:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bb66:	e013      	b.n	800bb90 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bb68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb6a:	1d1a      	adds	r2, r3, #4
 800bb6c:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb6e:	ed93 7a00 	vldr	s14, [r3]
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	623a      	str	r2, [r7, #32]
 800bb78:	edd3 7a00 	vldr	s15, [r3]
 800bb7c:	69fb      	ldr	r3, [r7, #28]
 800bb7e:	1d1a      	adds	r2, r3, #4
 800bb80:	61fa      	str	r2, [r7, #28]
 800bb82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb86:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e8      	bne.n	800bb68 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bb96:	2300      	movs	r3, #0
 800bb98:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bb9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	372c      	adds	r7, #44	@ 0x2c
 800bba2:	46bd      	mov	sp, r7
 800bba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba8:	4770      	bx	lr

0800bbaa <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b085      	sub	sp, #20
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	60f8      	str	r0, [r7, #12]
 800bbb2:	607b      	str	r3, [r7, #4]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	817b      	strh	r3, [r7, #10]
 800bbb8:	4613      	mov	r3, r2
 800bbba:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	897a      	ldrh	r2, [r7, #10]
 800bbc0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	893a      	ldrh	r2, [r7, #8]
 800bbc6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	605a      	str	r2, [r3, #4]
}
 800bbce:	bf00      	nop
 800bbd0:	3714      	adds	r7, #20
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr

0800bbda <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b0bb      	sub	sp, #236	@ 0xec
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	885b      	ldrh	r3, [r3, #2]
 800bbfa:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800bbfc:	f04f 0300 	mov.w	r3, #0
 800bc00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800bc10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800bc16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800bc1c:	e03b      	b.n	800bc96 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800bc1e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bc20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc2a:	e00c      	b.n	800bc46 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800bc2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc30:	1d1a      	adds	r2, r3, #4
 800bc32:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc36:	f04f 0200 	mov.w	r2, #0
 800bc3a:	601a      	str	r2, [r3, #0]
        j--;
 800bc3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc40:	3b01      	subs	r3, #1
 800bc42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d1ee      	bne.n	800bc2c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800bc4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc52:	1d1a      	adds	r2, r3, #4
 800bc54:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bc5c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800bc5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc62:	3b01      	subs	r3, #1
 800bc64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc68:	e00c      	b.n	800bc84 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800bc6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc6e:	1d1a      	adds	r2, r3, #4
 800bc70:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc74:	f04f 0200 	mov.w	r2, #0
 800bc78:	601a      	str	r2, [r3, #0]
        j--;
 800bc7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1ee      	bne.n	800bc6a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800bc8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc90:	3b01      	subs	r3, #1
 800bc92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800bc96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d1bf      	bne.n	800bc1e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bca4:	e2c7      	b.n	800c236 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800bca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcaa:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	685a      	ldr	r2, [r3, #4]
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	885b      	ldrh	r3, [r3, #2]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800bcba:	fb01 f303 	mul.w	r3, r1, r3
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800bcc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800bcd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bcd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcdc:	3301      	adds	r3, #1
 800bcde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bce2:	e02c      	b.n	800bd3e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685a      	ldr	r2, [r3, #4]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	885b      	ldrh	r3, [r3, #2]
 800bcec:	4619      	mov	r1, r3
 800bcee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bcf2:	fb03 f101 	mul.w	r1, r3, r1
 800bcf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcfa:	440b      	add	r3, r1
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800bd04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800bd0c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800bd10:	eeb0 7ae7 	vabs.f32	s14, s15
 800bd14:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd18:	eef0 7ae7 	vabs.f32	s15, s15
 800bd1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd24:	dd06      	ble.n	800bd34 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800bd26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800bd2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bd34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd38:	3301      	adds	r3, #1
 800bd3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd3e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bd42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d3cd      	bcc.n	800bce4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800bd48:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd54:	f000 809b 	beq.w	800be8e <arm_mat_inverse_f32+0x2b4>
 800bd58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bd5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd60:	429a      	cmp	r2, r3
 800bd62:	f000 8094 	beq.w	800be8e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	885b      	ldrh	r3, [r3, #2]
 800bd7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd88:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd8a:	fb03 f202 	mul.w	r2, r3, r2
 800bd8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bda0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bda6:	fb03 f202 	mul.w	r2, r3, r2
 800bdaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdc2:	e018      	b.n	800bdf6 <arm_mat_inverse_f32+0x21c>
 800bdc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bdcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bdd0:	1d1a      	adds	r2, r3, #4
 800bdd2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800bdd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800bdda:	6812      	ldr	r2, [r2, #0]
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bde2:	1d1a      	adds	r2, r3, #4
 800bde4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800bde8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bdea:	601a      	str	r2, [r3, #0]
 800bdec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdf6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800bdfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	dbe1      	blt.n	800bdc4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	885b      	ldrh	r3, [r3, #2]
 800be14:	647b      	str	r3, [r7, #68]	@ 0x44
 800be16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be18:	643b      	str	r3, [r7, #64]	@ 0x40
 800be1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be1e:	fb02 f303 	mul.w	r3, r2, r3
 800be22:	009b      	lsls	r3, r3, #2
 800be24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be28:	4413      	add	r3, r2
 800be2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be30:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be34:	fb02 f303 	mul.w	r3, r2, r3
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be3e:	4413      	add	r3, r2
 800be40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be44:	2300      	movs	r3, #0
 800be46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be4a:	e018      	b.n	800be7e <arm_mat_inverse_f32+0x2a4>
 800be4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800be54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be58:	1d1a      	adds	r2, r3, #4
 800be5a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be62:	6812      	ldr	r2, [r2, #0]
 800be64:	601a      	str	r2, [r3, #0]
 800be66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be6a:	1d1a      	adds	r2, r3, #4
 800be6c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800be70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800be78:	3301      	adds	r3, #1
 800be7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800be82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be84:	429a      	cmp	r2, r3
 800be86:	dbe1      	blt.n	800be4c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800be88:	2301      	movs	r3, #1
 800be8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800be8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800be92:	2b01      	cmp	r3, #1
 800be94:	d009      	beq.n	800beaa <arm_mat_inverse_f32+0x2d0>
 800be96:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800be9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800be9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bea2:	d102      	bne.n	800beaa <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800bea4:	f06f 0304 	mvn.w	r3, #4
 800bea8:	e208      	b.n	800c2bc <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800beaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800beae:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800beb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb6:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	885b      	ldrh	r3, [r3, #2]
 800bec6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bec8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800beca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	633b      	str	r3, [r7, #48]	@ 0x30
 800bed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bed6:	fb03 f202 	mul.w	r2, r3, r2
 800beda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bede:	4413      	add	r3, r2
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bee6:	4413      	add	r3, r2
 800bee8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800beec:	2300      	movs	r3, #0
 800beee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bef2:	e011      	b.n	800bf18 <arm_mat_inverse_f32+0x33e>
 800bef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bef8:	1d1a      	adds	r2, r3, #4
 800befa:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800befe:	ed93 7a00 	vldr	s14, [r3]
 800bf02:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf0a:	edc3 7a00 	vstr	s15, [r3]
 800bf0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf12:	3301      	adds	r3, #1
 800bf14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	dbe8      	blt.n	800bef4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	885b      	ldrh	r3, [r3, #2]
 800bf2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf36:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf38:	fb02 f303 	mul.w	r3, r2, r3
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bf42:	4413      	add	r3, r2
 800bf44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf48:	2300      	movs	r3, #0
 800bf4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf4e:	e011      	b.n	800bf74 <arm_mat_inverse_f32+0x39a>
 800bf50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bf54:	1d1a      	adds	r2, r3, #4
 800bf56:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800bf5a:	ed93 7a00 	vldr	s14, [r3]
 800bf5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf66:	edc3 7a00 	vstr	s15, [r3]
 800bf6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bf6e:	3301      	adds	r3, #1
 800bf70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf74:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800bf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	dbe8      	blt.n	800bf50 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800bf84:	e0ae      	b.n	800c0e4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685a      	ldr	r2, [r3, #4]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	885b      	ldrh	r3, [r3, #2]
 800bf8e:	4619      	mov	r1, r3
 800bf90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bf94:	fb03 f101 	mul.w	r1, r3, r1
 800bf98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf9c:	440b      	add	r3, r1
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800bfa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	885b      	ldrh	r3, [r3, #2]
 800bfc4:	617b      	str	r3, [r7, #20]
 800bfc6:	697a      	ldr	r2, [r7, #20]
 800bfc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	613b      	str	r3, [r7, #16]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bfd6:	fb03 f202 	mul.w	r2, r3, r2
 800bfda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800bfe6:	4413      	add	r3, r2
 800bfe8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bff0:	fb03 f202 	mul.w	r2, r3, r2
 800bff4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bff8:	4413      	add	r3, r2
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c000:	4413      	add	r3, r2
 800c002:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c006:	2300      	movs	r3, #0
 800c008:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c00c:	e01a      	b.n	800c044 <arm_mat_inverse_f32+0x46a>
 800c00e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c012:	1d1a      	adds	r2, r3, #4
 800c014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c018:	ed93 7a00 	vldr	s14, [r3]
 800c01c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c024:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c028:	1d1a      	adds	r2, r3, #4
 800c02a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c02e:	ed93 7a00 	vldr	s14, [r3]
 800c032:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c036:	edc3 7a00 	vstr	s15, [r3]
 800c03a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c03e:	3301      	adds	r3, #1
 800c040:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c044:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	dbdf      	blt.n	800c00e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	885b      	ldrh	r3, [r3, #2]
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	60bb      	str	r3, [r7, #8]
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c06e:	fb02 f303 	mul.w	r3, r2, r3
 800c072:	009b      	lsls	r3, r3, #2
 800c074:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c078:	4413      	add	r3, r2
 800c07a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c082:	fb02 f303 	mul.w	r3, r2, r3
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c08c:	4413      	add	r3, r2
 800c08e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c092:	2300      	movs	r3, #0
 800c094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c098:	e01a      	b.n	800c0d0 <arm_mat_inverse_f32+0x4f6>
 800c09a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c0a4:	ed93 7a00 	vldr	s14, [r3]
 800c0a8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c0ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c0b4:	1d1a      	adds	r2, r3, #4
 800c0b6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c0ba:	ed93 7a00 	vldr	s14, [r3]
 800c0be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0c2:	edc3 7a00 	vstr	s15, [r3]
 800c0c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c0ca:	3301      	adds	r3, #1
 800c0cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	dbdf      	blt.n	800c09a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c0da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c0de:	3301      	adds	r3, #1
 800c0e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0e4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c0e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	f4ff af4b 	bcc.w	800bf86 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c0f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0f8:	e092      	b.n	800c220 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	885b      	ldrh	r3, [r3, #2]
 800c102:	4619      	mov	r1, r3
 800c104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c108:	fb03 f101 	mul.w	r1, r3, r1
 800c10c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c110:	440b      	add	r3, r1
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	4413      	add	r3, r2
 800c116:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	885b      	ldrh	r3, [r3, #2]
 800c134:	627b      	str	r3, [r7, #36]	@ 0x24
 800c136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	623b      	str	r3, [r7, #32]
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c146:	fb03 f202 	mul.w	r2, r3, r2
 800c14a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c14e:	4413      	add	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c154:	4413      	add	r3, r2
 800c156:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c15c:	fb03 f202 	mul.w	r2, r3, r2
 800c160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c164:	4413      	add	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c16a:	4413      	add	r3, r2
 800c16c:	677b      	str	r3, [r7, #116]	@ 0x74
 800c16e:	2300      	movs	r3, #0
 800c170:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c172:	e014      	b.n	800c19e <arm_mat_inverse_f32+0x5c4>
 800c174:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c176:	1d1a      	adds	r2, r3, #4
 800c178:	677a      	str	r2, [r7, #116]	@ 0x74
 800c17a:	ed93 7a00 	vldr	s14, [r3]
 800c17e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c182:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c188:	1d1a      	adds	r2, r3, #4
 800c18a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c18c:	ed93 7a00 	vldr	s14, [r3]
 800c190:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c194:	edc3 7a00 	vstr	s15, [r3]
 800c198:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c19a:	3301      	adds	r3, #1
 800c19c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c19e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1a0:	6a3b      	ldr	r3, [r7, #32]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	dbe6      	blt.n	800c174 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	885b      	ldrh	r3, [r3, #2]
 800c1b6:	61fb      	str	r3, [r7, #28]
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	61bb      	str	r3, [r7, #24]
 800c1bc:	69fb      	ldr	r3, [r7, #28]
 800c1be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1ca:	4413      	add	r3, r2
 800c1cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1ce:	69fb      	ldr	r3, [r7, #28]
 800c1d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1d2:	fb02 f303 	mul.w	r3, r2, r3
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c1da:	4413      	add	r3, r2
 800c1dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1de:	2300      	movs	r3, #0
 800c1e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c1e2:	e014      	b.n	800c20e <arm_mat_inverse_f32+0x634>
 800c1e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c1e6:	1d1a      	adds	r2, r3, #4
 800c1e8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c1ea:	ed93 7a00 	vldr	s14, [r3]
 800c1ee:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c1f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c1f8:	1d1a      	adds	r2, r3, #4
 800c1fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c1fc:	ed93 7a00 	vldr	s14, [r3]
 800c200:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c204:	edc3 7a00 	vstr	s15, [r3]
 800c208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c20a:	3301      	adds	r3, #1
 800c20c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c20e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	429a      	cmp	r2, r3
 800c214:	dbe6      	blt.n	800c1e4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c21a:	3301      	adds	r3, #1
 800c21c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c220:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c226:	429a      	cmp	r2, r3
 800c228:	f4ff af67 	bcc.w	800c0fa <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c22c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c230:	3301      	adds	r3, #1
 800c232:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c236:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c23a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c23c:	429a      	cmp	r2, r3
 800c23e:	f4ff ad32 	bcc.w	800bca6 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c242:	2300      	movs	r3, #0
 800c244:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c248:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d033      	beq.n	800c2b8 <arm_mat_inverse_f32+0x6de>
 800c250:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c254:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25c:	d12c      	bne.n	800c2b8 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c264:	2300      	movs	r3, #0
 800c266:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c26a:	e010      	b.n	800c28e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c26c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c274:	4413      	add	r3, r2
 800c276:	edd3 7a00 	vldr	s15, [r3]
 800c27a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c282:	d10d      	bne.n	800c2a0 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c288:	3301      	adds	r3, #1
 800c28a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c28e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c290:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c292:	fb02 f303 	mul.w	r3, r2, r3
 800c296:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d3e6      	bcc.n	800c26c <arm_mat_inverse_f32+0x692>
 800c29e:	e000      	b.n	800c2a2 <arm_mat_inverse_f32+0x6c8>
            break;
 800c2a0:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c2a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2a6:	fb02 f303 	mul.w	r3, r2, r3
 800c2aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d102      	bne.n	800c2b8 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c2b2:	23fb      	movs	r3, #251	@ 0xfb
 800c2b4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c2b8:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	37ec      	adds	r7, #236	@ 0xec
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b093      	sub	sp, #76	@ 0x4c
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	685b      	ldr	r3, [r3, #4]
 800c2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	885b      	ldrh	r3, [r3, #2]
 800c2fc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	885b      	ldrh	r3, [r3, #2]
 800c302:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c304:	2300      	movs	r3, #0
 800c306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c308:	8b7b      	ldrh	r3, [r7, #26]
 800c30a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	69fa      	ldr	r2, [r7, #28]
 800c312:	4413      	add	r3, r2
 800c314:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c316:	8b3b      	ldrh	r3, [r7, #24]
 800c318:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c320:	f04f 0300 	mov.w	r3, #0
 800c324:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c328:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c32a:	8afb      	ldrh	r3, [r7, #22]
 800c32c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c32e:	e017      	b.n	800c360 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c332:	1d1a      	adds	r2, r3, #4
 800c334:	647a      	str	r2, [r7, #68]	@ 0x44
 800c336:	ed93 7a00 	vldr	s14, [r3]
 800c33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c33c:	edd3 7a00 	vldr	s15, [r3]
 800c340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c344:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c34c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c350:	8b3b      	ldrh	r3, [r7, #24]
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c356:	4413      	add	r3, r2
 800c358:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c35c:	3b01      	subs	r3, #1
 800c35e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1e4      	bne.n	800c330 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c36c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c36e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c372:	3b01      	subs	r3, #1
 800c374:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c376:	8b3a      	ldrh	r2, [r7, #24]
 800c378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	6a3a      	ldr	r2, [r7, #32]
 800c380:	4413      	add	r3, r2
 800c382:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1ca      	bne.n	800c320 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c38a:	8b3b      	ldrh	r3, [r7, #24]
 800c38c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38e:	4413      	add	r3, r2
 800c390:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c392:	8afb      	ldrh	r3, [r7, #22]
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c398:	4413      	add	r3, r2
 800c39a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1b1      	bne.n	800c30c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c3ac:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	374c      	adds	r7, #76	@ 0x4c
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b08b      	sub	sp, #44	@ 0x2c
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	60f8      	str	r0, [r7, #12]
 800c3c4:	ed87 0a02 	vstr	s0, [r7, #8]
 800c3c8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	461a      	mov	r2, r3
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	885b      	ldrh	r3, [r3, #2]
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
 800c3e4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c3ea:	e010      	b.n	800c40e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ee:	1d1a      	adds	r2, r3, #4
 800c3f0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3f2:	ed93 7a00 	vldr	s14, [r3]
 800c3f6:	6a3b      	ldr	r3, [r7, #32]
 800c3f8:	1d1a      	adds	r2, r3, #4
 800c3fa:	623a      	str	r2, [r7, #32]
 800c3fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c404:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c408:	69fb      	ldr	r3, [r7, #28]
 800c40a:	3b01      	subs	r3, #1
 800c40c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800c40e:	69fb      	ldr	r3, [r7, #28]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1eb      	bne.n	800c3ec <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c414:	2300      	movs	r3, #0
 800c416:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800c418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	372c      	adds	r7, #44	@ 0x2c
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c428:	b480      	push	{r7}
 800c42a:	b08b      	sub	sp, #44	@ 0x2c
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	461a      	mov	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	885b      	ldrh	r3, [r3, #2]
 800c450:	fb02 f303 	mul.w	r3, r2, r3
 800c454:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c45a:	e013      	b.n	800c484 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45e:	1d1a      	adds	r2, r3, #4
 800c460:	627a      	str	r2, [r7, #36]	@ 0x24
 800c462:	ed93 7a00 	vldr	s14, [r3]
 800c466:	6a3b      	ldr	r3, [r7, #32]
 800c468:	1d1a      	adds	r2, r3, #4
 800c46a:	623a      	str	r2, [r7, #32]
 800c46c:	edd3 7a00 	vldr	s15, [r3]
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	1d1a      	adds	r2, r3, #4
 800c474:	61fa      	str	r2, [r7, #28]
 800c476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c47a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	3b01      	subs	r3, #1
 800c482:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e8      	bne.n	800c45c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c48a:	2300      	movs	r3, #0
 800c48c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c48e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c492:	4618      	mov	r0, r3
 800c494:	372c      	adds	r7, #44	@ 0x2c
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b08b      	sub	sp, #44	@ 0x2c
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
 800c4a6:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	685b      	ldr	r3, [r3, #4]
 800c4ac:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	885b      	ldrh	r3, [r3, #2]
 800c4be:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c4c0:	89fb      	ldrh	r3, [r7, #14]
 800c4c2:	61bb      	str	r3, [r7, #24]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c4d2:	89bb      	ldrh	r3, [r7, #12]
 800c4d4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c4d6:	e00d      	b.n	800c4f4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4da:	1d1a      	adds	r2, r3, #4
 800c4dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c4e4:	89fb      	ldrh	r3, [r7, #14]
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	6a3a      	ldr	r2, [r7, #32]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	3b01      	subs	r3, #1
 800c4f2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1ee      	bne.n	800c4d8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	3b01      	subs	r3, #1
 800c504:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d1dd      	bne.n	800c4c8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c50c:	2300      	movs	r3, #0
 800c50e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c510:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c514:	4618      	mov	r0, r3
 800c516:	372c      	adds	r7, #44	@ 0x2c
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <malloc>:
 800c520:	4b02      	ldr	r3, [pc, #8]	@ (800c52c <malloc+0xc>)
 800c522:	4601      	mov	r1, r0
 800c524:	6818      	ldr	r0, [r3, #0]
 800c526:	f000 b825 	b.w	800c574 <_malloc_r>
 800c52a:	bf00      	nop
 800c52c:	20000164 	.word	0x20000164

0800c530 <sbrk_aligned>:
 800c530:	b570      	push	{r4, r5, r6, lr}
 800c532:	4e0f      	ldr	r6, [pc, #60]	@ (800c570 <sbrk_aligned+0x40>)
 800c534:	460c      	mov	r4, r1
 800c536:	6831      	ldr	r1, [r6, #0]
 800c538:	4605      	mov	r5, r0
 800c53a:	b911      	cbnz	r1, 800c542 <sbrk_aligned+0x12>
 800c53c:	f000 f8ae 	bl	800c69c <_sbrk_r>
 800c540:	6030      	str	r0, [r6, #0]
 800c542:	4621      	mov	r1, r4
 800c544:	4628      	mov	r0, r5
 800c546:	f000 f8a9 	bl	800c69c <_sbrk_r>
 800c54a:	1c43      	adds	r3, r0, #1
 800c54c:	d103      	bne.n	800c556 <sbrk_aligned+0x26>
 800c54e:	f04f 34ff 	mov.w	r4, #4294967295
 800c552:	4620      	mov	r0, r4
 800c554:	bd70      	pop	{r4, r5, r6, pc}
 800c556:	1cc4      	adds	r4, r0, #3
 800c558:	f024 0403 	bic.w	r4, r4, #3
 800c55c:	42a0      	cmp	r0, r4
 800c55e:	d0f8      	beq.n	800c552 <sbrk_aligned+0x22>
 800c560:	1a21      	subs	r1, r4, r0
 800c562:	4628      	mov	r0, r5
 800c564:	f000 f89a 	bl	800c69c <_sbrk_r>
 800c568:	3001      	adds	r0, #1
 800c56a:	d1f2      	bne.n	800c552 <sbrk_aligned+0x22>
 800c56c:	e7ef      	b.n	800c54e <sbrk_aligned+0x1e>
 800c56e:	bf00      	nop
 800c570:	20001b70 	.word	0x20001b70

0800c574 <_malloc_r>:
 800c574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c578:	1ccd      	adds	r5, r1, #3
 800c57a:	f025 0503 	bic.w	r5, r5, #3
 800c57e:	3508      	adds	r5, #8
 800c580:	2d0c      	cmp	r5, #12
 800c582:	bf38      	it	cc
 800c584:	250c      	movcc	r5, #12
 800c586:	2d00      	cmp	r5, #0
 800c588:	4606      	mov	r6, r0
 800c58a:	db01      	blt.n	800c590 <_malloc_r+0x1c>
 800c58c:	42a9      	cmp	r1, r5
 800c58e:	d904      	bls.n	800c59a <_malloc_r+0x26>
 800c590:	230c      	movs	r3, #12
 800c592:	6033      	str	r3, [r6, #0]
 800c594:	2000      	movs	r0, #0
 800c596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c59a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c670 <_malloc_r+0xfc>
 800c59e:	f000 f869 	bl	800c674 <__malloc_lock>
 800c5a2:	f8d8 3000 	ldr.w	r3, [r8]
 800c5a6:	461c      	mov	r4, r3
 800c5a8:	bb44      	cbnz	r4, 800c5fc <_malloc_r+0x88>
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f7ff ffbf 	bl	800c530 <sbrk_aligned>
 800c5b2:	1c43      	adds	r3, r0, #1
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	d158      	bne.n	800c66a <_malloc_r+0xf6>
 800c5b8:	f8d8 4000 	ldr.w	r4, [r8]
 800c5bc:	4627      	mov	r7, r4
 800c5be:	2f00      	cmp	r7, #0
 800c5c0:	d143      	bne.n	800c64a <_malloc_r+0xd6>
 800c5c2:	2c00      	cmp	r4, #0
 800c5c4:	d04b      	beq.n	800c65e <_malloc_r+0xea>
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	4630      	mov	r0, r6
 800c5cc:	eb04 0903 	add.w	r9, r4, r3
 800c5d0:	f000 f864 	bl	800c69c <_sbrk_r>
 800c5d4:	4581      	cmp	r9, r0
 800c5d6:	d142      	bne.n	800c65e <_malloc_r+0xea>
 800c5d8:	6821      	ldr	r1, [r4, #0]
 800c5da:	1a6d      	subs	r5, r5, r1
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4630      	mov	r0, r6
 800c5e0:	f7ff ffa6 	bl	800c530 <sbrk_aligned>
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d03a      	beq.n	800c65e <_malloc_r+0xea>
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	442b      	add	r3, r5
 800c5ec:	6023      	str	r3, [r4, #0]
 800c5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	bb62      	cbnz	r2, 800c650 <_malloc_r+0xdc>
 800c5f6:	f8c8 7000 	str.w	r7, [r8]
 800c5fa:	e00f      	b.n	800c61c <_malloc_r+0xa8>
 800c5fc:	6822      	ldr	r2, [r4, #0]
 800c5fe:	1b52      	subs	r2, r2, r5
 800c600:	d420      	bmi.n	800c644 <_malloc_r+0xd0>
 800c602:	2a0b      	cmp	r2, #11
 800c604:	d917      	bls.n	800c636 <_malloc_r+0xc2>
 800c606:	1961      	adds	r1, r4, r5
 800c608:	42a3      	cmp	r3, r4
 800c60a:	6025      	str	r5, [r4, #0]
 800c60c:	bf18      	it	ne
 800c60e:	6059      	strne	r1, [r3, #4]
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	bf08      	it	eq
 800c614:	f8c8 1000 	streq.w	r1, [r8]
 800c618:	5162      	str	r2, [r4, r5]
 800c61a:	604b      	str	r3, [r1, #4]
 800c61c:	4630      	mov	r0, r6
 800c61e:	f000 f82f 	bl	800c680 <__malloc_unlock>
 800c622:	f104 000b 	add.w	r0, r4, #11
 800c626:	1d23      	adds	r3, r4, #4
 800c628:	f020 0007 	bic.w	r0, r0, #7
 800c62c:	1ac2      	subs	r2, r0, r3
 800c62e:	bf1c      	itt	ne
 800c630:	1a1b      	subne	r3, r3, r0
 800c632:	50a3      	strne	r3, [r4, r2]
 800c634:	e7af      	b.n	800c596 <_malloc_r+0x22>
 800c636:	6862      	ldr	r2, [r4, #4]
 800c638:	42a3      	cmp	r3, r4
 800c63a:	bf0c      	ite	eq
 800c63c:	f8c8 2000 	streq.w	r2, [r8]
 800c640:	605a      	strne	r2, [r3, #4]
 800c642:	e7eb      	b.n	800c61c <_malloc_r+0xa8>
 800c644:	4623      	mov	r3, r4
 800c646:	6864      	ldr	r4, [r4, #4]
 800c648:	e7ae      	b.n	800c5a8 <_malloc_r+0x34>
 800c64a:	463c      	mov	r4, r7
 800c64c:	687f      	ldr	r7, [r7, #4]
 800c64e:	e7b6      	b.n	800c5be <_malloc_r+0x4a>
 800c650:	461a      	mov	r2, r3
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	42a3      	cmp	r3, r4
 800c656:	d1fb      	bne.n	800c650 <_malloc_r+0xdc>
 800c658:	2300      	movs	r3, #0
 800c65a:	6053      	str	r3, [r2, #4]
 800c65c:	e7de      	b.n	800c61c <_malloc_r+0xa8>
 800c65e:	230c      	movs	r3, #12
 800c660:	6033      	str	r3, [r6, #0]
 800c662:	4630      	mov	r0, r6
 800c664:	f000 f80c 	bl	800c680 <__malloc_unlock>
 800c668:	e794      	b.n	800c594 <_malloc_r+0x20>
 800c66a:	6005      	str	r5, [r0, #0]
 800c66c:	e7d6      	b.n	800c61c <_malloc_r+0xa8>
 800c66e:	bf00      	nop
 800c670:	20001b74 	.word	0x20001b74

0800c674 <__malloc_lock>:
 800c674:	4801      	ldr	r0, [pc, #4]	@ (800c67c <__malloc_lock+0x8>)
 800c676:	f000 b84b 	b.w	800c710 <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	20001cb4 	.word	0x20001cb4

0800c680 <__malloc_unlock>:
 800c680:	4801      	ldr	r0, [pc, #4]	@ (800c688 <__malloc_unlock+0x8>)
 800c682:	f000 b846 	b.w	800c712 <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	20001cb4 	.word	0x20001cb4

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <_sbrk_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4d06      	ldr	r5, [pc, #24]	@ (800c6b8 <_sbrk_r+0x1c>)
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	4608      	mov	r0, r1
 800c6a6:	602b      	str	r3, [r5, #0]
 800c6a8:	f7f7 f9b4 	bl	8003a14 <_sbrk>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_sbrk_r+0x1a>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_sbrk_r+0x1a>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	20001cb0 	.word	0x20001cb0

0800c6bc <__errno>:
 800c6bc:	4b01      	ldr	r3, [pc, #4]	@ (800c6c4 <__errno+0x8>)
 800c6be:	6818      	ldr	r0, [r3, #0]
 800c6c0:	4770      	bx	lr
 800c6c2:	bf00      	nop
 800c6c4:	20000164 	.word	0x20000164

0800c6c8 <__libc_init_array>:
 800c6c8:	b570      	push	{r4, r5, r6, lr}
 800c6ca:	4d0d      	ldr	r5, [pc, #52]	@ (800c700 <__libc_init_array+0x38>)
 800c6cc:	4c0d      	ldr	r4, [pc, #52]	@ (800c704 <__libc_init_array+0x3c>)
 800c6ce:	1b64      	subs	r4, r4, r5
 800c6d0:	10a4      	asrs	r4, r4, #2
 800c6d2:	2600      	movs	r6, #0
 800c6d4:	42a6      	cmp	r6, r4
 800c6d6:	d109      	bne.n	800c6ec <__libc_init_array+0x24>
 800c6d8:	4d0b      	ldr	r5, [pc, #44]	@ (800c708 <__libc_init_array+0x40>)
 800c6da:	4c0c      	ldr	r4, [pc, #48]	@ (800c70c <__libc_init_array+0x44>)
 800c6dc:	f001 f98a 	bl	800d9f4 <_init>
 800c6e0:	1b64      	subs	r4, r4, r5
 800c6e2:	10a4      	asrs	r4, r4, #2
 800c6e4:	2600      	movs	r6, #0
 800c6e6:	42a6      	cmp	r6, r4
 800c6e8:	d105      	bne.n	800c6f6 <__libc_init_array+0x2e>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6f0:	4798      	blx	r3
 800c6f2:	3601      	adds	r6, #1
 800c6f4:	e7ee      	b.n	800c6d4 <__libc_init_array+0xc>
 800c6f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6fa:	4798      	blx	r3
 800c6fc:	3601      	adds	r6, #1
 800c6fe:	e7f2      	b.n	800c6e6 <__libc_init_array+0x1e>
 800c700:	0800e688 	.word	0x0800e688
 800c704:	0800e688 	.word	0x0800e688
 800c708:	0800e688 	.word	0x0800e688
 800c70c:	0800e68c 	.word	0x0800e68c

0800c710 <__retarget_lock_acquire_recursive>:
 800c710:	4770      	bx	lr

0800c712 <__retarget_lock_release_recursive>:
 800c712:	4770      	bx	lr

0800c714 <fmodf>:
 800c714:	b508      	push	{r3, lr}
 800c716:	ed2d 8b02 	vpush	{d8}
 800c71a:	eef0 8a40 	vmov.f32	s17, s0
 800c71e:	eeb0 8a60 	vmov.f32	s16, s1
 800c722:	f000 f9cd 	bl	800cac0 <__ieee754_fmodf>
 800c726:	eef4 8a48 	vcmp.f32	s17, s16
 800c72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72e:	d60c      	bvs.n	800c74a <fmodf+0x36>
 800c730:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c750 <fmodf+0x3c>
 800c734:	eeb4 8a68 	vcmp.f32	s16, s17
 800c738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73c:	d105      	bne.n	800c74a <fmodf+0x36>
 800c73e:	f7ff ffbd 	bl	800c6bc <__errno>
 800c742:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c746:	2321      	movs	r3, #33	@ 0x21
 800c748:	6003      	str	r3, [r0, #0]
 800c74a:	ecbd 8b02 	vpop	{d8}
 800c74e:	bd08      	pop	{r3, pc}
 800c750:	00000000 	.word	0x00000000

0800c754 <powf>:
 800c754:	b508      	push	{r3, lr}
 800c756:	ed2d 8b04 	vpush	{d8-d9}
 800c75a:	eeb0 8a60 	vmov.f32	s16, s1
 800c75e:	eeb0 9a40 	vmov.f32	s18, s0
 800c762:	f000 fa2f 	bl	800cbc4 <__ieee754_powf>
 800c766:	eeb4 8a48 	vcmp.f32	s16, s16
 800c76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c76e:	eef0 8a40 	vmov.f32	s17, s0
 800c772:	d63e      	bvs.n	800c7f2 <powf+0x9e>
 800c774:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77c:	d112      	bne.n	800c7a4 <powf+0x50>
 800c77e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c786:	d039      	beq.n	800c7fc <powf+0xa8>
 800c788:	eeb0 0a48 	vmov.f32	s0, s16
 800c78c:	f000 f8c4 	bl	800c918 <finitef>
 800c790:	b378      	cbz	r0, 800c7f2 <powf+0x9e>
 800c792:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c79a:	d52a      	bpl.n	800c7f2 <powf+0x9e>
 800c79c:	f7ff ff8e 	bl	800c6bc <__errno>
 800c7a0:	2322      	movs	r3, #34	@ 0x22
 800c7a2:	e014      	b.n	800c7ce <powf+0x7a>
 800c7a4:	f000 f8b8 	bl	800c918 <finitef>
 800c7a8:	b998      	cbnz	r0, 800c7d2 <powf+0x7e>
 800c7aa:	eeb0 0a49 	vmov.f32	s0, s18
 800c7ae:	f000 f8b3 	bl	800c918 <finitef>
 800c7b2:	b170      	cbz	r0, 800c7d2 <powf+0x7e>
 800c7b4:	eeb0 0a48 	vmov.f32	s0, s16
 800c7b8:	f000 f8ae 	bl	800c918 <finitef>
 800c7bc:	b148      	cbz	r0, 800c7d2 <powf+0x7e>
 800c7be:	eef4 8a68 	vcmp.f32	s17, s17
 800c7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c6:	d7e9      	bvc.n	800c79c <powf+0x48>
 800c7c8:	f7ff ff78 	bl	800c6bc <__errno>
 800c7cc:	2321      	movs	r3, #33	@ 0x21
 800c7ce:	6003      	str	r3, [r0, #0]
 800c7d0:	e00f      	b.n	800c7f2 <powf+0x9e>
 800c7d2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c7d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7da:	d10a      	bne.n	800c7f2 <powf+0x9e>
 800c7dc:	eeb0 0a49 	vmov.f32	s0, s18
 800c7e0:	f000 f89a 	bl	800c918 <finitef>
 800c7e4:	b128      	cbz	r0, 800c7f2 <powf+0x9e>
 800c7e6:	eeb0 0a48 	vmov.f32	s0, s16
 800c7ea:	f000 f895 	bl	800c918 <finitef>
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d1d4      	bne.n	800c79c <powf+0x48>
 800c7f2:	eeb0 0a68 	vmov.f32	s0, s17
 800c7f6:	ecbd 8b04 	vpop	{d8-d9}
 800c7fa:	bd08      	pop	{r3, pc}
 800c7fc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800c800:	e7f7      	b.n	800c7f2 <powf+0x9e>
	...

0800c804 <cosf>:
 800c804:	ee10 3a10 	vmov	r3, s0
 800c808:	b507      	push	{r0, r1, r2, lr}
 800c80a:	4a1e      	ldr	r2, [pc, #120]	@ (800c884 <cosf+0x80>)
 800c80c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c810:	4293      	cmp	r3, r2
 800c812:	d806      	bhi.n	800c822 <cosf+0x1e>
 800c814:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c888 <cosf+0x84>
 800c818:	b003      	add	sp, #12
 800c81a:	f85d eb04 	ldr.w	lr, [sp], #4
 800c81e:	f000 b8af 	b.w	800c980 <__kernel_cosf>
 800c822:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c826:	d304      	bcc.n	800c832 <cosf+0x2e>
 800c828:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c82c:	b003      	add	sp, #12
 800c82e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c832:	4668      	mov	r0, sp
 800c834:	f000 fc94 	bl	800d160 <__ieee754_rem_pio2f>
 800c838:	f000 0003 	and.w	r0, r0, #3
 800c83c:	2801      	cmp	r0, #1
 800c83e:	d009      	beq.n	800c854 <cosf+0x50>
 800c840:	2802      	cmp	r0, #2
 800c842:	d010      	beq.n	800c866 <cosf+0x62>
 800c844:	b9b0      	cbnz	r0, 800c874 <cosf+0x70>
 800c846:	eddd 0a01 	vldr	s1, [sp, #4]
 800c84a:	ed9d 0a00 	vldr	s0, [sp]
 800c84e:	f000 f897 	bl	800c980 <__kernel_cosf>
 800c852:	e7eb      	b.n	800c82c <cosf+0x28>
 800c854:	eddd 0a01 	vldr	s1, [sp, #4]
 800c858:	ed9d 0a00 	vldr	s0, [sp]
 800c85c:	f000 f8e8 	bl	800ca30 <__kernel_sinf>
 800c860:	eeb1 0a40 	vneg.f32	s0, s0
 800c864:	e7e2      	b.n	800c82c <cosf+0x28>
 800c866:	eddd 0a01 	vldr	s1, [sp, #4]
 800c86a:	ed9d 0a00 	vldr	s0, [sp]
 800c86e:	f000 f887 	bl	800c980 <__kernel_cosf>
 800c872:	e7f5      	b.n	800c860 <cosf+0x5c>
 800c874:	eddd 0a01 	vldr	s1, [sp, #4]
 800c878:	ed9d 0a00 	vldr	s0, [sp]
 800c87c:	2001      	movs	r0, #1
 800c87e:	f000 f8d7 	bl	800ca30 <__kernel_sinf>
 800c882:	e7d3      	b.n	800c82c <cosf+0x28>
 800c884:	3f490fd8 	.word	0x3f490fd8
 800c888:	00000000 	.word	0x00000000

0800c88c <sinf>:
 800c88c:	ee10 3a10 	vmov	r3, s0
 800c890:	b507      	push	{r0, r1, r2, lr}
 800c892:	4a1f      	ldr	r2, [pc, #124]	@ (800c910 <sinf+0x84>)
 800c894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c898:	4293      	cmp	r3, r2
 800c89a:	d807      	bhi.n	800c8ac <sinf+0x20>
 800c89c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c914 <sinf+0x88>
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	b003      	add	sp, #12
 800c8a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a8:	f000 b8c2 	b.w	800ca30 <__kernel_sinf>
 800c8ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8b0:	d304      	bcc.n	800c8bc <sinf+0x30>
 800c8b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c8b6:	b003      	add	sp, #12
 800c8b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8bc:	4668      	mov	r0, sp
 800c8be:	f000 fc4f 	bl	800d160 <__ieee754_rem_pio2f>
 800c8c2:	f000 0003 	and.w	r0, r0, #3
 800c8c6:	2801      	cmp	r0, #1
 800c8c8:	d00a      	beq.n	800c8e0 <sinf+0x54>
 800c8ca:	2802      	cmp	r0, #2
 800c8cc:	d00f      	beq.n	800c8ee <sinf+0x62>
 800c8ce:	b9c0      	cbnz	r0, 800c902 <sinf+0x76>
 800c8d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8d4:	ed9d 0a00 	vldr	s0, [sp]
 800c8d8:	2001      	movs	r0, #1
 800c8da:	f000 f8a9 	bl	800ca30 <__kernel_sinf>
 800c8de:	e7ea      	b.n	800c8b6 <sinf+0x2a>
 800c8e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8e4:	ed9d 0a00 	vldr	s0, [sp]
 800c8e8:	f000 f84a 	bl	800c980 <__kernel_cosf>
 800c8ec:	e7e3      	b.n	800c8b6 <sinf+0x2a>
 800c8ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8f2:	ed9d 0a00 	vldr	s0, [sp]
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	f000 f89a 	bl	800ca30 <__kernel_sinf>
 800c8fc:	eeb1 0a40 	vneg.f32	s0, s0
 800c900:	e7d9      	b.n	800c8b6 <sinf+0x2a>
 800c902:	eddd 0a01 	vldr	s1, [sp, #4]
 800c906:	ed9d 0a00 	vldr	s0, [sp]
 800c90a:	f000 f839 	bl	800c980 <__kernel_cosf>
 800c90e:	e7f5      	b.n	800c8fc <sinf+0x70>
 800c910:	3f490fd8 	.word	0x3f490fd8
 800c914:	00000000 	.word	0x00000000

0800c918 <finitef>:
 800c918:	ee10 3a10 	vmov	r3, s0
 800c91c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c920:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c924:	bfac      	ite	ge
 800c926:	2000      	movge	r0, #0
 800c928:	2001      	movlt	r0, #1
 800c92a:	4770      	bx	lr

0800c92c <with_errnof>:
 800c92c:	b510      	push	{r4, lr}
 800c92e:	ed2d 8b02 	vpush	{d8}
 800c932:	eeb0 8a40 	vmov.f32	s16, s0
 800c936:	4604      	mov	r4, r0
 800c938:	f7ff fec0 	bl	800c6bc <__errno>
 800c93c:	eeb0 0a48 	vmov.f32	s0, s16
 800c940:	ecbd 8b02 	vpop	{d8}
 800c944:	6004      	str	r4, [r0, #0]
 800c946:	bd10      	pop	{r4, pc}

0800c948 <xflowf>:
 800c948:	b130      	cbz	r0, 800c958 <xflowf+0x10>
 800c94a:	eef1 7a40 	vneg.f32	s15, s0
 800c94e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c952:	2022      	movs	r0, #34	@ 0x22
 800c954:	f7ff bfea 	b.w	800c92c <with_errnof>
 800c958:	eef0 7a40 	vmov.f32	s15, s0
 800c95c:	e7f7      	b.n	800c94e <xflowf+0x6>
	...

0800c960 <__math_uflowf>:
 800c960:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c968 <__math_uflowf+0x8>
 800c964:	f7ff bff0 	b.w	800c948 <xflowf>
 800c968:	10000000 	.word	0x10000000

0800c96c <__math_oflowf>:
 800c96c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c974 <__math_oflowf+0x8>
 800c970:	f7ff bfea 	b.w	800c948 <xflowf>
 800c974:	70000000 	.word	0x70000000

0800c978 <__ieee754_sqrtf>:
 800c978:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c97c:	4770      	bx	lr
	...

0800c980 <__kernel_cosf>:
 800c980:	ee10 3a10 	vmov	r3, s0
 800c984:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c988:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800c98c:	eef0 6a40 	vmov.f32	s13, s0
 800c990:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c994:	d204      	bcs.n	800c9a0 <__kernel_cosf+0x20>
 800c996:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800c99a:	ee17 2a90 	vmov	r2, s15
 800c99e:	b342      	cbz	r2, 800c9f2 <__kernel_cosf+0x72>
 800c9a0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c9a4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ca10 <__kernel_cosf+0x90>
 800c9a8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ca14 <__kernel_cosf+0x94>
 800c9ac:	4a1a      	ldr	r2, [pc, #104]	@ (800ca18 <__kernel_cosf+0x98>)
 800c9ae:	eea7 6a27 	vfma.f32	s12, s14, s15
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ca1c <__kernel_cosf+0x9c>
 800c9b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c9bc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ca20 <__kernel_cosf+0xa0>
 800c9c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c9c4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ca24 <__kernel_cosf+0xa4>
 800c9c8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c9cc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ca28 <__kernel_cosf+0xa8>
 800c9d0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800c9d4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800c9d8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c9dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c9e0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800c9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e8:	d804      	bhi.n	800c9f4 <__kernel_cosf+0x74>
 800c9ea:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800c9ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c9f2:	4770      	bx	lr
 800c9f4:	4a0d      	ldr	r2, [pc, #52]	@ (800ca2c <__kernel_cosf+0xac>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	bf9a      	itte	ls
 800c9fa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800c9fe:	ee07 3a10 	vmovls	s14, r3
 800ca02:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ca06:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca0e:	e7ec      	b.n	800c9ea <__kernel_cosf+0x6a>
 800ca10:	ad47d74e 	.word	0xad47d74e
 800ca14:	310f74f6 	.word	0x310f74f6
 800ca18:	3e999999 	.word	0x3e999999
 800ca1c:	b493f27c 	.word	0xb493f27c
 800ca20:	37d00d01 	.word	0x37d00d01
 800ca24:	bab60b61 	.word	0xbab60b61
 800ca28:	3d2aaaab 	.word	0x3d2aaaab
 800ca2c:	3f480000 	.word	0x3f480000

0800ca30 <__kernel_sinf>:
 800ca30:	ee10 3a10 	vmov	r3, s0
 800ca34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca38:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ca3c:	d204      	bcs.n	800ca48 <__kernel_sinf+0x18>
 800ca3e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ca42:	ee17 3a90 	vmov	r3, s15
 800ca46:	b35b      	cbz	r3, 800caa0 <__kernel_sinf+0x70>
 800ca48:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ca4c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800caa4 <__kernel_sinf+0x74>
 800ca50:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800caa8 <__kernel_sinf+0x78>
 800ca54:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca58:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800caac <__kernel_sinf+0x7c>
 800ca5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca60:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800cab0 <__kernel_sinf+0x80>
 800ca64:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca68:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800cab4 <__kernel_sinf+0x84>
 800ca6c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ca70:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca74:	b930      	cbnz	r0, 800ca84 <__kernel_sinf+0x54>
 800ca76:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800cab8 <__kernel_sinf+0x88>
 800ca7a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca7e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ca82:	4770      	bx	lr
 800ca84:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ca88:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ca8c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ca90:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ca94:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800cabc <__kernel_sinf+0x8c>
 800ca98:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ca9c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	2f2ec9d3 	.word	0x2f2ec9d3
 800caa8:	b2d72f34 	.word	0xb2d72f34
 800caac:	3638ef1b 	.word	0x3638ef1b
 800cab0:	b9500d01 	.word	0xb9500d01
 800cab4:	3c088889 	.word	0x3c088889
 800cab8:	be2aaaab 	.word	0xbe2aaaab
 800cabc:	3e2aaaab 	.word	0x3e2aaaab

0800cac0 <__ieee754_fmodf>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	ee10 6a90 	vmov	r6, s1
 800cac6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800caca:	1e5a      	subs	r2, r3, #1
 800cacc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cad0:	d206      	bcs.n	800cae0 <__ieee754_fmodf+0x20>
 800cad2:	ee10 4a10 	vmov	r4, s0
 800cad6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800cada:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cade:	d304      	bcc.n	800caea <__ieee754_fmodf+0x2a>
 800cae0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800cae4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800cae8:	bd70      	pop	{r4, r5, r6, pc}
 800caea:	4299      	cmp	r1, r3
 800caec:	dbfc      	blt.n	800cae8 <__ieee754_fmodf+0x28>
 800caee:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800caf2:	d105      	bne.n	800cb00 <__ieee754_fmodf+0x40>
 800caf4:	4b32      	ldr	r3, [pc, #200]	@ (800cbc0 <__ieee754_fmodf+0x100>)
 800caf6:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800cafa:	ed93 0a00 	vldr	s0, [r3]
 800cafe:	e7f3      	b.n	800cae8 <__ieee754_fmodf+0x28>
 800cb00:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800cb04:	d146      	bne.n	800cb94 <__ieee754_fmodf+0xd4>
 800cb06:	020a      	lsls	r2, r1, #8
 800cb08:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800cb0c:	2a00      	cmp	r2, #0
 800cb0e:	dc3e      	bgt.n	800cb8e <__ieee754_fmodf+0xce>
 800cb10:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800cb14:	bf01      	itttt	eq
 800cb16:	021a      	lsleq	r2, r3, #8
 800cb18:	fab2 f282 	clzeq	r2, r2
 800cb1c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800cb20:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800cb24:	bf16      	itet	ne
 800cb26:	15da      	asrne	r2, r3, #23
 800cb28:	3282      	addeq	r2, #130	@ 0x82
 800cb2a:	3a7f      	subne	r2, #127	@ 0x7f
 800cb2c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800cb30:	bfbb      	ittet	lt
 800cb32:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800cb36:	1a24      	sublt	r4, r4, r0
 800cb38:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800cb3c:	40a1      	lsllt	r1, r4
 800cb3e:	bfa8      	it	ge
 800cb40:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800cb44:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cb48:	bfb5      	itete	lt
 800cb4a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800cb4e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800cb52:	1aa4      	sublt	r4, r4, r2
 800cb54:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800cb58:	bfb8      	it	lt
 800cb5a:	fa03 f404 	lsllt.w	r4, r3, r4
 800cb5e:	1a80      	subs	r0, r0, r2
 800cb60:	1b0b      	subs	r3, r1, r4
 800cb62:	b9d0      	cbnz	r0, 800cb9a <__ieee754_fmodf+0xda>
 800cb64:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800cb68:	bf28      	it	cs
 800cb6a:	460b      	movcs	r3, r1
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d0c1      	beq.n	800caf4 <__ieee754_fmodf+0x34>
 800cb70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cb74:	db19      	blt.n	800cbaa <__ieee754_fmodf+0xea>
 800cb76:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cb7a:	db19      	blt.n	800cbb0 <__ieee754_fmodf+0xf0>
 800cb7c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800cb80:	327f      	adds	r2, #127	@ 0x7f
 800cb82:	432b      	orrs	r3, r5
 800cb84:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cb88:	ee00 3a10 	vmov	s0, r3
 800cb8c:	e7ac      	b.n	800cae8 <__ieee754_fmodf+0x28>
 800cb8e:	3801      	subs	r0, #1
 800cb90:	0052      	lsls	r2, r2, #1
 800cb92:	e7bb      	b.n	800cb0c <__ieee754_fmodf+0x4c>
 800cb94:	15c8      	asrs	r0, r1, #23
 800cb96:	387f      	subs	r0, #127	@ 0x7f
 800cb98:	e7ba      	b.n	800cb10 <__ieee754_fmodf+0x50>
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da02      	bge.n	800cba4 <__ieee754_fmodf+0xe4>
 800cb9e:	0049      	lsls	r1, r1, #1
 800cba0:	3801      	subs	r0, #1
 800cba2:	e7dd      	b.n	800cb60 <__ieee754_fmodf+0xa0>
 800cba4:	d0a6      	beq.n	800caf4 <__ieee754_fmodf+0x34>
 800cba6:	0059      	lsls	r1, r3, #1
 800cba8:	e7fa      	b.n	800cba0 <__ieee754_fmodf+0xe0>
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	3a01      	subs	r2, #1
 800cbae:	e7df      	b.n	800cb70 <__ieee754_fmodf+0xb0>
 800cbb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800cbb4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800cbb8:	3282      	adds	r2, #130	@ 0x82
 800cbba:	4113      	asrs	r3, r2
 800cbbc:	432b      	orrs	r3, r5
 800cbbe:	e7e3      	b.n	800cb88 <__ieee754_fmodf+0xc8>
 800cbc0:	0800e290 	.word	0x0800e290

0800cbc4 <__ieee754_powf>:
 800cbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbc8:	ee10 4a90 	vmov	r4, s1
 800cbcc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800cbd0:	ed2d 8b02 	vpush	{d8}
 800cbd4:	ee10 6a10 	vmov	r6, s0
 800cbd8:	eeb0 8a40 	vmov.f32	s16, s0
 800cbdc:	eef0 8a60 	vmov.f32	s17, s1
 800cbe0:	d10c      	bne.n	800cbfc <__ieee754_powf+0x38>
 800cbe2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800cbe6:	0076      	lsls	r6, r6, #1
 800cbe8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800cbec:	f240 8274 	bls.w	800d0d8 <__ieee754_powf+0x514>
 800cbf0:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cbf4:	ecbd 8b02 	vpop	{d8}
 800cbf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbfc:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800cc00:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800cc04:	d802      	bhi.n	800cc0c <__ieee754_powf+0x48>
 800cc06:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cc0a:	d908      	bls.n	800cc1e <__ieee754_powf+0x5a>
 800cc0c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800cc10:	d1ee      	bne.n	800cbf0 <__ieee754_powf+0x2c>
 800cc12:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800cc16:	0064      	lsls	r4, r4, #1
 800cc18:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800cc1c:	e7e6      	b.n	800cbec <__ieee754_powf+0x28>
 800cc1e:	2e00      	cmp	r6, #0
 800cc20:	da1f      	bge.n	800cc62 <__ieee754_powf+0x9e>
 800cc22:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800cc26:	f080 8260 	bcs.w	800d0ea <__ieee754_powf+0x526>
 800cc2a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800cc2e:	d32f      	bcc.n	800cc90 <__ieee754_powf+0xcc>
 800cc30:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800cc34:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800cc38:	fa49 f503 	asr.w	r5, r9, r3
 800cc3c:	fa05 f303 	lsl.w	r3, r5, r3
 800cc40:	454b      	cmp	r3, r9
 800cc42:	d123      	bne.n	800cc8c <__ieee754_powf+0xc8>
 800cc44:	f005 0501 	and.w	r5, r5, #1
 800cc48:	f1c5 0502 	rsb	r5, r5, #2
 800cc4c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800cc50:	d11f      	bne.n	800cc92 <__ieee754_powf+0xce>
 800cc52:	2c00      	cmp	r4, #0
 800cc54:	f280 8246 	bge.w	800d0e4 <__ieee754_powf+0x520>
 800cc58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cc5c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cc60:	e7c8      	b.n	800cbf4 <__ieee754_powf+0x30>
 800cc62:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cc66:	d111      	bne.n	800cc8c <__ieee754_powf+0xc8>
 800cc68:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800cc6c:	f000 8234 	beq.w	800d0d8 <__ieee754_powf+0x514>
 800cc70:	d906      	bls.n	800cc80 <__ieee754_powf+0xbc>
 800cc72:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800cf88 <__ieee754_powf+0x3c4>
 800cc76:	2c00      	cmp	r4, #0
 800cc78:	bfa8      	it	ge
 800cc7a:	eeb0 0a68 	vmovge.f32	s0, s17
 800cc7e:	e7b9      	b.n	800cbf4 <__ieee754_powf+0x30>
 800cc80:	2c00      	cmp	r4, #0
 800cc82:	f280 822c 	bge.w	800d0de <__ieee754_powf+0x51a>
 800cc86:	eeb1 0a68 	vneg.f32	s0, s17
 800cc8a:	e7b3      	b.n	800cbf4 <__ieee754_powf+0x30>
 800cc8c:	2500      	movs	r5, #0
 800cc8e:	e7dd      	b.n	800cc4c <__ieee754_powf+0x88>
 800cc90:	2500      	movs	r5, #0
 800cc92:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800cc96:	d102      	bne.n	800cc9e <__ieee754_powf+0xda>
 800cc98:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cc9c:	e7aa      	b.n	800cbf4 <__ieee754_powf+0x30>
 800cc9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cca2:	f040 8227 	bne.w	800d0f4 <__ieee754_powf+0x530>
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	f2c0 8224 	blt.w	800d0f4 <__ieee754_powf+0x530>
 800ccac:	eeb0 0a48 	vmov.f32	s0, s16
 800ccb0:	ecbd 8b02 	vpop	{d8}
 800ccb4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccb8:	f7ff be5e 	b.w	800c978 <__ieee754_sqrtf>
 800ccbc:	2d01      	cmp	r5, #1
 800ccbe:	d199      	bne.n	800cbf4 <__ieee754_powf+0x30>
 800ccc0:	eeb1 0a40 	vneg.f32	s0, s0
 800ccc4:	e796      	b.n	800cbf4 <__ieee754_powf+0x30>
 800ccc6:	0ff0      	lsrs	r0, r6, #31
 800ccc8:	3801      	subs	r0, #1
 800ccca:	ea55 0300 	orrs.w	r3, r5, r0
 800ccce:	d104      	bne.n	800ccda <__ieee754_powf+0x116>
 800ccd0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ccd4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ccd8:	e78c      	b.n	800cbf4 <__ieee754_powf+0x30>
 800ccda:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ccde:	d96d      	bls.n	800cdbc <__ieee754_powf+0x1f8>
 800cce0:	4baa      	ldr	r3, [pc, #680]	@ (800cf8c <__ieee754_powf+0x3c8>)
 800cce2:	4598      	cmp	r8, r3
 800cce4:	d808      	bhi.n	800ccf8 <__ieee754_powf+0x134>
 800cce6:	2c00      	cmp	r4, #0
 800cce8:	da0b      	bge.n	800cd02 <__ieee754_powf+0x13e>
 800ccea:	2000      	movs	r0, #0
 800ccec:	ecbd 8b02 	vpop	{d8}
 800ccf0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccf4:	f7ff be3a 	b.w	800c96c <__math_oflowf>
 800ccf8:	4ba5      	ldr	r3, [pc, #660]	@ (800cf90 <__ieee754_powf+0x3cc>)
 800ccfa:	4598      	cmp	r8, r3
 800ccfc:	d908      	bls.n	800cd10 <__ieee754_powf+0x14c>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	dcf3      	bgt.n	800ccea <__ieee754_powf+0x126>
 800cd02:	2000      	movs	r0, #0
 800cd04:	ecbd 8b02 	vpop	{d8}
 800cd08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd0c:	f7ff be28 	b.w	800c960 <__math_uflowf>
 800cd10:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd14:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cd18:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800cf94 <__ieee754_powf+0x3d0>
 800cd1c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800cd20:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cd24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cd28:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cd2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cd30:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800cf98 <__ieee754_powf+0x3d4>
 800cd34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd38:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800cf9c <__ieee754_powf+0x3d8>
 800cd3c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800cd40:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800cfa0 <__ieee754_powf+0x3dc>
 800cd44:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cd48:	eeb0 7a67 	vmov.f32	s14, s15
 800cd4c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800cd50:	ee17 3a10 	vmov	r3, s14
 800cd54:	f36f 030b 	bfc	r3, #0, #12
 800cd58:	ee07 3a10 	vmov	s14, r3
 800cd5c:	eeb0 6a47 	vmov.f32	s12, s14
 800cd60:	eea0 6a66 	vfms.f32	s12, s0, s13
 800cd64:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cd68:	3d01      	subs	r5, #1
 800cd6a:	4305      	orrs	r5, r0
 800cd6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cd70:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800cd74:	f36f 040b 	bfc	r4, #0, #12
 800cd78:	bf18      	it	ne
 800cd7a:	eeb0 8a66 	vmovne.f32	s16, s13
 800cd7e:	ee06 4a90 	vmov	s13, r4
 800cd82:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cd86:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800cd8a:	ee67 7a26 	vmul.f32	s15, s14, s13
 800cd8e:	eee6 0a07 	vfma.f32	s1, s12, s14
 800cd92:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800cd96:	ee17 1a10 	vmov	r1, s14
 800cd9a:	2900      	cmp	r1, #0
 800cd9c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cda0:	f340 80dd 	ble.w	800cf5e <__ieee754_powf+0x39a>
 800cda4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800cda8:	f240 80ca 	bls.w	800cf40 <__ieee754_powf+0x37c>
 800cdac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb4:	bf4c      	ite	mi
 800cdb6:	2001      	movmi	r0, #1
 800cdb8:	2000      	movpl	r0, #0
 800cdba:	e797      	b.n	800ccec <__ieee754_powf+0x128>
 800cdbc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800cdc0:	bf01      	itttt	eq
 800cdc2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800cfa4 <__ieee754_powf+0x3e0>
 800cdc6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800cdca:	f06f 0317 	mvneq.w	r3, #23
 800cdce:	ee17 7a90 	vmoveq	r7, s15
 800cdd2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800cdd6:	bf18      	it	ne
 800cdd8:	2300      	movne	r3, #0
 800cdda:	3a7f      	subs	r2, #127	@ 0x7f
 800cddc:	441a      	add	r2, r3
 800cdde:	4b72      	ldr	r3, [pc, #456]	@ (800cfa8 <__ieee754_powf+0x3e4>)
 800cde0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800cde4:	429f      	cmp	r7, r3
 800cde6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800cdea:	dd06      	ble.n	800cdfa <__ieee754_powf+0x236>
 800cdec:	4b6f      	ldr	r3, [pc, #444]	@ (800cfac <__ieee754_powf+0x3e8>)
 800cdee:	429f      	cmp	r7, r3
 800cdf0:	f340 80a4 	ble.w	800cf3c <__ieee754_powf+0x378>
 800cdf4:	3201      	adds	r2, #1
 800cdf6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800cdfa:	2600      	movs	r6, #0
 800cdfc:	4b6c      	ldr	r3, [pc, #432]	@ (800cfb0 <__ieee754_powf+0x3ec>)
 800cdfe:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ce02:	ee07 1a10 	vmov	s14, r1
 800ce06:	edd3 5a00 	vldr	s11, [r3]
 800ce0a:	4b6a      	ldr	r3, [pc, #424]	@ (800cfb4 <__ieee754_powf+0x3f0>)
 800ce0c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ce10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce14:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800ce18:	1049      	asrs	r1, r1, #1
 800ce1a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800ce1e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ce22:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800ce26:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ce2a:	ee07 1a90 	vmov	s15, r1
 800ce2e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ce32:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800ce36:	ee15 7a10 	vmov	r7, s10
 800ce3a:	401f      	ands	r7, r3
 800ce3c:	ee06 7a90 	vmov	s13, r7
 800ce40:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800ce44:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ce48:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ce4c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ce50:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800cfb8 <__ieee754_powf+0x3f4>
 800ce54:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800cfbc <__ieee754_powf+0x3f8>
 800ce58:	eee7 5a87 	vfma.f32	s11, s15, s14
 800ce5c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800cfc0 <__ieee754_powf+0x3fc>
 800ce60:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ce64:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800cf94 <__ieee754_powf+0x3d0>
 800ce68:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ce6c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800cfc4 <__ieee754_powf+0x400>
 800ce70:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ce74:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800cfc8 <__ieee754_powf+0x404>
 800ce78:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ce7c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ce80:	ee35 7a26 	vadd.f32	s14, s10, s13
 800ce84:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800ce88:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ce8c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800ce90:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800ce94:	eef0 5a67 	vmov.f32	s11, s15
 800ce98:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800ce9c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cea0:	ee15 1a90 	vmov	r1, s11
 800cea4:	4019      	ands	r1, r3
 800cea6:	ee05 1a90 	vmov	s11, r1
 800ceaa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800ceae:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800ceb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800ceba:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cebe:	eeb0 6a67 	vmov.f32	s12, s15
 800cec2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cec6:	ee16 1a10 	vmov	r1, s12
 800ceca:	4019      	ands	r1, r3
 800cecc:	ee06 1a10 	vmov	s12, r1
 800ced0:	eeb0 7a46 	vmov.f32	s14, s12
 800ced4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800ced8:	493c      	ldr	r1, [pc, #240]	@ (800cfcc <__ieee754_powf+0x408>)
 800ceda:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800cede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cee2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800cfd0 <__ieee754_powf+0x40c>
 800cee6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800cfd4 <__ieee754_powf+0x410>
 800ceea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ceee:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800cfd8 <__ieee754_powf+0x414>
 800cef2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cef6:	ed91 7a00 	vldr	s14, [r1]
 800cefa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cefe:	ee07 2a10 	vmov	s14, r2
 800cf02:	4a36      	ldr	r2, [pc, #216]	@ (800cfdc <__ieee754_powf+0x418>)
 800cf04:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800cf08:	eeb0 7a67 	vmov.f32	s14, s15
 800cf0c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800cf10:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cf14:	ed92 5a00 	vldr	s10, [r2]
 800cf18:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cf1c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cf20:	ee17 2a10 	vmov	r2, s14
 800cf24:	401a      	ands	r2, r3
 800cf26:	ee07 2a10 	vmov	s14, r2
 800cf2a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800cf2e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800cf32:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cf36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cf3a:	e715      	b.n	800cd68 <__ieee754_powf+0x1a4>
 800cf3c:	2601      	movs	r6, #1
 800cf3e:	e75d      	b.n	800cdfc <__ieee754_powf+0x238>
 800cf40:	d152      	bne.n	800cfe8 <__ieee754_powf+0x424>
 800cf42:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cfe0 <__ieee754_powf+0x41c>
 800cf46:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf4a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cf4e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cf52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf56:	f73f af29 	bgt.w	800cdac <__ieee754_powf+0x1e8>
 800cf5a:	2386      	movs	r3, #134	@ 0x86
 800cf5c:	e048      	b.n	800cff0 <__ieee754_powf+0x42c>
 800cf5e:	4a21      	ldr	r2, [pc, #132]	@ (800cfe4 <__ieee754_powf+0x420>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d907      	bls.n	800cf74 <__ieee754_powf+0x3b0>
 800cf64:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	bf4c      	ite	mi
 800cf6e:	2001      	movmi	r0, #1
 800cf70:	2000      	movpl	r0, #0
 800cf72:	e6c7      	b.n	800cd04 <__ieee754_powf+0x140>
 800cf74:	d138      	bne.n	800cfe8 <__ieee754_powf+0x424>
 800cf76:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cf7a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800cf7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf82:	dbea      	blt.n	800cf5a <__ieee754_powf+0x396>
 800cf84:	e7ee      	b.n	800cf64 <__ieee754_powf+0x3a0>
 800cf86:	bf00      	nop
 800cf88:	00000000 	.word	0x00000000
 800cf8c:	3f7ffff3 	.word	0x3f7ffff3
 800cf90:	3f800007 	.word	0x3f800007
 800cf94:	3eaaaaab 	.word	0x3eaaaaab
 800cf98:	3fb8aa00 	.word	0x3fb8aa00
 800cf9c:	3fb8aa3b 	.word	0x3fb8aa3b
 800cfa0:	36eca570 	.word	0x36eca570
 800cfa4:	4b800000 	.word	0x4b800000
 800cfa8:	001cc471 	.word	0x001cc471
 800cfac:	005db3d6 	.word	0x005db3d6
 800cfb0:	0800e2a8 	.word	0x0800e2a8
 800cfb4:	fffff000 	.word	0xfffff000
 800cfb8:	3e6c3255 	.word	0x3e6c3255
 800cfbc:	3e53f142 	.word	0x3e53f142
 800cfc0:	3e8ba305 	.word	0x3e8ba305
 800cfc4:	3edb6db7 	.word	0x3edb6db7
 800cfc8:	3f19999a 	.word	0x3f19999a
 800cfcc:	0800e298 	.word	0x0800e298
 800cfd0:	3f76384f 	.word	0x3f76384f
 800cfd4:	3f763800 	.word	0x3f763800
 800cfd8:	369dc3a0 	.word	0x369dc3a0
 800cfdc:	0800e2a0 	.word	0x0800e2a0
 800cfe0:	3338aa3c 	.word	0x3338aa3c
 800cfe4:	43160000 	.word	0x43160000
 800cfe8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800cfec:	d96f      	bls.n	800d0ce <__ieee754_powf+0x50a>
 800cfee:	15db      	asrs	r3, r3, #23
 800cff0:	3b7e      	subs	r3, #126	@ 0x7e
 800cff2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800cff6:	4118      	asrs	r0, r3
 800cff8:	4408      	add	r0, r1
 800cffa:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cffe:	4a4e      	ldr	r2, [pc, #312]	@ (800d138 <__ieee754_powf+0x574>)
 800d000:	3b7f      	subs	r3, #127	@ 0x7f
 800d002:	411a      	asrs	r2, r3
 800d004:	4002      	ands	r2, r0
 800d006:	ee07 2a10 	vmov	s14, r2
 800d00a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d00e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d012:	f1c3 0317 	rsb	r3, r3, #23
 800d016:	4118      	asrs	r0, r3
 800d018:	2900      	cmp	r1, #0
 800d01a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d01e:	bfb8      	it	lt
 800d020:	4240      	neglt	r0, r0
 800d022:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800d026:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800d13c <__ieee754_powf+0x578>
 800d02a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800d140 <__ieee754_powf+0x57c>
 800d02e:	ee16 3a90 	vmov	r3, s13
 800d032:	f36f 030b 	bfc	r3, #0, #12
 800d036:	ee06 3a90 	vmov	s13, r3
 800d03a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d03e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d042:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d046:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800d144 <__ieee754_powf+0x580>
 800d04a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d04e:	eee0 7a87 	vfma.f32	s15, s1, s14
 800d052:	eeb0 7a67 	vmov.f32	s14, s15
 800d056:	eea6 7a86 	vfma.f32	s14, s13, s12
 800d05a:	eef0 5a47 	vmov.f32	s11, s14
 800d05e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800d062:	ee67 6a07 	vmul.f32	s13, s14, s14
 800d066:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d06a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800d148 <__ieee754_powf+0x584>
 800d06e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800d14c <__ieee754_powf+0x588>
 800d072:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d076:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d150 <__ieee754_powf+0x58c>
 800d07a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d07e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800d154 <__ieee754_powf+0x590>
 800d082:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800d086:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d158 <__ieee754_powf+0x594>
 800d08a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d08e:	eeb0 6a47 	vmov.f32	s12, s14
 800d092:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800d096:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d09a:	ee67 5a06 	vmul.f32	s11, s14, s12
 800d09e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d0a2:	eee7 7a27 	vfma.f32	s15, s14, s15
 800d0a6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d0aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d0ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d0b6:	ee10 3a10 	vmov	r3, s0
 800d0ba:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d0be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d0c2:	da06      	bge.n	800d0d2 <__ieee754_powf+0x50e>
 800d0c4:	f000 f984 	bl	800d3d0 <scalbnf>
 800d0c8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d0cc:	e592      	b.n	800cbf4 <__ieee754_powf+0x30>
 800d0ce:	2000      	movs	r0, #0
 800d0d0:	e7a7      	b.n	800d022 <__ieee754_powf+0x45e>
 800d0d2:	ee00 3a10 	vmov	s0, r3
 800d0d6:	e7f7      	b.n	800d0c8 <__ieee754_powf+0x504>
 800d0d8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d0dc:	e58a      	b.n	800cbf4 <__ieee754_powf+0x30>
 800d0de:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800d15c <__ieee754_powf+0x598>
 800d0e2:	e587      	b.n	800cbf4 <__ieee754_powf+0x30>
 800d0e4:	eeb0 0a48 	vmov.f32	s0, s16
 800d0e8:	e584      	b.n	800cbf4 <__ieee754_powf+0x30>
 800d0ea:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d0ee:	f43f adbb 	beq.w	800cc68 <__ieee754_powf+0xa4>
 800d0f2:	2502      	movs	r5, #2
 800d0f4:	eeb0 0a48 	vmov.f32	s0, s16
 800d0f8:	f000 f962 	bl	800d3c0 <fabsf>
 800d0fc:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d100:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d104:	4647      	mov	r7, r8
 800d106:	d003      	beq.n	800d110 <__ieee754_powf+0x54c>
 800d108:	f1b8 0f00 	cmp.w	r8, #0
 800d10c:	f47f addb 	bne.w	800ccc6 <__ieee754_powf+0x102>
 800d110:	2c00      	cmp	r4, #0
 800d112:	bfbc      	itt	lt
 800d114:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800d118:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d11c:	2e00      	cmp	r6, #0
 800d11e:	f6bf ad69 	bge.w	800cbf4 <__ieee754_powf+0x30>
 800d122:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d126:	ea58 0805 	orrs.w	r8, r8, r5
 800d12a:	f47f adc7 	bne.w	800ccbc <__ieee754_powf+0xf8>
 800d12e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d132:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d136:	e55d      	b.n	800cbf4 <__ieee754_powf+0x30>
 800d138:	ff800000 	.word	0xff800000
 800d13c:	3f317218 	.word	0x3f317218
 800d140:	3f317200 	.word	0x3f317200
 800d144:	35bfbe8c 	.word	0x35bfbe8c
 800d148:	b5ddea0e 	.word	0xb5ddea0e
 800d14c:	3331bb4c 	.word	0x3331bb4c
 800d150:	388ab355 	.word	0x388ab355
 800d154:	bb360b61 	.word	0xbb360b61
 800d158:	3e2aaaab 	.word	0x3e2aaaab
 800d15c:	00000000 	.word	0x00000000

0800d160 <__ieee754_rem_pio2f>:
 800d160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d162:	ee10 6a10 	vmov	r6, s0
 800d166:	4b88      	ldr	r3, [pc, #544]	@ (800d388 <__ieee754_rem_pio2f+0x228>)
 800d168:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d16c:	429d      	cmp	r5, r3
 800d16e:	b087      	sub	sp, #28
 800d170:	4604      	mov	r4, r0
 800d172:	d805      	bhi.n	800d180 <__ieee754_rem_pio2f+0x20>
 800d174:	2300      	movs	r3, #0
 800d176:	ed80 0a00 	vstr	s0, [r0]
 800d17a:	6043      	str	r3, [r0, #4]
 800d17c:	2000      	movs	r0, #0
 800d17e:	e022      	b.n	800d1c6 <__ieee754_rem_pio2f+0x66>
 800d180:	4b82      	ldr	r3, [pc, #520]	@ (800d38c <__ieee754_rem_pio2f+0x22c>)
 800d182:	429d      	cmp	r5, r3
 800d184:	d83a      	bhi.n	800d1fc <__ieee754_rem_pio2f+0x9c>
 800d186:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d18a:	2e00      	cmp	r6, #0
 800d18c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d390 <__ieee754_rem_pio2f+0x230>
 800d190:	4a80      	ldr	r2, [pc, #512]	@ (800d394 <__ieee754_rem_pio2f+0x234>)
 800d192:	f023 030f 	bic.w	r3, r3, #15
 800d196:	dd18      	ble.n	800d1ca <__ieee754_rem_pio2f+0x6a>
 800d198:	4293      	cmp	r3, r2
 800d19a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d19e:	bf09      	itett	eq
 800d1a0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d398 <__ieee754_rem_pio2f+0x238>
 800d1a4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d39c <__ieee754_rem_pio2f+0x23c>
 800d1a8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d3a0 <__ieee754_rem_pio2f+0x240>
 800d1ac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d1b0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d1b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1b8:	ed80 7a00 	vstr	s14, [r0]
 800d1bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1c0:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1c4:	2001      	movs	r0, #1
 800d1c6:	b007      	add	sp, #28
 800d1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d1d0:	bf09      	itett	eq
 800d1d2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d398 <__ieee754_rem_pio2f+0x238>
 800d1d6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d39c <__ieee754_rem_pio2f+0x23c>
 800d1da:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d3a0 <__ieee754_rem_pio2f+0x240>
 800d1de:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d1e2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d1e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d1ea:	ed80 7a00 	vstr	s14, [r0]
 800d1ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1f2:	edc0 7a01 	vstr	s15, [r0, #4]
 800d1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1fa:	e7e4      	b.n	800d1c6 <__ieee754_rem_pio2f+0x66>
 800d1fc:	4b69      	ldr	r3, [pc, #420]	@ (800d3a4 <__ieee754_rem_pio2f+0x244>)
 800d1fe:	429d      	cmp	r5, r3
 800d200:	d873      	bhi.n	800d2ea <__ieee754_rem_pio2f+0x18a>
 800d202:	f000 f8dd 	bl	800d3c0 <fabsf>
 800d206:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d3a8 <__ieee754_rem_pio2f+0x248>
 800d20a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d20e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d21a:	ee17 0a90 	vmov	r0, s15
 800d21e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d390 <__ieee754_rem_pio2f+0x230>
 800d222:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d226:	281f      	cmp	r0, #31
 800d228:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d39c <__ieee754_rem_pio2f+0x23c>
 800d22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d230:	eeb1 6a47 	vneg.f32	s12, s14
 800d234:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d238:	ee16 1a90 	vmov	r1, s13
 800d23c:	dc09      	bgt.n	800d252 <__ieee754_rem_pio2f+0xf2>
 800d23e:	4a5b      	ldr	r2, [pc, #364]	@ (800d3ac <__ieee754_rem_pio2f+0x24c>)
 800d240:	1e47      	subs	r7, r0, #1
 800d242:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d246:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d24a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d24e:	4293      	cmp	r3, r2
 800d250:	d107      	bne.n	800d262 <__ieee754_rem_pio2f+0x102>
 800d252:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d256:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d25a:	2a08      	cmp	r2, #8
 800d25c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d260:	dc14      	bgt.n	800d28c <__ieee754_rem_pio2f+0x12c>
 800d262:	6021      	str	r1, [r4, #0]
 800d264:	ed94 7a00 	vldr	s14, [r4]
 800d268:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d26c:	2e00      	cmp	r6, #0
 800d26e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d272:	ed84 0a01 	vstr	s0, [r4, #4]
 800d276:	daa6      	bge.n	800d1c6 <__ieee754_rem_pio2f+0x66>
 800d278:	eeb1 7a47 	vneg.f32	s14, s14
 800d27c:	eeb1 0a40 	vneg.f32	s0, s0
 800d280:	ed84 7a00 	vstr	s14, [r4]
 800d284:	ed84 0a01 	vstr	s0, [r4, #4]
 800d288:	4240      	negs	r0, r0
 800d28a:	e79c      	b.n	800d1c6 <__ieee754_rem_pio2f+0x66>
 800d28c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d398 <__ieee754_rem_pio2f+0x238>
 800d290:	eef0 6a40 	vmov.f32	s13, s0
 800d294:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d298:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d29c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d2a0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d3a0 <__ieee754_rem_pio2f+0x240>
 800d2a4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d2a8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d2ac:	ee15 2a90 	vmov	r2, s11
 800d2b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d2b4:	1a5b      	subs	r3, r3, r1
 800d2b6:	2b19      	cmp	r3, #25
 800d2b8:	dc04      	bgt.n	800d2c4 <__ieee754_rem_pio2f+0x164>
 800d2ba:	edc4 5a00 	vstr	s11, [r4]
 800d2be:	eeb0 0a66 	vmov.f32	s0, s13
 800d2c2:	e7cf      	b.n	800d264 <__ieee754_rem_pio2f+0x104>
 800d2c4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d3b0 <__ieee754_rem_pio2f+0x250>
 800d2c8:	eeb0 0a66 	vmov.f32	s0, s13
 800d2cc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d2d0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d2d4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d3b4 <__ieee754_rem_pio2f+0x254>
 800d2d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d2dc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d2e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d2e4:	ed84 7a00 	vstr	s14, [r4]
 800d2e8:	e7bc      	b.n	800d264 <__ieee754_rem_pio2f+0x104>
 800d2ea:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d2ee:	d306      	bcc.n	800d2fe <__ieee754_rem_pio2f+0x19e>
 800d2f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d2f4:	edc0 7a01 	vstr	s15, [r0, #4]
 800d2f8:	edc0 7a00 	vstr	s15, [r0]
 800d2fc:	e73e      	b.n	800d17c <__ieee754_rem_pio2f+0x1c>
 800d2fe:	15ea      	asrs	r2, r5, #23
 800d300:	3a86      	subs	r2, #134	@ 0x86
 800d302:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d306:	ee07 3a90 	vmov	s15, r3
 800d30a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d30e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d3b8 <__ieee754_rem_pio2f+0x258>
 800d312:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d31a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d31e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d322:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d326:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d32a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d32e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d332:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d342:	d11e      	bne.n	800d382 <__ieee754_rem_pio2f+0x222>
 800d344:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34c:	bf0c      	ite	eq
 800d34e:	2301      	moveq	r3, #1
 800d350:	2302      	movne	r3, #2
 800d352:	491a      	ldr	r1, [pc, #104]	@ (800d3bc <__ieee754_rem_pio2f+0x25c>)
 800d354:	9101      	str	r1, [sp, #4]
 800d356:	2102      	movs	r1, #2
 800d358:	9100      	str	r1, [sp, #0]
 800d35a:	a803      	add	r0, sp, #12
 800d35c:	4621      	mov	r1, r4
 800d35e:	f000 f89d 	bl	800d49c <__kernel_rem_pio2f>
 800d362:	2e00      	cmp	r6, #0
 800d364:	f6bf af2f 	bge.w	800d1c6 <__ieee754_rem_pio2f+0x66>
 800d368:	edd4 7a00 	vldr	s15, [r4]
 800d36c:	eef1 7a67 	vneg.f32	s15, s15
 800d370:	edc4 7a00 	vstr	s15, [r4]
 800d374:	edd4 7a01 	vldr	s15, [r4, #4]
 800d378:	eef1 7a67 	vneg.f32	s15, s15
 800d37c:	edc4 7a01 	vstr	s15, [r4, #4]
 800d380:	e782      	b.n	800d288 <__ieee754_rem_pio2f+0x128>
 800d382:	2303      	movs	r3, #3
 800d384:	e7e5      	b.n	800d352 <__ieee754_rem_pio2f+0x1f2>
 800d386:	bf00      	nop
 800d388:	3f490fd8 	.word	0x3f490fd8
 800d38c:	4016cbe3 	.word	0x4016cbe3
 800d390:	3fc90f80 	.word	0x3fc90f80
 800d394:	3fc90fd0 	.word	0x3fc90fd0
 800d398:	37354400 	.word	0x37354400
 800d39c:	37354443 	.word	0x37354443
 800d3a0:	2e85a308 	.word	0x2e85a308
 800d3a4:	43490f80 	.word	0x43490f80
 800d3a8:	3f22f984 	.word	0x3f22f984
 800d3ac:	0800e2b0 	.word	0x0800e2b0
 800d3b0:	2e85a300 	.word	0x2e85a300
 800d3b4:	248d3132 	.word	0x248d3132
 800d3b8:	43800000 	.word	0x43800000
 800d3bc:	0800e330 	.word	0x0800e330

0800d3c0 <fabsf>:
 800d3c0:	ee10 3a10 	vmov	r3, s0
 800d3c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d3c8:	ee00 3a10 	vmov	s0, r3
 800d3cc:	4770      	bx	lr
	...

0800d3d0 <scalbnf>:
 800d3d0:	ee10 3a10 	vmov	r3, s0
 800d3d4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d3d8:	d02b      	beq.n	800d432 <scalbnf+0x62>
 800d3da:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d3de:	d302      	bcc.n	800d3e6 <scalbnf+0x16>
 800d3e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d3e4:	4770      	bx	lr
 800d3e6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d3ea:	d123      	bne.n	800d434 <scalbnf+0x64>
 800d3ec:	4b24      	ldr	r3, [pc, #144]	@ (800d480 <scalbnf+0xb0>)
 800d3ee:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d484 <scalbnf+0xb4>
 800d3f2:	4298      	cmp	r0, r3
 800d3f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d3f8:	db17      	blt.n	800d42a <scalbnf+0x5a>
 800d3fa:	ee10 3a10 	vmov	r3, s0
 800d3fe:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d402:	3a19      	subs	r2, #25
 800d404:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d408:	4288      	cmp	r0, r1
 800d40a:	dd15      	ble.n	800d438 <scalbnf+0x68>
 800d40c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d488 <scalbnf+0xb8>
 800d410:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d48c <scalbnf+0xbc>
 800d414:	ee10 3a10 	vmov	r3, s0
 800d418:	eeb0 7a67 	vmov.f32	s14, s15
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	bfb8      	it	lt
 800d420:	eef0 7a66 	vmovlt.f32	s15, s13
 800d424:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d428:	4770      	bx	lr
 800d42a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d490 <scalbnf+0xc0>
 800d42e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d432:	4770      	bx	lr
 800d434:	0dd2      	lsrs	r2, r2, #23
 800d436:	e7e5      	b.n	800d404 <scalbnf+0x34>
 800d438:	4410      	add	r0, r2
 800d43a:	28fe      	cmp	r0, #254	@ 0xfe
 800d43c:	dce6      	bgt.n	800d40c <scalbnf+0x3c>
 800d43e:	2800      	cmp	r0, #0
 800d440:	dd06      	ble.n	800d450 <scalbnf+0x80>
 800d442:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d446:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d44a:	ee00 3a10 	vmov	s0, r3
 800d44e:	4770      	bx	lr
 800d450:	f110 0f16 	cmn.w	r0, #22
 800d454:	da09      	bge.n	800d46a <scalbnf+0x9a>
 800d456:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d490 <scalbnf+0xc0>
 800d45a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d494 <scalbnf+0xc4>
 800d45e:	ee10 3a10 	vmov	r3, s0
 800d462:	eeb0 7a67 	vmov.f32	s14, s15
 800d466:	2b00      	cmp	r3, #0
 800d468:	e7d9      	b.n	800d41e <scalbnf+0x4e>
 800d46a:	3019      	adds	r0, #25
 800d46c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d470:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d474:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d498 <scalbnf+0xc8>
 800d478:	ee07 3a90 	vmov	s15, r3
 800d47c:	e7d7      	b.n	800d42e <scalbnf+0x5e>
 800d47e:	bf00      	nop
 800d480:	ffff3cb0 	.word	0xffff3cb0
 800d484:	4c000000 	.word	0x4c000000
 800d488:	7149f2ca 	.word	0x7149f2ca
 800d48c:	f149f2ca 	.word	0xf149f2ca
 800d490:	0da24260 	.word	0x0da24260
 800d494:	8da24260 	.word	0x8da24260
 800d498:	33000000 	.word	0x33000000

0800d49c <__kernel_rem_pio2f>:
 800d49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a0:	ed2d 8b04 	vpush	{d8-d9}
 800d4a4:	b0d9      	sub	sp, #356	@ 0x164
 800d4a6:	4690      	mov	r8, r2
 800d4a8:	9001      	str	r0, [sp, #4]
 800d4aa:	4ab6      	ldr	r2, [pc, #728]	@ (800d784 <__kernel_rem_pio2f+0x2e8>)
 800d4ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d4ae:	f118 0f04 	cmn.w	r8, #4
 800d4b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d4b6:	460f      	mov	r7, r1
 800d4b8:	f103 3bff 	add.w	fp, r3, #4294967295
 800d4bc:	db26      	blt.n	800d50c <__kernel_rem_pio2f+0x70>
 800d4be:	f1b8 0203 	subs.w	r2, r8, #3
 800d4c2:	bf48      	it	mi
 800d4c4:	f108 0204 	addmi.w	r2, r8, #4
 800d4c8:	10d2      	asrs	r2, r2, #3
 800d4ca:	1c55      	adds	r5, r2, #1
 800d4cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d4ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d4d2:	00e8      	lsls	r0, r5, #3
 800d4d4:	eba2 060b 	sub.w	r6, r2, fp
 800d4d8:	9002      	str	r0, [sp, #8]
 800d4da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d4de:	eb0a 0c0b 	add.w	ip, sl, fp
 800d4e2:	ac1c      	add	r4, sp, #112	@ 0x70
 800d4e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	4560      	cmp	r0, ip
 800d4ec:	dd10      	ble.n	800d510 <__kernel_rem_pio2f+0x74>
 800d4ee:	a91c      	add	r1, sp, #112	@ 0x70
 800d4f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d4f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d4f8:	2600      	movs	r6, #0
 800d4fa:	4556      	cmp	r6, sl
 800d4fc:	dc24      	bgt.n	800d548 <__kernel_rem_pio2f+0xac>
 800d4fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d502:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d506:	4684      	mov	ip, r0
 800d508:	2400      	movs	r4, #0
 800d50a:	e016      	b.n	800d53a <__kernel_rem_pio2f+0x9e>
 800d50c:	2200      	movs	r2, #0
 800d50e:	e7dc      	b.n	800d4ca <__kernel_rem_pio2f+0x2e>
 800d510:	42c6      	cmn	r6, r0
 800d512:	bf5d      	ittte	pl
 800d514:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d518:	ee07 1a90 	vmovpl	s15, r1
 800d51c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d520:	eef0 7a47 	vmovmi.f32	s15, s14
 800d524:	ece4 7a01 	vstmia	r4!, {s15}
 800d528:	3001      	adds	r0, #1
 800d52a:	e7de      	b.n	800d4ea <__kernel_rem_pio2f+0x4e>
 800d52c:	ecfe 6a01 	vldmia	lr!, {s13}
 800d530:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d534:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d538:	3401      	adds	r4, #1
 800d53a:	455c      	cmp	r4, fp
 800d53c:	ddf6      	ble.n	800d52c <__kernel_rem_pio2f+0x90>
 800d53e:	ece9 7a01 	vstmia	r9!, {s15}
 800d542:	3601      	adds	r6, #1
 800d544:	3004      	adds	r0, #4
 800d546:	e7d8      	b.n	800d4fa <__kernel_rem_pio2f+0x5e>
 800d548:	a908      	add	r1, sp, #32
 800d54a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d54e:	9104      	str	r1, [sp, #16]
 800d550:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d552:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d790 <__kernel_rem_pio2f+0x2f4>
 800d556:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d78c <__kernel_rem_pio2f+0x2f0>
 800d55a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d55e:	9203      	str	r2, [sp, #12]
 800d560:	4654      	mov	r4, sl
 800d562:	00a2      	lsls	r2, r4, #2
 800d564:	9205      	str	r2, [sp, #20]
 800d566:	aa58      	add	r2, sp, #352	@ 0x160
 800d568:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d56c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d570:	a944      	add	r1, sp, #272	@ 0x110
 800d572:	aa08      	add	r2, sp, #32
 800d574:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d578:	4694      	mov	ip, r2
 800d57a:	4626      	mov	r6, r4
 800d57c:	2e00      	cmp	r6, #0
 800d57e:	dc4c      	bgt.n	800d61a <__kernel_rem_pio2f+0x17e>
 800d580:	4628      	mov	r0, r5
 800d582:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d586:	f7ff ff23 	bl	800d3d0 <scalbnf>
 800d58a:	eeb0 8a40 	vmov.f32	s16, s0
 800d58e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d592:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d596:	f000 f9e9 	bl	800d96c <floorf>
 800d59a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d59e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d5a2:	2d00      	cmp	r5, #0
 800d5a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d5a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d5ac:	ee17 9a90 	vmov	r9, s15
 800d5b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d5b8:	dd41      	ble.n	800d63e <__kernel_rem_pio2f+0x1a2>
 800d5ba:	f104 3cff 	add.w	ip, r4, #4294967295
 800d5be:	a908      	add	r1, sp, #32
 800d5c0:	f1c5 0e08 	rsb	lr, r5, #8
 800d5c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d5c8:	fa46 f00e 	asr.w	r0, r6, lr
 800d5cc:	4481      	add	r9, r0
 800d5ce:	fa00 f00e 	lsl.w	r0, r0, lr
 800d5d2:	1a36      	subs	r6, r6, r0
 800d5d4:	f1c5 0007 	rsb	r0, r5, #7
 800d5d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d5dc:	4106      	asrs	r6, r0
 800d5de:	2e00      	cmp	r6, #0
 800d5e0:	dd3c      	ble.n	800d65c <__kernel_rem_pio2f+0x1c0>
 800d5e2:	f04f 0e00 	mov.w	lr, #0
 800d5e6:	f109 0901 	add.w	r9, r9, #1
 800d5ea:	4670      	mov	r0, lr
 800d5ec:	4574      	cmp	r4, lr
 800d5ee:	dc68      	bgt.n	800d6c2 <__kernel_rem_pio2f+0x226>
 800d5f0:	2d00      	cmp	r5, #0
 800d5f2:	dd03      	ble.n	800d5fc <__kernel_rem_pio2f+0x160>
 800d5f4:	2d01      	cmp	r5, #1
 800d5f6:	d074      	beq.n	800d6e2 <__kernel_rem_pio2f+0x246>
 800d5f8:	2d02      	cmp	r5, #2
 800d5fa:	d07d      	beq.n	800d6f8 <__kernel_rem_pio2f+0x25c>
 800d5fc:	2e02      	cmp	r6, #2
 800d5fe:	d12d      	bne.n	800d65c <__kernel_rem_pio2f+0x1c0>
 800d600:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d604:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d608:	b340      	cbz	r0, 800d65c <__kernel_rem_pio2f+0x1c0>
 800d60a:	4628      	mov	r0, r5
 800d60c:	9306      	str	r3, [sp, #24]
 800d60e:	f7ff fedf 	bl	800d3d0 <scalbnf>
 800d612:	9b06      	ldr	r3, [sp, #24]
 800d614:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d618:	e020      	b.n	800d65c <__kernel_rem_pio2f+0x1c0>
 800d61a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d61e:	3e01      	subs	r6, #1
 800d620:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d628:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d62c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d630:	ecac 0a01 	vstmia	ip!, {s0}
 800d634:	ed30 0a01 	vldmdb	r0!, {s0}
 800d638:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d63c:	e79e      	b.n	800d57c <__kernel_rem_pio2f+0xe0>
 800d63e:	d105      	bne.n	800d64c <__kernel_rem_pio2f+0x1b0>
 800d640:	1e60      	subs	r0, r4, #1
 800d642:	a908      	add	r1, sp, #32
 800d644:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d648:	11f6      	asrs	r6, r6, #7
 800d64a:	e7c8      	b.n	800d5de <__kernel_rem_pio2f+0x142>
 800d64c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d650:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d658:	da31      	bge.n	800d6be <__kernel_rem_pio2f+0x222>
 800d65a:	2600      	movs	r6, #0
 800d65c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d664:	f040 8098 	bne.w	800d798 <__kernel_rem_pio2f+0x2fc>
 800d668:	1e60      	subs	r0, r4, #1
 800d66a:	2200      	movs	r2, #0
 800d66c:	4550      	cmp	r0, sl
 800d66e:	da4b      	bge.n	800d708 <__kernel_rem_pio2f+0x26c>
 800d670:	2a00      	cmp	r2, #0
 800d672:	d065      	beq.n	800d740 <__kernel_rem_pio2f+0x2a4>
 800d674:	3c01      	subs	r4, #1
 800d676:	ab08      	add	r3, sp, #32
 800d678:	3d08      	subs	r5, #8
 800d67a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d0f8      	beq.n	800d674 <__kernel_rem_pio2f+0x1d8>
 800d682:	4628      	mov	r0, r5
 800d684:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d688:	f7ff fea2 	bl	800d3d0 <scalbnf>
 800d68c:	1c63      	adds	r3, r4, #1
 800d68e:	aa44      	add	r2, sp, #272	@ 0x110
 800d690:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d790 <__kernel_rem_pio2f+0x2f4>
 800d694:	0099      	lsls	r1, r3, #2
 800d696:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d69a:	4623      	mov	r3, r4
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	f280 80a9 	bge.w	800d7f4 <__kernel_rem_pio2f+0x358>
 800d6a2:	4623      	mov	r3, r4
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f2c0 80c7 	blt.w	800d838 <__kernel_rem_pio2f+0x39c>
 800d6aa:	aa44      	add	r2, sp, #272	@ 0x110
 800d6ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d6b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d788 <__kernel_rem_pio2f+0x2ec>
 800d6b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d6b8:	2000      	movs	r0, #0
 800d6ba:	1ae2      	subs	r2, r4, r3
 800d6bc:	e0b1      	b.n	800d822 <__kernel_rem_pio2f+0x386>
 800d6be:	2602      	movs	r6, #2
 800d6c0:	e78f      	b.n	800d5e2 <__kernel_rem_pio2f+0x146>
 800d6c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800d6c6:	b948      	cbnz	r0, 800d6dc <__kernel_rem_pio2f+0x240>
 800d6c8:	b121      	cbz	r1, 800d6d4 <__kernel_rem_pio2f+0x238>
 800d6ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d6ce:	f842 1c04 	str.w	r1, [r2, #-4]
 800d6d2:	2101      	movs	r1, #1
 800d6d4:	f10e 0e01 	add.w	lr, lr, #1
 800d6d8:	4608      	mov	r0, r1
 800d6da:	e787      	b.n	800d5ec <__kernel_rem_pio2f+0x150>
 800d6dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d6e0:	e7f5      	b.n	800d6ce <__kernel_rem_pio2f+0x232>
 800d6e2:	f104 3cff 	add.w	ip, r4, #4294967295
 800d6e6:	aa08      	add	r2, sp, #32
 800d6e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d6ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d6f0:	a908      	add	r1, sp, #32
 800d6f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d6f6:	e781      	b.n	800d5fc <__kernel_rem_pio2f+0x160>
 800d6f8:	f104 3cff 	add.w	ip, r4, #4294967295
 800d6fc:	aa08      	add	r2, sp, #32
 800d6fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d702:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d706:	e7f3      	b.n	800d6f0 <__kernel_rem_pio2f+0x254>
 800d708:	a908      	add	r1, sp, #32
 800d70a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d70e:	3801      	subs	r0, #1
 800d710:	430a      	orrs	r2, r1
 800d712:	e7ab      	b.n	800d66c <__kernel_rem_pio2f+0x1d0>
 800d714:	3201      	adds	r2, #1
 800d716:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d71a:	2e00      	cmp	r6, #0
 800d71c:	d0fa      	beq.n	800d714 <__kernel_rem_pio2f+0x278>
 800d71e:	9905      	ldr	r1, [sp, #20]
 800d720:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d724:	eb0d 0001 	add.w	r0, sp, r1
 800d728:	18e6      	adds	r6, r4, r3
 800d72a:	a91c      	add	r1, sp, #112	@ 0x70
 800d72c:	f104 0c01 	add.w	ip, r4, #1
 800d730:	384c      	subs	r0, #76	@ 0x4c
 800d732:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d736:	4422      	add	r2, r4
 800d738:	4562      	cmp	r2, ip
 800d73a:	da04      	bge.n	800d746 <__kernel_rem_pio2f+0x2aa>
 800d73c:	4614      	mov	r4, r2
 800d73e:	e710      	b.n	800d562 <__kernel_rem_pio2f+0xc6>
 800d740:	9804      	ldr	r0, [sp, #16]
 800d742:	2201      	movs	r2, #1
 800d744:	e7e7      	b.n	800d716 <__kernel_rem_pio2f+0x27a>
 800d746:	9903      	ldr	r1, [sp, #12]
 800d748:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d74c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	ee07 1a90 	vmov	s15, r1
 800d756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d75a:	2400      	movs	r4, #0
 800d75c:	ece6 7a01 	vstmia	r6!, {s15}
 800d760:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d764:	46b1      	mov	r9, r6
 800d766:	455c      	cmp	r4, fp
 800d768:	dd04      	ble.n	800d774 <__kernel_rem_pio2f+0x2d8>
 800d76a:	ece0 7a01 	vstmia	r0!, {s15}
 800d76e:	f10c 0c01 	add.w	ip, ip, #1
 800d772:	e7e1      	b.n	800d738 <__kernel_rem_pio2f+0x29c>
 800d774:	ecfe 6a01 	vldmia	lr!, {s13}
 800d778:	ed39 7a01 	vldmdb	r9!, {s14}
 800d77c:	3401      	adds	r4, #1
 800d77e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d782:	e7f0      	b.n	800d766 <__kernel_rem_pio2f+0x2ca>
 800d784:	0800e674 	.word	0x0800e674
 800d788:	0800e648 	.word	0x0800e648
 800d78c:	43800000 	.word	0x43800000
 800d790:	3b800000 	.word	0x3b800000
 800d794:	00000000 	.word	0x00000000
 800d798:	9b02      	ldr	r3, [sp, #8]
 800d79a:	eeb0 0a48 	vmov.f32	s0, s16
 800d79e:	eba3 0008 	sub.w	r0, r3, r8
 800d7a2:	f7ff fe15 	bl	800d3d0 <scalbnf>
 800d7a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d78c <__kernel_rem_pio2f+0x2f0>
 800d7aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d7ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b2:	db19      	blt.n	800d7e8 <__kernel_rem_pio2f+0x34c>
 800d7b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d790 <__kernel_rem_pio2f+0x2f4>
 800d7b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d7bc:	aa08      	add	r2, sp, #32
 800d7be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7c2:	3508      	adds	r5, #8
 800d7c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d7d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d7d4:	ee10 3a10 	vmov	r3, s0
 800d7d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d7dc:	ee17 3a90 	vmov	r3, s15
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d7e6:	e74c      	b.n	800d682 <__kernel_rem_pio2f+0x1e6>
 800d7e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d7ec:	aa08      	add	r2, sp, #32
 800d7ee:	ee10 3a10 	vmov	r3, s0
 800d7f2:	e7f6      	b.n	800d7e2 <__kernel_rem_pio2f+0x346>
 800d7f4:	a808      	add	r0, sp, #32
 800d7f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d7fa:	9001      	str	r0, [sp, #4]
 800d7fc:	ee07 0a90 	vmov	s15, r0
 800d800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d804:	3b01      	subs	r3, #1
 800d806:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d80a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d80e:	ed62 7a01 	vstmdb	r2!, {s15}
 800d812:	e743      	b.n	800d69c <__kernel_rem_pio2f+0x200>
 800d814:	ecfc 6a01 	vldmia	ip!, {s13}
 800d818:	ecb5 7a01 	vldmia	r5!, {s14}
 800d81c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d820:	3001      	adds	r0, #1
 800d822:	4550      	cmp	r0, sl
 800d824:	dc01      	bgt.n	800d82a <__kernel_rem_pio2f+0x38e>
 800d826:	4290      	cmp	r0, r2
 800d828:	ddf4      	ble.n	800d814 <__kernel_rem_pio2f+0x378>
 800d82a:	a858      	add	r0, sp, #352	@ 0x160
 800d82c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d830:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d834:	3b01      	subs	r3, #1
 800d836:	e735      	b.n	800d6a4 <__kernel_rem_pio2f+0x208>
 800d838:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d83a:	2b02      	cmp	r3, #2
 800d83c:	dc09      	bgt.n	800d852 <__kernel_rem_pio2f+0x3b6>
 800d83e:	2b00      	cmp	r3, #0
 800d840:	dc27      	bgt.n	800d892 <__kernel_rem_pio2f+0x3f6>
 800d842:	d040      	beq.n	800d8c6 <__kernel_rem_pio2f+0x42a>
 800d844:	f009 0007 	and.w	r0, r9, #7
 800d848:	b059      	add	sp, #356	@ 0x164
 800d84a:	ecbd 8b04 	vpop	{d8-d9}
 800d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d852:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d854:	2b03      	cmp	r3, #3
 800d856:	d1f5      	bne.n	800d844 <__kernel_rem_pio2f+0x3a8>
 800d858:	aa30      	add	r2, sp, #192	@ 0xc0
 800d85a:	1f0b      	subs	r3, r1, #4
 800d85c:	4413      	add	r3, r2
 800d85e:	461a      	mov	r2, r3
 800d860:	4620      	mov	r0, r4
 800d862:	2800      	cmp	r0, #0
 800d864:	dc50      	bgt.n	800d908 <__kernel_rem_pio2f+0x46c>
 800d866:	4622      	mov	r2, r4
 800d868:	2a01      	cmp	r2, #1
 800d86a:	dc5d      	bgt.n	800d928 <__kernel_rem_pio2f+0x48c>
 800d86c:	ab30      	add	r3, sp, #192	@ 0xc0
 800d86e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d872:	440b      	add	r3, r1
 800d874:	2c01      	cmp	r4, #1
 800d876:	dc67      	bgt.n	800d948 <__kernel_rem_pio2f+0x4ac>
 800d878:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d87c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d880:	2e00      	cmp	r6, #0
 800d882:	d167      	bne.n	800d954 <__kernel_rem_pio2f+0x4b8>
 800d884:	edc7 6a00 	vstr	s13, [r7]
 800d888:	ed87 7a01 	vstr	s14, [r7, #4]
 800d88c:	edc7 7a02 	vstr	s15, [r7, #8]
 800d890:	e7d8      	b.n	800d844 <__kernel_rem_pio2f+0x3a8>
 800d892:	ab30      	add	r3, sp, #192	@ 0xc0
 800d894:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d898:	440b      	add	r3, r1
 800d89a:	4622      	mov	r2, r4
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	da24      	bge.n	800d8ea <__kernel_rem_pio2f+0x44e>
 800d8a0:	b34e      	cbz	r6, 800d8f6 <__kernel_rem_pio2f+0x45a>
 800d8a2:	eef1 7a47 	vneg.f32	s15, s14
 800d8a6:	edc7 7a00 	vstr	s15, [r7]
 800d8aa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d8ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d8b2:	aa31      	add	r2, sp, #196	@ 0xc4
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	429c      	cmp	r4, r3
 800d8b8:	da20      	bge.n	800d8fc <__kernel_rem_pio2f+0x460>
 800d8ba:	b10e      	cbz	r6, 800d8c0 <__kernel_rem_pio2f+0x424>
 800d8bc:	eef1 7a67 	vneg.f32	s15, s15
 800d8c0:	edc7 7a01 	vstr	s15, [r7, #4]
 800d8c4:	e7be      	b.n	800d844 <__kernel_rem_pio2f+0x3a8>
 800d8c6:	ab30      	add	r3, sp, #192	@ 0xc0
 800d8c8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d794 <__kernel_rem_pio2f+0x2f8>
 800d8cc:	440b      	add	r3, r1
 800d8ce:	2c00      	cmp	r4, #0
 800d8d0:	da05      	bge.n	800d8de <__kernel_rem_pio2f+0x442>
 800d8d2:	b10e      	cbz	r6, 800d8d8 <__kernel_rem_pio2f+0x43c>
 800d8d4:	eef1 7a67 	vneg.f32	s15, s15
 800d8d8:	edc7 7a00 	vstr	s15, [r7]
 800d8dc:	e7b2      	b.n	800d844 <__kernel_rem_pio2f+0x3a8>
 800d8de:	ed33 7a01 	vldmdb	r3!, {s14}
 800d8e2:	3c01      	subs	r4, #1
 800d8e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d8e8:	e7f1      	b.n	800d8ce <__kernel_rem_pio2f+0x432>
 800d8ea:	ed73 7a01 	vldmdb	r3!, {s15}
 800d8ee:	3a01      	subs	r2, #1
 800d8f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8f4:	e7d2      	b.n	800d89c <__kernel_rem_pio2f+0x400>
 800d8f6:	eef0 7a47 	vmov.f32	s15, s14
 800d8fa:	e7d4      	b.n	800d8a6 <__kernel_rem_pio2f+0x40a>
 800d8fc:	ecb2 7a01 	vldmia	r2!, {s14}
 800d900:	3301      	adds	r3, #1
 800d902:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d906:	e7d6      	b.n	800d8b6 <__kernel_rem_pio2f+0x41a>
 800d908:	ed72 7a01 	vldmdb	r2!, {s15}
 800d90c:	edd2 6a01 	vldr	s13, [r2, #4]
 800d910:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d914:	3801      	subs	r0, #1
 800d916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d91a:	ed82 7a00 	vstr	s14, [r2]
 800d91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d922:	edc2 7a01 	vstr	s15, [r2, #4]
 800d926:	e79c      	b.n	800d862 <__kernel_rem_pio2f+0x3c6>
 800d928:	ed73 7a01 	vldmdb	r3!, {s15}
 800d92c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d930:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d934:	3a01      	subs	r2, #1
 800d936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d93a:	ed83 7a00 	vstr	s14, [r3]
 800d93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d942:	edc3 7a01 	vstr	s15, [r3, #4]
 800d946:	e78f      	b.n	800d868 <__kernel_rem_pio2f+0x3cc>
 800d948:	ed33 7a01 	vldmdb	r3!, {s14}
 800d94c:	3c01      	subs	r4, #1
 800d94e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d952:	e78f      	b.n	800d874 <__kernel_rem_pio2f+0x3d8>
 800d954:	eef1 6a66 	vneg.f32	s13, s13
 800d958:	eeb1 7a47 	vneg.f32	s14, s14
 800d95c:	edc7 6a00 	vstr	s13, [r7]
 800d960:	ed87 7a01 	vstr	s14, [r7, #4]
 800d964:	eef1 7a67 	vneg.f32	s15, s15
 800d968:	e790      	b.n	800d88c <__kernel_rem_pio2f+0x3f0>
 800d96a:	bf00      	nop

0800d96c <floorf>:
 800d96c:	ee10 3a10 	vmov	r3, s0
 800d970:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d974:	3a7f      	subs	r2, #127	@ 0x7f
 800d976:	2a16      	cmp	r2, #22
 800d978:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d97c:	dc2b      	bgt.n	800d9d6 <floorf+0x6a>
 800d97e:	2a00      	cmp	r2, #0
 800d980:	da12      	bge.n	800d9a8 <floorf+0x3c>
 800d982:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d9e8 <floorf+0x7c>
 800d986:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d98a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d992:	dd06      	ble.n	800d9a2 <floorf+0x36>
 800d994:	2b00      	cmp	r3, #0
 800d996:	da24      	bge.n	800d9e2 <floorf+0x76>
 800d998:	2900      	cmp	r1, #0
 800d99a:	4b14      	ldr	r3, [pc, #80]	@ (800d9ec <floorf+0x80>)
 800d99c:	bf08      	it	eq
 800d99e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800d9a2:	ee00 3a10 	vmov	s0, r3
 800d9a6:	4770      	bx	lr
 800d9a8:	4911      	ldr	r1, [pc, #68]	@ (800d9f0 <floorf+0x84>)
 800d9aa:	4111      	asrs	r1, r2
 800d9ac:	420b      	tst	r3, r1
 800d9ae:	d0fa      	beq.n	800d9a6 <floorf+0x3a>
 800d9b0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800d9e8 <floorf+0x7c>
 800d9b4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d9b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c0:	ddef      	ble.n	800d9a2 <floorf+0x36>
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	bfbe      	ittt	lt
 800d9c6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800d9ca:	fa40 f202 	asrlt.w	r2, r0, r2
 800d9ce:	189b      	addlt	r3, r3, r2
 800d9d0:	ea23 0301 	bic.w	r3, r3, r1
 800d9d4:	e7e5      	b.n	800d9a2 <floorf+0x36>
 800d9d6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800d9da:	d3e4      	bcc.n	800d9a6 <floorf+0x3a>
 800d9dc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d9e0:	4770      	bx	lr
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e7dd      	b.n	800d9a2 <floorf+0x36>
 800d9e6:	bf00      	nop
 800d9e8:	7149f2ca 	.word	0x7149f2ca
 800d9ec:	bf800000 	.word	0xbf800000
 800d9f0:	007fffff 	.word	0x007fffff

0800d9f4 <_init>:
 800d9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9f6:	bf00      	nop
 800d9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9fa:	bc08      	pop	{r3}
 800d9fc:	469e      	mov	lr, r3
 800d9fe:	4770      	bx	lr

0800da00 <_fini>:
 800da00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da02:	bf00      	nop
 800da04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da06:	bc08      	pop	{r3}
 800da08:	469e      	mov	lr, r3
 800da0a:	4770      	bx	lr
