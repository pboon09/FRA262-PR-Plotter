
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013800  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080139d8  080139d8  000149d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014038  08014038  00016194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014038  08014038  00015038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014040  08014040  00016194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014040  08014040  00015040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014044  08014044  00015044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08014048  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021dc  20000194  080141dc  00016194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002370  080141dc  00016370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c38d  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bc  00000000  00000000  00042551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00047b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a1  00000000  00000000  00049818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db9c  00000000  00000000  0004aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbbc  00000000  00000000  00078a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a081  00000000  00000000  000a4611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be692  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  001be6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c6b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080139c0 	.word	0x080139c0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	080139c0 	.word	0x080139c0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a f90e 	bl	800b200 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 f9f7 	bl	800a3e4 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe12 	bl	8001d64 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 ffd1 	bl	800334c <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f8cb 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f8c2 	bl	8003598 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f8ae 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8a5 	bl	8003598 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f893 	bl	8003598 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f886 	bl	8003598 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00a fde0 	bl	800c08c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f85d 	bl	8003598 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00a fdc3 	bl	800c08c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f840 	bl	8003598 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00a fda8 	bl	800c08c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f821 	bl	8003598 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fb6e 	bl	8001d64 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 faaa 	bl	8011c58 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 fa6d 	bl	8011c58 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fa7f 	bl	8001d64 <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	ed2d 8b02 	vpush	{d8}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b4:	f7fe fe6c 	bl	8000590 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe fe5e 	bl	8000590 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f0:	f7fe ff78 	bl	80007e4 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f92a 	bl	8000b54 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001904:	ed97 7a00 	vldr	s14, [r7]
 8001908:	edd7 7a03 	vldr	s15, [r7, #12]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f918 	bl	8000b54 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb1 8a67 	vneg.f32	s16, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f90b 	bl	8000b54 <__aeabi_d2f>
 800193e:	4604      	mov	r4, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f902 	bl	8000b54 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef1 8a67 	vneg.f32	s17, s15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8f5 	bl	8000b54 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee02 3a10 	vmov	s4, r3
 8001970:	eef0 1a68 	vmov.f32	s3, s17
 8001974:	ee01 4a10 	vmov	s2, r4
 8001978:	eef0 0a48 	vmov.f32	s1, s16
 800197c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001980:	f000 f9f0 	bl	8001d64 <mapf>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ba:	b5b0      	push	{r4, r5, r7, lr}
 80019bc:	ed2d 8b02 	vpush	{d8}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ce:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fd74 	bl	80004e0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f010 f8d6 	bl	8011bb0 <cos>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fdc0 	bl	8000590 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f89c 	bl	8000b54 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ed97 7a00 	vldr	s14, [r7]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd44 	bl	80004e0 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f868 	bl	8000b54 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f852 	bl	8000b54 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb1 8a67 	vneg.f32	s16, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f845 	bl	8000b54 <__aeabi_d2f>
 8001aca:	4604      	mov	r4, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f83c 	bl	8000b54 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef1 8a67 	vneg.f32	s17, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	ee02 3a10 	vmov	s4, r3
 8001afc:	eef0 1a68 	vmov.f32	s3, s17
 8001b00:	ee01 4a10 	vmov	s2, r4
 8001b04:	eef0 0a48 	vmov.f32	s1, s16
 8001b08:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0c:	f000 f92a 	bl	8001d64 <mapf>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	ed2d 8b02 	vpush	{d8}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
 8001b3a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <FIR_init+0x2a>
        numTaps += 1;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00f ff1c 	bl	801199c <malloc>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00f ff13 	bl	801199c <malloc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e0 	beq.w	8001d48 <FIR_init+0x224>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80db 	beq.w	8001d48 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b96:	e00a      	b.n	8001bae <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f0      	bcc.n	8001b98 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bba:	ed97 7a00 	vldr	s14, [r7]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bd2:	e077      	b.n	8001cc4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10c      	bne.n	8001bfa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
 8001bf8:	e02c      	b.n	8001c54 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <FIR_init+0x230>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f010 f8ee 	bl	8011e04 <sinf>
 8001c28:	eef0 6a40 	vmov.f32	s13, s0
 8001c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d58 <FIR_init+0x234>
 8001c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 8a00 	vldr	s16, [r3]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d54 <FIR_init+0x230>
 8001c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	f010 f876 	bl	8011d7c <cosf>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d5c <FIR_init+0x238>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d60 <FIR_init+0x23c>
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	db82      	blt.n	8001bd4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	83fb      	strh	r3, [r7, #30]
 8001cd8:	e00f      	b.n	8001cfa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3eb      	bcc.n	8001cda <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d01b      	beq.n	8001d48 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	e014      	b.n	8001d40 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	8bbb      	ldrh	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	8bba      	ldrh	r2, [r7, #28]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e6      	bcc.n	8001d16 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	ecbd 8b02 	vpop	{d8}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40c90fdb 	.word	0x40c90fdb
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	3eeb851f 	.word	0x3eeb851f
 8001d60:	3f0a3d71 	.word	0x3f0a3d71

08001d64 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001d6e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001d72:	ed87 1a03 	vstr	s2, [r7, #12]
 8001d76:	edc7 1a02 	vstr	s3, [r7, #8]
 8001d7a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001d7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d92:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001d9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001da2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001daa:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	ee07 3a90 	vmov	s15, r3
}
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001dec:	4b08      	ldr	r3, [pc, #32]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <modbus_1t5_Timeout+0x3c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200001b0 	.word	0x200001b0

08001e14 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <modbus_3t5_Timeout+0x1c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2201      	movs	r2, #1
 8001e22:	755a      	strb	r2, [r3, #21]

}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	200001b0 	.word	0x200001b0

08001e34 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f00d fff3 	bl	800fe28 <HAL_UART_GetError>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d101      	bne.n	8001e4c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001e48:	f7ff ffc4 	bl	8001dd4 <modbus_1t5_Timeout>

	}
}
 8001e4c:	bf00      	nop
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
 8001e60:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001e62:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <Modbus_init+0xc4>)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <Modbus_init+0xc4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001e70:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <Modbus_init+0xc4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <Modbus_init+0xc4>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001e80:	4b25      	ldr	r3, [pc, #148]	@ (8001f18 <Modbus_init+0xc4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	7e3a      	ldrb	r2, [r7, #24]
 8001e86:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001e88:	4b23      	ldr	r3, [pc, #140]	@ (8001f18 <Modbus_init+0xc4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	69fa      	ldr	r2, [r7, #28]
 8001e8e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a21      	ldr	r2, [pc, #132]	@ (8001f1c <Modbus_init+0xc8>)
 8001e96:	210e      	movs	r1, #14
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00c fa69 	bl	800e370 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f00d ff69 	bl	800fd7c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f00d ff80 	bl	800fdb4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a19      	ldr	r2, [pc, #100]	@ (8001f20 <Modbus_init+0xcc>)
 8001eba:	2104      	movs	r1, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f00d faa7 	bl	800f410 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <Modbus_init+0xc4>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001ec8:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <Modbus_init+0xc4>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <Modbus_init+0xc4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001ed4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001ed8:	4413      	add	r3, r2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f00d fb4f 	bl	800f584 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <Modbus_init+0xc4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d10c      	bne.n	8001f10 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <Modbus_init+0xc4>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	691b      	ldr	r3, [r3, #16]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f00b fa13 	bl	800d328 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <Modbus_init+0xc4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00b fc62 	bl	800d7d4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200001b0 	.word	0x200001b0
 8001f1c:	08001e15 	.word	0x08001e15
 8001f20:	08001e35 	.word	0x08001e35

08001f24 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	@ 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001f2c:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f30:	edc7 0a07 	vstr	s1, [r7, #28]
 8001f34:	ed87 1a06 	vstr	s2, [r7, #24]
 8001f38:	edc7 1a05 	vstr	s3, [r7, #20]
 8001f3c:	ed87 2a04 	vstr	s4, [r7, #16]
 8001f40:	edc7 2a03 	vstr	s5, [r7, #12]
 8001f44:	ed87 3a02 	vstr	s6, [r7, #8]
 8001f48:	edc7 3a01 	vstr	s7, [r7, #4]
 8001f4c:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f52:	6a3a      	ldr	r2, [r7, #32]
 8001f54:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00f fdba 	bl	8011b08 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	3310      	adds	r3, #16
 8001f98:	2240      	movs	r2, #64	@ 0x40
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00f fdb3 	bl	8011b08 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fa6:	e00c      	b.n	8001fc2 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a79      	ldr	r2, [pc, #484]	@ (80021a0 <MotorKalman_Init+0x27c>)
 8001fba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	ddef      	ble.n	8001fa8 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fce:	2240      	movs	r2, #64	@ 0x40
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f00f fd98 	bl	8011b08 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fdc:	e00d      	b.n	8001ffa <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe8:	33be      	adds	r3, #190	@ 0xbe
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ff2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	ddee      	ble.n	8001fde <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	33f0      	adds	r3, #240	@ 0xf0
 8002004:	2210      	movs	r2, #16
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f00f fd7d 	bl	8011b08 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002014:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800201e:	2210      	movs	r2, #16
 8002020:	2100      	movs	r1, #0
 8002022:	4618      	mov	r0, r3
 8002024:	f00f fd70 	bl	8011b08 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800202e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002032:	ed97 0a01 	vldr	s0, [r7, #4]
 8002036:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002038:	f000 f922 	bl	8002280 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 800203c:	ed97 0a00 	vldr	s0, [r7]
 8002040:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002042:	f000 f94d 	bl	80022e0 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	2201      	movs	r2, #1
 8002050:	2104      	movs	r1, #4
 8002052:	f00e ffe8 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002058:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	3310      	adds	r3, #16
 8002060:	2204      	movs	r2, #4
 8002062:	2104      	movs	r1, #4
 8002064:	f00e ffdf 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	f00e ffd5 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002088:	2201      	movs	r2, #1
 800208a:	2101      	movs	r1, #1
 800208c:	f00e ffcb 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	f00e ffc1 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80020b0:	2201      	movs	r2, #1
 80020b2:	2101      	movs	r1, #1
 80020b4:	f00e ffb7 	bl	8011026 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80020c4:	2204      	movs	r2, #4
 80020c6:	2104      	movs	r1, #4
 80020c8:	f00e ffad 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80020d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d4:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80020d8:	2201      	movs	r2, #1
 80020da:	2104      	movs	r1, #4
 80020dc:	f00e ffa3 	bl	8011026 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020ec:	2201      	movs	r2, #1
 80020ee:	2104      	movs	r1, #4
 80020f0:	f00e ff99 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002100:	2204      	movs	r2, #4
 8002102:	2104      	movs	r1, #4
 8002104:	f00e ff8f 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210a:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002110:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002114:	2204      	movs	r2, #4
 8002116:	2101      	movs	r1, #1
 8002118:	f00e ff85 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002124:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002128:	2201      	movs	r2, #1
 800212a:	2101      	movs	r1, #1
 800212c:	f00e ff7b 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002138:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 800213c:	2201      	movs	r2, #1
 800213e:	2104      	movs	r1, #4
 8002140:	f00e ff71 	bl	8011026 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002146:	f000 f82d 	bl	80021a4 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	3390      	adds	r3, #144	@ 0x90
 8002154:	2204      	movs	r2, #4
 8002156:	2104      	movs	r1, #4
 8002158:	f00e ff65 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002164:	33e0      	adds	r3, #224	@ 0xe0
 8002166:	2201      	movs	r2, #1
 8002168:	2104      	movs	r1, #4
 800216a:	f00e ff5c 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800217a:	2204      	movs	r2, #4
 800217c:	2104      	movs	r1, #4
 800217e:	f00e ff52 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800218e:	2201      	movs	r2, #1
 8002190:	2104      	movs	r1, #4
 8002192:	f00e ff48 	bl	8011026 <arm_mat_init_f32>
}
 8002196:	bf00      	nop
 8002198:	3730      	adds	r7, #48	@ 0x30
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	42c80000 	.word	0x42c80000

080021a4 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80021e0:	4619      	mov	r1, r3
 80021e2:	4610      	mov	r0, r2
 80021e4:	eeb0 3a64 	vmov.f32	s6, s9
 80021e8:	eef0 2a45 	vmov.f32	s5, s10
 80021ec:	eeb0 2a65 	vmov.f32	s4, s11
 80021f0:	eef0 1a46 	vmov.f32	s3, s12
 80021f4:	eeb0 1a66 	vmov.f32	s2, s13
 80021f8:	eef0 0a47 	vmov.f32	s1, s14
 80021fc:	eeb0 0a67 	vmov.f32	s0, s15
 8002200:	f001 f83c 	bl	800327c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800220a:	2240      	movs	r2, #64	@ 0x40
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f00f fc7a 	bl	8011b08 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800221a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002278 <MotorKalman_DiscretizeModel+0xd4>
 800221e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800224e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800227c <MotorKalman_DiscretizeModel+0xd8>
 8002252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002262:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002278 <MotorKalman_DiscretizeModel+0xd4>
 8002266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002270:	bf00      	nop
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	3c23d70a 	.word	0x3c23d70a
 800227c:	3dcccccd 	.word	0x3dcccccd

08002280 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002292:	2240      	movs	r2, #64	@ 0x40
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f00f fc36 	bl	8011b08 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 800229c:	edd7 7a00 	vldr	s15, [r7]
 80022a0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80022b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c0:	d107      	bne.n	80022d2 <MotorKalman_SetProcessNoise+0x52>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80022c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022d0:	d002      	beq.n	80022d8 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff66 	bl	80021a4 <MotorKalman_DiscretizeModel>
    }
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80022ec:	ed97 0a00 	vldr	s0, [r7]
 80022f0:	f00f fd26 	bl	8011d40 <sqrtf>
 80022f4:	eef0 7a40 	vmov.f32	s15, s0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800230e:	b580      	push	{r7, lr}
 8002310:	b0b2      	sub	sp, #200	@ 0xc8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002322:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002330:	2300      	movs	r3, #0
 8002332:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002336:	e041      	b.n	80023bc <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	33c8      	adds	r3, #200	@ 0xc8
 8002340:	443b      	add	r3, r7
 8002342:	3b3c      	subs	r3, #60	@ 0x3c
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002350:	e02b      	b.n	80023aa <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002352:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	33c8      	adds	r3, #200	@ 0xc8
 800235a:	443b      	add	r3, r7
 800235c:	3b3c      	subs	r3, #60	@ 0x3c
 800235e:	ed93 7a00 	vldr	s14, [r3]
 8002362:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800236c:	4413      	add	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	3324      	adds	r3, #36	@ 0x24
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	edd3 6a00 	vldr	s13, [r3]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	33c8      	adds	r3, #200	@ 0xc8
 8002398:	443b      	add	r3, r7
 800239a:	3b3c      	subs	r3, #60	@ 0x3c
 800239c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023a4:	3301      	adds	r3, #1
 80023a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80023aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80023ae:	2b03      	cmp	r3, #3
 80023b0:	ddcf      	ble.n	8002352 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023b6:	3301      	adds	r3, #1
 80023b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	ddb9      	ble.n	8002338 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80023ca:	e021      	b.n	8002410 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80023cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	33c8      	adds	r3, #200	@ 0xc8
 80023d4:	443b      	add	r3, r7
 80023d6:	3b3c      	subs	r3, #60	@ 0x3c
 80023d8:	ed93 7a00 	vldr	s14, [r3]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023e2:	3338      	adds	r3, #56	@ 0x38
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	edd3 6a00 	vldr	s13, [r3]
 80023ec:	edd7 7a00 	vldr	s15, [r7]
 80023f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	4413      	add	r3, r2
 8002402:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002406:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800240a:	3301      	adds	r3, #1
 800240c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002410:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002414:	2b03      	cmp	r3, #3
 8002416:	ddd9      	ble.n	80023cc <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002418:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800241c:	2240      	movs	r2, #64	@ 0x40
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00f fb71 	bl	8011b08 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2100      	movs	r1, #0
 800242e:	4618      	mov	r0, r3
 8002430:	f00f fb6a 	bl	8011b08 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800243a:	e05f      	b.n	80024fc <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002442:	e052      	b.n	80024ea <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002444:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002448:	009a      	lsls	r2, r3, #2
 800244a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	33c8      	adds	r3, #200	@ 0xc8
 8002454:	443b      	add	r3, r7
 8002456:	3b7c      	subs	r3, #124	@ 0x7c
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800245e:	2300      	movs	r3, #0
 8002460:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002464:	e038      	b.n	80024d8 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	33c8      	adds	r3, #200	@ 0xc8
 8002476:	443b      	add	r3, r7
 8002478:	3b7c      	subs	r3, #124	@ 0x7c
 800247a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800247e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002482:	009a      	lsls	r2, r3, #2
 8002484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002488:	4413      	add	r3, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	3324      	adds	r3, #36	@ 0x24
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	edd3 6a00 	vldr	s13, [r3]
 8002496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800249a:	009a      	lsls	r2, r3, #2
 800249c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024a0:	4413      	add	r3, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	3304      	adds	r3, #4
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80024b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024b6:	009a      	lsls	r2, r3, #2
 80024b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024bc:	4413      	add	r3, r2
 80024be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	33c8      	adds	r3, #200	@ 0xc8
 80024c6:	443b      	add	r3, r7
 80024c8:	3b7c      	subs	r3, #124	@ 0x7c
 80024ca:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80024ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024d2:	3301      	adds	r3, #1
 80024d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024dc:	2b03      	cmp	r3, #3
 80024de:	ddc2      	ble.n	8002466 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	dda8      	ble.n	8002444 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f6:	3301      	adds	r3, #1
 80024f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002500:	2b03      	cmp	r3, #3
 8002502:	dd9b      	ble.n	800243c <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800250a:	e05f      	b.n	80025cc <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002512:	e052      	b.n	80025ba <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002518:	009a      	lsls	r2, r3, #2
 800251a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	33c8      	adds	r3, #200	@ 0xc8
 8002524:	443b      	add	r3, r7
 8002526:	3bbc      	subs	r3, #188	@ 0xbc
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002534:	e038      	b.n	80025a8 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800253a:	009a      	lsls	r2, r3, #2
 800253c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	33c8      	adds	r3, #200	@ 0xc8
 8002546:	443b      	add	r3, r7
 8002548:	3bbc      	subs	r3, #188	@ 0xbc
 800254a:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 800254e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002552:	009a      	lsls	r2, r3, #2
 8002554:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	33c8      	adds	r3, #200	@ 0xc8
 800255e:	443b      	add	r3, r7
 8002560:	3b7c      	subs	r3, #124	@ 0x7c
 8002562:	edd3 6a00 	vldr	s13, [r3]
 8002566:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800256a:	009a      	lsls	r2, r3, #2
 800256c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002570:	4413      	add	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	3324      	adds	r3, #36	@ 0x24
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800258c:	4413      	add	r3, r2
 800258e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	33c8      	adds	r3, #200	@ 0xc8
 8002596:	443b      	add	r3, r7
 8002598:	3bbc      	subs	r3, #188	@ 0xbc
 800259a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800259e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025a2:	3301      	adds	r3, #1
 80025a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	ddc2      	ble.n	8002536 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025b4:	3301      	adds	r3, #1
 80025b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025be:	2b03      	cmp	r3, #3
 80025c0:	dda8      	ble.n	8002514 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c6:	3301      	adds	r3, #1
 80025c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	dd9b      	ble.n	800250c <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025da:	e037      	b.n	800264c <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025dc:	2300      	movs	r3, #0
 80025de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80025e2:	e02a      	b.n	800263a <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80025e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	33c8      	adds	r3, #200	@ 0xc8
 80025f4:	443b      	add	r3, r7
 80025f6:	3bbc      	subs	r3, #188	@ 0xbc
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002606:	4413      	add	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	3354      	adds	r3, #84	@ 0x54
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002614:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002618:	009a      	lsls	r2, r3, #2
 800261a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800261e:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002634:	3301      	adds	r3, #1
 8002636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800263a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800263e:	2b03      	cmp	r3, #3
 8002640:	ddd0      	ble.n	80025e4 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002646:	3301      	adds	r3, #1
 8002648:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800264c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002650:	2b03      	cmp	r3, #3
 8002652:	ddc3      	ble.n	80025dc <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	2104      	movs	r1, #4
 8002688:	f00e fccd 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3310      	adds	r3, #16
 8002696:	2204      	movs	r2, #4
 8002698:	2104      	movs	r1, #4
 800269a:	f00e fcc4 	bl	8011026 <arm_mat_init_f32>
}
 800269e:	bf00      	nop
 80026a0:	37c8      	adds	r7, #200	@ 0xc8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0d0      	sub	sp, #320	@ 0x140
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026b2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026b6:	6018      	str	r0, [r3, #0]
 80026b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80026c0:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80026c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80026d2:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80026dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80026ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026ee:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	edd3 7a00 	vldr	s15, [r3]
 80026f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002700:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800270a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800270e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	edd3 7a01 	vldr	s15, [r3, #4]
 8002718:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002720:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002724:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 800272e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002732:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	edd3 7a02 	vldr	s15, [r3, #8]
 800273c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002740:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002744:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002748:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002752:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002756:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002760:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002768:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800276c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002770:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002774:	ed93 7a00 	vldr	s14, [r3]
 8002778:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800277c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002780:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002784:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002798:	e04d      	b.n	8002836 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800279a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027a4:	443b      	add	r3, r7
 80027a6:	3b58      	subs	r3, #88	@ 0x58
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80027b4:	e036      	b.n	8002824 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80027b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027c0:	443b      	add	r3, r7
 80027c2:	3b58      	subs	r3, #88	@ 0x58
 80027c4:	ed93 7a00 	vldr	s14, [r3]
 80027c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027d6:	333c      	adds	r3, #60	@ 0x3c
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	4413      	add	r3, r2
 80027dc:	edd3 6a00 	vldr	s13, [r3]
 80027e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80027e4:	009a      	lsls	r2, r3, #2
 80027e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80027ea:	4413      	add	r3, r2
 80027ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027f0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80027f4:	6812      	ldr	r2, [r2, #0]
 80027f6:	3304      	adds	r3, #4
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	edd3 7a00 	vldr	s15, [r3]
 8002800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002804:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002808:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002812:	443b      	add	r3, r7
 8002814:	3b58      	subs	r3, #88	@ 0x58
 8002816:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800281a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800281e:	3301      	adds	r3, #1
 8002820:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002824:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002828:	2b03      	cmp	r3, #3
 800282a:	ddc4      	ble.n	80027b6 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800282c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002830:	3301      	adds	r3, #1
 8002832:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002836:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800283a:	2b03      	cmp	r3, #3
 800283c:	ddad      	ble.n	800279a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800284c:	e021      	b.n	8002892 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 800284e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002858:	443b      	add	r3, r7
 800285a:	3b58      	subs	r3, #88	@ 0x58
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002864:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800286e:	333c      	adds	r3, #60	@ 0x3c
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800287c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002884:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002888:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800288c:	3301      	adds	r3, #1
 800288e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002892:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002896:	2b03      	cmp	r3, #3
 8002898:	ddd9      	ble.n	800284e <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800289a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800289e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80028a8:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80028b4:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028c2:	2300      	movs	r3, #0
 80028c4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80028c8:	e04d      	b.n	8002966 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80028ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028d4:	443b      	add	r3, r7
 80028d6:	3b68      	subs	r3, #104	@ 0x68
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80028e4:	e036      	b.n	8002954 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80028e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028f0:	443b      	add	r3, r7
 80028f2:	3b68      	subs	r3, #104	@ 0x68
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002902:	4413      	add	r3, r2
 8002904:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002908:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	3304      	adds	r3, #4
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	edd3 6a00 	vldr	s13, [r3]
 8002918:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800291c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002926:	333c      	adds	r3, #60	@ 0x3c
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002934:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002938:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002942:	443b      	add	r3, r7
 8002944:	3b68      	subs	r3, #104	@ 0x68
 8002946:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800294a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800294e:	3301      	adds	r3, #1
 8002950:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002954:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002958:	2b03      	cmp	r3, #3
 800295a:	ddc4      	ble.n	80028e6 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800295c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002960:	3301      	adds	r3, #1
 8002962:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002966:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800296a:	2b03      	cmp	r3, #3
 800296c:	ddad      	ble.n	80028ca <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 800296e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002982:	e01a      	b.n	80029ba <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002984:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800298e:	443b      	add	r3, r7
 8002990:	3b68      	subs	r3, #104	@ 0x68
 8002992:	edd3 6a00 	vldr	s13, [r3]
 8002996:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 800299a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a8:	443b      	add	r3, r7
 80029aa:	3b78      	subs	r3, #120	@ 0x78
 80029ac:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80029ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029be:	2b03      	cmp	r3, #3
 80029c0:	dde0      	ble.n	8002984 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80029c8:	e029      	b.n	8002a1e <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 80029ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029ea:	443b      	add	r3, r7
 80029ec:	3b78      	subs	r3, #120	@ 0x78
 80029ee:	edd3 6a00 	vldr	s13, [r3]
 80029f2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 80029f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a02:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a14:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a18:	3301      	adds	r3, #1
 8002a1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	ddd1      	ble.n	80029ca <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a26:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002a2a:	2240      	movs	r2, #64	@ 0x40
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f00f f86a 	bl	8011b08 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002a3a:	e035      	b.n	8002aa8 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a42:	e028      	b.n	8002a96 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a4e:	443b      	add	r3, r7
 8002a50:	3b78      	subs	r3, #120	@ 0x78
 8002a52:	ed93 7a00 	vldr	s14, [r3]
 8002a56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a5a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a64:	333c      	adds	r3, #60	@ 0x3c
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a72:	009a      	lsls	r2, r3, #2
 8002a74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a78:	4413      	add	r3, r2
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a84:	443b      	add	r3, r7
 8002a86:	3bb8      	subs	r3, #184	@ 0xb8
 8002a88:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a8c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002a96:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	ddd2      	ble.n	8002a44 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	ddc5      	ble.n	8002a3c <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ab0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002ab4:	2240      	movs	r2, #64	@ 0x40
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f00f f825 	bl	8011b08 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002ac4:	e038      	b.n	8002b38 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002acc:	e02b      	b.n	8002b26 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002ace:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002ad2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d102      	bne.n	8002ae0 <MotorKalman_Update+0x438>
 8002ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ade:	e001      	b.n	8002ae4 <MotorKalman_Update+0x43c>
 8002ae0:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002cfc <MotorKalman_Update+0x654>
 8002ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae8:	009a      	lsls	r2, r3, #2
 8002aea:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002af6:	443b      	add	r3, r7
 8002af8:	3bb8      	subs	r3, #184	@ 0xb8
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b08:	4413      	add	r3, r2
 8002b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b14:	443b      	add	r3, r7
 8002b16:	3bf8      	subs	r3, #248	@ 0xf8
 8002b18:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b1c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b20:	3301      	adds	r3, #1
 8002b22:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b26:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	ddcf      	ble.n	8002ace <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b32:	3301      	adds	r3, #1
 8002b34:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	ddc2      	ble.n	8002ac6 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002b40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f103 0110 	add.w	r1, r3, #16
 8002b4e:	f107 0308 	add.w	r3, r7, #8
 8002b52:	2240      	movs	r2, #64	@ 0x40
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00f f81b 	bl	8011b90 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b60:	e06e      	b.n	8002c40 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b68:	e061      	b.n	8002c2e <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b6e:	009a      	lsls	r2, r3, #2
 8002b70:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b74:	4413      	add	r3, r2
 8002b76:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002b7a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	3304      	adds	r3, #4
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	4413      	add	r3, r2
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002b92:	e043      	b.n	8002c1c <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ba4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	3304      	adds	r3, #4
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bb8:	009a      	lsls	r2, r3, #2
 8002bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bc6:	443b      	add	r3, r7
 8002bc8:	3bf8      	subs	r3, #248	@ 0xf8
 8002bca:	edd3 6a00 	vldr	s13, [r3]
 8002bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bd8:	4413      	add	r3, r2
 8002bda:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002bde:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	edd3 7a00 	vldr	s15, [r3]
 8002bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002bf2:	009a      	lsls	r2, r3, #2
 8002bf4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002bf8:	4413      	add	r3, r2
 8002bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfe:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c02:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	3304      	adds	r3, #4
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	ddb7      	ble.n	8002b94 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c24:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c28:	3301      	adds	r3, #1
 8002c2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c2e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	dd99      	ble.n	8002b6a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	dd8c      	ble.n	8002b62 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c58:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c7c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c80:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ca6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cbe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f00e f9ab 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cd4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ce2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3310      	adds	r3, #16
 8002cea:	2204      	movs	r2, #4
 8002cec:	2104      	movs	r1, #4
 8002cee:	f00e f99a 	bl	8011026 <arm_mat_init_f32>
}
 8002cf2:	bf00      	nop
 8002cf4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00000000 	.word	0x00000000

08002d00 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d0c:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002d10:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff fafa 	bl	800230e <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002d1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f7ff fcc2 	bl	80026a8 <MotorKalman_Update>

    return filter->velocity;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002d2a:	ee07 3a90 	vmov	s15, r3
}
 8002d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e00c      	b.n	8002d64 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	441a      	add	r2, r3
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	440b      	add	r3, r1
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbee      	blt.n	8002d4a <matrix_copy+0x12>
    }
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002d88:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002d8c:	6020      	str	r0, [r4, #0]
 8002d8e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002d92:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002d96:	6001      	str	r1, [r0, #0]
 8002d98:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002d9c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002da0:	ed81 0a00 	vstr	s0, [r1]
 8002da4:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002da8:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002dac:	600a      	str	r2, [r1, #0]
 8002dae:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002db2:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002db6:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002db8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dbc:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002dc0:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	2104      	movs	r1, #4
 8002dca:	f00e f92c 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002dce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dd2:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002dd6:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	2104      	movs	r1, #4
 8002de0:	f00e f921 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002de4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002de8:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002dec:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2201      	movs	r2, #1
 8002df4:	2104      	movs	r1, #4
 8002df6:	f00e f916 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002dfa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dfe:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002e02:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	f00e f90b 	bl	8011026 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002e10:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e14:	2240      	movs	r2, #64	@ 0x40
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f00e fe75 	bl	8011b08 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002e1e:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002e22:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002e26:	2204      	movs	r2, #4
 8002e28:	2104      	movs	r1, #4
 8002e2a:	f00e f8fc 	bl	8011026 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e34:	e011      	b.n	8002e5a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002e36:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002e46:	443b      	add	r3, r7
 8002e48:	3b6c      	subs	r3, #108	@ 0x6c
 8002e4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e4e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002e50:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e54:	3301      	adds	r3, #1
 8002e56:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002e5a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002e5e:	2b03      	cmp	r3, #3
 8002e60:	dde9      	ble.n	8002e36 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002e62:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002e66:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	2104      	movs	r1, #4
 8002e6e:	f00e f8da 	bl	8011026 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002e72:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002e76:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e7a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e7e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002e82:	ed93 0a00 	vldr	s0, [r3]
 8002e86:	4610      	mov	r0, r2
 8002e88:	f00e fcd6 	bl	8011838 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002e8c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e90:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e94:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002e98:	2210      	movs	r2, #16
 8002e9a:	6819      	ldr	r1, [r3, #0]
 8002e9c:	f7ff ff4c 	bl	8002d38 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002ea0:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002ea4:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	2104      	movs	r1, #4
 8002eac:	f00e f8bb 	bl	8011026 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002eb0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002eb4:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002eb8:	2204      	movs	r2, #4
 8002eba:	2104      	movs	r1, #4
 8002ebc:	f00e f8b3 	bl	8011026 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002ec0:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002ec4:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002ec8:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f00e f86f 	bl	8010fb0 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002ed2:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002ed6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002eda:	2210      	movs	r2, #16
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff2b 	bl	8002d38 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002ee2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002ee6:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002eea:	2302      	movs	r3, #2
 8002eec:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ef0:	e03a      	b.n	8002f68 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002ef2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002efe:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002f0a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f0e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f12:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00e fc14 	bl	8011744 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002f1c:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f20:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f24:	2210      	movs	r2, #16
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff06 	bl	8002d38 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002f2c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f30:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002f34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f38:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002f3c:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002f40:	4611      	mov	r1, r2
 8002f42:	eeb0 0a47 	vmov.f32	s0, s14
 8002f46:	4618      	mov	r0, r3
 8002f48:	f00e fc76 	bl	8011838 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002f4c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f50:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002f54:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f00e f829 	bl	8010fb0 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f5e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f62:	3301      	adds	r3, #1
 8002f64:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002f68:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002f6c:	2b0a      	cmp	r3, #10
 8002f6e:	ddc0      	ble.n	8002ef2 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002f70:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002f74:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f78:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f7c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002f80:	ed93 0a00 	vldr	s0, [r3]
 8002f84:	4610      	mov	r0, r2
 8002f86:	f00e fc57 	bl	8011838 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002f8a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f8e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	6053      	str	r3, [r2, #4]
 8002f9a:	6093      	str	r3, [r2, #8]
 8002f9c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002f9e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002fa2:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	2104      	movs	r1, #4
 8002faa:	f00e f83c 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002fae:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002fb2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002fb6:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00e fbc2 	bl	8011744 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002fc0:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002fc4:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002fc8:	2201      	movs	r2, #1
 8002fca:	2104      	movs	r1, #4
 8002fcc:	f00e f82b 	bl	8011026 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002fd0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fd4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fd8:	edd3 7a00 	vldr	s15, [r3]
 8002fdc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002fe0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002fe4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fe8:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fec:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00e fc1e 	bl	8011838 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002ffc:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003000:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003004:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003008:	4618      	mov	r0, r3
 800300a:	f00d ffd1 	bl	8010fb0 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800300e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003012:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003016:	4618      	mov	r0, r3
 8003018:	2340      	movs	r3, #64	@ 0x40
 800301a:	461a      	mov	r2, r3
 800301c:	2100      	movs	r1, #0
 800301e:	f00e fd73 	bl	8011b08 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003022:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003026:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800302a:	2204      	movs	r2, #4
 800302c:	2104      	movs	r1, #4
 800302e:	f00d fffa 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003032:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003036:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800303a:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800303e:	4618      	mov	r0, r3
 8003040:	f00e fb80 	bl	8011744 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003044:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003048:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800304c:	461a      	mov	r2, r3
 800304e:	2300      	movs	r3, #0
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	6053      	str	r3, [r2, #4]
 8003054:	6093      	str	r3, [r2, #8]
 8003056:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003058:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800305c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003060:	2201      	movs	r2, #1
 8003062:	2104      	movs	r1, #4
 8003064:	f00d ffdf 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003068:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800306c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003070:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003074:	4618      	mov	r0, r3
 8003076:	f00e fb65 	bl	8011744 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800307a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800307e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003082:	edd3 7a00 	vldr	s15, [r3]
 8003086:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800308a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800308e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003092:	edd3 7a00 	vldr	s15, [r3]
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800309e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030a2:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80030aa:	4611      	mov	r1, r2
 80030ac:	eeb0 0a47 	vmov.f32	s0, s14
 80030b0:	4618      	mov	r0, r3
 80030b2:	f00e fbc1 	bl	8011838 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030b6:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030ba:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030be:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030c2:	4618      	mov	r0, r3
 80030c4:	f00d ff74 	bl	8010fb0 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80030c8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030cc:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80030d0:	4618      	mov	r0, r3
 80030d2:	2340      	movs	r3, #64	@ 0x40
 80030d4:	461a      	mov	r2, r3
 80030d6:	2100      	movs	r1, #0
 80030d8:	f00e fd16 	bl	8011b08 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80030dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80030e0:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80030e4:	2204      	movs	r2, #4
 80030e6:	2104      	movs	r1, #4
 80030e8:	f00d ff9d 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80030ec:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80030f0:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030f4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80030f8:	4618      	mov	r0, r3
 80030fa:	f00e fb23 	bl	8011744 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80030fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003102:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003106:	461a      	mov	r2, r3
 8003108:	2300      	movs	r3, #0
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	6053      	str	r3, [r2, #4]
 800310e:	6093      	str	r3, [r2, #8]
 8003110:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003112:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003116:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800311a:	2201      	movs	r2, #1
 800311c:	2104      	movs	r1, #4
 800311e:	f00d ff82 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003122:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003126:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800312a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800312e:	4618      	mov	r0, r3
 8003130:	f00e fb08 	bl	8011744 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003134:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003138:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800313c:	edd3 7a00 	vldr	s15, [r3]
 8003140:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003144:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003148:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003154:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003158:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003164:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800316c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003170:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003174:	4611      	mov	r1, r2
 8003176:	eeb0 0a47 	vmov.f32	s0, s14
 800317a:	4618      	mov	r0, r3
 800317c:	f00e fb5c 	bl	8011838 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003180:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003184:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003188:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800318c:	4618      	mov	r0, r3
 800318e:	f00d ff0f 	bl	8010fb0 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003192:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003196:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800319a:	4618      	mov	r0, r3
 800319c:	2340      	movs	r3, #64	@ 0x40
 800319e:	461a      	mov	r2, r3
 80031a0:	2100      	movs	r1, #0
 80031a2:	f00e fcb1 	bl	8011b08 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80031a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80031aa:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80031ae:	2204      	movs	r2, #4
 80031b0:	2104      	movs	r1, #4
 80031b2:	f00d ff38 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80031b6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80031ba:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031be:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031c2:	4618      	mov	r0, r3
 80031c4:	f00e fabe 	bl	8011744 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80031c8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031cc:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80031d0:	461a      	mov	r2, r3
 80031d2:	2300      	movs	r3, #0
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	6053      	str	r3, [r2, #4]
 80031d8:	6093      	str	r3, [r2, #8]
 80031da:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80031dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031e0:	f107 001c 	add.w	r0, r7, #28
 80031e4:	2201      	movs	r2, #1
 80031e6:	2104      	movs	r1, #4
 80031e8:	f00d ff1d 	bl	8011026 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80031ec:	f107 021c 	add.w	r2, r7, #28
 80031f0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80031f8:	4618      	mov	r0, r3
 80031fa:	f00e faa3 	bl	8011744 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80031fe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003202:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800320e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003212:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003222:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800322e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003232:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003278 <discretize_system_with_arm+0x4fc>
 8003242:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003246:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800324a:	f107 031c 	add.w	r3, r7, #28
 800324e:	4611      	mov	r1, r2
 8003250:	eeb0 0a47 	vmov.f32	s0, s14
 8003254:	4618      	mov	r0, r3
 8003256:	f00e faef 	bl	8011838 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800325a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800325e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003262:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003266:	4618      	mov	r0, r3
 8003268:	f00d fea2 	bl	8010fb0 <arm_mat_add_f32>
}
 800326c:	bf00      	nop
 800326e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003272:	46bd      	mov	sp, r7
 8003274:	bd90      	pop	{r4, r7, pc}
 8003276:	bf00      	nop
 8003278:	42f00000 	.word	0x42f00000

0800327c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b09e      	sub	sp, #120	@ 0x78
 8003280:	af00      	add	r7, sp, #0
 8003282:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003286:	edc7 0a08 	vstr	s1, [r7, #32]
 800328a:	ed87 1a07 	vstr	s2, [r7, #28]
 800328e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003292:	ed87 2a05 	vstr	s4, [r7, #20]
 8003296:	edc7 2a04 	vstr	s5, [r7, #16]
 800329a:	ed87 3a03 	vstr	s6, [r7, #12]
 800329e:	60b8      	str	r0, [r7, #8]
 80032a0:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80032a2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00e fc2c 	bl	8011b08 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80032b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80032be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80032c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032c8:	eef1 6a67 	vneg.f32	s13, s15
 80032cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80032d8:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80032dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80032e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032e4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80032e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80032ec:	ed97 7a07 	vldr	s14, [r7, #28]
 80032f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80032f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032fc:	eef1 6a67 	vneg.f32	s13, s15
 8003300:	ed97 7a08 	vldr	s14, [r7, #32]
 8003304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003308:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 800330c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003310:	eef1 6a67 	vneg.f32	s13, s15
 8003314:	ed97 7a08 	vldr	s14, [r7, #32]
 8003318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003324:	ed97 7a08 	vldr	s14, [r7, #32]
 8003328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003330:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003334:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003340:	f7ff fd1c 	bl	8002d7c <discretize_system_with_arm>
}
 8003344:	bf00      	nop
 8003346:	3778      	adds	r7, #120	@ 0x78
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	4613      	mov	r3, r2
 8003358:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a0b      	ldr	r2, [pc, #44]	@ (800338c <PWM_init+0x40>)
 800335e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003372:	68b8      	ldr	r0, [r7, #8]
 8003374:	f009 ff68 	bl	800d248 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	4619      	mov	r1, r3
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f00a f8af 	bl	800d4e0 <HAL_TIM_PWM_Start>
}
 8003382:	bf00      	nop
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	0a21fe80 	.word	0x0a21fe80

08003390 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003390:	b5b0      	push	{r4, r5, r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	ed87 0a02 	vstr	s0, [r7, #8]
 800339c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80033a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	d137      	bne.n	800341e <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <PWM_write_duty+0x32>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2200      	movs	r2, #0
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80033c0:	e0e1      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	889b      	ldrh	r3, [r3, #4]
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	d105      	bne.n	80033d6 <PWM_write_duty+0x46>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2300      	movs	r3, #0
 80033d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80033d4:	e0d7      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	889b      	ldrh	r3, [r3, #4]
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d105      	bne.n	80033ea <PWM_write_duty+0x5a>
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2300      	movs	r3, #0
 80033e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80033e8:	e0cd      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	889b      	ldrh	r3, [r3, #4]
 80033ee:	2b0c      	cmp	r3, #12
 80033f0:	d105      	bne.n	80033fe <PWM_write_duty+0x6e>
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2300      	movs	r3, #0
 80033fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80033fc:	e0c3      	b.n	8003586 <PWM_write_duty+0x1f6>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	889b      	ldrh	r3, [r3, #4]
 8003402:	2b10      	cmp	r3, #16
 8003404:	d105      	bne.n	8003412 <PWM_write_duty+0x82>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	2300      	movs	r3, #0
 800340e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003410:	e0b9      	b.n	8003586 <PWM_write_duty+0x1f6>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2300      	movs	r3, #0
 800341a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800341c:	e0b3      	b.n	8003586 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	ee07 3a90 	vmov	s15, r3
 8003426:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800342a:	ed97 7a02 	vldr	s14, [r7, #8]
 800342e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003436:	ee17 2a90 	vmov	r2, s15
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003446:	33fe      	adds	r3, #254	@ 0xfe
 8003448:	4a51      	ldr	r2, [pc, #324]	@ (8003590 <PWM_write_duty+0x200>)
 800344a:	fba2 2303 	umull	r2, r3, r2, r3
 800344e:	0bdb      	lsrs	r3, r3, #15
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	899b      	ldrh	r3, [r3, #12]
 800346a:	3301      	adds	r3, #1
 800346c:	ee07 3a90 	vmov	s15, r3
 8003470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003474:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003478:	ed97 7a02 	vldr	s14, [r7, #8]
 800347c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800348c:	ee17 3a90 	vmov	r3, s15
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	89db      	ldrh	r3, [r3, #14]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd f80e 	bl	80004bc <__aeabi_i2d>
 80034a0:	4604      	mov	r4, r0
 80034a2:	460d      	mov	r5, r1
 80034a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80034a8:	eef0 7ae7 	vabs.f32	s15, s15
 80034ac:	ee17 0a90 	vmov	r0, s15
 80034b0:	f7fd f816 	bl	80004e0 <__aeabi_f2d>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4620      	mov	r0, r4
 80034ba:	4629      	mov	r1, r5
 80034bc:	f7fd f868 	bl	8000590 <__aeabi_dmul>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <PWM_write_duty+0x204>)
 80034ce:	f7fd f989 	bl	80007e4 <__aeabi_ddiv>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f7fd fb1b 	bl	8000b14 <__aeabi_d2uiz>
 80034de:	4603      	mov	r3, r0
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	899a      	ldrh	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	89da      	ldrh	r2, [r3, #14]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	89da      	ldrh	r2, [r3, #14]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	889b      	ldrh	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <PWM_write_duty+0x190>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	6952      	ldr	r2, [r2, #20]
 800351c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800351e:	e032      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	889b      	ldrh	r3, [r3, #4]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d106      	bne.n	8003536 <PWM_write_duty+0x1a6>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003534:	e027      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	889b      	ldrh	r3, [r3, #4]
 800353a:	2b08      	cmp	r3, #8
 800353c:	d106      	bne.n	800354c <PWM_write_duty+0x1bc>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800354a:	e01c      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	889b      	ldrh	r3, [r3, #4]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d106      	bne.n	8003562 <PWM_write_duty+0x1d2>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003560:	e011      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	889b      	ldrh	r3, [r3, #4]
 8003566:	2b10      	cmp	r3, #16
 8003568:	d106      	bne.n	8003578 <PWM_write_duty+0x1e8>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003576:	e006      	b.n	8003586 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003584:	e7ff      	b.n	8003586 <PWM_write_duty+0x1f6>
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bdb0      	pop	{r4, r5, r7, pc}
 800358e:	bf00      	nop
 8003590:	80008001 	.word	0x80008001
 8003594:	40590000 	.word	0x40590000

08003598 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80035a4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80035a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b4:	d137      	bne.n	8003626 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	889b      	ldrh	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <PWM_write_range+0x32>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2200      	movs	r2, #0
 80035c6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80035c8:	e0e1      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	889b      	ldrh	r3, [r3, #4]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d105      	bne.n	80035de <PWM_write_range+0x46>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2300      	movs	r3, #0
 80035da:	6393      	str	r3, [r2, #56]	@ 0x38
 80035dc:	e0d7      	b.n	800378e <PWM_write_range+0x1f6>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	889b      	ldrh	r3, [r3, #4]
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d105      	bne.n	80035f2 <PWM_write_range+0x5a>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80035f0:	e0cd      	b.n	800378e <PWM_write_range+0x1f6>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	889b      	ldrh	r3, [r3, #4]
 80035f6:	2b0c      	cmp	r3, #12
 80035f8:	d105      	bne.n	8003606 <PWM_write_range+0x6e>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	2300      	movs	r3, #0
 8003602:	6413      	str	r3, [r2, #64]	@ 0x40
 8003604:	e0c3      	b.n	800378e <PWM_write_range+0x1f6>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	889b      	ldrh	r3, [r3, #4]
 800360a:	2b10      	cmp	r3, #16
 800360c:	d105      	bne.n	800361a <PWM_write_range+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	2300      	movs	r3, #0
 8003616:	6493      	str	r3, [r2, #72]	@ 0x48
 8003618:	e0b9      	b.n	800378e <PWM_write_range+0x1f6>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	2300      	movs	r3, #0
 8003622:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003624:	e0b3      	b.n	800378e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003632:	ed97 7a02 	vldr	s14, [r7, #8]
 8003636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363e:	ee17 2a90 	vmov	r2, s15
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800364e:	33fe      	adds	r3, #254	@ 0xfe
 8003650:	4a53      	ldr	r2, [pc, #332]	@ (80037a0 <PWM_write_range+0x208>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0bdb      	lsrs	r3, r3, #15
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	ee07 3a90 	vmov	s15, r3
 800366a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	899b      	ldrh	r3, [r3, #12]
 8003672:	3301      	adds	r3, #1
 8003674:	ee07 3a90 	vmov	s15, r3
 8003678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800367c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003680:	ed97 7a02 	vldr	s14, [r7, #8]
 8003684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003688:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800368c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003694:	ee17 3a90 	vmov	r3, s15
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	89db      	ldrh	r3, [r3, #14]
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc ff0a 	bl	80004bc <__aeabi_i2d>
 80036a8:	4604      	mov	r4, r0
 80036aa:	460d      	mov	r5, r1
 80036ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b0:	eef0 7ae7 	vabs.f32	s15, s15
 80036b4:	ee17 0a90 	vmov	r0, s15
 80036b8:	f7fc ff12 	bl	80004e0 <__aeabi_f2d>
 80036bc:	4602      	mov	r2, r0
 80036be:	460b      	mov	r3, r1
 80036c0:	4620      	mov	r0, r4
 80036c2:	4629      	mov	r1, r5
 80036c4:	f7fc ff64 	bl	8000590 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4610      	mov	r0, r2
 80036ce:	4619      	mov	r1, r3
 80036d0:	a331      	add	r3, pc, #196	@ (adr r3, 8003798 <PWM_write_range+0x200>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd f885 	bl	80007e4 <__aeabi_ddiv>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4610      	mov	r0, r2
 80036e0:	4619      	mov	r1, r3
 80036e2:	f7fd fa17 	bl	8000b14 <__aeabi_d2uiz>
 80036e6:	4603      	mov	r3, r0
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	461a      	mov	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	899a      	ldrh	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	89da      	ldrh	r2, [r3, #14]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	89da      	ldrh	r2, [r3, #14]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	889b      	ldrh	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d106      	bne.n	8003728 <PWM_write_range+0x190>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003726:	e032      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	889b      	ldrh	r3, [r3, #4]
 800372c:	2b04      	cmp	r3, #4
 800372e:	d106      	bne.n	800373e <PWM_write_range+0x1a6>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800373c:	e027      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	889b      	ldrh	r3, [r3, #4]
 8003742:	2b08      	cmp	r3, #8
 8003744:	d106      	bne.n	8003754 <PWM_write_range+0x1bc>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003752:	e01c      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	889b      	ldrh	r3, [r3, #4]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d106      	bne.n	800376a <PWM_write_range+0x1d2>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003768:	e011      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	889b      	ldrh	r3, [r3, #4]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d106      	bne.n	8003780 <PWM_write_range+0x1e8>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800377e:	e006      	b.n	800378e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800378c:	e7ff      	b.n	800378e <PWM_write_range+0x1f6>
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bdb0      	pop	{r4, r5, r7, pc}
 8003796:	bf00      	nop
 8003798:	00000000 	.word	0x00000000
 800379c:	40efffe0 	.word	0x40efffe0
 80037a0:	80008001 	.word	0x80008001

080037a4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6178      	str	r0, [r7, #20]
 80037ac:	6139      	str	r1, [r7, #16]
 80037ae:	60fa      	str	r2, [r7, #12]
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	ed87 0a01 	vstr	s0, [r7, #4]
 80037b6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	2200      	movs	r2, #0
 80037e2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003804:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	fb93 f2f2 	sdiv	r2, r3, r2
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	fb01 f202 	mul.w	r2, r1, r2
 8003814:	1a9b      	subs	r3, r3, r2
 8003816:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	2200      	movs	r2, #0
 8003822:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f04f 0200 	mov.w	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f04f 0200 	mov.w	r2, #0
 8003870:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003872:	213c      	movs	r1, #60	@ 0x3c
 8003874:	6938      	ldr	r0, [r7, #16]
 8003876:	f00a f8ef 	bl	800da58 <HAL_TIM_Encoder_Start>
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	0000      	movs	r0, r0
 8003884:	0000      	movs	r0, r0
	...

08003888 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003888:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	0fda      	lsrs	r2, r3, #31
 80038b0:	4413      	add	r3, r2
 80038b2:	105b      	asrs	r3, r3, #1
 80038b4:	461a      	mov	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4293      	cmp	r3, r2
 80038ba:	dd05      	ble.n	80038c8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e00e      	b.n	80038e6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	0fda      	lsrs	r2, r3, #31
 80038ce:	4413      	add	r3, r2
 80038d0:	105b      	asrs	r3, r3, #1
 80038d2:	425b      	negs	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4293      	cmp	r3, r2
 80038da:	da04      	bge.n	80038e6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	441a      	add	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003904:	ee07 3a90 	vmov	s15, r3
 8003908:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	ee07 3a90 	vmov	s15, r3
 8003914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003918:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fdd3 	bl	80004e0 <__aeabi_f2d>
 800393a:	4604      	mov	r4, r0
 800393c:	460d      	mov	r5, r1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800395a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800395e:	ee17 0a90 	vmov	r0, s15
 8003962:	f7fc fdbd 	bl	80004e0 <__aeabi_f2d>
 8003966:	a33c      	add	r3, pc, #240	@ (adr r3, 8003a58 <QEI_get_diff_count+0x1d0>)
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f7fc fe10 	bl	8000590 <__aeabi_dmul>
 8003970:	4602      	mov	r2, r0
 8003972:	460b      	mov	r3, r1
 8003974:	4690      	mov	r8, r2
 8003976:	4699      	mov	r9, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397c:	4618      	mov	r0, r3
 800397e:	f7fc fdaf 	bl	80004e0 <__aeabi_f2d>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4640      	mov	r0, r8
 8003988:	4649      	mov	r1, r9
 800398a:	f7fc fe01 	bl	8000590 <__aeabi_dmul>
 800398e:	4602      	mov	r2, r0
 8003990:	460b      	mov	r3, r1
 8003992:	4620      	mov	r0, r4
 8003994:	4629      	mov	r1, r5
 8003996:	f7fc fc45 	bl	8000224 <__adddf3>
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4610      	mov	r0, r2
 80039a0:	4619      	mov	r1, r3
 80039a2:	f7fd f8d7 	bl	8000b54 <__aeabi_d2f>
 80039a6:	4602      	mov	r2, r0
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fd95 	bl	80004e0 <__aeabi_f2d>
 80039b6:	4604      	mov	r4, r0
 80039b8:	460d      	mov	r5, r1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	ee07 3a90 	vmov	s15, r3
 80039ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039d6:	ee16 0a90 	vmov	r0, s13
 80039da:	f7fc fd81 	bl	80004e0 <__aeabi_f2d>
 80039de:	a31e      	add	r3, pc, #120	@ (adr r3, 8003a58 <QEI_get_diff_count+0x1d0>)
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	f7fc fdd4 	bl	8000590 <__aeabi_dmul>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	4690      	mov	r8, r2
 80039ee:	4699      	mov	r9, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fc fd73 	bl	80004e0 <__aeabi_f2d>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4640      	mov	r0, r8
 8003a00:	4649      	mov	r1, r9
 8003a02:	f7fc fdc5 	bl	8000590 <__aeabi_dmul>
 8003a06:	4602      	mov	r2, r0
 8003a08:	460b      	mov	r3, r1
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fc fd64 	bl	80004e0 <__aeabi_f2d>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	4649      	mov	r1, r9
 8003a20:	f7fc fdb6 	bl	8000590 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4620      	mov	r0, r4
 8003a2a:	4629      	mov	r1, r5
 8003a2c:	f7fc fbfa 	bl	8000224 <__adddf3>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4610      	mov	r0, r2
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7fd f88c 	bl	8000b54 <__aeabi_d2f>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	605a      	str	r2, [r3, #4]
}
 8003a4a:	bf00      	nop
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a54:	f3af 8000 	nop.w
 8003a58:	54442d18 	.word	0x54442d18
 8003a5c:	400921fb 	.word	0x400921fb

08003a60 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003a60:	b5b0      	push	{r4, r5, r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003a70:	fb02 f303 	mul.w	r3, r2, r3
 8003a74:	ee07 3a90 	vmov	s15, r3
 8003a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fc fd2a 	bl	80004e0 <__aeabi_f2d>
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	4b83      	ldr	r3, [pc, #524]	@ (8003ca0 <QEI_compute_data+0x240>)
 8003a92:	f7fc fd7d 	bl	8000590 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	461d      	mov	r5, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aaa:	ee17 0a90 	vmov	r0, s15
 8003aae:	f7fc fd17 	bl	80004e0 <__aeabi_f2d>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fc fe93 	bl	80007e4 <__aeabi_ddiv>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	4614      	mov	r4, r2
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fc fd08 	bl	80004e0 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fd5a 	bl	8000590 <__aeabi_dmul>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f7fd f836 	bl	8000b54 <__aeabi_d2f>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003af4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fcf0 	bl	80004e0 <__aeabi_f2d>
 8003b00:	a365      	add	r3, pc, #404	@ (adr r3, 8003c98 <QEI_compute_data+0x238>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fc fd43 	bl	8000590 <__aeabi_dmul>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4614      	mov	r4, r2
 8003b10:	461d      	mov	r5, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b1e:	ee17 0a90 	vmov	r0, s15
 8003b22:	f7fc fcdd 	bl	80004e0 <__aeabi_f2d>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	4629      	mov	r1, r5
 8003b2e:	f7fc fe59 	bl	80007e4 <__aeabi_ddiv>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4614      	mov	r4, r2
 8003b38:	461d      	mov	r5, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fc fcce 	bl	80004e0 <__aeabi_f2d>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4620      	mov	r0, r4
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	f7fc fd20 	bl	8000590 <__aeabi_dmul>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4610      	mov	r0, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7fc fffc 	bl	8000b54 <__aeabi_d2f>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fcba 	bl	80004e0 <__aeabi_f2d>
 8003b6c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003c98 <QEI_compute_data+0x238>)
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	f7fc fd0d 	bl	8000590 <__aeabi_dmul>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fcac 	bl	80004e0 <__aeabi_f2d>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7fc fcfe 	bl	8000590 <__aeabi_dmul>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4614      	mov	r4, r2
 8003b9a:	461d      	mov	r5, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ba8:	ee17 0a90 	vmov	r0, s15
 8003bac:	f7fc fc98 	bl	80004e0 <__aeabi_f2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f7fc fe14 	bl	80007e4 <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4614      	mov	r4, r2
 8003bc2:	461d      	mov	r5, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fc89 	bl	80004e0 <__aeabi_f2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc fcdb 	bl	8000590 <__aeabi_dmul>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fc ffb7 	bl	8000b54 <__aeabi_d2f>
 8003be6:	4602      	mov	r2, r0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c0c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c14:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c1c:	d00a      	beq.n	8003c34 <QEI_compute_data+0x1d4>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	e001      	b.n	8003c38 <QEI_compute_data+0x1d8>
 8003c34:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003ca4 <QEI_compute_data+0x244>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	ed93 7a04 	vldr	s14, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c4e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003c52:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5e:	d00a      	beq.n	8003c76 <QEI_compute_data+0x216>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	e001      	b.n	8003c7a <QEI_compute_data+0x21a>
 8003c76:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003ca4 <QEI_compute_data+0x244>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691a      	ldr	r2, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	615a      	str	r2, [r3, #20]
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bdb0      	pop	{r4, r5, r7, pc}
 8003c98:	54442d18 	.word	0x54442d18
 8003c9c:	400921fb 	.word	0x400921fb
 8003ca0:	404e0000 	.word	0x404e0000
 8003ca4:	00000000 	.word	0x00000000

08003ca8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	615a      	str	r2, [r3, #20]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08e      	sub	sp, #56	@ 0x38
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6178      	str	r0, [r7, #20]
 8003d1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003d20:	edc7 0a03 	vstr	s1, [r7, #12]
 8003d24:	ed87 1a02 	vstr	s2, [r7, #8]
 8003d28:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003d52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5e:	eef0 7ae7 	vabs.f32	s15, s15
 8003d62:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003d66:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	d503      	bpl.n	8003d84 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	22ff      	movs	r2, #255	@ 0xff
 8003d80:	741a      	strb	r2, [r3, #16]
 8003d82:	e002      	b.n	8003d8a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2201      	movs	r2, #1
 8003d88:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003d8a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003d8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d96:	d006      	beq.n	8003da6 <Trapezoidal_Generator+0x92>
 8003d98:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d9c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da4:	d104      	bne.n	8003db0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	60da      	str	r2, [r3, #12]
        return;
 8003dae:	e06f      	b.n	8003e90 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003db0:	edd7 6a02 	vldr	s13, [r7, #8]
 8003db4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dbc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dc4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003dc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dcc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ddc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003de4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003de8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003df0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003df4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003df8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003dfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e04:	db27      	blt.n	8003e56 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003e06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e0a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003e16:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e22:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003e2c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e30:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003e3e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e42:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e46:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	edc3 7a02 	vstr	s15, [r3, #8]
 8003e54:	e018      	b.n	8003e88 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003e56:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e62:	eeb0 0a66 	vmov.f32	s0, s13
 8003e66:	f00d ff6b 	bl	8011d40 <sqrtf>
 8003e6a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003e7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e7e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	60da      	str	r2, [r3, #12]
}
 8003e90:	3738      	adds	r7, #56	@ 0x38
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b08d      	sub	sp, #52	@ 0x34
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6178      	str	r0, [r7, #20]
 8003ea0:	6139      	str	r1, [r7, #16]
 8003ea2:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ea6:	edc7 0a02 	vstr	s1, [r7, #8]
 8003eaa:	ed87 1a01 	vstr	s2, [r7, #4]
 8003eae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003eb8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800413c <Trapezoidal_Evaluated+0x2a4>
 8003ebc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eda:	f200 811b 	bhi.w	8004114 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	7c1b      	ldrb	r3, [r3, #16]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ef2:	ed97 7a00 	vldr	s14, [r7]
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	ed93 7a00 	vldr	s14, [r3]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8003f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f12:	d109      	bne.n	8003f28 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	edd3 7a00 	vldr	s15, [r3]
 8003f1a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003f26:	e00c      	b.n	8003f42 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	7c1b      	ldrb	r3, [r3, #16]
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f36:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f3e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	edd3 7a00 	vldr	s15, [r3]
 8003f4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f56:	d824      	bhi.n	8003fa2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003f58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f5c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f78:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f8c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f9e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003fa0:	e0c6      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb6:	d830      	bhi.n	800401a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003fb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003fc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	edd3 7a00 	vldr	s15, [r3]
 8003fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8003fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fe0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ff4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ffc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f04f 0200 	mov.w	r2, #0
 8004016:	609a      	str	r2, [r3, #8]
}
 8004018:	e08a      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	edd3 7a02 	vldr	s15, [r3, #8]
 8004026:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	d900      	bls.n	8004032 <Trapezoidal_Evaluated+0x19a>
}
 8004030:	e07e      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004032:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004036:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800403a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	edd3 7a00 	vldr	s15, [r3]
 8004044:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	edd3 7a00 	vldr	s15, [r3]
 800404e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004052:	ed97 7a03 	vldr	s14, [r7, #12]
 8004056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800405a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	ed93 7a01 	vldr	s14, [r3, #4]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	edd3 7a00 	vldr	s15, [r3]
 800406e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	dd11      	ble.n	800409c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	ed93 7a01 	vldr	s14, [r3, #4]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004088:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800408c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004090:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004098:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	ed93 7a03 	vldr	s14, [r3, #12]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80040b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80040b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80040cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80040d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80040d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80040dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80040ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80040ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80040f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80040fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004104:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004108:	eef1 7a67 	vneg.f32	s15, s15
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004112:	e00d      	b.n	8004130 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2201      	movs	r2, #1
 8004118:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	3734      	adds	r7, #52	@ 0x34
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	3a83126f 	.word	0x3a83126f

08004140 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	ed87 0a01 	vstr	s0, [r7, #4]
 800414a:	4603      	mov	r3, r0
 800414c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	2b1a      	cmp	r3, #26
 8004152:	d018      	beq.n	8004186 <temperature_to_base+0x46>
 8004154:	2b1a      	cmp	r3, #26
 8004156:	dc1d      	bgt.n	8004194 <temperature_to_base+0x54>
 8004158:	2b18      	cmp	r3, #24
 800415a:	d002      	beq.n	8004162 <temperature_to_base+0x22>
 800415c:	2b19      	cmp	r3, #25
 800415e:	d003      	beq.n	8004168 <temperature_to_base+0x28>
 8004160:	e018      	b.n	8004194 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004162:	edd7 7a01 	vldr	s15, [r7, #4]
 8004166:	e017      	b.n	8004198 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004168:	edd7 7a01 	vldr	s15, [r7, #4]
 800416c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80041a8 <temperature_to_base+0x68>
 8004170:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004174:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004178:	ee27 7a87 	vmul.f32	s14, s15, s14
 800417c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004180:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004184:	e008      	b.n	8004198 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004186:	edd7 7a01 	vldr	s15, [r7, #4]
 800418a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80041ac <temperature_to_base+0x6c>
 800418e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004192:	e001      	b.n	8004198 <temperature_to_base+0x58>
        default:
            return value;
 8004194:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004198:	eeb0 0a67 	vmov.f32	s0, s15
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	42000000 	.word	0x42000000
 80041ac:	43889333 	.word	0x43889333

080041b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041ba:	4603      	mov	r3, r0
 80041bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	2b1a      	cmp	r3, #26
 80041c2:	d018      	beq.n	80041f6 <temperature_from_base+0x46>
 80041c4:	2b1a      	cmp	r3, #26
 80041c6:	dc1d      	bgt.n	8004204 <temperature_from_base+0x54>
 80041c8:	2b18      	cmp	r3, #24
 80041ca:	d002      	beq.n	80041d2 <temperature_from_base+0x22>
 80041cc:	2b19      	cmp	r3, #25
 80041ce:	d003      	beq.n	80041d8 <temperature_from_base+0x28>
 80041d0:	e018      	b.n	8004204 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80041d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041d6:	e017      	b.n	8004208 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80041d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80041e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80041e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004218 <temperature_from_base+0x68>
 80041f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80041f4:	e008      	b.n	8004208 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80041f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800421c <temperature_from_base+0x6c>
 80041fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004202:	e001      	b.n	8004208 <temperature_from_base+0x58>
        default:
            return value;
 8004204:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	42000000 	.word	0x42000000
 800421c:	43889333 	.word	0x43889333

08004220 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	e00a      	b.n	8004250 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b1a      	cmp	r3, #26
 8004254:	ddf1      	ble.n	800423a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a11      	ldr	r2, [pc, #68]	@ (80042a0 <init_length_converter+0x80>)
 800425a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <init_length_converter+0x84>)
 8004260:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004268:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <init_length_converter+0x88>)
 800426e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a0e      	ldr	r2, [pc, #56]	@ (80042ac <init_length_converter+0x8c>)
 8004274:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <init_length_converter+0x90>)
 800427a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a0d      	ldr	r2, [pc, #52]	@ (80042b4 <init_length_converter+0x94>)
 8004280:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0c      	ldr	r2, [pc, #48]	@ (80042b8 <init_length_converter+0x98>)
 8004286:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004294:	bf00      	nop
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	3a83126f 	.word	0x3a83126f
 80042a4:	3c23d70a 	.word	0x3c23d70a
 80042a8:	447a0000 	.word	0x447a0000
 80042ac:	3cd013a9 	.word	0x3cd013a9
 80042b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80042b4:	3f6a161e 	.word	0x3f6a161e
 80042b8:	44c92b02 	.word	0x44c92b02

080042bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	220a      	movs	r2, #10
 80042ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	e00a      	b.n	80042ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	3304      	adds	r3, #4
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3301      	adds	r3, #1
 80042ea:	60fb      	str	r3, [r7, #12]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b1a      	cmp	r3, #26
 80042f0:	ddf1      	ble.n	80042d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004330 <init_mass_converter+0x74>)
 80042f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004334 <init_mass_converter+0x78>)
 80042fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0b      	ldr	r2, [pc, #44]	@ (8004338 <init_mass_converter+0x7c>)
 800430a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a0b      	ldr	r2, [pc, #44]	@ (800433c <init_mass_converter+0x80>)
 8004310:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <init_mass_converter+0x84>)
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	358637bd 	.word	0x358637bd
 8004334:	3a83126f 	.word	0x3a83126f
 8004338:	447a0000 	.word	0x447a0000
 800433c:	3ce83d36 	.word	0x3ce83d36
 8004340:	3ee83d36 	.word	0x3ee83d36

08004344 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	220f      	movs	r2, #15
 8004356:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004358:	2300      	movs	r3, #0
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e00a      	b.n	8004374 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	3304      	adds	r3, #4
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3301      	adds	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b1a      	cmp	r3, #26
 8004378:	ddf1      	ble.n	800435e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a0a      	ldr	r2, [pc, #40]	@ (80043a8 <init_angle_converter+0x64>)
 800437e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <init_angle_converter+0x68>)
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	3c8efa35 	.word	0x3c8efa35
 80043ac:	3c80adfd 	.word	0x3c80adfd

080043b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2203      	movs	r2, #3
 80043bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2214      	movs	r2, #20
 80043c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e00a      	b.n	80043e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b1a      	cmp	r3, #26
 80043e4:	ddf1      	ble.n	80043ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a10      	ldr	r2, [pc, #64]	@ (800442c <init_time_converter+0x7c>)
 80043ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a10      	ldr	r2, [pc, #64]	@ (8004430 <init_time_converter+0x80>)
 80043f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004434 <init_time_converter+0x84>)
 80043f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0d      	ldr	r2, [pc, #52]	@ (8004438 <init_time_converter+0x88>)
 8004404:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a0c      	ldr	r2, [pc, #48]	@ (800443c <init_time_converter+0x8c>)
 800440a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a0c      	ldr	r2, [pc, #48]	@ (8004440 <init_time_converter+0x90>)
 8004410:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800441e:	bf00      	nop
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	3089705f 	.word	0x3089705f
 8004430:	358637bd 	.word	0x358637bd
 8004434:	3a83126f 	.word	0x3a83126f
 8004438:	42700000 	.word	0x42700000
 800443c:	45610000 	.word	0x45610000
 8004440:	47a8c000 	.word	0x47a8c000

08004444 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2218      	movs	r2, #24
 8004456:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e00a      	b.n	8004474 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	3304      	adds	r3, #4
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b1a      	cmp	r3, #26
 8004478:	ddf1      	ble.n	800445e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a05      	ldr	r2, [pc, #20]	@ (8004494 <init_temperature_converter+0x50>)
 800447e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a05      	ldr	r2, [pc, #20]	@ (8004498 <init_temperature_converter+0x54>)
 8004484:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	08004141 	.word	0x08004141
 8004498:	080041b1 	.word	0x080041b1

0800449c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff feba 	bl	8004220 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3378      	adds	r3, #120	@ 0x78
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff03 	bl	80042bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	33f0      	adds	r3, #240	@ 0xf0
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7ff ff42 	bl	8004344 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff72 	bl	80043b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff ffb6 	bl	8004444 <init_temperature_converter>
}
 80044d8:	bf00      	nop
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	2b1a      	cmp	r3, #26
 80044ee:	d803      	bhi.n	80044f8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	4a05      	ldr	r2, [pc, #20]	@ (8004508 <UnitConverter_get_unit_type+0x28>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	e000      	b.n	80044fa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000118 	.word	0x20000118

0800450c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	ed87 0a02 	vstr	s0, [r7, #8]
 8004518:	460b      	mov	r3, r1
 800451a:	71fb      	strb	r3, [r7, #7]
 800451c:	4613      	mov	r3, r2
 800451e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff ffdc 	bl	80044e0 <UnitConverter_get_unit_type>
 8004528:	4603      	mov	r3, r0
 800452a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 800452c:	79bb      	ldrb	r3, [r7, #6]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ffd6 	bl	80044e0 <UnitConverter_get_unit_type>
 8004534:	4603      	mov	r3, r0
 8004536:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004538:	7efa      	ldrb	r2, [r7, #27]
 800453a:	7ebb      	ldrb	r3, [r7, #26]
 800453c:	429a      	cmp	r2, r3
 800453e:	d002      	beq.n	8004546 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004540:	edd7 7a02 	vldr	s15, [r7, #8]
 8004544:	e03b      	b.n	80045be <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004546:	7efa      	ldrb	r2, [r7, #27]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455a:	2b00      	cmp	r3, #0
 800455c:	d009      	beq.n	8004572 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004562:	79fa      	ldrb	r2, [r7, #7]
 8004564:	4610      	mov	r0, r2
 8004566:	ed97 0a02 	vldr	s0, [r7, #8]
 800456a:	4798      	blx	r3
 800456c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004570:	e00c      	b.n	800458c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	edd3 7a00 	vldr	s15, [r3]
 8004580:	ed97 7a02 	vldr	s14, [r7, #8]
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004598:	79ba      	ldrb	r2, [r7, #6]
 800459a:	4610      	mov	r0, r2
 800459c:	ed97 0a07 	vldr	s0, [r7, #28]
 80045a0:	4798      	blx	r3
 80045a2:	eef0 7a40 	vmov.f32	s15, s0
 80045a6:	e00a      	b.n	80045be <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80045a8:	79bb      	ldrb	r3, [r7, #6]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	3304      	adds	r3, #4
 80045b2:	ed93 7a00 	vldr	s14, [r3]
 80045b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80045be:	eeb0 0a67 	vmov.f32	s0, s15
 80045c2:	3720      	adds	r7, #32
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80045d4:	460b      	mov	r3, r1
 80045d6:	71fb      	strb	r3, [r7, #7]
 80045d8:	4613      	mov	r3, r2
 80045da:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045dc:	79fb      	ldrb	r3, [r7, #7]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff7e 	bl	80044e0 <UnitConverter_get_unit_type>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d111      	bne.n	800460e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 80045ea:	79bb      	ldrb	r3, [r7, #6]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7ff ff77 	bl	80044e0 <UnitConverter_get_unit_type>
 80045f2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d10a      	bne.n	800460e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80045f8:	79ba      	ldrb	r2, [r7, #6]
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	4619      	mov	r1, r3
 80045fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7ff ff82 	bl	800450c <UnitConverter_convert>
 8004608:	eef0 7a40 	vmov.f32	s15, s0
 800460c:	e001      	b.n	8004612 <UnitConverter_angle+0x4a>
    }
    return value;
 800460e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08c      	sub	sp, #48	@ 0x30
 8004620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	2220      	movs	r2, #32
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f00d fa67 	bl	8011b08 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800463a:	4b39      	ldr	r3, [pc, #228]	@ (8004720 <MX_ADC1_Init+0x104>)
 800463c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004640:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004642:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004644:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800464a:	4b35      	ldr	r3, [pc, #212]	@ (8004720 <MX_ADC1_Init+0x104>)
 800464c:	2200      	movs	r2, #0
 800464e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004650:	4b33      	ldr	r3, [pc, #204]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004652:	2200      	movs	r2, #0
 8004654:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004656:	4b32      	ldr	r3, [pc, #200]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004658:	2200      	movs	r2, #0
 800465a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800465c:	4b30      	ldr	r3, [pc, #192]	@ (8004720 <MX_ADC1_Init+0x104>)
 800465e:	2201      	movs	r2, #1
 8004660:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004662:	4b2f      	ldr	r3, [pc, #188]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004664:	2204      	movs	r2, #4
 8004666:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004668:	4b2d      	ldr	r3, [pc, #180]	@ (8004720 <MX_ADC1_Init+0x104>)
 800466a:	2200      	movs	r2, #0
 800466c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800466e:	4b2c      	ldr	r3, [pc, #176]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004670:	2201      	movs	r2, #1
 8004672:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004674:	4b2a      	ldr	r3, [pc, #168]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004676:	2202      	movs	r2, #2
 8004678:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800467a:	4b29      	ldr	r3, [pc, #164]	@ (8004720 <MX_ADC1_Init+0x104>)
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004682:	4b27      	ldr	r3, [pc, #156]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004684:	2200      	movs	r2, #0
 8004686:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004688:	4b25      	ldr	r3, [pc, #148]	@ (8004720 <MX_ADC1_Init+0x104>)
 800468a:	2200      	movs	r2, #0
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800468e:	4b24      	ldr	r3, [pc, #144]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004696:	4b22      	ldr	r3, [pc, #136]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004698:	2200      	movs	r2, #0
 800469a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800469c:	4b20      	ldr	r3, [pc, #128]	@ (8004720 <MX_ADC1_Init+0x104>)
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046a4:	481e      	ldr	r0, [pc, #120]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046a6:	f005 fce1 	bl	800a06c <HAL_ADC_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80046b0:	f003 fd24 	bl	80080fc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80046b4:	2300      	movs	r3, #0
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80046b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046bc:	4619      	mov	r1, r3
 80046be:	4818      	ldr	r0, [pc, #96]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046c0:	f006 fe00 	bl	800b2c4 <HAL_ADCEx_MultiModeConfigChannel>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80046ca:	f003 fd17 	bl	80080fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80046ce:	4b15      	ldr	r3, [pc, #84]	@ (8004724 <MX_ADC1_Init+0x108>)
 80046d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80046d2:	2306      	movs	r3, #6
 80046d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80046d6:	2307      	movs	r3, #7
 80046d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80046da:	237f      	movs	r3, #127	@ 0x7f
 80046dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80046de:	2304      	movs	r3, #4
 80046e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	480d      	ldr	r0, [pc, #52]	@ (8004720 <MX_ADC1_Init+0x104>)
 80046ec:	f005 ff6c 	bl	800a5c8 <HAL_ADC_ConfigChannel>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80046f6:	f003 fd01 	bl	80080fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80046fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004728 <MX_ADC1_Init+0x10c>)
 80046fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80046fe:	230c      	movs	r3, #12
 8004700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004702:	1d3b      	adds	r3, r7, #4
 8004704:	4619      	mov	r1, r3
 8004706:	4806      	ldr	r0, [pc, #24]	@ (8004720 <MX_ADC1_Init+0x104>)
 8004708:	f005 ff5e 	bl	800a5c8 <HAL_ADC_ConfigChannel>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004712:	f003 fcf3 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004716:	bf00      	nop
 8004718:	3730      	adds	r7, #48	@ 0x30
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	200001b4 	.word	0x200001b4
 8004724:	19200040 	.word	0x19200040
 8004728:	1d500080 	.word	0x1d500080

0800472c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b09e      	sub	sp, #120	@ 0x78
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004734:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
 800473c:	605a      	str	r2, [r3, #4]
 800473e:	609a      	str	r2, [r3, #8]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	2254      	movs	r2, #84	@ 0x54
 800474a:	2100      	movs	r1, #0
 800474c:	4618      	mov	r0, r3
 800474e:	f00d f9db 	bl	8011b08 <memset>
  if(adcHandle->Instance==ADC1)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475a:	d15e      	bne.n	800481a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800475c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004760:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004762:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004766:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004768:	f107 0310 	add.w	r3, r7, #16
 800476c:	4618      	mov	r0, r3
 800476e:	f008 fab9 	bl	800cce4 <HAL_RCCEx_PeriphCLKConfig>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004778:	f003 fcc0 	bl	80080fc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800477c:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800477e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004780:	4a28      	ldr	r2, [pc, #160]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 8004782:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004788:	4b26      	ldr	r3, [pc, #152]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004794:	4b23      	ldr	r3, [pc, #140]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 8004796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004798:	4a22      	ldr	r2, [pc, #136]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 800479a:	f043 0304 	orr.w	r3, r3, #4
 800479e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047a0:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <HAL_ADC_MspInit+0xf8>)
 80047a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047ac:	2303      	movs	r3, #3
 80047ae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047b0:	2303      	movs	r3, #3
 80047b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047b4:	2300      	movs	r3, #0
 80047b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047bc:	4619      	mov	r1, r3
 80047be:	481a      	ldr	r0, [pc, #104]	@ (8004828 <HAL_ADC_MspInit+0xfc>)
 80047c0:	f007 faca 	bl	800bd58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80047c4:	4b19      	ldr	r3, [pc, #100]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <HAL_ADC_MspInit+0x104>)
 80047c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80047ca:	4b18      	ldr	r3, [pc, #96]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047cc:	2205      	movs	r2, #5
 80047ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047d0:	4b16      	ldr	r3, [pc, #88]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047d8:	2200      	movs	r2, #0
 80047da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047dc:	4b13      	ldr	r3, [pc, #76]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047de:	2280      	movs	r2, #128	@ 0x80
 80047e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047ea:	4b10      	ldr	r3, [pc, #64]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80047f2:	4b0e      	ldr	r3, [pc, #56]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047f4:	2220      	movs	r2, #32
 80047f6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80047f8:	4b0c      	ldr	r3, [pc, #48]	@ (800482c <HAL_ADC_MspInit+0x100>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047fe:	480b      	ldr	r0, [pc, #44]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004800:	f006 ff78 	bl	800b6f4 <HAL_DMA_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800480a:	f003 fc77 	bl	80080fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a06      	ldr	r2, [pc, #24]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004812:	655a      	str	r2, [r3, #84]	@ 0x54
 8004814:	4a05      	ldr	r2, [pc, #20]	@ (800482c <HAL_ADC_MspInit+0x100>)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800481a:	bf00      	nop
 800481c:	3778      	adds	r7, #120	@ 0x78
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	48000800 	.word	0x48000800
 800482c:	20000220 	.word	0x20000220
 8004830:	40020008 	.word	0x40020008

08004834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800483a:	4b22      	ldr	r3, [pc, #136]	@ (80048c4 <MX_DMA_Init+0x90>)
 800483c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800483e:	4a21      	ldr	r2, [pc, #132]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004840:	f043 0304 	orr.w	r3, r3, #4
 8004844:	6493      	str	r3, [r2, #72]	@ 0x48
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004852:	4b1c      	ldr	r3, [pc, #112]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004856:	4a1b      	ldr	r2, [pc, #108]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6493      	str	r3, [r2, #72]	@ 0x48
 800485e:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <MX_DMA_Init+0x90>)
 8004860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800486a:	2200      	movs	r2, #0
 800486c:	2100      	movs	r1, #0
 800486e:	200b      	movs	r0, #11
 8004870:	f006 ff0b 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004874:	200b      	movs	r0, #11
 8004876:	f006 ff22 	bl	800b6be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800487a:	2200      	movs	r2, #0
 800487c:	2100      	movs	r1, #0
 800487e:	200c      	movs	r0, #12
 8004880:	f006 ff03 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004884:	200c      	movs	r0, #12
 8004886:	f006 ff1a 	bl	800b6be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	200d      	movs	r0, #13
 8004890:	f006 fefb 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004894:	200d      	movs	r0, #13
 8004896:	f006 ff12 	bl	800b6be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	200e      	movs	r0, #14
 80048a0:	f006 fef3 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80048a4:	200e      	movs	r0, #14
 80048a6:	f006 ff0a 	bl	800b6be <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80048aa:	2200      	movs	r2, #0
 80048ac:	2100      	movs	r1, #0
 80048ae:	200f      	movs	r0, #15
 80048b0:	f006 feeb 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80048b4:	200f      	movs	r0, #15
 80048b6:	f006 ff02 	bl	800b6be <HAL_NVIC_EnableIRQ>

}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000

080048c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ce:	f107 0314 	add.w	r3, r7, #20
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	605a      	str	r2, [r3, #4]
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	60da      	str	r2, [r3, #12]
 80048dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048de:	4b75      	ldr	r3, [pc, #468]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e2:	4a74      	ldr	r2, [pc, #464]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048e4:	f043 0304 	orr.w	r3, r3, #4
 80048e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ea:	4b72      	ldr	r3, [pc, #456]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048f6:	4b6f      	ldr	r3, [pc, #444]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	4a6e      	ldr	r2, [pc, #440]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 80048fc:	f043 0320 	orr.w	r3, r3, #32
 8004900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004902:	4b6c      	ldr	r3, [pc, #432]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800490e:	4b69      	ldr	r3, [pc, #420]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004912:	4a68      	ldr	r2, [pc, #416]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004914:	f043 0301 	orr.w	r3, r3, #1
 8004918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800491a:	4b66      	ldr	r3, [pc, #408]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 800491c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	60bb      	str	r3, [r7, #8]
 8004924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004926:	4b63      	ldr	r3, [pc, #396]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	4a62      	ldr	r2, [pc, #392]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004932:	4b60      	ldr	r3, [pc, #384]	@ (8004ab4 <MX_GPIO_Init+0x1ec>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004936:	f003 0302 	and.w	r3, r3, #2
 800493a:	607b      	str	r3, [r7, #4]
 800493c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800493e:	2200      	movs	r2, #0
 8004940:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004948:	f007 fba0 	bl	800c08c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800494c:	2200      	movs	r2, #0
 800494e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004952:	4859      	ldr	r0, [pc, #356]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004954:	f007 fb9a 	bl	800c08c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004958:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800495c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800495e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004962:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	4619      	mov	r1, r3
 800496e:	4852      	ldr	r0, [pc, #328]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004970:	f007 f9f2 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004974:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	4619      	mov	r1, r3
 800498c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004990:	f007 f9e2 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004994:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800499a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800499e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4619      	mov	r1, r3
 80049aa:	4844      	ldr	r0, [pc, #272]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 80049ac:	f007 f9d4 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 80049b0:	2306      	movs	r3, #6
 80049b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049b8:	2302      	movs	r3, #2
 80049ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049bc:	f107 0314 	add.w	r3, r7, #20
 80049c0:	4619      	mov	r1, r3
 80049c2:	483e      	ldr	r0, [pc, #248]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 80049c4:	f007 f9c8 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80049c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80049cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d6:	2300      	movs	r3, #0
 80049d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4835      	ldr	r0, [pc, #212]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 80049e2:	f007 f9b9 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 80049e6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80049ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80049ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80049f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80049f2:	2302      	movs	r3, #2
 80049f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049f6:	f107 0314 	add.w	r3, r7, #20
 80049fa:	4619      	mov	r1, r3
 80049fc:	482e      	ldr	r0, [pc, #184]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 80049fe:	f007 f9ab 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4619      	mov	r1, r3
 8004a16:	4828      	ldr	r0, [pc, #160]	@ (8004ab8 <MX_GPIO_Init+0x1f0>)
 8004a18:	f007 f99e 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004a20:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004a2a:	f107 0314 	add.w	r3, r7, #20
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4822      	ldr	r0, [pc, #136]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a32:	f007 f991 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004a36:	2340      	movs	r3, #64	@ 0x40
 8004a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a40:	2301      	movs	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004a44:	f107 0314 	add.w	r3, r7, #20
 8004a48:	4619      	mov	r1, r3
 8004a4a:	481c      	ldr	r0, [pc, #112]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a4c:	f007 f984 	bl	800bd58 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004a50:	2380      	movs	r3, #128	@ 0x80
 8004a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a54:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	4619      	mov	r1, r3
 8004a64:	4815      	ldr	r0, [pc, #84]	@ (8004abc <MX_GPIO_Init+0x1f4>)
 8004a66:	f007 f977 	bl	800bd58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2006      	movs	r0, #6
 8004a70:	f006 fe0b 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004a74:	2006      	movs	r0, #6
 8004a76:	f006 fe22 	bl	800b6be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	200a      	movs	r0, #10
 8004a80:	f006 fe03 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004a84:	200a      	movs	r0, #10
 8004a86:	f006 fe1a 	bl	800b6be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2017      	movs	r0, #23
 8004a90:	f006 fdfb 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a94:	2017      	movs	r0, #23
 8004a96:	f006 fe12 	bl	800b6be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	2028      	movs	r0, #40	@ 0x28
 8004aa0:	f006 fdf3 	bl	800b68a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004aa4:	2028      	movs	r0, #40	@ 0x28
 8004aa6:	f006 fe0a 	bl	800b6be <HAL_NVIC_EnableIRQ>

}
 8004aaa:	bf00      	nop
 8004aac:	3728      	adds	r7, #40	@ 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	48000800 	.word	0x48000800
 8004abc:	48000400 	.word	0x48000400

08004ac0 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b096      	sub	sp, #88	@ 0x58
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004acc:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004ad6:	1d3b      	adds	r3, r7, #4
 8004ad8:	2201      	movs	r2, #1
 8004ada:	2101      	movs	r1, #1
 8004adc:	f00c faa3 	bl	8011026 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004aec:	4619      	mov	r1, r3
 8004aee:	4610      	mov	r0, r2
 8004af0:	f00c ff13 	bl	801191a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004b00:	4619      	mov	r1, r3
 8004b02:	4610      	mov	r0, r2
 8004b04:	f00c ff09 	bl	801191a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f00c feff 	bl	801191a <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004b28:	4619      	mov	r1, r3
 8004b2a:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f00c fe82 	bl	8011838 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004b46:	461a      	mov	r2, r3
 8004b48:	f00c fdfc 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f00c fa26 	bl	8010fb0 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b76:	461a      	mov	r2, r3
 8004b78:	f00c fde4 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004b8e:	461a      	mov	r2, r3
 8004b90:	f00c fdd8 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f00c fdcc 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f00c fe37 	bl	8011838 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004bdc:	461a      	mov	r2, r3
 8004bde:	f00c f9e7 	bl	8010fb0 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f00c fda5 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	f00c fd99 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004c24:	461a      	mov	r2, r3
 8004c26:	f00c f9c3 	bl	8010fb0 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f00c fa0c 	bl	8011056 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004c50:	461a      	mov	r2, r3
 8004c52:	f00c fd77 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f00c fd6b 	bl	8011744 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004c80:	461a      	mov	r2, r3
 8004c82:	f00c fd5f 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f00c fe03 	bl	80118a4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	f00c fd47 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004cc8:	461a      	mov	r2, r3
 8004cca:	f00c f971 	bl	8010fb0 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	f00c fd2f 	bl	8011744 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004ce6:	f107 0310 	add.w	r3, r7, #16
 8004cea:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004cee:	2204      	movs	r2, #4
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	f00c f998 	bl	8011026 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004d02:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004d06:	4619      	mov	r1, r3
 8004d08:	f00c fd1c 	bl	8011744 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004d12:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004d16:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f00c fdc2 	bl	80118a4 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004d2c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004d30:	4618      	mov	r0, r3
 8004d32:	f00c fd07 	bl	8011744 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004d46:	ee07 3a90 	vmov	s15, r3
}
 8004d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d4e:	3758      	adds	r7, #88	@ 0x58
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004d54:	b5b0      	push	{r4, r5, r7, lr}
 8004d56:	b0a4      	sub	sp, #144	@ 0x90
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6178      	str	r0, [r7, #20]
 8004d5c:	6139      	str	r1, [r7, #16]
 8004d5e:	60fa      	str	r2, [r7, #12]
 8004d60:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d64:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004d78:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d9c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004da0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004dae:	4bc6      	ldr	r3, [pc, #792]	@ (80050c8 <Kalman_Start+0x374>)
 8004db0:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004db4:	461d      	mov	r5, r3
 8004db6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004dc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004dca:	f107 031c 	add.w	r3, r7, #28
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	605a      	str	r2, [r3, #4]
 8004dd4:	609a      	str	r2, [r3, #8]
 8004dd6:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004de8:	e028      	b.n	8004e3c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004dea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4413      	add	r3, r2
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	6979      	ldr	r1, [r7, #20]
 8004df8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dfc:	3314      	adds	r3, #20
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	3390      	adds	r3, #144	@ 0x90
 8004e0c:	443b      	add	r3, r7
 8004e0e:	3b64      	subs	r3, #100	@ 0x64
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	6979      	ldr	r1, [r7, #20]
 8004e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e18:	3398      	adds	r3, #152	@ 0x98
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e26:	3304      	adds	r3, #4
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e36:	3301      	adds	r3, #1
 8004e38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e40:	2b0f      	cmp	r3, #15
 8004e42:	ddd2      	ble.n	8004dea <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004e44:	2300      	movs	r3, #0
 8004e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e4a:	e03a      	b.n	8004ec2 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004e4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	3390      	adds	r3, #144	@ 0x90
 8004e54:	443b      	add	r3, r7
 8004e56:	3b74      	subs	r3, #116	@ 0x74
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004e66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e78:	3324      	adds	r3, #36	@ 0x24
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004e80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	3390      	adds	r3, #144	@ 0x90
 8004e88:	443b      	add	r3, r7
 8004e8a:	3b14      	subs	r3, #20
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	6979      	ldr	r1, [r7, #20]
 8004e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e94:	3328      	adds	r3, #40	@ 0x28
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	440b      	add	r3, r1
 8004e9a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	3390      	adds	r3, #144	@ 0x90
 8004ea4:	443b      	add	r3, r7
 8004ea6:	3b24      	subs	r3, #36	@ 0x24
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb0:	332c      	adds	r3, #44	@ 0x2c
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec6:	2b03      	cmp	r3, #3
 8004ec8:	ddc0      	ble.n	8004e4c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	f00c f8a6 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	3310      	adds	r3, #16
 8004ee4:	2204      	movs	r2, #4
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	f00c f89d 	bl	8011026 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3350      	adds	r3, #80	@ 0x50
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	2104      	movs	r1, #4
 8004efa:	f00c f894 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	3390      	adds	r3, #144	@ 0x90
 8004f08:	2201      	movs	r2, #1
 8004f0a:	2104      	movs	r1, #4
 8004f0c:	f00c f88b 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	33a0      	adds	r3, #160	@ 0xa0
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	f00c f882 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	33b0      	adds	r3, #176	@ 0xb0
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2104      	movs	r1, #4
 8004f30:	f00c f879 	bl	8011026 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	33c8      	adds	r3, #200	@ 0xc8
 8004f3e:	2204      	movs	r2, #4
 8004f40:	2104      	movs	r1, #4
 8004f42:	f00c f870 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004f52:	2201      	movs	r2, #1
 8004f54:	2104      	movs	r1, #4
 8004f56:	f00c f866 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8004f66:	2204      	movs	r2, #4
 8004f68:	2101      	movs	r1, #1
 8004f6a:	f00c f85c 	bl	8011026 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	f00c f852 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f8e:	2204      	movs	r2, #4
 8004f90:	2104      	movs	r1, #4
 8004f92:	f00c f848 	bl	8011026 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	f00c f83e 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2104      	movs	r1, #4
 8004fba:	f00c f834 	bl	8011026 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8004fca:	2204      	movs	r2, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00c f82a 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8004fde:	2201      	movs	r2, #1
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	f00c f820 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	f00c f816 	bl	8011026 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005006:	2201      	movs	r2, #1
 8005008:	2104      	movs	r1, #4
 800500a:	f00c f80c 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800501a:	2201      	movs	r2, #1
 800501c:	2104      	movs	r1, #4
 800501e:	f00c f802 	bl	8011026 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800502e:	2201      	movs	r2, #1
 8005030:	2101      	movs	r1, #1
 8005032:	f00b fff8 	bl	8011026 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005042:	2201      	movs	r2, #1
 8005044:	2101      	movs	r1, #1
 8005046:	f00b ffee 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005056:	2201      	movs	r2, #1
 8005058:	2101      	movs	r1, #1
 800505a:	f00b ffe4 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800506a:	2201      	movs	r2, #1
 800506c:	2104      	movs	r1, #4
 800506e:	f00b ffda 	bl	8011026 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800507e:	2201      	movs	r2, #1
 8005080:	2101      	movs	r1, #1
 8005082:	f00b ffd0 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005092:	2204      	movs	r2, #4
 8005094:	2104      	movs	r1, #4
 8005096:	f00b ffc6 	bl	8011026 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	33c4      	adds	r3, #196	@ 0xc4
 80050a4:	2201      	movs	r2, #1
 80050a6:	2101      	movs	r1, #1
 80050a8:	f00b ffbd 	bl	8011026 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80050b8:	2201      	movs	r2, #1
 80050ba:	2101      	movs	r1, #1
 80050bc:	f00b ffb3 	bl	8011026 <arm_mat_init_f32>
}
 80050c0:	bf00      	nop
 80050c2:	3790      	adds	r7, #144	@ 0x90
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bdb0      	pop	{r4, r5, r7, pc}
 80050c8:	080139d8 	.word	0x080139d8

080050cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050d0:	f3bf 8f4f 	dsb	sy
}
 80050d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80050d6:	4b06      	ldr	r3, [pc, #24]	@ (80050f0 <__NVIC_SystemReset+0x24>)
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80050de:	4904      	ldr	r1, [pc, #16]	@ (80050f0 <__NVIC_SystemReset+0x24>)
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <__NVIC_SystemReset+0x28>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80050e6:	f3bf 8f4f 	dsb	sy
}
 80050ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80050ec:	bf00      	nop
 80050ee:	e7fd      	b.n	80050ec <__NVIC_SystemReset+0x20>
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	05fa0004 	.word	0x05fa0004

080050f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80050fe:	f004 fd00 	bl	8009b02 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005102:	f000 f88d 	bl	8005220 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005106:	f7ff fbdf 	bl	80048c8 <MX_GPIO_Init>
	MX_DMA_Init();
 800510a:	f7ff fb93 	bl	8004834 <MX_DMA_Init>
	MX_ADC1_Init();
 800510e:	f7ff fa85 	bl	800461c <MX_ADC1_Init>
	MX_TIM2_Init();
 8005112:	f003 ff0b 	bl	8008f2c <MX_TIM2_Init>
	MX_TIM3_Init();
 8005116:	f003 ff57 	bl	8008fc8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800511a:	f003 ffab 	bl	8009074 <MX_TIM4_Init>
	MX_TIM5_Init();
 800511e:	f003 ffff 	bl	8009120 <MX_TIM5_Init>
	MX_TIM8_Init();
 8005122:	f004 f853 	bl	80091cc <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005126:	f004 fb15 	bl	8009754 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 800512a:	f004 f90d 	bl	8009348 <MX_TIM16_Init>
	MX_TIM1_Init();
 800512e:	f003 fe69 	bl	8008e04 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8005132:	f004 fac5 	bl	80096c0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005136:	f002 ffe7 	bl	8008108 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 800513a:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <main+0xe4>)
 800513c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800513e:	4a28      	ldr	r2, [pc, #160]	@ (80051e0 <main+0xe8>)
 8005140:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005142:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <main+0xec>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005146:	4a28      	ldr	r2, [pc, #160]	@ (80051e8 <main+0xf0>)
 8005148:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800514a:	4b28      	ldr	r3, [pc, #160]	@ (80051ec <main+0xf4>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005150:	4b27      	ldr	r3, [pc, #156]	@ (80051f0 <main+0xf8>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005156:	4b27      	ldr	r3, [pc, #156]	@ (80051f4 <main+0xfc>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800515c:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <main+0x100>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005162:	4b26      	ldr	r3, [pc, #152]	@ (80051fc <main+0x104>)
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <main+0x108>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d032      	beq.n	80051d6 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005170:	2101      	movs	r1, #1
 8005172:	4824      	ldr	r0, [pc, #144]	@ (8005204 <main+0x10c>)
 8005174:	f006 ff72 	bl	800c05c <HAL_GPIO_ReadPin>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005184:	2140      	movs	r1, #64	@ 0x40
 8005186:	481f      	ldr	r0, [pc, #124]	@ (8005204 <main+0x10c>)
 8005188:	f006 ff68 	bl	800c05c <HAL_GPIO_ReadPin>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d018      	beq.n	80051d0 <main+0xd8>
 800519e:	79bb      	ldrb	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d015      	beq.n	80051d0 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80051a4:	4b16      	ldr	r3, [pc, #88]	@ (8005200 <main+0x108>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80051aa:	4b17      	ldr	r3, [pc, #92]	@ (8005208 <main+0x110>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80051b0:	4b16      	ldr	r3, [pc, #88]	@ (800520c <main+0x114>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80051b6:	4b16      	ldr	r3, [pc, #88]	@ (8005210 <main+0x118>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80051bc:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <main+0x11c>)
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80051c2:	4b15      	ldr	r3, [pc, #84]	@ (8005218 <main+0x120>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <main+0x124>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <main+0xde>

		} else {
			start_homing_sequence(true);
 80051d0:	2001      	movs	r0, #1
 80051d2:	f000 f871 	bl	80052b8 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80051d6:	f002 fd37 	bl	8007c48 <handle_b2_button_polling>
 80051da:	e7fc      	b.n	80051d6 <main+0xde>
 80051dc:	200004ac 	.word	0x200004ac
 80051e0:	20000280 	.word	0x20000280
 80051e4:	20000508 	.word	0x20000508
 80051e8:	200002c0 	.word	0x200002c0
 80051ec:	20000364 	.word	0x20000364
 80051f0:	2000036d 	.word	0x2000036d
 80051f4:	2000036c 	.word	0x2000036c
 80051f8:	20000368 	.word	0x20000368
 80051fc:	200003a0 	.word	0x200003a0
 8005200:	20000133 	.word	0x20000133
 8005204:	48000400 	.word	0x48000400
 8005208:	20000363 	.word	0x20000363
 800520c:	20000362 	.word	0x20000362
 8005210:	20000360 	.word	0x20000360
 8005214:	20000361 	.word	0x20000361
 8005218:	2000035c 	.word	0x2000035c
 800521c:	20000300 	.word	0x20000300

08005220 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005220:	b580      	push	{r7, lr}
 8005222:	b094      	sub	sp, #80	@ 0x50
 8005224:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005226:	f107 0318 	add.w	r3, r7, #24
 800522a:	2238      	movs	r2, #56	@ 0x38
 800522c:	2100      	movs	r1, #0
 800522e:	4618      	mov	r0, r3
 8005230:	f00c fc6a 	bl	8011b08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005234:	1d3b      	adds	r3, r7, #4
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	609a      	str	r2, [r3, #8]
 800523e:	60da      	str	r2, [r3, #12]
 8005240:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005242:	2000      	movs	r0, #0
 8005244:	f006 ff6c 	bl	800c120 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005248:	2302      	movs	r3, #2
 800524a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800524c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005252:	2340      	movs	r3, #64	@ 0x40
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005256:	2302      	movs	r3, #2
 8005258:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800525a:	2302      	movs	r3, #2
 800525c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800525e:	2304      	movs	r3, #4
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005262:	2355      	movs	r3, #85	@ 0x55
 8005264:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005266:	2302      	movs	r3, #2
 8005268:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800526a:	2302      	movs	r3, #2
 800526c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800526e:	2302      	movs	r3, #2
 8005270:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005272:	f107 0318 	add.w	r3, r7, #24
 8005276:	4618      	mov	r0, r3
 8005278:	f007 f806 	bl	800c288 <HAL_RCC_OscConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <SystemClock_Config+0x66>
		Error_Handler();
 8005282:	f002 ff3b 	bl	80080fc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005286:	230f      	movs	r3, #15
 8005288:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800528a:	2303      	movs	r3, #3
 800528c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	2104      	movs	r1, #4
 800529e:	4618      	mov	r0, r3
 80052a0:	f007 fb04 	bl	800c8ac <HAL_RCC_ClockConfig>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d001      	beq.n	80052ae <SystemClock_Config+0x8e>
		Error_Handler();
 80052aa:	f002 ff27 	bl	80080fc <Error_Handler>
	}
}
 80052ae:	bf00      	nop
 80052b0:	3750      	adds	r7, #80	@ 0x50
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 80052c2:	4b50      	ldr	r3, [pc, #320]	@ (8005404 <start_homing_sequence+0x14c>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 8098 	bne.w	80053fc <start_homing_sequence+0x144>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80052cc:	2101      	movs	r1, #1
 80052ce:	484e      	ldr	r0, [pc, #312]	@ (8005408 <start_homing_sequence+0x150>)
 80052d0:	f006 fec4 	bl	800c05c <HAL_GPIO_ReadPin>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	bf14      	ite	ne
 80052da:	2301      	movne	r3, #1
 80052dc:	2300      	moveq	r3, #0
 80052de:	73fb      	strb	r3, [r7, #15]
			UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80052e0:	2140      	movs	r1, #64	@ 0x40
 80052e2:	4849      	ldr	r0, [pc, #292]	@ (8005408 <start_homing_sequence+0x150>)
 80052e4:	f006 feba 	bl	800c05c <HAL_GPIO_ReadPin>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80052f4:	79fb      	ldrb	r3, [r7, #7]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d103      	bne.n	8005302 <start_homing_sequence+0x4a>
 80052fa:	4b44      	ldr	r3, [pc, #272]	@ (800540c <start_homing_sequence+0x154>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d02e      	beq.n	8005360 <start_homing_sequence+0xa8>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d018      	beq.n	800533a <start_homing_sequence+0x82>
 8005308:	7bbb      	ldrb	r3, [r7, #14]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d015      	beq.n	800533a <start_homing_sequence+0x82>
			// Already at home position - no need to home
			homing_active = false;
 800530e:	4b3d      	ldr	r3, [pc, #244]	@ (8005404 <start_homing_sequence+0x14c>)
 8005310:	2200      	movs	r2, #0
 8005312:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005314:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <start_homing_sequence+0x158>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 800531a:	4b3c      	ldr	r3, [pc, #240]	@ (800540c <start_homing_sequence+0x154>)
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005320:	4b3c      	ldr	r3, [pc, #240]	@ (8005414 <start_homing_sequence+0x15c>)
 8005322:	2200      	movs	r2, #0
 8005324:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005326:	4b3c      	ldr	r3, [pc, #240]	@ (8005418 <start_homing_sequence+0x160>)
 8005328:	2200      	movs	r2, #0
 800532a:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800532c:	4b3b      	ldr	r3, [pc, #236]	@ (800541c <start_homing_sequence+0x164>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005332:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <start_homing_sequence+0x168>)
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
			return;
 8005338:	e061      	b.n	80053fe <start_homing_sequence+0x146>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 800533a:	4b32      	ldr	r3, [pc, #200]	@ (8005404 <start_homing_sequence+0x14c>)
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005340:	4b37      	ldr	r3, [pc, #220]	@ (8005420 <start_homing_sequence+0x168>)
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005346:	4b35      	ldr	r3, [pc, #212]	@ (800541c <start_homing_sequence+0x164>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800534c:	4b31      	ldr	r3, [pc, #196]	@ (8005414 <start_homing_sequence+0x15c>)
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005352:	4b31      	ldr	r3, [pc, #196]	@ (8005418 <start_homing_sequence+0x160>)
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <start_homing_sequence+0x158>)
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
 800535e:	e04e      	b.n	80053fe <start_homing_sequence+0x146>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d018      	beq.n	8005398 <start_homing_sequence+0xe0>
 8005366:	7bbb      	ldrb	r3, [r7, #14]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d015      	beq.n	8005398 <start_homing_sequence+0xe0>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 800536c:	4b25      	ldr	r3, [pc, #148]	@ (8005404 <start_homing_sequence+0x14c>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005372:	4b27      	ldr	r3, [pc, #156]	@ (8005410 <start_homing_sequence+0x158>)
 8005374:	2200      	movs	r2, #0
 8005376:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 8005378:	4b24      	ldr	r3, [pc, #144]	@ (800540c <start_homing_sequence+0x154>)
 800537a:	2200      	movs	r2, #0
 800537c:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 800537e:	4b25      	ldr	r3, [pc, #148]	@ (8005414 <start_homing_sequence+0x15c>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005384:	4b24      	ldr	r3, [pc, #144]	@ (8005418 <start_homing_sequence+0x160>)
 8005386:	2200      	movs	r2, #0
 8005388:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800538a:	4b24      	ldr	r3, [pc, #144]	@ (800541c <start_homing_sequence+0x164>)
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005390:	4b23      	ldr	r3, [pc, #140]	@ (8005420 <start_homing_sequence+0x168>)
 8005392:	2200      	movs	r2, #0
 8005394:	701a      	strb	r2, [r3, #0]
			return;
 8005396:	e032      	b.n	80053fe <start_homing_sequence+0x146>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 8005398:	7bfb      	ldrb	r3, [r7, #15]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01b      	beq.n	80053d6 <start_homing_sequence+0x11e>
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	f083 0301 	eor.w	r3, r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <start_homing_sequence+0x11e>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80053aa:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <start_homing_sequence+0x14c>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <start_homing_sequence+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80053b6:	4b19      	ldr	r3, [pc, #100]	@ (800541c <start_homing_sequence+0x164>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80053bc:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <start_homing_sequence+0x15c>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80053c2:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <start_homing_sequence+0x160>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80053c8:	4b11      	ldr	r3, [pc, #68]	@ (8005410 <start_homing_sequence+0x158>)
 80053ca:	2207      	movs	r2, #7
 80053cc:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80053ce:	4b15      	ldr	r3, [pc, #84]	@ (8005424 <start_homing_sequence+0x16c>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	701a      	strb	r2, [r3, #0]
 80053d4:	e013      	b.n	80053fe <start_homing_sequence+0x146>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 80053d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005404 <start_homing_sequence+0x14c>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80053dc:	4b10      	ldr	r3, [pc, #64]	@ (8005420 <start_homing_sequence+0x168>)
 80053de:	2200      	movs	r2, #0
 80053e0:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80053e2:	4b0e      	ldr	r3, [pc, #56]	@ (800541c <start_homing_sequence+0x164>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80053e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005414 <start_homing_sequence+0x15c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80053ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005418 <start_homing_sequence+0x160>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80053f4:	4b06      	ldr	r3, [pc, #24]	@ (8005410 <start_homing_sequence+0x158>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	e000      	b.n	80053fe <start_homing_sequence+0x146>
		return;
 80053fc:	bf00      	nop
		}
	}
}
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000363 	.word	0x20000363
 8005408:	48000400 	.word	0x48000400
 800540c:	20000133 	.word	0x20000133
 8005410:	20000362 	.word	0x20000362
 8005414:	20000360 	.word	0x20000360
 8005418:	20000361 	.word	0x20000361
 800541c:	2000035c 	.word	0x2000035c
 8005420:	20000300 	.word	0x20000300
 8005424:	2000036e 	.word	0x2000036e

08005428 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	ed2d 8b02 	vpush	{d8}
 8005430:	b095      	sub	sp, #84	@ 0x54
 8005432:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005434:	4b97      	ldr	r3, [pc, #604]	@ (8005694 <update_homing_sequence+0x26c>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	f083 0301 	eor.w	r3, r3, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	f040 851b 	bne.w	8005e7a <update_homing_sequence+0xa52>
		return;

	switch (homing_state) {
 8005444:	4b94      	ldr	r3, [pc, #592]	@ (8005698 <update_homing_sequence+0x270>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	3b01      	subs	r3, #1
 800544a:	2b0a      	cmp	r3, #10
 800544c:	f200 8517 	bhi.w	8005e7e <update_homing_sequence+0xa56>
 8005450:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <update_homing_sequence+0x30>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005485 	.word	0x08005485
 800545c:	080054a9 	.word	0x080054a9
 8005460:	08005519 	.word	0x08005519
 8005464:	08005667 	.word	0x08005667
 8005468:	080056d9 	.word	0x080056d9
 800546c:	0800581f 	.word	0x0800581f
 8005470:	080058e5 	.word	0x080058e5
 8005474:	08005cb1 	.word	0x08005cb1
 8005478:	08005d17 	.word	0x08005d17
 800547c:	08005e4b 	.word	0x08005e4b
 8005480:	08005e77 	.word	0x08005e77
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005484:	f003 faaa 	bl	80089dc <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005488:	4b84      	ldr	r3, [pc, #528]	@ (800569c <update_homing_sequence+0x274>)
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005490:	4b83      	ldr	r3, [pc, #524]	@ (80056a0 <update_homing_sequence+0x278>)
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005498:	4b82      	ldr	r3, [pc, #520]	@ (80056a4 <update_homing_sequence+0x27c>)
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800549e:	4b7e      	ldr	r3, [pc, #504]	@ (8005698 <update_homing_sequence+0x270>)
 80054a0:	2202      	movs	r2, #2
 80054a2:	701a      	strb	r2, [r3, #0]
		break;
 80054a4:	f000 bcfe 	b.w	8005ea4 <update_homing_sequence+0xa7c>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80054a8:	4b7c      	ldr	r3, [pc, #496]	@ (800569c <update_homing_sequence+0x274>)
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80054b0:	4b7b      	ldr	r3, [pc, #492]	@ (80056a0 <update_homing_sequence+0x278>)
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80054b8:	4b7a      	ldr	r3, [pc, #488]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	3301      	adds	r3, #1
 80054be:	4a79      	ldr	r2, [pc, #484]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054c0:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80054c2:	4b78      	ldr	r3, [pc, #480]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80054ca:	f0c0 84da 	bcc.w	8005e82 <update_homing_sequence+0xa5a>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80054ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80054d2:	4875      	ldr	r0, [pc, #468]	@ (80056a8 <update_homing_sequence+0x280>)
 80054d4:	f006 fdc2 	bl	800c05c <HAL_GPIO_ReadPin>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2da      	uxtb	r2, r3
 80054e4:	4b71      	ldr	r3, [pc, #452]	@ (80056ac <update_homing_sequence+0x284>)
 80054e6:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 80054e8:	4b70      	ldr	r3, [pc, #448]	@ (80056ac <update_homing_sequence+0x284>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <update_homing_sequence+0xe6>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80054f2:	4b6c      	ldr	r3, [pc, #432]	@ (80056a4 <update_homing_sequence+0x27c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80054f8:	4b67      	ldr	r3, [pc, #412]	@ (8005698 <update_homing_sequence+0x270>)
 80054fa:	2204      	movs	r2, #4
 80054fc:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 80054fe:	4b6b      	ldr	r3, [pc, #428]	@ (80056ac <update_homing_sequence+0x284>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005504:	4b6a      	ldr	r3, [pc, #424]	@ (80056b0 <update_homing_sequence+0x288>)
 8005506:	2200      	movs	r2, #0
 8005508:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 800550a:	f000 bcba 	b.w	8005e82 <update_homing_sequence+0xa5a>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 800550e:	4b62      	ldr	r3, [pc, #392]	@ (8005698 <update_homing_sequence+0x270>)
 8005510:	2203      	movs	r2, #3
 8005512:	701a      	strb	r2, [r3, #0]
		break;
 8005514:	f000 bcb5 	b.w	8005e82 <update_homing_sequence+0xa5a>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005518:	4b60      	ldr	r3, [pc, #384]	@ (800569c <update_homing_sequence+0x274>)
 800551a:	edd3 7a07 	vldr	s15, [r3, #28]
 800551e:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80056b4 <update_homing_sequence+0x28c>
 8005522:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005526:	4b5d      	ldr	r3, [pc, #372]	@ (800569c <update_homing_sequence+0x274>)
 8005528:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800552c:	4b5b      	ldr	r3, [pc, #364]	@ (800569c <update_homing_sequence+0x274>)
 800552e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005532:	eeb0 0a67 	vmov.f32	s0, s15
 8005536:	4860      	ldr	r0, [pc, #384]	@ (80056b8 <update_homing_sequence+0x290>)
 8005538:	f7fb fe6e 	bl	8001218 <PID_CONTROLLER_Compute>
 800553c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005540:	4b5e      	ldr	r3, [pc, #376]	@ (80056bc <update_homing_sequence+0x294>)
 8005542:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	f7fb fabb 	bl	8000ac4 <__aeabi_d2iz>
 800554e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005550:	4b5a      	ldr	r3, [pc, #360]	@ (80056bc <update_homing_sequence+0x294>)
 8005552:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005556:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005558:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800555c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		prismatic_axis.command_pos = PWM_Satuation(
 800555e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005562:	f7fb faaf 	bl	8000ac4 <__aeabi_d2iz>
 8005566:	4603      	mov	r3, r0
 8005568:	4619      	mov	r1, r3
 800556a:	4620      	mov	r0, r4
 800556c:	eeb0 0a48 	vmov.f32	s0, s16
 8005570:	f7fb fdf0 	bl	8001154 <PWM_Satuation>
 8005574:	ee07 0a90 	vmov	s15, r0
 8005578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557c:	4b47      	ldr	r3, [pc, #284]	@ (800569c <update_homing_sequence+0x274>)
 800557e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005582:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005586:	484e      	ldr	r0, [pc, #312]	@ (80056c0 <update_homing_sequence+0x298>)
 8005588:	f7fc f984 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800558c:	eef0 7a40 	vmov.f32	s15, s0
 8005590:	4b42      	ldr	r3, [pc, #264]	@ (800569c <update_homing_sequence+0x274>)
 8005592:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005596:	4b4b      	ldr	r3, [pc, #300]	@ (80056c4 <update_homing_sequence+0x29c>)
 8005598:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800559c:	4b4a      	ldr	r3, [pc, #296]	@ (80056c8 <update_homing_sequence+0x2a0>)
 800559e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80055a2:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80056cc <update_homing_sequence+0x2a4>
 80055a6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80055aa:	eeb0 1a66 	vmov.f32	s2, s13
 80055ae:	eddf 0a48 	vldr	s1, [pc, #288]	@ 80056d0 <update_homing_sequence+0x2a8>
 80055b2:	eeb0 0a47 	vmov.f32	s0, s14
 80055b6:	4847      	ldr	r0, [pc, #284]	@ (80056d4 <update_homing_sequence+0x2ac>)
 80055b8:	f7fc f9ff 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80055bc:	eef0 7a40 	vmov.f32	s15, s0
 80055c0:	4b36      	ldr	r3, [pc, #216]	@ (800569c <update_homing_sequence+0x274>)
 80055c2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80055c6:	4b35      	ldr	r3, [pc, #212]	@ (800569c <update_homing_sequence+0x274>)
 80055c8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80055cc:	4b33      	ldr	r3, [pc, #204]	@ (800569c <update_homing_sequence+0x274>)
 80055ce:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80055d2:	4b32      	ldr	r3, [pc, #200]	@ (800569c <update_homing_sequence+0x274>)
 80055d4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80055d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e0:	4b2e      	ldr	r3, [pc, #184]	@ (800569c <update_homing_sequence+0x274>)
 80055e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055e6:	4b2d      	ldr	r3, [pc, #180]	@ (800569c <update_homing_sequence+0x274>)
 80055e8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80055ec:	4b33      	ldr	r3, [pc, #204]	@ (80056bc <update_homing_sequence+0x294>)
 80055ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80055f2:	4610      	mov	r0, r2
 80055f4:	4619      	mov	r1, r3
 80055f6:	f7fb fa65 	bl	8000ac4 <__aeabi_d2iz>
 80055fa:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80055fc:	4b2f      	ldr	r3, [pc, #188]	@ (80056bc <update_homing_sequence+0x294>)
 80055fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800560a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800560e:	f7fb fa59 	bl	8000ac4 <__aeabi_d2iz>
 8005612:	4603      	mov	r3, r0
 8005614:	4619      	mov	r1, r3
 8005616:	4620      	mov	r0, r4
 8005618:	eeb0 0a48 	vmov.f32	s0, s16
 800561c:	f7fb fd9a 	bl	8001154 <PWM_Satuation>
 8005620:	ee07 0a90 	vmov	s15, r0
 8005624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005628:	4b1c      	ldr	r3, [pc, #112]	@ (800569c <update_homing_sequence+0x274>)
 800562a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 800562e:	4b1f      	ldr	r3, [pc, #124]	@ (80056ac <update_homing_sequence+0x284>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 8426 	beq.w	8005e86 <update_homing_sequence+0xa5e>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 800563a:	4b18      	ldr	r3, [pc, #96]	@ (800569c <update_homing_sequence+0x274>)
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005642:	4b17      	ldr	r3, [pc, #92]	@ (80056a0 <update_homing_sequence+0x278>)
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800564a:	4b16      	ldr	r3, [pc, #88]	@ (80056a4 <update_homing_sequence+0x27c>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005650:	4b11      	ldr	r3, [pc, #68]	@ (8005698 <update_homing_sequence+0x270>)
 8005652:	2204      	movs	r2, #4
 8005654:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <update_homing_sequence+0x284>)
 8005658:	2200      	movs	r2, #0
 800565a:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 800565c:	4b14      	ldr	r3, [pc, #80]	@ (80056b0 <update_homing_sequence+0x288>)
 800565e:	2200      	movs	r2, #0
 8005660:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005662:	f000 bc10 	b.w	8005e86 <update_homing_sequence+0xa5e>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <update_homing_sequence+0x274>)
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800566e:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <update_homing_sequence+0x278>)
 8005670:	f04f 0200 	mov.w	r2, #0
 8005674:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <update_homing_sequence+0x27c>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3301      	adds	r3, #1
 800567c:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <update_homing_sequence+0x27c>)
 800567e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005680:	4b08      	ldr	r3, [pc, #32]	@ (80056a4 <update_homing_sequence+0x27c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005688:	f0c0 83ff 	bcc.w	8005e8a <update_homing_sequence+0xa62>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 800568c:	4b02      	ldr	r3, [pc, #8]	@ (8005698 <update_homing_sequence+0x270>)
 800568e:	2205      	movs	r2, #5
 8005690:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005692:	e3fa      	b.n	8005e8a <update_homing_sequence+0xa62>
 8005694:	20000363 	.word	0x20000363
 8005698:	20000362 	.word	0x20000362
 800569c:	20000280 	.word	0x20000280
 80056a0:	200002c0 	.word	0x200002c0
 80056a4:	20000358 	.word	0x20000358
 80056a8:	48000400 	.word	0x48000400
 80056ac:	20000361 	.word	0x20000361
 80056b0:	20000360 	.word	0x20000360
 80056b4:	437a0000 	.word	0x437a0000
 80056b8:	2000058c 	.word	0x2000058c
 80056bc:	20000080 	.word	0x20000080
 80056c0:	20000604 	.word	0x20000604
 80056c4:	20000508 	.word	0x20000508
 80056c8:	200004ac 	.word	0x200004ac
 80056cc:	447a0000 	.word	0x447a0000
 80056d0:	00000000 	.word	0x00000000
 80056d4:	20000608 	.word	0x20000608

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80056d8:	4b70      	ldr	r3, [pc, #448]	@ (800589c <update_homing_sequence+0x474>)
 80056da:	edd3 7a07 	vldr	s15, [r3, #28]
 80056de:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80058a0 <update_homing_sequence+0x478>
 80056e2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 80056e6:	4b6d      	ldr	r3, [pc, #436]	@ (800589c <update_homing_sequence+0x474>)
 80056e8:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80056ec:	4b6b      	ldr	r3, [pc, #428]	@ (800589c <update_homing_sequence+0x474>)
 80056ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80056f2:	eeb0 0a67 	vmov.f32	s0, s15
 80056f6:	486b      	ldr	r0, [pc, #428]	@ (80058a4 <update_homing_sequence+0x47c>)
 80056f8:	f7fb fd8e 	bl	8001218 <PID_CONTROLLER_Compute>
 80056fc:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005700:	4b69      	ldr	r3, [pc, #420]	@ (80058a8 <update_homing_sequence+0x480>)
 8005702:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005706:	4610      	mov	r0, r2
 8005708:	4619      	mov	r1, r3
 800570a:	f7fb f9db 	bl	8000ac4 <__aeabi_d2iz>
 800570e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005710:	4b65      	ldr	r3, [pc, #404]	@ (80058a8 <update_homing_sequence+0x480>)
 8005712:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005716:	61ba      	str	r2, [r7, #24]
 8005718:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800571c:	61fb      	str	r3, [r7, #28]
		prismatic_axis.command_pos = PWM_Satuation(
 800571e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005722:	f7fb f9cf 	bl	8000ac4 <__aeabi_d2iz>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	eeb0 0a48 	vmov.f32	s0, s16
 8005730:	f7fb fd10 	bl	8001154 <PWM_Satuation>
 8005734:	ee07 0a90 	vmov	s15, r0
 8005738:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800573c:	4b57      	ldr	r3, [pc, #348]	@ (800589c <update_homing_sequence+0x474>)
 800573e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005742:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005746:	4859      	ldr	r0, [pc, #356]	@ (80058ac <update_homing_sequence+0x484>)
 8005748:	f7fc f8a4 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800574c:	eef0 7a40 	vmov.f32	s15, s0
 8005750:	4b52      	ldr	r3, [pc, #328]	@ (800589c <update_homing_sequence+0x474>)
 8005752:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005756:	4b56      	ldr	r3, [pc, #344]	@ (80058b0 <update_homing_sequence+0x488>)
 8005758:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800575c:	4b55      	ldr	r3, [pc, #340]	@ (80058b4 <update_homing_sequence+0x48c>)
 800575e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005762:	ed9f 6a55 	vldr	s12, [pc, #340]	@ 80058b8 <update_homing_sequence+0x490>
 8005766:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800576a:	eeb0 1a66 	vmov.f32	s2, s13
 800576e:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80058bc <update_homing_sequence+0x494>
 8005772:	eeb0 0a47 	vmov.f32	s0, s14
 8005776:	4852      	ldr	r0, [pc, #328]	@ (80058c0 <update_homing_sequence+0x498>)
 8005778:	f7fc f91f 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 800577c:	eef0 7a40 	vmov.f32	s15, s0
 8005780:	4b46      	ldr	r3, [pc, #280]	@ (800589c <update_homing_sequence+0x474>)
 8005782:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005786:	4b45      	ldr	r3, [pc, #276]	@ (800589c <update_homing_sequence+0x474>)
 8005788:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800578c:	4b43      	ldr	r3, [pc, #268]	@ (800589c <update_homing_sequence+0x474>)
 800578e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005792:	4b42      	ldr	r3, [pc, #264]	@ (800589c <update_homing_sequence+0x474>)
 8005794:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800579c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057a0:	4b3e      	ldr	r3, [pc, #248]	@ (800589c <update_homing_sequence+0x474>)
 80057a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057a6:	4b3d      	ldr	r3, [pc, #244]	@ (800589c <update_homing_sequence+0x474>)
 80057a8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80057ac:	4b3e      	ldr	r3, [pc, #248]	@ (80058a8 <update_homing_sequence+0x480>)
 80057ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fb f985 	bl	8000ac4 <__aeabi_d2iz>
 80057ba:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80057bc:	4b3a      	ldr	r3, [pc, #232]	@ (80058a8 <update_homing_sequence+0x480>)
 80057be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057c2:	613a      	str	r2, [r7, #16]
 80057c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80057c8:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80057ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057ce:	f7fb f979 	bl	8000ac4 <__aeabi_d2iz>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4619      	mov	r1, r3
 80057d6:	4620      	mov	r0, r4
 80057d8:	eeb0 0a48 	vmov.f32	s0, s16
 80057dc:	f7fb fcba 	bl	8001154 <PWM_Satuation>
 80057e0:	ee07 0a90 	vmov	s15, r0
 80057e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e8:	4b2c      	ldr	r3, [pc, #176]	@ (800589c <update_homing_sequence+0x474>)
 80057ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80057ee:	4b35      	ldr	r3, [pc, #212]	@ (80058c4 <update_homing_sequence+0x49c>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 834a 	beq.w	8005e8e <update_homing_sequence+0xa66>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80057fa:	4b28      	ldr	r3, [pc, #160]	@ (800589c <update_homing_sequence+0x474>)
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <update_homing_sequence+0x4a0>)
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800580a:	4b30      	ldr	r3, [pc, #192]	@ (80058cc <update_homing_sequence+0x4a4>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005810:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005812:	2206      	movs	r2, #6
 8005814:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005816:	4b2b      	ldr	r3, [pc, #172]	@ (80058c4 <update_homing_sequence+0x49c>)
 8005818:	2200      	movs	r2, #0
 800581a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800581c:	e337      	b.n	8005e8e <update_homing_sequence+0xa66>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 800581e:	4b1f      	ldr	r3, [pc, #124]	@ (800589c <update_homing_sequence+0x474>)
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005826:	4b28      	ldr	r3, [pc, #160]	@ (80058c8 <update_homing_sequence+0x4a0>)
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800582e:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <update_homing_sequence+0x4a4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3301      	adds	r3, #1
 8005834:	4a25      	ldr	r2, [pc, #148]	@ (80058cc <update_homing_sequence+0x4a4>)
 8005836:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005838:	4b24      	ldr	r3, [pc, #144]	@ (80058cc <update_homing_sequence+0x4a4>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005840:	f0c0 8327 	bcc.w	8005e92 <update_homing_sequence+0xa6a>
			if (first_startup) {
 8005844:	4b23      	ldr	r3, [pc, #140]	@ (80058d4 <update_homing_sequence+0x4ac>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01f      	beq.n	800588c <update_homing_sequence+0x464>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800584c:	2140      	movs	r1, #64	@ 0x40
 800584e:	4822      	ldr	r0, [pc, #136]	@ (80058d8 <update_homing_sequence+0x4b0>)
 8005850:	f006 fc04 	bl	800c05c <HAL_GPIO_ReadPin>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

				if (prox_detected) {
 8005862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005866:	2b00      	cmp	r3, #0
 8005868:	d009      	beq.n	800587e <update_homing_sequence+0x456>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 800586a:	4b18      	ldr	r3, [pc, #96]	@ (80058cc <update_homing_sequence+0x4a4>)
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005870:	4b17      	ldr	r3, [pc, #92]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005872:	220a      	movs	r2, #10
 8005874:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005876:	4b19      	ldr	r3, [pc, #100]	@ (80058dc <update_homing_sequence+0x4b4>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 800587c:	e309      	b.n	8005e92 <update_homing_sequence+0xa6a>
					homing_state = HOMING_REV_CW_TO_PROX1;
 800587e:	4b14      	ldr	r3, [pc, #80]	@ (80058d0 <update_homing_sequence+0x4a8>)
 8005880:	2209      	movs	r2, #9
 8005882:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005884:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <update_homing_sequence+0x4b4>)
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
		break;
 800588a:	e302      	b.n	8005e92 <update_homing_sequence+0xa6a>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 800588c:	4b10      	ldr	r3, [pc, #64]	@ (80058d0 <update_homing_sequence+0x4a8>)
 800588e:	2207      	movs	r2, #7
 8005890:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005892:	4b13      	ldr	r3, [pc, #76]	@ (80058e0 <update_homing_sequence+0x4b8>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
		break;
 8005898:	e2fb      	b.n	8005e92 <update_homing_sequence+0xa6a>
 800589a:	bf00      	nop
 800589c:	20000280 	.word	0x20000280
 80058a0:	c37a0000 	.word	0xc37a0000
 80058a4:	2000058c 	.word	0x2000058c
 80058a8:	20000080 	.word	0x20000080
 80058ac:	20000604 	.word	0x20000604
 80058b0:	20000508 	.word	0x20000508
 80058b4:	200004ac 	.word	0x200004ac
 80058b8:	447a0000 	.word	0x447a0000
 80058bc:	00000000 	.word	0x00000000
 80058c0:	20000608 	.word	0x20000608
 80058c4:	20000360 	.word	0x20000360
 80058c8:	200002c0 	.word	0x200002c0
 80058cc:	20000358 	.word	0x20000358
 80058d0:	20000362 	.word	0x20000362
 80058d4:	20000133 	.word	0x20000133
 80058d8:	48000400 	.word	0x48000400
 80058dc:	2000035c 	.word	0x2000035c
 80058e0:	2000036e 	.word	0x2000036e

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 80058e4:	4bc4      	ldr	r3, [pc, #784]	@ (8005bf8 <update_homing_sequence+0x7d0>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f083 0301 	eor.w	r3, r3, #1
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d06c      	beq.n	80059cc <update_homing_sequence+0x5a4>
			// Clear/initialize the static structures
			memset(&revZeroEva, 0, sizeof(Trapezoidal_EvaStruct));
 80058f2:	2214      	movs	r2, #20
 80058f4:	2100      	movs	r1, #0
 80058f6:	48c1      	ldr	r0, [pc, #772]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80058f8:	f00c f906 	bl	8011b08 <memset>
			memset(&revZeroGen, 0, sizeof(Trapezoidal_GenStruct));
 80058fc:	2214      	movs	r2, #20
 80058fe:	2100      	movs	r1, #0
 8005900:	48bf      	ldr	r0, [pc, #764]	@ (8005c00 <update_homing_sequence+0x7d8>)
 8005902:	f00c f901 	bl	8011b08 <memset>

			// Get current position and calculate shortest path to 0 degrees
			float current_rev_pos = revolute_encoder.rads;
 8005906:	4bbf      	ldr	r3, [pc, #764]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
			float normalized_current = normalize_angle(current_rev_pos);
 800590c:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 8005910:	f000 faec 	bl	8005eec <normalize_angle>
 8005914:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
			float current_deg = normalized_current * 180.0f / PI;
 8005918:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800591c:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005c08 <update_homing_sequence+0x7e0>
 8005920:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005924:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8005c0c <update_homing_sequence+0x7e4>
 8005928:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800592c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

			// Calculate shortest movement to 0 degrees
			float target_deg = 0.0f;
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	63fb      	str	r3, [r7, #60]	@ 0x3c
			float movement_deg = calculate_movement_deg(current_deg,
 8005936:	edd7 0a0f 	vldr	s1, [r7, #60]	@ 0x3c
 800593a:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800593e:	f000 fafb 	bl	8005f38 <calculate_movement_deg>
 8005942:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
					target_deg);

			// Convert movement to radians and apply to absolute position
			float movement_rad = movement_deg * PI / 180.0f;
 8005946:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800594a:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8005c0c <update_homing_sequence+0x7e4>
 800594e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005952:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8005c08 <update_homing_sequence+0x7e0>
 8005956:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800595a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

			// Store initial and target positions
			rev_zero_initial_pos = current_rev_pos;
 800595e:	4aac      	ldr	r2, [pc, #688]	@ (8005c10 <update_homing_sequence+0x7e8>)
 8005960:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005962:	6013      	str	r3, [r2, #0]
			rev_zero_target_pos = current_rev_pos + movement_rad;
 8005964:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005968:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800596c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005970:	4ba8      	ldr	r3, [pc, #672]	@ (8005c14 <update_homing_sequence+0x7ec>)
 8005972:	edc3 7a00 	vstr	s15, [r3]

			// Generate trajectory from current position to calculated target
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005976:	4ba6      	ldr	r3, [pc, #664]	@ (8005c10 <update_homing_sequence+0x7e8>)
 8005978:	ed93 8a00 	vldr	s16, [r3]
 800597c:	4ba5      	ldr	r3, [pc, #660]	@ (8005c14 <update_homing_sequence+0x7ec>)
 800597e:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005982:	4ba5      	ldr	r3, [pc, #660]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005984:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f8e2 	bl	8000b54 <__aeabi_d2f>
 8005990:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005992:	4ba1      	ldr	r3, [pc, #644]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005994:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Generator(&revZeroGen, rev_zero_initial_pos,
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f7fb f8da 	bl	8000b54 <__aeabi_d2f>
 80059a0:	4603      	mov	r3, r0
 80059a2:	ee01 3a90 	vmov	s3, r3
 80059a6:	ee01 4a10 	vmov	s2, r4
 80059aa:	eef0 0a68 	vmov.f32	s1, s17
 80059ae:	eeb0 0a48 	vmov.f32	s0, s16
 80059b2:	4893      	ldr	r0, [pc, #588]	@ (8005c00 <update_homing_sequence+0x7d8>)
 80059b4:	f7fe f9ae 	bl	8003d14 <Trapezoidal_Generator>

			// Reset trajectory evaluation
			revZeroEva.t = 0.0f;
 80059b8:	4b90      	ldr	r3, [pc, #576]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	60da      	str	r2, [r3, #12]
			revZeroEva.isFinised = false;
 80059c0:	4b8e      	ldr	r3, [pc, #568]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	741a      	strb	r2, [r3, #16]

			rev_to_zero_trajectory_started = true;
 80059c6:	4b8c      	ldr	r3, [pc, #560]	@ (8005bf8 <update_homing_sequence+0x7d0>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
		}

		// Update trajectory
		if (!revZeroEva.isFinised) {
 80059cc:	4b8b      	ldr	r3, [pc, #556]	@ (8005bfc <update_homing_sequence+0x7d4>)
 80059ce:	7c1b      	ldrb	r3, [r3, #16]
 80059d0:	f083 0301 	eor.w	r3, r3, #1
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 825d 	beq.w	8005e96 <update_homing_sequence+0xa6e>
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005c10 <update_homing_sequence+0x7e8>)
 80059de:	ed93 8a00 	vldr	s16, [r3]
 80059e2:	4b8c      	ldr	r3, [pc, #560]	@ (8005c14 <update_homing_sequence+0x7ec>)
 80059e4:	edd3 8a00 	vldr	s17, [r3]
					rev_zero_initial_pos, rev_zero_target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 80059e8:	4b8b      	ldr	r3, [pc, #556]	@ (8005c18 <update_homing_sequence+0x7f0>)
 80059ea:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fb f8af 	bl	8000b54 <__aeabi_d2f>
 80059f6:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80059f8:	4b87      	ldr	r3, [pc, #540]	@ (8005c18 <update_homing_sequence+0x7f0>)
 80059fa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revZeroGen, &revZeroEva,
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	f7fb f8a7 	bl	8000b54 <__aeabi_d2f>
 8005a06:	4603      	mov	r3, r0
 8005a08:	ee01 3a90 	vmov	s3, r3
 8005a0c:	ee01 4a10 	vmov	s2, r4
 8005a10:	eef0 0a68 	vmov.f32	s1, s17
 8005a14:	eeb0 0a48 	vmov.f32	s0, s16
 8005a18:	4978      	ldr	r1, [pc, #480]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a1a:	4879      	ldr	r0, [pc, #484]	@ (8005c00 <update_homing_sequence+0x7d8>)
 8005a1c:	f7fe fa3c 	bl	8003e98 <Trapezoidal_Evaluated>

			revolute_axis.position = revZeroEva.setposition;
 8005a20:	4b76      	ldr	r3, [pc, #472]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a7d      	ldr	r2, [pc, #500]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a26:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revZeroEva.setvelocity;
 8005a28:	4b74      	ldr	r3, [pc, #464]	@ (8005bfc <update_homing_sequence+0x7d4>)
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a7b      	ldr	r2, [pc, #492]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a2e:	6053      	str	r3, [r2, #4]

			// Use normal revolute control with trajectory
			revolute_axis.pos_error = revolute_axis.position
 8005a30:	4b7a      	ldr	r3, [pc, #488]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a32:	ed93 8a00 	vldr	s16, [r3]
					- normalize_angle(revolute_encoder.rads);
 8005a36:	4b73      	ldr	r3, [pc, #460]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005a38:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a40:	f000 fa54 	bl	8005eec <normalize_angle>
 8005a44:	eef0 7a40 	vmov.f32	s15, s0
 8005a48:	ee78 7a67 	vsub.f32	s15, s16, s15
			revolute_axis.pos_error = revolute_axis.position
 8005a4c:	4b73      	ldr	r3, [pc, #460]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a4e:	edc3 7a05 	vstr	s15, [r3, #20]

			// Ensure error uses the shortest path for control
			if (revolute_axis.pos_error > PI) {
 8005a52:	4b72      	ldr	r3, [pc, #456]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a54:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a58:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005c0c <update_homing_sequence+0x7e4>
 8005a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a64:	dd09      	ble.n	8005a7a <update_homing_sequence+0x652>
				revolute_axis.pos_error -= 2.0f * PI;
 8005a66:	4b6d      	ldr	r3, [pc, #436]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a68:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a6c:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8005c20 <update_homing_sequence+0x7f8>
 8005a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a74:	4b69      	ldr	r3, [pc, #420]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a76:	edc3 7a05 	vstr	s15, [r3, #20]
			}
			if (revolute_axis.pos_error < -PI) {
 8005a7a:	4b68      	ldr	r3, [pc, #416]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a7c:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a80:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005c24 <update_homing_sequence+0x7fc>
 8005a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8c:	d509      	bpl.n	8005aa2 <update_homing_sequence+0x67a>
				revolute_axis.pos_error += 2.0f * PI;
 8005a8e:	4b63      	ldr	r3, [pc, #396]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a90:	edd3 7a05 	vldr	s15, [r3, #20]
 8005a94:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8005c20 <update_homing_sequence+0x7f8>
 8005a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a9c:	4b5f      	ldr	r3, [pc, #380]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005a9e:	edc3 7a05 	vstr	s15, [r3, #20]
			}

			revolute_axis.command_vel = PWM_Satuation(
 8005aa2:	4b5e      	ldr	r3, [pc, #376]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005aa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8005aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aac:	485e      	ldr	r0, [pc, #376]	@ (8005c28 <update_homing_sequence+0x800>)
 8005aae:	f7fb fbb3 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ab2:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_position_pid,
							revolute_axis.pos_error),
					ZGX45RGG_150RPM_Constant.qd_max,
 8005ab6:	4b58      	ldr	r3, [pc, #352]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005ab8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			revolute_axis.command_vel = PWM_Satuation(
 8005abc:	4610      	mov	r0, r2
 8005abe:	4619      	mov	r1, r3
 8005ac0:	f7fb f800 	bl	8000ac4 <__aeabi_d2iz>
 8005ac4:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.qd_max);
 8005ac6:	4b54      	ldr	r3, [pc, #336]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005ac8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005acc:	60ba      	str	r2, [r7, #8]
 8005ace:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005ad2:	60fb      	str	r3, [r7, #12]
			revolute_axis.command_vel = PWM_Satuation(
 8005ad4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ad8:	f7fa fff4 	bl	8000ac4 <__aeabi_d2iz>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4619      	mov	r1, r3
 8005ae0:	4620      	mov	r0, r4
 8005ae2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ae6:	f7fb fb35 	bl	8001154 <PWM_Satuation>
 8005aea:	ee07 0a90 	vmov	s15, r0
 8005aee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005af2:	4b4a      	ldr	r3, [pc, #296]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005af4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			// Add velocity feedforward for trajectory
			revolute_axis.vel_error = revolute_axis.command_vel
 8005af8:	4b48      	ldr	r3, [pc, #288]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005afa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
					+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8005afe:	4b47      	ldr	r3, [pc, #284]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b00:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b08:	4b44      	ldr	r3, [pc, #272]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b0a:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
			revolute_axis.vel_error = revolute_axis.command_vel
 8005b12:	4b42      	ldr	r3, [pc, #264]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b14:	edc3 7a06 	vstr	s15, [r3, #24]

			revolute_axis.command_pos = PWM_Satuation(
 8005b18:	4b40      	ldr	r3, [pc, #256]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b1a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b22:	4842      	ldr	r0, [pc, #264]	@ (8005c2c <update_homing_sequence+0x804>)
 8005b24:	f7fb fb78 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b28:	eeb0 8a40 	vmov.f32	s16, s0
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							revolute_axis.vel_error),
					ZGX45RGG_150RPM_Constant.U_max,
 8005b2c:	4b3a      	ldr	r3, [pc, #232]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005b2e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(
 8005b32:	4610      	mov	r0, r2
 8005b34:	4619      	mov	r1, r3
 8005b36:	f7fa ffc5 	bl	8000ac4 <__aeabi_d2iz>
 8005b3a:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005b3c:	4b36      	ldr	r3, [pc, #216]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005b3e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b42:	603a      	str	r2, [r7, #0]
 8005b44:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b48:	607b      	str	r3, [r7, #4]
			revolute_axis.command_pos = PWM_Satuation(
 8005b4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b4e:	f7fa ffb9 	bl	8000ac4 <__aeabi_d2iz>
 8005b52:	4603      	mov	r3, r0
 8005b54:	4619      	mov	r1, r3
 8005b56:	4620      	mov	r0, r4
 8005b58:	eeb0 0a48 	vmov.f32	s0, s16
 8005b5c:	f7fb fafa 	bl	8001154 <PWM_Satuation>
 8005b60:	ee07 0a90 	vmov	s15, r0
 8005b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b68:	4b2c      	ldr	r3, [pc, #176]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			// Add feedforward compensation
			revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b70:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b74:	eeb0 0a67 	vmov.f32	s0, s15
 8005b78:	482d      	ldr	r0, [pc, #180]	@ (8005c30 <update_homing_sequence+0x808>)
 8005b7a:	f7fb fd0d 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005b7e:	eef0 7a40 	vmov.f32	s15, s0
 8005b82:	4b26      	ldr	r3, [pc, #152]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005b84:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
					revolute_axis.velocity);
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005b88:	4b1e      	ldr	r3, [pc, #120]	@ (8005c04 <update_homing_sequence+0x7dc>)
 8005b8a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
					revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005b8e:	4b29      	ldr	r3, [pc, #164]	@ (8005c34 <update_homing_sequence+0x80c>)
 8005b90:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005b94:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 8005c38 <update_homing_sequence+0x810>
 8005b98:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005b9c:	eef0 0a66 	vmov.f32	s1, s13
 8005ba0:	eeb0 0a47 	vmov.f32	s0, s14
 8005ba4:	4825      	ldr	r0, [pc, #148]	@ (8005c3c <update_homing_sequence+0x814>)
 8005ba6:	f7fb fd8a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8005baa:	eef0 7a40 	vmov.f32	s15, s0
 8005bae:	4b1b      	ldr	r3, [pc, #108]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bb0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bb6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bba:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bbc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bc0:	4b16      	ldr	r3, [pc, #88]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bc2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bce:	4b13      	ldr	r3, [pc, #76]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bd0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005bd4:	4b11      	ldr	r3, [pc, #68]	@ (8005c1c <update_homing_sequence+0x7f4>)
 8005bd6:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
					ZGX45RGG_150RPM_Constant.U_max,
 8005bda:	4b0f      	ldr	r3, [pc, #60]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005bdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005be0:	4610      	mov	r0, r2
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fa ff6e 	bl	8000ac4 <__aeabi_d2iz>
 8005be8:	4604      	mov	r4, r0
					-ZGX45RGG_150RPM_Constant.U_max);
 8005bea:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <update_homing_sequence+0x7f0>)
 8005bec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
 8005bf6:	e023      	b.n	8005c40 <update_homing_sequence+0x818>
 8005bf8:	2000036e 	.word	0x2000036e
 8005bfc:	20000370 	.word	0x20000370
 8005c00:	20000384 	.word	0x20000384
 8005c04:	20000508 	.word	0x20000508
 8005c08:	43340000 	.word	0x43340000
 8005c0c:	40490fdb 	.word	0x40490fdb
 8005c10:	20000398 	.word	0x20000398
 8005c14:	2000039c 	.word	0x2000039c
 8005c18:	20000000 	.word	0x20000000
 8005c1c:	200002c0 	.word	0x200002c0
 8005c20:	40c90fdb 	.word	0x40c90fdb
 8005c24:	c0490fdb 	.word	0xc0490fdb
 8005c28:	200005b4 	.word	0x200005b4
 8005c2c:	200005dc 	.word	0x200005dc
 8005c30:	20000610 	.word	0x20000610
 8005c34:	200004ac 	.word	0x200004ac
 8005c38:	447a0000 	.word	0x447a0000
 8005c3c:	20000614 	.word	0x20000614
			revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005c40:	4628      	mov	r0, r5
 8005c42:	4631      	mov	r1, r6
 8005c44:	f7fa ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c52:	f7fb fa7f 	bl	8001154 <PWM_Satuation>
 8005c56:	ee07 0a90 	vmov	s15, r0
 8005c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c5e:	4b94      	ldr	r3, [pc, #592]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c60:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

			if (revZeroEva.isFinised) {
 8005c64:	4b93      	ldr	r3, [pc, #588]	@ (8005eb4 <update_homing_sequence+0xa8c>)
 8005c66:	7c1b      	ldrb	r3, [r3, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8114 	beq.w	8005e96 <update_homing_sequence+0xa6e>
				// Trajectory complete, stop and start delay
				revolute_axis.command_pos = 0.0f;
 8005c6e:	4b90      	ldr	r3, [pc, #576]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
				prismatic_axis.command_pos = 0.0f;
 8005c76:	4b90      	ldr	r3, [pc, #576]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	625a      	str	r2, [r3, #36]	@ 0x24
				revolute_axis.velocity = 0.0f;
 8005c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c80:	f04f 0200 	mov.w	r2, #0
 8005c84:	605a      	str	r2, [r3, #4]
				revolute_axis.ffd = 0.0f;
 8005c86:	4b8a      	ldr	r3, [pc, #552]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	631a      	str	r2, [r3, #48]	@ 0x30
				revolute_axis.dfd = 0.0f;
 8005c8e:	4b88      	ldr	r3, [pc, #544]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	62da      	str	r2, [r3, #44]	@ 0x2c

				motion_delay_timer = 0;
 8005c96:	4b89      	ldr	r3, [pc, #548]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005c9c:	4b88      	ldr	r3, [pc, #544]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset prox counter for next stage
 8005ca2:	4b88      	ldr	r3, [pc, #544]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
				rev_to_zero_trajectory_started = false; // Reset for next time
 8005ca8:	4b87      	ldr	r3, [pc, #540]	@ (8005ec8 <update_homing_sequence+0xaa0>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8005cae:	e0f2      	b.n	8005e96 <update_homing_sequence+0xa6e>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb0:	4b81      	ldr	r3, [pc, #516]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cc8:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005cca:	4b7c      	ldr	r3, [pc, #496]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd2:	f0c0 80e2 	bcc.w	8005e9a <update_homing_sequence+0xa72>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005cd6:	2140      	movs	r1, #64	@ 0x40
 8005cd8:	487c      	ldr	r0, [pc, #496]	@ (8005ecc <update_homing_sequence+0xaa4>)
 8005cda:	f006 f9bf 	bl	800c05c <HAL_GPIO_ReadPin>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

			if (prox_detected) {
 8005cec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <update_homing_sequence+0x8e0>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005cf4:	4b71      	ldr	r3, [pc, #452]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005cfa:	4b71      	ldr	r3, [pc, #452]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005d00:	4b70      	ldr	r3, [pc, #448]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005d02:	2201      	movs	r2, #1
 8005d04:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005d06:	e0c8      	b.n	8005e9a <update_homing_sequence+0xa72>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005d08:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005d0a:	2209      	movs	r2, #9
 8005d0c:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]
		break;
 8005d14:	e0c1      	b.n	8005e9a <update_homing_sequence+0xa72>

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005d16:	4b66      	ldr	r3, [pc, #408]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d18:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d1c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005d20:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005d24:	4b62      	ldr	r3, [pc, #392]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d26:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005d2a:	4b61      	ldr	r3, [pc, #388]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d30:	eeb0 0a67 	vmov.f32	s0, s15
 8005d34:	4866      	ldr	r0, [pc, #408]	@ (8005ed0 <update_homing_sequence+0xaa8>)
 8005d36:	f7fb fa6f 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d3a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005d3e:	4b65      	ldr	r3, [pc, #404]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005d40:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7fa febc 	bl	8000ac4 <__aeabi_d2iz>
 8005d4c:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005d4e:	4b61      	ldr	r3, [pc, #388]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005d50:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d54:	4692      	mov	sl, r2
 8005d56:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005d5a:	4650      	mov	r0, sl
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	f7fa feb1 	bl	8000ac4 <__aeabi_d2iz>
 8005d62:	4603      	mov	r3, r0
 8005d64:	4619      	mov	r1, r3
 8005d66:	4620      	mov	r0, r4
 8005d68:	eeb0 0a48 	vmov.f32	s0, s16
 8005d6c:	f7fb f9f2 	bl	8001154 <PWM_Satuation>
 8005d70:	ee07 0a90 	vmov	s15, r0
 8005d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d78:	4b4d      	ldr	r3, [pc, #308]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d7a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005d7e:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8005d82:	4855      	ldr	r0, [pc, #340]	@ (8005ed8 <update_homing_sequence+0xab0>)
 8005d84:	f7fb fc08 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005d88:	eef0 7a40 	vmov.f32	s15, s0
 8005d8c:	4b48      	ldr	r3, [pc, #288]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005d8e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005d92:	4b52      	ldr	r3, [pc, #328]	@ (8005edc <update_homing_sequence+0xab4>)
 8005d94:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8005d98:	4b51      	ldr	r3, [pc, #324]	@ (8005ee0 <update_homing_sequence+0xab8>)
 8005d9a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8005d9e:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8005ee4 <update_homing_sequence+0xabc>
 8005da2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005da6:	eef0 0a66 	vmov.f32	s1, s13
 8005daa:	eeb0 0a47 	vmov.f32	s0, s14
 8005dae:	484e      	ldr	r0, [pc, #312]	@ (8005ee8 <update_homing_sequence+0xac0>)
 8005db0:	f7fb fc85 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8005db4:	eef0 7a40 	vmov.f32	s15, s0
 8005db8:	4b3d      	ldr	r3, [pc, #244]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dba:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 8005dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dc0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dc6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dca:	4b39      	ldr	r3, [pc, #228]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dcc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005dd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dd8:	4b35      	ldr	r3, [pc, #212]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005dda:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005dde:	4b34      	ldr	r3, [pc, #208]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005de0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005de4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005de6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005dea:	4610      	mov	r0, r2
 8005dec:	4619      	mov	r1, r3
 8005dee:	f7fa fe69 	bl	8000ac4 <__aeabi_d2iz>
 8005df2:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005df4:	4b37      	ldr	r3, [pc, #220]	@ (8005ed4 <update_homing_sequence+0xaac>)
 8005df6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dfa:	4690      	mov	r8, r2
 8005dfc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe5e 	bl	8000ac4 <__aeabi_d2iz>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	eeb0 0a48 	vmov.f32	s0, s16
 8005e12:	f7fb f99f 	bl	8001154 <PWM_Satuation>
 8005e16:	ee07 0a90 	vmov	s15, r0
 8005e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e1e:	4b24      	ldr	r3, [pc, #144]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e20:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005e24:	4b27      	ldr	r3, [pc, #156]	@ (8005ec4 <update_homing_sequence+0xa9c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d038      	beq.n	8005e9e <update_homing_sequence+0xa76>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e34:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005e42:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005e44:	220a      	movs	r2, #10
 8005e46:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e48:	e029      	b.n	8005e9e <update_homing_sequence+0xa76>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <update_homing_sequence+0xa90>)
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e52:	4b17      	ldr	r3, [pc, #92]	@ (8005eb0 <update_homing_sequence+0xa88>)
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e5a:	4b18      	ldr	r3, [pc, #96]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a16      	ldr	r2, [pc, #88]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e62:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e64:	4b15      	ldr	r3, [pc, #84]	@ (8005ebc <update_homing_sequence+0xa94>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e6c:	d319      	bcc.n	8005ea2 <update_homing_sequence+0xa7a>
			homing_state = HOMING_COMPLETE;
 8005e6e:	4b14      	ldr	r3, [pc, #80]	@ (8005ec0 <update_homing_sequence+0xa98>)
 8005e70:	220b      	movs	r2, #11
 8005e72:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e74:	e015      	b.n	8005ea2 <update_homing_sequence+0xa7a>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005e76:	f7ff f929 	bl	80050cc <__NVIC_SystemReset>
		return;
 8005e7a:	bf00      	nop
 8005e7c:	e012      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005e7e:	bf00      	nop
 8005e80:	e010      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e82:	bf00      	nop
 8005e84:	e00e      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e86:	bf00      	nop
 8005e88:	e00c      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e8a:	bf00      	nop
 8005e8c:	e00a      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e8e:	bf00      	nop
 8005e90:	e008      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e92:	bf00      	nop
 8005e94:	e006      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e96:	bf00      	nop
 8005e98:	e004      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e9a:	bf00      	nop
 8005e9c:	e002      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005e9e:	bf00      	nop
 8005ea0:	e000      	b.n	8005ea4 <update_homing_sequence+0xa7c>
		break;
 8005ea2:	bf00      	nop
	}
}
 8005ea4:	3754      	adds	r7, #84	@ 0x54
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	ecbd 8b02 	vpop	{d8}
 8005eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb0:	200002c0 	.word	0x200002c0
 8005eb4:	20000370 	.word	0x20000370
 8005eb8:	20000280 	.word	0x20000280
 8005ebc:	20000358 	.word	0x20000358
 8005ec0:	20000362 	.word	0x20000362
 8005ec4:	2000035c 	.word	0x2000035c
 8005ec8:	2000036e 	.word	0x2000036e
 8005ecc:	48000400 	.word	0x48000400
 8005ed0:	200005dc 	.word	0x200005dc
 8005ed4:	20000000 	.word	0x20000000
 8005ed8:	20000610 	.word	0x20000610
 8005edc:	20000508 	.word	0x20000508
 8005ee0:	200004ac 	.word	0x200004ac
 8005ee4:	447a0000 	.word	0x447a0000
 8005ee8:	20000614 	.word	0x20000614

08005eec <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b084      	sub	sp, #16
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005ef6:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005f34 <normalize_angle+0x48>
 8005efa:	ed97 0a01 	vldr	s0, [r7, #4]
 8005efe:	f00b feff 	bl	8011d00 <fmodf>
 8005f02:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f0a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f12:	d507      	bpl.n	8005f24 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8005f18:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005f34 <normalize_angle+0x48>
 8005f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f20:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	ee07 3a90 	vmov	s15, r3
}
 8005f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40c90fdb 	.word	0x40c90fdb

08005f38 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005f42:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f50:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	d508      	bpl.n	8005f70 <calculate_movement_deg+0x38>
 8005f5e:	edd7 7a00 	vldr	s15, [r7]
 8005f62:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	d411      	bmi.n	8005f94 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005f70:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f74:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f80:	db33      	blt.n	8005fea <calculate_movement_deg+0xb2>
 8005f82:	edd7 7a00 	vldr	s15, [r7]
 8005f86:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f92:	db2a      	blt.n	8005fea <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005f94:	ed97 7a00 	vldr	s14, [r7]
 8005f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fa0:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fa8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb4:	dd07      	ble.n	8005fc6 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005fb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fba:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80060b8 <calculate_movement_deg+0x180>
 8005fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005fc2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005fc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fca:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80060bc <calculate_movement_deg+0x184>
 8005fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fd6:	d562      	bpl.n	800609e <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005fdc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80060b8 <calculate_movement_deg+0x180>
 8005fe0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fe4:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005fe8:	e059      	b.n	800609e <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005fea:	edd7 7a01 	vldr	s15, [r7, #4]
 8005fee:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80060b4 <calculate_movement_deg+0x17c>
 8005ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffa:	d52a      	bpl.n	8006052 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005ffc:	edd7 7a00 	vldr	s15, [r7]
 8006000:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80060b4 <calculate_movement_deg+0x17c>
 8006004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006008:	ed97 7a01 	vldr	s14, [r7, #4]
 800600c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006014:	d50e      	bpl.n	8006034 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006016:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80060b8 <calculate_movement_deg+0x180>
 800601a:	edd7 7a00 	vldr	s15, [r7]
 800601e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006022:	edd7 7a01 	vldr	s15, [r7, #4]
 8006026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800602a:	eef1 7a67 	vneg.f32	s15, s15
 800602e:	edc7 7a03 	vstr	s15, [r7, #12]
 8006032:	e034      	b.n	800609e <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8006034:	ed97 7a01 	vldr	s14, [r7, #4]
 8006038:	edd7 7a00 	vldr	s15, [r7]
 800603c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006040:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80060b8 <calculate_movement_deg+0x180>
 8006044:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006048:	eef1 7a67 	vneg.f32	s15, s15
 800604c:	edc7 7a03 	vstr	s15, [r7, #12]
 8006050:	e025      	b.n	800609e <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8006052:	edd7 7a01 	vldr	s15, [r7, #4]
 8006056:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80060b4 <calculate_movement_deg+0x17c>
 800605a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800605e:	ed97 7a00 	vldr	s14, [r7]
 8006062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606a:	d50c      	bpl.n	8006086 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 800606c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80060b8 <calculate_movement_deg+0x180>
 8006070:	edd7 7a01 	vldr	s15, [r7, #4]
 8006074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006078:	ed97 7a00 	vldr	s14, [r7]
 800607c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006080:	edc7 7a03 	vstr	s15, [r7, #12]
 8006084:	e00b      	b.n	800609e <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006086:	ed97 7a00 	vldr	s14, [r7]
 800608a:	edd7 7a01 	vldr	s15, [r7, #4]
 800608e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006092:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80060b8 <calculate_movement_deg+0x180>
 8006096:	ee77 7a87 	vadd.f32	s15, s15, s14
 800609a:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	ee07 3a90 	vmov	s15, r3
}
 80060a4:	eeb0 0a67 	vmov.f32	s0, s15
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	43340000 	.word	0x43340000
 80060b8:	43b40000 	.word	0x43b40000
 80060bc:	c3340000 	.word	0xc3340000

080060c0 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	ed2d 8b02 	vpush	{d8}
 80060c6:	b089      	sub	sp, #36	@ 0x24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80060ce:	edc7 0a00 	vstr	s1, [r7]
	if (is_emergency_active() || homing_active) {
 80060d2:	f000 feaf 	bl	8006e34 <is_emergency_active>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f040 8098 	bne.w	800620e <start_combined_trajectory+0x14e>
 80060de:	4b4f      	ldr	r3, [pc, #316]	@ (800621c <start_combined_trajectory+0x15c>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f040 8093 	bne.w	800620e <start_combined_trajectory+0x14e>
		return; // Don't start trajectory if in emergency or homing
	}

	float pris_current = prismatic_encoder.mm;
 80060e8:	4b4d      	ldr	r3, [pc, #308]	@ (8006220 <start_combined_trajectory+0x160>)
 80060ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ec:	61fb      	str	r3, [r7, #28]
	float rev_current = revolute_encoder.rads;
 80060ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006224 <start_combined_trajectory+0x164>)
 80060f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f2:	61bb      	str	r3, [r7, #24]

	prisEva.t = 0.0f;
 80060f4:	4b4c      	ldr	r3, [pc, #304]	@ (8006228 <start_combined_trajectory+0x168>)
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80060fc:	4b4a      	ldr	r3, [pc, #296]	@ (8006228 <start_combined_trajectory+0x168>)
 80060fe:	2200      	movs	r2, #0
 8006100:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8006102:	4b4a      	ldr	r3, [pc, #296]	@ (800622c <start_combined_trajectory+0x16c>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 800610a:	4b48      	ldr	r3, [pc, #288]	@ (800622c <start_combined_trajectory+0x16c>)
 800610c:	2200      	movs	r2, #0
 800610e:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 8006110:	4a47      	ldr	r2, [pc, #284]	@ (8006230 <start_combined_trajectory+0x170>)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006116:	4a47      	ldr	r2, [pc, #284]	@ (8006234 <start_combined_trajectory+0x174>)
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	60d3      	str	r3, [r2, #12]
	prismatic_axis.target_pos = fminf(
 800611c:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8006238 <start_combined_trajectory+0x178>
 8006120:	ed97 0a01 	vldr	s0, [r7, #4]
 8006124:	f00b feb4 	bl	8011e90 <fmaxf>
 8006128:	eef0 7a40 	vmov.f32	s15, s0
 800612c:	eddf 0a43 	vldr	s1, [pc, #268]	@ 800623c <start_combined_trajectory+0x17c>
 8006130:	eeb0 0a67 	vmov.f32	s0, s15
 8006134:	f00b fec9 	bl	8011eca <fminf>
 8006138:	eef0 7a40 	vmov.f32	s15, s0
 800613c:	4b3c      	ldr	r3, [pc, #240]	@ (8006230 <start_combined_trajectory+0x170>)
 800613e:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS),
			PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 8006142:	ed97 0a06 	vldr	s0, [r7, #24]
 8006146:	f7ff fed1 	bl	8005eec <normalize_angle>
 800614a:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_deg = normalized_current * 180.0f / PI;
 800614e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006152:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006240 <start_combined_trajectory+0x180>
 8006156:	ee27 7a87 	vmul.f32	s14, s15, s14
 800615a:	eddf 6a3a 	vldr	s13, [pc, #232]	@ 8006244 <start_combined_trajectory+0x184>
 800615e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006162:	edc7 7a04 	vstr	s15, [r7, #16]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006166:	edd7 0a00 	vldr	s1, [r7]
 800616a:	ed97 0a04 	vldr	s0, [r7, #16]
 800616e:	f7ff fee3 	bl	8005f38 <calculate_movement_deg>
 8006172:	eef0 7a40 	vmov.f32	s15, s0
 8006176:	4b34      	ldr	r3, [pc, #208]	@ (8006248 <start_combined_trajectory+0x188>)
 8006178:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800617c:	4b32      	ldr	r3, [pc, #200]	@ (8006248 <start_combined_trajectory+0x188>)
 800617e:	edd3 7a00 	vldr	s15, [r3]
 8006182:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006244 <start_combined_trajectory+0x184>
 8006186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800618a:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8006240 <start_combined_trajectory+0x180>
 800618e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006192:	edc7 7a03 	vstr	s15, [r7, #12]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006196:	4b27      	ldr	r3, [pc, #156]	@ (8006234 <start_combined_trajectory+0x174>)
 8006198:	ed93 7a03 	vldr	s14, [r3, #12]
 800619c:	edd7 7a03 	vldr	s15, [r7, #12]
 80061a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a4:	4b23      	ldr	r3, [pc, #140]	@ (8006234 <start_combined_trajectory+0x174>)
 80061a6:	edc3 7a04 	vstr	s15, [r3, #16]

	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061aa:	4b21      	ldr	r3, [pc, #132]	@ (8006230 <start_combined_trajectory+0x170>)
 80061ac:	ed93 8a03 	vldr	s16, [r3, #12]
 80061b0:	4b1f      	ldr	r3, [pc, #124]	@ (8006230 <start_combined_trajectory+0x170>)
 80061b2:	edd3 8a04 	vldr	s17, [r3, #16]
			prismatic_axis.target_pos, ZGX45RGG_400RPM_Constant.traject_sd_max,
 80061b6:	4b25      	ldr	r3, [pc, #148]	@ (800624c <start_combined_trajectory+0x18c>)
 80061b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061bc:	4610      	mov	r0, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	f7fa fcc8 	bl	8000b54 <__aeabi_d2f>
 80061c4:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80061c6:	4b21      	ldr	r3, [pc, #132]	@ (800624c <start_combined_trajectory+0x18c>)
 80061c8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
	Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80061cc:	4610      	mov	r0, r2
 80061ce:	4619      	mov	r1, r3
 80061d0:	f7fa fcc0 	bl	8000b54 <__aeabi_d2f>
 80061d4:	4603      	mov	r3, r0
 80061d6:	ee01 3a90 	vmov	s3, r3
 80061da:	ee01 4a10 	vmov	s2, r4
 80061de:	eef0 0a68 	vmov.f32	s1, s17
 80061e2:	eeb0 0a48 	vmov.f32	s0, s16
 80061e6:	481a      	ldr	r0, [pc, #104]	@ (8006250 <start_combined_trajectory+0x190>)
 80061e8:	f7fd fd94 	bl	8003d14 <Trapezoidal_Generator>

	prismatic_axis.trajectory_active = false;
 80061ec:	4b10      	ldr	r3, [pc, #64]	@ (8006230 <start_combined_trajectory+0x170>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <start_combined_trajectory+0x174>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	plotter_pen_up();
 80061fc:	f002 fbee 	bl	80089dc <plotter_pen_up>
	motion_delay_timer = 0;
 8006200:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <start_combined_trajectory+0x194>)
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
	motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006206:	4b14      	ldr	r3, [pc, #80]	@ (8006258 <start_combined_trajectory+0x198>)
 8006208:	2201      	movs	r2, #1
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	e000      	b.n	8006210 <start_combined_trajectory+0x150>
		return; // Don't start trajectory if in emergency or homing
 800620e:	bf00      	nop
}
 8006210:	3724      	adds	r7, #36	@ 0x24
 8006212:	46bd      	mov	sp, r7
 8006214:	ecbd 8b02 	vpop	{d8}
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	20000363 	.word	0x20000363
 8006220:	200004ac 	.word	0x200004ac
 8006224:	20000508 	.word	0x20000508
 8006228:	2000032c 	.word	0x2000032c
 800622c:	20000340 	.word	0x20000340
 8006230:	20000280 	.word	0x20000280
 8006234:	200002c0 	.word	0x200002c0
 8006238:	00000000 	.word	0x00000000
 800623c:	43960000 	.word	0x43960000
 8006240:	43340000 	.word	0x43340000
 8006244:	40490fdb 	.word	0x40490fdb
 8006248:	200003a8 	.word	0x200003a8
 800624c:	20000080 	.word	0x20000080
 8006250:	20000304 	.word	0x20000304
 8006254:	20000358 	.word	0x20000358
 8006258:	20000300 	.word	0x20000300

0800625c <update_position_control>:

void update_position_control(void) {
 800625c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006260:	ed2d 8b02 	vpush	{d8}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006268:	4b50      	ldr	r3, [pc, #320]	@ (80063ac <update_position_control+0x150>)
 800626a:	ed93 7a00 	vldr	s14, [r3]
 800626e:	4b50      	ldr	r3, [pc, #320]	@ (80063b0 <update_position_control+0x154>)
 8006270:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006274:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006278:	4b4c      	ldr	r3, [pc, #304]	@ (80063ac <update_position_control+0x150>)
 800627a:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800627e:	4b4b      	ldr	r3, [pc, #300]	@ (80063ac <update_position_control+0x150>)
 8006280:	edd3 7a05 	vldr	s15, [r3, #20]
 8006284:	eeb0 0a67 	vmov.f32	s0, s15
 8006288:	484a      	ldr	r0, [pc, #296]	@ (80063b4 <update_position_control+0x158>)
 800628a:	f7fa ffc5 	bl	8001218 <PID_CONTROLLER_Compute>
 800628e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006292:	4b49      	ldr	r3, [pc, #292]	@ (80063b8 <update_position_control+0x15c>)
 8006294:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006298:	4610      	mov	r0, r2
 800629a:	4619      	mov	r1, r3
 800629c:	f7fa fc12 	bl	8000ac4 <__aeabi_d2iz>
 80062a0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80062a2:	4b45      	ldr	r3, [pc, #276]	@ (80063b8 <update_position_control+0x15c>)
 80062a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80062a8:	4690      	mov	r8, r2
 80062aa:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80062ae:	4640      	mov	r0, r8
 80062b0:	4649      	mov	r1, r9
 80062b2:	f7fa fc07 	bl	8000ac4 <__aeabi_d2iz>
 80062b6:	4603      	mov	r3, r0
 80062b8:	4619      	mov	r1, r3
 80062ba:	4630      	mov	r0, r6
 80062bc:	eeb0 0a48 	vmov.f32	s0, s16
 80062c0:	f7fa ff48 	bl	8001154 <PWM_Satuation>
 80062c4:	ee07 0a90 	vmov	s15, r0
 80062c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062cc:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <update_position_control+0x150>)
 80062ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80062d2:	4b3a      	ldr	r3, [pc, #232]	@ (80063bc <update_position_control+0x160>)
 80062d4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80062d8:	eeb0 0a67 	vmov.f32	s0, s15
 80062dc:	f7ff fe06 	bl	8005eec <normalize_angle>
 80062e0:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80062e4:	4b36      	ldr	r3, [pc, #216]	@ (80063c0 <update_position_control+0x164>)
 80062e6:	ed93 7a00 	vldr	s14, [r3]
 80062ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f2:	4b33      	ldr	r3, [pc, #204]	@ (80063c0 <update_position_control+0x164>)
 80062f4:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80062f8:	4b31      	ldr	r3, [pc, #196]	@ (80063c0 <update_position_control+0x164>)
 80062fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80062fe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80063c4 <update_position_control+0x168>
 8006302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800630a:	dd09      	ble.n	8006320 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 800630c:	4b2c      	ldr	r3, [pc, #176]	@ (80063c0 <update_position_control+0x164>)
 800630e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006312:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80063c8 <update_position_control+0x16c>
 8006316:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <update_position_control+0x164>)
 800631c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006320:	4b27      	ldr	r3, [pc, #156]	@ (80063c0 <update_position_control+0x164>)
 8006322:	edd3 7a05 	vldr	s15, [r3, #20]
 8006326:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80063cc <update_position_control+0x170>
 800632a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006332:	d509      	bpl.n	8006348 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006334:	4b22      	ldr	r3, [pc, #136]	@ (80063c0 <update_position_control+0x164>)
 8006336:	edd3 7a05 	vldr	s15, [r3, #20]
 800633a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80063c8 <update_position_control+0x16c>
 800633e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006342:	4b1f      	ldr	r3, [pc, #124]	@ (80063c0 <update_position_control+0x164>)
 8006344:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006348:	4b1d      	ldr	r3, [pc, #116]	@ (80063c0 <update_position_control+0x164>)
 800634a:	edd3 7a05 	vldr	s15, [r3, #20]
 800634e:	eeb0 0a67 	vmov.f32	s0, s15
 8006352:	481f      	ldr	r0, [pc, #124]	@ (80063d0 <update_position_control+0x174>)
 8006354:	f7fa ff60 	bl	8001218 <PID_CONTROLLER_Compute>
 8006358:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800635c:	4b1d      	ldr	r3, [pc, #116]	@ (80063d4 <update_position_control+0x178>)
 800635e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006362:	4610      	mov	r0, r2
 8006364:	4619      	mov	r1, r3
 8006366:	f7fa fbad 	bl	8000ac4 <__aeabi_d2iz>
 800636a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800636c:	4b19      	ldr	r3, [pc, #100]	@ (80063d4 <update_position_control+0x178>)
 800636e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006372:	4614      	mov	r4, r2
 8006374:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006378:	4620      	mov	r0, r4
 800637a:	4629      	mov	r1, r5
 800637c:	f7fa fba2 	bl	8000ac4 <__aeabi_d2iz>
 8006380:	4603      	mov	r3, r0
 8006382:	4619      	mov	r1, r3
 8006384:	4630      	mov	r0, r6
 8006386:	eeb0 0a48 	vmov.f32	s0, s16
 800638a:	f7fa fee3 	bl	8001154 <PWM_Satuation>
 800638e:	ee07 0a90 	vmov	s15, r0
 8006392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <update_position_control+0x164>)
 8006398:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	ecbd 8b02 	vpop	{d8}
 80063a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063aa:	bf00      	nop
 80063ac:	20000280 	.word	0x20000280
 80063b0:	200004ac 	.word	0x200004ac
 80063b4:	20000564 	.word	0x20000564
 80063b8:	20000080 	.word	0x20000080
 80063bc:	20000508 	.word	0x20000508
 80063c0:	200002c0 	.word	0x200002c0
 80063c4:	40490fdb 	.word	0x40490fdb
 80063c8:	40c90fdb 	.word	0x40c90fdb
 80063cc:	c0490fdb 	.word	0xc0490fdb
 80063d0:	200005b4 	.word	0x200005b4
 80063d4:	20000000 	.word	0x20000000

080063d8 <update_velocity_control>:

void update_velocity_control(void) {
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	ed2d 8b02 	vpush	{d8}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 80063e4:	4b96      	ldr	r3, [pc, #600]	@ (8006640 <update_velocity_control+0x268>)
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80063ee:	4b94      	ldr	r3, [pc, #592]	@ (8006640 <update_velocity_control+0x268>)
 80063f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80063f4:	4b92      	ldr	r3, [pc, #584]	@ (8006640 <update_velocity_control+0x268>)
 80063f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80063fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063fe:	4b90      	ldr	r3, [pc, #576]	@ (8006640 <update_velocity_control+0x268>)
 8006400:	edd3 7a07 	vldr	s15, [r3, #28]
 8006404:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006408:	4b8d      	ldr	r3, [pc, #564]	@ (8006640 <update_velocity_control+0x268>)
 800640a:	edc3 7a06 	vstr	s15, [r3, #24]
 800640e:	e00a      	b.n	8006426 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006410:	4b8b      	ldr	r3, [pc, #556]	@ (8006640 <update_velocity_control+0x268>)
 8006412:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006416:	4b8a      	ldr	r3, [pc, #552]	@ (8006640 <update_velocity_control+0x268>)
 8006418:	edd3 7a07 	vldr	s15, [r3, #28]
 800641c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006420:	4b87      	ldr	r3, [pc, #540]	@ (8006640 <update_velocity_control+0x268>)
 8006422:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006426:	4b86      	ldr	r3, [pc, #536]	@ (8006640 <update_velocity_control+0x268>)
 8006428:	edd3 7a06 	vldr	s15, [r3, #24]
 800642c:	eeb0 0a67 	vmov.f32	s0, s15
 8006430:	4884      	ldr	r0, [pc, #528]	@ (8006644 <update_velocity_control+0x26c>)
 8006432:	f7fa fef1 	bl	8001218 <PID_CONTROLLER_Compute>
 8006436:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800643a:	4b83      	ldr	r3, [pc, #524]	@ (8006648 <update_velocity_control+0x270>)
 800643c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006440:	4610      	mov	r0, r2
 8006442:	4619      	mov	r1, r3
 8006444:	f7fa fb3e 	bl	8000ac4 <__aeabi_d2iz>
 8006448:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800644a:	4b7f      	ldr	r3, [pc, #508]	@ (8006648 <update_velocity_control+0x270>)
 800644c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006450:	603a      	str	r2, [r7, #0]
 8006452:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006456:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800645c:	f7fa fb32 	bl	8000ac4 <__aeabi_d2iz>
 8006460:	4603      	mov	r3, r0
 8006462:	4619      	mov	r1, r3
 8006464:	4630      	mov	r0, r6
 8006466:	eeb0 0a48 	vmov.f32	s0, s16
 800646a:	f7fa fe73 	bl	8001154 <PWM_Satuation>
 800646e:	ee07 0a90 	vmov	s15, r0
 8006472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006476:	4b72      	ldr	r3, [pc, #456]	@ (8006640 <update_velocity_control+0x268>)
 8006478:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 800647c:	4b70      	ldr	r3, [pc, #448]	@ (8006640 <update_velocity_control+0x268>)
 800647e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02c      	beq.n	80064e0 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006486:	4b6e      	ldr	r3, [pc, #440]	@ (8006640 <update_velocity_control+0x268>)
 8006488:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800648c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800664c <update_velocity_control+0x274>
 8006490:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006494:	eeb0 0a47 	vmov.f32	s0, s14
 8006498:	486d      	ldr	r0, [pc, #436]	@ (8006650 <update_velocity_control+0x278>)
 800649a:	f7fb f9fb 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 800649e:	eef0 7a40 	vmov.f32	s15, s0
 80064a2:	4b67      	ldr	r3, [pc, #412]	@ (8006640 <update_velocity_control+0x268>)
 80064a4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80064a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006654 <update_velocity_control+0x27c>)
 80064aa:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80064ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006658 <update_velocity_control+0x280>)
 80064b0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80064b4:	4b69      	ldr	r3, [pc, #420]	@ (800665c <update_velocity_control+0x284>)
 80064b6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80064ba:	eddf 5a64 	vldr	s11, [pc, #400]	@ 800664c <update_velocity_control+0x274>
 80064be:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80064c2:	eeb0 1a46 	vmov.f32	s2, s12
 80064c6:	eef0 0a66 	vmov.f32	s1, s13
 80064ca:	eeb0 0a47 	vmov.f32	s0, s14
 80064ce:	4864      	ldr	r0, [pc, #400]	@ (8006660 <update_velocity_control+0x288>)
 80064d0:	f7fb fa73 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80064d4:	eef0 7a40 	vmov.f32	s15, s0
 80064d8:	4b59      	ldr	r3, [pc, #356]	@ (8006640 <update_velocity_control+0x268>)
 80064da:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80064de:	e007      	b.n	80064f0 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80064e0:	4b57      	ldr	r3, [pc, #348]	@ (8006640 <update_velocity_control+0x268>)
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80064e8:	4b55      	ldr	r3, [pc, #340]	@ (8006640 <update_velocity_control+0x268>)
 80064ea:	f04f 0200 	mov.w	r2, #0
 80064ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80064f0:	4b53      	ldr	r3, [pc, #332]	@ (8006640 <update_velocity_control+0x268>)
 80064f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80064f6:	4b52      	ldr	r3, [pc, #328]	@ (8006640 <update_velocity_control+0x268>)
 80064f8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80064fc:	4b50      	ldr	r3, [pc, #320]	@ (8006640 <update_velocity_control+0x268>)
 80064fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650a:	4b4d      	ldr	r3, [pc, #308]	@ (8006640 <update_velocity_control+0x268>)
 800650c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006510:	4b4b      	ldr	r3, [pc, #300]	@ (8006640 <update_velocity_control+0x268>)
 8006512:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006516:	4b4c      	ldr	r3, [pc, #304]	@ (8006648 <update_velocity_control+0x270>)
 8006518:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	f7fa fad0 	bl	8000ac4 <__aeabi_d2iz>
 8006524:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006526:	4b48      	ldr	r3, [pc, #288]	@ (8006648 <update_velocity_control+0x270>)
 8006528:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800652c:	4692      	mov	sl, r2
 800652e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006532:	4650      	mov	r0, sl
 8006534:	4659      	mov	r1, fp
 8006536:	f7fa fac5 	bl	8000ac4 <__aeabi_d2iz>
 800653a:	4603      	mov	r3, r0
 800653c:	4619      	mov	r1, r3
 800653e:	4630      	mov	r0, r6
 8006540:	eeb0 0a48 	vmov.f32	s0, s16
 8006544:	f7fa fe06 	bl	8001154 <PWM_Satuation>
 8006548:	ee07 0a90 	vmov	s15, r0
 800654c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006550:	4b3b      	ldr	r3, [pc, #236]	@ (8006640 <update_velocity_control+0x268>)
 8006552:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006556:	4b40      	ldr	r3, [pc, #256]	@ (8006658 <update_velocity_control+0x280>)
 8006558:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d010      	beq.n	8006582 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006560:	4b3d      	ldr	r3, [pc, #244]	@ (8006658 <update_velocity_control+0x280>)
 8006562:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006566:	4b3c      	ldr	r3, [pc, #240]	@ (8006658 <update_velocity_control+0x280>)
 8006568:	edd3 7a01 	vldr	s15, [r3, #4]
 800656c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006570:	4b39      	ldr	r3, [pc, #228]	@ (8006658 <update_velocity_control+0x280>)
 8006572:	edd3 7a07 	vldr	s15, [r3, #28]
 8006576:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800657a:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <update_velocity_control+0x280>)
 800657c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006580:	e00a      	b.n	8006598 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006582:	4b35      	ldr	r3, [pc, #212]	@ (8006658 <update_velocity_control+0x280>)
 8006584:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006588:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <update_velocity_control+0x280>)
 800658a:	edd3 7a07 	vldr	s15, [r3, #28]
 800658e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006592:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <update_velocity_control+0x280>)
 8006594:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006598:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <update_velocity_control+0x280>)
 800659a:	edd3 7a06 	vldr	s15, [r3, #24]
 800659e:	eeb0 0a67 	vmov.f32	s0, s15
 80065a2:	4830      	ldr	r0, [pc, #192]	@ (8006664 <update_velocity_control+0x28c>)
 80065a4:	f7fa fe38 	bl	8001218 <PID_CONTROLLER_Compute>
 80065a8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80065ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006668 <update_velocity_control+0x290>)
 80065ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80065b2:	4610      	mov	r0, r2
 80065b4:	4619      	mov	r1, r3
 80065b6:	f7fa fa85 	bl	8000ac4 <__aeabi_d2iz>
 80065ba:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80065bc:	4b2a      	ldr	r3, [pc, #168]	@ (8006668 <update_velocity_control+0x290>)
 80065be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80065c2:	4690      	mov	r8, r2
 80065c4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 80065c8:	4640      	mov	r0, r8
 80065ca:	4649      	mov	r1, r9
 80065cc:	f7fa fa7a 	bl	8000ac4 <__aeabi_d2iz>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4619      	mov	r1, r3
 80065d4:	4630      	mov	r0, r6
 80065d6:	eeb0 0a48 	vmov.f32	s0, s16
 80065da:	f7fa fdbb 	bl	8001154 <PWM_Satuation>
 80065de:	ee07 0a90 	vmov	s15, r0
 80065e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065e6:	4b1c      	ldr	r3, [pc, #112]	@ (8006658 <update_velocity_control+0x280>)
 80065e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80065ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006658 <update_velocity_control+0x280>)
 80065ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03e      	beq.n	8006674 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80065f6:	4b18      	ldr	r3, [pc, #96]	@ (8006658 <update_velocity_control+0x280>)
 80065f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80065fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006600:	481a      	ldr	r0, [pc, #104]	@ (800666c <update_velocity_control+0x294>)
 8006602:	f7fa ffc9 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006606:	eef0 7a40 	vmov.f32	s15, s0
 800660a:	4b13      	ldr	r3, [pc, #76]	@ (8006658 <update_velocity_control+0x280>)
 800660c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <update_velocity_control+0x27c>)
 8006612:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006616:	4b11      	ldr	r3, [pc, #68]	@ (800665c <update_velocity_control+0x284>)
 8006618:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800661c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800664c <update_velocity_control+0x274>
 8006620:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006624:	eef0 0a66 	vmov.f32	s1, s13
 8006628:	eeb0 0a47 	vmov.f32	s0, s14
 800662c:	4810      	ldr	r0, [pc, #64]	@ (8006670 <update_velocity_control+0x298>)
 800662e:	f7fb f846 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006632:	eef0 7a40 	vmov.f32	s15, s0
 8006636:	4b08      	ldr	r3, [pc, #32]	@ (8006658 <update_velocity_control+0x280>)
 8006638:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800663c:	e034      	b.n	80066a8 <update_velocity_control+0x2d0>
 800663e:	bf00      	nop
 8006640:	20000280 	.word	0x20000280
 8006644:	2000058c 	.word	0x2000058c
 8006648:	20000080 	.word	0x20000080
 800664c:	447a0000 	.word	0x447a0000
 8006650:	20000604 	.word	0x20000604
 8006654:	20000508 	.word	0x20000508
 8006658:	200002c0 	.word	0x200002c0
 800665c:	200004ac 	.word	0x200004ac
 8006660:	20000608 	.word	0x20000608
 8006664:	200005dc 	.word	0x200005dc
 8006668:	20000000 	.word	0x20000000
 800666c:	20000610 	.word	0x20000610
 8006670:	20000614 	.word	0x20000614
	} else {
		revolute_axis.ffd = 0.0f;
 8006674:	4b33      	ldr	r3, [pc, #204]	@ (8006744 <update_velocity_control+0x36c>)
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800667c:	4b32      	ldr	r3, [pc, #200]	@ (8006748 <update_velocity_control+0x370>)
 800667e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006682:	4b32      	ldr	r3, [pc, #200]	@ (800674c <update_velocity_control+0x374>)
 8006684:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006688:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8006750 <update_velocity_control+0x378>
 800668c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006690:	eef0 0a66 	vmov.f32	s1, s13
 8006694:	eeb0 0a47 	vmov.f32	s0, s14
 8006698:	482e      	ldr	r0, [pc, #184]	@ (8006754 <update_velocity_control+0x37c>)
 800669a:	f7fb f810 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800669e:	eef0 7a40 	vmov.f32	s15, s0
 80066a2:	4b28      	ldr	r3, [pc, #160]	@ (8006744 <update_velocity_control+0x36c>)
 80066a4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 80066a8:	4b26      	ldr	r3, [pc, #152]	@ (8006744 <update_velocity_control+0x36c>)
 80066aa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80066ae:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <update_velocity_control+0x36c>)
 80066b0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80066b4:	4b23      	ldr	r3, [pc, #140]	@ (8006744 <update_velocity_control+0x36c>)
 80066b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80066ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	4b20      	ldr	r3, [pc, #128]	@ (8006744 <update_velocity_control+0x36c>)
 80066c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006744 <update_velocity_control+0x36c>)
 80066ca:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80066ce:	4b22      	ldr	r3, [pc, #136]	@ (8006758 <update_velocity_control+0x380>)
 80066d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066d4:	4610      	mov	r0, r2
 80066d6:	4619      	mov	r1, r3
 80066d8:	f7fa f9f4 	bl	8000ac4 <__aeabi_d2iz>
 80066dc:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80066de:	4b1e      	ldr	r3, [pc, #120]	@ (8006758 <update_velocity_control+0x380>)
 80066e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80066e4:	4614      	mov	r4, r2
 80066e6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80066ea:	4620      	mov	r0, r4
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7fa f9e9 	bl	8000ac4 <__aeabi_d2iz>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4619      	mov	r1, r3
 80066f6:	4630      	mov	r0, r6
 80066f8:	eeb0 0a48 	vmov.f32	s0, s16
 80066fc:	f7fa fd2a 	bl	8001154 <PWM_Satuation>
 8006700:	ee07 0a90 	vmov	s15, r0
 8006704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006708:	4b0e      	ldr	r3, [pc, #56]	@ (8006744 <update_velocity_control+0x36c>)
 800670a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 800670e:	4b13      	ldr	r3, [pc, #76]	@ (800675c <update_velocity_control+0x384>)
 8006710:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006714:	eef0 0a67 	vmov.f32	s1, s15
 8006718:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8006760 <update_velocity_control+0x388>
 800671c:	4811      	ldr	r0, [pc, #68]	@ (8006764 <update_velocity_control+0x38c>)
 800671e:	f7fa fe53 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006722:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <update_velocity_control+0x36c>)
 8006724:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006728:	eef0 0a67 	vmov.f32	s1, s15
 800672c:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8006760 <update_velocity_control+0x388>
 8006730:	480d      	ldr	r0, [pc, #52]	@ (8006768 <update_velocity_control+0x390>)
 8006732:	f7fa fe49 	bl	80013c8 <MDXX_set_range>
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	ecbd 8b02 	vpop	{d8}
 8006740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	200002c0 	.word	0x200002c0
 8006748:	20000508 	.word	0x20000508
 800674c:	200004ac 	.word	0x200004ac
 8006750:	447a0000 	.word	0x447a0000
 8006754:	20000614 	.word	0x20000614
 8006758:	20000000 	.word	0x20000000
 800675c:	20000280 	.word	0x20000280
 8006760:	44fa0000 	.word	0x44fa0000
 8006764:	20000414 	.word	0x20000414
 8006768:	20000460 	.word	0x20000460

0800676c <update_control_loops>:

void update_control_loops(void) {
 800676c:	b598      	push	{r3, r4, r7, lr}
 800676e:	ed2d 8b02 	vpush	{d8}
 8006772:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006774:	4bac      	ldr	r3, [pc, #688]	@ (8006a28 <update_control_loops+0x2bc>)
 8006776:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800677a:	eeb0 0a67 	vmov.f32	s0, s15
 800677e:	f7ff fbb5 	bl	8005eec <normalize_angle>
 8006782:	eef0 7a40 	vmov.f32	s15, s0
 8006786:	4ba9      	ldr	r3, [pc, #676]	@ (8006a2c <update_control_loops+0x2c0>)
 8006788:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 800678c:	f000 fb52 	bl	8006e34 <is_emergency_active>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d015      	beq.n	80067c2 <update_control_loops+0x56>
		emergency_stop_all_motors();
 8006796:	f000 fa89 	bl	8006cac <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 800679a:	4ba5      	ldr	r3, [pc, #660]	@ (8006a30 <update_control_loops+0x2c4>)
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	4aa5      	ldr	r2, [pc, #660]	@ (8006a34 <update_control_loops+0x2c8>)
 80067a0:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 80067a2:	4ba2      	ldr	r3, [pc, #648]	@ (8006a2c <update_control_loops+0x2c0>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	220e      	movs	r2, #14
 80067aa:	210f      	movs	r1, #15
 80067ac:	eeb0 0a67 	vmov.f32	s0, s15
 80067b0:	48a1      	ldr	r0, [pc, #644]	@ (8006a38 <update_control_loops+0x2cc>)
 80067b2:	f7fd ff09 	bl	80045c8 <UnitConverter_angle>
 80067b6:	eef0 7a40 	vmov.f32	s15, s0
 80067ba:	4ba0      	ldr	r3, [pc, #640]	@ (8006a3c <update_control_loops+0x2d0>)
 80067bc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 80067c0:	e16e      	b.n	8006aa0 <update_control_loops+0x334>
	}

	if (homing_active) {
 80067c2:	4b9f      	ldr	r3, [pc, #636]	@ (8006a40 <update_control_loops+0x2d4>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d029      	beq.n	800681e <update_control_loops+0xb2>
		update_homing_sequence();
 80067ca:	f7fe fe2d 	bl	8005428 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80067ce:	4b99      	ldr	r3, [pc, #612]	@ (8006a34 <update_control_loops+0x2c8>)
 80067d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80067d4:	eef0 0a67 	vmov.f32	s1, s15
 80067d8:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8006a44 <update_control_loops+0x2d8>
 80067dc:	489a      	ldr	r0, [pc, #616]	@ (8006a48 <update_control_loops+0x2dc>)
 80067de:	f7fa fdf3 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80067e2:	4b96      	ldr	r3, [pc, #600]	@ (8006a3c <update_control_loops+0x2d0>)
 80067e4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80067e8:	eef0 0a67 	vmov.f32	s1, s15
 80067ec:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8006a44 <update_control_loops+0x2d8>
 80067f0:	4896      	ldr	r0, [pc, #600]	@ (8006a4c <update_control_loops+0x2e0>)
 80067f2:	f7fa fde9 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 80067f6:	4b8e      	ldr	r3, [pc, #568]	@ (8006a30 <update_control_loops+0x2c4>)
 80067f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067fa:	4a8e      	ldr	r2, [pc, #568]	@ (8006a34 <update_control_loops+0x2c8>)
 80067fc:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 80067fe:	4b8b      	ldr	r3, [pc, #556]	@ (8006a2c <update_control_loops+0x2c0>)
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	220e      	movs	r2, #14
 8006806:	210f      	movs	r1, #15
 8006808:	eeb0 0a67 	vmov.f32	s0, s15
 800680c:	488a      	ldr	r0, [pc, #552]	@ (8006a38 <update_control_loops+0x2cc>)
 800680e:	f7fd fedb 	bl	80045c8 <UnitConverter_angle>
 8006812:	eef0 7a40 	vmov.f32	s15, s0
 8006816:	4b89      	ldr	r3, [pc, #548]	@ (8006a3c <update_control_loops+0x2d0>)
 8006818:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 800681c:	e140      	b.n	8006aa0 <update_control_loops+0x334>
	}

	switch (motion_sequence_state) {
 800681e:	4b8c      	ldr	r3, [pc, #560]	@ (8006a50 <update_control_loops+0x2e4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	3b01      	subs	r3, #1
 8006824:	2b04      	cmp	r3, #4
 8006826:	f200 80f7 	bhi.w	8006a18 <update_control_loops+0x2ac>
 800682a:	a201      	add	r2, pc, #4	@ (adr r2, 8006830 <update_control_loops+0xc4>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006845 	.word	0x08006845
 8006834:	08006869 	.word	0x08006869
 8006838:	0800694d 	.word	0x0800694d
 800683c:	080069f3 	.word	0x080069f3
 8006840:	08006a11 	.word	0x08006a11
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006844:	4b83      	ldr	r3, [pc, #524]	@ (8006a54 <update_control_loops+0x2e8>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	4a82      	ldr	r2, [pc, #520]	@ (8006a54 <update_control_loops+0x2e8>)
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006852:	4293      	cmp	r3, r2
 8006854:	f240 80e2 	bls.w	8006a1c <update_control_loops+0x2b0>
			prismatic_axis.trajectory_active = true;
 8006858:	4b76      	ldr	r3, [pc, #472]	@ (8006a34 <update_control_loops+0x2c8>)
 800685a:	2201      	movs	r2, #1
 800685c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006860:	4b7b      	ldr	r3, [pc, #492]	@ (8006a50 <update_control_loops+0x2e4>)
 8006862:	2202      	movs	r2, #2
 8006864:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006866:	e0d9      	b.n	8006a1c <update_control_loops+0x2b0>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006868:	4b72      	ldr	r3, [pc, #456]	@ (8006a34 <update_control_loops+0x2c8>)
 800686a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800686e:	2b00      	cmp	r3, #0
 8006870:	f000 80d6 	beq.w	8006a20 <update_control_loops+0x2b4>
 8006874:	4b78      	ldr	r3, [pc, #480]	@ (8006a58 <update_control_loops+0x2ec>)
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	f083 0301 	eor.w	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	f000 80ce 	beq.w	8006a20 <update_control_loops+0x2b4>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006884:	4b6b      	ldr	r3, [pc, #428]	@ (8006a34 <update_control_loops+0x2c8>)
 8006886:	ed93 8a03 	vldr	s16, [r3, #12]
 800688a:	4b6a      	ldr	r3, [pc, #424]	@ (8006a34 <update_control_loops+0x2c8>)
 800688c:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006890:	4b72      	ldr	r3, [pc, #456]	@ (8006a5c <update_control_loops+0x2f0>)
 8006892:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006896:	4610      	mov	r0, r2
 8006898:	4619      	mov	r1, r3
 800689a:	f7fa f95b 	bl	8000b54 <__aeabi_d2f>
 800689e:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80068a0:	4b6e      	ldr	r3, [pc, #440]	@ (8006a5c <update_control_loops+0x2f0>)
 80068a2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 80068a6:	4610      	mov	r0, r2
 80068a8:	4619      	mov	r1, r3
 80068aa:	f7fa f953 	bl	8000b54 <__aeabi_d2f>
 80068ae:	4603      	mov	r3, r0
 80068b0:	ee01 3a90 	vmov	s3, r3
 80068b4:	ee01 4a10 	vmov	s2, r4
 80068b8:	eef0 0a68 	vmov.f32	s1, s17
 80068bc:	eeb0 0a48 	vmov.f32	s0, s16
 80068c0:	4965      	ldr	r1, [pc, #404]	@ (8006a58 <update_control_loops+0x2ec>)
 80068c2:	4867      	ldr	r0, [pc, #412]	@ (8006a60 <update_control_loops+0x2f4>)
 80068c4:	f7fd fae8 	bl	8003e98 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 80068c8:	4b63      	ldr	r3, [pc, #396]	@ (8006a58 <update_control_loops+0x2ec>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a59      	ldr	r2, [pc, #356]	@ (8006a34 <update_control_loops+0x2c8>)
 80068ce:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 80068d0:	4b61      	ldr	r3, [pc, #388]	@ (8006a58 <update_control_loops+0x2ec>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	4a57      	ldr	r2, [pc, #348]	@ (8006a34 <update_control_loops+0x2c8>)
 80068d6:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 80068d8:	4b5f      	ldr	r3, [pc, #380]	@ (8006a58 <update_control_loops+0x2ec>)
 80068da:	7c1b      	ldrb	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 809f 	beq.w	8006a20 <update_control_loops+0x2b4>
				prismatic_axis.trajectory_active = false;
 80068e2:	4b54      	ldr	r3, [pc, #336]	@ (8006a34 <update_control_loops+0x2c8>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 80068ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006a58 <update_control_loops+0x2ec>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a51      	ldr	r2, [pc, #324]	@ (8006a34 <update_control_loops+0x2c8>)
 80068f0:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80068f2:	4b50      	ldr	r3, [pc, #320]	@ (8006a34 <update_control_loops+0x2c8>)
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80068fa:	4b50      	ldr	r3, [pc, #320]	@ (8006a3c <update_control_loops+0x2d0>)
 80068fc:	ed93 8a03 	vldr	s16, [r3, #12]
 8006900:	4b4e      	ldr	r3, [pc, #312]	@ (8006a3c <update_control_loops+0x2d0>)
 8006902:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006906:	4b57      	ldr	r3, [pc, #348]	@ (8006a64 <update_control_loops+0x2f8>)
 8006908:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	f7fa f920 	bl	8000b54 <__aeabi_d2f>
 8006914:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006916:	4b53      	ldr	r3, [pc, #332]	@ (8006a64 <update_control_loops+0x2f8>)
 8006918:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800691c:	4610      	mov	r0, r2
 800691e:	4619      	mov	r1, r3
 8006920:	f7fa f918 	bl	8000b54 <__aeabi_d2f>
 8006924:	4603      	mov	r3, r0
 8006926:	ee01 3a90 	vmov	s3, r3
 800692a:	ee01 4a10 	vmov	s2, r4
 800692e:	eef0 0a68 	vmov.f32	s1, s17
 8006932:	eeb0 0a48 	vmov.f32	s0, s16
 8006936:	484c      	ldr	r0, [pc, #304]	@ (8006a68 <update_control_loops+0x2fc>)
 8006938:	f7fd f9ec 	bl	8003d14 <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 800693c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a3c <update_control_loops+0x2d0>)
 800693e:	2201      	movs	r2, #1
 8006940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006944:	4b42      	ldr	r3, [pc, #264]	@ (8006a50 <update_control_loops+0x2e4>)
 8006946:	2203      	movs	r2, #3
 8006948:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 800694a:	e069      	b.n	8006a20 <update_control_loops+0x2b4>

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 800694c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a3c <update_control_loops+0x2d0>)
 800694e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006952:	2b00      	cmp	r3, #0
 8006954:	d066      	beq.n	8006a24 <update_control_loops+0x2b8>
 8006956:	4b45      	ldr	r3, [pc, #276]	@ (8006a6c <update_control_loops+0x300>)
 8006958:	7c1b      	ldrb	r3, [r3, #16]
 800695a:	f083 0301 	eor.w	r3, r3, #1
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b00      	cmp	r3, #0
 8006962:	d05f      	beq.n	8006a24 <update_control_loops+0x2b8>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006964:	4b35      	ldr	r3, [pc, #212]	@ (8006a3c <update_control_loops+0x2d0>)
 8006966:	ed93 8a03 	vldr	s16, [r3, #12]
 800696a:	4b34      	ldr	r3, [pc, #208]	@ (8006a3c <update_control_loops+0x2d0>)
 800696c:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006970:	4b3c      	ldr	r3, [pc, #240]	@ (8006a64 <update_control_loops+0x2f8>)
 8006972:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	f7fa f8eb 	bl	8000b54 <__aeabi_d2f>
 800697e:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006980:	4b38      	ldr	r3, [pc, #224]	@ (8006a64 <update_control_loops+0x2f8>)
 8006982:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006986:	4610      	mov	r0, r2
 8006988:	4619      	mov	r1, r3
 800698a:	f7fa f8e3 	bl	8000b54 <__aeabi_d2f>
 800698e:	4603      	mov	r3, r0
 8006990:	ee01 3a90 	vmov	s3, r3
 8006994:	ee01 4a10 	vmov	s2, r4
 8006998:	eef0 0a68 	vmov.f32	s1, s17
 800699c:	eeb0 0a48 	vmov.f32	s0, s16
 80069a0:	4932      	ldr	r1, [pc, #200]	@ (8006a6c <update_control_loops+0x300>)
 80069a2:	4831      	ldr	r0, [pc, #196]	@ (8006a68 <update_control_loops+0x2fc>)
 80069a4:	f7fd fa78 	bl	8003e98 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 80069a8:	4b30      	ldr	r3, [pc, #192]	@ (8006a6c <update_control_loops+0x300>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <update_control_loops+0x2d0>)
 80069ae:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 80069b0:	4b2e      	ldr	r3, [pc, #184]	@ (8006a6c <update_control_loops+0x300>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a21      	ldr	r2, [pc, #132]	@ (8006a3c <update_control_loops+0x2d0>)
 80069b6:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 80069b8:	4b2c      	ldr	r3, [pc, #176]	@ (8006a6c <update_control_loops+0x300>)
 80069ba:	7c1b      	ldrb	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d031      	beq.n	8006a24 <update_control_loops+0x2b8>
				revolute_axis.trajectory_active = false;
 80069c0:	4b1e      	ldr	r3, [pc, #120]	@ (8006a3c <update_control_loops+0x2d0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 80069c8:	4b28      	ldr	r3, [pc, #160]	@ (8006a6c <update_control_loops+0x300>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a3c <update_control_loops+0x2d0>)
 80069ce:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 80069d0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a3c <update_control_loops+0x2d0>)
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 80069d8:	4825      	ldr	r0, [pc, #148]	@ (8006a70 <update_control_loops+0x304>)
 80069da:	f7fa fcaf 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 80069de:	4825      	ldr	r0, [pc, #148]	@ (8006a74 <update_control_loops+0x308>)
 80069e0:	f7fa fcac 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 80069e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a54 <update_control_loops+0x2e8>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80069ea:	4b19      	ldr	r3, [pc, #100]	@ (8006a50 <update_control_loops+0x2e4>)
 80069ec:	2204      	movs	r2, #4
 80069ee:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 80069f0:	e018      	b.n	8006a24 <update_control_loops+0x2b8>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 80069f2:	4b18      	ldr	r3, [pc, #96]	@ (8006a54 <update_control_loops+0x2e8>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3301      	adds	r3, #1
 80069f8:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <update_control_loops+0x2e8>)
 80069fa:	6013      	str	r3, [r2, #0]
 80069fc:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d939      	bls.n	8006a78 <update_control_loops+0x30c>
			plotter_pen_down();
 8006a04:	f001 fffa 	bl	80089fc <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006a08:	4b11      	ldr	r3, [pc, #68]	@ (8006a50 <update_control_loops+0x2e4>)
 8006a0a:	2205      	movs	r2, #5
 8006a0c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006a0e:	e033      	b.n	8006a78 <update_control_loops+0x30c>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006a10:	4b0f      	ldr	r3, [pc, #60]	@ (8006a50 <update_control_loops+0x2e4>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	701a      	strb	r2, [r3, #0]
		break;
 8006a16:	e030      	b.n	8006a7a <update_control_loops+0x30e>

	default:
		break;
 8006a18:	bf00      	nop
 8006a1a:	e02e      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a1c:	bf00      	nop
 8006a1e:	e02c      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a20:	bf00      	nop
 8006a22:	e02a      	b.n	8006a7a <update_control_loops+0x30e>
		break;
 8006a24:	bf00      	nop
 8006a26:	e028      	b.n	8006a7a <update_control_loops+0x30e>
 8006a28:	20000508 	.word	0x20000508
 8006a2c:	200003a4 	.word	0x200003a4
 8006a30:	200004ac 	.word	0x200004ac
 8006a34:	20000280 	.word	0x20000280
 8006a38:	20000878 	.word	0x20000878
 8006a3c:	200002c0 	.word	0x200002c0
 8006a40:	20000363 	.word	0x20000363
 8006a44:	44fa0000 	.word	0x44fa0000
 8006a48:	20000414 	.word	0x20000414
 8006a4c:	20000460 	.word	0x20000460
 8006a50:	20000300 	.word	0x20000300
 8006a54:	20000358 	.word	0x20000358
 8006a58:	2000032c 	.word	0x2000032c
 8006a5c:	20000080 	.word	0x20000080
 8006a60:	20000304 	.word	0x20000304
 8006a64:	20000000 	.word	0x20000000
 8006a68:	20000318 	.word	0x20000318
 8006a6c:	20000340 	.word	0x20000340
 8006a70:	200005b4 	.word	0x200005b4
 8006a74:	200005dc 	.word	0x200005dc
		break;
 8006a78:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <update_control_loops+0x33c>)
 8006a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8006aac <update_control_loops+0x340>)
 8006a80:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006a82:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <update_control_loops+0x344>)
 8006a84:	edd3 7a00 	vldr	s15, [r3]
 8006a88:	220e      	movs	r2, #14
 8006a8a:	210f      	movs	r1, #15
 8006a8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006a90:	4808      	ldr	r0, [pc, #32]	@ (8006ab4 <update_control_loops+0x348>)
 8006a92:	f7fd fd99 	bl	80045c8 <UnitConverter_angle>
 8006a96:	eef0 7a40 	vmov.f32	s15, s0
 8006a9a:	4b07      	ldr	r3, [pc, #28]	@ (8006ab8 <update_control_loops+0x34c>)
 8006a9c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	ecbd 8b02 	vpop	{d8}
 8006aa6:	bd98      	pop	{r3, r4, r7, pc}
 8006aa8:	200004ac 	.word	0x200004ac
 8006aac:	20000280 	.word	0x20000280
 8006ab0:	200003a4 	.word	0x200003a4
 8006ab4:	20000878 	.word	0x20000878
 8006ab8:	200002c0 	.word	0x200002c0

08006abc <check_emergency_button>:

void check_emergency_button(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	480c      	ldr	r0, [pc, #48]	@ (8006af8 <check_emergency_button+0x3c>)
 8006ac6:	f005 fac9 	bl	800c05c <HAL_GPIO_ReadPin>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	bf14      	ite	ne
 8006ad0:	2301      	movne	r3, #1
 8006ad2:	2300      	moveq	r3, #0
 8006ad4:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f083 0301 	eor.w	r3, r3, #1
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d005      	beq.n	8006aee <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <check_emergency_button+0x40>)
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d001      	beq.n	8006aee <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006aea:	f000 f877 	bl	8006bdc <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006aee:	bf00      	nop
 8006af0:	3708      	adds	r7, #8
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	48000400 	.word	0x48000400
 8006afc:	20000364 	.word	0x20000364

08006b00 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006b04:	4b16      	ldr	r3, [pc, #88]	@ (8006b60 <check_safety_conditions+0x60>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d127      	bne.n	8006b5c <check_safety_conditions+0x5c>
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <check_safety_conditions+0x64>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d123      	bne.n	8006b5c <check_safety_conditions+0x5c>
 8006b14:	4b14      	ldr	r3, [pc, #80]	@ (8006b68 <check_safety_conditions+0x68>)
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11f      	bne.n	8006b5c <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006b1c:	4b13      	ldr	r3, [pc, #76]	@ (8006b6c <check_safety_conditions+0x6c>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <check_safety_conditions+0x3c>
 8006b26:	4b12      	ldr	r3, [pc, #72]	@ (8006b70 <check_safety_conditions+0x70>)
 8006b28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b34:	d502      	bpl.n	8006b3c <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006b36:	f000 f81f 	bl	8006b78 <trigger_software_emergency>
		return;
 8006b3a:	e010      	b.n	8006b5e <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <check_safety_conditions+0x74>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <check_safety_conditions+0x5e>
 8006b46:	4b0a      	ldr	r3, [pc, #40]	@ (8006b70 <check_safety_conditions+0x70>)
 8006b48:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006b4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b54:	dd03      	ble.n	8006b5e <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006b56:	f000 f80f 	bl	8006b78 <trigger_software_emergency>
		return;
 8006b5a:	e000      	b.n	8006b5e <check_safety_conditions+0x5e>
		return;
 8006b5c:	bf00      	nop
	}
}
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000134 	.word	0x20000134
 8006b64:	20000364 	.word	0x20000364
 8006b68:	20000363 	.word	0x20000363
 8006b6c:	20000360 	.word	0x20000360
 8006b70:	20000280 	.word	0x20000280
 8006b74:	20000361 	.word	0x20000361

08006b78 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
    if (safety_state == SAFETY_NORMAL) {
 8006b7c:	4b10      	ldr	r3, [pc, #64]	@ (8006bc0 <trigger_software_emergency+0x48>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11b      	bne.n	8006bbc <trigger_software_emergency+0x44>
        safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006b84:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc0 <trigger_software_emergency+0x48>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
        emergency_stop_all_motors();
 8006b8a:	f000 f88f 	bl	8006cac <emergency_stop_all_motors>
        safety_toggle_timer = 0;
 8006b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc4 <trigger_software_emergency+0x4c>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	601a      	str	r2, [r3, #0]
        pilot_light_state = false;
 8006b94:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <trigger_software_emergency+0x50>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
        motion_sequence_state = MOTION_IDLE;
 8006b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bcc <trigger_software_emergency+0x54>)
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
        prismatic_axis.trajectory_active = false;
 8006ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd0 <trigger_software_emergency+0x58>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        revolute_axis.trajectory_active = false;
 8006ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd4 <trigger_software_emergency+0x5c>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Exit joy mode if active
        if (joy_mode_active) {
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <trigger_software_emergency+0x60>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <trigger_software_emergency+0x44>
            exit_joy_mode();
 8006bb8:	f000 f9be 	bl	8006f38 <exit_joy_mode>
        }
    }
}
 8006bbc:	bf00      	nop
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	20000364 	.word	0x20000364
 8006bc4:	20000368 	.word	0x20000368
 8006bc8:	2000036c 	.word	0x2000036c
 8006bcc:	20000300 	.word	0x20000300
 8006bd0:	20000280 	.word	0x20000280
 8006bd4:	200002c0 	.word	0x200002c0
 8006bd8:	200003ad 	.word	0x200003ad

08006bdc <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
    safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006be0:	4b13      	ldr	r3, [pc, #76]	@ (8006c30 <trigger_hardware_emergency+0x54>)
 8006be2:	2202      	movs	r2, #2
 8006be4:	701a      	strb	r2, [r3, #0]
    hardware_emergency_triggered = true;
 8006be6:	4b13      	ldr	r3, [pc, #76]	@ (8006c34 <trigger_hardware_emergency+0x58>)
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
    emergency_stop_all_motors();
 8006bec:	f000 f85e 	bl	8006cac <emergency_stop_all_motors>
    safety_toggle_timer = 0;
 8006bf0:	4b11      	ldr	r3, [pc, #68]	@ (8006c38 <trigger_hardware_emergency+0x5c>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
    pilot_light_state = false;
 8006bf6:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <trigger_hardware_emergency+0x60>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	701a      	strb	r2, [r3, #0]
    homing_active = false;
 8006bfc:	4b10      	ldr	r3, [pc, #64]	@ (8006c40 <trigger_hardware_emergency+0x64>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	701a      	strb	r2, [r3, #0]
    homing_state = HOMING_IDLE;
 8006c02:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <trigger_hardware_emergency+0x68>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
    motion_sequence_state = MOTION_IDLE;
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <trigger_hardware_emergency+0x6c>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	701a      	strb	r2, [r3, #0]
    prismatic_axis.trajectory_active = false;
 8006c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8006c4c <trigger_hardware_emergency+0x70>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    revolute_axis.trajectory_active = false;
 8006c16:	4b0e      	ldr	r3, [pc, #56]	@ (8006c50 <trigger_hardware_emergency+0x74>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    // Exit joy mode if active
    if (joy_mode_active) {
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <trigger_hardware_emergency+0x78>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <trigger_hardware_emergency+0x4e>
        exit_joy_mode();
 8006c26:	f000 f987 	bl	8006f38 <exit_joy_mode>
    }
}
 8006c2a:	bf00      	nop
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000364 	.word	0x20000364
 8006c34:	2000036d 	.word	0x2000036d
 8006c38:	20000368 	.word	0x20000368
 8006c3c:	2000036c 	.word	0x2000036c
 8006c40:	20000363 	.word	0x20000363
 8006c44:	20000362 	.word	0x20000362
 8006c48:	20000300 	.word	0x20000300
 8006c4c:	20000280 	.word	0x20000280
 8006c50:	200002c0 	.word	0x200002c0
 8006c54:	200003ad 	.word	0x200003ad

08006c58 <clear_emergency_state>:

void clear_emergency_state(void) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <clear_emergency_state+0x3c>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006c62:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <clear_emergency_state+0x40>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006c68:	4b0c      	ldr	r3, [pc, #48]	@ (8006c9c <clear_emergency_state+0x44>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ca0 <clear_emergency_state+0x48>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006c74:	2200      	movs	r2, #0
 8006c76:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006c7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c7e:	f005 fa05 	bl	800c08c <HAL_GPIO_WritePin>
	up_photo = false;
 8006c82:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <clear_emergency_state+0x4c>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006c88:	4b07      	ldr	r3, [pc, #28]	@ (8006ca8 <clear_emergency_state+0x50>)
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	20000364 	.word	0x20000364
 8006c98:	2000036d 	.word	0x2000036d
 8006c9c:	20000368 	.word	0x20000368
 8006ca0:	2000036c 	.word	0x2000036c
 8006ca4:	20000360 	.word	0x20000360
 8006ca8:	20000361 	.word	0x20000361

08006cac <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006cb0:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8006d08 <emergency_stop_all_motors+0x5c>
 8006cb4:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8006d0c <emergency_stop_all_motors+0x60>
 8006cb8:	4815      	ldr	r0, [pc, #84]	@ (8006d10 <emergency_stop_all_motors+0x64>)
 8006cba:	f7fa fb85 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006cbe:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8006d08 <emergency_stop_all_motors+0x5c>
 8006cc2:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8006d0c <emergency_stop_all_motors+0x60>
 8006cc6:	4813      	ldr	r0, [pc, #76]	@ (8006d14 <emergency_stop_all_motors+0x68>)
 8006cc8:	f7fa fb7e 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006ccc:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <emergency_stop_all_motors+0x6c>)
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006cd4:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <emergency_stop_all_motors+0x70>)
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8006d18 <emergency_stop_all_motors+0x6c>)
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <emergency_stop_all_motors+0x70>)
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006cec:	480c      	ldr	r0, [pc, #48]	@ (8006d20 <emergency_stop_all_motors+0x74>)
 8006cee:	f7fa fb25 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006cf2:	480c      	ldr	r0, [pc, #48]	@ (8006d24 <emergency_stop_all_motors+0x78>)
 8006cf4:	f7fa fb22 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006cf8:	480b      	ldr	r0, [pc, #44]	@ (8006d28 <emergency_stop_all_motors+0x7c>)
 8006cfa:	f7fa fb1f 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006cfe:	480b      	ldr	r0, [pc, #44]	@ (8006d2c <emergency_stop_all_motors+0x80>)
 8006d00:	f7fa fb1c 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006d04:	bf00      	nop
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	00000000 	.word	0x00000000
 8006d0c:	44fa0000 	.word	0x44fa0000
 8006d10:	20000414 	.word	0x20000414
 8006d14:	20000460 	.word	0x20000460
 8006d18:	20000280 	.word	0x20000280
 8006d1c:	200002c0 	.word	0x200002c0
 8006d20:	20000564 	.word	0x20000564
 8006d24:	2000058c 	.word	0x2000058c
 8006d28:	200005b4 	.word	0x200005b4
 8006d2c:	200005dc 	.word	0x200005dc

08006d30 <update_safety_system>:

void update_safety_system(void) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	af00      	add	r7, sp, #0
    // Don't control pilot light if joy mode is active
    if (joy_mode_active) {
 8006d34:	4b3a      	ldr	r3, [pc, #232]	@ (8006e20 <update_safety_system+0xf0>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d16e      	bne.n	8006e1a <update_safety_system+0xea>
        return; // Let joy mode handle pilot light
    }

    if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006d3c:	4b39      	ldr	r3, [pc, #228]	@ (8006e24 <update_safety_system+0xf4>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d11f      	bne.n	8006d84 <update_safety_system+0x54>
        if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006d44:	4b38      	ldr	r3, [pc, #224]	@ (8006e28 <update_safety_system+0xf8>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4a37      	ldr	r2, [pc, #220]	@ (8006e28 <update_safety_system+0xf8>)
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	2bf9      	cmp	r3, #249	@ 0xf9
 8006d50:	d918      	bls.n	8006d84 <update_safety_system+0x54>
            HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d5a:	f005 f9af 	bl	800c0bc <HAL_GPIO_TogglePin>
            pilot_light_state = !pilot_light_state;
 8006d5e:	4b33      	ldr	r3, [pc, #204]	@ (8006e2c <update_safety_system+0xfc>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	bf14      	ite	ne
 8006d68:	2301      	movne	r3, #1
 8006d6a:	2300      	moveq	r3, #0
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <update_safety_system+0xfc>)
 8006d7c:	701a      	strb	r2, [r3, #0]
            safety_toggle_timer = 0;
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <update_safety_system+0xf8>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
        }
    }

    if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006d84:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <update_safety_system+0xf4>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d134      	bne.n	8006df6 <update_safety_system+0xc6>
        if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006d8c:	2110      	movs	r1, #16
 8006d8e:	4828      	ldr	r0, [pc, #160]	@ (8006e30 <update_safety_system+0x100>)
 8006d90:	f005 f964 	bl	800c05c <HAL_GPIO_ReadPin>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d120      	bne.n	8006ddc <update_safety_system+0xac>
            if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006d9a:	4b23      	ldr	r3, [pc, #140]	@ (8006e28 <update_safety_system+0xf8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	4a21      	ldr	r2, [pc, #132]	@ (8006e28 <update_safety_system+0xf8>)
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	2bf9      	cmp	r3, #249	@ 0xf9
 8006da6:	d926      	bls.n	8006df6 <update_safety_system+0xc6>
                HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006da8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006dac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006db0:	f005 f984 	bl	800c0bc <HAL_GPIO_TogglePin>
                pilot_light_state = !pilot_light_state;
 8006db4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e2c <update_safety_system+0xfc>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bf14      	ite	ne
 8006dbe:	2301      	movne	r3, #1
 8006dc0:	2300      	moveq	r3, #0
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b16      	ldr	r3, [pc, #88]	@ (8006e2c <update_safety_system+0xfc>)
 8006dd2:	701a      	strb	r2, [r3, #0]
                safety_toggle_timer = 0;
 8006dd4:	4b14      	ldr	r3, [pc, #80]	@ (8006e28 <update_safety_system+0xf8>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	601a      	str	r2, [r3, #0]
 8006dda:	e00c      	b.n	8006df6 <update_safety_system+0xc6>
            }
        } else {
            HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006de6:	f005 f951 	bl	800c08c <HAL_GPIO_WritePin>
            pilot_light_state = false;
 8006dea:	4b10      	ldr	r3, [pc, #64]	@ (8006e2c <update_safety_system+0xfc>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]
            safety_toggle_timer = 0;
 8006df0:	4b0d      	ldr	r3, [pc, #52]	@ (8006e28 <update_safety_system+0xf8>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
        }
    }

    if (safety_state == SAFETY_NORMAL) {
 8006df6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <update_safety_system+0xf4>)
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10e      	bne.n	8006e1c <update_safety_system+0xec>
        HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e08:	f005 f940 	bl	800c08c <HAL_GPIO_WritePin>
        pilot_light_state = false;
 8006e0c:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <update_safety_system+0xfc>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
        safety_toggle_timer = 0;
 8006e12:	4b05      	ldr	r3, [pc, #20]	@ (8006e28 <update_safety_system+0xf8>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e000      	b.n	8006e1c <update_safety_system+0xec>
        return; // Let joy mode handle pilot light
 8006e1a:	bf00      	nop
    }
}
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	200003ad 	.word	0x200003ad
 8006e24:	20000364 	.word	0x20000364
 8006e28:	20000368 	.word	0x20000368
 8006e2c:	2000036c 	.word	0x2000036c
 8006e30:	48000400 	.word	0x48000400

08006e34 <is_emergency_active>:

bool is_emergency_active(void) {
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006e38:	4b05      	ldr	r3, [pc, #20]	@ (8006e50 <is_emergency_active+0x1c>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	bf14      	ite	ne
 8006e40:	2301      	movne	r3, #1
 8006e42:	2300      	moveq	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000364 	.word	0x20000364

08006e54 <enter_joy_mode>:

void enter_joy_mode(void) {
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
    if (is_emergency_active() || homing_active || joy_mode_active) {
 8006e58:	f7ff ffec 	bl	8006e34 <is_emergency_active>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d14c      	bne.n	8006efc <enter_joy_mode+0xa8>
 8006e62:	4b27      	ldr	r3, [pc, #156]	@ (8006f00 <enter_joy_mode+0xac>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d148      	bne.n	8006efc <enter_joy_mode+0xa8>
 8006e6a:	4b26      	ldr	r3, [pc, #152]	@ (8006f04 <enter_joy_mode+0xb0>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d144      	bne.n	8006efc <enter_joy_mode+0xa8>
        return;
    }

    joy_mode_active = true;
 8006e72:	4b24      	ldr	r3, [pc, #144]	@ (8006f04 <enter_joy_mode+0xb0>)
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
    joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8006e78:	4b23      	ldr	r3, [pc, #140]	@ (8006f08 <enter_joy_mode+0xb4>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	701a      	strb	r2, [r3, #0]

    // Reset all joy mode data
    reset_joy_mode_data();
 8006e7e:	f000 f957 	bl	8007130 <reset_joy_mode_data>

    // Turn on pilot light to indicate joy mode
    HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8006e82:	2201      	movs	r2, #1
 8006e84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e8c:	f005 f8fe 	bl	800c08c <HAL_GPIO_WritePin>
    joy_mode_pilot_state = true;
 8006e90:	4b1e      	ldr	r3, [pc, #120]	@ (8006f0c <enter_joy_mode+0xb8>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	701a      	strb	r2, [r3, #0]
    joy_mode_pilot_timer = 0;
 8006e96:	4b1e      	ldr	r3, [pc, #120]	@ (8006f10 <enter_joy_mode+0xbc>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

    // Stop any current motion
    motion_sequence_state = MOTION_IDLE;
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f14 <enter_joy_mode+0xc0>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	701a      	strb	r2, [r3, #0]
    prismatic_axis.trajectory_active = false;
 8006ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f18 <enter_joy_mode+0xc4>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    revolute_axis.trajectory_active = false;
 8006eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8006f1c <enter_joy_mode+0xc8>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    // Initialize position holding at current positions
    prismatic_axis.position = prismatic_encoder.mm;
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <enter_joy_mode+0xcc>)
 8006eb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eb6:	4a18      	ldr	r2, [pc, #96]	@ (8006f18 <enter_joy_mode+0xc4>)
 8006eb8:	6013      	str	r3, [r2, #0]
    revolute_axis.position = revolute_encoder.rads;
 8006eba:	4b1a      	ldr	r3, [pc, #104]	@ (8006f24 <enter_joy_mode+0xd0>)
 8006ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ebe:	4a17      	ldr	r2, [pc, #92]	@ (8006f1c <enter_joy_mode+0xc8>)
 8006ec0:	6013      	str	r3, [r2, #0]

    // Reset motor commands
    prismatic_axis.command_pos = 0.0f;
 8006ec2:	4b15      	ldr	r3, [pc, #84]	@ (8006f18 <enter_joy_mode+0xc4>)
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_axis.command_pos = 0.0f;
 8006eca:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <enter_joy_mode+0xc8>)
 8006ecc:	f04f 0200 	mov.w	r2, #0
 8006ed0:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_axis.command_vel = 0.0f;
 8006ed2:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <enter_joy_mode+0xc4>)
 8006ed4:	f04f 0200 	mov.w	r2, #0
 8006ed8:	629a      	str	r2, [r3, #40]	@ 0x28
    revolute_axis.command_vel = 0.0f;
 8006eda:	4b10      	ldr	r3, [pc, #64]	@ (8006f1c <enter_joy_mode+0xc8>)
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	629a      	str	r2, [r3, #40]	@ 0x28

    // Reset PID controllers
    PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006ee2:	4811      	ldr	r0, [pc, #68]	@ (8006f28 <enter_joy_mode+0xd4>)
 8006ee4:	f7fa fa2a 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006ee8:	4810      	ldr	r0, [pc, #64]	@ (8006f2c <enter_joy_mode+0xd8>)
 8006eea:	f7fa fa27 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_position_pid);
 8006eee:	4810      	ldr	r0, [pc, #64]	@ (8006f30 <enter_joy_mode+0xdc>)
 8006ef0:	f7fa fa24 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006ef4:	480f      	ldr	r0, [pc, #60]	@ (8006f34 <enter_joy_mode+0xe0>)
 8006ef6:	f7fa fa21 	bl	800133c <PID_CONTROLLER_Reset>
 8006efa:	e000      	b.n	8006efe <enter_joy_mode+0xaa>
        return;
 8006efc:	bf00      	nop
}
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000363 	.word	0x20000363
 8006f04:	200003ad 	.word	0x200003ad
 8006f08:	200003ac 	.word	0x200003ac
 8006f0c:	20000408 	.word	0x20000408
 8006f10:	20000404 	.word	0x20000404
 8006f14:	20000300 	.word	0x20000300
 8006f18:	20000280 	.word	0x20000280
 8006f1c:	200002c0 	.word	0x200002c0
 8006f20:	200004ac 	.word	0x200004ac
 8006f24:	20000508 	.word	0x20000508
 8006f28:	20000564 	.word	0x20000564
 8006f2c:	2000058c 	.word	0x2000058c
 8006f30:	200005b4 	.word	0x200005b4
 8006f34:	200005dc 	.word	0x200005dc

08006f38 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	af00      	add	r7, sp, #0
    joy_mode_active = false;
 8006f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff4 <exit_joy_mode+0xbc>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	701a      	strb	r2, [r3, #0]
    joy_mode_state = JOY_MODE_IDLE;
 8006f42:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff8 <exit_joy_mode+0xc0>)
 8006f44:	2200      	movs	r2, #0
 8006f46:	701a      	strb	r2, [r3, #0]

    // Reset all data
    reset_joy_mode_data();
 8006f48:	f000 f8f2 	bl	8007130 <reset_joy_mode_data>

    // Turn off pilot light
    HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f56:	f005 f899 	bl	800c08c <HAL_GPIO_WritePin>
    joy_mode_pilot_state = false;
 8006f5a:	4b28      	ldr	r3, [pc, #160]	@ (8006ffc <exit_joy_mode+0xc4>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
    joy_mode_pilot_timer = 0;
 8006f60:	4b27      	ldr	r3, [pc, #156]	@ (8007000 <exit_joy_mode+0xc8>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	601a      	str	r2, [r3, #0]

    // Stop motors immediately
    MDXX_set_range(&prismatic_motor, 2000, 0);
 8006f66:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8007004 <exit_joy_mode+0xcc>
 8006f6a:	ed9f 0a27 	vldr	s0, [pc, #156]	@ 8007008 <exit_joy_mode+0xd0>
 8006f6e:	4827      	ldr	r0, [pc, #156]	@ (800700c <exit_joy_mode+0xd4>)
 8006f70:	f7fa fa2a 	bl	80013c8 <MDXX_set_range>
    MDXX_set_range(&revolute_motor, 2000, 0);
 8006f74:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8007004 <exit_joy_mode+0xcc>
 8006f78:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8007008 <exit_joy_mode+0xd0>
 8006f7c:	4824      	ldr	r0, [pc, #144]	@ (8007010 <exit_joy_mode+0xd8>)
 8006f7e:	f7fa fa23 	bl	80013c8 <MDXX_set_range>

    // Reset all motor commands
    prismatic_axis.command_pos = 0.0f;
 8006f82:	4b24      	ldr	r3, [pc, #144]	@ (8007014 <exit_joy_mode+0xdc>)
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	625a      	str	r2, [r3, #36]	@ 0x24
    revolute_axis.command_pos = 0.0f;
 8006f8a:	4b23      	ldr	r3, [pc, #140]	@ (8007018 <exit_joy_mode+0xe0>)
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	625a      	str	r2, [r3, #36]	@ 0x24
    prismatic_axis.command_vel = 0.0f;
 8006f92:	4b20      	ldr	r3, [pc, #128]	@ (8007014 <exit_joy_mode+0xdc>)
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	629a      	str	r2, [r3, #40]	@ 0x28
    revolute_axis.command_vel = 0.0f;
 8006f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8007018 <exit_joy_mode+0xe0>)
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	629a      	str	r2, [r3, #40]	@ 0x28
    prismatic_axis.ffd = 0.0f;
 8006fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8007014 <exit_joy_mode+0xdc>)
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	@ 0x30
    prismatic_axis.dfd = 0.0f;
 8006faa:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <exit_joy_mode+0xdc>)
 8006fac:	f04f 0200 	mov.w	r2, #0
 8006fb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    revolute_axis.ffd = 0.0f;
 8006fb2:	4b19      	ldr	r3, [pc, #100]	@ (8007018 <exit_joy_mode+0xe0>)
 8006fb4:	f04f 0200 	mov.w	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    revolute_axis.dfd = 0.0f;
 8006fba:	4b17      	ldr	r3, [pc, #92]	@ (8007018 <exit_joy_mode+0xe0>)
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Reset PID controllers
    PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006fc2:	4816      	ldr	r0, [pc, #88]	@ (800701c <exit_joy_mode+0xe4>)
 8006fc4:	f7fa f9ba 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006fc8:	4815      	ldr	r0, [pc, #84]	@ (8007020 <exit_joy_mode+0xe8>)
 8006fca:	f7fa f9b7 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_position_pid);
 8006fce:	4815      	ldr	r0, [pc, #84]	@ (8007024 <exit_joy_mode+0xec>)
 8006fd0:	f7fa f9b4 	bl	800133c <PID_CONTROLLER_Reset>
    PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006fd4:	4814      	ldr	r0, [pc, #80]	@ (8007028 <exit_joy_mode+0xf0>)
 8006fd6:	f7fa f9b1 	bl	800133c <PID_CONTROLLER_Reset>

    // Reset motion state
    motion_sequence_state = MOTION_IDLE;
 8006fda:	4b14      	ldr	r3, [pc, #80]	@ (800702c <exit_joy_mode+0xf4>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	701a      	strb	r2, [r3, #0]
    prismatic_axis.trajectory_active = false;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <exit_joy_mode+0xdc>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    revolute_axis.trajectory_active = false;
 8006fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8007018 <exit_joy_mode+0xe0>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006ff0:	bf00      	nop
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	200003ad 	.word	0x200003ad
 8006ff8:	200003ac 	.word	0x200003ac
 8006ffc:	20000408 	.word	0x20000408
 8007000:	20000404 	.word	0x20000404
 8007004:	00000000 	.word	0x00000000
 8007008:	44fa0000 	.word	0x44fa0000
 800700c:	20000414 	.word	0x20000414
 8007010:	20000460 	.word	0x20000460
 8007014:	20000280 	.word	0x20000280
 8007018:	200002c0 	.word	0x200002c0
 800701c:	20000564 	.word	0x20000564
 8007020:	2000058c 	.word	0x2000058c
 8007024:	200005b4 	.word	0x200005b4
 8007028:	200005dc 	.word	0x200005dc
 800702c:	20000300 	.word	0x20000300

08007030 <save_current_position>:

void save_current_position(void) {
 8007030:	b480      	push	{r7}
 8007032:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007034:	4b15      	ldr	r3, [pc, #84]	@ (800708c <save_current_position+0x5c>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b09      	cmp	r3, #9
 800703a:	d822      	bhi.n	8007082 <save_current_position+0x52>
		saved_positions[saved_position_count].prismatic_pos =
 800703c:	4b13      	ldr	r3, [pc, #76]	@ (800708c <save_current_position+0x5c>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	4618      	mov	r0, r3
				prismatic_encoder.mm;
 8007042:	4b13      	ldr	r3, [pc, #76]	@ (8007090 <save_current_position+0x60>)
 8007044:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
		saved_positions[saved_position_count].prismatic_pos =
 8007046:	4913      	ldr	r1, [pc, #76]	@ (8007094 <save_current_position+0x64>)
 8007048:	00c3      	lsls	r3, r0, #3
 800704a:	440b      	add	r3, r1
 800704c:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos =
 800704e:	4b0f      	ldr	r3, [pc, #60]	@ (800708c <save_current_position+0x5c>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
				revolute_encoder.rads;
 8007054:	4b10      	ldr	r3, [pc, #64]	@ (8007098 <save_current_position+0x68>)
 8007056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
		saved_positions[saved_position_count].revolute_pos =
 8007058:	490e      	ldr	r1, [pc, #56]	@ (8007094 <save_current_position+0x64>)
 800705a:	00c3      	lsls	r3, r0, #3
 800705c:	440b      	add	r3, r1
 800705e:	3304      	adds	r3, #4
 8007060:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 8007062:	4b0a      	ldr	r3, [pc, #40]	@ (800708c <save_current_position+0x5c>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	b2da      	uxtb	r2, r3
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <save_current_position+0x5c>)
 800706c:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 800706e:	4b07      	ldr	r3, [pc, #28]	@ (800708c <save_current_position+0x5c>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	2b09      	cmp	r3, #9
 8007074:	d905      	bls.n	8007082 <save_current_position+0x52>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007076:	4b09      	ldr	r3, [pc, #36]	@ (800709c <save_current_position+0x6c>)
 8007078:	2202      	movs	r2, #2
 800707a:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 800707c:	4b08      	ldr	r3, [pc, #32]	@ (80070a0 <save_current_position+0x70>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007082:	bf00      	nop
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	20000400 	.word	0x20000400
 8007090:	200004ac 	.word	0x200004ac
 8007094:	200003b0 	.word	0x200003b0
 8007098:	20000508 	.word	0x20000508
 800709c:	200003ac 	.word	0x200003ac
 80070a0:	20000404 	.word	0x20000404

080070a4 <start_position_playback>:

void start_position_playback(void) {
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
    if (saved_position_count > 0) {
 80070aa:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <start_position_playback+0x6c>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02a      	beq.n	8007108 <start_position_playback+0x64>
        joy_mode_state = JOY_MODE_PLAYBACK;
 80070b2:	4b18      	ldr	r3, [pc, #96]	@ (8007114 <start_position_playback+0x70>)
 80070b4:	2203      	movs	r2, #3
 80070b6:	701a      	strb	r2, [r3, #0]
        playback_position_index = 0;
 80070b8:	4b17      	ldr	r3, [pc, #92]	@ (8007118 <start_position_playback+0x74>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	701a      	strb	r2, [r3, #0]
        joy_mode_playback_timer = 0;
 80070be:	4b17      	ldr	r3, [pc, #92]	@ (800711c <start_position_playback+0x78>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]

        // Keep pilot light ON during playback (don't turn it off)
        HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 80070c4:	2201      	movs	r2, #1
 80070c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80070ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070ce:	f004 ffdd 	bl	800c08c <HAL_GPIO_WritePin>
        joy_mode_pilot_state = true;
 80070d2:	4b13      	ldr	r3, [pc, #76]	@ (8007120 <start_position_playback+0x7c>)
 80070d4:	2201      	movs	r2, #1
 80070d6:	701a      	strb	r2, [r3, #0]

        // Start first trajectory
        float target_pris = saved_positions[0].prismatic_pos;
 80070d8:	4b12      	ldr	r3, [pc, #72]	@ (8007124 <start_position_playback+0x80>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	60fb      	str	r3, [r7, #12]
        float target_rev_rad = saved_positions[0].revolute_pos;
 80070de:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <start_position_playback+0x80>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	60bb      	str	r3, [r7, #8]
        float target_rev_deg = target_rev_rad * 180.0f / PI;
 80070e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80070e8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007128 <start_position_playback+0x84>
 80070ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80070f0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800712c <start_position_playback+0x88>
 80070f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80070f8:	edc7 7a01 	vstr	s15, [r7, #4]

        start_combined_trajectory(target_pris, target_rev_deg);
 80070fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8007100:	ed97 0a03 	vldr	s0, [r7, #12]
 8007104:	f7fe ffdc 	bl	80060c0 <start_combined_trajectory>
    }
}
 8007108:	bf00      	nop
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000400 	.word	0x20000400
 8007114:	200003ac 	.word	0x200003ac
 8007118:	20000401 	.word	0x20000401
 800711c:	2000040c 	.word	0x2000040c
 8007120:	20000408 	.word	0x20000408
 8007124:	200003b0 	.word	0x200003b0
 8007128:	43340000 	.word	0x43340000
 800712c:	40490fdb 	.word	0x40490fdb

08007130 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
    // Reset saved position count
    saved_position_count = 0;
 8007136:	4b19      	ldr	r3, [pc, #100]	@ (800719c <reset_joy_mode_data+0x6c>)
 8007138:	2200      	movs	r2, #0
 800713a:	701a      	strb	r2, [r3, #0]

    // Reset playback index
    playback_position_index = 0;
 800713c:	4b18      	ldr	r3, [pc, #96]	@ (80071a0 <reset_joy_mode_data+0x70>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]

    // Clear all saved positions
    for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	e011      	b.n	800716c <reset_joy_mode_data+0x3c>
        saved_positions[i].prismatic_pos = 0.0f;
 8007148:	4a16      	ldr	r2, [pc, #88]	@ (80071a4 <reset_joy_mode_data+0x74>)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
        saved_positions[i].revolute_pos = 0.0f;
 8007156:	4a13      	ldr	r2, [pc, #76]	@ (80071a4 <reset_joy_mode_data+0x74>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	00db      	lsls	r3, r3, #3
 800715c:	4413      	add	r3, r2
 800715e:	3304      	adds	r3, #4
 8007160:	f04f 0200 	mov.w	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3301      	adds	r3, #1
 800716a:	607b      	str	r3, [r7, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b09      	cmp	r3, #9
 8007170:	ddea      	ble.n	8007148 <reset_joy_mode_data+0x18>
    }

    // Reset pilot light timers
    joy_mode_pilot_timer = 0;
 8007172:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <reset_joy_mode_data+0x78>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
    joy_mode_pilot_state = false;
 8007178:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <reset_joy_mode_data+0x7c>)
 800717a:	2200      	movs	r2, #0
 800717c:	701a      	strb	r2, [r3, #0]

    // Reset playback timer
    joy_mode_playback_timer = 0;
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <reset_joy_mode_data+0x80>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]

    // Reset button states
    joy_mode_b2_pressed = false;
 8007184:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <reset_joy_mode_data+0x84>)
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
    joy_mode_b2_last_state = false;
 800718a:	4b0b      	ldr	r3, [pc, #44]	@ (80071b8 <reset_joy_mode_data+0x88>)
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	20000400 	.word	0x20000400
 80071a0:	20000401 	.word	0x20000401
 80071a4:	200003b0 	.word	0x200003b0
 80071a8:	20000404 	.word	0x20000404
 80071ac:	20000408 	.word	0x20000408
 80071b0:	2000040c 	.word	0x2000040c
 80071b4:	20000410 	.word	0x20000410
 80071b8:	20000411 	.word	0x20000411

080071bc <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 80071bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c0:	ed2d 8b02 	vpush	{d8}
 80071c4:	b091      	sub	sp, #68	@ 0x44
 80071c6:	af00      	add	r7, sp, #0
    // Prismatic axis control based on joystick_x
    float pris_command_vel = 0.0f;
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    bool pris_moving = false;
 80071ce:	2300      	movs	r3, #0
 80071d0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    if (joystick_x >= JOY_MODE_VELOCITY_THRESHOLD) {
 80071d4:	4b55      	ldr	r3, [pc, #340]	@ (800732c <update_joy_mode_velocity_control+0x170>)
 80071d6:	edd3 7a00 	vldr	s15, [r3]
 80071da:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8007330 <update_joy_mode_velocity_control+0x174>
 80071de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e6:	db05      	blt.n	80071f4 <update_joy_mode_velocity_control+0x38>
        pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS; // Negative direction
 80071e8:	4b52      	ldr	r3, [pc, #328]	@ (8007334 <update_joy_mode_velocity_control+0x178>)
 80071ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pris_moving = true;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80071f2:	e00e      	b.n	8007212 <update_joy_mode_velocity_control+0x56>
    } else if (joystick_x <= -JOY_MODE_VELOCITY_THRESHOLD) {
 80071f4:	4b4d      	ldr	r3, [pc, #308]	@ (800732c <update_joy_mode_velocity_control+0x170>)
 80071f6:	edd3 7a00 	vldr	s15, [r3]
 80071fa:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8007338 <update_joy_mode_velocity_control+0x17c>
 80071fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	d804      	bhi.n	8007212 <update_joy_mode_velocity_control+0x56>
        pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;  // Positive direction
 8007208:	4b4c      	ldr	r3, [pc, #304]	@ (800733c <update_joy_mode_velocity_control+0x180>)
 800720a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pris_moving = true;
 800720c:	2301      	movs	r3, #1
 800720e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    }

    // Revolute axis control based on joystick_y
    float rev_command_vel = 0.0f;
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	637b      	str	r3, [r7, #52]	@ 0x34
    bool rev_moving = false;
 8007218:	2300      	movs	r3, #0
 800721a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

    if (joystick_y >= JOY_MODE_VELOCITY_THRESHOLD) {
 800721e:	4b48      	ldr	r3, [pc, #288]	@ (8007340 <update_joy_mode_velocity_control+0x184>)
 8007220:	edd3 7a00 	vldr	s15, [r3]
 8007224:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007330 <update_joy_mode_velocity_control+0x174>
 8007228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007230:	db06      	blt.n	8007240 <update_joy_mode_velocity_control+0x84>
        rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;    // Positive direction
 8007232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007236:	637b      	str	r3, [r7, #52]	@ 0x34
        rev_moving = true;
 8007238:	2301      	movs	r3, #1
 800723a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800723e:	e00f      	b.n	8007260 <update_joy_mode_velocity_control+0xa4>
    } else if (joystick_y <= -JOY_MODE_VELOCITY_THRESHOLD) {
 8007240:	4b3f      	ldr	r3, [pc, #252]	@ (8007340 <update_joy_mode_velocity_control+0x184>)
 8007242:	edd3 7a00 	vldr	s15, [r3]
 8007246:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8007338 <update_joy_mode_velocity_control+0x17c>
 800724a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800724e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007252:	d805      	bhi.n	8007260 <update_joy_mode_velocity_control+0xa4>
        rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;   // Negative direction
 8007254:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8007258:	637b      	str	r3, [r7, #52]	@ 0x34
        rev_moving = true;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    }

    /* PRISMATIC AXIS CONTROL */
    if (pris_moving) {
 8007260:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007264:	2b00      	cmp	r3, #0
 8007266:	d07f      	beq.n	8007368 <update_joy_mode_velocity_control+0x1ac>
        // Moving - use velocity control
        prismatic_axis.vel_error = pris_command_vel - prismatic_axis.kalman_velocity;
 8007268:	4b36      	ldr	r3, [pc, #216]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 800726a:	edd3 7a07 	vldr	s15, [r3, #28]
 800726e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007276:	4b33      	ldr	r3, [pc, #204]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 8007278:	edc3 7a06 	vstr	s15, [r3, #24]
        prismatic_axis.command_pos = PWM_Satuation(
 800727c:	4b31      	ldr	r3, [pc, #196]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 800727e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007282:	eeb0 0a67 	vmov.f32	s0, s15
 8007286:	4830      	ldr	r0, [pc, #192]	@ (8007348 <update_joy_mode_velocity_control+0x18c>)
 8007288:	f7f9 ffc6 	bl	8001218 <PID_CONTROLLER_Compute>
 800728c:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&prismatic_velocity_pid, prismatic_axis.vel_error),
            ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007290:	4b2e      	ldr	r3, [pc, #184]	@ (800734c <update_joy_mode_velocity_control+0x190>)
 8007292:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
        prismatic_axis.command_pos = PWM_Satuation(
 8007296:	4610      	mov	r0, r2
 8007298:	4619      	mov	r1, r3
 800729a:	f7f9 fc13 	bl	8000ac4 <__aeabi_d2iz>
 800729e:	4604      	mov	r4, r0
            ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80072a0:	4b2a      	ldr	r3, [pc, #168]	@ (800734c <update_joy_mode_velocity_control+0x190>)
 80072a2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80072a6:	4690      	mov	r8, r2
 80072a8:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
        prismatic_axis.command_pos = PWM_Satuation(
 80072ac:	4640      	mov	r0, r8
 80072ae:	4649      	mov	r1, r9
 80072b0:	f7f9 fc08 	bl	8000ac4 <__aeabi_d2iz>
 80072b4:	4603      	mov	r3, r0
 80072b6:	4619      	mov	r1, r3
 80072b8:	4620      	mov	r0, r4
 80072ba:	eeb0 0a48 	vmov.f32	s0, s16
 80072be:	f7f9 ff49 	bl	8001154 <PWM_Satuation>
 80072c2:	ee07 0a90 	vmov	s15, r0
 80072c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 80072cc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

        // Add feedforward for moving
        prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80072d0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80072d4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007350 <update_joy_mode_velocity_control+0x194>
 80072d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072dc:	eeb0 0a47 	vmov.f32	s0, s14
 80072e0:	481c      	ldr	r0, [pc, #112]	@ (8007354 <update_joy_mode_velocity_control+0x198>)
 80072e2:	f7fa fad7 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 80072e6:	eef0 7a40 	vmov.f32	s15, s0
 80072ea:	4b16      	ldr	r3, [pc, #88]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 80072ec:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
            pris_command_vel / 1000.0f);
        prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80072f0:	4b19      	ldr	r3, [pc, #100]	@ (8007358 <update_joy_mode_velocity_control+0x19c>)
 80072f2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
            revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 80072f6:	4b19      	ldr	r3, [pc, #100]	@ (800735c <update_joy_mode_velocity_control+0x1a0>)
 80072f8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
        prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80072fc:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007350 <update_joy_mode_velocity_control+0x194>
 8007300:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007304:	eeb0 1a66 	vmov.f32	s2, s13
 8007308:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8007360 <update_joy_mode_velocity_control+0x1a4>
 800730c:	eeb0 0a47 	vmov.f32	s0, s14
 8007310:	4814      	ldr	r0, [pc, #80]	@ (8007364 <update_joy_mode_velocity_control+0x1a8>)
 8007312:	f7fa fb52 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8007316:	eef0 7a40 	vmov.f32	s15, s0
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 800731c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

        // Update target position for holding
        prismatic_axis.position = prismatic_encoder.mm;
 8007320:	4b0e      	ldr	r3, [pc, #56]	@ (800735c <update_joy_mode_velocity_control+0x1a0>)
 8007322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007324:	4a07      	ldr	r2, [pc, #28]	@ (8007344 <update_joy_mode_velocity_control+0x188>)
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	e090      	b.n	800744c <update_joy_mode_velocity_control+0x290>
 800732a:	bf00      	nop
 800732c:	20001954 	.word	0x20001954
 8007330:	42200000 	.word	0x42200000
 8007334:	c3480000 	.word	0xc3480000
 8007338:	c2200000 	.word	0xc2200000
 800733c:	43480000 	.word	0x43480000
 8007340:	20001958 	.word	0x20001958
 8007344:	20000280 	.word	0x20000280
 8007348:	2000058c 	.word	0x2000058c
 800734c:	20000080 	.word	0x20000080
 8007350:	447a0000 	.word	0x447a0000
 8007354:	20000604 	.word	0x20000604
 8007358:	20000508 	.word	0x20000508
 800735c:	200004ac 	.word	0x200004ac
 8007360:	00000000 	.word	0x00000000
 8007364:	20000608 	.word	0x20000608
    } else {
        // Not moving - hold current position
        prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8007368:	4b81      	ldr	r3, [pc, #516]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800736a:	ed93 7a00 	vldr	s14, [r3]
 800736e:	4b81      	ldr	r3, [pc, #516]	@ (8007574 <update_joy_mode_velocity_control+0x3b8>)
 8007370:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007378:	4b7d      	ldr	r3, [pc, #500]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800737a:	edc3 7a05 	vstr	s15, [r3, #20]
        prismatic_axis.command_vel = PWM_Satuation(
 800737e:	4b7c      	ldr	r3, [pc, #496]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 8007380:	edd3 7a05 	vldr	s15, [r3, #20]
 8007384:	eeb0 0a67 	vmov.f32	s0, s15
 8007388:	487b      	ldr	r0, [pc, #492]	@ (8007578 <update_joy_mode_velocity_control+0x3bc>)
 800738a:	f7f9 ff45 	bl	8001218 <PID_CONTROLLER_Compute>
 800738e:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&prismatic_position_pid, prismatic_axis.pos_error),
            ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 8007392:	4b7a      	ldr	r3, [pc, #488]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 8007394:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
        prismatic_axis.command_vel = PWM_Satuation(
 8007398:	4610      	mov	r0, r2
 800739a:	4619      	mov	r1, r3
 800739c:	f7f9 fb92 	bl	8000ac4 <__aeabi_d2iz>
 80073a0:	4604      	mov	r4, r0
            ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80073a2:	4b76      	ldr	r3, [pc, #472]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 80073a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80073a8:	4692      	mov	sl, r2
 80073aa:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
        prismatic_axis.command_vel = PWM_Satuation(
 80073ae:	4650      	mov	r0, sl
 80073b0:	4659      	mov	r1, fp
 80073b2:	f7f9 fb87 	bl	8000ac4 <__aeabi_d2iz>
 80073b6:	4603      	mov	r3, r0
 80073b8:	4619      	mov	r1, r3
 80073ba:	4620      	mov	r0, r4
 80073bc:	eeb0 0a48 	vmov.f32	s0, s16
 80073c0:	f7f9 fec8 	bl	8001154 <PWM_Satuation>
 80073c4:	ee07 0a90 	vmov	s15, r0
 80073c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073cc:	4b68      	ldr	r3, [pc, #416]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80073ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

        prismatic_axis.vel_error = prismatic_axis.command_vel - prismatic_axis.kalman_velocity;
 80073d2:	4b67      	ldr	r3, [pc, #412]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80073d4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80073d8:	4b65      	ldr	r3, [pc, #404]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80073da:	edd3 7a07 	vldr	s15, [r3, #28]
 80073de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073e2:	4b63      	ldr	r3, [pc, #396]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80073e4:	edc3 7a06 	vstr	s15, [r3, #24]
        prismatic_axis.command_pos = PWM_Satuation(
 80073e8:	4b61      	ldr	r3, [pc, #388]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80073ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80073ee:	eeb0 0a67 	vmov.f32	s0, s15
 80073f2:	4863      	ldr	r0, [pc, #396]	@ (8007580 <update_joy_mode_velocity_control+0x3c4>)
 80073f4:	f7f9 ff10 	bl	8001218 <PID_CONTROLLER_Compute>
 80073f8:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&prismatic_velocity_pid, prismatic_axis.vel_error),
            ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 80073fc:	4b5f      	ldr	r3, [pc, #380]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 80073fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
        prismatic_axis.command_pos = PWM_Satuation(
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f7f9 fb5d 	bl	8000ac4 <__aeabi_d2iz>
 800740a:	4604      	mov	r4, r0
            ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800740c:	4b5b      	ldr	r3, [pc, #364]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 800740e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007412:	4615      	mov	r5, r2
 8007414:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
        prismatic_axis.command_pos = PWM_Satuation(
 8007418:	4628      	mov	r0, r5
 800741a:	4631      	mov	r1, r6
 800741c:	f7f9 fb52 	bl	8000ac4 <__aeabi_d2iz>
 8007420:	4603      	mov	r3, r0
 8007422:	4619      	mov	r1, r3
 8007424:	4620      	mov	r0, r4
 8007426:	eeb0 0a48 	vmov.f32	s0, s16
 800742a:	f7f9 fe93 	bl	8001154 <PWM_Satuation>
 800742e:	ee07 0a90 	vmov	s15, r0
 8007432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007436:	4b4e      	ldr	r3, [pc, #312]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 8007438:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

        // No feedforward when holding position
        prismatic_axis.ffd = 0.0f;
 800743c:	4b4c      	ldr	r3, [pc, #304]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800743e:	f04f 0200 	mov.w	r2, #0
 8007442:	631a      	str	r2, [r3, #48]	@ 0x30
        prismatic_axis.dfd = 0.0f;
 8007444:	4b4a      	ldr	r3, [pc, #296]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 8007446:	f04f 0200 	mov.w	r2, #0
 800744a:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 800744c:	4b48      	ldr	r3, [pc, #288]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800744e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007452:	4b47      	ldr	r3, [pc, #284]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 8007454:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007458:	4b45      	ldr	r3, [pc, #276]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800745a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800745e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007466:	4b42      	ldr	r3, [pc, #264]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 8007468:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800746c:	4b40      	ldr	r3, [pc, #256]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 800746e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
        ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007472:	4b42      	ldr	r3, [pc, #264]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 8007474:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
    prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	f7f9 fb22 	bl	8000ac4 <__aeabi_d2iz>
 8007480:	4604      	mov	r4, r0
        ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007482:	4b3e      	ldr	r3, [pc, #248]	@ (800757c <update_joy_mode_velocity_control+0x3c0>)
 8007484:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007488:	623a      	str	r2, [r7, #32]
 800748a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800748e:	627b      	str	r3, [r7, #36]	@ 0x24
    prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007490:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007494:	f7f9 fb16 	bl	8000ac4 <__aeabi_d2iz>
 8007498:	4603      	mov	r3, r0
 800749a:	4619      	mov	r1, r3
 800749c:	4620      	mov	r0, r4
 800749e:	eeb0 0a48 	vmov.f32	s0, s16
 80074a2:	f7f9 fe57 	bl	8001154 <PWM_Satuation>
 80074a6:	ee07 0a90 	vmov	s15, r0
 80074aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074ae:	4b30      	ldr	r3, [pc, #192]	@ (8007570 <update_joy_mode_velocity_control+0x3b4>)
 80074b0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    /* REVOLUTE AXIS CONTROL */
    if (rev_moving) {
 80074b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d071      	beq.n	80075a0 <update_joy_mode_velocity_control+0x3e4>
        // Moving - use velocity control
        revolute_axis.vel_error = rev_command_vel - revolute_axis.kalman_velocity;
 80074bc:	4b31      	ldr	r3, [pc, #196]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 80074be:	edd3 7a07 	vldr	s15, [r3, #28]
 80074c2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80074c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 80074cc:	edc3 7a06 	vstr	s15, [r3, #24]
        revolute_axis.command_pos = PWM_Satuation(
 80074d0:	4b2c      	ldr	r3, [pc, #176]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 80074d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80074d6:	eeb0 0a67 	vmov.f32	s0, s15
 80074da:	482b      	ldr	r0, [pc, #172]	@ (8007588 <update_joy_mode_velocity_control+0x3cc>)
 80074dc:	f7f9 fe9c 	bl	8001218 <PID_CONTROLLER_Compute>
 80074e0:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
            ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80074e4:	4b29      	ldr	r3, [pc, #164]	@ (800758c <update_joy_mode_velocity_control+0x3d0>)
 80074e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
        revolute_axis.command_pos = PWM_Satuation(
 80074ea:	4610      	mov	r0, r2
 80074ec:	4619      	mov	r1, r3
 80074ee:	f7f9 fae9 	bl	8000ac4 <__aeabi_d2iz>
 80074f2:	4604      	mov	r4, r0
            ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80074f4:	4b25      	ldr	r3, [pc, #148]	@ (800758c <update_joy_mode_velocity_control+0x3d0>)
 80074f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80074fa:	61ba      	str	r2, [r7, #24]
 80074fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007500:	61fb      	str	r3, [r7, #28]
        revolute_axis.command_pos = PWM_Satuation(
 8007502:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007506:	f7f9 fadd 	bl	8000ac4 <__aeabi_d2iz>
 800750a:	4603      	mov	r3, r0
 800750c:	4619      	mov	r1, r3
 800750e:	4620      	mov	r0, r4
 8007510:	eeb0 0a48 	vmov.f32	s0, s16
 8007514:	f7f9 fe1e 	bl	8001154 <PWM_Satuation>
 8007518:	ee07 0a90 	vmov	s15, r0
 800751c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007520:	4b18      	ldr	r3, [pc, #96]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 8007522:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

        // Add feedforward for moving
        revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, rev_command_vel);
 8007526:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800752a:	4819      	ldr	r0, [pc, #100]	@ (8007590 <update_joy_mode_velocity_control+0x3d4>)
 800752c:	f7fa f834 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8007530:	eef0 7a40 	vmov.f32	s15, s0
 8007534:	4b13      	ldr	r3, [pc, #76]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 8007536:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800753a:	4b16      	ldr	r3, [pc, #88]	@ (8007594 <update_joy_mode_velocity_control+0x3d8>)
 800753c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
            revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007540:	4b0c      	ldr	r3, [pc, #48]	@ (8007574 <update_joy_mode_velocity_control+0x3b8>)
 8007542:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
        revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007546:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007598 <update_joy_mode_velocity_control+0x3dc>
 800754a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800754e:	eef0 0a66 	vmov.f32	s1, s13
 8007552:	eeb0 0a47 	vmov.f32	s0, s14
 8007556:	4811      	ldr	r0, [pc, #68]	@ (800759c <update_joy_mode_velocity_control+0x3e0>)
 8007558:	f7fa f8b1 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800755c:	eef0 7a40 	vmov.f32	s15, s0
 8007560:	4b08      	ldr	r3, [pc, #32]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 8007562:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

        // Update target position for holding
        revolute_axis.position = revolute_encoder.rads;
 8007566:	4b0b      	ldr	r3, [pc, #44]	@ (8007594 <update_joy_mode_velocity_control+0x3d8>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	4a06      	ldr	r2, [pc, #24]	@ (8007584 <update_joy_mode_velocity_control+0x3c8>)
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	e0cd      	b.n	800770c <update_joy_mode_velocity_control+0x550>
 8007570:	20000280 	.word	0x20000280
 8007574:	200004ac 	.word	0x200004ac
 8007578:	20000564 	.word	0x20000564
 800757c:	20000080 	.word	0x20000080
 8007580:	2000058c 	.word	0x2000058c
 8007584:	200002c0 	.word	0x200002c0
 8007588:	200005dc 	.word	0x200005dc
 800758c:	20000000 	.word	0x20000000
 8007590:	20000610 	.word	0x20000610
 8007594:	20000508 	.word	0x20000508
 8007598:	447a0000 	.word	0x447a0000
 800759c:	20000614 	.word	0x20000614
    } else {
        // Not moving - hold current position
        float normalized_position = normalize_angle(revolute_encoder.rads);
 80075a0:	4b82      	ldr	r3, [pc, #520]	@ (80077ac <update_joy_mode_velocity_control+0x5f0>)
 80075a2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80075a6:	eeb0 0a67 	vmov.f32	s0, s15
 80075aa:	f7fe fc9f 	bl	8005eec <normalize_angle>
 80075ae:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
        revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80075b2:	4b7f      	ldr	r3, [pc, #508]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075b4:	ed93 7a00 	vldr	s14, [r3]
 80075b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80075bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075c0:	4b7b      	ldr	r3, [pc, #492]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075c2:	edc3 7a05 	vstr	s15, [r3, #20]

        // Handle angle wrapping for position error
        if (revolute_axis.pos_error > PI)
 80075c6:	4b7a      	ldr	r3, [pc, #488]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80075cc:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 80077b4 <update_joy_mode_velocity_control+0x5f8>
 80075d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d8:	dd09      	ble.n	80075ee <update_joy_mode_velocity_control+0x432>
            revolute_axis.pos_error -= 2.0f * PI;
 80075da:	4b75      	ldr	r3, [pc, #468]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075dc:	edd3 7a05 	vldr	s15, [r3, #20]
 80075e0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80077b8 <update_joy_mode_velocity_control+0x5fc>
 80075e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80075e8:	4b71      	ldr	r3, [pc, #452]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075ea:	edc3 7a05 	vstr	s15, [r3, #20]
        if (revolute_axis.pos_error < -PI)
 80075ee:	4b70      	ldr	r3, [pc, #448]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80075f0:	edd3 7a05 	vldr	s15, [r3, #20]
 80075f4:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 80077bc <update_joy_mode_velocity_control+0x600>
 80075f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007600:	d509      	bpl.n	8007616 <update_joy_mode_velocity_control+0x45a>
            revolute_axis.pos_error += 2.0f * PI;
 8007602:	4b6b      	ldr	r3, [pc, #428]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007604:	edd3 7a05 	vldr	s15, [r3, #20]
 8007608:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 80077b8 <update_joy_mode_velocity_control+0x5fc>
 800760c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007610:	4b67      	ldr	r3, [pc, #412]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007612:	edc3 7a05 	vstr	s15, [r3, #20]

        revolute_axis.command_vel = PWM_Satuation(
 8007616:	4b66      	ldr	r3, [pc, #408]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007618:	edd3 7a05 	vldr	s15, [r3, #20]
 800761c:	eeb0 0a67 	vmov.f32	s0, s15
 8007620:	4867      	ldr	r0, [pc, #412]	@ (80077c0 <update_joy_mode_velocity_control+0x604>)
 8007622:	f7f9 fdf9 	bl	8001218 <PID_CONTROLLER_Compute>
 8007626:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&revolute_position_pid, revolute_axis.pos_error),
            ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 800762a:	4b66      	ldr	r3, [pc, #408]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 800762c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
        revolute_axis.command_vel = PWM_Satuation(
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	f7f9 fa46 	bl	8000ac4 <__aeabi_d2iz>
 8007638:	4604      	mov	r4, r0
            ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 800763a:	4b62      	ldr	r3, [pc, #392]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 800763c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007640:	613a      	str	r2, [r7, #16]
 8007642:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007646:	617b      	str	r3, [r7, #20]
        revolute_axis.command_vel = PWM_Satuation(
 8007648:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800764c:	f7f9 fa3a 	bl	8000ac4 <__aeabi_d2iz>
 8007650:	4603      	mov	r3, r0
 8007652:	4619      	mov	r1, r3
 8007654:	4620      	mov	r0, r4
 8007656:	eeb0 0a48 	vmov.f32	s0, s16
 800765a:	f7f9 fd7b 	bl	8001154 <PWM_Satuation>
 800765e:	ee07 0a90 	vmov	s15, r0
 8007662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007666:	4b52      	ldr	r3, [pc, #328]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007668:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

        revolute_axis.vel_error = revolute_axis.command_vel - revolute_axis.kalman_velocity;
 800766c:	4b50      	ldr	r3, [pc, #320]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800766e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8007672:	4b4f      	ldr	r3, [pc, #316]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007674:	edd3 7a07 	vldr	s15, [r3, #28]
 8007678:	ee77 7a67 	vsub.f32	s15, s14, s15
 800767c:	4b4c      	ldr	r3, [pc, #304]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800767e:	edc3 7a06 	vstr	s15, [r3, #24]
        revolute_axis.command_pos = PWM_Satuation(
 8007682:	4b4b      	ldr	r3, [pc, #300]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007684:	edd3 7a06 	vldr	s15, [r3, #24]
 8007688:	eeb0 0a67 	vmov.f32	s0, s15
 800768c:	484e      	ldr	r0, [pc, #312]	@ (80077c8 <update_joy_mode_velocity_control+0x60c>)
 800768e:	f7f9 fdc3 	bl	8001218 <PID_CONTROLLER_Compute>
 8007692:	eeb0 8a40 	vmov.f32	s16, s0
            PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
            ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007696:	4b4b      	ldr	r3, [pc, #300]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 8007698:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
        revolute_axis.command_pos = PWM_Satuation(
 800769c:	4610      	mov	r0, r2
 800769e:	4619      	mov	r1, r3
 80076a0:	f7f9 fa10 	bl	8000ac4 <__aeabi_d2iz>
 80076a4:	4604      	mov	r4, r0
            ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80076a6:	4b47      	ldr	r3, [pc, #284]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 80076a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80076ac:	60ba      	str	r2, [r7, #8]
 80076ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80076b2:	60fb      	str	r3, [r7, #12]
        revolute_axis.command_pos = PWM_Satuation(
 80076b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80076b8:	f7f9 fa04 	bl	8000ac4 <__aeabi_d2iz>
 80076bc:	4603      	mov	r3, r0
 80076be:	4619      	mov	r1, r3
 80076c0:	4620      	mov	r0, r4
 80076c2:	eeb0 0a48 	vmov.f32	s0, s16
 80076c6:	f7f9 fd45 	bl	8001154 <PWM_Satuation>
 80076ca:	ee07 0a90 	vmov	s15, r0
 80076ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d2:	4b37      	ldr	r3, [pc, #220]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80076d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

        // Always include DFD for gravity compensation, but no FFD when holding
        revolute_axis.ffd = 0.0f;
 80076d8:	4b35      	ldr	r3, [pc, #212]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 80076da:	f04f 0200 	mov.w	r2, #0
 80076de:	631a      	str	r2, [r3, #48]	@ 0x30
        revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80076e0:	4b32      	ldr	r3, [pc, #200]	@ (80077ac <update_joy_mode_velocity_control+0x5f0>)
 80076e2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
            revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80076e6:	4b39      	ldr	r3, [pc, #228]	@ (80077cc <update_joy_mode_velocity_control+0x610>)
 80076e8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
        revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80076ec:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 80077d0 <update_joy_mode_velocity_control+0x614>
 80076f0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80076f4:	eef0 0a66 	vmov.f32	s1, s13
 80076f8:	eeb0 0a47 	vmov.f32	s0, s14
 80076fc:	4835      	ldr	r0, [pc, #212]	@ (80077d4 <update_joy_mode_velocity_control+0x618>)
 80076fe:	f7f9 ffde 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007702:	eef0 7a40 	vmov.f32	s15, s0
 8007706:	4b2a      	ldr	r3, [pc, #168]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007708:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    }

    revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 800770c:	4b28      	ldr	r3, [pc, #160]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800770e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007712:	4b27      	ldr	r3, [pc, #156]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007714:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007718:	4b25      	ldr	r3, [pc, #148]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800771a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800771e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007726:	4b22      	ldr	r3, [pc, #136]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007728:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800772c:	4b20      	ldr	r3, [pc, #128]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800772e:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
        ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007732:	4b24      	ldr	r3, [pc, #144]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 8007734:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007738:	4610      	mov	r0, r2
 800773a:	4619      	mov	r1, r3
 800773c:	f7f9 f9c2 	bl	8000ac4 <__aeabi_d2iz>
 8007740:	4604      	mov	r4, r0
        ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007742:	4b20      	ldr	r3, [pc, #128]	@ (80077c4 <update_joy_mode_velocity_control+0x608>)
 8007744:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007748:	603a      	str	r2, [r7, #0]
 800774a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800774e:	607b      	str	r3, [r7, #4]
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007754:	f7f9 f9b6 	bl	8000ac4 <__aeabi_d2iz>
 8007758:	4603      	mov	r3, r0
 800775a:	4619      	mov	r1, r3
 800775c:	4620      	mov	r0, r4
 800775e:	eeb0 0a48 	vmov.f32	s0, s16
 8007762:	f7f9 fcf7 	bl	8001154 <PWM_Satuation>
 8007766:	ee07 0a90 	vmov	s15, r0
 800776a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800776e:	4b10      	ldr	r3, [pc, #64]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 8007770:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply motor commands
    MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007774:	4b18      	ldr	r3, [pc, #96]	@ (80077d8 <update_joy_mode_velocity_control+0x61c>)
 8007776:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800777a:	eef0 0a67 	vmov.f32	s1, s15
 800777e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80077dc <update_joy_mode_velocity_control+0x620>
 8007782:	4817      	ldr	r0, [pc, #92]	@ (80077e0 <update_joy_mode_velocity_control+0x624>)
 8007784:	f7f9 fe20 	bl	80013c8 <MDXX_set_range>
    MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8007788:	4b09      	ldr	r3, [pc, #36]	@ (80077b0 <update_joy_mode_velocity_control+0x5f4>)
 800778a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800778e:	eef0 0a67 	vmov.f32	s1, s15
 8007792:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80077dc <update_joy_mode_velocity_control+0x620>
 8007796:	4813      	ldr	r0, [pc, #76]	@ (80077e4 <update_joy_mode_velocity_control+0x628>)
 8007798:	f7f9 fe16 	bl	80013c8 <MDXX_set_range>
}
 800779c:	bf00      	nop
 800779e:	3744      	adds	r7, #68	@ 0x44
 80077a0:	46bd      	mov	sp, r7
 80077a2:	ecbd 8b02 	vpop	{d8}
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	bf00      	nop
 80077ac:	20000508 	.word	0x20000508
 80077b0:	200002c0 	.word	0x200002c0
 80077b4:	40490fdb 	.word	0x40490fdb
 80077b8:	40c90fdb 	.word	0x40c90fdb
 80077bc:	c0490fdb 	.word	0xc0490fdb
 80077c0:	200005b4 	.word	0x200005b4
 80077c4:	20000000 	.word	0x20000000
 80077c8:	200005dc 	.word	0x200005dc
 80077cc:	200004ac 	.word	0x200004ac
 80077d0:	447a0000 	.word	0x447a0000
 80077d4:	20000614 	.word	0x20000614
 80077d8:	20000280 	.word	0x20000280
 80077dc:	44fa0000 	.word	0x44fa0000
 80077e0:	20000414 	.word	0x20000414
 80077e4:	20000460 	.word	0x20000460

080077e8 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 80077ec:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <update_joy_mode_pilot_light+0x58>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d122      	bne.n	800783a <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 80077f4:	4b13      	ldr	r3, [pc, #76]	@ (8007844 <update_joy_mode_pilot_light+0x5c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3301      	adds	r3, #1
 80077fa:	4a12      	ldr	r2, [pc, #72]	@ (8007844 <update_joy_mode_pilot_light+0x5c>)
 80077fc:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 80077fe:	4b11      	ldr	r3, [pc, #68]	@ (8007844 <update_joy_mode_pilot_light+0x5c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007806:	d318      	bcc.n	800783a <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007808:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800780c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007810:	f004 fc54 	bl	800c0bc <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007814:	4b0c      	ldr	r3, [pc, #48]	@ (8007848 <update_joy_mode_pilot_light+0x60>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	bf14      	ite	ne
 800781e:	2301      	movne	r3, #1
 8007820:	2300      	moveq	r3, #0
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f083 0301 	eor.w	r3, r3, #1
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	b2da      	uxtb	r2, r3
 8007830:	4b05      	ldr	r3, [pc, #20]	@ (8007848 <update_joy_mode_pilot_light+0x60>)
 8007832:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007834:	4b03      	ldr	r3, [pc, #12]	@ (8007844 <update_joy_mode_pilot_light+0x5c>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
		}
	}
}
 800783a:	bf00      	nop
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200003ac 	.word	0x200003ac
 8007844:	20000404 	.word	0x20000404
 8007848:	20000408 	.word	0x20000408

0800784c <update_joy_mode>:

void update_joy_mode(void) {
 800784c:	b590      	push	{r4, r7, lr}
 800784e:	ed2d 8b02 	vpush	{d8}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
    if (!joy_mode_active) {
 8007856:	4b97      	ldr	r3, [pc, #604]	@ (8007ab4 <update_joy_mode+0x268>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f083 0301 	eor.w	r3, r3, #1
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b00      	cmp	r3, #0
 8007862:	f040 81d4 	bne.w	8007c0e <update_joy_mode+0x3c2>
        return;
    }

    // ALWAYS update position display values when in joy mode
    normalized_position = normalize_angle(revolute_encoder.rads);
 8007866:	4b94      	ldr	r3, [pc, #592]	@ (8007ab8 <update_joy_mode+0x26c>)
 8007868:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800786c:	eeb0 0a67 	vmov.f32	s0, s15
 8007870:	f7fe fb3c 	bl	8005eec <normalize_angle>
 8007874:	eef0 7a40 	vmov.f32	s15, s0
 8007878:	4b90      	ldr	r3, [pc, #576]	@ (8007abc <update_joy_mode+0x270>)
 800787a:	edc3 7a00 	vstr	s15, [r3]
    prismatic_axis.mm = prismatic_encoder.mm;
 800787e:	4b90      	ldr	r3, [pc, #576]	@ (8007ac0 <update_joy_mode+0x274>)
 8007880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007882:	4a90      	ldr	r2, [pc, #576]	@ (8007ac4 <update_joy_mode+0x278>)
 8007884:	6393      	str	r3, [r2, #56]	@ 0x38
    revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007886:	4b8d      	ldr	r3, [pc, #564]	@ (8007abc <update_joy_mode+0x270>)
 8007888:	edd3 7a00 	vldr	s15, [r3]
 800788c:	220e      	movs	r2, #14
 800788e:	210f      	movs	r1, #15
 8007890:	eeb0 0a67 	vmov.f32	s0, s15
 8007894:	488c      	ldr	r0, [pc, #560]	@ (8007ac8 <update_joy_mode+0x27c>)
 8007896:	f7fc fe97 	bl	80045c8 <UnitConverter_angle>
 800789a:	eef0 7a40 	vmov.f32	s15, s0
 800789e:	4b8b      	ldr	r3, [pc, #556]	@ (8007acc <update_joy_mode+0x280>)
 80078a0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            normalized_position, UNIT_RADIAN, UNIT_DEGREE);

    switch (joy_mode_state) {
 80078a4:	4b8a      	ldr	r3, [pc, #552]	@ (8007ad0 <update_joy_mode+0x284>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	3b01      	subs	r3, #1
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	f200 81b1 	bhi.w	8007c12 <update_joy_mode+0x3c6>
 80078b0:	a201      	add	r2, pc, #4	@ (adr r2, 80078b8 <update_joy_mode+0x6c>)
 80078b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b6:	bf00      	nop
 80078b8:	080078c9 	.word	0x080078c9
 80078bc:	080078cf 	.word	0x080078cf
 80078c0:	080078d5 	.word	0x080078d5
 80078c4:	08007c09 	.word	0x08007c09
    case JOY_MODE_MANUAL_CONTROL:
        // Manual joystick control
        update_joy_mode_velocity_control();
 80078c8:	f7ff fc78 	bl	80071bc <update_joy_mode_velocity_control>
        break;
 80078cc:	e1a4      	b.n	8007c18 <update_joy_mode+0x3cc>

    case JOY_MODE_POSITION_SAVED:
        // 10 positions saved, pilot light toggling, waiting for B2 to start playback
        update_joy_mode_pilot_light();
 80078ce:	f7ff ff8b 	bl	80077e8 <update_joy_mode_pilot_light>
        break;
 80078d2:	e1a1      	b.n	8007c18 <update_joy_mode+0x3cc>

    case JOY_MODE_PLAYBACK:
        // Playing back saved positions - PILOT LIGHT STAYS ON
        // Handle trajectory sequence states for joy mode playback
        switch (motion_sequence_state) {
 80078d4:	4b7f      	ldr	r3, [pc, #508]	@ (8007ad4 <update_joy_mode+0x288>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b05      	cmp	r3, #5
 80078da:	f200 817d 	bhi.w	8007bd8 <update_joy_mode+0x38c>
 80078de:	a201      	add	r2, pc, #4	@ (adr r2, 80078e4 <update_joy_mode+0x98>)
 80078e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e4:	080078fd 	.word	0x080078fd
 80078e8:	080079ab 	.word	0x080079ab
 80078ec:	080079cf 	.word	0x080079cf
 80078f0:	08007b0d 	.word	0x08007b0d
 80078f4:	08007bb3 	.word	0x08007bb3
 80078f8:	08007bd1 	.word	0x08007bd1
        case MOTION_IDLE:
            // Current trajectory finished, wait before starting next
            joy_mode_playback_timer++;
 80078fc:	4b76      	ldr	r3, [pc, #472]	@ (8007ad8 <update_joy_mode+0x28c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a75      	ldr	r2, [pc, #468]	@ (8007ad8 <update_joy_mode+0x28c>)
 8007904:	6013      	str	r3, [r2, #0]
            if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8007906:	4b74      	ldr	r3, [pc, #464]	@ (8007ad8 <update_joy_mode+0x28c>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800790e:	f0c0 8165 	bcc.w	8007bdc <update_joy_mode+0x390>
                playback_position_index++;
 8007912:	4b72      	ldr	r3, [pc, #456]	@ (8007adc <update_joy_mode+0x290>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	3301      	adds	r3, #1
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b70      	ldr	r3, [pc, #448]	@ (8007adc <update_joy_mode+0x290>)
 800791c:	701a      	strb	r2, [r3, #0]

                if (playback_position_index < saved_position_count) {
 800791e:	4b6f      	ldr	r3, [pc, #444]	@ (8007adc <update_joy_mode+0x290>)
 8007920:	781a      	ldrb	r2, [r3, #0]
 8007922:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae0 <update_joy_mode+0x294>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d224      	bcs.n	8007974 <update_joy_mode+0x128>
                    // Start next trajectory
                    float target_pris = saved_positions[playback_position_index].prismatic_pos;
 800792a:	4b6c      	ldr	r3, [pc, #432]	@ (8007adc <update_joy_mode+0x290>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ae4 <update_joy_mode+0x298>)
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	4413      	add	r3, r2
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60fb      	str	r3, [r7, #12]
                    float target_rev_rad = saved_positions[playback_position_index].revolute_pos;
 8007938:	4b68      	ldr	r3, [pc, #416]	@ (8007adc <update_joy_mode+0x290>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	4a69      	ldr	r2, [pc, #420]	@ (8007ae4 <update_joy_mode+0x298>)
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	4413      	add	r3, r2
 8007942:	3304      	adds	r3, #4
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60bb      	str	r3, [r7, #8]
                    float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007948:	edd7 7a02 	vldr	s15, [r7, #8]
 800794c:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8007ae8 <update_joy_mode+0x29c>
 8007950:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007954:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8007aec <update_joy_mode+0x2a0>
 8007958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800795c:	edc7 7a01 	vstr	s15, [r7, #4]

                    start_combined_trajectory(target_pris, target_rev_deg);
 8007960:	edd7 0a01 	vldr	s1, [r7, #4]
 8007964:	ed97 0a03 	vldr	s0, [r7, #12]
 8007968:	f7fe fbaa 	bl	80060c0 <start_combined_trajectory>
                    joy_mode_playback_timer = 0;
 800796c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ad8 <update_joy_mode+0x28c>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

                    // User can now use joystick to manually go home
                    // When ready to exit, they press B4
                }
            }
            break;
 8007972:	e133      	b.n	8007bdc <update_joy_mode+0x390>
                    joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8007974:	4b56      	ldr	r3, [pc, #344]	@ (8007ad0 <update_joy_mode+0x284>)
 8007976:	2201      	movs	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
                    HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 800797a:	2200      	movs	r2, #0
 800797c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007984:	f004 fb82 	bl	800c08c <HAL_GPIO_WritePin>
                    joy_mode_pilot_state = false;
 8007988:	4b59      	ldr	r3, [pc, #356]	@ (8007af0 <update_joy_mode+0x2a4>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
                    prismatic_axis.position = prismatic_encoder.mm;
 800798e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac0 <update_joy_mode+0x274>)
 8007990:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007992:	4a4c      	ldr	r2, [pc, #304]	@ (8007ac4 <update_joy_mode+0x278>)
 8007994:	6013      	str	r3, [r2, #0]
                    revolute_axis.position = revolute_encoder.rads;
 8007996:	4b48      	ldr	r3, [pc, #288]	@ (8007ab8 <update_joy_mode+0x26c>)
 8007998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799a:	4a4c      	ldr	r2, [pc, #304]	@ (8007acc <update_joy_mode+0x280>)
 800799c:	6013      	str	r3, [r2, #0]
                    reset_joy_mode_data();
 800799e:	f7ff fbc7 	bl	8007130 <reset_joy_mode_data>
                    saved_position_count = 0; // Allow new position saving
 80079a2:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae0 <update_joy_mode+0x294>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	701a      	strb	r2, [r3, #0]
            break;
 80079a8:	e118      	b.n	8007bdc <update_joy_mode+0x390>

        case MOTION_PEN_UP_DELAY:
            // INCREMENT motion_delay_timer here for joy mode
            if (++motion_delay_timer >= 1500) {
 80079aa:	4b52      	ldr	r3, [pc, #328]	@ (8007af4 <update_joy_mode+0x2a8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3301      	adds	r3, #1
 80079b0:	4a50      	ldr	r2, [pc, #320]	@ (8007af4 <update_joy_mode+0x2a8>)
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	f240 52db 	movw	r2, #1499	@ 0x5db
 80079b8:	4293      	cmp	r3, r2
 80079ba:	f240 8111 	bls.w	8007be0 <update_joy_mode+0x394>
                prismatic_axis.trajectory_active = true;
 80079be:	4b41      	ldr	r3, [pc, #260]	@ (8007ac4 <update_joy_mode+0x278>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 80079c6:	4b43      	ldr	r3, [pc, #268]	@ (8007ad4 <update_joy_mode+0x288>)
 80079c8:	2202      	movs	r2, #2
 80079ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 80079cc:	e108      	b.n	8007be0 <update_joy_mode+0x394>

        case MOTION_PRISMATIC_ACTIVE:
            if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80079ce:	4b3d      	ldr	r3, [pc, #244]	@ (8007ac4 <update_joy_mode+0x278>)
 80079d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 8105 	beq.w	8007be4 <update_joy_mode+0x398>
 80079da:	4b47      	ldr	r3, [pc, #284]	@ (8007af8 <update_joy_mode+0x2ac>)
 80079dc:	7c1b      	ldrb	r3, [r3, #16]
 80079de:	f083 0301 	eor.w	r3, r3, #1
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 80fd 	beq.w	8007be4 <update_joy_mode+0x398>
                Trapezoidal_Evaluated(&prisGen, &prisEva,
 80079ea:	4b36      	ldr	r3, [pc, #216]	@ (8007ac4 <update_joy_mode+0x278>)
 80079ec:	ed93 8a03 	vldr	s16, [r3, #12]
 80079f0:	4b34      	ldr	r3, [pc, #208]	@ (8007ac4 <update_joy_mode+0x278>)
 80079f2:	edd3 8a04 	vldr	s17, [r3, #16]
                        prismatic_axis.initial_pos, prismatic_axis.target_pos,
                        ZGX45RGG_400RPM_Constant.traject_sd_max,
 80079f6:	4b41      	ldr	r3, [pc, #260]	@ (8007afc <update_joy_mode+0x2b0>)
 80079f8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
                Trapezoidal_Evaluated(&prisGen, &prisEva,
 80079fc:	4610      	mov	r0, r2
 80079fe:	4619      	mov	r1, r3
 8007a00:	f7f9 f8a8 	bl	8000b54 <__aeabi_d2f>
 8007a04:	4604      	mov	r4, r0
                        ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007a06:	4b3d      	ldr	r3, [pc, #244]	@ (8007afc <update_joy_mode+0x2b0>)
 8007a08:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
                Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007a0c:	4610      	mov	r0, r2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	f7f9 f8a0 	bl	8000b54 <__aeabi_d2f>
 8007a14:	4603      	mov	r3, r0
 8007a16:	ee01 3a90 	vmov	s3, r3
 8007a1a:	ee01 4a10 	vmov	s2, r4
 8007a1e:	eef0 0a68 	vmov.f32	s1, s17
 8007a22:	eeb0 0a48 	vmov.f32	s0, s16
 8007a26:	4934      	ldr	r1, [pc, #208]	@ (8007af8 <update_joy_mode+0x2ac>)
 8007a28:	4835      	ldr	r0, [pc, #212]	@ (8007b00 <update_joy_mode+0x2b4>)
 8007a2a:	f7fc fa35 	bl	8003e98 <Trapezoidal_Evaluated>

                prismatic_axis.position = prisEva.setposition;
 8007a2e:	4b32      	ldr	r3, [pc, #200]	@ (8007af8 <update_joy_mode+0x2ac>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a24      	ldr	r2, [pc, #144]	@ (8007ac4 <update_joy_mode+0x278>)
 8007a34:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = prisEva.setvelocity;
 8007a36:	4b30      	ldr	r3, [pc, #192]	@ (8007af8 <update_joy_mode+0x2ac>)
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	4a22      	ldr	r2, [pc, #136]	@ (8007ac4 <update_joy_mode+0x278>)
 8007a3c:	6053      	str	r3, [r2, #4]

                if (prisEva.isFinised) {
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8007af8 <update_joy_mode+0x2ac>)
 8007a40:	7c1b      	ldrb	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 80ce 	beq.w	8007be4 <update_joy_mode+0x398>
                    prismatic_axis.trajectory_active = false;
 8007a48:	4b1e      	ldr	r3, [pc, #120]	@ (8007ac4 <update_joy_mode+0x278>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    prismatic_axis.position = prisEva.setposition;
 8007a50:	4b29      	ldr	r3, [pc, #164]	@ (8007af8 <update_joy_mode+0x2ac>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac4 <update_joy_mode+0x278>)
 8007a56:	6013      	str	r3, [r2, #0]
                    prismatic_axis.velocity = 0.0f;
 8007a58:	4b1a      	ldr	r3, [pc, #104]	@ (8007ac4 <update_joy_mode+0x278>)
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	605a      	str	r2, [r3, #4]

                    Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007a60:	4b1a      	ldr	r3, [pc, #104]	@ (8007acc <update_joy_mode+0x280>)
 8007a62:	ed93 8a03 	vldr	s16, [r3, #12]
 8007a66:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <update_joy_mode+0x280>)
 8007a68:	edd3 8a04 	vldr	s17, [r3, #16]
                            revolute_axis.target_pos,
                            ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007a6c:	4b25      	ldr	r3, [pc, #148]	@ (8007b04 <update_joy_mode+0x2b8>)
 8007a6e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                    Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007a72:	4610      	mov	r0, r2
 8007a74:	4619      	mov	r1, r3
 8007a76:	f7f9 f86d 	bl	8000b54 <__aeabi_d2f>
 8007a7a:	4604      	mov	r4, r0
                            ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007a7c:	4b21      	ldr	r3, [pc, #132]	@ (8007b04 <update_joy_mode+0x2b8>)
 8007a7e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                    Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007a82:	4610      	mov	r0, r2
 8007a84:	4619      	mov	r1, r3
 8007a86:	f7f9 f865 	bl	8000b54 <__aeabi_d2f>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	ee01 3a90 	vmov	s3, r3
 8007a90:	ee01 4a10 	vmov	s2, r4
 8007a94:	eef0 0a68 	vmov.f32	s1, s17
 8007a98:	eeb0 0a48 	vmov.f32	s0, s16
 8007a9c:	481a      	ldr	r0, [pc, #104]	@ (8007b08 <update_joy_mode+0x2bc>)
 8007a9e:	f7fc f939 	bl	8003d14 <Trapezoidal_Generator>

                    revolute_axis.trajectory_active = true;
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <update_joy_mode+0x280>)
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <update_joy_mode+0x288>)
 8007aac:	2203      	movs	r2, #3
 8007aae:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8007ab0:	e098      	b.n	8007be4 <update_joy_mode+0x398>
 8007ab2:	bf00      	nop
 8007ab4:	200003ad 	.word	0x200003ad
 8007ab8:	20000508 	.word	0x20000508
 8007abc:	200003a4 	.word	0x200003a4
 8007ac0:	200004ac 	.word	0x200004ac
 8007ac4:	20000280 	.word	0x20000280
 8007ac8:	20000878 	.word	0x20000878
 8007acc:	200002c0 	.word	0x200002c0
 8007ad0:	200003ac 	.word	0x200003ac
 8007ad4:	20000300 	.word	0x20000300
 8007ad8:	2000040c 	.word	0x2000040c
 8007adc:	20000401 	.word	0x20000401
 8007ae0:	20000400 	.word	0x20000400
 8007ae4:	200003b0 	.word	0x200003b0
 8007ae8:	43340000 	.word	0x43340000
 8007aec:	40490fdb 	.word	0x40490fdb
 8007af0:	20000408 	.word	0x20000408
 8007af4:	20000358 	.word	0x20000358
 8007af8:	2000032c 	.word	0x2000032c
 8007afc:	20000080 	.word	0x20000080
 8007b00:	20000304 	.word	0x20000304
 8007b04:	20000000 	.word	0x20000000
 8007b08:	20000318 	.word	0x20000318

        case MOTION_REVOLUTE_ACTIVE:
            if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007b0c:	4b45      	ldr	r3, [pc, #276]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d068      	beq.n	8007be8 <update_joy_mode+0x39c>
 8007b16:	4b44      	ldr	r3, [pc, #272]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b18:	7c1b      	ldrb	r3, [r3, #16]
 8007b1a:	f083 0301 	eor.w	r3, r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d061      	beq.n	8007be8 <update_joy_mode+0x39c>
                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8007b24:	4b3f      	ldr	r3, [pc, #252]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b26:	ed93 8a03 	vldr	s16, [r3, #12]
 8007b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b2c:	edd3 8a04 	vldr	s17, [r3, #16]
                        revolute_axis.target_pos,
                        ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007b30:	4b3e      	ldr	r3, [pc, #248]	@ (8007c2c <update_joy_mode+0x3e0>)
 8007b32:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8007b36:	4610      	mov	r0, r2
 8007b38:	4619      	mov	r1, r3
 8007b3a:	f7f9 f80b 	bl	8000b54 <__aeabi_d2f>
 8007b3e:	4604      	mov	r4, r0
                        ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007b40:	4b3a      	ldr	r3, [pc, #232]	@ (8007c2c <update_joy_mode+0x3e0>)
 8007b42:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8007b46:	4610      	mov	r0, r2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	f7f9 f803 	bl	8000b54 <__aeabi_d2f>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	ee01 3a90 	vmov	s3, r3
 8007b54:	ee01 4a10 	vmov	s2, r4
 8007b58:	eef0 0a68 	vmov.f32	s1, s17
 8007b5c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b60:	4931      	ldr	r1, [pc, #196]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b62:	4833      	ldr	r0, [pc, #204]	@ (8007c30 <update_joy_mode+0x3e4>)
 8007b64:	f7fc f998 	bl	8003e98 <Trapezoidal_Evaluated>

                revolute_axis.position = revEva.setposition;
 8007b68:	4b2f      	ldr	r3, [pc, #188]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a2d      	ldr	r2, [pc, #180]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b6e:	6013      	str	r3, [r2, #0]
                revolute_axis.velocity = revEva.setvelocity;
 8007b70:	4b2d      	ldr	r3, [pc, #180]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4a2b      	ldr	r2, [pc, #172]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b76:	6053      	str	r3, [r2, #4]

                if (revEva.isFinised) {
 8007b78:	4b2b      	ldr	r3, [pc, #172]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b7a:	7c1b      	ldrb	r3, [r3, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d033      	beq.n	8007be8 <update_joy_mode+0x39c>
                    revolute_axis.trajectory_active = false;
 8007b80:	4b28      	ldr	r3, [pc, #160]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                    revolute_axis.position = revEva.setposition;
 8007b88:	4b27      	ldr	r3, [pc, #156]	@ (8007c28 <update_joy_mode+0x3dc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a25      	ldr	r2, [pc, #148]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b8e:	6013      	str	r3, [r2, #0]
                    revolute_axis.velocity = 0.0f;
 8007b90:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <update_joy_mode+0x3d8>)
 8007b92:	f04f 0200 	mov.w	r2, #0
 8007b96:	605a      	str	r2, [r3, #4]

                    PID_CONTROLLER_Reset(&revolute_position_pid);
 8007b98:	4826      	ldr	r0, [pc, #152]	@ (8007c34 <update_joy_mode+0x3e8>)
 8007b9a:	f7f9 fbcf 	bl	800133c <PID_CONTROLLER_Reset>
                    PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007b9e:	4826      	ldr	r0, [pc, #152]	@ (8007c38 <update_joy_mode+0x3ec>)
 8007ba0:	f7f9 fbcc 	bl	800133c <PID_CONTROLLER_Reset>

                    motion_delay_timer = 0;
 8007ba4:	4b25      	ldr	r3, [pc, #148]	@ (8007c3c <update_joy_mode+0x3f0>)
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
                    motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007baa:	4b25      	ldr	r3, [pc, #148]	@ (8007c40 <update_joy_mode+0x3f4>)
 8007bac:	2204      	movs	r2, #4
 8007bae:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8007bb0:	e01a      	b.n	8007be8 <update_joy_mode+0x39c>

        case MOTION_PEN_DOWN_DELAY:
            // INCREMENT motion_delay_timer here for joy mode
            if (++motion_delay_timer >= 1500) {
 8007bb2:	4b22      	ldr	r3, [pc, #136]	@ (8007c3c <update_joy_mode+0x3f0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	4a20      	ldr	r2, [pc, #128]	@ (8007c3c <update_joy_mode+0x3f0>)
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d913      	bls.n	8007bec <update_joy_mode+0x3a0>
                plotter_pen_down();
 8007bc4:	f000 ff1a 	bl	80089fc <plotter_pen_down>
                motion_sequence_state = MOTION_COMPLETE;
 8007bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c40 <update_joy_mode+0x3f4>)
 8007bca:	2205      	movs	r2, #5
 8007bcc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8007bce:	e00d      	b.n	8007bec <update_joy_mode+0x3a0>

        case MOTION_COMPLETE:
            motion_sequence_state = MOTION_IDLE;
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8007c40 <update_joy_mode+0x3f4>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
            break;
 8007bd6:	e00a      	b.n	8007bee <update_joy_mode+0x3a2>

        default:
            break;
 8007bd8:	bf00      	nop
 8007bda:	e008      	b.n	8007bee <update_joy_mode+0x3a2>
            break;
 8007bdc:	bf00      	nop
 8007bde:	e006      	b.n	8007bee <update_joy_mode+0x3a2>
            break;
 8007be0:	bf00      	nop
 8007be2:	e004      	b.n	8007bee <update_joy_mode+0x3a2>
            break;
 8007be4:	bf00      	nop
 8007be6:	e002      	b.n	8007bee <update_joy_mode+0x3a2>
            break;
 8007be8:	bf00      	nop
 8007bea:	e000      	b.n	8007bee <update_joy_mode+0x3a2>
            break;
 8007bec:	bf00      	nop
        }

        // Update position/velocity control for trajectory playback
        if (motion_sequence_state != MOTION_IDLE) {
 8007bee:	4b14      	ldr	r3, [pc, #80]	@ (8007c40 <update_joy_mode+0x3f4>)
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00f      	beq.n	8007c16 <update_joy_mode+0x3ca>
            // Run position control if not in manual control
            if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007bf6:	4b13      	ldr	r3, [pc, #76]	@ (8007c44 <update_joy_mode+0x3f8>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d901      	bls.n	8007c02 <update_joy_mode+0x3b6>
                update_position_control();
 8007bfe:	f7fe fb2d 	bl	800625c <update_position_control>
            }
            // Always run velocity control during trajectory
            update_velocity_control();
 8007c02:	f7fe fbe9 	bl	80063d8 <update_velocity_control>
        }
        break;
 8007c06:	e006      	b.n	8007c16 <update_joy_mode+0x3ca>

    case JOY_MODE_COMPLETE:
        exit_joy_mode();
 8007c08:	f7ff f996 	bl	8006f38 <exit_joy_mode>
        break;
 8007c0c:	e004      	b.n	8007c18 <update_joy_mode+0x3cc>
        return;
 8007c0e:	bf00      	nop
 8007c10:	e002      	b.n	8007c18 <update_joy_mode+0x3cc>

    default:
        break;
 8007c12:	bf00      	nop
 8007c14:	e000      	b.n	8007c18 <update_joy_mode+0x3cc>
        break;
 8007c16:	bf00      	nop
    }
}
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	ecbd 8b02 	vpop	{d8}
 8007c20:	bd90      	pop	{r4, r7, pc}
 8007c22:	bf00      	nop
 8007c24:	200002c0 	.word	0x200002c0
 8007c28:	20000340 	.word	0x20000340
 8007c2c:	20000000 	.word	0x20000000
 8007c30:	20000318 	.word	0x20000318
 8007c34:	200005b4 	.word	0x200005b4
 8007c38:	200005dc 	.word	0x200005dc
 8007c3c:	20000358 	.word	0x20000358
 8007c40:	20000300 	.word	0x20000300
 8007c44:	200003a0 	.word	0x200003a0

08007c48 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
    // Read current B2 button state (assuming active low like other buttons)
    bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007c4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c52:	4828      	ldr	r0, [pc, #160]	@ (8007cf4 <handle_b2_button_polling+0xac>)
 8007c54:	f004 fa02 	bl	800c05c <HAL_GPIO_ReadPin>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	bf0c      	ite	eq
 8007c5e:	2301      	moveq	r3, #1
 8007c60:	2300      	movne	r3, #0
 8007c62:	71fb      	strb	r3, [r7, #7]

    // Simple edge detection without debounce timer here
    if (b2_current_state && !joy_mode_b2_last_state) {
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d033      	beq.n	8007cd2 <handle_b2_button_polling+0x8a>
 8007c6a:	4b23      	ldr	r3, [pc, #140]	@ (8007cf8 <handle_b2_button_polling+0xb0>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	f083 0301 	eor.w	r3, r3, #1
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d02c      	beq.n	8007cd2 <handle_b2_button_polling+0x8a>
        // Button just pressed - trigger action immediately
        joy_mode_b2_pressed = true;
 8007c78:	4b20      	ldr	r3, [pc, #128]	@ (8007cfc <handle_b2_button_polling+0xb4>)
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	701a      	strb	r2, [r3, #0]

        // Handle B2 button press logic
        if (!is_emergency_active() && !homing_active && motion_sequence_state == MOTION_IDLE) {
 8007c7e:	f7ff f8d9 	bl	8006e34 <is_emergency_active>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f083 0301 	eor.w	r3, r3, #1
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d021      	beq.n	8007cd2 <handle_b2_button_polling+0x8a>
 8007c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007d00 <handle_b2_button_polling+0xb8>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	f083 0301 	eor.w	r3, r3, #1
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01a      	beq.n	8007cd2 <handle_b2_button_polling+0x8a>
 8007c9c:	4b19      	ldr	r3, [pc, #100]	@ (8007d04 <handle_b2_button_polling+0xbc>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d116      	bne.n	8007cd2 <handle_b2_button_polling+0x8a>
            if (!joy_mode_active) {
 8007ca4:	4b18      	ldr	r3, [pc, #96]	@ (8007d08 <handle_b2_button_polling+0xc0>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	f083 0301 	eor.w	r3, r3, #1
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d002      	beq.n	8007cb8 <handle_b2_button_polling+0x70>
                // Enter joy mode
                enter_joy_mode();
 8007cb2:	f7ff f8cf 	bl	8006e54 <enter_joy_mode>
 8007cb6:	e00c      	b.n	8007cd2 <handle_b2_button_polling+0x8a>
            } else {
                // Joy mode is active, handle button press based on current state
                if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8007cb8:	4b14      	ldr	r3, [pc, #80]	@ (8007d0c <handle_b2_button_polling+0xc4>)
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d102      	bne.n	8007cc6 <handle_b2_button_polling+0x7e>
                    // Save current position
                    save_current_position();
 8007cc0:	f7ff f9b6 	bl	8007030 <save_current_position>
 8007cc4:	e005      	b.n	8007cd2 <handle_b2_button_polling+0x8a>
                } else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007cc6:	4b11      	ldr	r3, [pc, #68]	@ (8007d0c <handle_b2_button_polling+0xc4>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d101      	bne.n	8007cd2 <handle_b2_button_polling+0x8a>
                    // Start playback of saved positions
                    start_position_playback();
 8007cce:	f7ff f9e9 	bl	80070a4 <start_position_playback>
            }
        }
    }

    // Update last state
    joy_mode_b2_last_state = b2_current_state;
 8007cd2:	4a09      	ldr	r2, [pc, #36]	@ (8007cf8 <handle_b2_button_polling+0xb0>)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	7013      	strb	r3, [r2, #0]

    // Reset pressed flag when button is released
    if (!b2_current_state) {
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	f083 0301 	eor.w	r3, r3, #1
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <handle_b2_button_polling+0xa2>
        joy_mode_b2_pressed = false;
 8007ce4:	4b05      	ldr	r3, [pc, #20]	@ (8007cfc <handle_b2_button_polling+0xb4>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	701a      	strb	r2, [r3, #0]
    }
}
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	48000800 	.word	0x48000800
 8007cf8:	20000411 	.word	0x20000411
 8007cfc:	20000410 	.word	0x20000410
 8007d00:	20000363 	.word	0x20000363
 8007d04:	20000300 	.word	0x20000300
 8007d08:	200003ad 	.word	0x200003ad
 8007d0c:	200003ac 	.word	0x200003ac

08007d10 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8007d1a:	88fb      	ldrh	r3, [r7, #6]
 8007d1c:	2b40      	cmp	r3, #64	@ 0x40
 8007d1e:	d105      	bne.n	8007d2c <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8007d20:	4b4e      	ldr	r3, [pc, #312]	@ (8007e5c <HAL_GPIO_EXTI_Callback+0x14c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3301      	adds	r3, #1
 8007d26:	4a4d      	ldr	r2, [pc, #308]	@ (8007e5c <HAL_GPIO_EXTI_Callback+0x14c>)
 8007d28:	6013      	str	r3, [r2, #0]
		return;
 8007d2a:	e093      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d103      	bne.n	8007d3a <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8007d32:	4b4b      	ldr	r3, [pc, #300]	@ (8007e60 <HAL_GPIO_EXTI_Callback+0x150>)
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
		return;
 8007d38:	e08c      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8007d3a:	88fb      	ldrh	r3, [r7, #6]
 8007d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d40:	d103      	bne.n	8007d4a <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8007d42:	4b48      	ldr	r3, [pc, #288]	@ (8007e64 <HAL_GPIO_EXTI_Callback+0x154>)
 8007d44:	2201      	movs	r2, #1
 8007d46:	701a      	strb	r2, [r3, #0]
		return;
 8007d48:	e084      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d102      	bne.n	8007d56 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8007d50:	f7fe ff44 	bl	8006bdc <trigger_hardware_emergency>
		return;
 8007d54:	e07e      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	2b80      	cmp	r3, #128	@ 0x80
 8007d5a:	d145      	bne.n	8007de8 <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8007d5c:	f7ff f86a 	bl	8006e34 <is_emergency_active>
 8007d60:	4603      	mov	r3, r0
 8007d62:	f083 0301 	eor.w	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d06e      	beq.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
 8007d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e68 <HAL_GPIO_EXTI_Callback+0x158>)
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f083 0301 	eor.w	r3, r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d067      	beq.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
 8007d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007e6c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	f083 0301 	eor.w	r3, r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d060      	beq.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8007d88:	4b39      	ldr	r3, [pc, #228]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x160>)
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d15c      	bne.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
 8007d90:	4b38      	ldr	r3, [pc, #224]	@ (8007e74 <HAL_GPIO_EXTI_Callback+0x164>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	f083 0301 	eor.w	r3, r3, #1
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d055      	beq.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 8007d9e:	4b36      	ldr	r3, [pc, #216]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x168>)
 8007da0:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8007da2:	4a36      	ldr	r2, [pc, #216]	@ (8007e7c <HAL_GPIO_EXTI_Callback+0x16c>)
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4413      	add	r3, r2
 8007da8:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8007dac:	4b32      	ldr	r3, [pc, #200]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x168>)
 8007dae:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8007db0:	4a33      	ldr	r2, [pc, #204]	@ (8007e80 <HAL_GPIO_EXTI_Callback+0x170>)
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8007dba:	eef0 0a47 	vmov.f32	s1, s14
 8007dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc2:	f7fe f97d 	bl	80060c0 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007dc6:	4b2c      	ldr	r3, [pc, #176]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x168>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8007dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8007e84 <HAL_GPIO_EXTI_Callback+0x174>)
 8007dce:	fb83 3102 	smull	r3, r1, r3, r2
 8007dd2:	17d3      	asrs	r3, r2, #31
 8007dd4:	1ac9      	subs	r1, r1, r3
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	440b      	add	r3, r1
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007de0:	b2ca      	uxtb	r2, r1
 8007de2:	4b25      	ldr	r3, [pc, #148]	@ (8007e78 <HAL_GPIO_EXTI_Callback+0x168>)
 8007de4:	701a      	strb	r2, [r3, #0]
		}
		return;
 8007de6:	e030      	b.n	8007e4a <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8007de8:	88fb      	ldrh	r3, [r7, #6]
 8007dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dee:	d116      	bne.n	8007e1e <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8007df0:	f7ff f820 	bl	8006e34 <is_emergency_active>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f083 0301 	eor.w	r3, r3, #1
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d026      	beq.n	8007e4e <HAL_GPIO_EXTI_Callback+0x13e>
 8007e00:	4b1a      	ldr	r3, [pc, #104]	@ (8007e6c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	f083 0301 	eor.w	r3, r3, #1
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d01f      	beq.n	8007e4e <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 8007e0e:	4b18      	ldr	r3, [pc, #96]	@ (8007e70 <HAL_GPIO_EXTI_Callback+0x160>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d11b      	bne.n	8007e4e <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 8007e16:	2000      	movs	r0, #0
 8007e18:	f7fd fa4e 	bl	80052b8 <start_homing_sequence>
		}
		return;
 8007e1c:	e017      	b.n	8007e4e <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8007e1e:	88fb      	ldrh	r3, [r7, #6]
 8007e20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e24:	d116      	bne.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 8007e26:	4b11      	ldr	r3, [pc, #68]	@ (8007e6c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and reset all data
			exit_joy_mode();
 8007e2e:	f7ff f883 	bl	8006f38 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8007e32:	e00e      	b.n	8007e52 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 8007e34:	f7fe fffe 	bl	8006e34 <is_emergency_active>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d009      	beq.n	8007e52 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 8007e3e:	f7fe ff0b 	bl	8006c58 <clear_emergency_state>
			start_homing_sequence(true);
 8007e42:	2001      	movs	r0, #1
 8007e44:	f7fd fa38 	bl	80052b8 <start_homing_sequence>
		return;
 8007e48:	e003      	b.n	8007e52 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 8007e4a:	bf00      	nop
 8007e4c:	e002      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007e4e:	bf00      	nop
 8007e50:	e000      	b.n	8007e54 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007e52:	bf00      	nop
	}
}
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	2000035c 	.word	0x2000035c
 8007e60:	20000360 	.word	0x20000360
 8007e64:	20000361 	.word	0x20000361
 8007e68:	20000363 	.word	0x20000363
 8007e6c:	200003ad 	.word	0x200003ad
 8007e70:	20000300 	.word	0x20000300
 8007e74:	20000133 	.word	0x20000133
 8007e78:	20000354 	.word	0x20000354
 8007e7c:	08013a18 	.word	0x08013a18
 8007e80:	08013a30 	.word	0x08013a30
 8007e84:	2aaaaaab 	.word	0x2aaaaaab

08007e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a88      	ldr	r2, [pc, #544]	@ (80080b4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	f040 8109 	bne.w	80080ac <HAL_TIM_PeriodElapsedCallback+0x224>
        plotter_update_sensors();
 8007e9a:	f000 fcf9 	bl	8008890 <plotter_update_sensors>

        check_emergency_button();
 8007e9e:	f7fe fe0d 	bl	8006abc <check_emergency_button>

        QEI_get_diff_count(&prismatic_encoder);
 8007ea2:	4885      	ldr	r0, [pc, #532]	@ (80080b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007ea4:	f7fb fcf0 	bl	8003888 <QEI_get_diff_count>
        QEI_compute_data(&prismatic_encoder);
 8007ea8:	4883      	ldr	r0, [pc, #524]	@ (80080b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007eaa:	f7fb fdd9 	bl	8003a60 <QEI_compute_data>
        QEI_get_diff_count(&revolute_encoder);
 8007eae:	4883      	ldr	r0, [pc, #524]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8007eb0:	f7fb fcea 	bl	8003888 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8007eb4:	4881      	ldr	r0, [pc, #516]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8007eb6:	f7fb fdd3 	bl	8003a60 <QEI_compute_data>

        revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8007eba:	4b81      	ldr	r3, [pc, #516]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007ebc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007ec0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007ec4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007ec8:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 80080c4 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8007ecc:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 80080c8 <HAL_TIM_PeriodElapsedCallback+0x240>
 8007ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ed4:	f7f9 ff46 	bl	8001d64 <mapf>
 8007ed8:	eef0 7a40 	vmov.f32	s15, s0
 8007edc:	4b78      	ldr	r3, [pc, #480]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007ede:	edc3 7a08 	vstr	s15, [r3, #32]
                65535.0f, -12.0f, 12.0f);
        revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8007ee2:	4b77      	ldr	r3, [pc, #476]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007ee4:	edd3 7a08 	vldr	s15, [r3, #32]
 8007ee8:	4b74      	ldr	r3, [pc, #464]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8007eea:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007eee:	eef0 0a47 	vmov.f32	s1, s14
 8007ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8007ef6:	4875      	ldr	r0, [pc, #468]	@ (80080cc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8007ef8:	f7fc fde2 	bl	8004ac0 <SteadyStateKalmanFilter>
 8007efc:	eef0 7a40 	vmov.f32	s15, s0
 8007f00:	4b6f      	ldr	r3, [pc, #444]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007f02:	edc3 7a07 	vstr	s15, [r3, #28]
                &revolute_kalman, revolute_axis.input_voltage,
                revolute_encoder.rads);

        if (isnan(revolute_axis.kalman_velocity)) {
 8007f06:	4b6e      	ldr	r3, [pc, #440]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007f08:	edd3 7a07 	vldr	s15, [r3, #28]
 8007f0c:	eef4 7a67 	vcmp.f32	s15, s15
 8007f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f14:	d703      	bvc.n	8007f1e <HAL_TIM_PeriodElapsedCallback+0x96>
            revolute_axis.kalman_velocity = 0.0f;
 8007f16:	4b6a      	ldr	r3, [pc, #424]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	61da      	str	r2, [r3, #28]
        }

        prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8007f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007f24:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007f28:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007f2c:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 80080c4 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8007f30:	eddf 0a65 	vldr	s1, [pc, #404]	@ 80080c8 <HAL_TIM_PeriodElapsedCallback+0x240>
 8007f34:	eeb0 0a67 	vmov.f32	s0, s15
 8007f38:	f7f9 ff14 	bl	8001d64 <mapf>
 8007f3c:	eef0 7a40 	vmov.f32	s15, s0
 8007f40:	4b63      	ldr	r3, [pc, #396]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f42:	edc3 7a08 	vstr	s15, [r3, #32]
                -65535.0f, 65535.0f, -12.0f, 12.0f);
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8007f46:	4b62      	ldr	r3, [pc, #392]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f48:	edd3 7a08 	vldr	s15, [r3, #32]
 8007f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80080b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8007f4e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007f52:	eef0 0a47 	vmov.f32	s1, s14
 8007f56:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5a:	485e      	ldr	r0, [pc, #376]	@ (80080d4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8007f5c:	f7fa fed0 	bl	8002d00 <MotorKalman_Estimate>
 8007f60:	eeb0 7a40 	vmov.f32	s14, s0
                prismatic_axis.input_voltage, prismatic_encoder.rads)
                * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8007f64:	4b5c      	ldr	r3, [pc, #368]	@ (80080d8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8007f66:	edd3 7a04 	vldr	s15, [r3, #16]
 8007f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f6e:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80080dc <HAL_TIM_PeriodElapsedCallback+0x254>
 8007f72:	ee67 7a87 	vmul.f32	s15, s15, s14
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8007f76:	4b56      	ldr	r3, [pc, #344]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f78:	edc3 7a07 	vstr	s15, [r3, #28]

        if (isnan(prismatic_axis.kalman_velocity)) {
 8007f7c:	4b54      	ldr	r3, [pc, #336]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f7e:	edd3 7a07 	vldr	s15, [r3, #28]
 8007f82:	eef4 7a67 	vcmp.f32	s15, s15
 8007f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8a:	d703      	bvc.n	8007f94 <HAL_TIM_PeriodElapsedCallback+0x10c>
            prismatic_axis.kalman_velocity = 0.0f;
 8007f8c:	4b50      	ldr	r3, [pc, #320]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	61da      	str	r2, [r3, #28]
        }

        // Position control update (skip if in joy mode manual control)
        if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007f94:	4b52      	ldr	r3, [pc, #328]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	4a51      	ldr	r2, [pc, #324]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	2b09      	cmp	r3, #9
 8007fa0:	d922      	bls.n	8007fe8 <HAL_TIM_PeriodElapsedCallback+0x160>
            position_control_tick = 0;
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	601a      	str	r2, [r3, #0]

            if (!homing_active &&
 8007fa8:	4b4e      	ldr	r3, [pc, #312]	@ (80080e4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	f083 0301 	eor.w	r3, r3, #1
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d018      	beq.n	8007fe8 <HAL_TIM_PeriodElapsedCallback+0x160>
                (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8007fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f083 0301 	eor.w	r3, r3, #1
 8007fbe:	b2db      	uxtb	r3, r3
            if (!homing_active &&
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d103      	bne.n	8007fcc <HAL_TIM_PeriodElapsedCallback+0x144>
                (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8007fc4:	4b49      	ldr	r3, [pc, #292]	@ (80080ec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d00d      	beq.n	8007fe8 <HAL_TIM_PeriodElapsedCallback+0x160>
                (!is_emergency_active() || tuning_mode)) {
 8007fcc:	f7fe ff32 	bl	8006e34 <is_emergency_active>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	f083 0301 	eor.w	r3, r3, #1
 8007fd6:	b2db      	uxtb	r3, r3
                (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <HAL_TIM_PeriodElapsedCallback+0x15c>
                (!is_emergency_active() || tuning_mode)) {
 8007fdc:	4b44      	ldr	r3, [pc, #272]	@ (80080f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <HAL_TIM_PeriodElapsedCallback+0x160>
                update_position_control();
 8007fe4:	f7fe f93a 	bl	800625c <update_position_control>
            }
        }

        // Velocity control update (skip if in joy mode manual control)
        if (!homing_active &&
 8007fe8:	4b3e      	ldr	r3, [pc, #248]	@ (80080e4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	f083 0301 	eor.w	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d018      	beq.n	8008028 <HAL_TIM_PeriodElapsedCallback+0x1a0>
            (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8007ff6:	4b3c      	ldr	r3, [pc, #240]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	f083 0301 	eor.w	r3, r3, #1
 8007ffe:	b2db      	uxtb	r3, r3
        if (!homing_active &&
 8008000:	2b00      	cmp	r3, #0
 8008002:	d103      	bne.n	800800c <HAL_TIM_PeriodElapsedCallback+0x184>
            (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8008004:	4b39      	ldr	r3, [pc, #228]	@ (80080ec <HAL_TIM_PeriodElapsedCallback+0x264>)
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d00d      	beq.n	8008028 <HAL_TIM_PeriodElapsedCallback+0x1a0>
            (!is_emergency_active() || tuning_mode)) {
 800800c:	f7fe ff12 	bl	8006e34 <is_emergency_active>
 8008010:	4603      	mov	r3, r0
 8008012:	f083 0301 	eor.w	r3, r3, #1
 8008016:	b2db      	uxtb	r3, r3
            (!joy_mode_active || joy_mode_state != JOY_MODE_MANUAL_CONTROL) &&
 8008018:	2b00      	cmp	r3, #0
 800801a:	d103      	bne.n	8008024 <HAL_TIM_PeriodElapsedCallback+0x19c>
            (!is_emergency_active() || tuning_mode)) {
 800801c:	4b34      	ldr	r3, [pc, #208]	@ (80080f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <HAL_TIM_PeriodElapsedCallback+0x1a0>
            update_velocity_control();
 8008024:	f7fe f9d8 	bl	80063d8 <update_velocity_control>
        }

        update_safety_system();
 8008028:	f7fe fe82 	bl	8006d30 <update_safety_system>

        if (!is_emergency_active() || tuning_mode) {
 800802c:	f7fe ff02 	bl	8006e34 <is_emergency_active>
 8008030:	4603      	mov	r3, r0
 8008032:	f083 0301 	eor.w	r3, r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d103      	bne.n	8008044 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 800803c:	4b2c      	ldr	r3, [pc, #176]	@ (80080f0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800803e:	781b      	ldrb	r3, [r3, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <HAL_TIM_PeriodElapsedCallback+0x1c0>
            check_safety_conditions();
 8008044:	f7fe fd5c 	bl	8006b00 <check_safety_conditions>
        }

        // Control loops - joy mode handles its own control
        if (!joy_mode_active) {
 8008048:	4b27      	ldr	r3, [pc, #156]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	f083 0301 	eor.w	r3, r3, #1
 8008050:	b2db      	uxtb	r3, r3
 8008052:	2b00      	cmp	r3, #0
 8008054:	d002      	beq.n	800805c <HAL_TIM_PeriodElapsedCallback+0x1d4>
            update_control_loops();
 8008056:	f7fe fb89 	bl	800676c <update_control_loops>
 800805a:	e001      	b.n	8008060 <HAL_TIM_PeriodElapsedCallback+0x1d8>
        } else {
            update_joy_mode();
 800805c:	f7ff fbf6 	bl	800784c <update_joy_mode>
        }

        // ALWAYS update display values (moved to individual functions)
        if (!joy_mode_active) {
 8008060:	4b21      	ldr	r3, [pc, #132]	@ (80080e8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	f083 0301 	eor.w	r3, r3, #1
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01e      	beq.n	80080ac <HAL_TIM_PeriodElapsedCallback+0x224>
            // Update display values for normal operation
            normalized_position = normalize_angle(revolute_encoder.rads);
 800806e:	4b13      	ldr	r3, [pc, #76]	@ (80080bc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8008070:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008074:	eeb0 0a67 	vmov.f32	s0, s15
 8008078:	f7fd ff38 	bl	8005eec <normalize_angle>
 800807c:	eef0 7a40 	vmov.f32	s15, s0
 8008080:	4b1c      	ldr	r3, [pc, #112]	@ (80080f4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8008082:	edc3 7a00 	vstr	s15, [r3]
            prismatic_axis.mm = prismatic_encoder.mm;
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8008088:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800808a:	4a11      	ldr	r2, [pc, #68]	@ (80080d0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800808c:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 800808e:	4b19      	ldr	r3, [pc, #100]	@ (80080f4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8008090:	edd3 7a00 	vldr	s15, [r3]
 8008094:	220e      	movs	r2, #14
 8008096:	210f      	movs	r1, #15
 8008098:	eeb0 0a67 	vmov.f32	s0, s15
 800809c:	4816      	ldr	r0, [pc, #88]	@ (80080f8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800809e:	f7fc fa93 	bl	80045c8 <UnitConverter_angle>
 80080a2:	eef0 7a40 	vmov.f32	s15, s0
 80080a6:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80080a8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        }
        // Note: joy mode updates its own display values in update_joy_mode()
    }
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20001a44 	.word	0x20001a44
 80080b8:	200004ac 	.word	0x200004ac
 80080bc:	20000508 	.word	0x20000508
 80080c0:	200002c0 	.word	0x200002c0
 80080c4:	477fff00 	.word	0x477fff00
 80080c8:	c77fff00 	.word	0xc77fff00
 80080cc:	20001584 	.word	0x20001584
 80080d0:	20000280 	.word	0x20000280
 80080d4:	20001218 	.word	0x20001218
 80080d8:	20000100 	.word	0x20000100
 80080dc:	447a0000 	.word	0x447a0000
 80080e0:	200003a0 	.word	0x200003a0
 80080e4:	20000363 	.word	0x20000363
 80080e8:	200003ad 	.word	0x200003ad
 80080ec:	200003ac 	.word	0x200003ac
 80080f0:	20000134 	.word	0x20000134
 80080f4:	200003a4 	.word	0x200003a4
 80080f8:	20000878 	.word	0x20000878

080080fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008100:	b672      	cpsid	i
}
 8008102:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <Error_Handler+0x8>

08008108 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800810c:	ed2d 8b02 	vpush	{d8}
 8008110:	b083      	sub	sp, #12
 8008112:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008114:	4bc4      	ldr	r3, [pc, #784]	@ (8008428 <plotter_begin+0x320>)
 8008116:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800811a:	4bc4      	ldr	r3, [pc, #784]	@ (800842c <plotter_begin+0x324>)
 800811c:	691b      	ldr	r3, [r3, #16]
 800811e:	4618      	mov	r0, r3
 8008120:	f7f8 f9de 	bl	80004e0 <__aeabi_f2d>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4620      	mov	r0, r4
 800812a:	4629      	mov	r1, r5
 800812c:	f7f8 fa30 	bl	8000590 <__aeabi_dmul>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4610      	mov	r0, r2
 8008136:	4619      	mov	r1, r3
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	4bbc      	ldr	r3, [pc, #752]	@ (8008430 <plotter_begin+0x328>)
 800813e:	f7f8 fa27 	bl	8000590 <__aeabi_dmul>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008146:	49b8      	ldr	r1, [pc, #736]	@ (8008428 <plotter_begin+0x320>)
 8008148:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 800814c:	4bb6      	ldr	r3, [pc, #728]	@ (8008428 <plotter_begin+0x320>)
 800814e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008152:	4602      	mov	r2, r0
 8008154:	460b      	mov	r3, r1
 8008156:	f7f8 f865 	bl	8000224 <__adddf3>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	49b2      	ldr	r1, [pc, #712]	@ (8008428 <plotter_begin+0x320>)
 8008160:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008164:	49b0      	ldr	r1, [pc, #704]	@ (8008428 <plotter_begin+0x320>)
 8008166:	f04f 0200 	mov.w	r2, #0
 800816a:	4bb2      	ldr	r3, [pc, #712]	@ (8008434 <plotter_begin+0x32c>)
 800816c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008170:	49ad      	ldr	r1, [pc, #692]	@ (8008428 <plotter_begin+0x320>)
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	4bae      	ldr	r3, [pc, #696]	@ (8008430 <plotter_begin+0x328>)
 8008178:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 800817c:	4bae      	ldr	r3, [pc, #696]	@ (8008438 <plotter_begin+0x330>)
 800817e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008182:	a3a7      	add	r3, pc, #668	@ (adr r3, 8008420 <plotter_begin+0x318>)
 8008184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008188:	f7f8 fa02 	bl	8000590 <__aeabi_dmul>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008190:	49a9      	ldr	r1, [pc, #676]	@ (8008438 <plotter_begin+0x330>)
 8008192:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8008196:	49a8      	ldr	r1, [pc, #672]	@ (8008438 <plotter_begin+0x330>)
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	4ba7      	ldr	r3, [pc, #668]	@ (800843c <plotter_begin+0x334>)
 800819e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 10.0;
 80081a2:	49a5      	ldr	r1, [pc, #660]	@ (8008438 <plotter_begin+0x330>)
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	4ba5      	ldr	r3, [pc, #660]	@ (8008440 <plotter_begin+0x338>)
 80081aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80081ae:	2100      	movs	r1, #0
 80081b0:	48a4      	ldr	r0, [pc, #656]	@ (8008444 <plotter_begin+0x33c>)
 80081b2:	f000 fc33 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80081b6:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8008448 <plotter_begin+0x340>
 80081ba:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 800844c <plotter_begin+0x344>
 80081be:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008484 <plotter_begin+0x37c>
 80081c2:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008484 <plotter_begin+0x37c>
 80081c6:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008450 <plotter_begin+0x348>
 80081ca:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008448 <plotter_begin+0x340>
 80081ce:	489d      	ldr	r0, [pc, #628]	@ (8008444 <plotter_begin+0x33c>)
 80081d0:	f000 fc82 	bl	8008ad8 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80081d4:	2102      	movs	r1, #2
 80081d6:	489f      	ldr	r0, [pc, #636]	@ (8008454 <plotter_begin+0x34c>)
 80081d8:	f000 fc20 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80081dc:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 8008448 <plotter_begin+0x340>
 80081e0:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 800844c <plotter_begin+0x344>
 80081e4:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 8008484 <plotter_begin+0x37c>
 80081e8:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 8008484 <plotter_begin+0x37c>
 80081ec:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80081f0:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8008450 <plotter_begin+0x348>
 80081f4:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 8008448 <plotter_begin+0x340>
 80081f8:	4896      	ldr	r0, [pc, #600]	@ (8008454 <plotter_begin+0x34c>)
 80081fa:	f000 fc98 	bl	8008b2e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80081fe:	2100      	movs	r1, #0
 8008200:	4895      	ldr	r0, [pc, #596]	@ (8008458 <plotter_begin+0x350>)
 8008202:	f000 fc0b 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008206:	eddf 2a95 	vldr	s5, [pc, #596]	@ 800845c <plotter_begin+0x354>
 800820a:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008460 <plotter_begin+0x358>
 800820e:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008484 <plotter_begin+0x37c>
 8008212:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008484 <plotter_begin+0x37c>
 8008216:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008450 <plotter_begin+0x348>
 800821a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 800845c <plotter_begin+0x354>
 800821e:	488e      	ldr	r0, [pc, #568]	@ (8008458 <plotter_begin+0x350>)
 8008220:	f000 fc5a 	bl	8008ad8 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008224:	2102      	movs	r1, #2
 8008226:	488f      	ldr	r0, [pc, #572]	@ (8008464 <plotter_begin+0x35c>)
 8008228:	f000 fbf8 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 800822c:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008230:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008234:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 8008484 <plotter_begin+0x37c>
 8008238:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8008484 <plotter_begin+0x37c>
 800823c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008240:	eddf 0a83 	vldr	s1, [pc, #524]	@ 8008450 <plotter_begin+0x348>
 8008244:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008248:	4886      	ldr	r0, [pc, #536]	@ (8008464 <plotter_begin+0x35c>)
 800824a:	f000 fc70 	bl	8008b2e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 800824e:	2100      	movs	r1, #0
 8008250:	4885      	ldr	r0, [pc, #532]	@ (8008468 <plotter_begin+0x360>)
 8008252:	f000 fbe3 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008256:	4b74      	ldr	r3, [pc, #464]	@ (8008428 <plotter_begin+0x320>)
 8008258:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	f7f8 fc78 	bl	8000b54 <__aeabi_d2f>
 8008264:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008266:	4b70      	ldr	r3, [pc, #448]	@ (8008428 <plotter_begin+0x320>)
 8008268:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800826c:	4610      	mov	r0, r2
 800826e:	4619      	mov	r1, r3
 8008270:	f7f8 fc70 	bl	8000b54 <__aeabi_d2f>
 8008274:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008276:	ee07 3a90 	vmov	s15, r3
 800827a:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800827e:	4b6a      	ldr	r3, [pc, #424]	@ (8008428 <plotter_begin+0x320>)
 8008280:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	f7f8 fc64 	bl	8000b54 <__aeabi_d2f>
 800828c:	4603      	mov	r3, r0
 800828e:	ee02 3a90 	vmov	s5, r3
 8008292:	eeb0 2a48 	vmov.f32	s4, s16
 8008296:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008484 <plotter_begin+0x37c>
 800829a:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008484 <plotter_begin+0x37c>
 800829e:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008450 <plotter_begin+0x348>
 80082a2:	ee00 4a10 	vmov	s0, r4
 80082a6:	4870      	ldr	r0, [pc, #448]	@ (8008468 <plotter_begin+0x360>)
 80082a8:	f000 fc16 	bl	8008ad8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 80082ac:	2102      	movs	r1, #2
 80082ae:	486f      	ldr	r0, [pc, #444]	@ (800846c <plotter_begin+0x364>)
 80082b0:	f000 fbb4 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80082b4:	4b5c      	ldr	r3, [pc, #368]	@ (8008428 <plotter_begin+0x320>)
 80082b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	f7f8 fc49 	bl	8000b54 <__aeabi_d2f>
 80082c2:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80082c4:	4b58      	ldr	r3, [pc, #352]	@ (8008428 <plotter_begin+0x320>)
 80082c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	f7f8 fc41 	bl	8000b54 <__aeabi_d2f>
 80082d2:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80082d4:	ee07 3a90 	vmov	s15, r3
 80082d8:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80082dc:	4b52      	ldr	r3, [pc, #328]	@ (8008428 <plotter_begin+0x320>)
 80082de:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80082e2:	4610      	mov	r0, r2
 80082e4:	4619      	mov	r1, r3
 80082e6:	f7f8 fc35 	bl	8000b54 <__aeabi_d2f>
 80082ea:	4603      	mov	r3, r0
 80082ec:	ee03 3a10 	vmov	s6, r3
 80082f0:	eef0 2a48 	vmov.f32	s5, s16
 80082f4:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 8008484 <plotter_begin+0x37c>
 80082f8:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8008484 <plotter_begin+0x37c>
 80082fc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008300:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8008450 <plotter_begin+0x348>
 8008304:	ee00 4a10 	vmov	s0, r4
 8008308:	4858      	ldr	r0, [pc, #352]	@ (800846c <plotter_begin+0x364>)
 800830a:	f000 fc10 	bl	8008b2e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 800830e:	2100      	movs	r1, #0
 8008310:	4857      	ldr	r0, [pc, #348]	@ (8008470 <plotter_begin+0x368>)
 8008312:	f000 fb83 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008316:	4b48      	ldr	r3, [pc, #288]	@ (8008438 <plotter_begin+0x330>)
 8008318:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800831c:	4610      	mov	r0, r2
 800831e:	4619      	mov	r1, r3
 8008320:	f7f8 fc18 	bl	8000b54 <__aeabi_d2f>
 8008324:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008326:	4b44      	ldr	r3, [pc, #272]	@ (8008438 <plotter_begin+0x330>)
 8008328:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800832c:	4610      	mov	r0, r2
 800832e:	4619      	mov	r1, r3
 8008330:	f7f8 fc10 	bl	8000b54 <__aeabi_d2f>
 8008334:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 800833e:	4b3e      	ldr	r3, [pc, #248]	@ (8008438 <plotter_begin+0x330>)
 8008340:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f7f8 fc04 	bl	8000b54 <__aeabi_d2f>
 800834c:	4603      	mov	r3, r0
 800834e:	ee02 3a90 	vmov	s5, r3
 8008352:	eeb0 2a48 	vmov.f32	s4, s16
 8008356:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008484 <plotter_begin+0x37c>
 800835a:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008484 <plotter_begin+0x37c>
 800835e:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008450 <plotter_begin+0x348>
 8008362:	ee00 4a10 	vmov	s0, r4
 8008366:	4842      	ldr	r0, [pc, #264]	@ (8008470 <plotter_begin+0x368>)
 8008368:	f000 fbb6 	bl	8008ad8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800836c:	2102      	movs	r1, #2
 800836e:	4841      	ldr	r0, [pc, #260]	@ (8008474 <plotter_begin+0x36c>)
 8008370:	f000 fb54 	bl	8008a1c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008374:	4b30      	ldr	r3, [pc, #192]	@ (8008438 <plotter_begin+0x330>)
 8008376:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800837a:	4610      	mov	r0, r2
 800837c:	4619      	mov	r1, r3
 800837e:	f7f8 fbe9 	bl	8000b54 <__aeabi_d2f>
 8008382:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008384:	4b2c      	ldr	r3, [pc, #176]	@ (8008438 <plotter_begin+0x330>)
 8008386:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	f7f8 fbe1 	bl	8000b54 <__aeabi_d2f>
 8008392:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008394:	ee07 3a90 	vmov	s15, r3
 8008398:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800839c:	4b26      	ldr	r3, [pc, #152]	@ (8008438 <plotter_begin+0x330>)
 800839e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80083a2:	4610      	mov	r0, r2
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7f8 fbd5 	bl	8000b54 <__aeabi_d2f>
 80083aa:	4603      	mov	r3, r0
 80083ac:	ee03 3a10 	vmov	s6, r3
 80083b0:	eef0 2a48 	vmov.f32	s5, s16
 80083b4:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8008484 <plotter_begin+0x37c>
 80083b8:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8008484 <plotter_begin+0x37c>
 80083bc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80083c0:	eddf 0a23 	vldr	s1, [pc, #140]	@ 8008450 <plotter_begin+0x348>
 80083c4:	ee00 4a10 	vmov	s0, r4
 80083c8:	482a      	ldr	r0, [pc, #168]	@ (8008474 <plotter_begin+0x36c>)
 80083ca:	f000 fbb0 	bl	8008b2e <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80083ce:	482a      	ldr	r0, [pc, #168]	@ (8008478 <plotter_begin+0x370>)
 80083d0:	f7fc f864 	bl	800449c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80083d4:	4b15      	ldr	r3, [pc, #84]	@ (800842c <plotter_begin+0x324>)
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f8 f881 	bl	80004e0 <__aeabi_f2d>
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	f7f7 ff1f 	bl	8000224 <__adddf3>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4610      	mov	r0, r2
 80083ec:	4619      	mov	r1, r3
 80083ee:	f04f 0200 	mov.w	r2, #0
 80083f2:	4b0f      	ldr	r3, [pc, #60]	@ (8008430 <plotter_begin+0x328>)
 80083f4:	f7f8 f8cc 	bl	8000590 <__aeabi_dmul>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80083fc:	4610      	mov	r0, r2
 80083fe:	4619      	mov	r1, r3
 8008400:	f7f8 fba8 	bl	8000b54 <__aeabi_d2f>
 8008404:	4603      	mov	r3, r0
 8008406:	ee00 3a90 	vmov	s1, r3
 800840a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800840e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008412:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008416:	4919      	ldr	r1, [pc, #100]	@ (800847c <plotter_begin+0x374>)
 8008418:	4819      	ldr	r0, [pc, #100]	@ (8008480 <plotter_begin+0x378>)
 800841a:	f7fb f9c3 	bl	80037a4 <QEI_init>
 800841e:	e033      	b.n	8008488 <plotter_begin+0x380>
 8008420:	55555555 	.word	0x55555555
 8008424:	3fe55555 	.word	0x3fe55555
 8008428:	20000080 	.word	0x20000080
 800842c:	20000100 	.word	0x20000100
 8008430:	408f4000 	.word	0x408f4000
 8008434:	407f4000 	.word	0x407f4000
 8008438:	20000000 	.word	0x20000000
 800843c:	40140000 	.word	0x40140000
 8008440:	40240000 	.word	0x40240000
 8008444:	20000658 	.word	0x20000658
 8008448:	477fff00 	.word	0x477fff00
 800844c:	c77fff00 	.word	0xc77fff00
 8008450:	3dcccccd 	.word	0x3dcccccd
 8008454:	2000069c 	.word	0x2000069c
 8008458:	200006e0 	.word	0x200006e0
 800845c:	43480000 	.word	0x43480000
 8008460:	c3480000 	.word	0xc3480000
 8008464:	20000724 	.word	0x20000724
 8008468:	20000768 	.word	0x20000768
 800846c:	200007ac 	.word	0x200007ac
 8008470:	200007f0 	.word	0x200007f0
 8008474:	20000834 	.word	0x20000834
 8008478:	20000878 	.word	0x20000878
 800847c:	20001ca8 	.word	0x20001ca8
 8008480:	200004ac 	.word	0x200004ac
 8008484:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8008488:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008484 <plotter_begin+0x37c>
 800848c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008490:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008494:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008498:	49af      	ldr	r1, [pc, #700]	@ (8008758 <plotter_begin+0x650>)
 800849a:	48b0      	ldr	r0, [pc, #704]	@ (800875c <plotter_begin+0x654>)
 800849c:	f7fb f982 	bl	80037a4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80084a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80084aa:	2204      	movs	r2, #4
 80084ac:	49ac      	ldr	r1, [pc, #688]	@ (8008760 <plotter_begin+0x658>)
 80084ae:	48ad      	ldr	r0, [pc, #692]	@ (8008764 <plotter_begin+0x65c>)
 80084b0:	f7f8 ff66 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80084b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	4bab      	ldr	r3, [pc, #684]	@ (8008768 <plotter_begin+0x660>)
 80084bc:	2200      	movs	r2, #0
 80084be:	49a8      	ldr	r1, [pc, #672]	@ (8008760 <plotter_begin+0x658>)
 80084c0:	48aa      	ldr	r0, [pc, #680]	@ (800876c <plotter_begin+0x664>)
 80084c2:	f7f8 ff5d 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80084c6:	220c      	movs	r2, #12
 80084c8:	49a9      	ldr	r1, [pc, #676]	@ (8008770 <plotter_begin+0x668>)
 80084ca:	48aa      	ldr	r0, [pc, #680]	@ (8008774 <plotter_begin+0x66c>)
 80084cc:	f7fa ff3e 	bl	800334c <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80084d0:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8008778 <plotter_begin+0x670>
 80084d4:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 800877c <plotter_begin+0x674>
 80084d8:	48a2      	ldr	r0, [pc, #648]	@ (8008764 <plotter_begin+0x65c>)
 80084da:	f7f8 ff75 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80084de:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8008778 <plotter_begin+0x670>
 80084e2:	ed9f 0aa6 	vldr	s0, [pc, #664]	@ 800877c <plotter_begin+0x674>
 80084e6:	48a1      	ldr	r0, [pc, #644]	@ (800876c <plotter_begin+0x664>)
 80084e8:	f7f8 ff6e 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 80084ec:	4ba4      	ldr	r3, [pc, #656]	@ (8008780 <plotter_begin+0x678>)
 80084ee:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 80084f2:	4610      	mov	r0, r2
 80084f4:	4619      	mov	r1, r3
 80084f6:	f7f8 fb2d 	bl	8000b54 <__aeabi_d2f>
 80084fa:	4603      	mov	r3, r0
 80084fc:	ee01 3a90 	vmov	s3, r3
 8008500:	ed9f 1aa0 	vldr	s2, [pc, #640]	@ 8008784 <plotter_begin+0x67c>
 8008504:	eddf 0aa0 	vldr	s1, [pc, #640]	@ 8008788 <plotter_begin+0x680>
 8008508:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 800878c <plotter_begin+0x684>
 800850c:	48a0      	ldr	r0, [pc, #640]	@ (8008790 <plotter_begin+0x688>)
 800850e:	f7f8 fe50 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008512:	4b9b      	ldr	r3, [pc, #620]	@ (8008780 <plotter_begin+0x678>)
 8008514:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8008518:	4610      	mov	r0, r2
 800851a:	4619      	mov	r1, r3
 800851c:	f7f8 fb1a 	bl	8000b54 <__aeabi_d2f>
 8008520:	4603      	mov	r3, r0
 8008522:	ee01 3a90 	vmov	s3, r3
 8008526:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8008778 <plotter_begin+0x670>
 800852a:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8008794 <plotter_begin+0x68c>
 800852e:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8008798 <plotter_begin+0x690>
 8008532:	489a      	ldr	r0, [pc, #616]	@ (800879c <plotter_begin+0x694>)
 8008534:	f7f8 fe3d 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 0, 72.5,
			ZGX45RGG_150RPM_Constant.qd_max);
 8008538:	4b99      	ldr	r3, [pc, #612]	@ (80087a0 <plotter_begin+0x698>)
 800853a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 0, 72.5,
 800853e:	4610      	mov	r0, r2
 8008540:	4619      	mov	r1, r3
 8008542:	f7f8 fb07 	bl	8000b54 <__aeabi_d2f>
 8008546:	4603      	mov	r3, r0
 8008548:	ee01 3a90 	vmov	s3, r3
 800854c:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 80087a4 <plotter_begin+0x69c>
 8008550:	eddf 0a89 	vldr	s1, [pc, #548]	@ 8008778 <plotter_begin+0x670>
 8008554:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008558:	4893      	ldr	r0, [pc, #588]	@ (80087a8 <plotter_begin+0x6a0>)
 800855a:	f7f8 fe2a 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 800855e:	4b90      	ldr	r3, [pc, #576]	@ (80087a0 <plotter_begin+0x698>)
 8008560:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 7500, 100, 2000,
 8008564:	4610      	mov	r0, r2
 8008566:	4619      	mov	r1, r3
 8008568:	f7f8 faf4 	bl	8000b54 <__aeabi_d2f>
 800856c:	4603      	mov	r3, r0
 800856e:	ee01 3a90 	vmov	s3, r3
 8008572:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 800877c <plotter_begin+0x674>
 8008576:	eddf 0a8d 	vldr	s1, [pc, #564]	@ 80087ac <plotter_begin+0x6a4>
 800857a:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 80087b0 <plotter_begin+0x6a8>
 800857e:	488d      	ldr	r0, [pc, #564]	@ (80087b4 <plotter_begin+0x6ac>)
 8008580:	f7f8 fe17 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8008584:	4986      	ldr	r1, [pc, #536]	@ (80087a0 <plotter_begin+0x698>)
 8008586:	488c      	ldr	r0, [pc, #560]	@ (80087b8 <plotter_begin+0x6b0>)
 8008588:	f7f8 fff8 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800858c:	497c      	ldr	r1, [pc, #496]	@ (8008780 <plotter_begin+0x678>)
 800858e:	488b      	ldr	r0, [pc, #556]	@ (80087bc <plotter_begin+0x6b4>)
 8008590:	f7f9 f972 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8008594:	4a8a      	ldr	r2, [pc, #552]	@ (80087c0 <plotter_begin+0x6b8>)
 8008596:	4982      	ldr	r1, [pc, #520]	@ (80087a0 <plotter_begin+0x698>)
 8008598:	488a      	ldr	r0, [pc, #552]	@ (80087c4 <plotter_begin+0x6bc>)
 800859a:	f7f9 f87e 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800859e:	4a88      	ldr	r2, [pc, #544]	@ (80087c0 <plotter_begin+0x6b8>)
 80085a0:	4977      	ldr	r1, [pc, #476]	@ (8008780 <plotter_begin+0x678>)
 80085a2:	4889      	ldr	r0, [pc, #548]	@ (80087c8 <plotter_begin+0x6c0>)
 80085a4:	f7f9 f9f7 	bl	8001996 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80085a8:	2302      	movs	r3, #2
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80087cc <plotter_begin+0x6c4>
 80085b0:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 80087d0 <plotter_begin+0x6c8>
 80085b4:	2364      	movs	r3, #100	@ 0x64
 80085b6:	4a87      	ldr	r2, [pc, #540]	@ (80087d4 <plotter_begin+0x6cc>)
 80085b8:	4987      	ldr	r1, [pc, #540]	@ (80087d8 <plotter_begin+0x6d0>)
 80085ba:	4888      	ldr	r0, [pc, #544]	@ (80087dc <plotter_begin+0x6d4>)
 80085bc:	f7f8 fcb0 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80085c0:	2105      	movs	r1, #5
 80085c2:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 80087e0 <plotter_begin+0x6d8>
 80085c6:	4885      	ldr	r0, [pc, #532]	@ (80087dc <plotter_begin+0x6d4>)
 80085c8:	f7f8 fd5c 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80085cc:	4883      	ldr	r0, [pc, #524]	@ (80087dc <plotter_begin+0x6d4>)
 80085ce:	f7f8 fcff 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80085d2:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80087e4 <plotter_begin+0x6dc>
 80085d6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80085da:	211f      	movs	r1, #31
 80085dc:	4882      	ldr	r0, [pc, #520]	@ (80087e8 <plotter_begin+0x6e0>)
 80085de:	f7f9 faa1 	bl	8001b24 <FIR_init>
	FIR_init(&acceleration_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80085e2:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80087e4 <plotter_begin+0x6dc>
 80085e6:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80085ea:	211f      	movs	r1, #31
 80085ec:	487f      	ldr	r0, [pc, #508]	@ (80087ec <plotter_begin+0x6e4>)
 80085ee:	f7f9 fa99 	bl	8001b24 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80085f2:	4b63      	ldr	r3, [pc, #396]	@ (8008780 <plotter_begin+0x678>)
 80085f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085f8:	4610      	mov	r0, r2
 80085fa:	4619      	mov	r1, r3
 80085fc:	f7f8 faaa 	bl	8000b54 <__aeabi_d2f>
 8008600:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008602:	4b5f      	ldr	r3, [pc, #380]	@ (8008780 <plotter_begin+0x678>)
 8008604:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008608:	4610      	mov	r0, r2
 800860a:	4619      	mov	r1, r3
 800860c:	f7f8 faa2 	bl	8000b54 <__aeabi_d2f>
 8008610:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008612:	4b5b      	ldr	r3, [pc, #364]	@ (8008780 <plotter_begin+0x678>)
 8008614:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008618:	4610      	mov	r0, r2
 800861a:	4619      	mov	r1, r3
 800861c:	f7f8 fa9a 	bl	8000b54 <__aeabi_d2f>
 8008620:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008622:	4b57      	ldr	r3, [pc, #348]	@ (8008780 <plotter_begin+0x678>)
 8008624:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008628:	4610      	mov	r0, r2
 800862a:	4619      	mov	r1, r3
 800862c:	f7f8 fa92 	bl	8000b54 <__aeabi_d2f>
 8008630:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008632:	4b53      	ldr	r3, [pc, #332]	@ (8008780 <plotter_begin+0x678>)
 8008634:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008638:	4610      	mov	r0, r2
 800863a:	4619      	mov	r1, r3
 800863c:	f7f8 fa8a 	bl	8000b54 <__aeabi_d2f>
 8008640:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008642:	4b4f      	ldr	r3, [pc, #316]	@ (8008780 <plotter_begin+0x678>)
 8008644:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008648:	4610      	mov	r0, r2
 800864a:	4619      	mov	r1, r3
 800864c:	f7f8 fa82 	bl	8000b54 <__aeabi_d2f>
 8008650:	4603      	mov	r3, r0
 8008652:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008656:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800865a:	ee03 3a10 	vmov	s6, r3
 800865e:	ee02 9a90 	vmov	s5, r9
 8008662:	ee02 8a10 	vmov	s4, r8
 8008666:	ee01 6a90 	vmov	s3, r6
 800866a:	ee01 5a10 	vmov	s2, r5
 800866e:	ee00 4a90 	vmov	s1, r4
 8008672:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80087f0 <plotter_begin+0x6e8>
 8008676:	485f      	ldr	r0, [pc, #380]	@ (80087f4 <plotter_begin+0x6ec>)
 8008678:	f7f9 fc54 	bl	8001f24 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800867c:	4b48      	ldr	r3, [pc, #288]	@ (80087a0 <plotter_begin+0x698>)
 800867e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	f7f8 fa65 	bl	8000b54 <__aeabi_d2f>
 800868a:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800868c:	4b44      	ldr	r3, [pc, #272]	@ (80087a0 <plotter_begin+0x698>)
 800868e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008692:	4610      	mov	r0, r2
 8008694:	4619      	mov	r1, r3
 8008696:	f7f8 fa5d 	bl	8000b54 <__aeabi_d2f>
 800869a:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800869c:	4b40      	ldr	r3, [pc, #256]	@ (80087a0 <plotter_begin+0x698>)
 800869e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086a2:	4610      	mov	r0, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	f7f8 fa55 	bl	8000b54 <__aeabi_d2f>
 80086aa:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 80086ac:	4b3c      	ldr	r3, [pc, #240]	@ (80087a0 <plotter_begin+0x698>)
 80086ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80086b2:	a327      	add	r3, pc, #156	@ (adr r3, 8008750 <plotter_begin+0x648>)
 80086b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b8:	f7f7 ff6a 	bl	8000590 <__aeabi_dmul>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086c0:	4610      	mov	r0, r2
 80086c2:	4619      	mov	r1, r3
 80086c4:	f7f8 fa46 	bl	8000b54 <__aeabi_d2f>
 80086c8:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 80086ca:	4b35      	ldr	r3, [pc, #212]	@ (80087a0 <plotter_begin+0x698>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086d0:	4610      	mov	r0, r2
 80086d2:	4619      	mov	r1, r3
 80086d4:	f7f8 fa3e 	bl	8000b54 <__aeabi_d2f>
 80086d8:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 80086da:	4b31      	ldr	r3, [pc, #196]	@ (80087a0 <plotter_begin+0x698>)
 80086dc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086e0:	4610      	mov	r0, r2
 80086e2:	4619      	mov	r1, r3
 80086e4:	f7f8 fa36 	bl	8000b54 <__aeabi_d2f>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4943      	ldr	r1, [pc, #268]	@ (80087f8 <plotter_begin+0x6f0>)
 80086ec:	4843      	ldr	r0, [pc, #268]	@ (80087fc <plotter_begin+0x6f4>)
 80086ee:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 80087f0 <plotter_begin+0x6e8>
 80086f2:	ee02 3a90 	vmov	s5, r3
 80086f6:	ee02 9a10 	vmov	s4, r9
 80086fa:	ee01 8a90 	vmov	s3, r8
 80086fe:	ee01 6a10 	vmov	s2, r6
 8008702:	ee00 5a90 	vmov	s1, r5
 8008706:	ee00 4a10 	vmov	s0, r4
 800870a:	f7fa fdb7 	bl	800327c <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 800870e:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008800 <plotter_begin+0x6f8>
 8008712:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008716:	4a38      	ldr	r2, [pc, #224]	@ (80087f8 <plotter_begin+0x6f0>)
 8008718:	4938      	ldr	r1, [pc, #224]	@ (80087fc <plotter_begin+0x6f4>)
 800871a:	483a      	ldr	r0, [pc, #232]	@ (8008804 <plotter_begin+0x6fc>)
 800871c:	f7fc fb1a 	bl	8004d54 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8008720:	23c8      	movs	r3, #200	@ 0xc8
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	2315      	movs	r3, #21
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	4b37      	ldr	r3, [pc, #220]	@ (8008808 <plotter_begin+0x700>)
 800872a:	4a38      	ldr	r2, [pc, #224]	@ (800880c <plotter_begin+0x704>)
 800872c:	4938      	ldr	r1, [pc, #224]	@ (8008810 <plotter_begin+0x708>)
 800872e:	4839      	ldr	r0, [pc, #228]	@ (8008814 <plotter_begin+0x70c>)
 8008730:	f7f9 fb90 	bl	8001e54 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8008734:	4838      	ldr	r0, [pc, #224]	@ (8008818 <plotter_begin+0x710>)
 8008736:	f004 fdf7 	bl	800d328 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 800873a:	f000 f86f 	bl	800881c <plotter_reset>
}
 800873e:	bf00      	nop
 8008740:	3704      	adds	r7, #4
 8008742:	46bd      	mov	sp, r7
 8008744:	ecbd 8b02 	vpop	{d8}
 8008748:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874c:	f3af 8000 	nop.w
 8008750:	9999999a 	.word	0x9999999a
 8008754:	40019999 	.word	0x40019999
 8008758:	20001bdc 	.word	0x20001bdc
 800875c:	20000508 	.word	0x20000508
 8008760:	20001d74 	.word	0x20001d74
 8008764:	20000414 	.word	0x20000414
 8008768:	48000800 	.word	0x48000800
 800876c:	20000460 	.word	0x20000460
 8008770:	20001978 	.word	0x20001978
 8008774:	2000061c 	.word	0x2000061c
 8008778:	00000000 	.word	0x00000000
 800877c:	44fa0000 	.word	0x44fa0000
 8008780:	20000080 	.word	0x20000080
 8008784:	42f00000 	.word	0x42f00000
 8008788:	2edbe6ff 	.word	0x2edbe6ff
 800878c:	42960000 	.word	0x42960000
 8008790:	20000564 	.word	0x20000564
 8008794:	3727c5ac 	.word	0x3727c5ac
 8008798:	43160000 	.word	0x43160000
 800879c:	2000058c 	.word	0x2000058c
 80087a0:	20000000 	.word	0x20000000
 80087a4:	42910000 	.word	0x42910000
 80087a8:	200005b4 	.word	0x200005b4
 80087ac:	42c80000 	.word	0x42c80000
 80087b0:	45ea6000 	.word	0x45ea6000
 80087b4:	200005dc 	.word	0x200005dc
 80087b8:	20000610 	.word	0x20000610
 80087bc:	20000604 	.word	0x20000604
 80087c0:	20000100 	.word	0x20000100
 80087c4:	20000614 	.word	0x20000614
 80087c8:	20000608 	.word	0x20000608
 80087cc:	457ff000 	.word	0x457ff000
 80087d0:	40533333 	.word	0x40533333
 80087d4:	20000ae8 	.word	0x20000ae8
 80087d8:	200001b4 	.word	0x200001b4
 80087dc:	20000634 	.word	0x20000634
 80087e0:	45000000 	.word	0x45000000
 80087e4:	447a0000 	.word	0x447a0000
 80087e8:	20000ad0 	.word	0x20000ad0
 80087ec:	20000adc 	.word	0x20000adc
 80087f0:	3a83126f 	.word	0x3a83126f
 80087f4:	20001218 	.word	0x20001218
 80087f8:	20001944 	.word	0x20001944
 80087fc:	20001904 	.word	0x20001904
 8008800:	3d4ccccd 	.word	0x3d4ccccd
 8008804:	20001584 	.word	0x20001584
 8008808:	20001088 	.word	0x20001088
 800880c:	20001e40 	.word	0x20001e40
 8008810:	20001fd8 	.word	0x20001fd8
 8008814:	20000bb0 	.word	0x20000bb0
 8008818:	20001a44 	.word	0x20001a44

0800881c <plotter_reset>:

void plotter_reset() {
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8008820:	4819      	ldr	r0, [pc, #100]	@ (8008888 <plotter_reset+0x6c>)
 8008822:	f7fb fa41 	bl	8003ca8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8008826:	4818      	ldr	r0, [pc, #96]	@ (8008888 <plotter_reset+0x6c>)
 8008828:	f7fb fa3e 	bl	8003ca8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 800882c:	4b16      	ldr	r3, [pc, #88]	@ (8008888 <plotter_reset+0x6c>)
 800882e:	2200      	movs	r2, #0
 8008830:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8008832:	4b15      	ldr	r3, [pc, #84]	@ (8008888 <plotter_reset+0x6c>)
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800883a:	4b13      	ldr	r3, [pc, #76]	@ (8008888 <plotter_reset+0x6c>)
 800883c:	2200      	movs	r2, #0
 800883e:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8008840:	4b11      	ldr	r3, [pc, #68]	@ (8008888 <plotter_reset+0x6c>)
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8008848:	4b0f      	ldr	r3, [pc, #60]	@ (8008888 <plotter_reset+0x6c>)
 800884a:	f04f 0200 	mov.w	r2, #0
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8008850:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <plotter_reset+0x6c>)
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8008858:	4b0c      	ldr	r3, [pc, #48]	@ (800888c <plotter_reset+0x70>)
 800885a:	2200      	movs	r2, #0
 800885c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 800885e:	4b0b      	ldr	r3, [pc, #44]	@ (800888c <plotter_reset+0x70>)
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8008866:	4b09      	ldr	r3, [pc, #36]	@ (800888c <plotter_reset+0x70>)
 8008868:	2200      	movs	r2, #0
 800886a:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 800886c:	4b07      	ldr	r3, [pc, #28]	@ (800888c <plotter_reset+0x70>)
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8008874:	4b05      	ldr	r3, [pc, #20]	@ (800888c <plotter_reset+0x70>)
 8008876:	f04f 0200 	mov.w	r2, #0
 800887a:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 800887c:	4b03      	ldr	r3, [pc, #12]	@ (800888c <plotter_reset+0x70>)
 800887e:	f04f 0200 	mov.w	r2, #0
 8008882:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008884:	bf00      	nop
 8008886:	bd80      	pop	{r7, pc}
 8008888:	200004ac 	.word	0x200004ac
 800888c:	20000508 	.word	0x20000508

08008890 <plotter_update_sensors>:

void plotter_update_sensors() {
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8008894:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800899c <plotter_update_sensors+0x10c>
 8008898:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 80089a0 <plotter_update_sensors+0x110>
 800889c:	2106      	movs	r1, #6
 800889e:	4841      	ldr	r0, [pc, #260]	@ (80089a4 <plotter_update_sensors+0x114>)
 80088a0:	f7f8 fc1a 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80088a4:	eef0 7a40 	vmov.f32	s15, s0
 80088a8:	4b3f      	ldr	r3, [pc, #252]	@ (80089a8 <plotter_update_sensors+0x118>)
 80088aa:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 80088ae:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800899c <plotter_update_sensors+0x10c>
 80088b2:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80089a0 <plotter_update_sensors+0x110>
 80088b6:	2107      	movs	r1, #7
 80088b8:	483a      	ldr	r0, [pc, #232]	@ (80089a4 <plotter_update_sensors+0x114>)
 80088ba:	f7f8 fc0d 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80088be:	eef0 7a40 	vmov.f32	s15, s0
 80088c2:	4b3a      	ldr	r3, [pc, #232]	@ (80089ac <plotter_update_sensors+0x11c>)
 80088c4:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 80088c8:	2180      	movs	r1, #128	@ 0x80
 80088ca:	4839      	ldr	r0, [pc, #228]	@ (80089b0 <plotter_update_sensors+0x120>)
 80088cc:	f003 fbc6 	bl	800c05c <HAL_GPIO_ReadPin>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	4b35      	ldr	r3, [pc, #212]	@ (80089b4 <plotter_update_sensors+0x124>)
 80088e0:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80088e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088e6:	4834      	ldr	r0, [pc, #208]	@ (80089b8 <plotter_update_sensors+0x128>)
 80088e8:	f003 fbb8 	bl	800c05c <HAL_GPIO_ReadPin>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf0c      	ite	eq
 80088f2:	2301      	moveq	r3, #1
 80088f4:	2300      	movne	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	4b30      	ldr	r3, [pc, #192]	@ (80089bc <plotter_update_sensors+0x12c>)
 80088fc:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80088fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008902:	482d      	ldr	r0, [pc, #180]	@ (80089b8 <plotter_update_sensors+0x128>)
 8008904:	f003 fbaa 	bl	800c05c <HAL_GPIO_ReadPin>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	4b2a      	ldr	r3, [pc, #168]	@ (80089c0 <plotter_update_sensors+0x130>)
 8008918:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800891a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800891e:	4826      	ldr	r0, [pc, #152]	@ (80089b8 <plotter_update_sensors+0x128>)
 8008920:	f003 fb9c 	bl	800c05c <HAL_GPIO_ReadPin>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	bf0c      	ite	eq
 800892a:	2301      	moveq	r3, #1
 800892c:	2300      	movne	r3, #0
 800892e:	b2db      	uxtb	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	4b24      	ldr	r3, [pc, #144]	@ (80089c4 <plotter_update_sensors+0x134>)
 8008934:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8008936:	2104      	movs	r1, #4
 8008938:	481d      	ldr	r0, [pc, #116]	@ (80089b0 <plotter_update_sensors+0x120>)
 800893a:	f003 fb8f 	bl	800c05c <HAL_GPIO_ReadPin>
 800893e:	4603      	mov	r3, r0
 8008940:	461a      	mov	r2, r3
 8008942:	4b21      	ldr	r3, [pc, #132]	@ (80089c8 <plotter_update_sensors+0x138>)
 8008944:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8008946:	2102      	movs	r1, #2
 8008948:	4819      	ldr	r0, [pc, #100]	@ (80089b0 <plotter_update_sensors+0x120>)
 800894a:	f003 fb87 	bl	800c05c <HAL_GPIO_ReadPin>
 800894e:	4603      	mov	r3, r0
 8008950:	461a      	mov	r2, r3
 8008952:	4b1e      	ldr	r3, [pc, #120]	@ (80089cc <plotter_update_sensors+0x13c>)
 8008954:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8008956:	4b1e      	ldr	r3, [pc, #120]	@ (80089d0 <plotter_update_sensors+0x140>)
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f083 0301 	eor.w	r3, r3, #1
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b00      	cmp	r3, #0
 8008962:	d018      	beq.n	8008996 <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8008964:	2101      	movs	r1, #1
 8008966:	4812      	ldr	r0, [pc, #72]	@ (80089b0 <plotter_update_sensors+0x120>)
 8008968:	f003 fb78 	bl	800c05c <HAL_GPIO_ReadPin>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	bf14      	ite	ne
 8008972:	2301      	movne	r3, #1
 8008974:	2300      	moveq	r3, #0
 8008976:	b2da      	uxtb	r2, r3
 8008978:	4b16      	ldr	r3, [pc, #88]	@ (80089d4 <plotter_update_sensors+0x144>)
 800897a:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 800897c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008980:	480b      	ldr	r0, [pc, #44]	@ (80089b0 <plotter_update_sensors+0x120>)
 8008982:	f003 fb6b 	bl	800c05c <HAL_GPIO_ReadPin>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	bf14      	ite	ne
 800898c:	2301      	movne	r3, #1
 800898e:	2300      	moveq	r3, #0
 8008990:	b2da      	uxtb	r2, r3
 8008992:	4b11      	ldr	r3, [pc, #68]	@ (80089d8 <plotter_update_sensors+0x148>)
 8008994:	701a      	strb	r2, [r3, #0]
	}
}
 8008996:	bf00      	nop
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	42480000 	.word	0x42480000
 80089a0:	c2480000 	.word	0xc2480000
 80089a4:	20000634 	.word	0x20000634
 80089a8:	20001954 	.word	0x20001954
 80089ac:	20001958 	.word	0x20001958
 80089b0:	48000400 	.word	0x48000400
 80089b4:	20001964 	.word	0x20001964
 80089b8:	48000800 	.word	0x48000800
 80089bc:	20001968 	.word	0x20001968
 80089c0:	2000196c 	.word	0x2000196c
 80089c4:	20001970 	.word	0x20001970
 80089c8:	2000195c 	.word	0x2000195c
 80089cc:	20001960 	.word	0x20001960
 80089d0:	20000363 	.word	0x20000363
 80089d4:	20000360 	.word	0x20000360
 80089d8:	20000361 	.word	0x20000361

080089dc <plotter_pen_up>:

void plotter_pen_up() {
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80089e0:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80089e4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80089f4 <plotter_pen_up+0x18>
 80089e8:	4803      	ldr	r0, [pc, #12]	@ (80089f8 <plotter_pen_up+0x1c>)
 80089ea:	f7fa fcd1 	bl	8003390 <PWM_write_duty>
}
 80089ee:	bf00      	nop
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	42480000 	.word	0x42480000
 80089f8:	2000061c 	.word	0x2000061c

080089fc <plotter_pen_down>:

void plotter_pen_down() {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8008a00:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8008a04:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008a14 <plotter_pen_down+0x18>
 8008a08:	4803      	ldr	r0, [pc, #12]	@ (8008a18 <plotter_pen_down+0x1c>)
 8008a0a:	f7fa fcc1 	bl	8003390 <PWM_write_duty>
}
 8008a0e:	bf00      	nop
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	42480000 	.word	0x42480000
 8008a18:	2000061c 	.word	0x2000061c

08008a1c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	78fa      	ldrb	r2, [r7, #3]
 8008a2c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a34:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a3c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad0 <SIGNAL_init+0xb4>)
 8008a62:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a6a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8008a6c:	78fb      	ldrb	r3, [r7, #3]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d828      	bhi.n	8008ac4 <SIGNAL_init+0xa8>
 8008a72:	a201      	add	r2, pc, #4	@ (adr r2, 8008a78 <SIGNAL_init+0x5c>)
 8008a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a78:	08008ac3 	.word	0x08008ac3
 8008a7c:	08008a89 	.word	0x08008a89
 8008a80:	08008aa7 	.word	0x08008aa7
 8008a84:	08008ab1 	.word	0x08008ab1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a94:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a0e      	ldr	r2, [pc, #56]	@ (8008ad4 <SIGNAL_init+0xb8>)
 8008a9a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008aa2:	621a      	str	r2, [r3, #32]
            break;
 8008aa4:	e00e      	b.n	8008ac4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008aac:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8008aae:	e009      	b.n	8008ac4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f04f 0200 	mov.w	r2, #0
 8008ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008abe:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8008ac0:	e000      	b.n	8008ac4 <SIGNAL_init+0xa8>
            break;
 8008ac2:	bf00      	nop
    }
}
 8008ac4:	bf00      	nop
 8008ac6:	370c      	adds	r7, #12
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	bf800000 	.word	0xbf800000
 8008ad4:	41200000 	.word	0x41200000

08008ad8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8008ad8:	b480      	push	{r7}
 8008ada:	b089      	sub	sp, #36	@ 0x24
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	61f8      	str	r0, [r7, #28]
 8008ae0:	ed87 0a06 	vstr	s0, [r7, #24]
 8008ae4:	edc7 0a05 	vstr	s1, [r7, #20]
 8008ae8:	ed87 1a04 	vstr	s2, [r7, #16]
 8008aec:	edc7 1a03 	vstr	s3, [r7, #12]
 8008af0:	ed87 2a02 	vstr	s4, [r7, #8]
 8008af4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	2200      	movs	r2, #0
 8008afc:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008b22:	bf00      	nop
 8008b24:	3724      	adds	r7, #36	@ 0x24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8008b2e:	b480      	push	{r7}
 8008b30:	b089      	sub	sp, #36	@ 0x24
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	61f8      	str	r0, [r7, #28]
 8008b36:	ed87 0a06 	vstr	s0, [r7, #24]
 8008b3a:	edc7 0a05 	vstr	s1, [r7, #20]
 8008b3e:	ed87 1a04 	vstr	s2, [r7, #16]
 8008b42:	edc7 1a03 	vstr	s3, [r7, #12]
 8008b46:	ed87 2a02 	vstr	s4, [r7, #8]
 8008b4a:	edc7 2a01 	vstr	s5, [r7, #4]
 8008b4e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	2202      	movs	r2, #2
 8008b56:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	687a      	ldr	r2, [r7, #4]
 8008b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008b82:	bf00      	nop
 8008b84:	3724      	adds	r7, #36	@ 0x24
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b96:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	6613      	str	r3, [r2, #96]	@ 0x60
 8008ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008ba4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	607b      	str	r3, [r7, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bae:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bb2:	4a08      	ldr	r2, [pc, #32]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bba:	4b06      	ldr	r3, [pc, #24]	@ (8008bd4 <HAL_MspInit+0x44>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008bc6:	f003 fb4f 	bl	800c268 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40021000 	.word	0x40021000

08008bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <NMI_Handler+0x4>

08008be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <HardFault_Handler+0x4>

08008be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <MemManage_Handler+0x4>

08008bf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008bf4:	bf00      	nop
 8008bf6:	e7fd      	b.n	8008bf4 <BusFault_Handler+0x4>

08008bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bfc:	bf00      	nop
 8008bfe:	e7fd      	b.n	8008bfc <UsageFault_Handler+0x4>

08008c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c04:	bf00      	nop
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c12:	bf00      	nop
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c20:	bf00      	nop
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr

08008c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c2e:	f000 ffbb 	bl	8009ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c32:	bf00      	nop
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8008c3a:	2001      	movs	r0, #1
 8008c3c:	f003 fa58 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008c40:	bf00      	nop
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8008c48:	2010      	movs	r0, #16
 8008c4a:	f003 fa51 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	bd80      	pop	{r7, pc}
	...

08008c54 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008c58:	4802      	ldr	r0, [pc, #8]	@ (8008c64 <DMA1_Channel1_IRQHandler+0x10>)
 8008c5a:	f002 ff2e 	bl	800baba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008c5e:	bf00      	nop
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000220 	.word	0x20000220

08008c68 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008c6c:	4802      	ldr	r0, [pc, #8]	@ (8008c78 <DMA1_Channel2_IRQHandler+0x10>)
 8008c6e:	f002 ff24 	bl	800baba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008c72:	bf00      	nop
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20002164 	.word	0x20002164

08008c7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008c80:	4802      	ldr	r0, [pc, #8]	@ (8008c8c <DMA1_Channel3_IRQHandler+0x10>)
 8008c82:	f002 ff1a 	bl	800baba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008c86:	bf00      	nop
 8008c88:	bd80      	pop	{r7, pc}
 8008c8a:	bf00      	nop
 8008c8c:	200021c4 	.word	0x200021c4

08008c90 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8008c94:	4802      	ldr	r0, [pc, #8]	@ (8008ca0 <DMA1_Channel4_IRQHandler+0x10>)
 8008c96:	f002 ff10 	bl	800baba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008c9a:	bf00      	nop
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200020a4 	.word	0x200020a4

08008ca4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008ca8:	4802      	ldr	r0, [pc, #8]	@ (8008cb4 <DMA1_Channel5_IRQHandler+0x10>)
 8008caa:	f002 ff06 	bl	800baba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008cae:	bf00      	nop
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20002104 	.word	0x20002104

08008cb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8008cbc:	2040      	movs	r0, #64	@ 0x40
 8008cbe:	f003 fa17 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8008cc2:	2080      	movs	r0, #128	@ 0x80
 8008cc4:	f003 fa14 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008cc8:	bf00      	nop
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008cd0:	4803      	ldr	r0, [pc, #12]	@ (8008ce0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8008cd2:	f004 ff4f 	bl	800db74 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8008cd6:	4803      	ldr	r0, [pc, #12]	@ (8008ce4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008cd8:	f004 ff4c 	bl	800db74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008cdc:	bf00      	nop
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20001978 	.word	0x20001978
 8008ce4:	20001e40 	.word	0x20001e40

08008ce8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008cec:	4802      	ldr	r0, [pc, #8]	@ (8008cf8 <TIM2_IRQHandler+0x10>)
 8008cee:	f004 ff41 	bl	800db74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008cf2:	bf00      	nop
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001a44 	.word	0x20001a44

08008cfc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008d00:	4802      	ldr	r0, [pc, #8]	@ (8008d0c <TIM3_IRQHandler+0x10>)
 8008d02:	f004 ff37 	bl	800db74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20001b10 	.word	0x20001b10

08008d10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d14:	4802      	ldr	r0, [pc, #8]	@ (8008d20 <TIM4_IRQHandler+0x10>)
 8008d16:	f004 ff2d 	bl	800db74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d1a:	bf00      	nop
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001bdc 	.word	0x20001bdc

08008d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008d28:	4802      	ldr	r0, [pc, #8]	@ (8008d34 <USART2_IRQHandler+0x10>)
 8008d2a:	f006 fc77 	bl	800f61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008d2e:	bf00      	nop
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20001fd8 	.word	0x20001fd8

08008d38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8008d3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008d40:	f003 f9d6 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8008d44:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008d48:	f003 f9d2 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8008d4c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008d50:	f003 f9ce 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008d54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008d58:	f003 f9ca 	bl	800c0f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008d5c:	bf00      	nop
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008d64:	4802      	ldr	r0, [pc, #8]	@ (8008d70 <LPUART1_IRQHandler+0x10>)
 8008d66:	f006 fc59 	bl	800f61c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008d6a:	bf00      	nop
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20001f0c 	.word	0x20001f0c

08008d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d7c:	4a14      	ldr	r2, [pc, #80]	@ (8008dd0 <_sbrk+0x5c>)
 8008d7e:	4b15      	ldr	r3, [pc, #84]	@ (8008dd4 <_sbrk+0x60>)
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d88:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <_sbrk+0x64>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d90:	4b11      	ldr	r3, [pc, #68]	@ (8008dd8 <_sbrk+0x64>)
 8008d92:	4a12      	ldr	r2, [pc, #72]	@ (8008ddc <_sbrk+0x68>)
 8008d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d96:	4b10      	ldr	r3, [pc, #64]	@ (8008dd8 <_sbrk+0x64>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d207      	bcs.n	8008db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008da4:	f008 fec8 	bl	8011b38 <__errno>
 8008da8:	4603      	mov	r3, r0
 8008daa:	220c      	movs	r2, #12
 8008dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008dae:	f04f 33ff 	mov.w	r3, #4294967295
 8008db2:	e009      	b.n	8008dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008db4:	4b08      	ldr	r3, [pc, #32]	@ (8008dd8 <_sbrk+0x64>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008dba:	4b07      	ldr	r3, [pc, #28]	@ (8008dd8 <_sbrk+0x64>)
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	4a05      	ldr	r2, [pc, #20]	@ (8008dd8 <_sbrk+0x64>)
 8008dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20020000 	.word	0x20020000
 8008dd4:	00000400 	.word	0x00000400
 8008dd8:	20001974 	.word	0x20001974
 8008ddc:	20002370 	.word	0x20002370

08008de0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008de4:	4b06      	ldr	r3, [pc, #24]	@ (8008e00 <SystemInit+0x20>)
 8008de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dea:	4a05      	ldr	r2, [pc, #20]	@ (8008e00 <SystemInit+0x20>)
 8008dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008df4:	bf00      	nop
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	e000ed00 	.word	0xe000ed00

08008e04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b098      	sub	sp, #96	@ 0x60
 8008e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e0a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008e0e:	2200      	movs	r2, #0
 8008e10:	601a      	str	r2, [r3, #0]
 8008e12:	605a      	str	r2, [r3, #4]
 8008e14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	605a      	str	r2, [r3, #4]
 8008e20:	609a      	str	r2, [r3, #8]
 8008e22:	60da      	str	r2, [r3, #12]
 8008e24:	611a      	str	r2, [r3, #16]
 8008e26:	615a      	str	r2, [r3, #20]
 8008e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008e2a:	1d3b      	adds	r3, r7, #4
 8008e2c:	2234      	movs	r2, #52	@ 0x34
 8008e2e:	2100      	movs	r1, #0
 8008e30:	4618      	mov	r0, r3
 8008e32:	f008 fe69 	bl	8011b08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008e36:	4b3b      	ldr	r3, [pc, #236]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e38:	4a3b      	ldr	r2, [pc, #236]	@ (8008f28 <MX_TIM1_Init+0x124>)
 8008e3a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008e3c:	4b39      	ldr	r3, [pc, #228]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e3e:	2200      	movs	r2, #0
 8008e40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e42:	4b38      	ldr	r3, [pc, #224]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e44:	2200      	movs	r2, #0
 8008e46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008e48:	4b36      	ldr	r3, [pc, #216]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e50:	4b34      	ldr	r3, [pc, #208]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008e56:	4b33      	ldr	r3, [pc, #204]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e5c:	4b31      	ldr	r3, [pc, #196]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008e62:	4830      	ldr	r0, [pc, #192]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e64:	f004 fad8 	bl	800d418 <HAL_TIM_PWM_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8008e6e:	f7ff f945 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e72:	2300      	movs	r3, #0
 8008e74:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008e76:	2300      	movs	r3, #0
 8008e78:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e7e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008e82:	4619      	mov	r1, r3
 8008e84:	4827      	ldr	r0, [pc, #156]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008e86:	f006 f8e9 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d001      	beq.n	8008e94 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008e90:	f7ff f934 	bl	80080fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e94:	2360      	movs	r3, #96	@ 0x60
 8008e96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008eac:	2300      	movs	r3, #0
 8008eae:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008eb0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008eb4:	220c      	movs	r2, #12
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	481a      	ldr	r0, [pc, #104]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008eba:	f004 ffd5 	bl	800de68 <HAL_TIM_PWM_ConfigChannel>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008ec4:	f7ff f91a 	bl	80080fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ee0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008eee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008efc:	2300      	movs	r3, #0
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	4619      	mov	r1, r3
 8008f04:	4807      	ldr	r0, [pc, #28]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008f06:	f006 f93f 	bl	800f188 <HAL_TIMEx_ConfigBreakDeadTime>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d001      	beq.n	8008f14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8008f10:	f7ff f8f4 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008f14:	4803      	ldr	r0, [pc, #12]	@ (8008f24 <MX_TIM1_Init+0x120>)
 8008f16:	f000 fb77 	bl	8009608 <HAL_TIM_MspPostInit>

}
 8008f1a:	bf00      	nop
 8008f1c:	3760      	adds	r7, #96	@ 0x60
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	20001978 	.word	0x20001978
 8008f28:	40012c00 	.word	0x40012c00

08008f2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b088      	sub	sp, #32
 8008f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f32:	f107 0310 	add.w	r3, r7, #16
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	605a      	str	r2, [r3, #4]
 8008f3c:	609a      	str	r2, [r3, #8]
 8008f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f40:	1d3b      	adds	r3, r7, #4
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	605a      	str	r2, [r3, #4]
 8008f48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008f50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8008f52:	4b1c      	ldr	r3, [pc, #112]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f54:	22a9      	movs	r2, #169	@ 0xa9
 8008f56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f58:	4b1a      	ldr	r3, [pc, #104]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008f5e:	4b19      	ldr	r3, [pc, #100]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008f64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f66:	4b17      	ldr	r3, [pc, #92]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f6c:	4b15      	ldr	r3, [pc, #84]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008f72:	4814      	ldr	r0, [pc, #80]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f74:	f004 f904 	bl	800d180 <HAL_TIM_Base_Init>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008f7e:	f7ff f8bd 	bl	80080fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008f88:	f107 0310 	add.w	r3, r7, #16
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	480d      	ldr	r0, [pc, #52]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008f90:	f005 f87e 	bl	800e090 <HAL_TIM_ConfigClockSource>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d001      	beq.n	8008f9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008f9a:	f7ff f8af 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008fa6:	1d3b      	adds	r3, r7, #4
 8008fa8:	4619      	mov	r1, r3
 8008faa:	4806      	ldr	r0, [pc, #24]	@ (8008fc4 <MX_TIM2_Init+0x98>)
 8008fac:	f006 f856 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008fb6:	f7ff f8a1 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008fba:	bf00      	nop
 8008fbc:	3720      	adds	r7, #32
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20001a44 	.word	0x20001a44

08008fc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08c      	sub	sp, #48	@ 0x30
 8008fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008fce:	f107 030c 	add.w	r3, r7, #12
 8008fd2:	2224      	movs	r2, #36	@ 0x24
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f008 fd96 	bl	8011b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fdc:	463b      	mov	r3, r7
 8008fde:	2200      	movs	r2, #0
 8008fe0:	601a      	str	r2, [r3, #0]
 8008fe2:	605a      	str	r2, [r3, #4]
 8008fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008fe6:	4b21      	ldr	r3, [pc, #132]	@ (800906c <MX_TIM3_Init+0xa4>)
 8008fe8:	4a21      	ldr	r2, [pc, #132]	@ (8009070 <MX_TIM3_Init+0xa8>)
 8008fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008fec:	4b1f      	ldr	r3, [pc, #124]	@ (800906c <MX_TIM3_Init+0xa4>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800906c <MX_TIM3_Init+0xa4>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800906c <MX_TIM3_Init+0xa4>)
 8008ffa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008ffe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009000:	4b1a      	ldr	r3, [pc, #104]	@ (800906c <MX_TIM3_Init+0xa4>)
 8009002:	2200      	movs	r2, #0
 8009004:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009006:	4b19      	ldr	r3, [pc, #100]	@ (800906c <MX_TIM3_Init+0xa4>)
 8009008:	2200      	movs	r2, #0
 800900a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800900c:	2303      	movs	r3, #3
 800900e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009010:	2300      	movs	r3, #0
 8009012:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009014:	2301      	movs	r3, #1
 8009016:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009018:	2300      	movs	r3, #0
 800901a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009020:	2300      	movs	r3, #0
 8009022:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009024:	2301      	movs	r3, #1
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009028:	2300      	movs	r3, #0
 800902a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800902c:	2300      	movs	r3, #0
 800902e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009030:	f107 030c 	add.w	r3, r7, #12
 8009034:	4619      	mov	r1, r3
 8009036:	480d      	ldr	r0, [pc, #52]	@ (800906c <MX_TIM3_Init+0xa4>)
 8009038:	f004 fc5a 	bl	800d8f0 <HAL_TIM_Encoder_Init>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009042:	f7ff f85b 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009046:	2300      	movs	r3, #0
 8009048:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800904a:	2300      	movs	r3, #0
 800904c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800904e:	463b      	mov	r3, r7
 8009050:	4619      	mov	r1, r3
 8009052:	4806      	ldr	r0, [pc, #24]	@ (800906c <MX_TIM3_Init+0xa4>)
 8009054:	f006 f802 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800905e:	f7ff f84d 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009062:	bf00      	nop
 8009064:	3730      	adds	r7, #48	@ 0x30
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20001b10 	.word	0x20001b10
 8009070:	40000400 	.word	0x40000400

08009074 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	@ 0x30
 8009078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800907a:	f107 030c 	add.w	r3, r7, #12
 800907e:	2224      	movs	r2, #36	@ 0x24
 8009080:	2100      	movs	r1, #0
 8009082:	4618      	mov	r0, r3
 8009084:	f008 fd40 	bl	8011b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009088:	463b      	mov	r3, r7
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009092:	4b21      	ldr	r3, [pc, #132]	@ (8009118 <MX_TIM4_Init+0xa4>)
 8009094:	4a21      	ldr	r2, [pc, #132]	@ (800911c <MX_TIM4_Init+0xa8>)
 8009096:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009098:	4b1f      	ldr	r3, [pc, #124]	@ (8009118 <MX_TIM4_Init+0xa4>)
 800909a:	2200      	movs	r2, #0
 800909c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800909e:	4b1e      	ldr	r3, [pc, #120]	@ (8009118 <MX_TIM4_Init+0xa4>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80090a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009118 <MX_TIM4_Init+0xa4>)
 80090a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80090aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <MX_TIM4_Init+0xa4>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090b2:	4b19      	ldr	r3, [pc, #100]	@ (8009118 <MX_TIM4_Init+0xa4>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80090b8:	2303      	movs	r3, #3
 80090ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80090bc:	2300      	movs	r3, #0
 80090be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80090c0:	2301      	movs	r3, #1
 80090c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80090c4:	2300      	movs	r3, #0
 80090c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80090cc:	2300      	movs	r3, #0
 80090ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80090d0:	2301      	movs	r3, #1
 80090d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80090d4:	2300      	movs	r3, #0
 80090d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	4619      	mov	r1, r3
 80090e2:	480d      	ldr	r0, [pc, #52]	@ (8009118 <MX_TIM4_Init+0xa4>)
 80090e4:	f004 fc04 	bl	800d8f0 <HAL_TIM_Encoder_Init>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80090ee:	f7ff f805 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090f2:	2300      	movs	r3, #0
 80090f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80090fa:	463b      	mov	r3, r7
 80090fc:	4619      	mov	r1, r3
 80090fe:	4806      	ldr	r0, [pc, #24]	@ (8009118 <MX_TIM4_Init+0xa4>)
 8009100:	f005 ffac 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800910a:	f7fe fff7 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800910e:	bf00      	nop
 8009110:	3730      	adds	r7, #48	@ 0x30
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20001bdc 	.word	0x20001bdc
 800911c:	40000800 	.word	0x40000800

08009120 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b08c      	sub	sp, #48	@ 0x30
 8009124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009126:	f107 030c 	add.w	r3, r7, #12
 800912a:	2224      	movs	r2, #36	@ 0x24
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f008 fcea 	bl	8011b08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009134:	463b      	mov	r3, r7
 8009136:	2200      	movs	r2, #0
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	605a      	str	r2, [r3, #4]
 800913c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800913e:	4b21      	ldr	r3, [pc, #132]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 8009140:	4a21      	ldr	r2, [pc, #132]	@ (80091c8 <MX_TIM5_Init+0xa8>)
 8009142:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009144:	4b1f      	ldr	r3, [pc, #124]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 8009146:	2200      	movs	r2, #0
 8009148:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800914a:	4b1e      	ldr	r3, [pc, #120]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 800914c:	2200      	movs	r2, #0
 800914e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009150:	4b1c      	ldr	r3, [pc, #112]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 8009152:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009156:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009158:	4b1a      	ldr	r3, [pc, #104]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 800915a:	2200      	movs	r2, #0
 800915c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800915e:	4b19      	ldr	r3, [pc, #100]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 8009160:	2200      	movs	r2, #0
 8009162:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009164:	2303      	movs	r3, #3
 8009166:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009168:	2300      	movs	r3, #0
 800916a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800916c:	2301      	movs	r3, #1
 800916e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009170:	2300      	movs	r3, #0
 8009172:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009178:	2300      	movs	r3, #0
 800917a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800917c:	2301      	movs	r3, #1
 800917e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009180:	2300      	movs	r3, #0
 8009182:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009188:	f107 030c 	add.w	r3, r7, #12
 800918c:	4619      	mov	r1, r3
 800918e:	480d      	ldr	r0, [pc, #52]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 8009190:	f004 fbae 	bl	800d8f0 <HAL_TIM_Encoder_Init>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800919a:	f7fe ffaf 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800919e:	2300      	movs	r3, #0
 80091a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80091a6:	463b      	mov	r3, r7
 80091a8:	4619      	mov	r1, r3
 80091aa:	4806      	ldr	r0, [pc, #24]	@ (80091c4 <MX_TIM5_Init+0xa4>)
 80091ac:	f005 ff56 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d001      	beq.n	80091ba <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80091b6:	f7fe ffa1 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80091ba:	bf00      	nop
 80091bc:	3730      	adds	r7, #48	@ 0x30
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20001ca8 	.word	0x20001ca8
 80091c8:	40000c00 	.word	0x40000c00

080091cc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b09c      	sub	sp, #112	@ 0x70
 80091d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091d2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80091d6:	2200      	movs	r2, #0
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	605a      	str	r2, [r3, #4]
 80091dc:	609a      	str	r2, [r3, #8]
 80091de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	605a      	str	r2, [r3, #4]
 80091ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091ec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
 80091f4:	605a      	str	r2, [r3, #4]
 80091f6:	609a      	str	r2, [r3, #8]
 80091f8:	60da      	str	r2, [r3, #12]
 80091fa:	611a      	str	r2, [r3, #16]
 80091fc:	615a      	str	r2, [r3, #20]
 80091fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009200:	1d3b      	adds	r3, r7, #4
 8009202:	2234      	movs	r2, #52	@ 0x34
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f008 fc7e 	bl	8011b08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800920c:	4b4c      	ldr	r3, [pc, #304]	@ (8009340 <MX_TIM8_Init+0x174>)
 800920e:	4a4d      	ldr	r2, [pc, #308]	@ (8009344 <MX_TIM8_Init+0x178>)
 8009210:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009212:	4b4b      	ldr	r3, [pc, #300]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009214:	2200      	movs	r2, #0
 8009216:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009218:	4b49      	ldr	r3, [pc, #292]	@ (8009340 <MX_TIM8_Init+0x174>)
 800921a:	2200      	movs	r2, #0
 800921c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800921e:	4b48      	ldr	r3, [pc, #288]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009220:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009224:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009226:	4b46      	ldr	r3, [pc, #280]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009228:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800922c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800922e:	4b44      	ldr	r3, [pc, #272]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009230:	2200      	movs	r2, #0
 8009232:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009234:	4b42      	ldr	r3, [pc, #264]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009236:	2200      	movs	r2, #0
 8009238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800923a:	4841      	ldr	r0, [pc, #260]	@ (8009340 <MX_TIM8_Init+0x174>)
 800923c:	f003 ffa0 	bl	800d180 <HAL_TIM_Base_Init>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d001      	beq.n	800924a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009246:	f7fe ff59 	bl	80080fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800924a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800924e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009250:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009254:	4619      	mov	r1, r3
 8009256:	483a      	ldr	r0, [pc, #232]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009258:	f004 ff1a 	bl	800e090 <HAL_TIM_ConfigClockSource>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009262:	f7fe ff4b 	bl	80080fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009266:	4836      	ldr	r0, [pc, #216]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009268:	f004 f8d6 	bl	800d418 <HAL_TIM_PWM_Init>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009272:	f7fe ff43 	bl	80080fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009276:	2300      	movs	r3, #0
 8009278:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800927a:	2300      	movs	r3, #0
 800927c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800927e:	2300      	movs	r3, #0
 8009280:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009286:	4619      	mov	r1, r3
 8009288:	482d      	ldr	r0, [pc, #180]	@ (8009340 <MX_TIM8_Init+0x174>)
 800928a:	f005 fee7 	bl	800f05c <HAL_TIMEx_MasterConfigSynchronization>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009294:	f7fe ff32 	bl	80080fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009298:	2360      	movs	r3, #96	@ 0x60
 800929a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092a0:	2300      	movs	r3, #0
 80092a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80092a4:	2300      	movs	r3, #0
 80092a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092a8:	2300      	movs	r3, #0
 80092aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80092ac:	2300      	movs	r3, #0
 80092ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80092b0:	2300      	movs	r3, #0
 80092b2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80092b8:	2200      	movs	r2, #0
 80092ba:	4619      	mov	r1, r3
 80092bc:	4820      	ldr	r0, [pc, #128]	@ (8009340 <MX_TIM8_Init+0x174>)
 80092be:	f004 fdd3 	bl	800de68 <HAL_TIM_PWM_ConfigChannel>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80092c8:	f7fe ff18 	bl	80080fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80092cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80092d0:	2204      	movs	r2, #4
 80092d2:	4619      	mov	r1, r3
 80092d4:	481a      	ldr	r0, [pc, #104]	@ (8009340 <MX_TIM8_Init+0x174>)
 80092d6:	f004 fdc7 	bl	800de68 <HAL_TIM_PWM_ConfigChannel>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80092e0:	f7fe ff0c 	bl	80080fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80092f0:	2300      	movs	r3, #0
 80092f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80092f4:	2300      	movs	r3, #0
 80092f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80092f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009302:	2300      	movs	r3, #0
 8009304:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009306:	2300      	movs	r3, #0
 8009308:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800930a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800930e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009310:	2300      	movs	r3, #0
 8009312:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009314:	2300      	movs	r3, #0
 8009316:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009318:	2300      	movs	r3, #0
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4807      	ldr	r0, [pc, #28]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009322:	f005 ff31 	bl	800f188 <HAL_TIMEx_ConfigBreakDeadTime>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800932c:	f7fe fee6 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009330:	4803      	ldr	r0, [pc, #12]	@ (8009340 <MX_TIM8_Init+0x174>)
 8009332:	f000 f969 	bl	8009608 <HAL_TIM_MspPostInit>

}
 8009336:	bf00      	nop
 8009338:	3770      	adds	r7, #112	@ 0x70
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20001d74 	.word	0x20001d74
 8009344:	40013400 	.word	0x40013400

08009348 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800934c:	4b14      	ldr	r3, [pc, #80]	@ (80093a0 <MX_TIM16_Init+0x58>)
 800934e:	4a15      	ldr	r2, [pc, #84]	@ (80093a4 <MX_TIM16_Init+0x5c>)
 8009350:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009352:	4b13      	ldr	r3, [pc, #76]	@ (80093a0 <MX_TIM16_Init+0x58>)
 8009354:	22a9      	movs	r2, #169	@ 0xa9
 8009356:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009358:	4b11      	ldr	r3, [pc, #68]	@ (80093a0 <MX_TIM16_Init+0x58>)
 800935a:	2200      	movs	r2, #0
 800935c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800935e:	4b10      	ldr	r3, [pc, #64]	@ (80093a0 <MX_TIM16_Init+0x58>)
 8009360:	f240 4279 	movw	r2, #1145	@ 0x479
 8009364:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009366:	4b0e      	ldr	r3, [pc, #56]	@ (80093a0 <MX_TIM16_Init+0x58>)
 8009368:	2200      	movs	r2, #0
 800936a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800936c:	4b0c      	ldr	r3, [pc, #48]	@ (80093a0 <MX_TIM16_Init+0x58>)
 800936e:	2200      	movs	r2, #0
 8009370:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009372:	4b0b      	ldr	r3, [pc, #44]	@ (80093a0 <MX_TIM16_Init+0x58>)
 8009374:	2200      	movs	r2, #0
 8009376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009378:	4809      	ldr	r0, [pc, #36]	@ (80093a0 <MX_TIM16_Init+0x58>)
 800937a:	f003 ff01 	bl	800d180 <HAL_TIM_Base_Init>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009384:	f7fe feba 	bl	80080fc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009388:	2108      	movs	r1, #8
 800938a:	4805      	ldr	r0, [pc, #20]	@ (80093a0 <MX_TIM16_Init+0x58>)
 800938c:	f004 f9ba 	bl	800d704 <HAL_TIM_OnePulse_Init>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009396:	f7fe feb1 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800939a:	bf00      	nop
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20001e40 	.word	0x20001e40
 80093a4:	40014400 	.word	0x40014400

080093a8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a0d      	ldr	r2, [pc, #52]	@ (80093ec <HAL_TIM_PWM_MspInit+0x44>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d113      	bne.n	80093e2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80093ba:	4b0d      	ldr	r3, [pc, #52]	@ (80093f0 <HAL_TIM_PWM_MspInit+0x48>)
 80093bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093be:	4a0c      	ldr	r2, [pc, #48]	@ (80093f0 <HAL_TIM_PWM_MspInit+0x48>)
 80093c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80093c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80093c6:	4b0a      	ldr	r3, [pc, #40]	@ (80093f0 <HAL_TIM_PWM_MspInit+0x48>)
 80093c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093ce:	60fb      	str	r3, [r7, #12]
 80093d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80093d2:	2200      	movs	r2, #0
 80093d4:	2100      	movs	r1, #0
 80093d6:	2019      	movs	r0, #25
 80093d8:	f002 f957 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80093dc:	2019      	movs	r0, #25
 80093de:	f002 f96e 	bl	800b6be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	40012c00 	.word	0x40012c00
 80093f0:	40021000 	.word	0x40021000

080093f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009404:	d114      	bne.n	8009430 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009406:	4b22      	ldr	r3, [pc, #136]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800940a:	4a21      	ldr	r2, [pc, #132]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 800940c:	f043 0301 	orr.w	r3, r3, #1
 8009410:	6593      	str	r3, [r2, #88]	@ 0x58
 8009412:	4b1f      	ldr	r3, [pc, #124]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800941e:	2200      	movs	r2, #0
 8009420:	2100      	movs	r1, #0
 8009422:	201c      	movs	r0, #28
 8009424:	f002 f931 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009428:	201c      	movs	r0, #28
 800942a:	f002 f948 	bl	800b6be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800942e:	e02a      	b.n	8009486 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a17      	ldr	r2, [pc, #92]	@ (8009494 <HAL_TIM_Base_MspInit+0xa0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d10c      	bne.n	8009454 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800943a:	4b15      	ldr	r3, [pc, #84]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 800943c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800943e:	4a14      	ldr	r2, [pc, #80]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009440:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009444:	6613      	str	r3, [r2, #96]	@ 0x60
 8009446:	4b12      	ldr	r3, [pc, #72]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800944a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800944e:	613b      	str	r3, [r7, #16]
 8009450:	693b      	ldr	r3, [r7, #16]
}
 8009452:	e018      	b.n	8009486 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a0f      	ldr	r2, [pc, #60]	@ (8009498 <HAL_TIM_Base_MspInit+0xa4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d113      	bne.n	8009486 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800945e:	4b0c      	ldr	r3, [pc, #48]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009462:	4a0b      	ldr	r2, [pc, #44]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 8009464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009468:	6613      	str	r3, [r2, #96]	@ 0x60
 800946a:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <HAL_TIM_Base_MspInit+0x9c>)
 800946c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800946e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009476:	2200      	movs	r2, #0
 8009478:	2100      	movs	r1, #0
 800947a:	2019      	movs	r0, #25
 800947c:	f002 f905 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009480:	2019      	movs	r0, #25
 8009482:	f002 f91c 	bl	800b6be <HAL_NVIC_EnableIRQ>
}
 8009486:	bf00      	nop
 8009488:	3718      	adds	r7, #24
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	40021000 	.word	0x40021000
 8009494:	40013400 	.word	0x40013400
 8009498:	40014400 	.word	0x40014400

0800949c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08e      	sub	sp, #56	@ 0x38
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a4f      	ldr	r2, [pc, #316]	@ (80095f8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d131      	bne.n	8009522 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80094be:	4b4f      	ldr	r3, [pc, #316]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094c2:	4a4e      	ldr	r2, [pc, #312]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094c4:	f043 0302 	orr.w	r3, r3, #2
 80094c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ca:	4b4c      	ldr	r3, [pc, #304]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ce:	f003 0302 	and.w	r3, r3, #2
 80094d2:	623b      	str	r3, [r7, #32]
 80094d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d6:	4b49      	ldr	r3, [pc, #292]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094da:	4a48      	ldr	r2, [pc, #288]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094dc:	f043 0301 	orr.w	r3, r3, #1
 80094e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094e2:	4b46      	ldr	r3, [pc, #280]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80094e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	61fb      	str	r3, [r7, #28]
 80094ec:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80094ee:	23c0      	movs	r3, #192	@ 0xc0
 80094f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094f2:	2302      	movs	r3, #2
 80094f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094fa:	2300      	movs	r3, #0
 80094fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80094fe:	2302      	movs	r3, #2
 8009500:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009506:	4619      	mov	r1, r3
 8009508:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800950c:	f002 fc24 	bl	800bd58 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009510:	2200      	movs	r2, #0
 8009512:	2100      	movs	r1, #0
 8009514:	201d      	movs	r0, #29
 8009516:	f002 f8b8 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800951a:	201d      	movs	r0, #29
 800951c:	f002 f8cf 	bl	800b6be <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009520:	e065      	b.n	80095ee <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a36      	ldr	r2, [pc, #216]	@ (8009600 <HAL_TIM_Encoder_MspInit+0x164>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d132      	bne.n	8009592 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800952c:	4b33      	ldr	r3, [pc, #204]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 800952e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009530:	4a32      	ldr	r2, [pc, #200]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 8009532:	f043 0304 	orr.w	r3, r3, #4
 8009536:	6593      	str	r3, [r2, #88]	@ 0x58
 8009538:	4b30      	ldr	r3, [pc, #192]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 800953a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800953c:	f003 0304 	and.w	r3, r3, #4
 8009540:	61bb      	str	r3, [r7, #24]
 8009542:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009544:	4b2d      	ldr	r3, [pc, #180]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 8009546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009548:	4a2c      	ldr	r2, [pc, #176]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 800954a:	f043 0301 	orr.w	r3, r3, #1
 800954e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009550:	4b2a      	ldr	r3, [pc, #168]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 8009552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800955c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009562:	2302      	movs	r3, #2
 8009564:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009566:	2300      	movs	r3, #0
 8009568:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800956a:	2300      	movs	r3, #0
 800956c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800956e:	230a      	movs	r3, #10
 8009570:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009576:	4619      	mov	r1, r3
 8009578:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800957c:	f002 fbec 	bl	800bd58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009580:	2200      	movs	r2, #0
 8009582:	2100      	movs	r1, #0
 8009584:	201e      	movs	r0, #30
 8009586:	f002 f880 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800958a:	201e      	movs	r0, #30
 800958c:	f002 f897 	bl	800b6be <HAL_NVIC_EnableIRQ>
}
 8009590:	e02d      	b.n	80095ee <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a1b      	ldr	r2, [pc, #108]	@ (8009604 <HAL_TIM_Encoder_MspInit+0x168>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d128      	bne.n	80095ee <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800959c:	4b17      	ldr	r3, [pc, #92]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 800959e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a0:	4a16      	ldr	r2, [pc, #88]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80095a2:	f043 0308 	orr.w	r3, r3, #8
 80095a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80095a8:	4b14      	ldr	r3, [pc, #80]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80095aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ac:	f003 0308 	and.w	r3, r3, #8
 80095b0:	613b      	str	r3, [r7, #16]
 80095b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095b4:	4b11      	ldr	r3, [pc, #68]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80095b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b8:	4a10      	ldr	r2, [pc, #64]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80095ba:	f043 0301 	orr.w	r3, r3, #1
 80095be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095c0:	4b0e      	ldr	r3, [pc, #56]	@ (80095fc <HAL_TIM_Encoder_MspInit+0x160>)
 80095c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80095cc:	2303      	movs	r3, #3
 80095ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095d0:	2302      	movs	r3, #2
 80095d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095d4:	2300      	movs	r3, #0
 80095d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095d8:	2300      	movs	r3, #0
 80095da:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80095dc:	2302      	movs	r3, #2
 80095de:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095e4:	4619      	mov	r1, r3
 80095e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80095ea:	f002 fbb5 	bl	800bd58 <HAL_GPIO_Init>
}
 80095ee:	bf00      	nop
 80095f0:	3738      	adds	r7, #56	@ 0x38
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40021000 	.word	0x40021000
 8009600:	40000800 	.word	0x40000800
 8009604:	40000c00 	.word	0x40000c00

08009608 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b08a      	sub	sp, #40	@ 0x28
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009610:	f107 0314 	add.w	r3, r7, #20
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]
 8009618:	605a      	str	r2, [r3, #4]
 800961a:	609a      	str	r2, [r3, #8]
 800961c:	60da      	str	r2, [r3, #12]
 800961e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a22      	ldr	r2, [pc, #136]	@ (80096b0 <HAL_TIM_MspPostInit+0xa8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d11c      	bne.n	8009664 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800962a:	4b22      	ldr	r3, [pc, #136]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 800962c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962e:	4a21      	ldr	r2, [pc, #132]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 8009630:	f043 0304 	orr.w	r3, r3, #4
 8009634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009636:	4b1f      	ldr	r3, [pc, #124]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 8009638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963a:	f003 0304 	and.w	r3, r3, #4
 800963e:	613b      	str	r3, [r7, #16]
 8009640:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009642:	2308      	movs	r3, #8
 8009644:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009646:	2302      	movs	r3, #2
 8009648:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964a:	2300      	movs	r3, #0
 800964c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800964e:	2300      	movs	r3, #0
 8009650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009652:	2302      	movs	r3, #2
 8009654:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009656:	f107 0314 	add.w	r3, r7, #20
 800965a:	4619      	mov	r1, r3
 800965c:	4816      	ldr	r0, [pc, #88]	@ (80096b8 <HAL_TIM_MspPostInit+0xb0>)
 800965e:	f002 fb7b 	bl	800bd58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009662:	e020      	b.n	80096a6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a14      	ldr	r2, [pc, #80]	@ (80096bc <HAL_TIM_MspPostInit+0xb4>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d11b      	bne.n	80096a6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800966e:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 8009670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009672:	4a10      	ldr	r2, [pc, #64]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 8009674:	f043 0304 	orr.w	r3, r3, #4
 8009678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800967a:	4b0e      	ldr	r3, [pc, #56]	@ (80096b4 <HAL_TIM_MspPostInit+0xac>)
 800967c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009686:	23c0      	movs	r3, #192	@ 0xc0
 8009688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800968a:	2302      	movs	r3, #2
 800968c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800968e:	2300      	movs	r3, #0
 8009690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009692:	2300      	movs	r3, #0
 8009694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009696:	2304      	movs	r3, #4
 8009698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800969a:	f107 0314 	add.w	r3, r7, #20
 800969e:	4619      	mov	r1, r3
 80096a0:	4805      	ldr	r0, [pc, #20]	@ (80096b8 <HAL_TIM_MspPostInit+0xb0>)
 80096a2:	f002 fb59 	bl	800bd58 <HAL_GPIO_Init>
}
 80096a6:	bf00      	nop
 80096a8:	3728      	adds	r7, #40	@ 0x28
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40012c00 	.word	0x40012c00
 80096b4:	40021000 	.word	0x40021000
 80096b8:	48000800 	.word	0x48000800
 80096bc:	40013400 	.word	0x40013400

080096c0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80096c4:	4b20      	ldr	r3, [pc, #128]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096c6:	4a21      	ldr	r2, [pc, #132]	@ (800974c <MX_LPUART1_UART_Init+0x8c>)
 80096c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80096ca:	4b1f      	ldr	r3, [pc, #124]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096cc:	4a20      	ldr	r2, [pc, #128]	@ (8009750 <MX_LPUART1_UART_Init+0x90>)
 80096ce:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096d0:	4b1d      	ldr	r3, [pc, #116]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80096d6:	4b1c      	ldr	r3, [pc, #112]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096d8:	2200      	movs	r2, #0
 80096da:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80096dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096de:	2200      	movs	r2, #0
 80096e0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80096e2:	4b19      	ldr	r3, [pc, #100]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096e4:	220c      	movs	r2, #12
 80096e6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096e8:	4b17      	ldr	r3, [pc, #92]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096ee:	4b16      	ldr	r3, [pc, #88]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096f4:	4b14      	ldr	r3, [pc, #80]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096fa:	4b13      	ldr	r3, [pc, #76]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 80096fc:	2200      	movs	r2, #0
 80096fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009700:	4811      	ldr	r0, [pc, #68]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 8009702:	f005 fe25 	bl	800f350 <HAL_UART_Init>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800970c:	f7fe fcf6 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009710:	2100      	movs	r1, #0
 8009712:	480d      	ldr	r0, [pc, #52]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 8009714:	f007 fb82 	bl	8010e1c <HAL_UARTEx_SetTxFifoThreshold>
 8009718:	4603      	mov	r3, r0
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800971e:	f7fe fced 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009722:	2100      	movs	r1, #0
 8009724:	4808      	ldr	r0, [pc, #32]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 8009726:	f007 fbb7 	bl	8010e98 <HAL_UARTEx_SetRxFifoThreshold>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8009730:	f7fe fce4 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009734:	4804      	ldr	r0, [pc, #16]	@ (8009748 <MX_LPUART1_UART_Init+0x88>)
 8009736:	f007 fb38 	bl	8010daa <HAL_UARTEx_DisableFifoMode>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d001      	beq.n	8009744 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009740:	f7fe fcdc 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009744:	bf00      	nop
 8009746:	bd80      	pop	{r7, pc}
 8009748:	20001f0c 	.word	0x20001f0c
 800974c:	40008000 	.word	0x40008000
 8009750:	001e8480 	.word	0x001e8480

08009754 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009758:	4b23      	ldr	r3, [pc, #140]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 800975a:	4a24      	ldr	r2, [pc, #144]	@ (80097ec <MX_USART2_UART_Init+0x98>)
 800975c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800975e:	4b22      	ldr	r3, [pc, #136]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009760:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8009764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8009766:	4b20      	ldr	r3, [pc, #128]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009768:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800976c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800976e:	4b1e      	ldr	r3, [pc, #120]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009770:	2200      	movs	r2, #0
 8009772:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8009774:	4b1c      	ldr	r3, [pc, #112]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009776:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800977a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800977c:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 800977e:	220c      	movs	r2, #12
 8009780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009782:	4b19      	ldr	r3, [pc, #100]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009784:	2200      	movs	r2, #0
 8009786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009788:	4b17      	ldr	r3, [pc, #92]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 800978a:	2200      	movs	r2, #0
 800978c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800978e:	4b16      	ldr	r3, [pc, #88]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009790:	2200      	movs	r2, #0
 8009792:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009794:	4b14      	ldr	r3, [pc, #80]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 8009796:	2200      	movs	r2, #0
 8009798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800979a:	4b13      	ldr	r3, [pc, #76]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 800979c:	2200      	movs	r2, #0
 800979e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80097a0:	4811      	ldr	r0, [pc, #68]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 80097a2:	f005 fdd5 	bl	800f350 <HAL_UART_Init>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80097ac:	f7fe fca6 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097b0:	2100      	movs	r1, #0
 80097b2:	480d      	ldr	r0, [pc, #52]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 80097b4:	f007 fb32 	bl	8010e1c <HAL_UARTEx_SetTxFifoThreshold>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80097be:	f7fe fc9d 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097c2:	2100      	movs	r1, #0
 80097c4:	4808      	ldr	r0, [pc, #32]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 80097c6:	f007 fb67 	bl	8010e98 <HAL_UARTEx_SetRxFifoThreshold>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80097d0:	f7fe fc94 	bl	80080fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80097d4:	4804      	ldr	r0, [pc, #16]	@ (80097e8 <MX_USART2_UART_Init+0x94>)
 80097d6:	f007 fae8 	bl	8010daa <HAL_UARTEx_DisableFifoMode>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80097e0:	f7fe fc8c 	bl	80080fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80097e4:	bf00      	nop
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	20001fd8 	.word	0x20001fd8
 80097ec:	40004400 	.word	0x40004400

080097f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b0a0      	sub	sp, #128	@ 0x80
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80097fc:	2200      	movs	r2, #0
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	605a      	str	r2, [r3, #4]
 8009802:	609a      	str	r2, [r3, #8]
 8009804:	60da      	str	r2, [r3, #12]
 8009806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009808:	f107 0318 	add.w	r3, r7, #24
 800980c:	2254      	movs	r2, #84	@ 0x54
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f008 f979 	bl	8011b08 <memset>
  if(uartHandle->Instance==LPUART1)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a99      	ldr	r2, [pc, #612]	@ (8009a80 <HAL_UART_MspInit+0x290>)
 800981c:	4293      	cmp	r3, r2
 800981e:	f040 8093 	bne.w	8009948 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009822:	2320      	movs	r3, #32
 8009824:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009826:	2300      	movs	r3, #0
 8009828:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800982a:	f107 0318 	add.w	r3, r7, #24
 800982e:	4618      	mov	r0, r3
 8009830:	f003 fa58 	bl	800cce4 <HAL_RCCEx_PeriphCLKConfig>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800983a:	f7fe fc5f 	bl	80080fc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800983e:	4b91      	ldr	r3, [pc, #580]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009842:	4a90      	ldr	r2, [pc, #576]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800984a:	4b8e      	ldr	r3, [pc, #568]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 800984c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009856:	4b8b      	ldr	r3, [pc, #556]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800985a:	4a8a      	ldr	r2, [pc, #552]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 800985c:	f043 0302 	orr.w	r3, r3, #2
 8009860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009862:	4b88      	ldr	r3, [pc, #544]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	613b      	str	r3, [r7, #16]
 800986c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800986e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009872:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009874:	2302      	movs	r3, #2
 8009876:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009878:	2300      	movs	r3, #0
 800987a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800987c:	2300      	movs	r3, #0
 800987e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009880:	2308      	movs	r3, #8
 8009882:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009884:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009888:	4619      	mov	r1, r3
 800988a:	487f      	ldr	r0, [pc, #508]	@ (8009a88 <HAL_UART_MspInit+0x298>)
 800988c:	f002 fa64 	bl	800bd58 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8009890:	4b7e      	ldr	r3, [pc, #504]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 8009892:	4a7f      	ldr	r2, [pc, #508]	@ (8009a90 <HAL_UART_MspInit+0x2a0>)
 8009894:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8009896:	4b7d      	ldr	r3, [pc, #500]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 8009898:	2222      	movs	r2, #34	@ 0x22
 800989a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800989c:	4b7b      	ldr	r3, [pc, #492]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 800989e:	2200      	movs	r2, #0
 80098a0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098a2:	4b7a      	ldr	r3, [pc, #488]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80098a8:	4b78      	ldr	r3, [pc, #480]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098aa:	2280      	movs	r2, #128	@ 0x80
 80098ac:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098ae:	4b77      	ldr	r3, [pc, #476]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098b4:	4b75      	ldr	r3, [pc, #468]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80098ba:	4b74      	ldr	r3, [pc, #464]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098bc:	2200      	movs	r2, #0
 80098be:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098c0:	4b72      	ldr	r3, [pc, #456]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80098c6:	4871      	ldr	r0, [pc, #452]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098c8:	f001 ff14 	bl	800b6f4 <HAL_DMA_Init>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80098d2:	f7fe fc13 	bl	80080fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a6c      	ldr	r2, [pc, #432]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80098de:	4a6b      	ldr	r2, [pc, #428]	@ (8009a8c <HAL_UART_MspInit+0x29c>)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80098e4:	4b6b      	ldr	r3, [pc, #428]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 80098e6:	4a6c      	ldr	r2, [pc, #432]	@ (8009a98 <HAL_UART_MspInit+0x2a8>)
 80098e8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80098ea:	4b6a      	ldr	r3, [pc, #424]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 80098ec:	2223      	movs	r2, #35	@ 0x23
 80098ee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098f0:	4b68      	ldr	r3, [pc, #416]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 80098f2:	2210      	movs	r2, #16
 80098f4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098f6:	4b67      	ldr	r3, [pc, #412]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 80098f8:	2200      	movs	r2, #0
 80098fa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80098fc:	4b65      	ldr	r3, [pc, #404]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 80098fe:	2280      	movs	r2, #128	@ 0x80
 8009900:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009902:	4b64      	ldr	r3, [pc, #400]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 8009904:	2200      	movs	r2, #0
 8009906:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009908:	4b62      	ldr	r3, [pc, #392]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 800990a:	2200      	movs	r2, #0
 800990c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800990e:	4b61      	ldr	r3, [pc, #388]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 8009910:	2200      	movs	r2, #0
 8009912:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009914:	4b5f      	ldr	r3, [pc, #380]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 8009916:	2200      	movs	r2, #0
 8009918:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800991a:	485e      	ldr	r0, [pc, #376]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 800991c:	f001 feea 	bl	800b6f4 <HAL_DMA_Init>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8009926:	f7fe fbe9 	bl	80080fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a59      	ldr	r2, [pc, #356]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 800992e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009930:	4a58      	ldr	r2, [pc, #352]	@ (8009a94 <HAL_UART_MspInit+0x2a4>)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8009936:	2200      	movs	r2, #0
 8009938:	2100      	movs	r1, #0
 800993a:	205b      	movs	r0, #91	@ 0x5b
 800993c:	f001 fea5 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009940:	205b      	movs	r0, #91	@ 0x5b
 8009942:	f001 febc 	bl	800b6be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009946:	e097      	b.n	8009a78 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a53      	ldr	r2, [pc, #332]	@ (8009a9c <HAL_UART_MspInit+0x2ac>)
 800994e:	4293      	cmp	r3, r2
 8009950:	f040 8092 	bne.w	8009a78 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009954:	2302      	movs	r3, #2
 8009956:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009958:	2300      	movs	r3, #0
 800995a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800995c:	f107 0318 	add.w	r3, r7, #24
 8009960:	4618      	mov	r0, r3
 8009962:	f003 f9bf 	bl	800cce4 <HAL_RCCEx_PeriphCLKConfig>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800996c:	f7fe fbc6 	bl	80080fc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009970:	4b44      	ldr	r3, [pc, #272]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009974:	4a43      	ldr	r2, [pc, #268]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800997a:	6593      	str	r3, [r2, #88]	@ 0x58
 800997c:	4b41      	ldr	r3, [pc, #260]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 800997e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009980:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009984:	60fb      	str	r3, [r7, #12]
 8009986:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009988:	4b3e      	ldr	r3, [pc, #248]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 800998a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800998c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 800998e:	f043 0301 	orr.w	r3, r3, #1
 8009992:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009994:	4b3b      	ldr	r3, [pc, #236]	@ (8009a84 <HAL_UART_MspInit+0x294>)
 8009996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009998:	f003 0301 	and.w	r3, r3, #1
 800999c:	60bb      	str	r3, [r7, #8]
 800999e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80099a0:	230c      	movs	r3, #12
 80099a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a4:	2302      	movs	r3, #2
 80099a6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099ac:	2300      	movs	r3, #0
 80099ae:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80099b0:	2307      	movs	r3, #7
 80099b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099b8:	4619      	mov	r1, r3
 80099ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80099be:	f002 f9cb 	bl	800bd58 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80099c2:	4b37      	ldr	r3, [pc, #220]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099c4:	4a37      	ldr	r2, [pc, #220]	@ (8009aa4 <HAL_UART_MspInit+0x2b4>)
 80099c6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80099c8:	4b35      	ldr	r3, [pc, #212]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099ca:	221a      	movs	r2, #26
 80099cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099ce:	4b34      	ldr	r3, [pc, #208]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099d4:	4b32      	ldr	r3, [pc, #200]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099da:	4b31      	ldr	r3, [pc, #196]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099dc:	2280      	movs	r2, #128	@ 0x80
 80099de:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099e0:	4b2f      	ldr	r3, [pc, #188]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099e6:	4b2e      	ldr	r3, [pc, #184]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80099ec:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099f2:	4b2b      	ldr	r3, [pc, #172]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80099f8:	4829      	ldr	r0, [pc, #164]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 80099fa:	f001 fe7b 	bl	800b6f4 <HAL_DMA_Init>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8009a04:	f7fe fb7a 	bl	80080fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a25      	ldr	r2, [pc, #148]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 8009a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009a10:	4a23      	ldr	r2, [pc, #140]	@ (8009aa0 <HAL_UART_MspInit+0x2b0>)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8009a16:	4b24      	ldr	r3, [pc, #144]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a18:	4a24      	ldr	r2, [pc, #144]	@ (8009aac <HAL_UART_MspInit+0x2bc>)
 8009a1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009a1c:	4b22      	ldr	r3, [pc, #136]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a1e:	221b      	movs	r2, #27
 8009a20:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a22:	4b21      	ldr	r3, [pc, #132]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a24:	2210      	movs	r2, #16
 8009a26:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a28:	4b1f      	ldr	r3, [pc, #124]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a30:	2280      	movs	r2, #128	@ 0x80
 8009a32:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a34:	4b1c      	ldr	r3, [pc, #112]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009a40:	4b19      	ldr	r3, [pc, #100]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a46:	4b18      	ldr	r3, [pc, #96]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a48:	2200      	movs	r2, #0
 8009a4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009a4c:	4816      	ldr	r0, [pc, #88]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a4e:	f001 fe51 	bl	800b6f4 <HAL_DMA_Init>
 8009a52:	4603      	mov	r3, r0
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d001      	beq.n	8009a5c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8009a58:	f7fe fb50 	bl	80080fc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a12      	ldr	r2, [pc, #72]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a60:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009a62:	4a11      	ldr	r2, [pc, #68]	@ (8009aa8 <HAL_UART_MspInit+0x2b8>)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009a68:	2200      	movs	r2, #0
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	2026      	movs	r0, #38	@ 0x26
 8009a6e:	f001 fe0c 	bl	800b68a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009a72:	2026      	movs	r0, #38	@ 0x26
 8009a74:	f001 fe23 	bl	800b6be <HAL_NVIC_EnableIRQ>
}
 8009a78:	bf00      	nop
 8009a7a:	3780      	adds	r7, #128	@ 0x80
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	40008000 	.word	0x40008000
 8009a84:	40021000 	.word	0x40021000
 8009a88:	48000400 	.word	0x48000400
 8009a8c:	200020a4 	.word	0x200020a4
 8009a90:	40020044 	.word	0x40020044
 8009a94:	20002104 	.word	0x20002104
 8009a98:	40020058 	.word	0x40020058
 8009a9c:	40004400 	.word	0x40004400
 8009aa0:	20002164 	.word	0x20002164
 8009aa4:	4002001c 	.word	0x4002001c
 8009aa8:	200021c4 	.word	0x200021c4
 8009aac:	40020030 	.word	0x40020030

08009ab0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8009ab0:	480d      	ldr	r0, [pc, #52]	@ (8009ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009ab2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8009ab4:	f7ff f994 	bl	8008de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ab8:	480c      	ldr	r0, [pc, #48]	@ (8009aec <LoopForever+0x6>)
  ldr r1, =_edata
 8009aba:	490d      	ldr	r1, [pc, #52]	@ (8009af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009abc:	4a0d      	ldr	r2, [pc, #52]	@ (8009af4 <LoopForever+0xe>)
  movs r3, #0
 8009abe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009ac0:	e002      	b.n	8009ac8 <LoopCopyDataInit>

08009ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ac6:	3304      	adds	r3, #4

08009ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009acc:	d3f9      	bcc.n	8009ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ace:	4a0a      	ldr	r2, [pc, #40]	@ (8009af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8009afc <LoopForever+0x16>)
  movs r3, #0
 8009ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ad4:	e001      	b.n	8009ada <LoopFillZerobss>

08009ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ad8:	3204      	adds	r2, #4

08009ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009adc:	d3fb      	bcc.n	8009ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009ade:	f008 f831 	bl	8011b44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009ae2:	f7fb fb09 	bl	80050f8 <main>

08009ae6 <LoopForever>:

LoopForever:
    b LoopForever
 8009ae6:	e7fe      	b.n	8009ae6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8009ae8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009af0:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009af4:	08014048 	.word	0x08014048
  ldr r2, =_sbss
 8009af8:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009afc:	20002370 	.word	0x20002370

08009b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009b00:	e7fe      	b.n	8009b00 <ADC1_2_IRQHandler>

08009b02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b0c:	2003      	movs	r0, #3
 8009b0e:	f001 fdb1 	bl	800b674 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b12:	2000      	movs	r0, #0
 8009b14:	f000 f80e 	bl	8009b34 <HAL_InitTick>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	71fb      	strb	r3, [r7, #7]
 8009b22:	e001      	b.n	8009b28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009b24:	f7ff f834 	bl	8008b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009b28:	79fb      	ldrb	r3, [r7, #7]

}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009b40:	4b16      	ldr	r3, [pc, #88]	@ (8009b9c <HAL_InitTick+0x68>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d022      	beq.n	8009b8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009b48:	4b15      	ldr	r3, [pc, #84]	@ (8009ba0 <HAL_InitTick+0x6c>)
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	4b13      	ldr	r3, [pc, #76]	@ (8009b9c <HAL_InitTick+0x68>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 fdbc 	bl	800b6da <HAL_SYSTICK_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10f      	bne.n	8009b88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b0f      	cmp	r3, #15
 8009b6c:	d809      	bhi.n	8009b82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b6e:	2200      	movs	r2, #0
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295
 8009b76:	f001 fd88 	bl	800b68a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009b7a:	4a0a      	ldr	r2, [pc, #40]	@ (8009ba4 <HAL_InitTick+0x70>)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6013      	str	r3, [r2, #0]
 8009b80:	e007      	b.n	8009b92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	73fb      	strb	r3, [r7, #15]
 8009b86:	e004      	b.n	8009b92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	73fb      	strb	r3, [r7, #15]
 8009b8c:	e001      	b.n	8009b92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	20000140 	.word	0x20000140
 8009ba0:	20000138 	.word	0x20000138
 8009ba4:	2000013c 	.word	0x2000013c

08009ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009bac:	4b05      	ldr	r3, [pc, #20]	@ (8009bc4 <HAL_IncTick+0x1c>)
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b05      	ldr	r3, [pc, #20]	@ (8009bc8 <HAL_IncTick+0x20>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	4a03      	ldr	r2, [pc, #12]	@ (8009bc4 <HAL_IncTick+0x1c>)
 8009bb8:	6013      	str	r3, [r2, #0]
}
 8009bba:	bf00      	nop
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	20002224 	.word	0x20002224
 8009bc8:	20000140 	.word	0x20000140

08009bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	af00      	add	r7, sp, #0
  return uwTick;
 8009bd0:	4b03      	ldr	r3, [pc, #12]	@ (8009be0 <HAL_GetTick+0x14>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	20002224 	.word	0x20002224

08009be4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	689b      	ldr	r3, [r3, #8]
 8009bf2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	431a      	orrs	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	609a      	str	r2, [r3, #8]
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	609a      	str	r2, [r3, #8]
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	689b      	ldr	r3, [r3, #8]
 8009c3c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b087      	sub	sp, #28
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3360      	adds	r3, #96	@ 0x60
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	4b08      	ldr	r3, [pc, #32]	@ (8009c90 <LL_ADC_SetOffset+0x44>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009c76:	683a      	ldr	r2, [r7, #0]
 8009c78:	430a      	orrs	r2, r1
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009c84:	bf00      	nop
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr
 8009c90:	03fff000 	.word	0x03fff000

08009c94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	3360      	adds	r3, #96	@ 0x60
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4413      	add	r3, r2
 8009caa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3360      	adds	r3, #96	@ 0x60
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	431a      	orrs	r2, r3
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b087      	sub	sp, #28
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	3360      	adds	r3, #96	@ 0x60
 8009d06:	461a      	mov	r2, r3
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	431a      	orrs	r2, r3
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009d20:	bf00      	nop
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b087      	sub	sp, #28
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	3360      	adds	r3, #96	@ 0x60
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	4413      	add	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	431a      	orrs	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009d56:	bf00      	nop
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr

08009d62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009d62:	b480      	push	{r7}
 8009d64:	b083      	sub	sp, #12
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	695b      	ldr	r3, [r3, #20]
 8009d70:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	615a      	str	r2, [r3, #20]
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e000      	b.n	8009da2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b087      	sub	sp, #28
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	60f8      	str	r0, [r7, #12]
 8009db6:	60b9      	str	r1, [r7, #8]
 8009db8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3330      	adds	r3, #48	@ 0x30
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	0a1b      	lsrs	r3, r3, #8
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	f003 030c 	and.w	r3, r3, #12
 8009dca:	4413      	add	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	f003 031f 	and.w	r3, r3, #31
 8009dd8:	211f      	movs	r1, #31
 8009dda:	fa01 f303 	lsl.w	r3, r1, r3
 8009dde:	43db      	mvns	r3, r3
 8009de0:	401a      	ands	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	0e9b      	lsrs	r3, r3, #26
 8009de6:	f003 011f 	and.w	r1, r3, #31
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	f003 031f 	and.w	r3, r3, #31
 8009df0:	fa01 f303 	lsl.w	r3, r1, r3
 8009df4:	431a      	orrs	r2, r3
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009dfa:	bf00      	nop
 8009dfc:	371c      	adds	r7, #28
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009e06:	b480      	push	{r7}
 8009e08:	b087      	sub	sp, #28
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3314      	adds	r3, #20
 8009e16:	461a      	mov	r2, r3
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	0e5b      	lsrs	r3, r3, #25
 8009e1c:	009b      	lsls	r3, r3, #2
 8009e1e:	f003 0304 	and.w	r3, r3, #4
 8009e22:	4413      	add	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	0d1b      	lsrs	r3, r3, #20
 8009e2e:	f003 031f 	and.w	r3, r3, #31
 8009e32:	2107      	movs	r1, #7
 8009e34:	fa01 f303 	lsl.w	r3, r1, r3
 8009e38:	43db      	mvns	r3, r3
 8009e3a:	401a      	ands	r2, r3
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	0d1b      	lsrs	r3, r3, #20
 8009e40:	f003 031f 	and.w	r3, r3, #31
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009e50:	bf00      	nop
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	60f8      	str	r0, [r7, #12]
 8009e64:	60b9      	str	r1, [r7, #8]
 8009e66:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e74:	43db      	mvns	r3, r3
 8009e76:	401a      	ands	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f003 0318 	and.w	r3, r3, #24
 8009e7e:	4908      	ldr	r1, [pc, #32]	@ (8009ea0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009e80:	40d9      	lsrs	r1, r3
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	400b      	ands	r3, r1
 8009e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009e92:	bf00      	nop
 8009e94:	3714      	adds	r7, #20
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	0007ffff 	.word	0x0007ffff

08009ea4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f003 031f 	and.w	r3, r3, #31
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b083      	sub	sp, #12
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009ed4:	687a      	ldr	r2, [r7, #4]
 8009ed6:	6093      	str	r3, [r2, #8]
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ef8:	d101      	bne.n	8009efe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr

08009f0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f20:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f48:	d101      	bne.n	8009f4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f70:	f043 0201 	orr.w	r2, r3, #1
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f98:	f043 0202 	orr.w	r2, r3, #2
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 0301 	and.w	r3, r3, #1
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <LL_ADC_IsEnabled+0x18>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <LL_ADC_IsEnabled+0x1a>
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	d101      	bne.n	8009fea <LL_ADC_IsDisableOngoing+0x18>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <LL_ADC_IsDisableOngoing+0x1a>
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a00c:	f043 0204 	orr.w	r2, r3, #4
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d101      	bne.n	800a038 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a046:	b480      	push	{r7}
 800a048:	b083      	sub	sp, #12
 800a04a:	af00      	add	r7, sp, #0
 800a04c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f003 0308 	and.w	r3, r3, #8
 800a056:	2b08      	cmp	r3, #8
 800a058:	d101      	bne.n	800a05e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a05a:	2301      	movs	r3, #1
 800a05c:	e000      	b.n	800a060 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b089      	sub	sp, #36	@ 0x24
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a078:	2300      	movs	r3, #0
 800a07a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e1a9      	b.n	800a3da <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a090:	2b00      	cmp	r3, #0
 800a092:	d109      	bne.n	800a0a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f7fa fb49 	bl	800472c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff ff19 	bl	8009ee4 <LL_ADC_IsDeepPowerDownEnabled>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d004      	beq.n	800a0c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff feff 	bl	8009ec0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff ff34 	bl	8009f34 <LL_ADC_IsInternalRegulatorEnabled>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d115      	bne.n	800a0fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff ff18 	bl	8009f0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a0dc:	4b9c      	ldr	r3, [pc, #624]	@ (800a350 <HAL_ADC_Init+0x2e4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	099b      	lsrs	r3, r3, #6
 800a0e2:	4a9c      	ldr	r2, [pc, #624]	@ (800a354 <HAL_ADC_Init+0x2e8>)
 800a0e4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e8:	099b      	lsrs	r3, r3, #6
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	005b      	lsls	r3, r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a0f0:	e002      	b.n	800a0f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f9      	bne.n	800a0f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff ff16 	bl	8009f34 <LL_ADC_IsInternalRegulatorEnabled>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10d      	bne.n	800a12a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a112:	f043 0210 	orr.w	r2, r3, #16
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a11e:	f043 0201 	orr.w	r2, r3, #1
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff ff76 	bl	800a020 <LL_ADC_REG_IsConversionOngoing>
 800a134:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a13a:	f003 0310 	and.w	r3, r3, #16
 800a13e:	2b00      	cmp	r3, #0
 800a140:	f040 8142 	bne.w	800a3c8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 813e 	bne.w	800a3c8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a150:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a154:	f043 0202 	orr.w	r2, r3, #2
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4618      	mov	r0, r3
 800a162:	f7ff ff23 	bl	8009fac <LL_ADC_IsEnabled>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d141      	bne.n	800a1f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a174:	d004      	beq.n	800a180 <HAL_ADC_Init+0x114>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a77      	ldr	r2, [pc, #476]	@ (800a358 <HAL_ADC_Init+0x2ec>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d10f      	bne.n	800a1a0 <HAL_ADC_Init+0x134>
 800a180:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a184:	f7ff ff12 	bl	8009fac <LL_ADC_IsEnabled>
 800a188:	4604      	mov	r4, r0
 800a18a:	4873      	ldr	r0, [pc, #460]	@ (800a358 <HAL_ADC_Init+0x2ec>)
 800a18c:	f7ff ff0e 	bl	8009fac <LL_ADC_IsEnabled>
 800a190:	4603      	mov	r3, r0
 800a192:	4323      	orrs	r3, r4
 800a194:	2b00      	cmp	r3, #0
 800a196:	bf0c      	ite	eq
 800a198:	2301      	moveq	r3, #1
 800a19a:	2300      	movne	r3, #0
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	e012      	b.n	800a1c6 <HAL_ADC_Init+0x15a>
 800a1a0:	486e      	ldr	r0, [pc, #440]	@ (800a35c <HAL_ADC_Init+0x2f0>)
 800a1a2:	f7ff ff03 	bl	8009fac <LL_ADC_IsEnabled>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	486d      	ldr	r0, [pc, #436]	@ (800a360 <HAL_ADC_Init+0x2f4>)
 800a1aa:	f7ff feff 	bl	8009fac <LL_ADC_IsEnabled>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	431c      	orrs	r4, r3
 800a1b2:	486c      	ldr	r0, [pc, #432]	@ (800a364 <HAL_ADC_Init+0x2f8>)
 800a1b4:	f7ff fefa 	bl	8009fac <LL_ADC_IsEnabled>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	4323      	orrs	r3, r4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	bf0c      	ite	eq
 800a1c0:	2301      	moveq	r3, #1
 800a1c2:	2300      	movne	r3, #0
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d012      	beq.n	800a1f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1d2:	d004      	beq.n	800a1de <HAL_ADC_Init+0x172>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a5f      	ldr	r2, [pc, #380]	@ (800a358 <HAL_ADC_Init+0x2ec>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d101      	bne.n	800a1e2 <HAL_ADC_Init+0x176>
 800a1de:	4a62      	ldr	r2, [pc, #392]	@ (800a368 <HAL_ADC_Init+0x2fc>)
 800a1e0:	e000      	b.n	800a1e4 <HAL_ADC_Init+0x178>
 800a1e2:	4a62      	ldr	r2, [pc, #392]	@ (800a36c <HAL_ADC_Init+0x300>)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4610      	mov	r0, r2
 800a1ec:	f7ff fcfa 	bl	8009be4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	7f5b      	ldrb	r3, [r3, #29]
 800a1f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a1fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a200:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a206:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a20e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a210:	4313      	orrs	r3, r2
 800a212:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d106      	bne.n	800a22c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a222:	3b01      	subs	r3, #1
 800a224:	045b      	lsls	r3, r3, #17
 800a226:	69ba      	ldr	r2, [r7, #24]
 800a228:	4313      	orrs	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a238:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a240:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4313      	orrs	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68da      	ldr	r2, [r3, #12]
 800a24e:	4b48      	ldr	r3, [pc, #288]	@ (800a370 <HAL_ADC_Init+0x304>)
 800a250:	4013      	ands	r3, r2
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6812      	ldr	r2, [r2, #0]
 800a256:	69b9      	ldr	r1, [r7, #24]
 800a258:	430b      	orrs	r3, r1
 800a25a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	691b      	ldr	r3, [r3, #16]
 800a262:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f7ff fee5 	bl	800a046 <LL_ADC_INJ_IsConversionOngoing>
 800a27c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d17f      	bne.n	800a384 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d17c      	bne.n	800a384 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a28e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a296:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a298:	4313      	orrs	r3, r2
 800a29a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2a6:	f023 0302 	bic.w	r3, r3, #2
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	69b9      	ldr	r1, [r7, #24]
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d017      	beq.n	800a2ec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	691a      	ldr	r2, [r3, #16]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a2ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a2d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6911      	ldr	r1, [r2, #16]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	6812      	ldr	r2, [r2, #0]
 800a2e4:	430b      	orrs	r3, r1
 800a2e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800a2ea:	e013      	b.n	800a314 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	691a      	ldr	r2, [r3, #16]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a2fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6812      	ldr	r2, [r2, #0]
 800a308:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a30c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a310:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d12a      	bne.n	800a374 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a328:	f023 0304 	bic.w	r3, r3, #4
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a334:	4311      	orrs	r1, r2
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a33a:	4311      	orrs	r1, r2
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a340:	430a      	orrs	r2, r1
 800a342:	431a      	orrs	r2, r3
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0201 	orr.w	r2, r2, #1
 800a34c:	611a      	str	r2, [r3, #16]
 800a34e:	e019      	b.n	800a384 <HAL_ADC_Init+0x318>
 800a350:	20000138 	.word	0x20000138
 800a354:	053e2d63 	.word	0x053e2d63
 800a358:	50000100 	.word	0x50000100
 800a35c:	50000400 	.word	0x50000400
 800a360:	50000500 	.word	0x50000500
 800a364:	50000600 	.word	0x50000600
 800a368:	50000300 	.word	0x50000300
 800a36c:	50000700 	.word	0x50000700
 800a370:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	691a      	ldr	r2, [r3, #16]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0201 	bic.w	r2, r2, #1
 800a382:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	695b      	ldr	r3, [r3, #20]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d10c      	bne.n	800a3a6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a392:	f023 010f 	bic.w	r1, r3, #15
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	1e5a      	subs	r2, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	430a      	orrs	r2, r1
 800a3a2:	631a      	str	r2, [r3, #48]	@ 0x30
 800a3a4:	e007      	b.n	800a3b6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f022 020f 	bic.w	r2, r2, #15
 800a3b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3ba:	f023 0303 	bic.w	r3, r3, #3
 800a3be:	f043 0201 	orr.w	r2, r3, #1
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3c6:	e007      	b.n	800a3d8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3cc:	f043 0210 	orr.w	r2, r3, #16
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a3d8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3724      	adds	r7, #36	@ 0x24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd90      	pop	{r4, r7, pc}
 800a3e2:	bf00      	nop

0800a3e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3f8:	d004      	beq.n	800a404 <HAL_ADC_Start_DMA+0x20>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a5a      	ldr	r2, [pc, #360]	@ (800a568 <HAL_ADC_Start_DMA+0x184>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d101      	bne.n	800a408 <HAL_ADC_Start_DMA+0x24>
 800a404:	4b59      	ldr	r3, [pc, #356]	@ (800a56c <HAL_ADC_Start_DMA+0x188>)
 800a406:	e000      	b.n	800a40a <HAL_ADC_Start_DMA+0x26>
 800a408:	4b59      	ldr	r3, [pc, #356]	@ (800a570 <HAL_ADC_Start_DMA+0x18c>)
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fd4a 	bl	8009ea4 <LL_ADC_GetMultimode>
 800a410:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fe02 	bl	800a020 <LL_ADC_REG_IsConversionOngoing>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f040 809b 	bne.w	800a55a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_ADC_Start_DMA+0x4e>
 800a42e:	2302      	movs	r3, #2
 800a430:	e096      	b.n	800a560 <HAL_ADC_Start_DMA+0x17c>
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2201      	movs	r2, #1
 800a436:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a4d      	ldr	r2, [pc, #308]	@ (800a574 <HAL_ADC_Start_DMA+0x190>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d008      	beq.n	800a456 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d005      	beq.n	800a456 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2b05      	cmp	r3, #5
 800a44e:	d002      	beq.n	800a456 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b09      	cmp	r3, #9
 800a454:	d17a      	bne.n	800a54c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fcf6 	bl	800ae48 <ADC_Enable>
 800a45c:	4603      	mov	r3, r0
 800a45e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d16d      	bne.n	800a542 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a46a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a46e:	f023 0301 	bic.w	r3, r3, #1
 800a472:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a3a      	ldr	r2, [pc, #232]	@ (800a568 <HAL_ADC_Start_DMA+0x184>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d009      	beq.n	800a498 <HAL_ADC_Start_DMA+0xb4>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	4a3b      	ldr	r2, [pc, #236]	@ (800a578 <HAL_ADC_Start_DMA+0x194>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d002      	beq.n	800a494 <HAL_ADC_Start_DMA+0xb0>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	e003      	b.n	800a49c <HAL_ADC_Start_DMA+0xb8>
 800a494:	4b39      	ldr	r3, [pc, #228]	@ (800a57c <HAL_ADC_Start_DMA+0x198>)
 800a496:	e001      	b.n	800a49c <HAL_ADC_Start_DMA+0xb8>
 800a498:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a49c:	68fa      	ldr	r2, [r7, #12]
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d002      	beq.n	800a4aa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d105      	bne.n	800a4b6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d006      	beq.n	800a4d0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4c6:	f023 0206 	bic.w	r2, r3, #6
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4ce:	e002      	b.n	800a4d6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4da:	4a29      	ldr	r2, [pc, #164]	@ (800a580 <HAL_ADC_Start_DMA+0x19c>)
 800a4dc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4e2:	4a28      	ldr	r2, [pc, #160]	@ (800a584 <HAL_ADC_Start_DMA+0x1a0>)
 800a4e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ea:	4a27      	ldr	r2, [pc, #156]	@ (800a588 <HAL_ADC_Start_DMA+0x1a4>)
 800a4ec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	221c      	movs	r2, #28
 800a4f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685a      	ldr	r2, [r3, #4]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f042 0210 	orr.w	r2, r2, #16
 800a50c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f042 0201 	orr.w	r2, r2, #1
 800a51c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	3340      	adds	r3, #64	@ 0x40
 800a528:	4619      	mov	r1, r3
 800a52a:	68ba      	ldr	r2, [r7, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f001 f989 	bl	800b844 <HAL_DMA_Start_IT>
 800a532:	4603      	mov	r3, r0
 800a534:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7ff fd5c 	bl	8009ff8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a540:	e00d      	b.n	800a55e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800a54a:	e008      	b.n	800a55e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2200      	movs	r2, #0
 800a554:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800a558:	e001      	b.n	800a55e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a55a:	2302      	movs	r3, #2
 800a55c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3718      	adds	r7, #24
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	50000100 	.word	0x50000100
 800a56c:	50000300 	.word	0x50000300
 800a570:	50000700 	.word	0x50000700
 800a574:	50000600 	.word	0x50000600
 800a578:	50000500 	.word	0x50000500
 800a57c:	50000400 	.word	0x50000400
 800a580:	0800b033 	.word	0x0800b033
 800a584:	0800b10b 	.word	0x0800b10b
 800a588:	0800b127 	.word	0x0800b127

0800a58c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b083      	sub	sp, #12
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a5a8:	bf00      	nop
 800a5aa:	370c      	adds	r7, #12
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b083      	sub	sp, #12
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b0b6      	sub	sp, #216	@ 0xd8
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d102      	bne.n	800a5ec <HAL_ADC_ConfigChannel+0x24>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	f000 bc13 	b.w	800ae12 <HAL_ADC_ConfigChannel+0x84a>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2201      	movs	r2, #1
 800a5f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fd11 	bl	800a020 <LL_ADC_REG_IsConversionOngoing>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	f040 83f3 	bne.w	800adec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	6859      	ldr	r1, [r3, #4]
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	461a      	mov	r2, r3
 800a614:	f7ff fbcb 	bl	8009dae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fcff 	bl	800a020 <LL_ADC_REG_IsConversionOngoing>
 800a622:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff fd0b 	bl	800a046 <LL_ADC_INJ_IsConversionOngoing>
 800a630:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a634:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	f040 81d9 	bne.w	800a9f0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a63e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a642:	2b00      	cmp	r3, #0
 800a644:	f040 81d4 	bne.w	800a9f0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a650:	d10f      	bne.n	800a672 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	2200      	movs	r2, #0
 800a65c:	4619      	mov	r1, r3
 800a65e:	f7ff fbd2 	bl	8009e06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fb79 	bl	8009d62 <LL_ADC_SetSamplingTimeCommonConfig>
 800a670:	e00e      	b.n	800a690 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6819      	ldr	r1, [r3, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	461a      	mov	r2, r3
 800a680:	f7ff fbc1 	bl	8009e06 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fb69 	bl	8009d62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	695a      	ldr	r2, [r3, #20]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	08db      	lsrs	r3, r3, #3
 800a69c:	f003 0303 	and.w	r3, r3, #3
 800a6a0:	005b      	lsls	r3, r3, #1
 800a6a2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b04      	cmp	r3, #4
 800a6b0:	d022      	beq.n	800a6f8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	6919      	ldr	r1, [r3, #16]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6c2:	f7ff fac3 	bl	8009c4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	6919      	ldr	r1, [r3, #16]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7ff fb0f 	bl	8009cf6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6818      	ldr	r0, [r3, #0]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d102      	bne.n	800a6ee <HAL_ADC_ConfigChannel+0x126>
 800a6e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6ec:	e000      	b.n	800a6f0 <HAL_ADC_ConfigChannel+0x128>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	f7ff fb1b 	bl	8009d2c <LL_ADC_SetOffsetSaturation>
 800a6f6:	e17b      	b.n	800a9f0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff fac8 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a704:	4603      	mov	r3, r0
 800a706:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10a      	bne.n	800a724 <HAL_ADC_ConfigChannel+0x15c>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2100      	movs	r1, #0
 800a714:	4618      	mov	r0, r3
 800a716:	f7ff fabd 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a71a:	4603      	mov	r3, r0
 800a71c:	0e9b      	lsrs	r3, r3, #26
 800a71e:	f003 021f 	and.w	r2, r3, #31
 800a722:	e01e      	b.n	800a762 <HAL_ADC_ConfigChannel+0x19a>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2100      	movs	r1, #0
 800a72a:	4618      	mov	r0, r3
 800a72c:	f7ff fab2 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a730:	4603      	mov	r3, r0
 800a732:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a736:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a73a:	fa93 f3a3 	rbit	r3, r3
 800a73e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a746:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a74a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a752:	2320      	movs	r3, #32
 800a754:	e004      	b.n	800a760 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a75a:	fab3 f383 	clz	r3, r3
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d105      	bne.n	800a77a <HAL_ADC_ConfigChannel+0x1b2>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	0e9b      	lsrs	r3, r3, #26
 800a774:	f003 031f 	and.w	r3, r3, #31
 800a778:	e018      	b.n	800a7ac <HAL_ADC_ConfigChannel+0x1e4>
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a782:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a786:	fa93 f3a3 	rbit	r3, r3
 800a78a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800a78e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800a796:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a79e:	2320      	movs	r3, #32
 800a7a0:	e004      	b.n	800a7ac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a7a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7a6:	fab3 f383 	clz	r3, r3
 800a7aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d106      	bne.n	800a7be <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff fa81 	bl	8009cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2101      	movs	r1, #1
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff fa65 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d10a      	bne.n	800a7ea <HAL_ADC_ConfigChannel+0x222>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	2101      	movs	r1, #1
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7ff fa5a 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	0e9b      	lsrs	r3, r3, #26
 800a7e4:	f003 021f 	and.w	r2, r3, #31
 800a7e8:	e01e      	b.n	800a828 <HAL_ADC_ConfigChannel+0x260>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fa4f 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a800:	fa93 f3a3 	rbit	r3, r3
 800a804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800a808:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a80c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800a810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a814:	2b00      	cmp	r3, #0
 800a816:	d101      	bne.n	800a81c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a818:	2320      	movs	r3, #32
 800a81a:	e004      	b.n	800a826 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a81c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a820:	fab3 f383 	clz	r3, r3
 800a824:	b2db      	uxtb	r3, r3
 800a826:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a830:	2b00      	cmp	r3, #0
 800a832:	d105      	bne.n	800a840 <HAL_ADC_ConfigChannel+0x278>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	0e9b      	lsrs	r3, r3, #26
 800a83a:	f003 031f 	and.w	r3, r3, #31
 800a83e:	e018      	b.n	800a872 <HAL_ADC_ConfigChannel+0x2aa>
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a84c:	fa93 f3a3 	rbit	r3, r3
 800a850:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800a854:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a858:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800a85c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a864:	2320      	movs	r3, #32
 800a866:	e004      	b.n	800a872 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a86c:	fab3 f383 	clz	r3, r3
 800a870:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a872:	429a      	cmp	r2, r3
 800a874:	d106      	bne.n	800a884 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2200      	movs	r2, #0
 800a87c:	2101      	movs	r1, #1
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fa1e 	bl	8009cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2102      	movs	r1, #2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff fa02 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a890:	4603      	mov	r3, r0
 800a892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <HAL_ADC_ConfigChannel+0x2e8>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2102      	movs	r1, #2
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff f9f7 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	0e9b      	lsrs	r3, r3, #26
 800a8aa:	f003 021f 	and.w	r2, r3, #31
 800a8ae:	e01e      	b.n	800a8ee <HAL_ADC_ConfigChannel+0x326>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	2102      	movs	r1, #2
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f7ff f9ec 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8c6:	fa93 f3a3 	rbit	r3, r3
 800a8ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800a8ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800a8d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d101      	bne.n	800a8e2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800a8de:	2320      	movs	r3, #32
 800a8e0:	e004      	b.n	800a8ec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800a8e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8e6:	fab3 f383 	clz	r3, r3
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d105      	bne.n	800a906 <HAL_ADC_ConfigChannel+0x33e>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	0e9b      	lsrs	r3, r3, #26
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	e016      	b.n	800a934 <HAL_ADC_ConfigChannel+0x36c>
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a90e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a912:	fa93 f3a3 	rbit	r3, r3
 800a916:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800a918:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a91a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800a91e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800a926:	2320      	movs	r3, #32
 800a928:	e004      	b.n	800a934 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800a92a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a92e:	fab3 f383 	clz	r3, r3
 800a932:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a934:	429a      	cmp	r2, r3
 800a936:	d106      	bne.n	800a946 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2200      	movs	r2, #0
 800a93e:	2102      	movs	r1, #2
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff f9bd 	bl	8009cc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2103      	movs	r1, #3
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff f9a1 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a952:	4603      	mov	r3, r0
 800a954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <HAL_ADC_ConfigChannel+0x3aa>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2103      	movs	r1, #3
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff f996 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a968:	4603      	mov	r3, r0
 800a96a:	0e9b      	lsrs	r3, r3, #26
 800a96c:	f003 021f 	and.w	r2, r3, #31
 800a970:	e017      	b.n	800a9a2 <HAL_ADC_ConfigChannel+0x3da>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2103      	movs	r1, #3
 800a978:	4618      	mov	r0, r3
 800a97a:	f7ff f98b 	bl	8009c94 <LL_ADC_GetOffsetChannel>
 800a97e:	4603      	mov	r3, r0
 800a980:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a982:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a984:	fa93 f3a3 	rbit	r3, r3
 800a988:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a98a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a98c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a98e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a990:	2b00      	cmp	r3, #0
 800a992:	d101      	bne.n	800a998 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800a994:	2320      	movs	r3, #32
 800a996:	e003      	b.n	800a9a0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800a998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a99a:	fab3 f383 	clz	r3, r3
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d105      	bne.n	800a9ba <HAL_ADC_ConfigChannel+0x3f2>
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	0e9b      	lsrs	r3, r3, #26
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	e011      	b.n	800a9de <HAL_ADC_ConfigChannel+0x416>
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9c2:	fa93 f3a3 	rbit	r3, r3
 800a9c6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a9c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a9cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800a9d2:	2320      	movs	r3, #32
 800a9d4:	e003      	b.n	800a9de <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800a9d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9d8:	fab3 f383 	clz	r3, r3
 800a9dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d106      	bne.n	800a9f0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	2103      	movs	r1, #3
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7ff f968 	bl	8009cc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff fad9 	bl	8009fac <LL_ADC_IsEnabled>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 813d 	bne.w	800ac7c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6818      	ldr	r0, [r3, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6819      	ldr	r1, [r3, #0]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f7ff fa24 	bl	8009e5c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	4aa2      	ldr	r2, [pc, #648]	@ (800aca4 <HAL_ADC_ConfigChannel+0x6dc>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f040 812e 	bne.w	800ac7c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10b      	bne.n	800aa48 <HAL_ADC_ConfigChannel+0x480>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	0e9b      	lsrs	r3, r3, #26
 800aa36:	3301      	adds	r3, #1
 800aa38:	f003 031f 	and.w	r3, r3, #31
 800aa3c:	2b09      	cmp	r3, #9
 800aa3e:	bf94      	ite	ls
 800aa40:	2301      	movls	r3, #1
 800aa42:	2300      	movhi	r3, #0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	e019      	b.n	800aa7c <HAL_ADC_ConfigChannel+0x4b4>
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa50:	fa93 f3a3 	rbit	r3, r3
 800aa54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800aa56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800aa5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800aa60:	2320      	movs	r3, #32
 800aa62:	e003      	b.n	800aa6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800aa64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa66:	fab3 f383 	clz	r3, r3
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2b09      	cmp	r3, #9
 800aa74:	bf94      	ite	ls
 800aa76:	2301      	movls	r3, #1
 800aa78:	2300      	movhi	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d079      	beq.n	800ab74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d107      	bne.n	800aa9c <HAL_ADC_ConfigChannel+0x4d4>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	0e9b      	lsrs	r3, r3, #26
 800aa92:	3301      	adds	r3, #1
 800aa94:	069b      	lsls	r3, r3, #26
 800aa96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa9a:	e015      	b.n	800aac8 <HAL_ADC_ConfigChannel+0x500>
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aaa4:	fa93 f3a3 	rbit	r3, r3
 800aaa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800aaaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aaac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800aaae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d101      	bne.n	800aab8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800aab4:	2320      	movs	r3, #32
 800aab6:	e003      	b.n	800aac0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800aab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaba:	fab3 f383 	clz	r3, r3
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	3301      	adds	r3, #1
 800aac2:	069b      	lsls	r3, r3, #26
 800aac4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d109      	bne.n	800aae8 <HAL_ADC_ConfigChannel+0x520>
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	0e9b      	lsrs	r3, r3, #26
 800aada:	3301      	adds	r3, #1
 800aadc:	f003 031f 	and.w	r3, r3, #31
 800aae0:	2101      	movs	r1, #1
 800aae2:	fa01 f303 	lsl.w	r3, r1, r3
 800aae6:	e017      	b.n	800ab18 <HAL_ADC_ConfigChannel+0x550>
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aaee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaf0:	fa93 f3a3 	rbit	r3, r3
 800aaf4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aaf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aafa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d101      	bne.n	800ab04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800ab00:	2320      	movs	r3, #32
 800ab02:	e003      	b.n	800ab0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800ab04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab06:	fab3 f383 	clz	r3, r3
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	f003 031f 	and.w	r3, r3, #31
 800ab12:	2101      	movs	r1, #1
 800ab14:	fa01 f303 	lsl.w	r3, r1, r3
 800ab18:	ea42 0103 	orr.w	r1, r2, r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10a      	bne.n	800ab3e <HAL_ADC_ConfigChannel+0x576>
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	0e9b      	lsrs	r3, r3, #26
 800ab2e:	3301      	adds	r3, #1
 800ab30:	f003 021f 	and.w	r2, r3, #31
 800ab34:	4613      	mov	r3, r2
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	4413      	add	r3, r2
 800ab3a:	051b      	lsls	r3, r3, #20
 800ab3c:	e018      	b.n	800ab70 <HAL_ADC_ConfigChannel+0x5a8>
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab46:	fa93 f3a3 	rbit	r3, r3
 800ab4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800ab50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d101      	bne.n	800ab5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800ab56:	2320      	movs	r3, #32
 800ab58:	e003      	b.n	800ab62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800ab5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab5c:	fab3 f383 	clz	r3, r3
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	3301      	adds	r3, #1
 800ab64:	f003 021f 	and.w	r2, r3, #31
 800ab68:	4613      	mov	r3, r2
 800ab6a:	005b      	lsls	r3, r3, #1
 800ab6c:	4413      	add	r3, r2
 800ab6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab70:	430b      	orrs	r3, r1
 800ab72:	e07e      	b.n	800ac72 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d107      	bne.n	800ab90 <HAL_ADC_ConfigChannel+0x5c8>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	0e9b      	lsrs	r3, r3, #26
 800ab86:	3301      	adds	r3, #1
 800ab88:	069b      	lsls	r3, r3, #26
 800ab8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab8e:	e015      	b.n	800abbc <HAL_ADC_ConfigChannel+0x5f4>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab98:	fa93 f3a3 	rbit	r3, r3
 800ab9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800ab9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aba0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800aba8:	2320      	movs	r3, #32
 800abaa:	e003      	b.n	800abb4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	fab3 f383 	clz	r3, r3
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	3301      	adds	r3, #1
 800abb6:	069b      	lsls	r3, r3, #26
 800abb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d109      	bne.n	800abdc <HAL_ADC_ConfigChannel+0x614>
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	0e9b      	lsrs	r3, r3, #26
 800abce:	3301      	adds	r3, #1
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	2101      	movs	r1, #1
 800abd6:	fa01 f303 	lsl.w	r3, r1, r3
 800abda:	e017      	b.n	800ac0c <HAL_ADC_ConfigChannel+0x644>
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	fa93 f3a3 	rbit	r3, r3
 800abe8:	61fb      	str	r3, [r7, #28]
  return result;
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800abee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d101      	bne.n	800abf8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800abf4:	2320      	movs	r3, #32
 800abf6:	e003      	b.n	800ac00 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800abf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfa:	fab3 f383 	clz	r3, r3
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	3301      	adds	r3, #1
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	2101      	movs	r1, #1
 800ac08:	fa01 f303 	lsl.w	r3, r1, r3
 800ac0c:	ea42 0103 	orr.w	r1, r2, r3
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d10d      	bne.n	800ac38 <HAL_ADC_ConfigChannel+0x670>
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	0e9b      	lsrs	r3, r3, #26
 800ac22:	3301      	adds	r3, #1
 800ac24:	f003 021f 	and.w	r2, r3, #31
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	3b1e      	subs	r3, #30
 800ac30:	051b      	lsls	r3, r3, #20
 800ac32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ac36:	e01b      	b.n	800ac70 <HAL_ADC_ConfigChannel+0x6a8>
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	fa93 f3a3 	rbit	r3, r3
 800ac44:	613b      	str	r3, [r7, #16]
  return result;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800ac50:	2320      	movs	r3, #32
 800ac52:	e003      	b.n	800ac5c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	fab3 f383 	clz	r3, r3
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	f003 021f 	and.w	r2, r3, #31
 800ac62:	4613      	mov	r3, r2
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4413      	add	r3, r2
 800ac68:	3b1e      	subs	r3, #30
 800ac6a:	051b      	lsls	r3, r3, #20
 800ac6c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac70:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac76:	4619      	mov	r1, r3
 800ac78:	f7ff f8c5 	bl	8009e06 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681a      	ldr	r2, [r3, #0]
 800ac80:	4b09      	ldr	r3, [pc, #36]	@ (800aca8 <HAL_ADC_ConfigChannel+0x6e0>)
 800ac82:	4013      	ands	r3, r2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 80be 	beq.w	800ae06 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac92:	d004      	beq.n	800ac9e <HAL_ADC_ConfigChannel+0x6d6>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a04      	ldr	r2, [pc, #16]	@ (800acac <HAL_ADC_ConfigChannel+0x6e4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d10a      	bne.n	800acb4 <HAL_ADC_ConfigChannel+0x6ec>
 800ac9e:	4b04      	ldr	r3, [pc, #16]	@ (800acb0 <HAL_ADC_ConfigChannel+0x6e8>)
 800aca0:	e009      	b.n	800acb6 <HAL_ADC_ConfigChannel+0x6ee>
 800aca2:	bf00      	nop
 800aca4:	407f0000 	.word	0x407f0000
 800aca8:	80080000 	.word	0x80080000
 800acac:	50000100 	.word	0x50000100
 800acb0:	50000300 	.word	0x50000300
 800acb4:	4b59      	ldr	r3, [pc, #356]	@ (800ae1c <HAL_ADC_ConfigChannel+0x854>)
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7fe ffba 	bl	8009c30 <LL_ADC_GetCommonPathInternalCh>
 800acbc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	4a56      	ldr	r2, [pc, #344]	@ (800ae20 <HAL_ADC_ConfigChannel+0x858>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d004      	beq.n	800acd4 <HAL_ADC_ConfigChannel+0x70c>
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a55      	ldr	r2, [pc, #340]	@ (800ae24 <HAL_ADC_ConfigChannel+0x85c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d13a      	bne.n	800ad4a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800acd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800acd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d134      	bne.n	800ad4a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ace8:	d005      	beq.n	800acf6 <HAL_ADC_ConfigChannel+0x72e>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a4e      	ldr	r2, [pc, #312]	@ (800ae28 <HAL_ADC_ConfigChannel+0x860>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	f040 8085 	bne.w	800ae00 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acfe:	d004      	beq.n	800ad0a <HAL_ADC_ConfigChannel+0x742>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a49      	ldr	r2, [pc, #292]	@ (800ae2c <HAL_ADC_ConfigChannel+0x864>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d101      	bne.n	800ad0e <HAL_ADC_ConfigChannel+0x746>
 800ad0a:	4a49      	ldr	r2, [pc, #292]	@ (800ae30 <HAL_ADC_ConfigChannel+0x868>)
 800ad0c:	e000      	b.n	800ad10 <HAL_ADC_ConfigChannel+0x748>
 800ad0e:	4a43      	ldr	r2, [pc, #268]	@ (800ae1c <HAL_ADC_ConfigChannel+0x854>)
 800ad10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad14:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fe ff75 	bl	8009c0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad20:	4b44      	ldr	r3, [pc, #272]	@ (800ae34 <HAL_ADC_ConfigChannel+0x86c>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	099b      	lsrs	r3, r3, #6
 800ad26:	4a44      	ldr	r2, [pc, #272]	@ (800ae38 <HAL_ADC_ConfigChannel+0x870>)
 800ad28:	fba2 2303 	umull	r2, r3, r2, r3
 800ad2c:	099b      	lsrs	r3, r3, #6
 800ad2e:	1c5a      	adds	r2, r3, #1
 800ad30:	4613      	mov	r3, r2
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	4413      	add	r3, r2
 800ad36:	009b      	lsls	r3, r3, #2
 800ad38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ad3a:	e002      	b.n	800ad42 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1f9      	bne.n	800ad3c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ad48:	e05a      	b.n	800ae00 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a3b      	ldr	r2, [pc, #236]	@ (800ae3c <HAL_ADC_ConfigChannel+0x874>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d125      	bne.n	800ada0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ad54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11f      	bne.n	800ada0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a31      	ldr	r2, [pc, #196]	@ (800ae2c <HAL_ADC_ConfigChannel+0x864>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d104      	bne.n	800ad74 <HAL_ADC_ConfigChannel+0x7ac>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a34      	ldr	r2, [pc, #208]	@ (800ae40 <HAL_ADC_ConfigChannel+0x878>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d047      	beq.n	800ae04 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad7c:	d004      	beq.n	800ad88 <HAL_ADC_ConfigChannel+0x7c0>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a2a      	ldr	r2, [pc, #168]	@ (800ae2c <HAL_ADC_ConfigChannel+0x864>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d101      	bne.n	800ad8c <HAL_ADC_ConfigChannel+0x7c4>
 800ad88:	4a29      	ldr	r2, [pc, #164]	@ (800ae30 <HAL_ADC_ConfigChannel+0x868>)
 800ad8a:	e000      	b.n	800ad8e <HAL_ADC_ConfigChannel+0x7c6>
 800ad8c:	4a23      	ldr	r2, [pc, #140]	@ (800ae1c <HAL_ADC_ConfigChannel+0x854>)
 800ad8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7fe ff36 	bl	8009c0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ad9e:	e031      	b.n	800ae04 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a27      	ldr	r2, [pc, #156]	@ (800ae44 <HAL_ADC_ConfigChannel+0x87c>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d12d      	bne.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800adaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d127      	bne.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a1c      	ldr	r2, [pc, #112]	@ (800ae2c <HAL_ADC_ConfigChannel+0x864>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d022      	beq.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adc8:	d004      	beq.n	800add4 <HAL_ADC_ConfigChannel+0x80c>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a17      	ldr	r2, [pc, #92]	@ (800ae2c <HAL_ADC_ConfigChannel+0x864>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d101      	bne.n	800add8 <HAL_ADC_ConfigChannel+0x810>
 800add4:	4a16      	ldr	r2, [pc, #88]	@ (800ae30 <HAL_ADC_ConfigChannel+0x868>)
 800add6:	e000      	b.n	800adda <HAL_ADC_ConfigChannel+0x812>
 800add8:	4a10      	ldr	r2, [pc, #64]	@ (800ae1c <HAL_ADC_ConfigChannel+0x854>)
 800adda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adde:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ade2:	4619      	mov	r1, r3
 800ade4:	4610      	mov	r0, r2
 800ade6:	f7fe ff10 	bl	8009c0a <LL_ADC_SetCommonPathInternalCh>
 800adea:	e00c      	b.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adf0:	f043 0220 	orr.w	r2, r3, #32
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800adfe:	e002      	b.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae00:	bf00      	nop
 800ae02:	e000      	b.n	800ae06 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ae04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800ae0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	37d8      	adds	r7, #216	@ 0xd8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	50000700 	.word	0x50000700
 800ae20:	c3210000 	.word	0xc3210000
 800ae24:	90c00010 	.word	0x90c00010
 800ae28:	50000600 	.word	0x50000600
 800ae2c:	50000100 	.word	0x50000100
 800ae30:	50000300 	.word	0x50000300
 800ae34:	20000138 	.word	0x20000138
 800ae38:	053e2d63 	.word	0x053e2d63
 800ae3c:	c7520000 	.word	0xc7520000
 800ae40:	50000500 	.word	0x50000500
 800ae44:	cb840000 	.word	0xcb840000

0800ae48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ae50:	2300      	movs	r3, #0
 800ae52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff f8a7 	bl	8009fac <LL_ADC_IsEnabled>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d176      	bne.n	800af52 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	4b3c      	ldr	r3, [pc, #240]	@ (800af5c <ADC_Enable+0x114>)
 800ae6c:	4013      	ands	r3, r2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d00d      	beq.n	800ae8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae76:	f043 0210 	orr.w	r2, r3, #16
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae82:	f043 0201 	orr.w	r2, r3, #1
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	e062      	b.n	800af54 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7ff f862 	bl	8009f5c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aea0:	d004      	beq.n	800aeac <ADC_Enable+0x64>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a2e      	ldr	r2, [pc, #184]	@ (800af60 <ADC_Enable+0x118>)
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d101      	bne.n	800aeb0 <ADC_Enable+0x68>
 800aeac:	4b2d      	ldr	r3, [pc, #180]	@ (800af64 <ADC_Enable+0x11c>)
 800aeae:	e000      	b.n	800aeb2 <ADC_Enable+0x6a>
 800aeb0:	4b2d      	ldr	r3, [pc, #180]	@ (800af68 <ADC_Enable+0x120>)
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fe febc 	bl	8009c30 <LL_ADC_GetCommonPathInternalCh>
 800aeb8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800aeba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d013      	beq.n	800aeea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aec2:	4b2a      	ldr	r3, [pc, #168]	@ (800af6c <ADC_Enable+0x124>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	099b      	lsrs	r3, r3, #6
 800aec8:	4a29      	ldr	r2, [pc, #164]	@ (800af70 <ADC_Enable+0x128>)
 800aeca:	fba2 2303 	umull	r2, r3, r2, r3
 800aece:	099b      	lsrs	r3, r3, #6
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	4613      	mov	r3, r2
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aedc:	e002      	b.n	800aee4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d1f9      	bne.n	800aede <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aeea:	f7fe fe6f 	bl	8009bcc <HAL_GetTick>
 800aeee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aef0:	e028      	b.n	800af44 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff f858 	bl	8009fac <LL_ADC_IsEnabled>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d104      	bne.n	800af0c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff f828 	bl	8009f5c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800af0c:	f7fe fe5e 	bl	8009bcc <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d914      	bls.n	800af44 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b01      	cmp	r3, #1
 800af26:	d00d      	beq.n	800af44 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af2c:	f043 0210 	orr.w	r2, r3, #16
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af38:	f043 0201 	orr.w	r2, r3, #1
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e007      	b.n	800af54 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d1cf      	bne.n	800aef2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	8000003f 	.word	0x8000003f
 800af60:	50000100 	.word	0x50000100
 800af64:	50000300 	.word	0x50000300
 800af68:	50000700 	.word	0x50000700
 800af6c:	20000138 	.word	0x20000138
 800af70:	053e2d63 	.word	0x053e2d63

0800af74 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b084      	sub	sp, #16
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f7ff f826 	bl	8009fd2 <LL_ADC_IsDisableOngoing>
 800af86:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7ff f80d 	bl	8009fac <LL_ADC_IsEnabled>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d047      	beq.n	800b028 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d144      	bne.n	800b028 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f003 030d 	and.w	r3, r3, #13
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d10c      	bne.n	800afc6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4618      	mov	r0, r3
 800afb2:	f7fe ffe7 	bl	8009f84 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2203      	movs	r2, #3
 800afbc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800afbe:	f7fe fe05 	bl	8009bcc <HAL_GetTick>
 800afc2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800afc4:	e029      	b.n	800b01a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afca:	f043 0210 	orr.w	r2, r3, #16
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afd6:	f043 0201 	orr.w	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e023      	b.n	800b02a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800afe2:	f7fe fdf3 	bl	8009bcc <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b02      	cmp	r3, #2
 800afee:	d914      	bls.n	800b01a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00d      	beq.n	800b01a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b002:	f043 0210 	orr.w	r2, r3, #16
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b00e:	f043 0201 	orr.w	r2, r3, #1
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e007      	b.n	800b02a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f003 0301 	and.w	r3, r3, #1
 800b024:	2b00      	cmp	r3, #0
 800b026:	d1dc      	bne.n	800afe2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b028:	2300      	movs	r3, #0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b044:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d14b      	bne.n	800b0e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b050:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f003 0308 	and.w	r3, r3, #8
 800b062:	2b00      	cmp	r3, #0
 800b064:	d021      	beq.n	800b0aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7fe fe8c 	bl	8009d88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d032      	beq.n	800b0dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b080:	2b00      	cmp	r3, #0
 800b082:	d12b      	bne.n	800b0dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b088:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b094:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d11f      	bne.n	800b0dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0a0:	f043 0201 	orr.w	r2, r3, #1
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b0a8:	e018      	b.n	800b0dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f003 0302 	and.w	r3, r3, #2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d111      	bne.n	800b0dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d105      	bne.n	800b0dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0d4:	f043 0201 	orr.w	r2, r3, #1
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7ff fa55 	bl	800a58c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b0e2:	e00e      	b.n	800b102 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0e8:	f003 0310 	and.w	r3, r3, #16
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d003      	beq.n	800b0f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff fa5f 	bl	800a5b4 <HAL_ADC_ErrorCallback>
}
 800b0f6:	e004      	b.n	800b102 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	4798      	blx	r3
}
 800b102:	bf00      	nop
 800b104:	3710      	adds	r7, #16
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b084      	sub	sp, #16
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b116:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b118:	68f8      	ldr	r0, [r7, #12]
 800b11a:	f7ff fa41 	bl	800a5a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b11e:	bf00      	nop
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b132:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b138:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b144:	f043 0204 	orr.w	r2, r3, #4
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f7ff fa31 	bl	800a5b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b152:	bf00      	nop
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}

0800b15a <LL_ADC_IsEnabled>:
{
 800b15a:	b480      	push	{r7}
 800b15c:	b083      	sub	sp, #12
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d101      	bne.n	800b172 <LL_ADC_IsEnabled+0x18>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <LL_ADC_IsEnabled+0x1a>
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <LL_ADC_StartCalibration>:
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b192:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	609a      	str	r2, [r3, #8]
}
 800b1a6:	bf00      	nop
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <LL_ADC_IsCalibrationOnGoing>:
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1c6:	d101      	bne.n	800b1cc <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e000      	b.n	800b1ce <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <LL_ADC_REG_IsConversionOngoing>:
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b083      	sub	sp, #12
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f003 0304 	and.w	r3, r3, #4
 800b1ea:	2b04      	cmp	r3, #4
 800b1ec:	d101      	bne.n	800b1f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e000      	b.n	800b1f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	370c      	adds	r7, #12
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr

0800b200 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b20a:	2300      	movs	r3, #0
 800b20c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <HAL_ADCEx_Calibration_Start+0x1c>
 800b218:	2302      	movs	r3, #2
 800b21a:	e04d      	b.n	800b2b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f7ff fea5 	bl	800af74 <ADC_Disable>
 800b22a:	4603      	mov	r3, r0
 800b22c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b22e:	7bfb      	ldrb	r3, [r7, #15]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d136      	bne.n	800b2a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b238:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b23c:	f023 0302 	bic.w	r3, r3, #2
 800b240:	f043 0202 	orr.w	r2, r3, #2
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6839      	ldr	r1, [r7, #0]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff ff96 	bl	800b180 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b254:	e014      	b.n	800b280 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	3301      	adds	r3, #1
 800b25a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	4a18      	ldr	r2, [pc, #96]	@ (800b2c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d90d      	bls.n	800b280 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b268:	f023 0312 	bic.w	r3, r3, #18
 800b26c:	f043 0210 	orr.w	r2, r3, #16
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800b27c:	2301      	movs	r3, #1
 800b27e:	e01b      	b.n	800b2b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4618      	mov	r0, r3
 800b286:	f7ff ff94 	bl	800b1b2 <LL_ADC_IsCalibrationOnGoing>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d1e2      	bne.n	800b256 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b294:	f023 0303 	bic.w	r3, r3, #3
 800b298:	f043 0201 	orr.w	r2, r3, #1
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b2a0:	e005      	b.n	800b2ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2a6:	f043 0210 	orr.w	r2, r3, #16
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b2b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}
 800b2c0:	0004de01 	.word	0x0004de01

0800b2c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b2c4:	b590      	push	{r4, r7, lr}
 800b2c6:	b0a1      	sub	sp, #132	@ 0x84
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	d101      	bne.n	800b2e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e0e7      	b.n	800b4b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2fa:	d102      	bne.n	800b302 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b2fc:	4b6f      	ldr	r3, [pc, #444]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b2fe:	60bb      	str	r3, [r7, #8]
 800b300:	e009      	b.n	800b316 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a6e      	ldr	r2, [pc, #440]	@ (800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d102      	bne.n	800b312 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b30c:	4b6d      	ldr	r3, [pc, #436]	@ (800b4c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b30e:	60bb      	str	r3, [r7, #8]
 800b310:	e001      	b.n	800b316 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b312:	2300      	movs	r3, #0
 800b314:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10b      	bne.n	800b334 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b320:	f043 0220 	orr.w	r2, r3, #32
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e0be      	b.n	800b4b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4618      	mov	r0, r3
 800b338:	f7ff ff4f 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b33c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4618      	mov	r0, r3
 800b344:	f7ff ff49 	bl	800b1da <LL_ADC_REG_IsConversionOngoing>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f040 80a0 	bne.w	800b490 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b350:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 809c 	bne.w	800b490 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b360:	d004      	beq.n	800b36c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a55      	ldr	r2, [pc, #340]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d101      	bne.n	800b370 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b36c:	4b56      	ldr	r3, [pc, #344]	@ (800b4c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b36e:	e000      	b.n	800b372 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b370:	4b56      	ldr	r3, [pc, #344]	@ (800b4cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b372:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d04b      	beq.n	800b414 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b37c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	6859      	ldr	r1, [r3, #4]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b38e:	035b      	lsls	r3, r3, #13
 800b390:	430b      	orrs	r3, r1
 800b392:	431a      	orrs	r2, r3
 800b394:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b396:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b3a0:	d004      	beq.n	800b3ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a45      	ldr	r2, [pc, #276]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d10f      	bne.n	800b3cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b3ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b3b0:	f7ff fed3 	bl	800b15a <LL_ADC_IsEnabled>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	4841      	ldr	r0, [pc, #260]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b3b8:	f7ff fecf 	bl	800b15a <LL_ADC_IsEnabled>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	4323      	orrs	r3, r4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bf0c      	ite	eq
 800b3c4:	2301      	moveq	r3, #1
 800b3c6:	2300      	movne	r3, #0
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	e012      	b.n	800b3f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b3cc:	483c      	ldr	r0, [pc, #240]	@ (800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b3ce:	f7ff fec4 	bl	800b15a <LL_ADC_IsEnabled>
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	483b      	ldr	r0, [pc, #236]	@ (800b4c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b3d6:	f7ff fec0 	bl	800b15a <LL_ADC_IsEnabled>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	431c      	orrs	r4, r3
 800b3de:	483c      	ldr	r0, [pc, #240]	@ (800b4d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b3e0:	f7ff febb 	bl	800b15a <LL_ADC_IsEnabled>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	4323      	orrs	r3, r4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	bf0c      	ite	eq
 800b3ec:	2301      	moveq	r3, #1
 800b3ee:	2300      	movne	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d056      	beq.n	800b4a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b3f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3f8:	689b      	ldr	r3, [r3, #8]
 800b3fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b3fe:	f023 030f 	bic.w	r3, r3, #15
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	6811      	ldr	r1, [r2, #0]
 800b406:	683a      	ldr	r2, [r7, #0]
 800b408:	6892      	ldr	r2, [r2, #8]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	431a      	orrs	r2, r3
 800b40e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b410:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b412:	e047      	b.n	800b4a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b41c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b41e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b428:	d004      	beq.n	800b434 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a23      	ldr	r2, [pc, #140]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d10f      	bne.n	800b454 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b434:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b438:	f7ff fe8f 	bl	800b15a <LL_ADC_IsEnabled>
 800b43c:	4604      	mov	r4, r0
 800b43e:	481f      	ldr	r0, [pc, #124]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b440:	f7ff fe8b 	bl	800b15a <LL_ADC_IsEnabled>
 800b444:	4603      	mov	r3, r0
 800b446:	4323      	orrs	r3, r4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	bf0c      	ite	eq
 800b44c:	2301      	moveq	r3, #1
 800b44e:	2300      	movne	r3, #0
 800b450:	b2db      	uxtb	r3, r3
 800b452:	e012      	b.n	800b47a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b454:	481a      	ldr	r0, [pc, #104]	@ (800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b456:	f7ff fe80 	bl	800b15a <LL_ADC_IsEnabled>
 800b45a:	4604      	mov	r4, r0
 800b45c:	4819      	ldr	r0, [pc, #100]	@ (800b4c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b45e:	f7ff fe7c 	bl	800b15a <LL_ADC_IsEnabled>
 800b462:	4603      	mov	r3, r0
 800b464:	431c      	orrs	r4, r3
 800b466:	481a      	ldr	r0, [pc, #104]	@ (800b4d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b468:	f7ff fe77 	bl	800b15a <LL_ADC_IsEnabled>
 800b46c:	4603      	mov	r3, r0
 800b46e:	4323      	orrs	r3, r4
 800b470:	2b00      	cmp	r3, #0
 800b472:	bf0c      	ite	eq
 800b474:	2301      	moveq	r3, #1
 800b476:	2300      	movne	r3, #0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d012      	beq.n	800b4a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b47e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b486:	f023 030f 	bic.w	r3, r3, #15
 800b48a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b48c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b48e:	e009      	b.n	800b4a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b494:	f043 0220 	orr.w	r2, r3, #32
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b4a2:	e000      	b.n	800b4a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b4a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b4ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	3784      	adds	r7, #132	@ 0x84
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd90      	pop	{r4, r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	50000100 	.word	0x50000100
 800b4c0:	50000400 	.word	0x50000400
 800b4c4:	50000500 	.word	0x50000500
 800b4c8:	50000300 	.word	0x50000300
 800b4cc:	50000700 	.word	0x50000700
 800b4d0:	50000600 	.word	0x50000600

0800b4d4 <__NVIC_SetPriorityGrouping>:
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b085      	sub	sp, #20
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b518 <__NVIC_SetPriorityGrouping+0x44>)
 800b4e6:	68db      	ldr	r3, [r3, #12]
 800b4e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b4fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b500:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b506:	4a04      	ldr	r2, [pc, #16]	@ (800b518 <__NVIC_SetPriorityGrouping+0x44>)
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	60d3      	str	r3, [r2, #12]
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	e000ed00 	.word	0xe000ed00

0800b51c <__NVIC_GetPriorityGrouping>:
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b520:	4b04      	ldr	r3, [pc, #16]	@ (800b534 <__NVIC_GetPriorityGrouping+0x18>)
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	0a1b      	lsrs	r3, r3, #8
 800b526:	f003 0307 	and.w	r3, r3, #7
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	e000ed00 	.word	0xe000ed00

0800b538 <__NVIC_EnableIRQ>:
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	4603      	mov	r3, r0
 800b540:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b546:	2b00      	cmp	r3, #0
 800b548:	db0b      	blt.n	800b562 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b54a:	79fb      	ldrb	r3, [r7, #7]
 800b54c:	f003 021f 	and.w	r2, r3, #31
 800b550:	4907      	ldr	r1, [pc, #28]	@ (800b570 <__NVIC_EnableIRQ+0x38>)
 800b552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b556:	095b      	lsrs	r3, r3, #5
 800b558:	2001      	movs	r0, #1
 800b55a:	fa00 f202 	lsl.w	r2, r0, r2
 800b55e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b562:	bf00      	nop
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	e000e100 	.word	0xe000e100

0800b574 <__NVIC_SetPriority>:
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b584:	2b00      	cmp	r3, #0
 800b586:	db0a      	blt.n	800b59e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	490c      	ldr	r1, [pc, #48]	@ (800b5c0 <__NVIC_SetPriority+0x4c>)
 800b58e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b592:	0112      	lsls	r2, r2, #4
 800b594:	b2d2      	uxtb	r2, r2
 800b596:	440b      	add	r3, r1
 800b598:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b59c:	e00a      	b.n	800b5b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	4908      	ldr	r1, [pc, #32]	@ (800b5c4 <__NVIC_SetPriority+0x50>)
 800b5a4:	79fb      	ldrb	r3, [r7, #7]
 800b5a6:	f003 030f 	and.w	r3, r3, #15
 800b5aa:	3b04      	subs	r3, #4
 800b5ac:	0112      	lsls	r2, r2, #4
 800b5ae:	b2d2      	uxtb	r2, r2
 800b5b0:	440b      	add	r3, r1
 800b5b2:	761a      	strb	r2, [r3, #24]
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	e000e100 	.word	0xe000e100
 800b5c4:	e000ed00 	.word	0xe000ed00

0800b5c8 <NVIC_EncodePriority>:
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b089      	sub	sp, #36	@ 0x24
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f003 0307 	and.w	r3, r3, #7
 800b5da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	f1c3 0307 	rsb	r3, r3, #7
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	bf28      	it	cs
 800b5e6:	2304      	movcs	r3, #4
 800b5e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5ea:	69fb      	ldr	r3, [r7, #28]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	2b06      	cmp	r3, #6
 800b5f0:	d902      	bls.n	800b5f8 <NVIC_EncodePriority+0x30>
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	3b03      	subs	r3, #3
 800b5f6:	e000      	b.n	800b5fa <NVIC_EncodePriority+0x32>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	fa02 f303 	lsl.w	r3, r2, r3
 800b606:	43da      	mvns	r2, r3
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	401a      	ands	r2, r3
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b610:	f04f 31ff 	mov.w	r1, #4294967295
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	fa01 f303 	lsl.w	r3, r1, r3
 800b61a:	43d9      	mvns	r1, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b620:	4313      	orrs	r3, r2
}
 800b622:	4618      	mov	r0, r3
 800b624:	3724      	adds	r7, #36	@ 0x24
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b640:	d301      	bcc.n	800b646 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b642:	2301      	movs	r3, #1
 800b644:	e00f      	b.n	800b666 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b646:	4a0a      	ldr	r2, [pc, #40]	@ (800b670 <SysTick_Config+0x40>)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b64e:	210f      	movs	r1, #15
 800b650:	f04f 30ff 	mov.w	r0, #4294967295
 800b654:	f7ff ff8e 	bl	800b574 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b658:	4b05      	ldr	r3, [pc, #20]	@ (800b670 <SysTick_Config+0x40>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b65e:	4b04      	ldr	r3, [pc, #16]	@ (800b670 <SysTick_Config+0x40>)
 800b660:	2207      	movs	r2, #7
 800b662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	e000e010 	.word	0xe000e010

0800b674 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7ff ff29 	bl	800b4d4 <__NVIC_SetPriorityGrouping>
}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b086      	sub	sp, #24
 800b68e:	af00      	add	r7, sp, #0
 800b690:	4603      	mov	r3, r0
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b698:	f7ff ff40 	bl	800b51c <__NVIC_GetPriorityGrouping>
 800b69c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b69e:	687a      	ldr	r2, [r7, #4]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	6978      	ldr	r0, [r7, #20]
 800b6a4:	f7ff ff90 	bl	800b5c8 <NVIC_EncodePriority>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ae:	4611      	mov	r1, r2
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f7ff ff5f 	bl	800b574 <__NVIC_SetPriority>
}
 800b6b6:	bf00      	nop
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7ff ff33 	bl	800b538 <__NVIC_EnableIRQ>
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ffa4 	bl	800b630 <SysTick_Config>
 800b6e8:	4603      	mov	r3, r0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d101      	bne.n	800b706 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b702:	2301      	movs	r3, #1
 800b704:	e08d      	b.n	800b822 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	461a      	mov	r2, r3
 800b70c:	4b47      	ldr	r3, [pc, #284]	@ (800b82c <HAL_DMA_Init+0x138>)
 800b70e:	429a      	cmp	r2, r3
 800b710:	d80f      	bhi.n	800b732 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	4b45      	ldr	r3, [pc, #276]	@ (800b830 <HAL_DMA_Init+0x13c>)
 800b71a:	4413      	add	r3, r2
 800b71c:	4a45      	ldr	r2, [pc, #276]	@ (800b834 <HAL_DMA_Init+0x140>)
 800b71e:	fba2 2303 	umull	r2, r3, r2, r3
 800b722:	091b      	lsrs	r3, r3, #4
 800b724:	009a      	lsls	r2, r3, #2
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a42      	ldr	r2, [pc, #264]	@ (800b838 <HAL_DMA_Init+0x144>)
 800b72e:	641a      	str	r2, [r3, #64]	@ 0x40
 800b730:	e00e      	b.n	800b750 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	4b40      	ldr	r3, [pc, #256]	@ (800b83c <HAL_DMA_Init+0x148>)
 800b73a:	4413      	add	r3, r2
 800b73c:	4a3d      	ldr	r2, [pc, #244]	@ (800b834 <HAL_DMA_Init+0x140>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	091b      	lsrs	r3, r3, #4
 800b744:	009a      	lsls	r2, r3, #2
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a3c      	ldr	r2, [pc, #240]	@ (800b840 <HAL_DMA_Init+0x14c>)
 800b74e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2202      	movs	r2, #2
 800b754:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b76a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	699b      	ldr	r3, [r3, #24]
 800b786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b78c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fa76 	bl	800bc94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	689b      	ldr	r3, [r3, #8]
 800b7ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7b0:	d102      	bne.n	800b7b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7c0:	b2d2      	uxtb	r2, r2
 800b7c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b7cc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d010      	beq.n	800b7f8 <HAL_DMA_Init+0x104>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d80c      	bhi.n	800b7f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fa96 	bl	800bd10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b7f4:	605a      	str	r2, [r3, #4]
 800b7f6:	e008      	b.n	800b80a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	40020407 	.word	0x40020407
 800b830:	bffdfff8 	.word	0xbffdfff8
 800b834:	cccccccd 	.word	0xcccccccd
 800b838:	40020000 	.word	0x40020000
 800b83c:	bffdfbf8 	.word	0xbffdfbf8
 800b840:	40020400 	.word	0x40020400

0800b844 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b086      	sub	sp, #24
 800b848:	af00      	add	r7, sp, #0
 800b84a:	60f8      	str	r0, [r7, #12]
 800b84c:	60b9      	str	r1, [r7, #8]
 800b84e:	607a      	str	r2, [r7, #4]
 800b850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d101      	bne.n	800b864 <HAL_DMA_Start_IT+0x20>
 800b860:	2302      	movs	r3, #2
 800b862:	e066      	b.n	800b932 <HAL_DMA_Start_IT+0xee>
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b872:	b2db      	uxtb	r3, r3
 800b874:	2b01      	cmp	r3, #1
 800b876:	d155      	bne.n	800b924 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2202      	movs	r2, #2
 800b87c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2200      	movs	r2, #0
 800b884:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f022 0201 	bic.w	r2, r2, #1
 800b894:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f9bb 	bl	800bc18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d008      	beq.n	800b8bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	681a      	ldr	r2, [r3, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f042 020e 	orr.w	r2, r2, #14
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e00f      	b.n	800b8dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0204 	bic.w	r2, r2, #4
 800b8ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f042 020a 	orr.w	r2, r2, #10
 800b8da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d007      	beq.n	800b8fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8ee:	681a      	ldr	r2, [r3, #0]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8f8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d007      	beq.n	800b912 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b90c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b910:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f042 0201 	orr.w	r2, r2, #1
 800b920:	601a      	str	r2, [r3, #0]
 800b922:	e005      	b.n	800b930 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b92c:	2302      	movs	r3, #2
 800b92e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b93a:	b480      	push	{r7}
 800b93c:	b085      	sub	sp, #20
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b02      	cmp	r3, #2
 800b950:	d005      	beq.n	800b95e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2204      	movs	r2, #4
 800b956:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	73fb      	strb	r3, [r7, #15]
 800b95c:	e037      	b.n	800b9ce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f022 020e 	bic.w	r2, r2, #14
 800b96c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b978:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b97c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 0201 	bic.w	r2, r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b992:	f003 021f 	and.w	r2, r3, #31
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b99a:	2101      	movs	r1, #1
 800b99c:	fa01 f202 	lsl.w	r2, r1, r2
 800b9a0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b9aa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00c      	beq.n	800b9ce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9c2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b9cc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b9fe:	b2db      	uxtb	r3, r3
 800ba00:	2b02      	cmp	r3, #2
 800ba02:	d00d      	beq.n	800ba20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2204      	movs	r2, #4
 800ba08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	73fb      	strb	r3, [r7, #15]
 800ba1e:	e047      	b.n	800bab0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 020e 	bic.w	r2, r2, #14
 800ba2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0201 	bic.w	r2, r2, #1
 800ba3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba54:	f003 021f 	and.w	r2, r3, #31
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ba6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d00c      	beq.n	800ba90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ba8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d003      	beq.n	800bab0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3
    }
  }
  return status;
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bad6:	f003 031f 	and.w	r3, r3, #31
 800bada:	2204      	movs	r2, #4
 800badc:	409a      	lsls	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	4013      	ands	r3, r2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d026      	beq.n	800bb34 <HAL_DMA_IRQHandler+0x7a>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	f003 0304 	and.w	r3, r3, #4
 800baec:	2b00      	cmp	r3, #0
 800baee:	d021      	beq.n	800bb34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f003 0320 	and.w	r3, r3, #32
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d107      	bne.n	800bb0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f022 0204 	bic.w	r2, r2, #4
 800bb0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb12:	f003 021f 	and.w	r2, r3, #31
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1a:	2104      	movs	r1, #4
 800bb1c:	fa01 f202 	lsl.w	r2, r1, r2
 800bb20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d071      	beq.n	800bc0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bb32:	e06c      	b.n	800bc0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb38:	f003 031f 	and.w	r3, r3, #31
 800bb3c:	2202      	movs	r2, #2
 800bb3e:	409a      	lsls	r2, r3
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	4013      	ands	r3, r2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d02e      	beq.n	800bba6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f003 0302 	and.w	r3, r3, #2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d029      	beq.n	800bba6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f003 0320 	and.w	r3, r3, #32
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10b      	bne.n	800bb78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 020a 	bic.w	r2, r2, #10
 800bb6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb7c:	f003 021f 	and.w	r2, r3, #31
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb84:	2102      	movs	r1, #2
 800bb86:	fa01 f202 	lsl.w	r2, r1, r2
 800bb8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d038      	beq.n	800bc0e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bba4:	e033      	b.n	800bc0e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbaa:	f003 031f 	and.w	r3, r3, #31
 800bbae:	2208      	movs	r2, #8
 800bbb0:	409a      	lsls	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d02a      	beq.n	800bc10 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	f003 0308 	and.w	r3, r3, #8
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d025      	beq.n	800bc10 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f022 020e 	bic.w	r2, r2, #14
 800bbd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbd8:	f003 021f 	and.w	r2, r3, #31
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbe0:	2101      	movs	r1, #1
 800bbe2:	fa01 f202 	lsl.w	r2, r1, r2
 800bbe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d004      	beq.n	800bc10 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bc0e:	bf00      	nop
 800bc10:	bf00      	nop
}
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bc2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bc40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc46:	f003 021f 	and.w	r2, r3, #31
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc4e:	2101      	movs	r1, #1
 800bc50:	fa01 f202 	lsl.w	r2, r1, r2
 800bc54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	2b10      	cmp	r3, #16
 800bc64:	d108      	bne.n	800bc78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bc76:	e007      	b.n	800bc88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	60da      	str	r2, [r3, #12]
}
 800bc88:	bf00      	nop
 800bc8a:	3714      	adds	r7, #20
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b16      	ldr	r3, [pc, #88]	@ (800bcfc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d802      	bhi.n	800bcae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bca8:	4b15      	ldr	r3, [pc, #84]	@ (800bd00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bcaa:	617b      	str	r3, [r7, #20]
 800bcac:	e001      	b.n	800bcb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bcae:	4b15      	ldr	r3, [pc, #84]	@ (800bd04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bcb0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	3b08      	subs	r3, #8
 800bcbe:	4a12      	ldr	r2, [pc, #72]	@ (800bd08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bcc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc4:	091b      	lsrs	r3, r3, #4
 800bcc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bccc:	089b      	lsrs	r3, r3, #2
 800bcce:	009a      	lsls	r2, r3, #2
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a0b      	ldr	r2, [pc, #44]	@ (800bd0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bcde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f003 031f 	and.w	r3, r3, #31
 800bce6:	2201      	movs	r2, #1
 800bce8:	409a      	lsls	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800bcee:	bf00      	nop
 800bcf0:	371c      	adds	r7, #28
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	40020407 	.word	0x40020407
 800bd00:	40020800 	.word	0x40020800
 800bd04:	40020820 	.word	0x40020820
 800bd08:	cccccccd 	.word	0xcccccccd
 800bd0c:	40020880 	.word	0x40020880

0800bd10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4b0b      	ldr	r3, [pc, #44]	@ (800bd50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	461a      	mov	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a08      	ldr	r2, [pc, #32]	@ (800bd54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bd32:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	f003 031f 	and.w	r3, r3, #31
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	409a      	lsls	r2, r3
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800bd44:	bf00      	nop
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr
 800bd50:	1000823f 	.word	0x1000823f
 800bd54:	40020940 	.word	0x40020940

0800bd58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b087      	sub	sp, #28
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bd66:	e15a      	b.n	800c01e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	2101      	movs	r1, #1
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	fa01 f303 	lsl.w	r3, r1, r3
 800bd74:	4013      	ands	r3, r2
 800bd76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f000 814c 	beq.w	800c018 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	f003 0303 	and.w	r3, r3, #3
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d005      	beq.n	800bd98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d130      	bne.n	800bdfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	689b      	ldr	r3, [r3, #8]
 800bd9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	005b      	lsls	r3, r3, #1
 800bda2:	2203      	movs	r2, #3
 800bda4:	fa02 f303 	lsl.w	r3, r2, r3
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	4013      	ands	r3, r2
 800bdae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	005b      	lsls	r3, r3, #1
 800bdb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	685b      	ldr	r3, [r3, #4]
 800bdcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdce:	2201      	movs	r2, #1
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdd6:	43db      	mvns	r3, r3
 800bdd8:	693a      	ldr	r2, [r7, #16]
 800bdda:	4013      	ands	r3, r2
 800bddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	091b      	lsrs	r3, r3, #4
 800bde4:	f003 0201 	and.w	r2, r3, #1
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	fa02 f303 	lsl.w	r3, r2, r3
 800bdee:	693a      	ldr	r2, [r7, #16]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f003 0303 	and.w	r3, r3, #3
 800be02:	2b03      	cmp	r3, #3
 800be04:	d017      	beq.n	800be36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	005b      	lsls	r3, r3, #1
 800be10:	2203      	movs	r2, #3
 800be12:	fa02 f303 	lsl.w	r3, r2, r3
 800be16:	43db      	mvns	r3, r3
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	4013      	ands	r3, r2
 800be1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	689a      	ldr	r2, [r3, #8]
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	005b      	lsls	r3, r3, #1
 800be26:	fa02 f303 	lsl.w	r3, r2, r3
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	f003 0303 	and.w	r3, r3, #3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d123      	bne.n	800be8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	08da      	lsrs	r2, r3, #3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3208      	adds	r2, #8
 800be4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f003 0307 	and.w	r3, r3, #7
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	220f      	movs	r2, #15
 800be5a:	fa02 f303 	lsl.w	r3, r2, r3
 800be5e:	43db      	mvns	r3, r3
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	4013      	ands	r3, r2
 800be64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	691a      	ldr	r2, [r3, #16]
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	f003 0307 	and.w	r3, r3, #7
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	fa02 f303 	lsl.w	r3, r2, r3
 800be76:	693a      	ldr	r2, [r7, #16]
 800be78:	4313      	orrs	r3, r2
 800be7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	08da      	lsrs	r2, r3, #3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	3208      	adds	r2, #8
 800be84:	6939      	ldr	r1, [r7, #16]
 800be86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	2203      	movs	r2, #3
 800be96:	fa02 f303 	lsl.w	r3, r2, r3
 800be9a:	43db      	mvns	r3, r3
 800be9c:	693a      	ldr	r2, [r7, #16]
 800be9e:	4013      	ands	r3, r2
 800bea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	f003 0203 	and.w	r2, r3, #3
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	005b      	lsls	r3, r3, #1
 800beae:	fa02 f303 	lsl.w	r3, r2, r3
 800beb2:	693a      	ldr	r2, [r7, #16]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 80a6 	beq.w	800c018 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800becc:	4b5b      	ldr	r3, [pc, #364]	@ (800c03c <HAL_GPIO_Init+0x2e4>)
 800bece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bed0:	4a5a      	ldr	r2, [pc, #360]	@ (800c03c <HAL_GPIO_Init+0x2e4>)
 800bed2:	f043 0301 	orr.w	r3, r3, #1
 800bed6:	6613      	str	r3, [r2, #96]	@ 0x60
 800bed8:	4b58      	ldr	r3, [pc, #352]	@ (800c03c <HAL_GPIO_Init+0x2e4>)
 800beda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bedc:	f003 0301 	and.w	r3, r3, #1
 800bee0:	60bb      	str	r3, [r7, #8]
 800bee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bee4:	4a56      	ldr	r2, [pc, #344]	@ (800c040 <HAL_GPIO_Init+0x2e8>)
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	089b      	lsrs	r3, r3, #2
 800beea:	3302      	adds	r3, #2
 800beec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	f003 0303 	and.w	r3, r3, #3
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	220f      	movs	r2, #15
 800befc:	fa02 f303 	lsl.w	r3, r2, r3
 800bf00:	43db      	mvns	r3, r3
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	4013      	ands	r3, r2
 800bf06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800bf0e:	d01f      	beq.n	800bf50 <HAL_GPIO_Init+0x1f8>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a4c      	ldr	r2, [pc, #304]	@ (800c044 <HAL_GPIO_Init+0x2ec>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d019      	beq.n	800bf4c <HAL_GPIO_Init+0x1f4>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a4b      	ldr	r2, [pc, #300]	@ (800c048 <HAL_GPIO_Init+0x2f0>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d013      	beq.n	800bf48 <HAL_GPIO_Init+0x1f0>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a4a      	ldr	r2, [pc, #296]	@ (800c04c <HAL_GPIO_Init+0x2f4>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d00d      	beq.n	800bf44 <HAL_GPIO_Init+0x1ec>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4a49      	ldr	r2, [pc, #292]	@ (800c050 <HAL_GPIO_Init+0x2f8>)
 800bf2c:	4293      	cmp	r3, r2
 800bf2e:	d007      	beq.n	800bf40 <HAL_GPIO_Init+0x1e8>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a48      	ldr	r2, [pc, #288]	@ (800c054 <HAL_GPIO_Init+0x2fc>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d101      	bne.n	800bf3c <HAL_GPIO_Init+0x1e4>
 800bf38:	2305      	movs	r3, #5
 800bf3a:	e00a      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf3c:	2306      	movs	r3, #6
 800bf3e:	e008      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf40:	2304      	movs	r3, #4
 800bf42:	e006      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf44:	2303      	movs	r3, #3
 800bf46:	e004      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf48:	2302      	movs	r3, #2
 800bf4a:	e002      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e000      	b.n	800bf52 <HAL_GPIO_Init+0x1fa>
 800bf50:	2300      	movs	r3, #0
 800bf52:	697a      	ldr	r2, [r7, #20]
 800bf54:	f002 0203 	and.w	r2, r2, #3
 800bf58:	0092      	lsls	r2, r2, #2
 800bf5a:	4093      	lsls	r3, r2
 800bf5c:	693a      	ldr	r2, [r7, #16]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf62:	4937      	ldr	r1, [pc, #220]	@ (800c040 <HAL_GPIO_Init+0x2e8>)
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	089b      	lsrs	r3, r3, #2
 800bf68:	3302      	adds	r3, #2
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf70:	4b39      	ldr	r3, [pc, #228]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bf8c:	693a      	ldr	r2, [r7, #16]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf94:	4a30      	ldr	r2, [pc, #192]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bf9a:	4b2f      	ldr	r3, [pc, #188]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	43db      	mvns	r3, r3
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	4013      	ands	r3, r2
 800bfa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bfbe:	4a26      	ldr	r2, [pc, #152]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800bfc4:	4b24      	ldr	r3, [pc, #144]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	43db      	mvns	r3, r3
 800bfce:	693a      	ldr	r2, [r7, #16]
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bfe8:	4a1b      	ldr	r2, [pc, #108]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bfee:	4b1a      	ldr	r3, [pc, #104]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	43db      	mvns	r3, r3
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	4013      	ands	r3, r2
 800bffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c012:	4a11      	ldr	r2, [pc, #68]	@ (800c058 <HAL_GPIO_Init+0x300>)
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	3301      	adds	r3, #1
 800c01c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	fa22 f303 	lsr.w	r3, r2, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f47f ae9d 	bne.w	800bd68 <HAL_GPIO_Init+0x10>
  }
}
 800c02e:	bf00      	nop
 800c030:	bf00      	nop
 800c032:	371c      	adds	r7, #28
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr
 800c03c:	40021000 	.word	0x40021000
 800c040:	40010000 	.word	0x40010000
 800c044:	48000400 	.word	0x48000400
 800c048:	48000800 	.word	0x48000800
 800c04c:	48000c00 	.word	0x48000c00
 800c050:	48001000 	.word	0x48001000
 800c054:	48001400 	.word	0x48001400
 800c058:	40010400 	.word	0x40010400

0800c05c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	691a      	ldr	r2, [r3, #16]
 800c06c:	887b      	ldrh	r3, [r7, #2]
 800c06e:	4013      	ands	r3, r2
 800c070:	2b00      	cmp	r3, #0
 800c072:	d002      	beq.n	800c07a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c074:	2301      	movs	r3, #1
 800c076:	73fb      	strb	r3, [r7, #15]
 800c078:	e001      	b.n	800c07e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c07a:	2300      	movs	r3, #0
 800c07c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3714      	adds	r7, #20
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	807b      	strh	r3, [r7, #2]
 800c098:	4613      	mov	r3, r2
 800c09a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c09c:	787b      	ldrb	r3, [r7, #1]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c0a2:	887a      	ldrh	r2, [r7, #2]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c0a8:	e002      	b.n	800c0b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c0aa:	887a      	ldrh	r2, [r7, #2]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c0b0:	bf00      	nop
 800c0b2:	370c      	adds	r7, #12
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b085      	sub	sp, #20
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	695b      	ldr	r3, [r3, #20]
 800c0cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c0ce:	887a      	ldrh	r2, [r7, #2]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	041a      	lsls	r2, r3, #16
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	43d9      	mvns	r1, r3
 800c0da:	887b      	ldrh	r3, [r7, #2]
 800c0dc:	400b      	ands	r3, r1
 800c0de:	431a      	orrs	r2, r3
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	619a      	str	r2, [r3, #24]
}
 800c0e4:	bf00      	nop
 800c0e6:	3714      	adds	r7, #20
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c0fa:	4b08      	ldr	r3, [pc, #32]	@ (800c11c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0fc:	695a      	ldr	r2, [r3, #20]
 800c0fe:	88fb      	ldrh	r3, [r7, #6]
 800c100:	4013      	ands	r3, r2
 800c102:	2b00      	cmp	r3, #0
 800c104:	d006      	beq.n	800c114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c106:	4a05      	ldr	r2, [pc, #20]	@ (800c11c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c10c:	88fb      	ldrh	r3, [r7, #6]
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fb fdfe 	bl	8007d10 <HAL_GPIO_EXTI_Callback>
  }
}
 800c114:	bf00      	nop
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}
 800c11c:	40010400 	.word	0x40010400

0800c120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c120:	b480      	push	{r7}
 800c122:	b085      	sub	sp, #20
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d141      	bne.n	800c1b2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c12e:	4b4b      	ldr	r3, [pc, #300]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c13a:	d131      	bne.n	800c1a0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c13c:	4b47      	ldr	r3, [pc, #284]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c142:	4a46      	ldr	r2, [pc, #280]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c144:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c148:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c14c:	4b43      	ldr	r3, [pc, #268]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c154:	4a41      	ldr	r2, [pc, #260]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c15a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c15c:	4b40      	ldr	r3, [pc, #256]	@ (800c260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	2232      	movs	r2, #50	@ 0x32
 800c162:	fb02 f303 	mul.w	r3, r2, r3
 800c166:	4a3f      	ldr	r2, [pc, #252]	@ (800c264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c168:	fba2 2303 	umull	r2, r3, r2, r3
 800c16c:	0c9b      	lsrs	r3, r3, #18
 800c16e:	3301      	adds	r3, #1
 800c170:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c172:	e002      	b.n	800c17a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	3b01      	subs	r3, #1
 800c178:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c17a:	4b38      	ldr	r3, [pc, #224]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c17c:	695b      	ldr	r3, [r3, #20]
 800c17e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c186:	d102      	bne.n	800c18e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1f2      	bne.n	800c174 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c18e:	4b33      	ldr	r3, [pc, #204]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c190:	695b      	ldr	r3, [r3, #20]
 800c192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c19a:	d158      	bne.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e057      	b.n	800c250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1a0:	4b2e      	ldr	r3, [pc, #184]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1a6:	4a2d      	ldr	r2, [pc, #180]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1ac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c1b0:	e04d      	b.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1b8:	d141      	bne.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1ba:	4b28      	ldr	r3, [pc, #160]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c1c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1c6:	d131      	bne.n	800c22c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1c8:	4b24      	ldr	r3, [pc, #144]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1ce:	4a23      	ldr	r2, [pc, #140]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1d8:	4b20      	ldr	r3, [pc, #128]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c1e0:	4a1e      	ldr	r2, [pc, #120]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c1e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c260 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	2232      	movs	r2, #50	@ 0x32
 800c1ee:	fb02 f303 	mul.w	r3, r2, r3
 800c1f2:	4a1c      	ldr	r2, [pc, #112]	@ (800c264 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1f4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f8:	0c9b      	lsrs	r3, r3, #18
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1fe:	e002      	b.n	800c206 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	3b01      	subs	r3, #1
 800c204:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c206:	4b15      	ldr	r3, [pc, #84]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c20e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c212:	d102      	bne.n	800c21a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1f2      	bne.n	800c200 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c21a:	4b10      	ldr	r3, [pc, #64]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c21c:	695b      	ldr	r3, [r3, #20]
 800c21e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c226:	d112      	bne.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e011      	b.n	800c250 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c22c:	4b0b      	ldr	r3, [pc, #44]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c22e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c232:	4a0a      	ldr	r2, [pc, #40]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c238:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c23c:	e007      	b.n	800c24e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c23e:	4b07      	ldr	r3, [pc, #28]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c246:	4a05      	ldr	r2, [pc, #20]	@ (800c25c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c248:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c24c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	40007000 	.word	0x40007000
 800c260:	20000138 	.word	0x20000138
 800c264:	431bde83 	.word	0x431bde83

0800c268 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c268:	b480      	push	{r7}
 800c26a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c26c:	4b05      	ldr	r3, [pc, #20]	@ (800c284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	4a04      	ldr	r2, [pc, #16]	@ (800c284 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c276:	6093      	str	r3, [r2, #8]
}
 800c278:	bf00      	nop
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	40007000 	.word	0x40007000

0800c288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d101      	bne.n	800c29a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e2fe      	b.n	800c898 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0301 	and.w	r3, r3, #1
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d075      	beq.n	800c392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2a6:	4b97      	ldr	r3, [pc, #604]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c2a8:	689b      	ldr	r3, [r3, #8]
 800c2aa:	f003 030c 	and.w	r3, r3, #12
 800c2ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2b0:	4b94      	ldr	r3, [pc, #592]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	f003 0303 	and.w	r3, r3, #3
 800c2b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	2b0c      	cmp	r3, #12
 800c2be:	d102      	bne.n	800c2c6 <HAL_RCC_OscConfig+0x3e>
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b03      	cmp	r3, #3
 800c2c4:	d002      	beq.n	800c2cc <HAL_RCC_OscConfig+0x44>
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	2b08      	cmp	r3, #8
 800c2ca:	d10b      	bne.n	800c2e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2cc:	4b8d      	ldr	r3, [pc, #564]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d05b      	beq.n	800c390 <HAL_RCC_OscConfig+0x108>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d157      	bne.n	800c390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e2d9      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2ec:	d106      	bne.n	800c2fc <HAL_RCC_OscConfig+0x74>
 800c2ee:	4b85      	ldr	r3, [pc, #532]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4a84      	ldr	r2, [pc, #528]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c2f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	e01d      	b.n	800c338 <HAL_RCC_OscConfig+0xb0>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c304:	d10c      	bne.n	800c320 <HAL_RCC_OscConfig+0x98>
 800c306:	4b7f      	ldr	r3, [pc, #508]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a7e      	ldr	r2, [pc, #504]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c30c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c310:	6013      	str	r3, [r2, #0]
 800c312:	4b7c      	ldr	r3, [pc, #496]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a7b      	ldr	r2, [pc, #492]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	e00b      	b.n	800c338 <HAL_RCC_OscConfig+0xb0>
 800c320:	4b78      	ldr	r3, [pc, #480]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4a77      	ldr	r2, [pc, #476]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	4b75      	ldr	r3, [pc, #468]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a74      	ldr	r2, [pc, #464]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d013      	beq.n	800c368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c340:	f7fd fc44 	bl	8009bcc <HAL_GetTick>
 800c344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c346:	e008      	b.n	800c35a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c348:	f7fd fc40 	bl	8009bcc <HAL_GetTick>
 800c34c:	4602      	mov	r2, r0
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	2b64      	cmp	r3, #100	@ 0x64
 800c354:	d901      	bls.n	800c35a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c356:	2303      	movs	r3, #3
 800c358:	e29e      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c35a:	4b6a      	ldr	r3, [pc, #424]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0f0      	beq.n	800c348 <HAL_RCC_OscConfig+0xc0>
 800c366:	e014      	b.n	800c392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c368:	f7fd fc30 	bl	8009bcc <HAL_GetTick>
 800c36c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c36e:	e008      	b.n	800c382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c370:	f7fd fc2c 	bl	8009bcc <HAL_GetTick>
 800c374:	4602      	mov	r2, r0
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	2b64      	cmp	r3, #100	@ 0x64
 800c37c:	d901      	bls.n	800c382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c37e:	2303      	movs	r3, #3
 800c380:	e28a      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c382:	4b60      	ldr	r3, [pc, #384]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1f0      	bne.n	800c370 <HAL_RCC_OscConfig+0xe8>
 800c38e:	e000      	b.n	800c392 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0302 	and.w	r3, r3, #2
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d075      	beq.n	800c48a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c39e:	4b59      	ldr	r3, [pc, #356]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c3a0:	689b      	ldr	r3, [r3, #8]
 800c3a2:	f003 030c 	and.w	r3, r3, #12
 800c3a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3a8:	4b56      	ldr	r3, [pc, #344]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	f003 0303 	and.w	r3, r3, #3
 800c3b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	2b0c      	cmp	r3, #12
 800c3b6:	d102      	bne.n	800c3be <HAL_RCC_OscConfig+0x136>
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d002      	beq.n	800c3c4 <HAL_RCC_OscConfig+0x13c>
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b04      	cmp	r3, #4
 800c3c2:	d11f      	bne.n	800c404 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3c4:	4b4f      	ldr	r3, [pc, #316]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d005      	beq.n	800c3dc <HAL_RCC_OscConfig+0x154>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e25d      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3dc:	4b49      	ldr	r3, [pc, #292]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	061b      	lsls	r3, r3, #24
 800c3ea:	4946      	ldr	r1, [pc, #280]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3f0:	4b45      	ldr	r3, [pc, #276]	@ (800c508 <HAL_RCC_OscConfig+0x280>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fd fb9d 	bl	8009b34 <HAL_InitTick>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d043      	beq.n	800c488 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c400:	2301      	movs	r3, #1
 800c402:	e249      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d023      	beq.n	800c454 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c40c:	4b3d      	ldr	r3, [pc, #244]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a3c      	ldr	r2, [pc, #240]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c418:	f7fd fbd8 	bl	8009bcc <HAL_GetTick>
 800c41c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c41e:	e008      	b.n	800c432 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c420:	f7fd fbd4 	bl	8009bcc <HAL_GetTick>
 800c424:	4602      	mov	r2, r0
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d901      	bls.n	800c432 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e232      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c432:	4b34      	ldr	r3, [pc, #208]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0f0      	beq.n	800c420 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c43e:	4b31      	ldr	r3, [pc, #196]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	061b      	lsls	r3, r3, #24
 800c44c:	492d      	ldr	r1, [pc, #180]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c44e:	4313      	orrs	r3, r2
 800c450:	604b      	str	r3, [r1, #4]
 800c452:	e01a      	b.n	800c48a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c454:	4b2b      	ldr	r3, [pc, #172]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a2a      	ldr	r2, [pc, #168]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c45a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c45e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c460:	f7fd fbb4 	bl	8009bcc <HAL_GetTick>
 800c464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c466:	e008      	b.n	800c47a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c468:	f7fd fbb0 	bl	8009bcc <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b02      	cmp	r3, #2
 800c474:	d901      	bls.n	800c47a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c476:	2303      	movs	r3, #3
 800c478:	e20e      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c47a:	4b22      	ldr	r3, [pc, #136]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1f0      	bne.n	800c468 <HAL_RCC_OscConfig+0x1e0>
 800c486:	e000      	b.n	800c48a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c488:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f003 0308 	and.w	r3, r3, #8
 800c492:	2b00      	cmp	r3, #0
 800c494:	d041      	beq.n	800c51a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d01c      	beq.n	800c4d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c49e:	4b19      	ldr	r3, [pc, #100]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c4a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4a4:	4a17      	ldr	r2, [pc, #92]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c4a6:	f043 0301 	orr.w	r3, r3, #1
 800c4aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ae:	f7fd fb8d 	bl	8009bcc <HAL_GetTick>
 800c4b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4b4:	e008      	b.n	800c4c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4b6:	f7fd fb89 	bl	8009bcc <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d901      	bls.n	800c4c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	e1e7      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4c8:	4b0e      	ldr	r3, [pc, #56]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4ce:	f003 0302 	and.w	r3, r3, #2
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d0ef      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x22e>
 800c4d6:	e020      	b.n	800c51a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4d8:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c4da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4de:	4a09      	ldr	r2, [pc, #36]	@ (800c504 <HAL_RCC_OscConfig+0x27c>)
 800c4e0:	f023 0301 	bic.w	r3, r3, #1
 800c4e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4e8:	f7fd fb70 	bl	8009bcc <HAL_GetTick>
 800c4ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4ee:	e00d      	b.n	800c50c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4f0:	f7fd fb6c 	bl	8009bcc <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d906      	bls.n	800c50c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e1ca      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
 800c502:	bf00      	nop
 800c504:	40021000 	.word	0x40021000
 800c508:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c50c:	4b8c      	ldr	r3, [pc, #560]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c512:	f003 0302 	and.w	r3, r3, #2
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1ea      	bne.n	800c4f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f003 0304 	and.w	r3, r3, #4
 800c522:	2b00      	cmp	r3, #0
 800c524:	f000 80a6 	beq.w	800c674 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c528:	2300      	movs	r3, #0
 800c52a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c52c:	4b84      	ldr	r3, [pc, #528]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c52e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c530:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <HAL_RCC_OscConfig+0x2b4>
 800c538:	2301      	movs	r3, #1
 800c53a:	e000      	b.n	800c53e <HAL_RCC_OscConfig+0x2b6>
 800c53c:	2300      	movs	r3, #0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00d      	beq.n	800c55e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c542:	4b7f      	ldr	r3, [pc, #508]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c546:	4a7e      	ldr	r2, [pc, #504]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c54c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c54e:	4b7c      	ldr	r3, [pc, #496]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c556:	60fb      	str	r3, [r7, #12]
 800c558:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c55a:	2301      	movs	r3, #1
 800c55c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c55e:	4b79      	ldr	r3, [pc, #484]	@ (800c744 <HAL_RCC_OscConfig+0x4bc>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c566:	2b00      	cmp	r3, #0
 800c568:	d118      	bne.n	800c59c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c56a:	4b76      	ldr	r3, [pc, #472]	@ (800c744 <HAL_RCC_OscConfig+0x4bc>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a75      	ldr	r2, [pc, #468]	@ (800c744 <HAL_RCC_OscConfig+0x4bc>)
 800c570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c576:	f7fd fb29 	bl	8009bcc <HAL_GetTick>
 800c57a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c57c:	e008      	b.n	800c590 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c57e:	f7fd fb25 	bl	8009bcc <HAL_GetTick>
 800c582:	4602      	mov	r2, r0
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	2b02      	cmp	r3, #2
 800c58a:	d901      	bls.n	800c590 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c58c:	2303      	movs	r3, #3
 800c58e:	e183      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c590:	4b6c      	ldr	r3, [pc, #432]	@ (800c744 <HAL_RCC_OscConfig+0x4bc>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0f0      	beq.n	800c57e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d108      	bne.n	800c5b6 <HAL_RCC_OscConfig+0x32e>
 800c5a4:	4b66      	ldr	r3, [pc, #408]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5aa:	4a65      	ldr	r2, [pc, #404]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5ac:	f043 0301 	orr.w	r3, r3, #1
 800c5b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5b4:	e024      	b.n	800c600 <HAL_RCC_OscConfig+0x378>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	2b05      	cmp	r3, #5
 800c5bc:	d110      	bne.n	800c5e0 <HAL_RCC_OscConfig+0x358>
 800c5be:	4b60      	ldr	r3, [pc, #384]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c4:	4a5e      	ldr	r2, [pc, #376]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5c6:	f043 0304 	orr.w	r3, r3, #4
 800c5ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5ce:	4b5c      	ldr	r3, [pc, #368]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d4:	4a5a      	ldr	r2, [pc, #360]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5d6:	f043 0301 	orr.w	r3, r3, #1
 800c5da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5de:	e00f      	b.n	800c600 <HAL_RCC_OscConfig+0x378>
 800c5e0:	4b57      	ldr	r3, [pc, #348]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5e6:	4a56      	ldr	r2, [pc, #344]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5e8:	f023 0301 	bic.w	r3, r3, #1
 800c5ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5f0:	4b53      	ldr	r3, [pc, #332]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5f6:	4a52      	ldr	r2, [pc, #328]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c5f8:	f023 0304 	bic.w	r3, r3, #4
 800c5fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d016      	beq.n	800c636 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c608:	f7fd fae0 	bl	8009bcc <HAL_GetTick>
 800c60c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c60e:	e00a      	b.n	800c626 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c610:	f7fd fadc 	bl	8009bcc <HAL_GetTick>
 800c614:	4602      	mov	r2, r0
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c61e:	4293      	cmp	r3, r2
 800c620:	d901      	bls.n	800c626 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c622:	2303      	movs	r3, #3
 800c624:	e138      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c626:	4b46      	ldr	r3, [pc, #280]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c62c:	f003 0302 	and.w	r3, r3, #2
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0ed      	beq.n	800c610 <HAL_RCC_OscConfig+0x388>
 800c634:	e015      	b.n	800c662 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c636:	f7fd fac9 	bl	8009bcc <HAL_GetTick>
 800c63a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c63c:	e00a      	b.n	800c654 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c63e:	f7fd fac5 	bl	8009bcc <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c64c:	4293      	cmp	r3, r2
 800c64e:	d901      	bls.n	800c654 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c650:	2303      	movs	r3, #3
 800c652:	e121      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c654:	4b3a      	ldr	r3, [pc, #232]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c65a:	f003 0302 	and.w	r3, r3, #2
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d1ed      	bne.n	800c63e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c662:	7ffb      	ldrb	r3, [r7, #31]
 800c664:	2b01      	cmp	r3, #1
 800c666:	d105      	bne.n	800c674 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c668:	4b35      	ldr	r3, [pc, #212]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c66a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c66c:	4a34      	ldr	r2, [pc, #208]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c66e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c672:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f003 0320 	and.w	r3, r3, #32
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d03c      	beq.n	800c6fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	699b      	ldr	r3, [r3, #24]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d01c      	beq.n	800c6c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c688:	4b2d      	ldr	r3, [pc, #180]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c68a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c68e:	4a2c      	ldr	r2, [pc, #176]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c690:	f043 0301 	orr.w	r3, r3, #1
 800c694:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c698:	f7fd fa98 	bl	8009bcc <HAL_GetTick>
 800c69c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c69e:	e008      	b.n	800c6b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6a0:	f7fd fa94 	bl	8009bcc <HAL_GetTick>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	1ad3      	subs	r3, r2, r3
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d901      	bls.n	800c6b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	e0f2      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c6b2:	4b23      	ldr	r3, [pc, #140]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c6b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d0ef      	beq.n	800c6a0 <HAL_RCC_OscConfig+0x418>
 800c6c0:	e01b      	b.n	800c6fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6c2:	4b1f      	ldr	r3, [pc, #124]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c6c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c6ca:	f023 0301 	bic.w	r3, r3, #1
 800c6ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6d2:	f7fd fa7b 	bl	8009bcc <HAL_GetTick>
 800c6d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6d8:	e008      	b.n	800c6ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6da:	f7fd fa77 	bl	8009bcc <HAL_GetTick>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	1ad3      	subs	r3, r2, r3
 800c6e4:	2b02      	cmp	r3, #2
 800c6e6:	d901      	bls.n	800c6ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e0d5      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6ec:	4b14      	ldr	r3, [pc, #80]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c6ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6f2:	f003 0302 	and.w	r3, r3, #2
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1ef      	bne.n	800c6da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	69db      	ldr	r3, [r3, #28]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	f000 80c9 	beq.w	800c896 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c704:	4b0e      	ldr	r3, [pc, #56]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	f003 030c 	and.w	r3, r3, #12
 800c70c:	2b0c      	cmp	r3, #12
 800c70e:	f000 8083 	beq.w	800c818 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	2b02      	cmp	r3, #2
 800c718:	d15e      	bne.n	800c7d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c71a:	4b09      	ldr	r3, [pc, #36]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4a08      	ldr	r2, [pc, #32]	@ (800c740 <HAL_RCC_OscConfig+0x4b8>)
 800c720:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c724:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c726:	f7fd fa51 	bl	8009bcc <HAL_GetTick>
 800c72a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c72c:	e00c      	b.n	800c748 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c72e:	f7fd fa4d 	bl	8009bcc <HAL_GetTick>
 800c732:	4602      	mov	r2, r0
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	1ad3      	subs	r3, r2, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d905      	bls.n	800c748 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c73c:	2303      	movs	r3, #3
 800c73e:	e0ab      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
 800c740:	40021000 	.word	0x40021000
 800c744:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c748:	4b55      	ldr	r3, [pc, #340]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1ec      	bne.n	800c72e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c754:	4b52      	ldr	r3, [pc, #328]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c756:	68da      	ldr	r2, [r3, #12]
 800c758:	4b52      	ldr	r3, [pc, #328]	@ (800c8a4 <HAL_RCC_OscConfig+0x61c>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	6a11      	ldr	r1, [r2, #32]
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c764:	3a01      	subs	r2, #1
 800c766:	0112      	lsls	r2, r2, #4
 800c768:	4311      	orrs	r1, r2
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c76e:	0212      	lsls	r2, r2, #8
 800c770:	4311      	orrs	r1, r2
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c776:	0852      	lsrs	r2, r2, #1
 800c778:	3a01      	subs	r2, #1
 800c77a:	0552      	lsls	r2, r2, #21
 800c77c:	4311      	orrs	r1, r2
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c782:	0852      	lsrs	r2, r2, #1
 800c784:	3a01      	subs	r2, #1
 800c786:	0652      	lsls	r2, r2, #25
 800c788:	4311      	orrs	r1, r2
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c78e:	06d2      	lsls	r2, r2, #27
 800c790:	430a      	orrs	r2, r1
 800c792:	4943      	ldr	r1, [pc, #268]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c794:	4313      	orrs	r3, r2
 800c796:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c798:	4b41      	ldr	r3, [pc, #260]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	4a40      	ldr	r2, [pc, #256]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c79e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7a4:	4b3e      	ldr	r3, [pc, #248]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	4a3d      	ldr	r2, [pc, #244]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c7aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7b0:	f7fd fa0c 	bl	8009bcc <HAL_GetTick>
 800c7b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7b6:	e008      	b.n	800c7ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7b8:	f7fd fa08 	bl	8009bcc <HAL_GetTick>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d901      	bls.n	800c7ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e066      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7ca:	4b35      	ldr	r3, [pc, #212]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d0f0      	beq.n	800c7b8 <HAL_RCC_OscConfig+0x530>
 800c7d6:	e05e      	b.n	800c896 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7d8:	4b31      	ldr	r3, [pc, #196]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a30      	ldr	r2, [pc, #192]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c7de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7e4:	f7fd f9f2 	bl	8009bcc <HAL_GetTick>
 800c7e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7ea:	e008      	b.n	800c7fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ec:	f7fd f9ee 	bl	8009bcc <HAL_GetTick>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b02      	cmp	r3, #2
 800c7f8:	d901      	bls.n	800c7fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c7fa:	2303      	movs	r3, #3
 800c7fc:	e04c      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7fe:	4b28      	ldr	r3, [pc, #160]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c806:	2b00      	cmp	r3, #0
 800c808:	d1f0      	bne.n	800c7ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c80a:	4b25      	ldr	r3, [pc, #148]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c80c:	68da      	ldr	r2, [r3, #12]
 800c80e:	4924      	ldr	r1, [pc, #144]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c810:	4b25      	ldr	r3, [pc, #148]	@ (800c8a8 <HAL_RCC_OscConfig+0x620>)
 800c812:	4013      	ands	r3, r2
 800c814:	60cb      	str	r3, [r1, #12]
 800c816:	e03e      	b.n	800c896 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d101      	bne.n	800c824 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c820:	2301      	movs	r3, #1
 800c822:	e039      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c824:	4b1e      	ldr	r3, [pc, #120]	@ (800c8a0 <HAL_RCC_OscConfig+0x618>)
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	f003 0203 	and.w	r2, r3, #3
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	429a      	cmp	r2, r3
 800c836:	d12c      	bne.n	800c892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c842:	3b01      	subs	r3, #1
 800c844:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c846:	429a      	cmp	r2, r3
 800c848:	d123      	bne.n	800c892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c854:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c856:	429a      	cmp	r2, r3
 800c858:	d11b      	bne.n	800c892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c864:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c866:	429a      	cmp	r2, r3
 800c868:	d113      	bne.n	800c892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c874:	085b      	lsrs	r3, r3, #1
 800c876:	3b01      	subs	r3, #1
 800c878:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d109      	bne.n	800c892 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	3b01      	subs	r3, #1
 800c88c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c88e:	429a      	cmp	r2, r3
 800c890:	d001      	beq.n	800c896 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	e000      	b.n	800c898 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	40021000 	.word	0x40021000
 800c8a4:	019f800c 	.word	0x019f800c
 800c8a8:	feeefffc 	.word	0xfeeefffc

0800c8ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e11e      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8c4:	4b91      	ldr	r3, [pc, #580]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f003 030f 	and.w	r3, r3, #15
 800c8cc:	683a      	ldr	r2, [r7, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d910      	bls.n	800c8f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8d2:	4b8e      	ldr	r3, [pc, #568]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f023 020f 	bic.w	r2, r3, #15
 800c8da:	498c      	ldr	r1, [pc, #560]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8e2:	4b8a      	ldr	r3, [pc, #552]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f003 030f 	and.w	r3, r3, #15
 800c8ea:	683a      	ldr	r2, [r7, #0]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d001      	beq.n	800c8f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e106      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d073      	beq.n	800c9e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	2b03      	cmp	r3, #3
 800c906:	d129      	bne.n	800c95c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c908:	4b81      	ldr	r3, [pc, #516]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c914:	2301      	movs	r3, #1
 800c916:	e0f4      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c918:	f000 f99e 	bl	800cc58 <RCC_GetSysClockFreqFromPLLSource>
 800c91c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	4a7c      	ldr	r2, [pc, #496]	@ (800cb14 <HAL_RCC_ClockConfig+0x268>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d93f      	bls.n	800c9a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c926:	4b7a      	ldr	r3, [pc, #488]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d033      	beq.n	800c9a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c942:	2b00      	cmp	r3, #0
 800c944:	d12f      	bne.n	800c9a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c946:	4b72      	ldr	r3, [pc, #456]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c94e:	4a70      	ldr	r2, [pc, #448]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c954:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c956:	2380      	movs	r3, #128	@ 0x80
 800c958:	617b      	str	r3, [r7, #20]
 800c95a:	e024      	b.n	800c9a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	2b02      	cmp	r3, #2
 800c962:	d107      	bne.n	800c974 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c964:	4b6a      	ldr	r3, [pc, #424]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d109      	bne.n	800c984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e0c6      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c974:	4b66      	ldr	r3, [pc, #408]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	e0be      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c984:	f000 f8ce 	bl	800cb24 <HAL_RCC_GetSysClockFreq>
 800c988:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4a61      	ldr	r2, [pc, #388]	@ (800cb14 <HAL_RCC_ClockConfig+0x268>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d909      	bls.n	800c9a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c992:	4b5f      	ldr	r3, [pc, #380]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c99a:	4a5d      	ldr	r2, [pc, #372]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c99c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c9a2:	2380      	movs	r3, #128	@ 0x80
 800c9a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c9a6:	4b5a      	ldr	r3, [pc, #360]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	f023 0203 	bic.w	r2, r3, #3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	685b      	ldr	r3, [r3, #4]
 800c9b2:	4957      	ldr	r1, [pc, #348]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9b8:	f7fd f908 	bl	8009bcc <HAL_GetTick>
 800c9bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9be:	e00a      	b.n	800c9d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9c0:	f7fd f904 	bl	8009bcc <HAL_GetTick>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d901      	bls.n	800c9d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e095      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9d6:	4b4e      	ldr	r3, [pc, #312]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	f003 020c 	and.w	r2, r3, #12
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d1eb      	bne.n	800c9c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f003 0302 	and.w	r3, r3, #2
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d023      	beq.n	800ca3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f003 0304 	and.w	r3, r3, #4
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d005      	beq.n	800ca0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca00:	4b43      	ldr	r3, [pc, #268]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca02:	689b      	ldr	r3, [r3, #8]
 800ca04:	4a42      	ldr	r2, [pc, #264]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ca0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 0308 	and.w	r3, r3, #8
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d007      	beq.n	800ca28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca18:	4b3d      	ldr	r3, [pc, #244]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca20:	4a3b      	ldr	r2, [pc, #236]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca22:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ca26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca28:	4b39      	ldr	r3, [pc, #228]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	689b      	ldr	r3, [r3, #8]
 800ca34:	4936      	ldr	r1, [pc, #216]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca36:	4313      	orrs	r3, r2
 800ca38:	608b      	str	r3, [r1, #8]
 800ca3a:	e008      	b.n	800ca4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	2b80      	cmp	r3, #128	@ 0x80
 800ca40:	d105      	bne.n	800ca4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ca42:	4b33      	ldr	r3, [pc, #204]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca44:	689b      	ldr	r3, [r3, #8]
 800ca46:	4a32      	ldr	r2, [pc, #200]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800ca48:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca4e:	4b2f      	ldr	r3, [pc, #188]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f003 030f 	and.w	r3, r3, #15
 800ca56:	683a      	ldr	r2, [r7, #0]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d21d      	bcs.n	800ca98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca5c:	4b2b      	ldr	r3, [pc, #172]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f023 020f 	bic.w	r2, r3, #15
 800ca64:	4929      	ldr	r1, [pc, #164]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ca6c:	f7fd f8ae 	bl	8009bcc <HAL_GetTick>
 800ca70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca72:	e00a      	b.n	800ca8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca74:	f7fd f8aa 	bl	8009bcc <HAL_GetTick>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	1ad3      	subs	r3, r2, r3
 800ca7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d901      	bls.n	800ca8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e03b      	b.n	800cb02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca8a:	4b20      	ldr	r3, [pc, #128]	@ (800cb0c <HAL_RCC_ClockConfig+0x260>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 030f 	and.w	r3, r3, #15
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d1ed      	bne.n	800ca74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800caa4:	4b1a      	ldr	r3, [pc, #104]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	4917      	ldr	r1, [pc, #92]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800cab2:	4313      	orrs	r3, r2
 800cab4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f003 0308 	and.w	r3, r3, #8
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d009      	beq.n	800cad6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cac2:	4b13      	ldr	r3, [pc, #76]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	691b      	ldr	r3, [r3, #16]
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	490f      	ldr	r1, [pc, #60]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800cad2:	4313      	orrs	r3, r2
 800cad4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cad6:	f000 f825 	bl	800cb24 <HAL_RCC_GetSysClockFreq>
 800cada:	4602      	mov	r2, r0
 800cadc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb10 <HAL_RCC_ClockConfig+0x264>)
 800cade:	689b      	ldr	r3, [r3, #8]
 800cae0:	091b      	lsrs	r3, r3, #4
 800cae2:	f003 030f 	and.w	r3, r3, #15
 800cae6:	490c      	ldr	r1, [pc, #48]	@ (800cb18 <HAL_RCC_ClockConfig+0x26c>)
 800cae8:	5ccb      	ldrb	r3, [r1, r3]
 800caea:	f003 031f 	and.w	r3, r3, #31
 800caee:	fa22 f303 	lsr.w	r3, r2, r3
 800caf2:	4a0a      	ldr	r2, [pc, #40]	@ (800cb1c <HAL_RCC_ClockConfig+0x270>)
 800caf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800caf6:	4b0a      	ldr	r3, [pc, #40]	@ (800cb20 <HAL_RCC_ClockConfig+0x274>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fd f81a 	bl	8009b34 <HAL_InitTick>
 800cb00:	4603      	mov	r3, r0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	3718      	adds	r7, #24
 800cb06:	46bd      	mov	sp, r7
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	bf00      	nop
 800cb0c:	40022000 	.word	0x40022000
 800cb10:	40021000 	.word	0x40021000
 800cb14:	04c4b400 	.word	0x04c4b400
 800cb18:	08013a48 	.word	0x08013a48
 800cb1c:	20000138 	.word	0x20000138
 800cb20:	2000013c 	.word	0x2000013c

0800cb24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b087      	sub	sp, #28
 800cb28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cb2a:	4b2c      	ldr	r3, [pc, #176]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f003 030c 	and.w	r3, r3, #12
 800cb32:	2b04      	cmp	r3, #4
 800cb34:	d102      	bne.n	800cb3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb36:	4b2a      	ldr	r3, [pc, #168]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb38:	613b      	str	r3, [r7, #16]
 800cb3a:	e047      	b.n	800cbcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cb3c:	4b27      	ldr	r3, [pc, #156]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	f003 030c 	and.w	r3, r3, #12
 800cb44:	2b08      	cmp	r3, #8
 800cb46:	d102      	bne.n	800cb4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb48:	4b26      	ldr	r3, [pc, #152]	@ (800cbe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb4a:	613b      	str	r3, [r7, #16]
 800cb4c:	e03e      	b.n	800cbcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cb4e:	4b23      	ldr	r3, [pc, #140]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	f003 030c 	and.w	r3, r3, #12
 800cb56:	2b0c      	cmp	r3, #12
 800cb58:	d136      	bne.n	800cbc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb5a:	4b20      	ldr	r3, [pc, #128]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb5c:	68db      	ldr	r3, [r3, #12]
 800cb5e:	f003 0303 	and.w	r3, r3, #3
 800cb62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb64:	4b1d      	ldr	r3, [pc, #116]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	091b      	lsrs	r3, r3, #4
 800cb6a:	f003 030f 	and.w	r3, r3, #15
 800cb6e:	3301      	adds	r3, #1
 800cb70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b03      	cmp	r3, #3
 800cb76:	d10c      	bne.n	800cb92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb78:	4a1a      	ldr	r2, [pc, #104]	@ (800cbe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb80:	4a16      	ldr	r2, [pc, #88]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb82:	68d2      	ldr	r2, [r2, #12]
 800cb84:	0a12      	lsrs	r2, r2, #8
 800cb86:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cb8a:	fb02 f303 	mul.w	r3, r2, r3
 800cb8e:	617b      	str	r3, [r7, #20]
      break;
 800cb90:	e00c      	b.n	800cbac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb92:	4a13      	ldr	r2, [pc, #76]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9a:	4a10      	ldr	r2, [pc, #64]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb9c:	68d2      	ldr	r2, [r2, #12]
 800cb9e:	0a12      	lsrs	r2, r2, #8
 800cba0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cba4:	fb02 f303 	mul.w	r3, r2, r3
 800cba8:	617b      	str	r3, [r7, #20]
      break;
 800cbaa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cbac:	4b0b      	ldr	r3, [pc, #44]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	0e5b      	lsrs	r3, r3, #25
 800cbb2:	f003 0303 	and.w	r3, r3, #3
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cbbc:	697a      	ldr	r2, [r7, #20]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc4:	613b      	str	r3, [r7, #16]
 800cbc6:	e001      	b.n	800cbcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cbcc:	693b      	ldr	r3, [r7, #16]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	371c      	adds	r7, #28
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd8:	4770      	bx	lr
 800cbda:	bf00      	nop
 800cbdc:	40021000 	.word	0x40021000
 800cbe0:	00f42400 	.word	0x00f42400
 800cbe4:	016e3600 	.word	0x016e3600

0800cbe8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbec:	4b03      	ldr	r3, [pc, #12]	@ (800cbfc <HAL_RCC_GetHCLKFreq+0x14>)
 800cbee:	681b      	ldr	r3, [r3, #0]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	20000138 	.word	0x20000138

0800cc00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cc04:	f7ff fff0 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	4b06      	ldr	r3, [pc, #24]	@ (800cc24 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	0a1b      	lsrs	r3, r3, #8
 800cc10:	f003 0307 	and.w	r3, r3, #7
 800cc14:	4904      	ldr	r1, [pc, #16]	@ (800cc28 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc16:	5ccb      	ldrb	r3, [r1, r3]
 800cc18:	f003 031f 	and.w	r3, r3, #31
 800cc1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	40021000 	.word	0x40021000
 800cc28:	08013a58 	.word	0x08013a58

0800cc2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cc30:	f7ff ffda 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc34:	4602      	mov	r2, r0
 800cc36:	4b06      	ldr	r3, [pc, #24]	@ (800cc50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc38:	689b      	ldr	r3, [r3, #8]
 800cc3a:	0adb      	lsrs	r3, r3, #11
 800cc3c:	f003 0307 	and.w	r3, r3, #7
 800cc40:	4904      	ldr	r1, [pc, #16]	@ (800cc54 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc42:	5ccb      	ldrb	r3, [r1, r3]
 800cc44:	f003 031f 	and.w	r3, r3, #31
 800cc48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	40021000 	.word	0x40021000
 800cc54:	08013a58 	.word	0x08013a58

0800cc58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc5e:	4b1e      	ldr	r3, [pc, #120]	@ (800ccd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cc68:	4b1b      	ldr	r3, [pc, #108]	@ (800ccd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	091b      	lsrs	r3, r3, #4
 800cc6e:	f003 030f 	and.w	r3, r3, #15
 800cc72:	3301      	adds	r3, #1
 800cc74:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	2b03      	cmp	r3, #3
 800cc7a:	d10c      	bne.n	800cc96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc7c:	4a17      	ldr	r2, [pc, #92]	@ (800ccdc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc84:	4a14      	ldr	r2, [pc, #80]	@ (800ccd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc86:	68d2      	ldr	r2, [r2, #12]
 800cc88:	0a12      	lsrs	r2, r2, #8
 800cc8a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	617b      	str	r3, [r7, #20]
    break;
 800cc94:	e00c      	b.n	800ccb0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc96:	4a12      	ldr	r2, [pc, #72]	@ (800cce0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9e:	4a0e      	ldr	r2, [pc, #56]	@ (800ccd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cca0:	68d2      	ldr	r2, [r2, #12]
 800cca2:	0a12      	lsrs	r2, r2, #8
 800cca4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cca8:	fb02 f303 	mul.w	r3, r2, r3
 800ccac:	617b      	str	r3, [r7, #20]
    break;
 800ccae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ccb0:	4b09      	ldr	r3, [pc, #36]	@ (800ccd8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccb2:	68db      	ldr	r3, [r3, #12]
 800ccb4:	0e5b      	lsrs	r3, r3, #25
 800ccb6:	f003 0303 	and.w	r3, r3, #3
 800ccba:	3301      	adds	r3, #1
 800ccbc:	005b      	lsls	r3, r3, #1
 800ccbe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ccc0:	697a      	ldr	r2, [r7, #20]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccc8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ccca:	687b      	ldr	r3, [r7, #4]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	371c      	adds	r7, #28
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	40021000 	.word	0x40021000
 800ccdc:	016e3600 	.word	0x016e3600
 800cce0:	00f42400 	.word	0x00f42400

0800cce4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b086      	sub	sp, #24
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ccec:	2300      	movs	r3, #0
 800ccee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 8098 	beq.w	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd02:	2300      	movs	r3, #0
 800cd04:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd06:	4b43      	ldr	r3, [pc, #268]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10d      	bne.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd12:	4b40      	ldr	r3, [pc, #256]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd16:	4a3f      	ldr	r2, [pc, #252]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd1c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd1e:	4b3d      	ldr	r3, [pc, #244]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd26:	60bb      	str	r3, [r7, #8]
 800cd28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd2e:	4b3a      	ldr	r3, [pc, #232]	@ (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a39      	ldr	r2, [pc, #228]	@ (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd3a:	f7fc ff47 	bl	8009bcc <HAL_GetTick>
 800cd3e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd40:	e009      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd42:	f7fc ff43 	bl	8009bcc <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	2b02      	cmp	r3, #2
 800cd4e:	d902      	bls.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	74fb      	strb	r3, [r7, #19]
        break;
 800cd54:	e005      	b.n	800cd62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd56:	4b30      	ldr	r3, [pc, #192]	@ (800ce18 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0ef      	beq.n	800cd42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cd62:	7cfb      	ldrb	r3, [r7, #19]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d159      	bne.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd68:	4b2a      	ldr	r3, [pc, #168]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd72:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d01e      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd7e:	697a      	ldr	r2, [r7, #20]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d019      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd84:	4b23      	ldr	r3, [pc, #140]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd8e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd90:	4b20      	ldr	r3, [pc, #128]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd96:	4a1f      	ldr	r2, [pc, #124]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cda0:	4b1c      	ldr	r3, [pc, #112]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cda6:	4a1b      	ldr	r2, [pc, #108]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cda8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cdb0:	4a18      	ldr	r2, [pc, #96]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f003 0301 	and.w	r3, r3, #1
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d016      	beq.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdc2:	f7fc ff03 	bl	8009bcc <HAL_GetTick>
 800cdc6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdc8:	e00b      	b.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdca:	f7fc feff 	bl	8009bcc <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d902      	bls.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cddc:	2303      	movs	r3, #3
 800cdde:	74fb      	strb	r3, [r7, #19]
            break;
 800cde0:	e006      	b.n	800cdf0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cde2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cde4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cde8:	f003 0302 	and.w	r3, r3, #2
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d0ec      	beq.n	800cdca <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cdf0:	7cfb      	ldrb	r3, [r7, #19]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d10b      	bne.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cdf6:	4b07      	ldr	r3, [pc, #28]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdfc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce04:	4903      	ldr	r1, [pc, #12]	@ (800ce14 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ce0c:	e008      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce0e:	7cfb      	ldrb	r3, [r7, #19]
 800ce10:	74bb      	strb	r3, [r7, #18]
 800ce12:	e005      	b.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ce14:	40021000 	.word	0x40021000
 800ce18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce1c:	7cfb      	ldrb	r3, [r7, #19]
 800ce1e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce20:	7c7b      	ldrb	r3, [r7, #17]
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d105      	bne.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce26:	4ba7      	ldr	r3, [pc, #668]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce2a:	4aa6      	ldr	r2, [pc, #664]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce30:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f003 0301 	and.w	r3, r3, #1
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d00a      	beq.n	800ce54 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce3e:	4ba1      	ldr	r3, [pc, #644]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce44:	f023 0203 	bic.w	r2, r3, #3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	499d      	ldr	r1, [pc, #628]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce4e:	4313      	orrs	r3, r2
 800ce50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0302 	and.w	r3, r3, #2
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00a      	beq.n	800ce76 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce60:	4b98      	ldr	r3, [pc, #608]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce66:	f023 020c 	bic.w	r2, r3, #12
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	4995      	ldr	r1, [pc, #596]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce70:	4313      	orrs	r3, r2
 800ce72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 0304 	and.w	r3, r3, #4
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00a      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce82:	4b90      	ldr	r3, [pc, #576]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	498c      	ldr	r1, [pc, #560]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce92:	4313      	orrs	r3, r2
 800ce94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d00a      	beq.n	800ceba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cea4:	4b87      	ldr	r3, [pc, #540]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceaa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	4984      	ldr	r1, [pc, #528]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ceb4:	4313      	orrs	r3, r2
 800ceb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	f003 0310 	and.w	r3, r3, #16
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cec6:	4b7f      	ldr	r3, [pc, #508]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cecc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	695b      	ldr	r3, [r3, #20]
 800ced4:	497b      	ldr	r1, [pc, #492]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f003 0320 	and.w	r3, r3, #32
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00a      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cee8:	4b76      	ldr	r3, [pc, #472]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ceea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ceee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	4973      	ldr	r1, [pc, #460]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cef8:	4313      	orrs	r3, r2
 800cefa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00a      	beq.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf0a:	4b6e      	ldr	r3, [pc, #440]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf10:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	69db      	ldr	r3, [r3, #28]
 800cf18:	496a      	ldr	r1, [pc, #424]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00a      	beq.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf2c:	4b65      	ldr	r3, [pc, #404]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf32:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	4962      	ldr	r1, [pc, #392]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf4e:	4b5d      	ldr	r3, [pc, #372]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf5c:	4959      	ldr	r1, [pc, #356]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00a      	beq.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf70:	4b54      	ldr	r3, [pc, #336]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf76:	f023 0203 	bic.w	r2, r3, #3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf7e:	4951      	ldr	r1, [pc, #324]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf80:	4313      	orrs	r3, r2
 800cf82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf92:	4b4c      	ldr	r3, [pc, #304]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfa0:	4948      	ldr	r1, [pc, #288]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d015      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cfb4:	4b43      	ldr	r3, [pc, #268]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfc2:	4940      	ldr	r1, [pc, #256]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfd2:	d105      	bne.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfd4:	4b3b      	ldr	r3, [pc, #236]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfd6:	68db      	ldr	r3, [r3, #12]
 800cfd8:	4a3a      	ldr	r2, [pc, #232]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfde:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d015      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cfec:	4b35      	ldr	r3, [pc, #212]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cff2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffa:	4932      	ldr	r1, [pc, #200]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cffc:	4313      	orrs	r3, r2
 800cffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d006:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d00a:	d105      	bne.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d00c:	4b2d      	ldr	r3, [pc, #180]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	4a2c      	ldr	r2, [pc, #176]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d016:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d015      	beq.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d024:	4b27      	ldr	r3, [pc, #156]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d02a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d032:	4924      	ldr	r1, [pc, #144]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d034:	4313      	orrs	r3, r2
 800d036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d042:	d105      	bne.n	800d050 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d044:	4b1f      	ldr	r3, [pc, #124]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	4a1e      	ldr	r2, [pc, #120]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d04a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d04e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d015      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d05c:	4b19      	ldr	r3, [pc, #100]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d05e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d06a:	4916      	ldr	r1, [pc, #88]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d07a:	d105      	bne.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d07c:	4b11      	ldr	r3, [pc, #68]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	4a10      	ldr	r2, [pc, #64]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d086:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d090:	2b00      	cmp	r3, #0
 800d092:	d019      	beq.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d094:	4b0b      	ldr	r3, [pc, #44]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d09a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a2:	4908      	ldr	r1, [pc, #32]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0b2:	d109      	bne.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0b4:	4b03      	ldr	r3, [pc, #12]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	4a02      	ldr	r2, [pc, #8]	@ (800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0be:	60d3      	str	r3, [r2, #12]
 800d0c0:	e002      	b.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d0c2:	bf00      	nop
 800d0c4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d015      	beq.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d0d4:	4b29      	ldr	r3, [pc, #164]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0da:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e2:	4926      	ldr	r1, [pc, #152]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0f2:	d105      	bne.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d0f4:	4b21      	ldr	r3, [pc, #132]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	4a20      	ldr	r2, [pc, #128]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0fe:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d015      	beq.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d10c:	4b1b      	ldr	r3, [pc, #108]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d10e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d112:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d11a:	4918      	ldr	r1, [pc, #96]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d11c:	4313      	orrs	r3, r2
 800d11e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d12a:	d105      	bne.n	800d138 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d12c:	4b13      	ldr	r3, [pc, #76]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d12e:	68db      	ldr	r3, [r3, #12]
 800d130:	4a12      	ldr	r2, [pc, #72]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d136:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d015      	beq.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d144:	4b0d      	ldr	r3, [pc, #52]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d146:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d14a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d152:	490a      	ldr	r1, [pc, #40]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d154:	4313      	orrs	r3, r2
 800d156:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d15e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d162:	d105      	bne.n	800d170 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d164:	4b05      	ldr	r3, [pc, #20]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	4a04      	ldr	r2, [pc, #16]	@ (800d17c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d16a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d16e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d170:	7cbb      	ldrb	r3, [r7, #18]
}
 800d172:	4618      	mov	r0, r3
 800d174:	3718      	adds	r7, #24
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	40021000 	.word	0x40021000

0800d180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b082      	sub	sp, #8
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d18e:	2301      	movs	r3, #1
 800d190:	e054      	b.n	800d23c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d111      	bne.n	800d1c2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f001 fee2 	bl	800ef70 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d102      	bne.n	800d1ba <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a23      	ldr	r2, [pc, #140]	@ (800d244 <HAL_TIM_Base_Init+0xc4>)
 800d1b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2202      	movs	r2, #2
 800d1c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681a      	ldr	r2, [r3, #0]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	f001 fa2b 	bl	800e630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2201      	movs	r2, #1
 800d22e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2201      	movs	r2, #1
 800d236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d23a:	2300      	movs	r3, #0
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	080093f5 	.word	0x080093f5

0800d248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d256:	b2db      	uxtb	r3, r3
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d001      	beq.n	800d260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e04c      	b.n	800d2fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a26      	ldr	r2, [pc, #152]	@ (800d308 <HAL_TIM_Base_Start+0xc0>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d022      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d27a:	d01d      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	4a22      	ldr	r2, [pc, #136]	@ (800d30c <HAL_TIM_Base_Start+0xc4>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d018      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	4a21      	ldr	r2, [pc, #132]	@ (800d310 <HAL_TIM_Base_Start+0xc8>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d013      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	4a1f      	ldr	r2, [pc, #124]	@ (800d314 <HAL_TIM_Base_Start+0xcc>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d00e      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	4a1e      	ldr	r2, [pc, #120]	@ (800d318 <HAL_TIM_Base_Start+0xd0>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d009      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a1c      	ldr	r2, [pc, #112]	@ (800d31c <HAL_TIM_Base_Start+0xd4>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d004      	beq.n	800d2b8 <HAL_TIM_Base_Start+0x70>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a1b      	ldr	r2, [pc, #108]	@ (800d320 <HAL_TIM_Base_Start+0xd8>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d115      	bne.n	800d2e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	689a      	ldr	r2, [r3, #8]
 800d2be:	4b19      	ldr	r3, [pc, #100]	@ (800d324 <HAL_TIM_Base_Start+0xdc>)
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2b06      	cmp	r3, #6
 800d2c8:	d015      	beq.n	800d2f6 <HAL_TIM_Base_Start+0xae>
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2d0:	d011      	beq.n	800d2f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	681a      	ldr	r2, [r3, #0]
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	f042 0201 	orr.w	r2, r2, #1
 800d2e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e2:	e008      	b.n	800d2f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	f042 0201 	orr.w	r2, r2, #1
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	e000      	b.n	800d2f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3714      	adds	r7, #20
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr
 800d306:	bf00      	nop
 800d308:	40012c00 	.word	0x40012c00
 800d30c:	40000400 	.word	0x40000400
 800d310:	40000800 	.word	0x40000800
 800d314:	40000c00 	.word	0x40000c00
 800d318:	40013400 	.word	0x40013400
 800d31c:	40014000 	.word	0x40014000
 800d320:	40015000 	.word	0x40015000
 800d324:	00010007 	.word	0x00010007

0800d328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d328:	b480      	push	{r7}
 800d32a:	b085      	sub	sp, #20
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d001      	beq.n	800d340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d33c:	2301      	movs	r3, #1
 800d33e:	e054      	b.n	800d3ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2202      	movs	r2, #2
 800d344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68da      	ldr	r2, [r3, #12]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f042 0201 	orr.w	r2, r2, #1
 800d356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	4a26      	ldr	r2, [pc, #152]	@ (800d3f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d35e:	4293      	cmp	r3, r2
 800d360:	d022      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d36a:	d01d      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	4a22      	ldr	r2, [pc, #136]	@ (800d3fc <HAL_TIM_Base_Start_IT+0xd4>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d018      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a21      	ldr	r2, [pc, #132]	@ (800d400 <HAL_TIM_Base_Start_IT+0xd8>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d013      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a1f      	ldr	r2, [pc, #124]	@ (800d404 <HAL_TIM_Base_Start_IT+0xdc>)
 800d386:	4293      	cmp	r3, r2
 800d388:	d00e      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a1e      	ldr	r2, [pc, #120]	@ (800d408 <HAL_TIM_Base_Start_IT+0xe0>)
 800d390:	4293      	cmp	r3, r2
 800d392:	d009      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a1c      	ldr	r2, [pc, #112]	@ (800d40c <HAL_TIM_Base_Start_IT+0xe4>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d004      	beq.n	800d3a8 <HAL_TIM_Base_Start_IT+0x80>
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d410 <HAL_TIM_Base_Start_IT+0xe8>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d115      	bne.n	800d3d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	689a      	ldr	r2, [r3, #8]
 800d3ae:	4b19      	ldr	r3, [pc, #100]	@ (800d414 <HAL_TIM_Base_Start_IT+0xec>)
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2b06      	cmp	r3, #6
 800d3b8:	d015      	beq.n	800d3e6 <HAL_TIM_Base_Start_IT+0xbe>
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3c0:	d011      	beq.n	800d3e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f042 0201 	orr.w	r2, r2, #1
 800d3d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3d2:	e008      	b.n	800d3e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	681a      	ldr	r2, [r3, #0]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f042 0201 	orr.w	r2, r2, #1
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	e000      	b.n	800d3e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3714      	adds	r7, #20
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr
 800d3f6:	bf00      	nop
 800d3f8:	40012c00 	.word	0x40012c00
 800d3fc:	40000400 	.word	0x40000400
 800d400:	40000800 	.word	0x40000800
 800d404:	40000c00 	.word	0x40000c00
 800d408:	40013400 	.word	0x40013400
 800d40c:	40014000 	.word	0x40014000
 800d410:	40015000 	.word	0x40015000
 800d414:	00010007 	.word	0x00010007

0800d418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d101      	bne.n	800d42a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	e054      	b.n	800d4d4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d111      	bne.n	800d45a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f001 fd96 	bl	800ef70 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d102      	bne.n	800d452 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	4a23      	ldr	r2, [pc, #140]	@ (800d4dc <HAL_TIM_PWM_Init+0xc4>)
 800d450:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2202      	movs	r2, #2
 800d45e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681a      	ldr	r2, [r3, #0]
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	3304      	adds	r3, #4
 800d46a:	4619      	mov	r1, r3
 800d46c:	4610      	mov	r0, r2
 800d46e:	f001 f8df 	bl	800e630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2201      	movs	r2, #1
 800d4ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	3708      	adds	r7, #8
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	bd80      	pop	{r7, pc}
 800d4dc:	080093a9 	.word	0x080093a9

0800d4e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d109      	bne.n	800d504 <HAL_TIM_PWM_Start+0x24>
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	bf14      	ite	ne
 800d4fc:	2301      	movne	r3, #1
 800d4fe:	2300      	moveq	r3, #0
 800d500:	b2db      	uxtb	r3, r3
 800d502:	e03c      	b.n	800d57e <HAL_TIM_PWM_Start+0x9e>
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	2b04      	cmp	r3, #4
 800d508:	d109      	bne.n	800d51e <HAL_TIM_PWM_Start+0x3e>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b01      	cmp	r3, #1
 800d514:	bf14      	ite	ne
 800d516:	2301      	movne	r3, #1
 800d518:	2300      	moveq	r3, #0
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	e02f      	b.n	800d57e <HAL_TIM_PWM_Start+0x9e>
 800d51e:	683b      	ldr	r3, [r7, #0]
 800d520:	2b08      	cmp	r3, #8
 800d522:	d109      	bne.n	800d538 <HAL_TIM_PWM_Start+0x58>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	bf14      	ite	ne
 800d530:	2301      	movne	r3, #1
 800d532:	2300      	moveq	r3, #0
 800d534:	b2db      	uxtb	r3, r3
 800d536:	e022      	b.n	800d57e <HAL_TIM_PWM_Start+0x9e>
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	2b0c      	cmp	r3, #12
 800d53c:	d109      	bne.n	800d552 <HAL_TIM_PWM_Start+0x72>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d544:	b2db      	uxtb	r3, r3
 800d546:	2b01      	cmp	r3, #1
 800d548:	bf14      	ite	ne
 800d54a:	2301      	movne	r3, #1
 800d54c:	2300      	moveq	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	e015      	b.n	800d57e <HAL_TIM_PWM_Start+0x9e>
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	2b10      	cmp	r3, #16
 800d556:	d109      	bne.n	800d56c <HAL_TIM_PWM_Start+0x8c>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b01      	cmp	r3, #1
 800d562:	bf14      	ite	ne
 800d564:	2301      	movne	r3, #1
 800d566:	2300      	moveq	r3, #0
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	e008      	b.n	800d57e <HAL_TIM_PWM_Start+0x9e>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b01      	cmp	r3, #1
 800d576:	bf14      	ite	ne
 800d578:	2301      	movne	r3, #1
 800d57a:	2300      	moveq	r3, #0
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d582:	2301      	movs	r3, #1
 800d584:	e0a6      	b.n	800d6d4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <HAL_TIM_PWM_Start+0xb6>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d594:	e023      	b.n	800d5de <HAL_TIM_PWM_Start+0xfe>
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b04      	cmp	r3, #4
 800d59a:	d104      	bne.n	800d5a6 <HAL_TIM_PWM_Start+0xc6>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2202      	movs	r2, #2
 800d5a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5a4:	e01b      	b.n	800d5de <HAL_TIM_PWM_Start+0xfe>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b08      	cmp	r3, #8
 800d5aa:	d104      	bne.n	800d5b6 <HAL_TIM_PWM_Start+0xd6>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5b4:	e013      	b.n	800d5de <HAL_TIM_PWM_Start+0xfe>
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b0c      	cmp	r3, #12
 800d5ba:	d104      	bne.n	800d5c6 <HAL_TIM_PWM_Start+0xe6>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5c4:	e00b      	b.n	800d5de <HAL_TIM_PWM_Start+0xfe>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	2b10      	cmp	r3, #16
 800d5ca:	d104      	bne.n	800d5d6 <HAL_TIM_PWM_Start+0xf6>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2202      	movs	r2, #2
 800d5d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5d4:	e003      	b.n	800d5de <HAL_TIM_PWM_Start+0xfe>
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2202      	movs	r2, #2
 800d5da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f001 fc9c 	bl	800ef24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4a3a      	ldr	r2, [pc, #232]	@ (800d6dc <HAL_TIM_PWM_Start+0x1fc>)
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d018      	beq.n	800d628 <HAL_TIM_PWM_Start+0x148>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	4a39      	ldr	r2, [pc, #228]	@ (800d6e0 <HAL_TIM_PWM_Start+0x200>)
 800d5fc:	4293      	cmp	r3, r2
 800d5fe:	d013      	beq.n	800d628 <HAL_TIM_PWM_Start+0x148>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4a37      	ldr	r2, [pc, #220]	@ (800d6e4 <HAL_TIM_PWM_Start+0x204>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d00e      	beq.n	800d628 <HAL_TIM_PWM_Start+0x148>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	4a36      	ldr	r2, [pc, #216]	@ (800d6e8 <HAL_TIM_PWM_Start+0x208>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d009      	beq.n	800d628 <HAL_TIM_PWM_Start+0x148>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a34      	ldr	r2, [pc, #208]	@ (800d6ec <HAL_TIM_PWM_Start+0x20c>)
 800d61a:	4293      	cmp	r3, r2
 800d61c:	d004      	beq.n	800d628 <HAL_TIM_PWM_Start+0x148>
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4a33      	ldr	r2, [pc, #204]	@ (800d6f0 <HAL_TIM_PWM_Start+0x210>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d101      	bne.n	800d62c <HAL_TIM_PWM_Start+0x14c>
 800d628:	2301      	movs	r3, #1
 800d62a:	e000      	b.n	800d62e <HAL_TIM_PWM_Start+0x14e>
 800d62c:	2300      	movs	r3, #0
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d007      	beq.n	800d642 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d640:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4a25      	ldr	r2, [pc, #148]	@ (800d6dc <HAL_TIM_PWM_Start+0x1fc>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d022      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d654:	d01d      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a26      	ldr	r2, [pc, #152]	@ (800d6f4 <HAL_TIM_PWM_Start+0x214>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d018      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4a24      	ldr	r2, [pc, #144]	@ (800d6f8 <HAL_TIM_PWM_Start+0x218>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d013      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a23      	ldr	r2, [pc, #140]	@ (800d6fc <HAL_TIM_PWM_Start+0x21c>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d00e      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a19      	ldr	r2, [pc, #100]	@ (800d6e0 <HAL_TIM_PWM_Start+0x200>)
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d009      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4a18      	ldr	r2, [pc, #96]	@ (800d6e4 <HAL_TIM_PWM_Start+0x204>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d004      	beq.n	800d692 <HAL_TIM_PWM_Start+0x1b2>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a18      	ldr	r2, [pc, #96]	@ (800d6f0 <HAL_TIM_PWM_Start+0x210>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d115      	bne.n	800d6be <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	689a      	ldr	r2, [r3, #8]
 800d698:	4b19      	ldr	r3, [pc, #100]	@ (800d700 <HAL_TIM_PWM_Start+0x220>)
 800d69a:	4013      	ands	r3, r2
 800d69c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2b06      	cmp	r3, #6
 800d6a2:	d015      	beq.n	800d6d0 <HAL_TIM_PWM_Start+0x1f0>
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6aa:	d011      	beq.n	800d6d0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f042 0201 	orr.w	r2, r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6bc:	e008      	b.n	800d6d0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f042 0201 	orr.w	r2, r2, #1
 800d6cc:	601a      	str	r2, [r3, #0]
 800d6ce:	e000      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}
 800d6dc:	40012c00 	.word	0x40012c00
 800d6e0:	40013400 	.word	0x40013400
 800d6e4:	40014000 	.word	0x40014000
 800d6e8:	40014400 	.word	0x40014400
 800d6ec:	40014800 	.word	0x40014800
 800d6f0:	40015000 	.word	0x40015000
 800d6f4:	40000400 	.word	0x40000400
 800d6f8:	40000800 	.word	0x40000800
 800d6fc:	40000c00 	.word	0x40000c00
 800d700:	00010007 	.word	0x00010007

0800d704 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d101      	bne.n	800d718 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d714:	2301      	movs	r3, #1
 800d716:	e04c      	b.n	800d7b2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	2b00      	cmp	r3, #0
 800d722:	d111      	bne.n	800d748 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d72c:	6878      	ldr	r0, [r7, #4]
 800d72e:	f001 fc1f 	bl	800ef70 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d736:	2b00      	cmp	r3, #0
 800d738:	d102      	bne.n	800d740 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	4a1f      	ldr	r2, [pc, #124]	@ (800d7bc <HAL_TIM_OnePulse_Init+0xb8>)
 800d73e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2202      	movs	r2, #2
 800d74c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681a      	ldr	r2, [r3, #0]
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	3304      	adds	r3, #4
 800d758:	4619      	mov	r1, r3
 800d75a:	4610      	mov	r0, r2
 800d75c:	f000 ff68 	bl	800e630 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f022 0208 	bic.w	r2, r2, #8
 800d76e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6819      	ldr	r1, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	430a      	orrs	r2, r1
 800d77e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2201      	movs	r2, #1
 800d7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d7b0:	2300      	movs	r3, #0
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3708      	adds	r7, #8
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	0800d7c1 	.word	0x0800d7c1

0800d7c0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d7e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d7ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7fc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7fe:	7bfb      	ldrb	r3, [r7, #15]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d108      	bne.n	800d816 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d804:	7bbb      	ldrb	r3, [r7, #14]
 800d806:	2b01      	cmp	r3, #1
 800d808:	d105      	bne.n	800d816 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d80a:	7b7b      	ldrb	r3, [r7, #13]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d102      	bne.n	800d816 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d810:	7b3b      	ldrb	r3, [r7, #12]
 800d812:	2b01      	cmp	r3, #1
 800d814:	d001      	beq.n	800d81a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	e059      	b.n	800d8ce <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2202      	movs	r2, #2
 800d82e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2202      	movs	r2, #2
 800d836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68da      	ldr	r2, [r3, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0202 	orr.w	r2, r2, #2
 800d848:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	68da      	ldr	r2, [r3, #12]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	f042 0204 	orr.w	r2, r2, #4
 800d858:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2201      	movs	r2, #1
 800d860:	2100      	movs	r1, #0
 800d862:	4618      	mov	r0, r3
 800d864:	f001 fb5e 	bl	800ef24 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2201      	movs	r2, #1
 800d86e:	2104      	movs	r1, #4
 800d870:	4618      	mov	r0, r3
 800d872:	f001 fb57 	bl	800ef24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	4a17      	ldr	r2, [pc, #92]	@ (800d8d8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800d87c:	4293      	cmp	r3, r2
 800d87e:	d018      	beq.n	800d8b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a15      	ldr	r2, [pc, #84]	@ (800d8dc <HAL_TIM_OnePulse_Start_IT+0x108>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d013      	beq.n	800d8b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	4a14      	ldr	r2, [pc, #80]	@ (800d8e0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800d890:	4293      	cmp	r3, r2
 800d892:	d00e      	beq.n	800d8b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a12      	ldr	r2, [pc, #72]	@ (800d8e4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d009      	beq.n	800d8b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a11      	ldr	r2, [pc, #68]	@ (800d8e8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800d8a4:	4293      	cmp	r3, r2
 800d8a6:	d004      	beq.n	800d8b2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a0f      	ldr	r2, [pc, #60]	@ (800d8ec <HAL_TIM_OnePulse_Start_IT+0x118>)
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	d101      	bne.n	800d8b6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e000      	b.n	800d8b8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d007      	beq.n	800d8cc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d8ca:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3710      	adds	r7, #16
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	40012c00 	.word	0x40012c00
 800d8dc:	40013400 	.word	0x40013400
 800d8e0:	40014000 	.word	0x40014000
 800d8e4:	40014400 	.word	0x40014400
 800d8e8:	40014800 	.word	0x40014800
 800d8ec:	40015000 	.word	0x40015000

0800d8f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d900:	2301      	movs	r3, #1
 800d902:	e0a2      	b.n	800da4a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d111      	bne.n	800d934 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2200      	movs	r2, #0
 800d914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f001 fb29 	bl	800ef70 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d922:	2b00      	cmp	r3, #0
 800d924:	d102      	bne.n	800d92c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	4a4a      	ldr	r2, [pc, #296]	@ (800da54 <HAL_TIM_Encoder_Init+0x164>)
 800d92a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2202      	movs	r2, #2
 800d938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689b      	ldr	r3, [r3, #8]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	6812      	ldr	r2, [r2, #0]
 800d946:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800d94a:	f023 0307 	bic.w	r3, r3, #7
 800d94e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	3304      	adds	r3, #4
 800d958:	4619      	mov	r1, r3
 800d95a:	4610      	mov	r0, r2
 800d95c:	f000 fe68 	bl	800e630 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	699b      	ldr	r3, [r3, #24]
 800d96e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d988:	f023 0303 	bic.w	r3, r3, #3
 800d98c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	689a      	ldr	r2, [r3, #8]
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	699b      	ldr	r3, [r3, #24]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	4313      	orrs	r3, r2
 800d99a:	693a      	ldr	r2, [r7, #16]
 800d99c:	4313      	orrs	r3, r2
 800d99e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d9a6:	f023 030c 	bic.w	r3, r3, #12
 800d9aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d9b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	68da      	ldr	r2, [r3, #12]
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	69db      	ldr	r3, [r3, #28]
 800d9c0:	021b      	lsls	r3, r3, #8
 800d9c2:	4313      	orrs	r3, r2
 800d9c4:	693a      	ldr	r2, [r7, #16]
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	011a      	lsls	r2, r3, #4
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	6a1b      	ldr	r3, [r3, #32]
 800d9d4:	031b      	lsls	r3, r3, #12
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	693a      	ldr	r2, [r7, #16]
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d9e4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d9ec:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	011b      	lsls	r3, r3, #4
 800d9f8:	4313      	orrs	r3, r2
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	697a      	ldr	r2, [r7, #20]
 800da06:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	693a      	ldr	r2, [r7, #16]
 800da0e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da48:	2300      	movs	r3, #0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	0800949d 	.word	0x0800949d

0800da58 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800da68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800da70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d110      	bne.n	800daaa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da88:	7bfb      	ldrb	r3, [r7, #15]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d102      	bne.n	800da94 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800da8e:	7b7b      	ldrb	r3, [r7, #13]
 800da90:	2b01      	cmp	r3, #1
 800da92:	d001      	beq.n	800da98 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e069      	b.n	800db6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2202      	movs	r2, #2
 800da9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2202      	movs	r2, #2
 800daa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800daa8:	e031      	b.n	800db0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	2b04      	cmp	r3, #4
 800daae:	d110      	bne.n	800dad2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d102      	bne.n	800dabc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dab6:	7b3b      	ldrb	r3, [r7, #12]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d001      	beq.n	800dac0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e055      	b.n	800db6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dad0:	e01d      	b.n	800db0e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dad2:	7bfb      	ldrb	r3, [r7, #15]
 800dad4:	2b01      	cmp	r3, #1
 800dad6:	d108      	bne.n	800daea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d105      	bne.n	800daea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dade:	7b7b      	ldrb	r3, [r7, #13]
 800dae0:	2b01      	cmp	r3, #1
 800dae2:	d102      	bne.n	800daea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dae4:	7b3b      	ldrb	r3, [r7, #12]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d001      	beq.n	800daee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	e03e      	b.n	800db6c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2202      	movs	r2, #2
 800daf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2202      	movs	r2, #2
 800dafa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2202      	movs	r2, #2
 800db02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2202      	movs	r2, #2
 800db0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d003      	beq.n	800db1c <HAL_TIM_Encoder_Start+0xc4>
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	2b04      	cmp	r3, #4
 800db18:	d008      	beq.n	800db2c <HAL_TIM_Encoder_Start+0xd4>
 800db1a:	e00f      	b.n	800db3c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2201      	movs	r2, #1
 800db22:	2100      	movs	r1, #0
 800db24:	4618      	mov	r0, r3
 800db26:	f001 f9fd 	bl	800ef24 <TIM_CCxChannelCmd>
      break;
 800db2a:	e016      	b.n	800db5a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2201      	movs	r2, #1
 800db32:	2104      	movs	r1, #4
 800db34:	4618      	mov	r0, r3
 800db36:	f001 f9f5 	bl	800ef24 <TIM_CCxChannelCmd>
      break;
 800db3a:	e00e      	b.n	800db5a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2201      	movs	r2, #1
 800db42:	2100      	movs	r1, #0
 800db44:	4618      	mov	r0, r3
 800db46:	f001 f9ed 	bl	800ef24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	2201      	movs	r2, #1
 800db50:	2104      	movs	r1, #4
 800db52:	4618      	mov	r0, r3
 800db54:	f001 f9e6 	bl	800ef24 <TIM_CCxChannelCmd>
      break;
 800db58:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f042 0201 	orr.w	r2, r2, #1
 800db68:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68db      	ldr	r3, [r3, #12]
 800db82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	f003 0302 	and.w	r3, r3, #2
 800db92:	2b00      	cmp	r3, #0
 800db94:	d026      	beq.n	800dbe4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	f003 0302 	and.w	r3, r3, #2
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d021      	beq.n	800dbe4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f06f 0202 	mvn.w	r2, #2
 800dba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2201      	movs	r2, #1
 800dbae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	699b      	ldr	r3, [r3, #24]
 800dbb6:	f003 0303 	and.w	r3, r3, #3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d005      	beq.n	800dbca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	4798      	blx	r3
 800dbc8:	e009      	b.n	800dbde <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	f003 0304 	and.w	r3, r3, #4
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d026      	beq.n	800dc3c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d021      	beq.n	800dc3c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	f06f 0204 	mvn.w	r2, #4
 800dc00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2202      	movs	r2, #2
 800dc06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	699b      	ldr	r3, [r3, #24]
 800dc0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d005      	beq.n	800dc22 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	4798      	blx	r3
 800dc20:	e009      	b.n	800dc36 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	f003 0308 	and.w	r3, r3, #8
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d026      	beq.n	800dc94 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f003 0308 	and.w	r3, r3, #8
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d021      	beq.n	800dc94 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f06f 0208 	mvn.w	r2, #8
 800dc58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2204      	movs	r2, #4
 800dc5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	69db      	ldr	r3, [r3, #28]
 800dc66:	f003 0303 	and.w	r3, r3, #3
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d005      	beq.n	800dc7a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	4798      	blx	r3
 800dc78:	e009      	b.n	800dc8e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2200      	movs	r2, #0
 800dc92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f003 0310 	and.w	r3, r3, #16
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d026      	beq.n	800dcec <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f003 0310 	and.w	r3, r3, #16
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d021      	beq.n	800dcec <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f06f 0210 	mvn.w	r2, #16
 800dcb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2208      	movs	r2, #8
 800dcb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d005      	beq.n	800dcd2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	4798      	blx	r3
 800dcd0:	e009      	b.n	800dce6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dcec:	68bb      	ldr	r3, [r7, #8]
 800dcee:	f003 0301 	and.w	r3, r3, #1
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00e      	beq.n	800dd14 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d009      	beq.n	800dd14 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f06f 0201 	mvn.w	r2, #1
 800dd08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d104      	bne.n	800dd28 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00e      	beq.n	800dd46 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d009      	beq.n	800dd46 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dd3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d00e      	beq.n	800dd6e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d009      	beq.n	800dd6e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dd62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00e      	beq.n	800dd96 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d009      	beq.n	800dd96 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dd8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	f003 0320 	and.w	r3, r3, #32
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00e      	beq.n	800ddbe <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f003 0320 	and.w	r3, r3, #32
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d009      	beq.n	800ddbe <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f06f 0220 	mvn.w	r2, #32
 800ddb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d00e      	beq.n	800dde6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d009      	beq.n	800dde6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ddda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d00e      	beq.n	800de0e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d009      	beq.n	800de0e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800de02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00e      	beq.n	800de36 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d009      	beq.n	800de36 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800de2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d00e      	beq.n	800de5e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de46:	2b00      	cmp	r3, #0
 800de48:	d009      	beq.n	800de5e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800de52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de5e:	bf00      	nop
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
	...

0800de68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de74:	2300      	movs	r3, #0
 800de76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de7e:	2b01      	cmp	r3, #1
 800de80:	d101      	bne.n	800de86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de82:	2302      	movs	r3, #2
 800de84:	e0ff      	b.n	800e086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2201      	movs	r2, #1
 800de8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b14      	cmp	r3, #20
 800de92:	f200 80f0 	bhi.w	800e076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de96:	a201      	add	r2, pc, #4	@ (adr r2, 800de9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de9c:	0800def1 	.word	0x0800def1
 800dea0:	0800e077 	.word	0x0800e077
 800dea4:	0800e077 	.word	0x0800e077
 800dea8:	0800e077 	.word	0x0800e077
 800deac:	0800df31 	.word	0x0800df31
 800deb0:	0800e077 	.word	0x0800e077
 800deb4:	0800e077 	.word	0x0800e077
 800deb8:	0800e077 	.word	0x0800e077
 800debc:	0800df73 	.word	0x0800df73
 800dec0:	0800e077 	.word	0x0800e077
 800dec4:	0800e077 	.word	0x0800e077
 800dec8:	0800e077 	.word	0x0800e077
 800decc:	0800dfb3 	.word	0x0800dfb3
 800ded0:	0800e077 	.word	0x0800e077
 800ded4:	0800e077 	.word	0x0800e077
 800ded8:	0800e077 	.word	0x0800e077
 800dedc:	0800dff5 	.word	0x0800dff5
 800dee0:	0800e077 	.word	0x0800e077
 800dee4:	0800e077 	.word	0x0800e077
 800dee8:	0800e077 	.word	0x0800e077
 800deec:	0800e035 	.word	0x0800e035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	68b9      	ldr	r1, [r7, #8]
 800def6:	4618      	mov	r0, r3
 800def8:	f000 fc4e 	bl	800e798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f042 0208 	orr.w	r2, r2, #8
 800df0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	699a      	ldr	r2, [r3, #24]
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 0204 	bic.w	r2, r2, #4
 800df1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6999      	ldr	r1, [r3, #24]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	691a      	ldr	r2, [r3, #16]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	430a      	orrs	r2, r1
 800df2c:	619a      	str	r2, [r3, #24]
      break;
 800df2e:	e0a5      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	68b9      	ldr	r1, [r7, #8]
 800df36:	4618      	mov	r0, r3
 800df38:	f000 fcc8 	bl	800e8cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	699a      	ldr	r2, [r3, #24]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	699a      	ldr	r2, [r3, #24]
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	6999      	ldr	r1, [r3, #24]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	691b      	ldr	r3, [r3, #16]
 800df66:	021a      	lsls	r2, r3, #8
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	430a      	orrs	r2, r1
 800df6e:	619a      	str	r2, [r3, #24]
      break;
 800df70:	e084      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fd3b 	bl	800e9f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	69da      	ldr	r2, [r3, #28]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f042 0208 	orr.w	r2, r2, #8
 800df8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	69da      	ldr	r2, [r3, #28]
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f022 0204 	bic.w	r2, r2, #4
 800df9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	69d9      	ldr	r1, [r3, #28]
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	691a      	ldr	r2, [r3, #16]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	430a      	orrs	r2, r1
 800dfae:	61da      	str	r2, [r3, #28]
      break;
 800dfb0:	e064      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f000 fdad 	bl	800eb18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69da      	ldr	r2, [r3, #28]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	69da      	ldr	r2, [r3, #28]
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	69d9      	ldr	r1, [r3, #28]
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	691b      	ldr	r3, [r3, #16]
 800dfe8:	021a      	lsls	r2, r3, #8
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	430a      	orrs	r2, r1
 800dff0:	61da      	str	r2, [r3, #28]
      break;
 800dff2:	e043      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f000 fe20 	bl	800ec40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f042 0208 	orr.w	r2, r2, #8
 800e00e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f022 0204 	bic.w	r2, r2, #4
 800e01e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	691a      	ldr	r2, [r3, #16]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	430a      	orrs	r2, r1
 800e030:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e032:	e023      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	68b9      	ldr	r1, [r7, #8]
 800e03a:	4618      	mov	r0, r3
 800e03c:	f000 fe6a 	bl	800ed14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e04e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e05e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	691b      	ldr	r3, [r3, #16]
 800e06a:	021a      	lsls	r2, r3, #8
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	430a      	orrs	r2, r1
 800e072:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e074:	e002      	b.n	800e07c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	75fb      	strb	r3, [r7, #23]
      break;
 800e07a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e084:	7dfb      	ldrb	r3, [r7, #23]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3718      	adds	r7, #24
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop

0800e090 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d101      	bne.n	800e0ac <HAL_TIM_ConfigClockSource+0x1c>
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	e0f6      	b.n	800e29a <HAL_TIM_ConfigClockSource+0x20a>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2202      	movs	r2, #2
 800e0b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	689b      	ldr	r3, [r3, #8]
 800e0c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e0ca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e0ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	4a6f      	ldr	r2, [pc, #444]	@ (800e2a4 <HAL_TIM_ConfigClockSource+0x214>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	f000 80c1 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e0ec:	4a6d      	ldr	r2, [pc, #436]	@ (800e2a4 <HAL_TIM_ConfigClockSource+0x214>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	f200 80c6 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0f4:	4a6c      	ldr	r2, [pc, #432]	@ (800e2a8 <HAL_TIM_ConfigClockSource+0x218>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	f000 80b9 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e0fc:	4a6a      	ldr	r2, [pc, #424]	@ (800e2a8 <HAL_TIM_ConfigClockSource+0x218>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	f200 80be 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e104:	4a69      	ldr	r2, [pc, #420]	@ (800e2ac <HAL_TIM_ConfigClockSource+0x21c>)
 800e106:	4293      	cmp	r3, r2
 800e108:	f000 80b1 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e10c:	4a67      	ldr	r2, [pc, #412]	@ (800e2ac <HAL_TIM_ConfigClockSource+0x21c>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	f200 80b6 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e114:	4a66      	ldr	r2, [pc, #408]	@ (800e2b0 <HAL_TIM_ConfigClockSource+0x220>)
 800e116:	4293      	cmp	r3, r2
 800e118:	f000 80a9 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e11c:	4a64      	ldr	r2, [pc, #400]	@ (800e2b0 <HAL_TIM_ConfigClockSource+0x220>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	f200 80ae 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e124:	4a63      	ldr	r2, [pc, #396]	@ (800e2b4 <HAL_TIM_ConfigClockSource+0x224>)
 800e126:	4293      	cmp	r3, r2
 800e128:	f000 80a1 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e12c:	4a61      	ldr	r2, [pc, #388]	@ (800e2b4 <HAL_TIM_ConfigClockSource+0x224>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	f200 80a6 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e134:	4a60      	ldr	r2, [pc, #384]	@ (800e2b8 <HAL_TIM_ConfigClockSource+0x228>)
 800e136:	4293      	cmp	r3, r2
 800e138:	f000 8099 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e13c:	4a5e      	ldr	r2, [pc, #376]	@ (800e2b8 <HAL_TIM_ConfigClockSource+0x228>)
 800e13e:	4293      	cmp	r3, r2
 800e140:	f200 809e 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e144:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e148:	f000 8091 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e14c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e150:	f200 8096 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e158:	f000 8089 	beq.w	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e15c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e160:	f200 808e 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e168:	d03e      	beq.n	800e1e8 <HAL_TIM_ConfigClockSource+0x158>
 800e16a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e16e:	f200 8087 	bhi.w	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e176:	f000 8086 	beq.w	800e286 <HAL_TIM_ConfigClockSource+0x1f6>
 800e17a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e17e:	d87f      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e180:	2b70      	cmp	r3, #112	@ 0x70
 800e182:	d01a      	beq.n	800e1ba <HAL_TIM_ConfigClockSource+0x12a>
 800e184:	2b70      	cmp	r3, #112	@ 0x70
 800e186:	d87b      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e188:	2b60      	cmp	r3, #96	@ 0x60
 800e18a:	d050      	beq.n	800e22e <HAL_TIM_ConfigClockSource+0x19e>
 800e18c:	2b60      	cmp	r3, #96	@ 0x60
 800e18e:	d877      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e190:	2b50      	cmp	r3, #80	@ 0x50
 800e192:	d03c      	beq.n	800e20e <HAL_TIM_ConfigClockSource+0x17e>
 800e194:	2b50      	cmp	r3, #80	@ 0x50
 800e196:	d873      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e198:	2b40      	cmp	r3, #64	@ 0x40
 800e19a:	d058      	beq.n	800e24e <HAL_TIM_ConfigClockSource+0x1be>
 800e19c:	2b40      	cmp	r3, #64	@ 0x40
 800e19e:	d86f      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e1a0:	2b30      	cmp	r3, #48	@ 0x30
 800e1a2:	d064      	beq.n	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e1a4:	2b30      	cmp	r3, #48	@ 0x30
 800e1a6:	d86b      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e1a8:	2b20      	cmp	r3, #32
 800e1aa:	d060      	beq.n	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e1ac:	2b20      	cmp	r3, #32
 800e1ae:	d867      	bhi.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d05c      	beq.n	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e1b4:	2b10      	cmp	r3, #16
 800e1b6:	d05a      	beq.n	800e26e <HAL_TIM_ConfigClockSource+0x1de>
 800e1b8:	e062      	b.n	800e280 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1ca:	f000 fe8b 	bl	800eee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	689b      	ldr	r3, [r3, #8]
 800e1d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e1dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68ba      	ldr	r2, [r7, #8]
 800e1e4:	609a      	str	r2, [r3, #8]
      break;
 800e1e6:	e04f      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1f8:	f000 fe74 	bl	800eee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	689a      	ldr	r2, [r3, #8]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e20a:	609a      	str	r2, [r3, #8]
      break;
 800e20c:	e03c      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e21a:	461a      	mov	r2, r3
 800e21c:	f000 fde6 	bl	800edec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2150      	movs	r1, #80	@ 0x50
 800e226:	4618      	mov	r0, r3
 800e228:	f000 fe3f 	bl	800eeaa <TIM_ITRx_SetConfig>
      break;
 800e22c:	e02c      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e23a:	461a      	mov	r2, r3
 800e23c:	f000 fe05 	bl	800ee4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	2160      	movs	r1, #96	@ 0x60
 800e246:	4618      	mov	r0, r3
 800e248:	f000 fe2f 	bl	800eeaa <TIM_ITRx_SetConfig>
      break;
 800e24c:	e01c      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e25a:	461a      	mov	r2, r3
 800e25c:	f000 fdc6 	bl	800edec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2140      	movs	r1, #64	@ 0x40
 800e266:	4618      	mov	r0, r3
 800e268:	f000 fe1f 	bl	800eeaa <TIM_ITRx_SetConfig>
      break;
 800e26c:	e00c      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4619      	mov	r1, r3
 800e278:	4610      	mov	r0, r2
 800e27a:	f000 fe16 	bl	800eeaa <TIM_ITRx_SetConfig>
      break;
 800e27e:	e003      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e280:	2301      	movs	r3, #1
 800e282:	73fb      	strb	r3, [r7, #15]
      break;
 800e284:	e000      	b.n	800e288 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2201      	movs	r2, #1
 800e28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e298:	7bfb      	ldrb	r3, [r7, #15]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	00100070 	.word	0x00100070
 800e2a8:	00100060 	.word	0x00100060
 800e2ac:	00100050 	.word	0x00100050
 800e2b0:	00100040 	.word	0x00100040
 800e2b4:	00100030 	.word	0x00100030
 800e2b8:	00100020 	.word	0x00100020

0800e2bc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800e2c4:	bf00      	nop
 800e2c6:	370c      	adds	r7, #12
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr

0800e2d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e2d8:	bf00      	nop
 800e2da:	370c      	adds	r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e2:	4770      	bx	lr

0800e2e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800e300:	bf00      	nop
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e314:	bf00      	nop
 800e316:	370c      	adds	r7, #12
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr

0800e320 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e328:	bf00      	nop
 800e32a:	370c      	adds	r7, #12
 800e32c:	46bd      	mov	sp, r7
 800e32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e332:	4770      	bx	lr

0800e334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e33c:	bf00      	nop
 800e33e:	370c      	adds	r7, #12
 800e340:	46bd      	mov	sp, r7
 800e342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e346:	4770      	bx	lr

0800e348 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr

0800e35c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e364:	bf00      	nop
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800e370:	b480      	push	{r7}
 800e372:	b087      	sub	sp, #28
 800e374:	af00      	add	r7, sp, #0
 800e376:	60f8      	str	r0, [r7, #12]
 800e378:	460b      	mov	r3, r1
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800e388:	2301      	movs	r3, #1
 800e38a:	e14a      	b.n	800e622 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b01      	cmp	r3, #1
 800e396:	f040 80dd 	bne.w	800e554 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800e39a:	7afb      	ldrb	r3, [r7, #11]
 800e39c:	2b1f      	cmp	r3, #31
 800e39e:	f200 80d6 	bhi.w	800e54e <HAL_TIM_RegisterCallback+0x1de>
 800e3a2:	a201      	add	r2, pc, #4	@ (adr r2, 800e3a8 <HAL_TIM_RegisterCallback+0x38>)
 800e3a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a8:	0800e429 	.word	0x0800e429
 800e3ac:	0800e431 	.word	0x0800e431
 800e3b0:	0800e439 	.word	0x0800e439
 800e3b4:	0800e441 	.word	0x0800e441
 800e3b8:	0800e449 	.word	0x0800e449
 800e3bc:	0800e451 	.word	0x0800e451
 800e3c0:	0800e459 	.word	0x0800e459
 800e3c4:	0800e461 	.word	0x0800e461
 800e3c8:	0800e469 	.word	0x0800e469
 800e3cc:	0800e471 	.word	0x0800e471
 800e3d0:	0800e479 	.word	0x0800e479
 800e3d4:	0800e481 	.word	0x0800e481
 800e3d8:	0800e489 	.word	0x0800e489
 800e3dc:	0800e491 	.word	0x0800e491
 800e3e0:	0800e49b 	.word	0x0800e49b
 800e3e4:	0800e4a5 	.word	0x0800e4a5
 800e3e8:	0800e4af 	.word	0x0800e4af
 800e3ec:	0800e4b9 	.word	0x0800e4b9
 800e3f0:	0800e4c3 	.word	0x0800e4c3
 800e3f4:	0800e4cd 	.word	0x0800e4cd
 800e3f8:	0800e4d7 	.word	0x0800e4d7
 800e3fc:	0800e4e1 	.word	0x0800e4e1
 800e400:	0800e4eb 	.word	0x0800e4eb
 800e404:	0800e4f5 	.word	0x0800e4f5
 800e408:	0800e4ff 	.word	0x0800e4ff
 800e40c:	0800e509 	.word	0x0800e509
 800e410:	0800e513 	.word	0x0800e513
 800e414:	0800e51d 	.word	0x0800e51d
 800e418:	0800e527 	.word	0x0800e527
 800e41c:	0800e531 	.word	0x0800e531
 800e420:	0800e53b 	.word	0x0800e53b
 800e424:	0800e545 	.word	0x0800e545
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e42e:	e0f7      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e436:	e0f3      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e43e:	e0ef      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e446:	e0eb      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e44e:	e0e7      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e456:	e0e3      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e45e:	e0df      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e466:	e0db      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e46e:	e0d7      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e476:	e0d3      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e47e:	e0cf      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e486:	e0cb      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	687a      	ldr	r2, [r7, #4]
 800e48c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e48e:	e0c7      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	687a      	ldr	r2, [r7, #4]
 800e494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e498:	e0c2      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	687a      	ldr	r2, [r7, #4]
 800e49e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e4a2:	e0bd      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800e4ac:	e0b8      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800e4b6:	e0b3      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	687a      	ldr	r2, [r7, #4]
 800e4bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800e4c0:	e0ae      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e4ca:	e0a9      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e4d4:	e0a4      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	687a      	ldr	r2, [r7, #4]
 800e4da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e4de:	e09f      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e4e8:	e09a      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	687a      	ldr	r2, [r7, #4]
 800e4ee:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e4f2:	e095      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	687a      	ldr	r2, [r7, #4]
 800e4f8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e4fc:	e090      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e506:	e08b      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e510:	e086      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e51a:	e081      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e524:	e07c      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	687a      	ldr	r2, [r7, #4]
 800e52a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e52e:	e077      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	687a      	ldr	r2, [r7, #4]
 800e534:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800e538:	e072      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e542:	e06d      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e54c:	e068      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e54e:	2301      	movs	r3, #1
 800e550:	75fb      	strb	r3, [r7, #23]
        break;
 800e552:	e065      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e55a:	b2db      	uxtb	r3, r3
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d15d      	bne.n	800e61c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800e560:	7afb      	ldrb	r3, [r7, #11]
 800e562:	2b0d      	cmp	r3, #13
 800e564:	d857      	bhi.n	800e616 <HAL_TIM_RegisterCallback+0x2a6>
 800e566:	a201      	add	r2, pc, #4	@ (adr r2, 800e56c <HAL_TIM_RegisterCallback+0x1fc>)
 800e568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e56c:	0800e5a5 	.word	0x0800e5a5
 800e570:	0800e5ad 	.word	0x0800e5ad
 800e574:	0800e5b5 	.word	0x0800e5b5
 800e578:	0800e5bd 	.word	0x0800e5bd
 800e57c:	0800e5c5 	.word	0x0800e5c5
 800e580:	0800e5cd 	.word	0x0800e5cd
 800e584:	0800e5d5 	.word	0x0800e5d5
 800e588:	0800e5dd 	.word	0x0800e5dd
 800e58c:	0800e5e5 	.word	0x0800e5e5
 800e590:	0800e5ed 	.word	0x0800e5ed
 800e594:	0800e5f5 	.word	0x0800e5f5
 800e598:	0800e5fd 	.word	0x0800e5fd
 800e59c:	0800e605 	.word	0x0800e605
 800e5a0:	0800e60d 	.word	0x0800e60d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e5aa:	e039      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e5b2:	e035      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e5ba:	e031      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e5c2:	e02d      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e5ca:	e029      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e5d2:	e025      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e5da:	e021      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e5e2:	e01d      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e5ea:	e019      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e5f2:	e015      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e5fa:	e011      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e602:	e00d      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e60a:	e009      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e614:	e004      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	75fb      	strb	r3, [r7, #23]
        break;
 800e61a:	e001      	b.n	800e620 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800e61c:	2301      	movs	r3, #1
 800e61e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e620:	7dfb      	ldrb	r3, [r7, #23]
}
 800e622:	4618      	mov	r0, r3
 800e624:	371c      	adds	r7, #28
 800e626:	46bd      	mov	sp, r7
 800e628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop

0800e630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a4c      	ldr	r2, [pc, #304]	@ (800e774 <TIM_Base_SetConfig+0x144>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d017      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e64e:	d013      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a49      	ldr	r2, [pc, #292]	@ (800e778 <TIM_Base_SetConfig+0x148>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d00f      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a48      	ldr	r2, [pc, #288]	@ (800e77c <TIM_Base_SetConfig+0x14c>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d00b      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a47      	ldr	r2, [pc, #284]	@ (800e780 <TIM_Base_SetConfig+0x150>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d007      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4a46      	ldr	r2, [pc, #280]	@ (800e784 <TIM_Base_SetConfig+0x154>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d003      	beq.n	800e678 <TIM_Base_SetConfig+0x48>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4a45      	ldr	r2, [pc, #276]	@ (800e788 <TIM_Base_SetConfig+0x158>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d108      	bne.n	800e68a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e67e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	685b      	ldr	r3, [r3, #4]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	4313      	orrs	r3, r2
 800e688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a39      	ldr	r2, [pc, #228]	@ (800e774 <TIM_Base_SetConfig+0x144>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d023      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e698:	d01f      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4a36      	ldr	r2, [pc, #216]	@ (800e778 <TIM_Base_SetConfig+0x148>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d01b      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4a35      	ldr	r2, [pc, #212]	@ (800e77c <TIM_Base_SetConfig+0x14c>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d017      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a34      	ldr	r2, [pc, #208]	@ (800e780 <TIM_Base_SetConfig+0x150>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d013      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a33      	ldr	r2, [pc, #204]	@ (800e784 <TIM_Base_SetConfig+0x154>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d00f      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a33      	ldr	r2, [pc, #204]	@ (800e78c <TIM_Base_SetConfig+0x15c>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d00b      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a32      	ldr	r2, [pc, #200]	@ (800e790 <TIM_Base_SetConfig+0x160>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d007      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4a31      	ldr	r2, [pc, #196]	@ (800e794 <TIM_Base_SetConfig+0x164>)
 800e6ce:	4293      	cmp	r3, r2
 800e6d0:	d003      	beq.n	800e6da <TIM_Base_SetConfig+0xaa>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4a2c      	ldr	r2, [pc, #176]	@ (800e788 <TIM_Base_SetConfig+0x158>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d108      	bne.n	800e6ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	68fa      	ldr	r2, [r7, #12]
 800e6e8:	4313      	orrs	r3, r2
 800e6ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	689a      	ldr	r2, [r3, #8]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e708:	683b      	ldr	r3, [r7, #0]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a18      	ldr	r2, [pc, #96]	@ (800e774 <TIM_Base_SetConfig+0x144>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d013      	beq.n	800e740 <TIM_Base_SetConfig+0x110>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	4a1a      	ldr	r2, [pc, #104]	@ (800e784 <TIM_Base_SetConfig+0x154>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d00f      	beq.n	800e740 <TIM_Base_SetConfig+0x110>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	4a1a      	ldr	r2, [pc, #104]	@ (800e78c <TIM_Base_SetConfig+0x15c>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d00b      	beq.n	800e740 <TIM_Base_SetConfig+0x110>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a19      	ldr	r2, [pc, #100]	@ (800e790 <TIM_Base_SetConfig+0x160>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d007      	beq.n	800e740 <TIM_Base_SetConfig+0x110>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a18      	ldr	r2, [pc, #96]	@ (800e794 <TIM_Base_SetConfig+0x164>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d003      	beq.n	800e740 <TIM_Base_SetConfig+0x110>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a13      	ldr	r2, [pc, #76]	@ (800e788 <TIM_Base_SetConfig+0x158>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d103      	bne.n	800e748 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	691a      	ldr	r2, [r3, #16]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2201      	movs	r2, #1
 800e74c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	f003 0301 	and.w	r3, r3, #1
 800e756:	2b01      	cmp	r3, #1
 800e758:	d105      	bne.n	800e766 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	691b      	ldr	r3, [r3, #16]
 800e75e:	f023 0201 	bic.w	r2, r3, #1
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	611a      	str	r2, [r3, #16]
  }
}
 800e766:	bf00      	nop
 800e768:	3714      	adds	r7, #20
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr
 800e772:	bf00      	nop
 800e774:	40012c00 	.word	0x40012c00
 800e778:	40000400 	.word	0x40000400
 800e77c:	40000800 	.word	0x40000800
 800e780:	40000c00 	.word	0x40000c00
 800e784:	40013400 	.word	0x40013400
 800e788:	40015000 	.word	0x40015000
 800e78c:	40014000 	.word	0x40014000
 800e790:	40014400 	.word	0x40014400
 800e794:	40014800 	.word	0x40014800

0800e798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e798:	b480      	push	{r7}
 800e79a:	b087      	sub	sp, #28
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a1b      	ldr	r3, [r3, #32]
 800e7ac:	f023 0201 	bic.w	r2, r3, #1
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	685b      	ldr	r3, [r3, #4]
 800e7b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f023 0303 	bic.w	r3, r3, #3
 800e7d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e7de:	697b      	ldr	r3, [r7, #20]
 800e7e0:	f023 0302 	bic.w	r3, r3, #2
 800e7e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a30      	ldr	r2, [pc, #192]	@ (800e8b4 <TIM_OC1_SetConfig+0x11c>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d013      	beq.n	800e820 <TIM_OC1_SetConfig+0x88>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a2f      	ldr	r2, [pc, #188]	@ (800e8b8 <TIM_OC1_SetConfig+0x120>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d00f      	beq.n	800e820 <TIM_OC1_SetConfig+0x88>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a2e      	ldr	r2, [pc, #184]	@ (800e8bc <TIM_OC1_SetConfig+0x124>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d00b      	beq.n	800e820 <TIM_OC1_SetConfig+0x88>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a2d      	ldr	r2, [pc, #180]	@ (800e8c0 <TIM_OC1_SetConfig+0x128>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d007      	beq.n	800e820 <TIM_OC1_SetConfig+0x88>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a2c      	ldr	r2, [pc, #176]	@ (800e8c4 <TIM_OC1_SetConfig+0x12c>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d003      	beq.n	800e820 <TIM_OC1_SetConfig+0x88>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a2b      	ldr	r2, [pc, #172]	@ (800e8c8 <TIM_OC1_SetConfig+0x130>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d10c      	bne.n	800e83a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	f023 0308 	bic.w	r3, r3, #8
 800e826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	68db      	ldr	r3, [r3, #12]
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	4313      	orrs	r3, r2
 800e830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f023 0304 	bic.w	r3, r3, #4
 800e838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b4 <TIM_OC1_SetConfig+0x11c>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d013      	beq.n	800e86a <TIM_OC1_SetConfig+0xd2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b8 <TIM_OC1_SetConfig+0x120>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00f      	beq.n	800e86a <TIM_OC1_SetConfig+0xd2>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8bc <TIM_OC1_SetConfig+0x124>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d00b      	beq.n	800e86a <TIM_OC1_SetConfig+0xd2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a1a      	ldr	r2, [pc, #104]	@ (800e8c0 <TIM_OC1_SetConfig+0x128>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d007      	beq.n	800e86a <TIM_OC1_SetConfig+0xd2>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a19      	ldr	r2, [pc, #100]	@ (800e8c4 <TIM_OC1_SetConfig+0x12c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d003      	beq.n	800e86a <TIM_OC1_SetConfig+0xd2>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4a18      	ldr	r2, [pc, #96]	@ (800e8c8 <TIM_OC1_SetConfig+0x130>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d111      	bne.n	800e88e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e870:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e878:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	4313      	orrs	r3, r2
 800e882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	699b      	ldr	r3, [r3, #24]
 800e888:	693a      	ldr	r2, [r7, #16]
 800e88a:	4313      	orrs	r3, r2
 800e88c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	693a      	ldr	r2, [r7, #16]
 800e892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68fa      	ldr	r2, [r7, #12]
 800e898:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	685a      	ldr	r2, [r3, #4]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	697a      	ldr	r2, [r7, #20]
 800e8a6:	621a      	str	r2, [r3, #32]
}
 800e8a8:	bf00      	nop
 800e8aa:	371c      	adds	r7, #28
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b2:	4770      	bx	lr
 800e8b4:	40012c00 	.word	0x40012c00
 800e8b8:	40013400 	.word	0x40013400
 800e8bc:	40014000 	.word	0x40014000
 800e8c0:	40014400 	.word	0x40014400
 800e8c4:	40014800 	.word	0x40014800
 800e8c8:	40015000 	.word	0x40015000

0800e8cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b087      	sub	sp, #28
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a1b      	ldr	r3, [r3, #32]
 800e8da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6a1b      	ldr	r3, [r3, #32]
 800e8e0:	f023 0210 	bic.w	r2, r3, #16
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e8fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	021b      	lsls	r3, r3, #8
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	4313      	orrs	r3, r2
 800e912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	f023 0320 	bic.w	r3, r3, #32
 800e91a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	011b      	lsls	r3, r3, #4
 800e922:	697a      	ldr	r2, [r7, #20]
 800e924:	4313      	orrs	r3, r2
 800e926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a2c      	ldr	r2, [pc, #176]	@ (800e9dc <TIM_OC2_SetConfig+0x110>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d007      	beq.n	800e940 <TIM_OC2_SetConfig+0x74>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a2b      	ldr	r2, [pc, #172]	@ (800e9e0 <TIM_OC2_SetConfig+0x114>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d003      	beq.n	800e940 <TIM_OC2_SetConfig+0x74>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a2a      	ldr	r2, [pc, #168]	@ (800e9e4 <TIM_OC2_SetConfig+0x118>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d10d      	bne.n	800e95c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e940:	697b      	ldr	r3, [r7, #20]
 800e942:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e948:	683b      	ldr	r3, [r7, #0]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	011b      	lsls	r3, r3, #4
 800e94e:	697a      	ldr	r2, [r7, #20]
 800e950:	4313      	orrs	r3, r2
 800e952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e95a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9dc <TIM_OC2_SetConfig+0x110>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d013      	beq.n	800e98c <TIM_OC2_SetConfig+0xc0>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e0 <TIM_OC2_SetConfig+0x114>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d00f      	beq.n	800e98c <TIM_OC2_SetConfig+0xc0>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e8 <TIM_OC2_SetConfig+0x11c>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d00b      	beq.n	800e98c <TIM_OC2_SetConfig+0xc0>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a1d      	ldr	r2, [pc, #116]	@ (800e9ec <TIM_OC2_SetConfig+0x120>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d007      	beq.n	800e98c <TIM_OC2_SetConfig+0xc0>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4a1c      	ldr	r2, [pc, #112]	@ (800e9f0 <TIM_OC2_SetConfig+0x124>)
 800e980:	4293      	cmp	r3, r2
 800e982:	d003      	beq.n	800e98c <TIM_OC2_SetConfig+0xc0>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4a17      	ldr	r2, [pc, #92]	@ (800e9e4 <TIM_OC2_SetConfig+0x118>)
 800e988:	4293      	cmp	r3, r2
 800e98a:	d113      	bne.n	800e9b4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e992:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e99a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	695b      	ldr	r3, [r3, #20]
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	4313      	orrs	r3, r2
 800e9a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	699b      	ldr	r3, [r3, #24]
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	4313      	orrs	r3, r2
 800e9b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	697a      	ldr	r2, [r7, #20]
 800e9cc:	621a      	str	r2, [r3, #32]
}
 800e9ce:	bf00      	nop
 800e9d0:	371c      	adds	r7, #28
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	40012c00 	.word	0x40012c00
 800e9e0:	40013400 	.word	0x40013400
 800e9e4:	40015000 	.word	0x40015000
 800e9e8:	40014000 	.word	0x40014000
 800e9ec:	40014400 	.word	0x40014400
 800e9f0:	40014800 	.word	0x40014800

0800e9f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b087      	sub	sp, #28
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	6a1b      	ldr	r3, [r3, #32]
 800ea02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6a1b      	ldr	r3, [r3, #32]
 800ea08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	69db      	ldr	r3, [r3, #28]
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f023 0303 	bic.w	r3, r3, #3
 800ea2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	4313      	orrs	r3, r2
 800ea38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	021b      	lsls	r3, r3, #8
 800ea48:	697a      	ldr	r2, [r7, #20]
 800ea4a:	4313      	orrs	r3, r2
 800ea4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a2b      	ldr	r2, [pc, #172]	@ (800eb00 <TIM_OC3_SetConfig+0x10c>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d007      	beq.n	800ea66 <TIM_OC3_SetConfig+0x72>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a2a      	ldr	r2, [pc, #168]	@ (800eb04 <TIM_OC3_SetConfig+0x110>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d003      	beq.n	800ea66 <TIM_OC3_SetConfig+0x72>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a29      	ldr	r2, [pc, #164]	@ (800eb08 <TIM_OC3_SetConfig+0x114>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d10d      	bne.n	800ea82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	68db      	ldr	r3, [r3, #12]
 800ea72:	021b      	lsls	r3, r3, #8
 800ea74:	697a      	ldr	r2, [r7, #20]
 800ea76:	4313      	orrs	r3, r2
 800ea78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4a1e      	ldr	r2, [pc, #120]	@ (800eb00 <TIM_OC3_SetConfig+0x10c>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d013      	beq.n	800eab2 <TIM_OC3_SetConfig+0xbe>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4a1d      	ldr	r2, [pc, #116]	@ (800eb04 <TIM_OC3_SetConfig+0x110>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d00f      	beq.n	800eab2 <TIM_OC3_SetConfig+0xbe>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4a1d      	ldr	r2, [pc, #116]	@ (800eb0c <TIM_OC3_SetConfig+0x118>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d00b      	beq.n	800eab2 <TIM_OC3_SetConfig+0xbe>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4a1c      	ldr	r2, [pc, #112]	@ (800eb10 <TIM_OC3_SetConfig+0x11c>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d007      	beq.n	800eab2 <TIM_OC3_SetConfig+0xbe>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	4a1b      	ldr	r2, [pc, #108]	@ (800eb14 <TIM_OC3_SetConfig+0x120>)
 800eaa6:	4293      	cmp	r3, r2
 800eaa8:	d003      	beq.n	800eab2 <TIM_OC3_SetConfig+0xbe>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	4a16      	ldr	r2, [pc, #88]	@ (800eb08 <TIM_OC3_SetConfig+0x114>)
 800eaae:	4293      	cmp	r3, r2
 800eab0:	d113      	bne.n	800eada <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	695b      	ldr	r3, [r3, #20]
 800eac6:	011b      	lsls	r3, r3, #4
 800eac8:	693a      	ldr	r2, [r7, #16]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	699b      	ldr	r3, [r3, #24]
 800ead2:	011b      	lsls	r3, r3, #4
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	697a      	ldr	r2, [r7, #20]
 800eaf2:	621a      	str	r2, [r3, #32]
}
 800eaf4:	bf00      	nop
 800eaf6:	371c      	adds	r7, #28
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	40012c00 	.word	0x40012c00
 800eb04:	40013400 	.word	0x40013400
 800eb08:	40015000 	.word	0x40015000
 800eb0c:	40014000 	.word	0x40014000
 800eb10:	40014400 	.word	0x40014400
 800eb14:	40014800 	.word	0x40014800

0800eb18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b087      	sub	sp, #28
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
 800eb20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a1b      	ldr	r3, [r3, #32]
 800eb26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a1b      	ldr	r3, [r3, #32]
 800eb2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	69db      	ldr	r3, [r3, #28]
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	021b      	lsls	r3, r3, #8
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	031b      	lsls	r3, r3, #12
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	4313      	orrs	r3, r2
 800eb72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a2c      	ldr	r2, [pc, #176]	@ (800ec28 <TIM_OC4_SetConfig+0x110>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d007      	beq.n	800eb8c <TIM_OC4_SetConfig+0x74>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ec2c <TIM_OC4_SetConfig+0x114>)
 800eb80:	4293      	cmp	r3, r2
 800eb82:	d003      	beq.n	800eb8c <TIM_OC4_SetConfig+0x74>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	4a2a      	ldr	r2, [pc, #168]	@ (800ec30 <TIM_OC4_SetConfig+0x118>)
 800eb88:	4293      	cmp	r3, r2
 800eb8a:	d10d      	bne.n	800eba8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eb92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	031b      	lsls	r3, r3, #12
 800eb9a:	697a      	ldr	r2, [r7, #20]
 800eb9c:	4313      	orrs	r3, r2
 800eb9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800eba0:	697b      	ldr	r3, [r7, #20]
 800eba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eba6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ec28 <TIM_OC4_SetConfig+0x110>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d013      	beq.n	800ebd8 <TIM_OC4_SetConfig+0xc0>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec2c <TIM_OC4_SetConfig+0x114>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d00f      	beq.n	800ebd8 <TIM_OC4_SetConfig+0xc0>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	4a1e      	ldr	r2, [pc, #120]	@ (800ec34 <TIM_OC4_SetConfig+0x11c>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d00b      	beq.n	800ebd8 <TIM_OC4_SetConfig+0xc0>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a1d      	ldr	r2, [pc, #116]	@ (800ec38 <TIM_OC4_SetConfig+0x120>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d007      	beq.n	800ebd8 <TIM_OC4_SetConfig+0xc0>
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	4a1c      	ldr	r2, [pc, #112]	@ (800ec3c <TIM_OC4_SetConfig+0x124>)
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d003      	beq.n	800ebd8 <TIM_OC4_SetConfig+0xc0>
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a17      	ldr	r2, [pc, #92]	@ (800ec30 <TIM_OC4_SetConfig+0x118>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d113      	bne.n	800ec00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ebde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ebe6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebe8:	683b      	ldr	r3, [r7, #0]
 800ebea:	695b      	ldr	r3, [r3, #20]
 800ebec:	019b      	lsls	r3, r3, #6
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	699b      	ldr	r3, [r3, #24]
 800ebf8:	019b      	lsls	r3, r3, #6
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	4313      	orrs	r3, r2
 800ebfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	693a      	ldr	r2, [r7, #16]
 800ec04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	68fa      	ldr	r2, [r7, #12]
 800ec0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	697a      	ldr	r2, [r7, #20]
 800ec18:	621a      	str	r2, [r3, #32]
}
 800ec1a:	bf00      	nop
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	40012c00 	.word	0x40012c00
 800ec2c:	40013400 	.word	0x40013400
 800ec30:	40015000 	.word	0x40015000
 800ec34:	40014000 	.word	0x40014000
 800ec38:	40014400 	.word	0x40014400
 800ec3c:	40014800 	.word	0x40014800

0800ec40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec40:	b480      	push	{r7}
 800ec42:	b087      	sub	sp, #28
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a1b      	ldr	r3, [r3, #32]
 800ec4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685b      	ldr	r3, [r3, #4]
 800ec60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec74:	683b      	ldr	r3, [r7, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	041b      	lsls	r3, r3, #16
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a19      	ldr	r2, [pc, #100]	@ (800ecfc <TIM_OC5_SetConfig+0xbc>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d013      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x82>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a18      	ldr	r2, [pc, #96]	@ (800ed00 <TIM_OC5_SetConfig+0xc0>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d00f      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x82>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a17      	ldr	r2, [pc, #92]	@ (800ed04 <TIM_OC5_SetConfig+0xc4>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d00b      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x82>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a16      	ldr	r2, [pc, #88]	@ (800ed08 <TIM_OC5_SetConfig+0xc8>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d007      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x82>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	4a15      	ldr	r2, [pc, #84]	@ (800ed0c <TIM_OC5_SetConfig+0xcc>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d003      	beq.n	800ecc2 <TIM_OC5_SetConfig+0x82>
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a14      	ldr	r2, [pc, #80]	@ (800ed10 <TIM_OC5_SetConfig+0xd0>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d109      	bne.n	800ecd6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	695b      	ldr	r3, [r3, #20]
 800ecce:	021b      	lsls	r3, r3, #8
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	4313      	orrs	r3, r2
 800ecd4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	685a      	ldr	r2, [r3, #4]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	693a      	ldr	r2, [r7, #16]
 800ecee:	621a      	str	r2, [r3, #32]
}
 800ecf0:	bf00      	nop
 800ecf2:	371c      	adds	r7, #28
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr
 800ecfc:	40012c00 	.word	0x40012c00
 800ed00:	40013400 	.word	0x40013400
 800ed04:	40014000 	.word	0x40014000
 800ed08:	40014400 	.word	0x40014400
 800ed0c:	40014800 	.word	0x40014800
 800ed10:	40015000 	.word	0x40015000

0800ed14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a1b      	ldr	r3, [r3, #32]
 800ed22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a1b      	ldr	r3, [r3, #32]
 800ed28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	021b      	lsls	r3, r3, #8
 800ed4e:	68fa      	ldr	r2, [r7, #12]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	689b      	ldr	r3, [r3, #8]
 800ed60:	051b      	lsls	r3, r3, #20
 800ed62:	693a      	ldr	r2, [r7, #16]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a1a      	ldr	r2, [pc, #104]	@ (800edd4 <TIM_OC6_SetConfig+0xc0>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d013      	beq.n	800ed98 <TIM_OC6_SetConfig+0x84>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a19      	ldr	r2, [pc, #100]	@ (800edd8 <TIM_OC6_SetConfig+0xc4>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d00f      	beq.n	800ed98 <TIM_OC6_SetConfig+0x84>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a18      	ldr	r2, [pc, #96]	@ (800eddc <TIM_OC6_SetConfig+0xc8>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d00b      	beq.n	800ed98 <TIM_OC6_SetConfig+0x84>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a17      	ldr	r2, [pc, #92]	@ (800ede0 <TIM_OC6_SetConfig+0xcc>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d007      	beq.n	800ed98 <TIM_OC6_SetConfig+0x84>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	4a16      	ldr	r2, [pc, #88]	@ (800ede4 <TIM_OC6_SetConfig+0xd0>)
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d003      	beq.n	800ed98 <TIM_OC6_SetConfig+0x84>
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a15      	ldr	r2, [pc, #84]	@ (800ede8 <TIM_OC6_SetConfig+0xd4>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d109      	bne.n	800edac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	029b      	lsls	r3, r3, #10
 800eda6:	697a      	ldr	r2, [r7, #20]
 800eda8:	4313      	orrs	r3, r2
 800edaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	697a      	ldr	r2, [r7, #20]
 800edb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	68fa      	ldr	r2, [r7, #12]
 800edb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	685a      	ldr	r2, [r3, #4]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	621a      	str	r2, [r3, #32]
}
 800edc6:	bf00      	nop
 800edc8:	371c      	adds	r7, #28
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	40012c00 	.word	0x40012c00
 800edd8:	40013400 	.word	0x40013400
 800eddc:	40014000 	.word	0x40014000
 800ede0:	40014400 	.word	0x40014400
 800ede4:	40014800 	.word	0x40014800
 800ede8:	40015000 	.word	0x40015000

0800edec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edec:	b480      	push	{r7}
 800edee:	b087      	sub	sp, #28
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6a1b      	ldr	r3, [r3, #32]
 800edfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6a1b      	ldr	r3, [r3, #32]
 800ee02:	f023 0201 	bic.w	r2, r3, #1
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	699b      	ldr	r3, [r3, #24]
 800ee0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	011b      	lsls	r3, r3, #4
 800ee1c:	693a      	ldr	r2, [r7, #16]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee22:	697b      	ldr	r3, [r7, #20]
 800ee24:	f023 030a 	bic.w	r3, r3, #10
 800ee28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	4313      	orrs	r3, r2
 800ee30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	693a      	ldr	r2, [r7, #16]
 800ee36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	697a      	ldr	r2, [r7, #20]
 800ee3c:	621a      	str	r2, [r3, #32]
}
 800ee3e:	bf00      	nop
 800ee40:	371c      	adds	r7, #28
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr

0800ee4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee4a:	b480      	push	{r7}
 800ee4c:	b087      	sub	sp, #28
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	60f8      	str	r0, [r7, #12]
 800ee52:	60b9      	str	r1, [r7, #8]
 800ee54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	6a1b      	ldr	r3, [r3, #32]
 800ee60:	f023 0210 	bic.w	r2, r3, #16
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	699b      	ldr	r3, [r3, #24]
 800ee6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	031b      	lsls	r3, r3, #12
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	011b      	lsls	r3, r3, #4
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	693a      	ldr	r2, [r7, #16]
 800ee96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	621a      	str	r2, [r3, #32]
}
 800ee9e:	bf00      	nop
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr

0800eeaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eeaa:	b480      	push	{r7}
 800eeac:	b085      	sub	sp, #20
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	689b      	ldr	r3, [r3, #8]
 800eeb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800eec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4313      	orrs	r3, r2
 800eecc:	f043 0307 	orr.w	r3, r3, #7
 800eed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	609a      	str	r2, [r3, #8]
}
 800eed8:	bf00      	nop
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
 800eef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eefe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	021a      	lsls	r2, r3, #8
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	431a      	orrs	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	609a      	str	r2, [r3, #8]
}
 800ef18:	bf00      	nop
 800ef1a:	371c      	adds	r7, #28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b087      	sub	sp, #28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	f003 031f 	and.w	r3, r3, #31
 800ef36:	2201      	movs	r2, #1
 800ef38:	fa02 f303 	lsl.w	r3, r2, r3
 800ef3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6a1a      	ldr	r2, [r3, #32]
 800ef42:	697b      	ldr	r3, [r7, #20]
 800ef44:	43db      	mvns	r3, r3
 800ef46:	401a      	ands	r2, r3
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6a1a      	ldr	r2, [r3, #32]
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	f003 031f 	and.w	r3, r3, #31
 800ef56:	6879      	ldr	r1, [r7, #4]
 800ef58:	fa01 f303 	lsl.w	r3, r1, r3
 800ef5c:	431a      	orrs	r2, r3
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	621a      	str	r2, [r3, #32]
}
 800ef62:	bf00      	nop
 800ef64:	371c      	adds	r7, #28
 800ef66:	46bd      	mov	sp, r7
 800ef68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef6c:	4770      	bx	lr
	...

0800ef70 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a26      	ldr	r2, [pc, #152]	@ (800f014 <TIM_ResetCallback+0xa4>)
 800ef7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a25      	ldr	r2, [pc, #148]	@ (800f018 <TIM_ResetCallback+0xa8>)
 800ef84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a24      	ldr	r2, [pc, #144]	@ (800f01c <TIM_ResetCallback+0xac>)
 800ef8c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a23      	ldr	r2, [pc, #140]	@ (800f020 <TIM_ResetCallback+0xb0>)
 800ef94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a22      	ldr	r2, [pc, #136]	@ (800f024 <TIM_ResetCallback+0xb4>)
 800ef9c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a21      	ldr	r2, [pc, #132]	@ (800f028 <TIM_ResetCallback+0xb8>)
 800efa4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a20      	ldr	r2, [pc, #128]	@ (800f02c <TIM_ResetCallback+0xbc>)
 800efac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a1f      	ldr	r2, [pc, #124]	@ (800f030 <TIM_ResetCallback+0xc0>)
 800efb4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a1e      	ldr	r2, [pc, #120]	@ (800f034 <TIM_ResetCallback+0xc4>)
 800efbc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a1d      	ldr	r2, [pc, #116]	@ (800f038 <TIM_ResetCallback+0xc8>)
 800efc4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1c      	ldr	r2, [pc, #112]	@ (800f03c <TIM_ResetCallback+0xcc>)
 800efcc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a1b      	ldr	r2, [pc, #108]	@ (800f040 <TIM_ResetCallback+0xd0>)
 800efd4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a1a      	ldr	r2, [pc, #104]	@ (800f044 <TIM_ResetCallback+0xd4>)
 800efdc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a19      	ldr	r2, [pc, #100]	@ (800f048 <TIM_ResetCallback+0xd8>)
 800efe4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a18      	ldr	r2, [pc, #96]	@ (800f04c <TIM_ResetCallback+0xdc>)
 800efec:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a17      	ldr	r2, [pc, #92]	@ (800f050 <TIM_ResetCallback+0xe0>)
 800eff4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4a16      	ldr	r2, [pc, #88]	@ (800f054 <TIM_ResetCallback+0xe4>)
 800effc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a15      	ldr	r2, [pc, #84]	@ (800f058 <TIM_ResetCallback+0xe8>)
 800f004:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr
 800f014:	08007e89 	.word	0x08007e89
 800f018:	0800e2bd 	.word	0x0800e2bd
 800f01c:	0800e335 	.word	0x0800e335
 800f020:	0800e349 	.word	0x0800e349
 800f024:	0800e2e5 	.word	0x0800e2e5
 800f028:	0800e2f9 	.word	0x0800e2f9
 800f02c:	0800e2d1 	.word	0x0800e2d1
 800f030:	0800e30d 	.word	0x0800e30d
 800f034:	0800e321 	.word	0x0800e321
 800f038:	0800e35d 	.word	0x0800e35d
 800f03c:	0800f2b1 	.word	0x0800f2b1
 800f040:	0800f2c5 	.word	0x0800f2c5
 800f044:	0800f2d9 	.word	0x0800f2d9
 800f048:	0800f2ed 	.word	0x0800f2ed
 800f04c:	0800f301 	.word	0x0800f301
 800f050:	0800f315 	.word	0x0800f315
 800f054:	0800f329 	.word	0x0800f329
 800f058:	0800f33d 	.word	0x0800f33d

0800f05c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d101      	bne.n	800f074 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f070:	2302      	movs	r3, #2
 800f072:	e074      	b.n	800f15e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2201      	movs	r2, #1
 800f078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	2202      	movs	r2, #2
 800f080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	689b      	ldr	r3, [r3, #8]
 800f092:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a34      	ldr	r2, [pc, #208]	@ (800f16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d009      	beq.n	800f0b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	4a33      	ldr	r2, [pc, #204]	@ (800f170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d004      	beq.n	800f0b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	4a31      	ldr	r2, [pc, #196]	@ (800f174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0ae:	4293      	cmp	r3, r2
 800f0b0:	d108      	bne.n	800f0c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f0b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	685b      	ldr	r3, [r3, #4]
 800f0be:	68fa      	ldr	r2, [r7, #12]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f0ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	68fa      	ldr	r2, [r7, #12]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68fa      	ldr	r2, [r7, #12]
 800f0e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a21      	ldr	r2, [pc, #132]	@ (800f16c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d022      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0f4:	d01d      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	4a1f      	ldr	r2, [pc, #124]	@ (800f178 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f0fc:	4293      	cmp	r3, r2
 800f0fe:	d018      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a1d      	ldr	r2, [pc, #116]	@ (800f17c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d013      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	4a1c      	ldr	r2, [pc, #112]	@ (800f180 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d00e      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	4a15      	ldr	r2, [pc, #84]	@ (800f170 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d009      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	4a18      	ldr	r2, [pc, #96]	@ (800f184 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f124:	4293      	cmp	r3, r2
 800f126:	d004      	beq.n	800f132 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	4a11      	ldr	r2, [pc, #68]	@ (800f174 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f12e:	4293      	cmp	r3, r2
 800f130:	d10c      	bne.n	800f14c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	689b      	ldr	r3, [r3, #8]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	4313      	orrs	r3, r2
 800f142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3714      	adds	r7, #20
 800f162:	46bd      	mov	sp, r7
 800f164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop
 800f16c:	40012c00 	.word	0x40012c00
 800f170:	40013400 	.word	0x40013400
 800f174:	40015000 	.word	0x40015000
 800f178:	40000400 	.word	0x40000400
 800f17c:	40000800 	.word	0x40000800
 800f180:	40000c00 	.word	0x40000c00
 800f184:	40014000 	.word	0x40014000

0800f188 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f19c:	2b01      	cmp	r3, #1
 800f19e:	d101      	bne.n	800f1a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f1a0:	2302      	movs	r3, #2
 800f1a2:	e078      	b.n	800f296 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	68db      	ldr	r3, [r3, #12]
 800f1b6:	4313      	orrs	r3, r2
 800f1b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	691b      	ldr	r3, [r3, #16]
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f20a:	4313      	orrs	r3, r2
 800f20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	041b      	lsls	r3, r3, #16
 800f21a:	4313      	orrs	r3, r2
 800f21c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	69db      	ldr	r3, [r3, #28]
 800f228:	4313      	orrs	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	4a1c      	ldr	r2, [pc, #112]	@ (800f2a4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f232:	4293      	cmp	r3, r2
 800f234:	d009      	beq.n	800f24a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a1b      	ldr	r2, [pc, #108]	@ (800f2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d004      	beq.n	800f24a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a19      	ldr	r2, [pc, #100]	@ (800f2ac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d11c      	bne.n	800f284 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f254:	051b      	lsls	r3, r3, #20
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	4313      	orrs	r3, r2
 800f266:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f272:	4313      	orrs	r3, r2
 800f274:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f280:	4313      	orrs	r3, r2
 800f282:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f294:	2300      	movs	r3, #0
}
 800f296:	4618      	mov	r0, r3
 800f298:	3714      	adds	r7, #20
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	40012c00 	.word	0x40012c00
 800f2a8:	40013400 	.word	0x40013400
 800f2ac:	40015000 	.word	0x40015000

0800f2b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f314:	b480      	push	{r7}
 800f316:	b083      	sub	sp, #12
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f328:	b480      	push	{r7}
 800f32a:	b083      	sub	sp, #12
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f330:	bf00      	nop
 800f332:	370c      	adds	r7, #12
 800f334:	46bd      	mov	sp, r7
 800f336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33a:	4770      	bx	lr

0800f33c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f344:	bf00      	nop
 800f346:	370c      	adds	r7, #12
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d101      	bne.n	800f362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f35e:	2301      	movs	r3, #1
 800f360:	e050      	b.n	800f404 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d114      	bne.n	800f396 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2200      	movs	r2, #0
 800f370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 fd65 	bl	800fe44 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f380:	2b00      	cmp	r3, #0
 800f382:	d103      	bne.n	800f38c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a21      	ldr	r2, [pc, #132]	@ (800f40c <HAL_UART_Init+0xbc>)
 800f388:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2224      	movs	r2, #36	@ 0x24
 800f39a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f022 0201 	bic.w	r2, r2, #1
 800f3ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d002      	beq.n	800f3bc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f001 f892 	bl	80104e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f000 fd93 	bl	800fee8 <UART_SetConfig>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d101      	bne.n	800f3cc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e01b      	b.n	800f404 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	685a      	ldr	r2, [r3, #4]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	689a      	ldr	r2, [r3, #8]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	f042 0201 	orr.w	r2, r2, #1
 800f3fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f001 f911 	bl	8010624 <UART_CheckIdleState>
 800f402:	4603      	mov	r3, r0
}
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}
 800f40c:	080097f1 	.word	0x080097f1

0800f410 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800f410:	b480      	push	{r7}
 800f412:	b087      	sub	sp, #28
 800f414:	af00      	add	r7, sp, #0
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	460b      	mov	r3, r1
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d109      	bne.n	800f43c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f42e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800f438:	2301      	movs	r3, #1
 800f43a:	e09c      	b.n	800f576 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f442:	2b20      	cmp	r3, #32
 800f444:	d16c      	bne.n	800f520 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800f446:	7afb      	ldrb	r3, [r7, #11]
 800f448:	2b0c      	cmp	r3, #12
 800f44a:	d85e      	bhi.n	800f50a <HAL_UART_RegisterCallback+0xfa>
 800f44c:	a201      	add	r2, pc, #4	@ (adr r2, 800f454 <HAL_UART_RegisterCallback+0x44>)
 800f44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f452:	bf00      	nop
 800f454:	0800f489 	.word	0x0800f489
 800f458:	0800f493 	.word	0x0800f493
 800f45c:	0800f49d 	.word	0x0800f49d
 800f460:	0800f4a7 	.word	0x0800f4a7
 800f464:	0800f4b1 	.word	0x0800f4b1
 800f468:	0800f4bb 	.word	0x0800f4bb
 800f46c:	0800f4c5 	.word	0x0800f4c5
 800f470:	0800f4cf 	.word	0x0800f4cf
 800f474:	0800f4d9 	.word	0x0800f4d9
 800f478:	0800f4e3 	.word	0x0800f4e3
 800f47c:	0800f4ed 	.word	0x0800f4ed
 800f480:	0800f4f7 	.word	0x0800f4f7
 800f484:	0800f501 	.word	0x0800f501
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f490:	e070      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f49a:	e06b      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	687a      	ldr	r2, [r7, #4]
 800f4a0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f4a4:	e066      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	687a      	ldr	r2, [r7, #4]
 800f4aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f4ae:	e061      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f4b8:	e05c      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f4c2:	e057      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f4cc:	e052      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	687a      	ldr	r2, [r7, #4]
 800f4d2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f4d6:	e04d      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f4e0:	e048      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	687a      	ldr	r2, [r7, #4]
 800f4e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f4ea:	e043      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	687a      	ldr	r2, [r7, #4]
 800f4f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f4f4:	e03e      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f4fe:	e039      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f508:	e034      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f510:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f51a:	2301      	movs	r3, #1
 800f51c:	75fb      	strb	r3, [r7, #23]
        break;
 800f51e:	e029      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f526:	2b00      	cmp	r3, #0
 800f528:	d11a      	bne.n	800f560 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800f52a:	7afb      	ldrb	r3, [r7, #11]
 800f52c:	2b0b      	cmp	r3, #11
 800f52e:	d002      	beq.n	800f536 <HAL_UART_RegisterCallback+0x126>
 800f530:	2b0c      	cmp	r3, #12
 800f532:	d005      	beq.n	800f540 <HAL_UART_RegisterCallback+0x130>
 800f534:	e009      	b.n	800f54a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f53e:	e019      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	687a      	ldr	r2, [r7, #4]
 800f544:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f548:	e014      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f550:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f55a:	2301      	movs	r3, #1
 800f55c:	75fb      	strb	r3, [r7, #23]
        break;
 800f55e:	e009      	b.n	800f574 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f566:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800f570:	2301      	movs	r3, #1
 800f572:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f574:	7dfb      	ldrb	r3, [r7, #23]
}
 800f576:	4618      	mov	r0, r3
 800f578:	371c      	adds	r7, #28
 800f57a:	46bd      	mov	sp, r7
 800f57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f580:	4770      	bx	lr
 800f582:	bf00      	nop

0800f584 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b08a      	sub	sp, #40	@ 0x28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	4613      	mov	r3, r2
 800f590:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f598:	2b20      	cmp	r3, #32
 800f59a:	d137      	bne.n	800f60c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d002      	beq.n	800f5a8 <HAL_UART_Receive_DMA+0x24>
 800f5a2:	88fb      	ldrh	r3, [r7, #6]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e030      	b.n	800f60e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	4a18      	ldr	r2, [pc, #96]	@ (800f618 <HAL_UART_Receive_DMA+0x94>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d01f      	beq.n	800f5fc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d018      	beq.n	800f5fc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	697b      	ldr	r3, [r7, #20]
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5e8:	623b      	str	r3, [r7, #32]
 800f5ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	69f9      	ldr	r1, [r7, #28]
 800f5ee:	6a3a      	ldr	r2, [r7, #32]
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5f6:	69bb      	ldr	r3, [r7, #24]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e6      	bne.n	800f5ca <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f5fc:	88fb      	ldrh	r3, [r7, #6]
 800f5fe:	461a      	mov	r2, r3
 800f600:	68b9      	ldr	r1, [r7, #8]
 800f602:	68f8      	ldr	r0, [r7, #12]
 800f604:	f001 f926 	bl	8010854 <UART_Start_Receive_DMA>
 800f608:	4603      	mov	r3, r0
 800f60a:	e000      	b.n	800f60e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f60c:	2302      	movs	r3, #2
  }
}
 800f60e:	4618      	mov	r0, r3
 800f610:	3728      	adds	r7, #40	@ 0x28
 800f612:	46bd      	mov	sp, r7
 800f614:	bd80      	pop	{r7, pc}
 800f616:	bf00      	nop
 800f618:	40008000 	.word	0x40008000

0800f61c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b0ba      	sub	sp, #232	@ 0xe8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	69db      	ldr	r3, [r3, #28]
 800f62a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f642:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f646:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f64a:	4013      	ands	r3, r2
 800f64c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11b      	bne.n	800f690 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f65c:	f003 0320 	and.w	r3, r3, #32
 800f660:	2b00      	cmp	r3, #0
 800f662:	d015      	beq.n	800f690 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f668:	f003 0320 	and.w	r3, r3, #32
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d105      	bne.n	800f67c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d009      	beq.n	800f690 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f680:	2b00      	cmp	r3, #0
 800f682:	f000 8312 	beq.w	800fcaa <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	4798      	blx	r3
      }
      return;
 800f68e:	e30c      	b.n	800fcaa <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f690:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f694:	2b00      	cmp	r3, #0
 800f696:	f000 8129 	beq.w	800f8ec <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f69a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f69e:	4b90      	ldr	r3, [pc, #576]	@ (800f8e0 <HAL_UART_IRQHandler+0x2c4>)
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d106      	bne.n	800f6b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f6a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f6aa:	4b8e      	ldr	r3, [pc, #568]	@ (800f8e4 <HAL_UART_IRQHandler+0x2c8>)
 800f6ac:	4013      	ands	r3, r2
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f000 811c 	beq.w	800f8ec <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6b8:	f003 0301 	and.w	r3, r3, #1
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d011      	beq.n	800f6e4 <HAL_UART_IRQHandler+0xc8>
 800f6c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d00b      	beq.n	800f6e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6da:	f043 0201 	orr.w	r2, r3, #1
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6e8:	f003 0302 	and.w	r3, r3, #2
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d011      	beq.n	800f714 <HAL_UART_IRQHandler+0xf8>
 800f6f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6f4:	f003 0301 	and.w	r3, r3, #1
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d00b      	beq.n	800f714 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2202      	movs	r2, #2
 800f702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f70a:	f043 0204 	orr.w	r2, r3, #4
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f718:	f003 0304 	and.w	r3, r3, #4
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d011      	beq.n	800f744 <HAL_UART_IRQHandler+0x128>
 800f720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f724:	f003 0301 	and.w	r3, r3, #1
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00b      	beq.n	800f744 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2204      	movs	r2, #4
 800f732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f73a:	f043 0202 	orr.w	r2, r3, #2
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f748:	f003 0308 	and.w	r3, r3, #8
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d017      	beq.n	800f780 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f754:	f003 0320 	and.w	r3, r3, #32
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d105      	bne.n	800f768 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f75c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f760:	4b5f      	ldr	r3, [pc, #380]	@ (800f8e0 <HAL_UART_IRQHandler+0x2c4>)
 800f762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f764:	2b00      	cmp	r3, #0
 800f766:	d00b      	beq.n	800f780 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2208      	movs	r2, #8
 800f76e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f776:	f043 0208 	orr.w	r2, r3, #8
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f784:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d012      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x196>
 800f78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f794:	2b00      	cmp	r3, #0
 800f796:	d00c      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f7a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7a8:	f043 0220 	orr.w	r2, r3, #32
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f000 8278 	beq.w	800fcae <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7c2:	f003 0320 	and.w	r3, r3, #32
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d013      	beq.n	800f7f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7ce:	f003 0320 	and.w	r3, r3, #32
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d105      	bne.n	800f7e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d007      	beq.n	800f7f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d003      	beq.n	800f7f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f806:	2b40      	cmp	r3, #64	@ 0x40
 800f808:	d005      	beq.n	800f816 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f80a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f80e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f812:	2b00      	cmp	r3, #0
 800f814:	d058      	beq.n	800f8c8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f001 f903 	bl	8010a22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	689b      	ldr	r3, [r3, #8]
 800f822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f826:	2b40      	cmp	r3, #64	@ 0x40
 800f828:	d148      	bne.n	800f8bc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	3308      	adds	r3, #8
 800f830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f838:	e853 3f00 	ldrex	r3, [r3]
 800f83c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f840:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	3308      	adds	r3, #8
 800f852:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f856:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f85a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f85e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f862:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f866:	e841 2300 	strex	r3, r2, [r1]
 800f86a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f86e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1d9      	bne.n	800f82a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d017      	beq.n	800f8b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f886:	4a18      	ldr	r2, [pc, #96]	@ (800f8e8 <HAL_UART_IRQHandler+0x2cc>)
 800f888:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f890:	4618      	mov	r0, r3
 800f892:	f7fc f8ab 	bl	800b9ec <HAL_DMA_Abort_IT>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d01f      	beq.n	800f8dc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8ae:	e015      	b.n	800f8dc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8ba:	e00f      	b.n	800f8dc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8c6:	e009      	b.n	800f8dc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f8da:	e1e8      	b.n	800fcae <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8dc:	bf00      	nop
    return;
 800f8de:	e1e6      	b.n	800fcae <HAL_UART_IRQHandler+0x692>
 800f8e0:	10000001 	.word	0x10000001
 800f8e4:	04000120 	.word	0x04000120
 800f8e8:	08010ced 	.word	0x08010ced

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8f0:	2b01      	cmp	r3, #1
 800f8f2:	f040 8176 	bne.w	800fbe2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f8f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8fa:	f003 0310 	and.w	r3, r3, #16
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	f000 816f 	beq.w	800fbe2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f908:	f003 0310 	and.w	r3, r3, #16
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8168 	beq.w	800fbe2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	2210      	movs	r2, #16
 800f918:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f924:	2b40      	cmp	r3, #64	@ 0x40
 800f926:	f040 80dc 	bne.w	800fae2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f938:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 80b1 	beq.w	800faa4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f948:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f94c:	429a      	cmp	r2, r3
 800f94e:	f080 80a9 	bcs.w	800faa4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f958:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	f040 8087 	bne.w	800fa7e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f978:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f97c:	e853 3f00 	ldrex	r3, [r3]
 800f980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f984:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f98c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	461a      	mov	r2, r3
 800f996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f99a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f99e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f9a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f9aa:	e841 2300 	strex	r3, r2, [r1]
 800f9ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f9b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1da      	bne.n	800f970 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	3308      	adds	r3, #8
 800f9c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9c4:	e853 3f00 	ldrex	r3, [r3]
 800f9c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f9ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f9cc:	f023 0301 	bic.w	r3, r3, #1
 800f9d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3308      	adds	r3, #8
 800f9da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f9de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f9e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f9e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f9ea:	e841 2300 	strex	r3, r2, [r1]
 800f9ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f9f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d1e1      	bne.n	800f9ba <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	3308      	adds	r3, #8
 800f9fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fa00:	e853 3f00 	ldrex	r3, [r3]
 800fa04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fa06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fa08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fa0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	3308      	adds	r3, #8
 800fa16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fa1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fa1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fa20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa22:	e841 2300 	strex	r3, r2, [r1]
 800fa26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fa28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d1e3      	bne.n	800f9f6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2220      	movs	r2, #32
 800fa32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa44:	e853 3f00 	ldrex	r3, [r3]
 800fa48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa4c:	f023 0310 	bic.w	r3, r3, #16
 800fa50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa66:	e841 2300 	strex	r3, r2, [r1]
 800fa6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d1e4      	bne.n	800fa3c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f7fb ff5e 	bl	800b93a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2202      	movs	r2, #2
 800fa82:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fa8a:	687a      	ldr	r2, [r7, #4]
 800fa8c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800fa96:	b292      	uxth	r2, r2
 800fa98:	1a8a      	subs	r2, r1, r2
 800fa9a:	b292      	uxth	r2, r2
 800fa9c:	4611      	mov	r1, r2
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800faa2:	e106      	b.n	800fcb2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800faaa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faae:	429a      	cmp	r2, r3
 800fab0:	f040 80ff 	bne.w	800fcb2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f003 0320 	and.w	r3, r3, #32
 800fac2:	2b20      	cmp	r3, #32
 800fac4:	f040 80f5 	bne.w	800fcb2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2202      	movs	r2, #2
 800facc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fada:	4611      	mov	r1, r2
 800fadc:	6878      	ldr	r0, [r7, #4]
 800fade:	4798      	blx	r3
      return;
 800fae0:	e0e7      	b.n	800fcb2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800faee:	b29b      	uxth	r3, r3
 800faf0:	1ad3      	subs	r3, r2, r3
 800faf2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fafc:	b29b      	uxth	r3, r3
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f000 80d9 	beq.w	800fcb6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800fb04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f000 80d4 	beq.w	800fcb6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb16:	e853 3f00 	ldrex	r3, [r3]
 800fb1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb30:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb38:	e841 2300 	strex	r3, r2, [r1]
 800fb3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d1e4      	bne.n	800fb0e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	3308      	adds	r3, #8
 800fb4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb4e:	e853 3f00 	ldrex	r3, [r3]
 800fb52:	623b      	str	r3, [r7, #32]
   return(result);
 800fb54:	6a3b      	ldr	r3, [r7, #32]
 800fb56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fb5a:	f023 0301 	bic.w	r3, r3, #1
 800fb5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	3308      	adds	r3, #8
 800fb68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fb6c:	633a      	str	r2, [r7, #48]	@ 0x30
 800fb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb74:	e841 2300 	strex	r3, r2, [r1]
 800fb78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d1e1      	bne.n	800fb44 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2220      	movs	r2, #32
 800fb84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	e853 3f00 	ldrex	r3, [r3]
 800fba0:	60fb      	str	r3, [r7, #12]
   return(result);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f023 0310 	bic.w	r3, r3, #16
 800fba8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fbb6:	61fb      	str	r3, [r7, #28]
 800fbb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbba:	69b9      	ldr	r1, [r7, #24]
 800fbbc:	69fa      	ldr	r2, [r7, #28]
 800fbbe:	e841 2300 	strex	r3, r2, [r1]
 800fbc2:	617b      	str	r3, [r7, #20]
   return(result);
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1e4      	bne.n	800fb94 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2202      	movs	r2, #2
 800fbce:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fbd6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800fbda:	4611      	mov	r1, r2
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbe0:	e069      	b.n	800fcb6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d010      	beq.n	800fc10 <HAL_UART_IRQHandler+0x5f4>
 800fbee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00a      	beq.n	800fc10 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fc02:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc0e:	e055      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fc10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d014      	beq.n	800fc46 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fc1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d105      	bne.n	800fc34 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fc28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d008      	beq.n	800fc46 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d03e      	beq.n	800fcba <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	4798      	blx	r3
    }
    return;
 800fc44:	e039      	b.n	800fcba <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d009      	beq.n	800fc66 <HAL_UART_IRQHandler+0x64a>
 800fc52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d003      	beq.n	800fc66 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f001 f858 	bl	8010d14 <UART_EndTransmit_IT>
    return;
 800fc64:	e02a      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fc66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <HAL_UART_IRQHandler+0x66e>
 800fc72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc76:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc88:	e018      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d012      	beq.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
 800fc96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	da0e      	bge.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fca8:	e008      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
      return;
 800fcaa:	bf00      	nop
 800fcac:	e006      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
    return;
 800fcae:	bf00      	nop
 800fcb0:	e004      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
      return;
 800fcb2:	bf00      	nop
 800fcb4:	e002      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
      return;
 800fcb6:	bf00      	nop
 800fcb8:	e000      	b.n	800fcbc <HAL_UART_IRQHandler+0x6a0>
    return;
 800fcba:	bf00      	nop
  }
}
 800fcbc:	37e8      	adds	r7, #232	@ 0xe8
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop

0800fcc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fccc:	bf00      	nop
 800fcce:	370c      	adds	r7, #12
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd6:	4770      	bx	lr

0800fcd8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b083      	sub	sp, #12
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fce0:	bf00      	nop
 800fce2:	370c      	adds	r7, #12
 800fce4:	46bd      	mov	sp, r7
 800fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcea:	4770      	bx	lr

0800fcec <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcec:	b480      	push	{r7}
 800fcee:	b083      	sub	sp, #12
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fcf4:	bf00      	nop
 800fcf6:	370c      	adds	r7, #12
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr

0800fd00 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fd00:	b480      	push	{r7}
 800fd02:	b083      	sub	sp, #12
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fd08:	bf00      	nop
 800fd0a:	370c      	adds	r7, #12
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fd30:	bf00      	nop
 800fd32:	370c      	adds	r7, #12
 800fd34:	46bd      	mov	sp, r7
 800fd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3a:	4770      	bx	lr

0800fd3c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800fd44:	bf00      	nop
 800fd46:	370c      	adds	r7, #12
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4e:	4770      	bx	lr

0800fd50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800fd58:	bf00      	nop
 800fd5a:	370c      	adds	r7, #12
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd62:	4770      	bx	lr

0800fd64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	460b      	mov	r3, r1
 800fd6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd70:	bf00      	nop
 800fd72:	370c      	adds	r7, #12
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
 800fd84:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	4a09      	ldr	r2, [pc, #36]	@ (800fdb0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d009      	beq.n	800fda4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	683a      	ldr	r2, [r7, #0]
 800fda0:	430a      	orrs	r2, r1
 800fda2:	615a      	str	r2, [r3, #20]
  }
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr
 800fdb0:	40008000 	.word	0x40008000

0800fdb4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a18      	ldr	r2, [pc, #96]	@ (800fe24 <HAL_UART_EnableReceiverTimeout+0x70>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d027      	beq.n	800fe16 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdcc:	2b20      	cmp	r3, #32
 800fdce:	d120      	bne.n	800fe12 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d101      	bne.n	800fdde <HAL_UART_EnableReceiverTimeout+0x2a>
 800fdda:	2302      	movs	r3, #2
 800fddc:	e01c      	b.n	800fe18 <HAL_UART_EnableReceiverTimeout+0x64>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2224      	movs	r2, #36	@ 0x24
 800fdea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800fdfc:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2220      	movs	r2, #32
 800fe02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	e002      	b.n	800fe18 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800fe12:	2302      	movs	r3, #2
 800fe14:	e000      	b.n	800fe18 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
  }
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	40008000 	.word	0x40008000

0800fe28 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	370c      	adds	r7, #12
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
	...

0800fe44 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a1a      	ldr	r2, [pc, #104]	@ (800feb8 <UART_InitCallbacksToDefault+0x74>)
 800fe50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a19      	ldr	r2, [pc, #100]	@ (800febc <UART_InitCallbacksToDefault+0x78>)
 800fe58:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a18      	ldr	r2, [pc, #96]	@ (800fec0 <UART_InitCallbacksToDefault+0x7c>)
 800fe60:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a17      	ldr	r2, [pc, #92]	@ (800fec4 <UART_InitCallbacksToDefault+0x80>)
 800fe68:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a16      	ldr	r2, [pc, #88]	@ (800fec8 <UART_InitCallbacksToDefault+0x84>)
 800fe70:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a15      	ldr	r2, [pc, #84]	@ (800fecc <UART_InitCallbacksToDefault+0x88>)
 800fe78:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a14      	ldr	r2, [pc, #80]	@ (800fed0 <UART_InitCallbacksToDefault+0x8c>)
 800fe80:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a13      	ldr	r2, [pc, #76]	@ (800fed4 <UART_InitCallbacksToDefault+0x90>)
 800fe88:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a12      	ldr	r2, [pc, #72]	@ (800fed8 <UART_InitCallbacksToDefault+0x94>)
 800fe90:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a11      	ldr	r2, [pc, #68]	@ (800fedc <UART_InitCallbacksToDefault+0x98>)
 800fe98:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	4a10      	ldr	r2, [pc, #64]	@ (800fee0 <UART_InitCallbacksToDefault+0x9c>)
 800fea0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4a0f      	ldr	r2, [pc, #60]	@ (800fee4 <UART_InitCallbacksToDefault+0xa0>)
 800fea8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr
 800feb8:	0800fcd9 	.word	0x0800fcd9
 800febc:	0800fcc5 	.word	0x0800fcc5
 800fec0:	0800fd01 	.word	0x0800fd01
 800fec4:	0800fced 	.word	0x0800fced
 800fec8:	0800fd15 	.word	0x0800fd15
 800fecc:	0800fd29 	.word	0x0800fd29
 800fed0:	0800fd3d 	.word	0x0800fd3d
 800fed4:	0800fd51 	.word	0x0800fd51
 800fed8:	08010d6f 	.word	0x08010d6f
 800fedc:	08010d83 	.word	0x08010d83
 800fee0:	08010d97 	.word	0x08010d97
 800fee4:	0800fd65 	.word	0x0800fd65

0800fee8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800feec:	b08c      	sub	sp, #48	@ 0x30
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fef2:	2300      	movs	r3, #0
 800fef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	689a      	ldr	r2, [r3, #8]
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	691b      	ldr	r3, [r3, #16]
 800ff00:	431a      	orrs	r2, r3
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	431a      	orrs	r2, r3
 800ff08:	697b      	ldr	r3, [r7, #20]
 800ff0a:	69db      	ldr	r3, [r3, #28]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff10:	697b      	ldr	r3, [r7, #20]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	4baa      	ldr	r3, [pc, #680]	@ (80101c0 <UART_SetConfig+0x2d8>)
 800ff18:	4013      	ands	r3, r2
 800ff1a:	697a      	ldr	r2, [r7, #20]
 800ff1c:	6812      	ldr	r2, [r2, #0]
 800ff1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff20:	430b      	orrs	r3, r1
 800ff22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	68da      	ldr	r2, [r3, #12]
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	430a      	orrs	r2, r1
 800ff38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	4a9f      	ldr	r2, [pc, #636]	@ (80101c4 <UART_SetConfig+0x2dc>)
 800ff46:	4293      	cmp	r3, r2
 800ff48:	d004      	beq.n	800ff54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	6a1b      	ldr	r3, [r3, #32]
 800ff4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff50:	4313      	orrs	r3, r2
 800ff52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ff5e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ff62:	697a      	ldr	r2, [r7, #20]
 800ff64:	6812      	ldr	r2, [r2, #0]
 800ff66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff68:	430b      	orrs	r3, r1
 800ff6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff72:	f023 010f 	bic.w	r1, r3, #15
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	430a      	orrs	r2, r1
 800ff80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4a90      	ldr	r2, [pc, #576]	@ (80101c8 <UART_SetConfig+0x2e0>)
 800ff88:	4293      	cmp	r3, r2
 800ff8a:	d125      	bne.n	800ffd8 <UART_SetConfig+0xf0>
 800ff8c:	4b8f      	ldr	r3, [pc, #572]	@ (80101cc <UART_SetConfig+0x2e4>)
 800ff8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff92:	f003 0303 	and.w	r3, r3, #3
 800ff96:	2b03      	cmp	r3, #3
 800ff98:	d81a      	bhi.n	800ffd0 <UART_SetConfig+0xe8>
 800ff9a:	a201      	add	r2, pc, #4	@ (adr r2, 800ffa0 <UART_SetConfig+0xb8>)
 800ff9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffa0:	0800ffb1 	.word	0x0800ffb1
 800ffa4:	0800ffc1 	.word	0x0800ffc1
 800ffa8:	0800ffb9 	.word	0x0800ffb9
 800ffac:	0800ffc9 	.word	0x0800ffc9
 800ffb0:	2301      	movs	r3, #1
 800ffb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffb6:	e116      	b.n	80101e6 <UART_SetConfig+0x2fe>
 800ffb8:	2302      	movs	r3, #2
 800ffba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffbe:	e112      	b.n	80101e6 <UART_SetConfig+0x2fe>
 800ffc0:	2304      	movs	r3, #4
 800ffc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffc6:	e10e      	b.n	80101e6 <UART_SetConfig+0x2fe>
 800ffc8:	2308      	movs	r3, #8
 800ffca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffce:	e10a      	b.n	80101e6 <UART_SetConfig+0x2fe>
 800ffd0:	2310      	movs	r3, #16
 800ffd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffd6:	e106      	b.n	80101e6 <UART_SetConfig+0x2fe>
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a7c      	ldr	r2, [pc, #496]	@ (80101d0 <UART_SetConfig+0x2e8>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d138      	bne.n	8010054 <UART_SetConfig+0x16c>
 800ffe2:	4b7a      	ldr	r3, [pc, #488]	@ (80101cc <UART_SetConfig+0x2e4>)
 800ffe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffe8:	f003 030c 	and.w	r3, r3, #12
 800ffec:	2b0c      	cmp	r3, #12
 800ffee:	d82d      	bhi.n	801004c <UART_SetConfig+0x164>
 800fff0:	a201      	add	r2, pc, #4	@ (adr r2, 800fff8 <UART_SetConfig+0x110>)
 800fff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fff6:	bf00      	nop
 800fff8:	0801002d 	.word	0x0801002d
 800fffc:	0801004d 	.word	0x0801004d
 8010000:	0801004d 	.word	0x0801004d
 8010004:	0801004d 	.word	0x0801004d
 8010008:	0801003d 	.word	0x0801003d
 801000c:	0801004d 	.word	0x0801004d
 8010010:	0801004d 	.word	0x0801004d
 8010014:	0801004d 	.word	0x0801004d
 8010018:	08010035 	.word	0x08010035
 801001c:	0801004d 	.word	0x0801004d
 8010020:	0801004d 	.word	0x0801004d
 8010024:	0801004d 	.word	0x0801004d
 8010028:	08010045 	.word	0x08010045
 801002c:	2300      	movs	r3, #0
 801002e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010032:	e0d8      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010034:	2302      	movs	r3, #2
 8010036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801003a:	e0d4      	b.n	80101e6 <UART_SetConfig+0x2fe>
 801003c:	2304      	movs	r3, #4
 801003e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010042:	e0d0      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010044:	2308      	movs	r3, #8
 8010046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801004a:	e0cc      	b.n	80101e6 <UART_SetConfig+0x2fe>
 801004c:	2310      	movs	r3, #16
 801004e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010052:	e0c8      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	4a5e      	ldr	r2, [pc, #376]	@ (80101d4 <UART_SetConfig+0x2ec>)
 801005a:	4293      	cmp	r3, r2
 801005c:	d125      	bne.n	80100aa <UART_SetConfig+0x1c2>
 801005e:	4b5b      	ldr	r3, [pc, #364]	@ (80101cc <UART_SetConfig+0x2e4>)
 8010060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010064:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010068:	2b30      	cmp	r3, #48	@ 0x30
 801006a:	d016      	beq.n	801009a <UART_SetConfig+0x1b2>
 801006c:	2b30      	cmp	r3, #48	@ 0x30
 801006e:	d818      	bhi.n	80100a2 <UART_SetConfig+0x1ba>
 8010070:	2b20      	cmp	r3, #32
 8010072:	d00a      	beq.n	801008a <UART_SetConfig+0x1a2>
 8010074:	2b20      	cmp	r3, #32
 8010076:	d814      	bhi.n	80100a2 <UART_SetConfig+0x1ba>
 8010078:	2b00      	cmp	r3, #0
 801007a:	d002      	beq.n	8010082 <UART_SetConfig+0x19a>
 801007c:	2b10      	cmp	r3, #16
 801007e:	d008      	beq.n	8010092 <UART_SetConfig+0x1aa>
 8010080:	e00f      	b.n	80100a2 <UART_SetConfig+0x1ba>
 8010082:	2300      	movs	r3, #0
 8010084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010088:	e0ad      	b.n	80101e6 <UART_SetConfig+0x2fe>
 801008a:	2302      	movs	r3, #2
 801008c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010090:	e0a9      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010092:	2304      	movs	r3, #4
 8010094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010098:	e0a5      	b.n	80101e6 <UART_SetConfig+0x2fe>
 801009a:	2308      	movs	r3, #8
 801009c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100a0:	e0a1      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100a2:	2310      	movs	r3, #16
 80100a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100a8:	e09d      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a4a      	ldr	r2, [pc, #296]	@ (80101d8 <UART_SetConfig+0x2f0>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d125      	bne.n	8010100 <UART_SetConfig+0x218>
 80100b4:	4b45      	ldr	r3, [pc, #276]	@ (80101cc <UART_SetConfig+0x2e4>)
 80100b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80100be:	2bc0      	cmp	r3, #192	@ 0xc0
 80100c0:	d016      	beq.n	80100f0 <UART_SetConfig+0x208>
 80100c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80100c4:	d818      	bhi.n	80100f8 <UART_SetConfig+0x210>
 80100c6:	2b80      	cmp	r3, #128	@ 0x80
 80100c8:	d00a      	beq.n	80100e0 <UART_SetConfig+0x1f8>
 80100ca:	2b80      	cmp	r3, #128	@ 0x80
 80100cc:	d814      	bhi.n	80100f8 <UART_SetConfig+0x210>
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d002      	beq.n	80100d8 <UART_SetConfig+0x1f0>
 80100d2:	2b40      	cmp	r3, #64	@ 0x40
 80100d4:	d008      	beq.n	80100e8 <UART_SetConfig+0x200>
 80100d6:	e00f      	b.n	80100f8 <UART_SetConfig+0x210>
 80100d8:	2300      	movs	r3, #0
 80100da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100de:	e082      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100e0:	2302      	movs	r3, #2
 80100e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100e6:	e07e      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100e8:	2304      	movs	r3, #4
 80100ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ee:	e07a      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100f0:	2308      	movs	r3, #8
 80100f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100f6:	e076      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80100f8:	2310      	movs	r3, #16
 80100fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100fe:	e072      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010100:	697b      	ldr	r3, [r7, #20]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4a35      	ldr	r2, [pc, #212]	@ (80101dc <UART_SetConfig+0x2f4>)
 8010106:	4293      	cmp	r3, r2
 8010108:	d12a      	bne.n	8010160 <UART_SetConfig+0x278>
 801010a:	4b30      	ldr	r3, [pc, #192]	@ (80101cc <UART_SetConfig+0x2e4>)
 801010c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010118:	d01a      	beq.n	8010150 <UART_SetConfig+0x268>
 801011a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801011e:	d81b      	bhi.n	8010158 <UART_SetConfig+0x270>
 8010120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010124:	d00c      	beq.n	8010140 <UART_SetConfig+0x258>
 8010126:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801012a:	d815      	bhi.n	8010158 <UART_SetConfig+0x270>
 801012c:	2b00      	cmp	r3, #0
 801012e:	d003      	beq.n	8010138 <UART_SetConfig+0x250>
 8010130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010134:	d008      	beq.n	8010148 <UART_SetConfig+0x260>
 8010136:	e00f      	b.n	8010158 <UART_SetConfig+0x270>
 8010138:	2300      	movs	r3, #0
 801013a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801013e:	e052      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010140:	2302      	movs	r3, #2
 8010142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010146:	e04e      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010148:	2304      	movs	r3, #4
 801014a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801014e:	e04a      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010150:	2308      	movs	r3, #8
 8010152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010156:	e046      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010158:	2310      	movs	r3, #16
 801015a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801015e:	e042      	b.n	80101e6 <UART_SetConfig+0x2fe>
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a17      	ldr	r2, [pc, #92]	@ (80101c4 <UART_SetConfig+0x2dc>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d13a      	bne.n	80101e0 <UART_SetConfig+0x2f8>
 801016a:	4b18      	ldr	r3, [pc, #96]	@ (80101cc <UART_SetConfig+0x2e4>)
 801016c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010170:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010174:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010178:	d01a      	beq.n	80101b0 <UART_SetConfig+0x2c8>
 801017a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801017e:	d81b      	bhi.n	80101b8 <UART_SetConfig+0x2d0>
 8010180:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010184:	d00c      	beq.n	80101a0 <UART_SetConfig+0x2b8>
 8010186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801018a:	d815      	bhi.n	80101b8 <UART_SetConfig+0x2d0>
 801018c:	2b00      	cmp	r3, #0
 801018e:	d003      	beq.n	8010198 <UART_SetConfig+0x2b0>
 8010190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010194:	d008      	beq.n	80101a8 <UART_SetConfig+0x2c0>
 8010196:	e00f      	b.n	80101b8 <UART_SetConfig+0x2d0>
 8010198:	2300      	movs	r3, #0
 801019a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801019e:	e022      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80101a0:	2302      	movs	r3, #2
 80101a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101a6:	e01e      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80101a8:	2304      	movs	r3, #4
 80101aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101ae:	e01a      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80101b0:	2308      	movs	r3, #8
 80101b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101b6:	e016      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80101b8:	2310      	movs	r3, #16
 80101ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101be:	e012      	b.n	80101e6 <UART_SetConfig+0x2fe>
 80101c0:	cfff69f3 	.word	0xcfff69f3
 80101c4:	40008000 	.word	0x40008000
 80101c8:	40013800 	.word	0x40013800
 80101cc:	40021000 	.word	0x40021000
 80101d0:	40004400 	.word	0x40004400
 80101d4:	40004800 	.word	0x40004800
 80101d8:	40004c00 	.word	0x40004c00
 80101dc:	40005000 	.word	0x40005000
 80101e0:	2310      	movs	r3, #16
 80101e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4aae      	ldr	r2, [pc, #696]	@ (80104a4 <UART_SetConfig+0x5bc>)
 80101ec:	4293      	cmp	r3, r2
 80101ee:	f040 8097 	bne.w	8010320 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80101f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80101f6:	2b08      	cmp	r3, #8
 80101f8:	d823      	bhi.n	8010242 <UART_SetConfig+0x35a>
 80101fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010200 <UART_SetConfig+0x318>)
 80101fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010200:	08010225 	.word	0x08010225
 8010204:	08010243 	.word	0x08010243
 8010208:	0801022d 	.word	0x0801022d
 801020c:	08010243 	.word	0x08010243
 8010210:	08010233 	.word	0x08010233
 8010214:	08010243 	.word	0x08010243
 8010218:	08010243 	.word	0x08010243
 801021c:	08010243 	.word	0x08010243
 8010220:	0801023b 	.word	0x0801023b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010224:	f7fc fcec 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 8010228:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801022a:	e010      	b.n	801024e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801022c:	4b9e      	ldr	r3, [pc, #632]	@ (80104a8 <UART_SetConfig+0x5c0>)
 801022e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010230:	e00d      	b.n	801024e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010232:	f7fc fc77 	bl	800cb24 <HAL_RCC_GetSysClockFreq>
 8010236:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010238:	e009      	b.n	801024e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801023a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801023e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010240:	e005      	b.n	801024e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010242:	2300      	movs	r3, #0
 8010244:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801024c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801024e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 8130 	beq.w	80104b6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010256:	697b      	ldr	r3, [r7, #20]
 8010258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801025a:	4a94      	ldr	r2, [pc, #592]	@ (80104ac <UART_SetConfig+0x5c4>)
 801025c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010260:	461a      	mov	r2, r3
 8010262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010264:	fbb3 f3f2 	udiv	r3, r3, r2
 8010268:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	4613      	mov	r3, r2
 8010270:	005b      	lsls	r3, r3, #1
 8010272:	4413      	add	r3, r2
 8010274:	69ba      	ldr	r2, [r7, #24]
 8010276:	429a      	cmp	r2, r3
 8010278:	d305      	bcc.n	8010286 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801027a:	697b      	ldr	r3, [r7, #20]
 801027c:	685b      	ldr	r3, [r3, #4]
 801027e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010280:	69ba      	ldr	r2, [r7, #24]
 8010282:	429a      	cmp	r2, r3
 8010284:	d903      	bls.n	801028e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010286:	2301      	movs	r3, #1
 8010288:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801028c:	e113      	b.n	80104b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010290:	2200      	movs	r2, #0
 8010292:	60bb      	str	r3, [r7, #8]
 8010294:	60fa      	str	r2, [r7, #12]
 8010296:	697b      	ldr	r3, [r7, #20]
 8010298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801029a:	4a84      	ldr	r2, [pc, #528]	@ (80104ac <UART_SetConfig+0x5c4>)
 801029c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102a0:	b29b      	uxth	r3, r3
 80102a2:	2200      	movs	r2, #0
 80102a4:	603b      	str	r3, [r7, #0]
 80102a6:	607a      	str	r2, [r7, #4]
 80102a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80102b0:	f7f0 fca0 	bl	8000bf4 <__aeabi_uldivmod>
 80102b4:	4602      	mov	r2, r0
 80102b6:	460b      	mov	r3, r1
 80102b8:	4610      	mov	r0, r2
 80102ba:	4619      	mov	r1, r3
 80102bc:	f04f 0200 	mov.w	r2, #0
 80102c0:	f04f 0300 	mov.w	r3, #0
 80102c4:	020b      	lsls	r3, r1, #8
 80102c6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80102ca:	0202      	lsls	r2, r0, #8
 80102cc:	6979      	ldr	r1, [r7, #20]
 80102ce:	6849      	ldr	r1, [r1, #4]
 80102d0:	0849      	lsrs	r1, r1, #1
 80102d2:	2000      	movs	r0, #0
 80102d4:	460c      	mov	r4, r1
 80102d6:	4605      	mov	r5, r0
 80102d8:	eb12 0804 	adds.w	r8, r2, r4
 80102dc:	eb43 0905 	adc.w	r9, r3, r5
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	469a      	mov	sl, r3
 80102e8:	4693      	mov	fp, r2
 80102ea:	4652      	mov	r2, sl
 80102ec:	465b      	mov	r3, fp
 80102ee:	4640      	mov	r0, r8
 80102f0:	4649      	mov	r1, r9
 80102f2:	f7f0 fc7f 	bl	8000bf4 <__aeabi_uldivmod>
 80102f6:	4602      	mov	r2, r0
 80102f8:	460b      	mov	r3, r1
 80102fa:	4613      	mov	r3, r2
 80102fc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80102fe:	6a3b      	ldr	r3, [r7, #32]
 8010300:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010304:	d308      	bcc.n	8010318 <UART_SetConfig+0x430>
 8010306:	6a3b      	ldr	r3, [r7, #32]
 8010308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801030c:	d204      	bcs.n	8010318 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	6a3a      	ldr	r2, [r7, #32]
 8010314:	60da      	str	r2, [r3, #12]
 8010316:	e0ce      	b.n	80104b6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801031e:	e0ca      	b.n	80104b6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010328:	d166      	bne.n	80103f8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801032a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801032e:	2b08      	cmp	r3, #8
 8010330:	d827      	bhi.n	8010382 <UART_SetConfig+0x49a>
 8010332:	a201      	add	r2, pc, #4	@ (adr r2, 8010338 <UART_SetConfig+0x450>)
 8010334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010338:	0801035d 	.word	0x0801035d
 801033c:	08010365 	.word	0x08010365
 8010340:	0801036d 	.word	0x0801036d
 8010344:	08010383 	.word	0x08010383
 8010348:	08010373 	.word	0x08010373
 801034c:	08010383 	.word	0x08010383
 8010350:	08010383 	.word	0x08010383
 8010354:	08010383 	.word	0x08010383
 8010358:	0801037b 	.word	0x0801037b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801035c:	f7fc fc50 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 8010360:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010362:	e014      	b.n	801038e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010364:	f7fc fc62 	bl	800cc2c <HAL_RCC_GetPCLK2Freq>
 8010368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801036a:	e010      	b.n	801038e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801036c:	4b4e      	ldr	r3, [pc, #312]	@ (80104a8 <UART_SetConfig+0x5c0>)
 801036e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010370:	e00d      	b.n	801038e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010372:	f7fc fbd7 	bl	800cb24 <HAL_RCC_GetSysClockFreq>
 8010376:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010378:	e009      	b.n	801038e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801037a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801037e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010380:	e005      	b.n	801038e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010382:	2300      	movs	r3, #0
 8010384:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010386:	2301      	movs	r3, #1
 8010388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801038c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801038e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 8090 	beq.w	80104b6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801039a:	4a44      	ldr	r2, [pc, #272]	@ (80104ac <UART_SetConfig+0x5c4>)
 801039c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103a0:	461a      	mov	r2, r3
 80103a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80103a8:	005a      	lsls	r2, r3, #1
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	685b      	ldr	r3, [r3, #4]
 80103ae:	085b      	lsrs	r3, r3, #1
 80103b0:	441a      	add	r2, r3
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80103ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103bc:	6a3b      	ldr	r3, [r7, #32]
 80103be:	2b0f      	cmp	r3, #15
 80103c0:	d916      	bls.n	80103f0 <UART_SetConfig+0x508>
 80103c2:	6a3b      	ldr	r3, [r7, #32]
 80103c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103c8:	d212      	bcs.n	80103f0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103ca:	6a3b      	ldr	r3, [r7, #32]
 80103cc:	b29b      	uxth	r3, r3
 80103ce:	f023 030f 	bic.w	r3, r3, #15
 80103d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103d4:	6a3b      	ldr	r3, [r7, #32]
 80103d6:	085b      	lsrs	r3, r3, #1
 80103d8:	b29b      	uxth	r3, r3
 80103da:	f003 0307 	and.w	r3, r3, #7
 80103de:	b29a      	uxth	r2, r3
 80103e0:	8bfb      	ldrh	r3, [r7, #30]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	8bfa      	ldrh	r2, [r7, #30]
 80103ec:	60da      	str	r2, [r3, #12]
 80103ee:	e062      	b.n	80104b6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80103f6:	e05e      	b.n	80104b6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103fc:	2b08      	cmp	r3, #8
 80103fe:	d828      	bhi.n	8010452 <UART_SetConfig+0x56a>
 8010400:	a201      	add	r2, pc, #4	@ (adr r2, 8010408 <UART_SetConfig+0x520>)
 8010402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010406:	bf00      	nop
 8010408:	0801042d 	.word	0x0801042d
 801040c:	08010435 	.word	0x08010435
 8010410:	0801043d 	.word	0x0801043d
 8010414:	08010453 	.word	0x08010453
 8010418:	08010443 	.word	0x08010443
 801041c:	08010453 	.word	0x08010453
 8010420:	08010453 	.word	0x08010453
 8010424:	08010453 	.word	0x08010453
 8010428:	0801044b 	.word	0x0801044b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801042c:	f7fc fbe8 	bl	800cc00 <HAL_RCC_GetPCLK1Freq>
 8010430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010432:	e014      	b.n	801045e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010434:	f7fc fbfa 	bl	800cc2c <HAL_RCC_GetPCLK2Freq>
 8010438:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801043a:	e010      	b.n	801045e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801043c:	4b1a      	ldr	r3, [pc, #104]	@ (80104a8 <UART_SetConfig+0x5c0>)
 801043e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010440:	e00d      	b.n	801045e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010442:	f7fc fb6f 	bl	800cb24 <HAL_RCC_GetSysClockFreq>
 8010446:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010448:	e009      	b.n	801045e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801044a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801044e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010450:	e005      	b.n	801045e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010452:	2300      	movs	r3, #0
 8010454:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010456:	2301      	movs	r3, #1
 8010458:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801045c:	bf00      	nop
    }

    if (pclk != 0U)
 801045e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010460:	2b00      	cmp	r3, #0
 8010462:	d028      	beq.n	80104b6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010468:	4a10      	ldr	r2, [pc, #64]	@ (80104ac <UART_SetConfig+0x5c4>)
 801046a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801046e:	461a      	mov	r2, r3
 8010470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010472:	fbb3 f2f2 	udiv	r2, r3, r2
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	085b      	lsrs	r3, r3, #1
 801047c:	441a      	add	r2, r3
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	fbb2 f3f3 	udiv	r3, r2, r3
 8010486:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010488:	6a3b      	ldr	r3, [r7, #32]
 801048a:	2b0f      	cmp	r3, #15
 801048c:	d910      	bls.n	80104b0 <UART_SetConfig+0x5c8>
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010494:	d20c      	bcs.n	80104b0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010496:	6a3b      	ldr	r3, [r7, #32]
 8010498:	b29a      	uxth	r2, r3
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	60da      	str	r2, [r3, #12]
 80104a0:	e009      	b.n	80104b6 <UART_SetConfig+0x5ce>
 80104a2:	bf00      	nop
 80104a4:	40008000 	.word	0x40008000
 80104a8:	00f42400 	.word	0x00f42400
 80104ac:	08013a60 	.word	0x08013a60
      }
      else
      {
        ret = HAL_ERROR;
 80104b0:	2301      	movs	r3, #1
 80104b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	2201      	movs	r2, #1
 80104ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2201      	movs	r2, #1
 80104c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	2200      	movs	r2, #0
 80104ca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	2200      	movs	r2, #0
 80104d0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80104d2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80104d6:	4618      	mov	r0, r3
 80104d8:	3730      	adds	r7, #48	@ 0x30
 80104da:	46bd      	mov	sp, r7
 80104dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080104e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b083      	sub	sp, #12
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ec:	f003 0308 	and.w	r3, r3, #8
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00a      	beq.n	801050a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	430a      	orrs	r2, r1
 8010508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801050e:	f003 0301 	and.w	r3, r3, #1
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00a      	beq.n	801052c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	685b      	ldr	r3, [r3, #4]
 801051c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	430a      	orrs	r2, r1
 801052a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010530:	f003 0302 	and.w	r3, r3, #2
 8010534:	2b00      	cmp	r3, #0
 8010536:	d00a      	beq.n	801054e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	430a      	orrs	r2, r1
 801054c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010552:	f003 0304 	and.w	r3, r3, #4
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00a      	beq.n	8010570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	685b      	ldr	r3, [r3, #4]
 8010560:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	430a      	orrs	r2, r1
 801056e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010574:	f003 0310 	and.w	r3, r3, #16
 8010578:	2b00      	cmp	r3, #0
 801057a:	d00a      	beq.n	8010592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	430a      	orrs	r2, r1
 8010590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010596:	f003 0320 	and.w	r3, r3, #32
 801059a:	2b00      	cmp	r3, #0
 801059c:	d00a      	beq.n	80105b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	689b      	ldr	r3, [r3, #8]
 80105a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	430a      	orrs	r2, r1
 80105b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d01a      	beq.n	80105f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	685b      	ldr	r3, [r3, #4]
 80105c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	430a      	orrs	r2, r1
 80105d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105de:	d10a      	bne.n	80105f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	685b      	ldr	r3, [r3, #4]
 80105e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	430a      	orrs	r2, r1
 80105f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00a      	beq.n	8010618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	685b      	ldr	r3, [r3, #4]
 8010608:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	430a      	orrs	r2, r1
 8010616:	605a      	str	r2, [r3, #4]
  }
}
 8010618:	bf00      	nop
 801061a:	370c      	adds	r7, #12
 801061c:	46bd      	mov	sp, r7
 801061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010622:	4770      	bx	lr

08010624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b098      	sub	sp, #96	@ 0x60
 8010628:	af02      	add	r7, sp, #8
 801062a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2200      	movs	r2, #0
 8010630:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010634:	f7f9 faca 	bl	8009bcc <HAL_GetTick>
 8010638:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	f003 0308 	and.w	r3, r3, #8
 8010644:	2b08      	cmp	r3, #8
 8010646:	d12f      	bne.n	80106a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010648:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010650:	2200      	movs	r2, #0
 8010652:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 f88e 	bl	8010778 <UART_WaitOnFlagUntilTimeout>
 801065c:	4603      	mov	r3, r0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d022      	beq.n	80106a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801066a:	e853 3f00 	ldrex	r3, [r3]
 801066e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010672:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010676:	653b      	str	r3, [r7, #80]	@ 0x50
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	461a      	mov	r2, r3
 801067e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010680:	647b      	str	r3, [r7, #68]	@ 0x44
 8010682:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010684:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010688:	e841 2300 	strex	r3, r2, [r1]
 801068c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801068e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010690:	2b00      	cmp	r3, #0
 8010692:	d1e6      	bne.n	8010662 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2220      	movs	r2, #32
 8010698:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106a4:	2303      	movs	r3, #3
 80106a6:	e063      	b.n	8010770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f003 0304 	and.w	r3, r3, #4
 80106b2:	2b04      	cmp	r3, #4
 80106b4:	d149      	bne.n	801074a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106be:	2200      	movs	r2, #0
 80106c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 f857 	bl	8010778 <UART_WaitOnFlagUntilTimeout>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d03c      	beq.n	801074a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106d8:	e853 3f00 	ldrex	r3, [r3]
 80106dc:	623b      	str	r3, [r7, #32]
   return(result);
 80106de:	6a3b      	ldr	r3, [r7, #32]
 80106e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	461a      	mov	r2, r3
 80106ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80106f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106f6:	e841 2300 	strex	r3, r2, [r1]
 80106fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1e6      	bne.n	80106d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	e853 3f00 	ldrex	r3, [r3]
 8010710:	60fb      	str	r3, [r7, #12]
   return(result);
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	f023 0301 	bic.w	r3, r3, #1
 8010718:	64bb      	str	r3, [r7, #72]	@ 0x48
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	3308      	adds	r3, #8
 8010720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010722:	61fa      	str	r2, [r7, #28]
 8010724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010726:	69b9      	ldr	r1, [r7, #24]
 8010728:	69fa      	ldr	r2, [r7, #28]
 801072a:	e841 2300 	strex	r3, r2, [r1]
 801072e:	617b      	str	r3, [r7, #20]
   return(result);
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1e5      	bne.n	8010702 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2220      	movs	r2, #32
 801073a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010746:	2303      	movs	r3, #3
 8010748:	e012      	b.n	8010770 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2220      	movs	r2, #32
 801074e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2220      	movs	r2, #32
 8010756:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2200      	movs	r2, #0
 801075e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2200      	movs	r2, #0
 801076a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3758      	adds	r7, #88	@ 0x58
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	603b      	str	r3, [r7, #0]
 8010784:	4613      	mov	r3, r2
 8010786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010788:	e04f      	b.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010790:	d04b      	beq.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010792:	f7f9 fa1b 	bl	8009bcc <HAL_GetTick>
 8010796:	4602      	mov	r2, r0
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	1ad3      	subs	r3, r2, r3
 801079c:	69ba      	ldr	r2, [r7, #24]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d302      	bcc.n	80107a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d101      	bne.n	80107ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80107a8:	2303      	movs	r3, #3
 80107aa:	e04e      	b.n	801084a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	f003 0304 	and.w	r3, r3, #4
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d037      	beq.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	2b80      	cmp	r3, #128	@ 0x80
 80107be:	d034      	beq.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	2b40      	cmp	r3, #64	@ 0x40
 80107c4:	d031      	beq.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	69db      	ldr	r3, [r3, #28]
 80107cc:	f003 0308 	and.w	r3, r3, #8
 80107d0:	2b08      	cmp	r3, #8
 80107d2:	d110      	bne.n	80107f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2208      	movs	r2, #8
 80107da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f000 f920 	bl	8010a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2208      	movs	r2, #8
 80107e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80107f2:	2301      	movs	r3, #1
 80107f4:	e029      	b.n	801084a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	69db      	ldr	r3, [r3, #28]
 80107fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010804:	d111      	bne.n	801082a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801080e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010810:	68f8      	ldr	r0, [r7, #12]
 8010812:	f000 f906 	bl	8010a22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	2220      	movs	r2, #32
 801081a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2200      	movs	r2, #0
 8010822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010826:	2303      	movs	r3, #3
 8010828:	e00f      	b.n	801084a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	69da      	ldr	r2, [r3, #28]
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	4013      	ands	r3, r2
 8010834:	68ba      	ldr	r2, [r7, #8]
 8010836:	429a      	cmp	r2, r3
 8010838:	bf0c      	ite	eq
 801083a:	2301      	moveq	r3, #1
 801083c:	2300      	movne	r3, #0
 801083e:	b2db      	uxtb	r3, r3
 8010840:	461a      	mov	r2, r3
 8010842:	79fb      	ldrb	r3, [r7, #7]
 8010844:	429a      	cmp	r2, r3
 8010846:	d0a0      	beq.n	801078a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	3710      	adds	r7, #16
 801084e:	46bd      	mov	sp, r7
 8010850:	bd80      	pop	{r7, pc}
	...

08010854 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b096      	sub	sp, #88	@ 0x58
 8010858:	af00      	add	r7, sp, #0
 801085a:	60f8      	str	r0, [r7, #12]
 801085c:	60b9      	str	r1, [r7, #8]
 801085e:	4613      	mov	r3, r2
 8010860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	68ba      	ldr	r2, [r7, #8]
 8010866:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	88fa      	ldrh	r2, [r7, #6]
 801086c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2200      	movs	r2, #0
 8010874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2222      	movs	r2, #34	@ 0x22
 801087c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010886:	2b00      	cmp	r3, #0
 8010888:	d02d      	beq.n	80108e6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010890:	4a40      	ldr	r2, [pc, #256]	@ (8010994 <UART_Start_Receive_DMA+0x140>)
 8010892:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801089a:	4a3f      	ldr	r2, [pc, #252]	@ (8010998 <UART_Start_Receive_DMA+0x144>)
 801089c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108a4:	4a3d      	ldr	r2, [pc, #244]	@ (801099c <UART_Start_Receive_DMA+0x148>)
 80108a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80108ae:	2200      	movs	r2, #0
 80108b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	3324      	adds	r3, #36	@ 0x24
 80108be:	4619      	mov	r1, r3
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108c4:	461a      	mov	r2, r3
 80108c6:	88fb      	ldrh	r3, [r7, #6]
 80108c8:	f7fa ffbc 	bl	800b844 <HAL_DMA_Start_IT>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d009      	beq.n	80108e6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	2210      	movs	r2, #16
 80108d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80108e2:	2301      	movs	r3, #1
 80108e4:	e051      	b.n	801098a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	691b      	ldr	r3, [r3, #16]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d018      	beq.n	8010920 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108f6:	e853 3f00 	ldrex	r3, [r3]
 80108fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010902:	657b      	str	r3, [r7, #84]	@ 0x54
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	461a      	mov	r2, r3
 801090a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801090c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801090e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010910:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010914:	e841 2300 	strex	r3, r2, [r1]
 8010918:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801091a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1e6      	bne.n	80108ee <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	3308      	adds	r3, #8
 8010926:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801092a:	e853 3f00 	ldrex	r3, [r3]
 801092e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010932:	f043 0301 	orr.w	r3, r3, #1
 8010936:	653b      	str	r3, [r7, #80]	@ 0x50
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	3308      	adds	r3, #8
 801093e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010940:	637a      	str	r2, [r7, #52]	@ 0x34
 8010942:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010944:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010946:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010948:	e841 2300 	strex	r3, r2, [r1]
 801094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010950:	2b00      	cmp	r3, #0
 8010952:	d1e5      	bne.n	8010920 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	3308      	adds	r3, #8
 801095a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	e853 3f00 	ldrex	r3, [r3]
 8010962:	613b      	str	r3, [r7, #16]
   return(result);
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801096a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	3308      	adds	r3, #8
 8010972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010974:	623a      	str	r2, [r7, #32]
 8010976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010978:	69f9      	ldr	r1, [r7, #28]
 801097a:	6a3a      	ldr	r2, [r7, #32]
 801097c:	e841 2300 	strex	r3, r2, [r1]
 8010980:	61bb      	str	r3, [r7, #24]
   return(result);
 8010982:	69bb      	ldr	r3, [r7, #24]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d1e5      	bne.n	8010954 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010988:	2300      	movs	r3, #0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3758      	adds	r7, #88	@ 0x58
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	08010aef 	.word	0x08010aef
 8010998:	08010c23 	.word	0x08010c23
 801099c:	08010c69 	.word	0x08010c69

080109a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b08f      	sub	sp, #60	@ 0x3c
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	e853 3f00 	ldrex	r3, [r3]
 80109b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80109bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	461a      	mov	r2, r3
 80109c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109c8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109ce:	e841 2300 	strex	r3, r2, [r1]
 80109d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d1e6      	bne.n	80109a8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3308      	adds	r3, #8
 80109e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	e853 3f00 	ldrex	r3, [r3]
 80109e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80109f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	3308      	adds	r3, #8
 80109f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109fa:	61ba      	str	r2, [r7, #24]
 80109fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109fe:	6979      	ldr	r1, [r7, #20]
 8010a00:	69ba      	ldr	r2, [r7, #24]
 8010a02:	e841 2300 	strex	r3, r2, [r1]
 8010a06:	613b      	str	r3, [r7, #16]
   return(result);
 8010a08:	693b      	ldr	r3, [r7, #16]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d1e5      	bne.n	80109da <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2220      	movs	r2, #32
 8010a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010a16:	bf00      	nop
 8010a18:	373c      	adds	r7, #60	@ 0x3c
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a22:	b480      	push	{r7}
 8010a24:	b095      	sub	sp, #84	@ 0x54
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a32:	e853 3f00 	ldrex	r3, [r3]
 8010a36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	461a      	mov	r2, r3
 8010a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a4a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a50:	e841 2300 	strex	r3, r2, [r1]
 8010a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d1e6      	bne.n	8010a2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	3308      	adds	r3, #8
 8010a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a64:	6a3b      	ldr	r3, [r7, #32]
 8010a66:	e853 3f00 	ldrex	r3, [r3]
 8010a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a6c:	69fb      	ldr	r3, [r7, #28]
 8010a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010a72:	f023 0301 	bic.w	r3, r3, #1
 8010a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	3308      	adds	r3, #8
 8010a7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a88:	e841 2300 	strex	r3, r2, [r1]
 8010a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d1e3      	bne.n	8010a5c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d118      	bne.n	8010ace <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	e853 3f00 	ldrex	r3, [r3]
 8010aa8:	60bb      	str	r3, [r7, #8]
   return(result);
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	f023 0310 	bic.w	r3, r3, #16
 8010ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	461a      	mov	r2, r3
 8010ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aba:	61bb      	str	r3, [r7, #24]
 8010abc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010abe:	6979      	ldr	r1, [r7, #20]
 8010ac0:	69ba      	ldr	r2, [r7, #24]
 8010ac2:	e841 2300 	strex	r3, r2, [r1]
 8010ac6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d1e6      	bne.n	8010a9c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010ae2:	bf00      	nop
 8010ae4:	3754      	adds	r7, #84	@ 0x54
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b09c      	sub	sp, #112	@ 0x70
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010afa:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	f003 0320 	and.w	r3, r3, #32
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d171      	bne.n	8010bee <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b0c:	2200      	movs	r2, #0
 8010b0e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b1a:	e853 3f00 	ldrex	r3, [r3]
 8010b1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010b20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b26:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010b32:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b34:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b36:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010b38:	e841 2300 	strex	r3, r2, [r1]
 8010b3c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1e6      	bne.n	8010b12 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	3308      	adds	r3, #8
 8010b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b4e:	e853 3f00 	ldrex	r3, [r3]
 8010b52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b56:	f023 0301 	bic.w	r3, r3, #1
 8010b5a:	667b      	str	r3, [r7, #100]	@ 0x64
 8010b5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	3308      	adds	r3, #8
 8010b62:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010b64:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b6c:	e841 2300 	strex	r3, r2, [r1]
 8010b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d1e5      	bne.n	8010b44 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	3308      	adds	r3, #8
 8010b7e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b82:	e853 3f00 	ldrex	r3, [r3]
 8010b86:	623b      	str	r3, [r7, #32]
   return(result);
 8010b88:	6a3b      	ldr	r3, [r7, #32]
 8010b8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8010b90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	3308      	adds	r3, #8
 8010b96:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010b98:	633a      	str	r2, [r7, #48]	@ 0x30
 8010b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b9c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010ba0:	e841 2300 	strex	r3, r2, [r1]
 8010ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d1e5      	bne.n	8010b78 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bae:	2220      	movs	r2, #32
 8010bb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bb8:	2b01      	cmp	r3, #1
 8010bba:	d118      	bne.n	8010bee <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bc2:	693b      	ldr	r3, [r7, #16]
 8010bc4:	e853 3f00 	ldrex	r3, [r3]
 8010bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	f023 0310 	bic.w	r3, r3, #16
 8010bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bda:	61fb      	str	r3, [r7, #28]
 8010bdc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bde:	69b9      	ldr	r1, [r7, #24]
 8010be0:	69fa      	ldr	r2, [r7, #28]
 8010be2:	e841 2300 	strex	r3, r2, [r1]
 8010be6:	617b      	str	r3, [r7, #20]
   return(result);
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d1e6      	bne.n	8010bbc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bf8:	2b01      	cmp	r3, #1
 8010bfa:	d109      	bne.n	8010c10 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8010bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bfe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010c04:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010c08:	4611      	mov	r1, r2
 8010c0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c0c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c0e:	e004      	b.n	8010c1a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8010c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c16:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c18:	4798      	blx	r3
}
 8010c1a:	bf00      	nop
 8010c1c:	3770      	adds	r7, #112	@ 0x70
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}

08010c22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b084      	sub	sp, #16
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	2201      	movs	r2, #1
 8010c34:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d10b      	bne.n	8010c56 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c44:	68fa      	ldr	r2, [r7, #12]
 8010c46:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010c4a:	0852      	lsrs	r2, r2, #1
 8010c4c:	b292      	uxth	r2, r2
 8010c4e:	4611      	mov	r1, r2
 8010c50:	68f8      	ldr	r0, [r7, #12]
 8010c52:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c54:	e004      	b.n	8010c60 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c5c:	68f8      	ldr	r0, [r7, #12]
 8010c5e:	4798      	blx	r3
}
 8010c60:	bf00      	nop
 8010c62:	3710      	adds	r7, #16
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}

08010c68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b086      	sub	sp, #24
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c84:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	689b      	ldr	r3, [r3, #8]
 8010c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c90:	2b80      	cmp	r3, #128	@ 0x80
 8010c92:	d109      	bne.n	8010ca8 <UART_DMAError+0x40>
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	2b21      	cmp	r3, #33	@ 0x21
 8010c98:	d106      	bne.n	8010ca8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010ca2:	6978      	ldr	r0, [r7, #20]
 8010ca4:	f7ff fe7c 	bl	80109a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	689b      	ldr	r3, [r3, #8]
 8010cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cb2:	2b40      	cmp	r3, #64	@ 0x40
 8010cb4:	d109      	bne.n	8010cca <UART_DMAError+0x62>
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	2b22      	cmp	r3, #34	@ 0x22
 8010cba:	d106      	bne.n	8010cca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	2200      	movs	r2, #0
 8010cc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010cc4:	6978      	ldr	r0, [r7, #20]
 8010cc6:	f7ff feac 	bl	8010a22 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010cd0:	f043 0210 	orr.w	r2, r3, #16
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010cda:	697b      	ldr	r3, [r7, #20]
 8010cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010ce0:	6978      	ldr	r0, [r7, #20]
 8010ce2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ce4:	bf00      	nop
 8010ce6:	3718      	adds	r7, #24
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b084      	sub	sp, #16
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d08:	68f8      	ldr	r0, [r7, #12]
 8010d0a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d0c:	bf00      	nop
 8010d0e:	3710      	adds	r7, #16
 8010d10:	46bd      	mov	sp, r7
 8010d12:	bd80      	pop	{r7, pc}

08010d14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b088      	sub	sp, #32
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	e853 3f00 	ldrex	r3, [r3]
 8010d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d30:	61fb      	str	r3, [r7, #28]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	461a      	mov	r2, r3
 8010d38:	69fb      	ldr	r3, [r7, #28]
 8010d3a:	61bb      	str	r3, [r7, #24]
 8010d3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d3e:	6979      	ldr	r1, [r7, #20]
 8010d40:	69ba      	ldr	r2, [r7, #24]
 8010d42:	e841 2300 	strex	r3, r2, [r1]
 8010d46:	613b      	str	r3, [r7, #16]
   return(result);
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d1e6      	bne.n	8010d1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	2220      	movs	r2, #32
 8010d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2200      	movs	r2, #0
 8010d5a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d66:	bf00      	nop
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}

08010d6e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010d6e:	b480      	push	{r7}
 8010d70:	b083      	sub	sp, #12
 8010d72:	af00      	add	r7, sp, #0
 8010d74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010d76:	bf00      	nop
 8010d78:	370c      	adds	r7, #12
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d80:	4770      	bx	lr

08010d82 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010d82:	b480      	push	{r7}
 8010d84:	b083      	sub	sp, #12
 8010d86:	af00      	add	r7, sp, #0
 8010d88:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010d8a:	bf00      	nop
 8010d8c:	370c      	adds	r7, #12
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr

08010d96 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010d96:	b480      	push	{r7}
 8010d98:	b083      	sub	sp, #12
 8010d9a:	af00      	add	r7, sp, #0
 8010d9c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010d9e:	bf00      	nop
 8010da0:	370c      	adds	r7, #12
 8010da2:	46bd      	mov	sp, r7
 8010da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da8:	4770      	bx	lr

08010daa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010daa:	b480      	push	{r7}
 8010dac:	b085      	sub	sp, #20
 8010dae:	af00      	add	r7, sp, #0
 8010db0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d101      	bne.n	8010dc0 <HAL_UARTEx_DisableFifoMode+0x16>
 8010dbc:	2302      	movs	r3, #2
 8010dbe:	e027      	b.n	8010e10 <HAL_UARTEx_DisableFifoMode+0x66>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2224      	movs	r2, #36	@ 0x24
 8010dcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	f022 0201 	bic.w	r2, r2, #1
 8010de6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010dee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2200      	movs	r2, #0
 8010df4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	68fa      	ldr	r2, [r7, #12]
 8010dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2220      	movs	r2, #32
 8010e02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d101      	bne.n	8010e34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e30:	2302      	movs	r3, #2
 8010e32:	e02d      	b.n	8010e90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2201      	movs	r2, #1
 8010e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2224      	movs	r2, #36	@ 0x24
 8010e40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	f022 0201 	bic.w	r2, r2, #1
 8010e5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	689b      	ldr	r3, [r3, #8]
 8010e62:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	683a      	ldr	r2, [r7, #0]
 8010e6c:	430a      	orrs	r2, r1
 8010e6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e70:	6878      	ldr	r0, [r7, #4]
 8010e72:	f000 f84f 	bl	8010f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68fa      	ldr	r2, [r7, #12]
 8010e7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2220      	movs	r2, #32
 8010e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2200      	movs	r2, #0
 8010e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e8e:	2300      	movs	r3, #0
}
 8010e90:	4618      	mov	r0, r3
 8010e92:	3710      	adds	r7, #16
 8010e94:	46bd      	mov	sp, r7
 8010e96:	bd80      	pop	{r7, pc}

08010e98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e98:	b580      	push	{r7, lr}
 8010e9a:	b084      	sub	sp, #16
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d101      	bne.n	8010eb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010eac:	2302      	movs	r3, #2
 8010eae:	e02d      	b.n	8010f0c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2201      	movs	r2, #1
 8010eb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2224      	movs	r2, #36	@ 0x24
 8010ebc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f022 0201 	bic.w	r2, r2, #1
 8010ed6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	689b      	ldr	r3, [r3, #8]
 8010ede:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	683a      	ldr	r2, [r7, #0]
 8010ee8:	430a      	orrs	r2, r1
 8010eea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010eec:	6878      	ldr	r0, [r7, #4]
 8010eee:	f000 f811 	bl	8010f14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2220      	movs	r2, #32
 8010efe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d108      	bne.n	8010f36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	2201      	movs	r2, #1
 8010f28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	2201      	movs	r2, #1
 8010f30:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f34:	e031      	b.n	8010f9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f36:	2308      	movs	r3, #8
 8010f38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f3a:	2308      	movs	r3, #8
 8010f3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	0e5b      	lsrs	r3, r3, #25
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	f003 0307 	and.w	r3, r3, #7
 8010f4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	689b      	ldr	r3, [r3, #8]
 8010f54:	0f5b      	lsrs	r3, r3, #29
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	f003 0307 	and.w	r3, r3, #7
 8010f5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f5e:	7bbb      	ldrb	r3, [r7, #14]
 8010f60:	7b3a      	ldrb	r2, [r7, #12]
 8010f62:	4911      	ldr	r1, [pc, #68]	@ (8010fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8010f64:	5c8a      	ldrb	r2, [r1, r2]
 8010f66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f6a:	7b3a      	ldrb	r2, [r7, #12]
 8010f6c:	490f      	ldr	r1, [pc, #60]	@ (8010fac <UARTEx_SetNbDataToProcess+0x98>)
 8010f6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f70:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f74:	b29a      	uxth	r2, r3
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f7c:	7bfb      	ldrb	r3, [r7, #15]
 8010f7e:	7b7a      	ldrb	r2, [r7, #13]
 8010f80:	4909      	ldr	r1, [pc, #36]	@ (8010fa8 <UARTEx_SetNbDataToProcess+0x94>)
 8010f82:	5c8a      	ldrb	r2, [r1, r2]
 8010f84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010f88:	7b7a      	ldrb	r2, [r7, #13]
 8010f8a:	4908      	ldr	r1, [pc, #32]	@ (8010fac <UARTEx_SetNbDataToProcess+0x98>)
 8010f8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f92:	b29a      	uxth	r2, r3
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010f9a:	bf00      	nop
 8010f9c:	3714      	adds	r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	08013a78 	.word	0x08013a78
 8010fac:	08013a80 	.word	0x08013a80

08010fb0 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b08b      	sub	sp, #44	@ 0x2c
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	60f8      	str	r0, [r7, #12]
 8010fb8:	60b9      	str	r1, [r7, #8]
 8010fba:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	685b      	ldr	r3, [r3, #4]
 8010fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	685b      	ldr	r3, [r3, #4]
 8010fc6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	881b      	ldrh	r3, [r3, #0]
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	885b      	ldrh	r3, [r3, #2]
 8010fd8:	fb02 f303 	mul.w	r3, r2, r3
 8010fdc:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010fe2:	e013      	b.n	801100c <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8010fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fe6:	1d1a      	adds	r2, r3, #4
 8010fe8:	627a      	str	r2, [r7, #36]	@ 0x24
 8010fea:	ed93 7a00 	vldr	s14, [r3]
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	1d1a      	adds	r2, r3, #4
 8010ff2:	623a      	str	r2, [r7, #32]
 8010ff4:	edd3 7a00 	vldr	s15, [r3]
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	1d1a      	adds	r2, r3, #4
 8010ffc:	61fa      	str	r2, [r7, #28]
 8010ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011002:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	3b01      	subs	r3, #1
 801100a:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 801100c:	69bb      	ldr	r3, [r7, #24]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1e8      	bne.n	8010fe4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011012:	2300      	movs	r3, #0
 8011014:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011016:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801101a:	4618      	mov	r0, r3
 801101c:	372c      	adds	r7, #44	@ 0x2c
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr

08011026 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011026:	b480      	push	{r7}
 8011028:	b085      	sub	sp, #20
 801102a:	af00      	add	r7, sp, #0
 801102c:	60f8      	str	r0, [r7, #12]
 801102e:	607b      	str	r3, [r7, #4]
 8011030:	460b      	mov	r3, r1
 8011032:	817b      	strh	r3, [r7, #10]
 8011034:	4613      	mov	r3, r2
 8011036:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	897a      	ldrh	r2, [r7, #10]
 801103c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	893a      	ldrh	r2, [r7, #8]
 8011042:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	687a      	ldr	r2, [r7, #4]
 8011048:	605a      	str	r2, [r3, #4]
}
 801104a:	bf00      	nop
 801104c:	3714      	adds	r7, #20
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011056:	b480      	push	{r7}
 8011058:	b0bb      	sub	sp, #236	@ 0xec
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
 801105e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	685b      	ldr	r3, [r3, #4]
 801106a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	885b      	ldrh	r3, [r3, #2]
 8011076:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011078:	f04f 0300 	mov.w	r3, #0
 801107c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011080:	f04f 0300 	mov.w	r3, #0
 8011084:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011086:	2300      	movs	r3, #0
 8011088:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 801108c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801108e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011094:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011098:	e03b      	b.n	8011112 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 801109a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801109c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80110a0:	1ad3      	subs	r3, r2, r3
 80110a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110a6:	e00c      	b.n	80110c2 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80110a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ac:	1d1a      	adds	r2, r3, #4
 80110ae:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110b2:	f04f 0200 	mov.w	r2, #0
 80110b6:	601a      	str	r2, [r3, #0]
        j--;
 80110b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110bc:	3b01      	subs	r3, #1
 80110be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1ee      	bne.n	80110a8 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80110ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ce:	1d1a      	adds	r2, r3, #4
 80110d0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80110d8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80110da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80110de:	3b01      	subs	r3, #1
 80110e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110e4:	e00c      	b.n	8011100 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80110e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ea:	1d1a      	adds	r2, r3, #4
 80110ec:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110f0:	f04f 0200 	mov.w	r2, #0
 80110f4:	601a      	str	r2, [r3, #0]
        j--;
 80110f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110fa:	3b01      	subs	r3, #1
 80110fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011100:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1ee      	bne.n	80110e6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8011108:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801110c:	3b01      	subs	r3, #1
 801110e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011112:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d1bf      	bne.n	801109a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801111a:	2300      	movs	r3, #0
 801111c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011120:	e2c7      	b.n	80116b2 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011122:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011126:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	685a      	ldr	r2, [r3, #4]
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	885b      	ldrh	r3, [r3, #2]
 8011130:	3301      	adds	r3, #1
 8011132:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011136:	fb01 f303 	mul.w	r3, r1, r3
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	4413      	add	r3, r2
 801113e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 801114c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011150:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011158:	3301      	adds	r3, #1
 801115a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801115e:	e02c      	b.n	80111ba <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	885b      	ldrh	r3, [r3, #2]
 8011168:	4619      	mov	r1, r3
 801116a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801116e:	fb03 f101 	mul.w	r1, r3, r1
 8011172:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011176:	440b      	add	r3, r1
 8011178:	009b      	lsls	r3, r3, #2
 801117a:	4413      	add	r3, r2
 801117c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011188:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801118c:	eeb0 7ae7 	vabs.f32	s14, s15
 8011190:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011194:	eef0 7ae7 	vabs.f32	s15, s15
 8011198:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a0:	dd06      	ble.n	80111b0 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80111a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80111a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 80111aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80111ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80111b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80111b4:	3301      	adds	r3, #1
 80111b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80111ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80111be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d3cd      	bcc.n	8011160 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80111c4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80111c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111d0:	f000 809b 	beq.w	801130a <arm_mat_inverse_f32+0x2b4>
 80111d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80111d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80111dc:	429a      	cmp	r2, r3
 80111de:	f000 8094 	beq.w	801130a <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	685b      	ldr	r3, [r3, #4]
 80111e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	885b      	ldrh	r3, [r3, #2]
 80111f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80111fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011204:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011206:	fb03 f202 	mul.w	r2, r3, r2
 801120a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801120e:	4413      	add	r3, r2
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011216:	4413      	add	r3, r2
 8011218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801121c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801121e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011222:	fb03 f202 	mul.w	r2, r3, r2
 8011226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801122a:	4413      	add	r3, r2
 801122c:	009b      	lsls	r3, r3, #2
 801122e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011232:	4413      	add	r3, r2
 8011234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011238:	2300      	movs	r3, #0
 801123a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801123e:	e018      	b.n	8011272 <arm_mat_inverse_f32+0x21c>
 8011240:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011248:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801124c:	1d1a      	adds	r2, r3, #4
 801124e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011256:	6812      	ldr	r2, [r2, #0]
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801125e:	1d1a      	adds	r2, r3, #4
 8011260:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011266:	601a      	str	r2, [r3, #0]
 8011268:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801126c:	3301      	adds	r3, #1
 801126e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011272:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011278:	429a      	cmp	r2, r3
 801127a:	dbe1      	blt.n	8011240 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	885b      	ldrh	r3, [r3, #2]
 8011290:	647b      	str	r3, [r7, #68]	@ 0x44
 8011292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011294:	643b      	str	r3, [r7, #64]	@ 0x40
 8011296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011298:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801129a:	fb02 f303 	mul.w	r3, r2, r3
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80112a4:	4413      	add	r3, r2
 80112a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80112aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80112b0:	fb02 f303 	mul.w	r3, r2, r3
 80112b4:	009b      	lsls	r3, r3, #2
 80112b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80112ba:	4413      	add	r3, r2
 80112bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112c0:	2300      	movs	r3, #0
 80112c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112c6:	e018      	b.n	80112fa <arm_mat_inverse_f32+0x2a4>
 80112c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112d4:	1d1a      	adds	r2, r3, #4
 80112d6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80112da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80112de:	6812      	ldr	r2, [r2, #0]
 80112e0:	601a      	str	r2, [r3, #0]
 80112e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80112e6:	1d1a      	adds	r2, r3, #4
 80112e8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80112ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80112ee:	601a      	str	r2, [r3, #0]
 80112f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80112f4:	3301      	adds	r3, #1
 80112f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80112fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011300:	429a      	cmp	r2, r3
 8011302:	dbe1      	blt.n	80112c8 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011304:	2301      	movs	r3, #1
 8011306:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801130a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801130e:	2b01      	cmp	r3, #1
 8011310:	d009      	beq.n	8011326 <arm_mat_inverse_f32+0x2d0>
 8011312:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011316:	eef5 7a40 	vcmp.f32	s15, #0.0
 801131a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801131e:	d102      	bne.n	8011326 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011320:	f06f 0304 	mvn.w	r3, #4
 8011324:	e208      	b.n	8011738 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8011326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801132a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 801132e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011332:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	637b      	str	r3, [r7, #52]	@ 0x34
 8011344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	633b      	str	r3, [r7, #48]	@ 0x30
 801134e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011350:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011352:	fb03 f202 	mul.w	r2, r3, r2
 8011356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801135a:	4413      	add	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011362:	4413      	add	r3, r2
 8011364:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011368:	2300      	movs	r3, #0
 801136a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801136e:	e011      	b.n	8011394 <arm_mat_inverse_f32+0x33e>
 8011370:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011374:	1d1a      	adds	r2, r3, #4
 8011376:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801137a:	ed93 7a00 	vldr	s14, [r3]
 801137e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011386:	edc3 7a00 	vstr	s15, [r3]
 801138a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801138e:	3301      	adds	r3, #1
 8011390:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011394:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801139a:	429a      	cmp	r2, r3
 801139c:	dbe8      	blt.n	8011370 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	685b      	ldr	r3, [r3, #4]
 80113a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	885b      	ldrh	r3, [r3, #2]
 80113aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113b4:	fb02 f303 	mul.w	r3, r2, r3
 80113b8:	009b      	lsls	r3, r3, #2
 80113ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80113be:	4413      	add	r3, r2
 80113c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113c4:	2300      	movs	r3, #0
 80113c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113ca:	e011      	b.n	80113f0 <arm_mat_inverse_f32+0x39a>
 80113cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80113d0:	1d1a      	adds	r2, r3, #4
 80113d2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80113d6:	ed93 7a00 	vldr	s14, [r3]
 80113da:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80113de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113e2:	edc3 7a00 	vstr	s15, [r3]
 80113e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113ea:	3301      	adds	r3, #1
 80113ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113f0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80113f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113f6:	429a      	cmp	r2, r3
 80113f8:	dbe8      	blt.n	80113cc <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80113fa:	2300      	movs	r3, #0
 80113fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011400:	e0ae      	b.n	8011560 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	685a      	ldr	r2, [r3, #4]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	885b      	ldrh	r3, [r3, #2]
 801140a:	4619      	mov	r1, r3
 801140c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011410:	fb03 f101 	mul.w	r1, r3, r1
 8011414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011418:	440b      	add	r3, r1
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	4413      	add	r3, r2
 801141e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	685b      	ldr	r3, [r3, #4]
 8011430:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	685b      	ldr	r3, [r3, #4]
 8011438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	885b      	ldrh	r3, [r3, #2]
 8011440:	617b      	str	r3, [r7, #20]
 8011442:	697a      	ldr	r2, [r7, #20]
 8011444:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	613b      	str	r3, [r7, #16]
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011452:	fb03 f202 	mul.w	r2, r3, r2
 8011456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801145a:	4413      	add	r3, r2
 801145c:	009b      	lsls	r3, r3, #2
 801145e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011462:	4413      	add	r3, r2
 8011464:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801146c:	fb03 f202 	mul.w	r2, r3, r2
 8011470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011474:	4413      	add	r3, r2
 8011476:	009b      	lsls	r3, r3, #2
 8011478:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801147c:	4413      	add	r3, r2
 801147e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011482:	2300      	movs	r3, #0
 8011484:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011488:	e01a      	b.n	80114c0 <arm_mat_inverse_f32+0x46a>
 801148a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801148e:	1d1a      	adds	r2, r3, #4
 8011490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011494:	ed93 7a00 	vldr	s14, [r3]
 8011498:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801149c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114a4:	1d1a      	adds	r2, r3, #4
 80114a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80114aa:	ed93 7a00 	vldr	s14, [r3]
 80114ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114b2:	edc3 7a00 	vstr	s15, [r3]
 80114b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114ba:	3301      	adds	r3, #1
 80114bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	dbdf      	blt.n	801148a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	685b      	ldr	r3, [r3, #4]
 80114d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	885b      	ldrh	r3, [r3, #2]
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	60bb      	str	r3, [r7, #8]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80114ea:	fb02 f303 	mul.w	r3, r2, r3
 80114ee:	009b      	lsls	r3, r3, #2
 80114f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80114f4:	4413      	add	r3, r2
 80114f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80114fe:	fb02 f303 	mul.w	r3, r2, r3
 8011502:	009b      	lsls	r3, r3, #2
 8011504:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011508:	4413      	add	r3, r2
 801150a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801150e:	2300      	movs	r3, #0
 8011510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011514:	e01a      	b.n	801154c <arm_mat_inverse_f32+0x4f6>
 8011516:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801151a:	1d1a      	adds	r2, r3, #4
 801151c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011520:	ed93 7a00 	vldr	s14, [r3]
 8011524:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011528:	ee67 7a27 	vmul.f32	s15, s14, s15
 801152c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011530:	1d1a      	adds	r2, r3, #4
 8011532:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011536:	ed93 7a00 	vldr	s14, [r3]
 801153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801153e:	edc3 7a00 	vstr	s15, [r3]
 8011542:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011546:	3301      	adds	r3, #1
 8011548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801154c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	429a      	cmp	r2, r3
 8011554:	dbdf      	blt.n	8011516 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8011556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801155a:	3301      	adds	r3, #1
 801155c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011560:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011566:	429a      	cmp	r2, r3
 8011568:	f4ff af4b 	bcc.w	8011402 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801156c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801156e:	3301      	adds	r3, #1
 8011570:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011574:	e092      	b.n	801169c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	685a      	ldr	r2, [r3, #4]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	885b      	ldrh	r3, [r3, #2]
 801157e:	4619      	mov	r1, r3
 8011580:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011584:	fb03 f101 	mul.w	r1, r3, r1
 8011588:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801158c:	440b      	add	r3, r1
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	4413      	add	r3, r2
 8011592:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	885b      	ldrh	r3, [r3, #2]
 80115b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80115b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115b8:	1ad3      	subs	r3, r2, r3
 80115ba:	623b      	str	r3, [r7, #32]
 80115bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80115c2:	fb03 f202 	mul.w	r2, r3, r2
 80115c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115ca:	4413      	add	r3, r2
 80115cc:	009b      	lsls	r3, r3, #2
 80115ce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80115d0:	4413      	add	r3, r2
 80115d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115d8:	fb03 f202 	mul.w	r2, r3, r2
 80115dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115e0:	4413      	add	r3, r2
 80115e2:	009b      	lsls	r3, r3, #2
 80115e4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80115e6:	4413      	add	r3, r2
 80115e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80115ea:	2300      	movs	r3, #0
 80115ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80115ee:	e014      	b.n	801161a <arm_mat_inverse_f32+0x5c4>
 80115f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115f2:	1d1a      	adds	r2, r3, #4
 80115f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80115f6:	ed93 7a00 	vldr	s14, [r3]
 80115fa:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011604:	1d1a      	adds	r2, r3, #4
 8011606:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011608:	ed93 7a00 	vldr	s14, [r3]
 801160c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011610:	edc3 7a00 	vstr	s15, [r3]
 8011614:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011616:	3301      	adds	r3, #1
 8011618:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801161a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	429a      	cmp	r2, r3
 8011620:	dbe6      	blt.n	80115f0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	685b      	ldr	r3, [r3, #4]
 8011626:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	685b      	ldr	r3, [r3, #4]
 801162c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	885b      	ldrh	r3, [r3, #2]
 8011632:	61fb      	str	r3, [r7, #28]
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	61bb      	str	r3, [r7, #24]
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801163e:	fb02 f303 	mul.w	r3, r2, r3
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011646:	4413      	add	r3, r2
 8011648:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801164e:	fb02 f303 	mul.w	r3, r2, r3
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011656:	4413      	add	r3, r2
 8011658:	66bb      	str	r3, [r7, #104]	@ 0x68
 801165a:	2300      	movs	r3, #0
 801165c:	673b      	str	r3, [r7, #112]	@ 0x70
 801165e:	e014      	b.n	801168a <arm_mat_inverse_f32+0x634>
 8011660:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011662:	1d1a      	adds	r2, r3, #4
 8011664:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011666:	ed93 7a00 	vldr	s14, [r3]
 801166a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801166e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011672:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011674:	1d1a      	adds	r2, r3, #4
 8011676:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011678:	ed93 7a00 	vldr	s14, [r3]
 801167c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011680:	edc3 7a00 	vstr	s15, [r3]
 8011684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011686:	3301      	adds	r3, #1
 8011688:	673b      	str	r3, [r7, #112]	@ 0x70
 801168a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	429a      	cmp	r2, r3
 8011690:	dbe6      	blt.n	8011660 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011696:	3301      	adds	r3, #1
 8011698:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801169c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80116a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116a2:	429a      	cmp	r2, r3
 80116a4:	f4ff af67 	bcc.w	8011576 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80116a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80116ac:	3301      	adds	r3, #1
 80116ae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80116b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80116b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116b8:	429a      	cmp	r2, r3
 80116ba:	f4ff ad32 	bcc.w	8011122 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80116be:	2300      	movs	r3, #0
 80116c0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80116c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d033      	beq.n	8011734 <arm_mat_inverse_f32+0x6de>
 80116cc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80116d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80116d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116d8:	d12c      	bne.n	8011734 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80116e0:	2300      	movs	r3, #0
 80116e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116e6:	e010      	b.n	801170a <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80116e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80116f0:	4413      	add	r3, r2
 80116f2:	edd3 7a00 	vldr	s15, [r3]
 80116f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80116fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116fe:	d10d      	bne.n	801171c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8011700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011704:	3301      	adds	r3, #1
 8011706:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801170a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801170c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801170e:	fb02 f303 	mul.w	r3, r2, r3
 8011712:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8011716:	429a      	cmp	r2, r3
 8011718:	d3e6      	bcc.n	80116e8 <arm_mat_inverse_f32+0x692>
 801171a:	e000      	b.n	801171e <arm_mat_inverse_f32+0x6c8>
            break;
 801171c:	bf00      	nop
      }

      if (i == numRows * numCols)
 801171e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011720:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011722:	fb02 f303 	mul.w	r3, r2, r3
 8011726:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801172a:	429a      	cmp	r2, r3
 801172c:	d102      	bne.n	8011734 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801172e:	23fb      	movs	r3, #251	@ 0xfb
 8011730:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8011734:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8011738:	4618      	mov	r0, r3
 801173a:	37ec      	adds	r7, #236	@ 0xec
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr

08011744 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011744:	b480      	push	{r7}
 8011746:	b093      	sub	sp, #76	@ 0x4c
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	685b      	ldr	r3, [r3, #4]
 801176c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	885b      	ldrh	r3, [r3, #2]
 8011778:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	885b      	ldrh	r3, [r3, #2]
 801177e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8011780:	2300      	movs	r3, #0
 8011782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011784:	8b7b      	ldrh	r3, [r7, #26]
 8011786:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8011788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	69fa      	ldr	r2, [r7, #28]
 801178e:	4413      	add	r3, r2
 8011790:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8011792:	8b3b      	ldrh	r3, [r7, #24]
 8011794:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	685b      	ldr	r3, [r3, #4]
 801179a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 801179c:	f04f 0300 	mov.w	r3, #0
 80117a0:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80117a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117a4:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80117a6:	8afb      	ldrh	r3, [r7, #22]
 80117a8:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80117aa:	e017      	b.n	80117dc <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 80117ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80117ae:	1d1a      	adds	r2, r3, #4
 80117b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80117b2:	ed93 7a00 	vldr	s14, [r3]
 80117b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117b8:	edd3 7a00 	vldr	s15, [r3]
 80117bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117c0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80117c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80117cc:	8b3b      	ldrh	r3, [r7, #24]
 80117ce:	009b      	lsls	r3, r3, #2
 80117d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117d2:	4413      	add	r3, r2
 80117d4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80117d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d8:	3b01      	subs	r3, #1
 80117da:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 80117dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1e4      	bne.n	80117ac <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80117e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e4:	1d1a      	adds	r2, r3, #4
 80117e6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80117e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117ea:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80117ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ee:	3b01      	subs	r3, #1
 80117f0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80117f2:	8b3a      	ldrh	r2, [r7, #24]
 80117f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f6:	1ad3      	subs	r3, r2, r3
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	6a3a      	ldr	r2, [r7, #32]
 80117fc:	4413      	add	r3, r2
 80117fe:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8011800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011802:	2b00      	cmp	r3, #0
 8011804:	d1ca      	bne.n	801179c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8011806:	8b3b      	ldrh	r3, [r7, #24]
 8011808:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801180a:	4413      	add	r3, r2
 801180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 801180e:	8afb      	ldrh	r3, [r7, #22]
 8011810:	009b      	lsls	r3, r3, #2
 8011812:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011814:	4413      	add	r3, r2
 8011816:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8011818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801181a:	3b01      	subs	r3, #1
 801181c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 801181e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011820:	2b00      	cmp	r3, #0
 8011822:	d1b1      	bne.n	8011788 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011824:	2300      	movs	r3, #0
 8011826:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8011828:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801182c:	4618      	mov	r0, r3
 801182e:	374c      	adds	r7, #76	@ 0x4c
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8011838:	b480      	push	{r7}
 801183a:	b08b      	sub	sp, #44	@ 0x2c
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	ed87 0a02 	vstr	s0, [r7, #8]
 8011844:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	881b      	ldrh	r3, [r3, #0]
 8011856:	461a      	mov	r2, r3
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	885b      	ldrh	r3, [r3, #2]
 801185c:	fb02 f303 	mul.w	r3, r2, r3
 8011860:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011866:	e010      	b.n	801188a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8011868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801186a:	1d1a      	adds	r2, r3, #4
 801186c:	627a      	str	r2, [r7, #36]	@ 0x24
 801186e:	ed93 7a00 	vldr	s14, [r3]
 8011872:	6a3b      	ldr	r3, [r7, #32]
 8011874:	1d1a      	adds	r2, r3, #4
 8011876:	623a      	str	r2, [r7, #32]
 8011878:	edd7 7a02 	vldr	s15, [r7, #8]
 801187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011880:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	3b01      	subs	r3, #1
 8011888:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d1eb      	bne.n	8011868 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011890:	2300      	movs	r3, #0
 8011892:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8011894:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011898:	4618      	mov	r0, r3
 801189a:	372c      	adds	r7, #44	@ 0x2c
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b08b      	sub	sp, #44	@ 0x2c
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	461a      	mov	r2, r3
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	885b      	ldrh	r3, [r3, #2]
 80118cc:	fb02 f303 	mul.w	r3, r2, r3
 80118d0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80118d6:	e013      	b.n	8011900 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80118d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118da:	1d1a      	adds	r2, r3, #4
 80118dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80118de:	ed93 7a00 	vldr	s14, [r3]
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	1d1a      	adds	r2, r3, #4
 80118e6:	623a      	str	r2, [r7, #32]
 80118e8:	edd3 7a00 	vldr	s15, [r3]
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	1d1a      	adds	r2, r3, #4
 80118f0:	61fa      	str	r2, [r7, #28]
 80118f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118f6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d1e8      	bne.n	80118d8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011906:	2300      	movs	r3, #0
 8011908:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801190a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801190e:	4618      	mov	r0, r3
 8011910:	372c      	adds	r7, #44	@ 0x2c
 8011912:	46bd      	mov	sp, r7
 8011914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011918:	4770      	bx	lr

0801191a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801191a:	b480      	push	{r7}
 801191c:	b08b      	sub	sp, #44	@ 0x2c
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
 8011922:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	885b      	ldrh	r3, [r3, #2]
 801193a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 801193c:	89fb      	ldrh	r3, [r7, #14]
 801193e:	61bb      	str	r3, [r7, #24]
 8011940:	2300      	movs	r3, #0
 8011942:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	009b      	lsls	r3, r3, #2
 8011948:	693a      	ldr	r2, [r7, #16]
 801194a:	4413      	add	r3, r2
 801194c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 801194e:	89bb      	ldrh	r3, [r7, #12]
 8011950:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8011952:	e00d      	b.n	8011970 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8011954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011956:	1d1a      	adds	r2, r3, #4
 8011958:	627a      	str	r2, [r7, #36]	@ 0x24
 801195a:	681a      	ldr	r2, [r3, #0]
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8011960:	89fb      	ldrh	r3, [r7, #14]
 8011962:	009b      	lsls	r3, r3, #2
 8011964:	6a3a      	ldr	r2, [r7, #32]
 8011966:	4413      	add	r3, r2
 8011968:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	3b01      	subs	r3, #1
 801196e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d1ee      	bne.n	8011954 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	3301      	adds	r3, #1
 801197a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801197c:	69bb      	ldr	r3, [r7, #24]
 801197e:	3b01      	subs	r3, #1
 8011980:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8011982:	69bb      	ldr	r3, [r7, #24]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d1dd      	bne.n	8011944 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011988:	2300      	movs	r3, #0
 801198a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801198c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011990:	4618      	mov	r0, r3
 8011992:	372c      	adds	r7, #44	@ 0x2c
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <malloc>:
 801199c:	4b02      	ldr	r3, [pc, #8]	@ (80119a8 <malloc+0xc>)
 801199e:	4601      	mov	r1, r0
 80119a0:	6818      	ldr	r0, [r3, #0]
 80119a2:	f000 b825 	b.w	80119f0 <_malloc_r>
 80119a6:	bf00      	nop
 80119a8:	20000144 	.word	0x20000144

080119ac <sbrk_aligned>:
 80119ac:	b570      	push	{r4, r5, r6, lr}
 80119ae:	4e0f      	ldr	r6, [pc, #60]	@ (80119ec <sbrk_aligned+0x40>)
 80119b0:	460c      	mov	r4, r1
 80119b2:	6831      	ldr	r1, [r6, #0]
 80119b4:	4605      	mov	r5, r0
 80119b6:	b911      	cbnz	r1, 80119be <sbrk_aligned+0x12>
 80119b8:	f000 f8ae 	bl	8011b18 <_sbrk_r>
 80119bc:	6030      	str	r0, [r6, #0]
 80119be:	4621      	mov	r1, r4
 80119c0:	4628      	mov	r0, r5
 80119c2:	f000 f8a9 	bl	8011b18 <_sbrk_r>
 80119c6:	1c43      	adds	r3, r0, #1
 80119c8:	d103      	bne.n	80119d2 <sbrk_aligned+0x26>
 80119ca:	f04f 34ff 	mov.w	r4, #4294967295
 80119ce:	4620      	mov	r0, r4
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
 80119d2:	1cc4      	adds	r4, r0, #3
 80119d4:	f024 0403 	bic.w	r4, r4, #3
 80119d8:	42a0      	cmp	r0, r4
 80119da:	d0f8      	beq.n	80119ce <sbrk_aligned+0x22>
 80119dc:	1a21      	subs	r1, r4, r0
 80119de:	4628      	mov	r0, r5
 80119e0:	f000 f89a 	bl	8011b18 <_sbrk_r>
 80119e4:	3001      	adds	r0, #1
 80119e6:	d1f2      	bne.n	80119ce <sbrk_aligned+0x22>
 80119e8:	e7ef      	b.n	80119ca <sbrk_aligned+0x1e>
 80119ea:	bf00      	nop
 80119ec:	20002228 	.word	0x20002228

080119f0 <_malloc_r>:
 80119f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119f4:	1ccd      	adds	r5, r1, #3
 80119f6:	f025 0503 	bic.w	r5, r5, #3
 80119fa:	3508      	adds	r5, #8
 80119fc:	2d0c      	cmp	r5, #12
 80119fe:	bf38      	it	cc
 8011a00:	250c      	movcc	r5, #12
 8011a02:	2d00      	cmp	r5, #0
 8011a04:	4606      	mov	r6, r0
 8011a06:	db01      	blt.n	8011a0c <_malloc_r+0x1c>
 8011a08:	42a9      	cmp	r1, r5
 8011a0a:	d904      	bls.n	8011a16 <_malloc_r+0x26>
 8011a0c:	230c      	movs	r3, #12
 8011a0e:	6033      	str	r3, [r6, #0]
 8011a10:	2000      	movs	r0, #0
 8011a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011aec <_malloc_r+0xfc>
 8011a1a:	f000 f869 	bl	8011af0 <__malloc_lock>
 8011a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a22:	461c      	mov	r4, r3
 8011a24:	bb44      	cbnz	r4, 8011a78 <_malloc_r+0x88>
 8011a26:	4629      	mov	r1, r5
 8011a28:	4630      	mov	r0, r6
 8011a2a:	f7ff ffbf 	bl	80119ac <sbrk_aligned>
 8011a2e:	1c43      	adds	r3, r0, #1
 8011a30:	4604      	mov	r4, r0
 8011a32:	d158      	bne.n	8011ae6 <_malloc_r+0xf6>
 8011a34:	f8d8 4000 	ldr.w	r4, [r8]
 8011a38:	4627      	mov	r7, r4
 8011a3a:	2f00      	cmp	r7, #0
 8011a3c:	d143      	bne.n	8011ac6 <_malloc_r+0xd6>
 8011a3e:	2c00      	cmp	r4, #0
 8011a40:	d04b      	beq.n	8011ada <_malloc_r+0xea>
 8011a42:	6823      	ldr	r3, [r4, #0]
 8011a44:	4639      	mov	r1, r7
 8011a46:	4630      	mov	r0, r6
 8011a48:	eb04 0903 	add.w	r9, r4, r3
 8011a4c:	f000 f864 	bl	8011b18 <_sbrk_r>
 8011a50:	4581      	cmp	r9, r0
 8011a52:	d142      	bne.n	8011ada <_malloc_r+0xea>
 8011a54:	6821      	ldr	r1, [r4, #0]
 8011a56:	1a6d      	subs	r5, r5, r1
 8011a58:	4629      	mov	r1, r5
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	f7ff ffa6 	bl	80119ac <sbrk_aligned>
 8011a60:	3001      	adds	r0, #1
 8011a62:	d03a      	beq.n	8011ada <_malloc_r+0xea>
 8011a64:	6823      	ldr	r3, [r4, #0]
 8011a66:	442b      	add	r3, r5
 8011a68:	6023      	str	r3, [r4, #0]
 8011a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a6e:	685a      	ldr	r2, [r3, #4]
 8011a70:	bb62      	cbnz	r2, 8011acc <_malloc_r+0xdc>
 8011a72:	f8c8 7000 	str.w	r7, [r8]
 8011a76:	e00f      	b.n	8011a98 <_malloc_r+0xa8>
 8011a78:	6822      	ldr	r2, [r4, #0]
 8011a7a:	1b52      	subs	r2, r2, r5
 8011a7c:	d420      	bmi.n	8011ac0 <_malloc_r+0xd0>
 8011a7e:	2a0b      	cmp	r2, #11
 8011a80:	d917      	bls.n	8011ab2 <_malloc_r+0xc2>
 8011a82:	1961      	adds	r1, r4, r5
 8011a84:	42a3      	cmp	r3, r4
 8011a86:	6025      	str	r5, [r4, #0]
 8011a88:	bf18      	it	ne
 8011a8a:	6059      	strne	r1, [r3, #4]
 8011a8c:	6863      	ldr	r3, [r4, #4]
 8011a8e:	bf08      	it	eq
 8011a90:	f8c8 1000 	streq.w	r1, [r8]
 8011a94:	5162      	str	r2, [r4, r5]
 8011a96:	604b      	str	r3, [r1, #4]
 8011a98:	4630      	mov	r0, r6
 8011a9a:	f000 f82f 	bl	8011afc <__malloc_unlock>
 8011a9e:	f104 000b 	add.w	r0, r4, #11
 8011aa2:	1d23      	adds	r3, r4, #4
 8011aa4:	f020 0007 	bic.w	r0, r0, #7
 8011aa8:	1ac2      	subs	r2, r0, r3
 8011aaa:	bf1c      	itt	ne
 8011aac:	1a1b      	subne	r3, r3, r0
 8011aae:	50a3      	strne	r3, [r4, r2]
 8011ab0:	e7af      	b.n	8011a12 <_malloc_r+0x22>
 8011ab2:	6862      	ldr	r2, [r4, #4]
 8011ab4:	42a3      	cmp	r3, r4
 8011ab6:	bf0c      	ite	eq
 8011ab8:	f8c8 2000 	streq.w	r2, [r8]
 8011abc:	605a      	strne	r2, [r3, #4]
 8011abe:	e7eb      	b.n	8011a98 <_malloc_r+0xa8>
 8011ac0:	4623      	mov	r3, r4
 8011ac2:	6864      	ldr	r4, [r4, #4]
 8011ac4:	e7ae      	b.n	8011a24 <_malloc_r+0x34>
 8011ac6:	463c      	mov	r4, r7
 8011ac8:	687f      	ldr	r7, [r7, #4]
 8011aca:	e7b6      	b.n	8011a3a <_malloc_r+0x4a>
 8011acc:	461a      	mov	r2, r3
 8011ace:	685b      	ldr	r3, [r3, #4]
 8011ad0:	42a3      	cmp	r3, r4
 8011ad2:	d1fb      	bne.n	8011acc <_malloc_r+0xdc>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	6053      	str	r3, [r2, #4]
 8011ad8:	e7de      	b.n	8011a98 <_malloc_r+0xa8>
 8011ada:	230c      	movs	r3, #12
 8011adc:	6033      	str	r3, [r6, #0]
 8011ade:	4630      	mov	r0, r6
 8011ae0:	f000 f80c 	bl	8011afc <__malloc_unlock>
 8011ae4:	e794      	b.n	8011a10 <_malloc_r+0x20>
 8011ae6:	6005      	str	r5, [r0, #0]
 8011ae8:	e7d6      	b.n	8011a98 <_malloc_r+0xa8>
 8011aea:	bf00      	nop
 8011aec:	2000222c 	.word	0x2000222c

08011af0 <__malloc_lock>:
 8011af0:	4801      	ldr	r0, [pc, #4]	@ (8011af8 <__malloc_lock+0x8>)
 8011af2:	f000 b84b 	b.w	8011b8c <__retarget_lock_acquire_recursive>
 8011af6:	bf00      	nop
 8011af8:	2000236c 	.word	0x2000236c

08011afc <__malloc_unlock>:
 8011afc:	4801      	ldr	r0, [pc, #4]	@ (8011b04 <__malloc_unlock+0x8>)
 8011afe:	f000 b846 	b.w	8011b8e <__retarget_lock_release_recursive>
 8011b02:	bf00      	nop
 8011b04:	2000236c 	.word	0x2000236c

08011b08 <memset>:
 8011b08:	4402      	add	r2, r0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d100      	bne.n	8011b12 <memset+0xa>
 8011b10:	4770      	bx	lr
 8011b12:	f803 1b01 	strb.w	r1, [r3], #1
 8011b16:	e7f9      	b.n	8011b0c <memset+0x4>

08011b18 <_sbrk_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d06      	ldr	r5, [pc, #24]	@ (8011b34 <_sbrk_r+0x1c>)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4604      	mov	r4, r0
 8011b20:	4608      	mov	r0, r1
 8011b22:	602b      	str	r3, [r5, #0]
 8011b24:	f7f7 f926 	bl	8008d74 <_sbrk>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_sbrk_r+0x1a>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_sbrk_r+0x1a>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	20002368 	.word	0x20002368

08011b38 <__errno>:
 8011b38:	4b01      	ldr	r3, [pc, #4]	@ (8011b40 <__errno+0x8>)
 8011b3a:	6818      	ldr	r0, [r3, #0]
 8011b3c:	4770      	bx	lr
 8011b3e:	bf00      	nop
 8011b40:	20000144 	.word	0x20000144

08011b44 <__libc_init_array>:
 8011b44:	b570      	push	{r4, r5, r6, lr}
 8011b46:	4d0d      	ldr	r5, [pc, #52]	@ (8011b7c <__libc_init_array+0x38>)
 8011b48:	4c0d      	ldr	r4, [pc, #52]	@ (8011b80 <__libc_init_array+0x3c>)
 8011b4a:	1b64      	subs	r4, r4, r5
 8011b4c:	10a4      	asrs	r4, r4, #2
 8011b4e:	2600      	movs	r6, #0
 8011b50:	42a6      	cmp	r6, r4
 8011b52:	d109      	bne.n	8011b68 <__libc_init_array+0x24>
 8011b54:	4d0b      	ldr	r5, [pc, #44]	@ (8011b84 <__libc_init_array+0x40>)
 8011b56:	4c0c      	ldr	r4, [pc, #48]	@ (8011b88 <__libc_init_array+0x44>)
 8011b58:	f001 ff32 	bl	80139c0 <_init>
 8011b5c:	1b64      	subs	r4, r4, r5
 8011b5e:	10a4      	asrs	r4, r4, #2
 8011b60:	2600      	movs	r6, #0
 8011b62:	42a6      	cmp	r6, r4
 8011b64:	d105      	bne.n	8011b72 <__libc_init_array+0x2e>
 8011b66:	bd70      	pop	{r4, r5, r6, pc}
 8011b68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b6c:	4798      	blx	r3
 8011b6e:	3601      	adds	r6, #1
 8011b70:	e7ee      	b.n	8011b50 <__libc_init_array+0xc>
 8011b72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b76:	4798      	blx	r3
 8011b78:	3601      	adds	r6, #1
 8011b7a:	e7f2      	b.n	8011b62 <__libc_init_array+0x1e>
 8011b7c:	08014040 	.word	0x08014040
 8011b80:	08014040 	.word	0x08014040
 8011b84:	08014040 	.word	0x08014040
 8011b88:	08014044 	.word	0x08014044

08011b8c <__retarget_lock_acquire_recursive>:
 8011b8c:	4770      	bx	lr

08011b8e <__retarget_lock_release_recursive>:
 8011b8e:	4770      	bx	lr

08011b90 <memcpy>:
 8011b90:	440a      	add	r2, r1
 8011b92:	4291      	cmp	r1, r2
 8011b94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b98:	d100      	bne.n	8011b9c <memcpy+0xc>
 8011b9a:	4770      	bx	lr
 8011b9c:	b510      	push	{r4, lr}
 8011b9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ba2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ba6:	4291      	cmp	r1, r2
 8011ba8:	d1f9      	bne.n	8011b9e <memcpy+0xe>
 8011baa:	bd10      	pop	{r4, pc}
 8011bac:	0000      	movs	r0, r0
	...

08011bb0 <cos>:
 8011bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011bb2:	ec53 2b10 	vmov	r2, r3, d0
 8011bb6:	4826      	ldr	r0, [pc, #152]	@ (8011c50 <cos+0xa0>)
 8011bb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011bbc:	4281      	cmp	r1, r0
 8011bbe:	d806      	bhi.n	8011bce <cos+0x1e>
 8011bc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011c48 <cos+0x98>
 8011bc4:	b005      	add	sp, #20
 8011bc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bca:	f000 b9bd 	b.w	8011f48 <__kernel_cos>
 8011bce:	4821      	ldr	r0, [pc, #132]	@ (8011c54 <cos+0xa4>)
 8011bd0:	4281      	cmp	r1, r0
 8011bd2:	d908      	bls.n	8011be6 <cos+0x36>
 8011bd4:	4610      	mov	r0, r2
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	f7ee fb22 	bl	8000220 <__aeabi_dsub>
 8011bdc:	ec41 0b10 	vmov	d0, r0, r1
 8011be0:	b005      	add	sp, #20
 8011be2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011be6:	4668      	mov	r0, sp
 8011be8:	f000 fb32 	bl	8012250 <__ieee754_rem_pio2>
 8011bec:	f000 0003 	and.w	r0, r0, #3
 8011bf0:	2801      	cmp	r0, #1
 8011bf2:	d00b      	beq.n	8011c0c <cos+0x5c>
 8011bf4:	2802      	cmp	r0, #2
 8011bf6:	d015      	beq.n	8011c24 <cos+0x74>
 8011bf8:	b9d8      	cbnz	r0, 8011c32 <cos+0x82>
 8011bfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bfe:	ed9d 0b00 	vldr	d0, [sp]
 8011c02:	f000 f9a1 	bl	8011f48 <__kernel_cos>
 8011c06:	ec51 0b10 	vmov	r0, r1, d0
 8011c0a:	e7e7      	b.n	8011bdc <cos+0x2c>
 8011c0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c10:	ed9d 0b00 	vldr	d0, [sp]
 8011c14:	f000 fa60 	bl	80120d8 <__kernel_sin>
 8011c18:	ec53 2b10 	vmov	r2, r3, d0
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011c22:	e7db      	b.n	8011bdc <cos+0x2c>
 8011c24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c28:	ed9d 0b00 	vldr	d0, [sp]
 8011c2c:	f000 f98c 	bl	8011f48 <__kernel_cos>
 8011c30:	e7f2      	b.n	8011c18 <cos+0x68>
 8011c32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c36:	ed9d 0b00 	vldr	d0, [sp]
 8011c3a:	2001      	movs	r0, #1
 8011c3c:	f000 fa4c 	bl	80120d8 <__kernel_sin>
 8011c40:	e7e1      	b.n	8011c06 <cos+0x56>
 8011c42:	bf00      	nop
 8011c44:	f3af 8000 	nop.w
	...
 8011c50:	3fe921fb 	.word	0x3fe921fb
 8011c54:	7fefffff 	.word	0x7fefffff

08011c58 <sin>:
 8011c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c5a:	ec53 2b10 	vmov	r2, r3, d0
 8011c5e:	4826      	ldr	r0, [pc, #152]	@ (8011cf8 <sin+0xa0>)
 8011c60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011c64:	4281      	cmp	r1, r0
 8011c66:	d807      	bhi.n	8011c78 <sin+0x20>
 8011c68:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011cf0 <sin+0x98>
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	b005      	add	sp, #20
 8011c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c74:	f000 ba30 	b.w	80120d8 <__kernel_sin>
 8011c78:	4820      	ldr	r0, [pc, #128]	@ (8011cfc <sin+0xa4>)
 8011c7a:	4281      	cmp	r1, r0
 8011c7c:	d908      	bls.n	8011c90 <sin+0x38>
 8011c7e:	4610      	mov	r0, r2
 8011c80:	4619      	mov	r1, r3
 8011c82:	f7ee facd 	bl	8000220 <__aeabi_dsub>
 8011c86:	ec41 0b10 	vmov	d0, r0, r1
 8011c8a:	b005      	add	sp, #20
 8011c8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c90:	4668      	mov	r0, sp
 8011c92:	f000 fadd 	bl	8012250 <__ieee754_rem_pio2>
 8011c96:	f000 0003 	and.w	r0, r0, #3
 8011c9a:	2801      	cmp	r0, #1
 8011c9c:	d00c      	beq.n	8011cb8 <sin+0x60>
 8011c9e:	2802      	cmp	r0, #2
 8011ca0:	d011      	beq.n	8011cc6 <sin+0x6e>
 8011ca2:	b9e8      	cbnz	r0, 8011ce0 <sin+0x88>
 8011ca4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ca8:	ed9d 0b00 	vldr	d0, [sp]
 8011cac:	2001      	movs	r0, #1
 8011cae:	f000 fa13 	bl	80120d8 <__kernel_sin>
 8011cb2:	ec51 0b10 	vmov	r0, r1, d0
 8011cb6:	e7e6      	b.n	8011c86 <sin+0x2e>
 8011cb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cbc:	ed9d 0b00 	vldr	d0, [sp]
 8011cc0:	f000 f942 	bl	8011f48 <__kernel_cos>
 8011cc4:	e7f5      	b.n	8011cb2 <sin+0x5a>
 8011cc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cca:	ed9d 0b00 	vldr	d0, [sp]
 8011cce:	2001      	movs	r0, #1
 8011cd0:	f000 fa02 	bl	80120d8 <__kernel_sin>
 8011cd4:	ec53 2b10 	vmov	r2, r3, d0
 8011cd8:	4610      	mov	r0, r2
 8011cda:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011cde:	e7d2      	b.n	8011c86 <sin+0x2e>
 8011ce0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011ce4:	ed9d 0b00 	vldr	d0, [sp]
 8011ce8:	f000 f92e 	bl	8011f48 <__kernel_cos>
 8011cec:	e7f2      	b.n	8011cd4 <sin+0x7c>
 8011cee:	bf00      	nop
	...
 8011cf8:	3fe921fb 	.word	0x3fe921fb
 8011cfc:	7fefffff 	.word	0x7fefffff

08011d00 <fmodf>:
 8011d00:	b508      	push	{r3, lr}
 8011d02:	ed2d 8b02 	vpush	{d8}
 8011d06:	eef0 8a40 	vmov.f32	s17, s0
 8011d0a:	eeb0 8a60 	vmov.f32	s16, s1
 8011d0e:	f000 fd43 	bl	8012798 <__ieee754_fmodf>
 8011d12:	eef4 8a48 	vcmp.f32	s17, s16
 8011d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d1a:	d60c      	bvs.n	8011d36 <fmodf+0x36>
 8011d1c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011d3c <fmodf+0x3c>
 8011d20:	eeb4 8a68 	vcmp.f32	s16, s17
 8011d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d28:	d105      	bne.n	8011d36 <fmodf+0x36>
 8011d2a:	f7ff ff05 	bl	8011b38 <__errno>
 8011d2e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011d32:	2321      	movs	r3, #33	@ 0x21
 8011d34:	6003      	str	r3, [r0, #0]
 8011d36:	ecbd 8b02 	vpop	{d8}
 8011d3a:	bd08      	pop	{r3, pc}
 8011d3c:	00000000 	.word	0x00000000

08011d40 <sqrtf>:
 8011d40:	b508      	push	{r3, lr}
 8011d42:	ed2d 8b02 	vpush	{d8}
 8011d46:	eeb0 8a40 	vmov.f32	s16, s0
 8011d4a:	f000 f8f7 	bl	8011f3c <__ieee754_sqrtf>
 8011d4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d56:	d60c      	bvs.n	8011d72 <sqrtf+0x32>
 8011d58:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011d78 <sqrtf+0x38>
 8011d5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d64:	d505      	bpl.n	8011d72 <sqrtf+0x32>
 8011d66:	f7ff fee7 	bl	8011b38 <__errno>
 8011d6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011d6e:	2321      	movs	r3, #33	@ 0x21
 8011d70:	6003      	str	r3, [r0, #0]
 8011d72:	ecbd 8b02 	vpop	{d8}
 8011d76:	bd08      	pop	{r3, pc}
 8011d78:	00000000 	.word	0x00000000

08011d7c <cosf>:
 8011d7c:	ee10 3a10 	vmov	r3, s0
 8011d80:	b507      	push	{r0, r1, r2, lr}
 8011d82:	4a1e      	ldr	r2, [pc, #120]	@ (8011dfc <cosf+0x80>)
 8011d84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d806      	bhi.n	8011d9a <cosf+0x1e>
 8011d8c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011e00 <cosf+0x84>
 8011d90:	b003      	add	sp, #12
 8011d92:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d96:	f000 bc5f 	b.w	8012658 <__kernel_cosf>
 8011d9a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011d9e:	d304      	bcc.n	8011daa <cosf+0x2e>
 8011da0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011da4:	b003      	add	sp, #12
 8011da6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011daa:	4668      	mov	r0, sp
 8011dac:	f000 fd76 	bl	801289c <__ieee754_rem_pio2f>
 8011db0:	f000 0003 	and.w	r0, r0, #3
 8011db4:	2801      	cmp	r0, #1
 8011db6:	d009      	beq.n	8011dcc <cosf+0x50>
 8011db8:	2802      	cmp	r0, #2
 8011dba:	d010      	beq.n	8011dde <cosf+0x62>
 8011dbc:	b9b0      	cbnz	r0, 8011dec <cosf+0x70>
 8011dbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dc2:	ed9d 0a00 	vldr	s0, [sp]
 8011dc6:	f000 fc47 	bl	8012658 <__kernel_cosf>
 8011dca:	e7eb      	b.n	8011da4 <cosf+0x28>
 8011dcc:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dd0:	ed9d 0a00 	vldr	s0, [sp]
 8011dd4:	f000 fc98 	bl	8012708 <__kernel_sinf>
 8011dd8:	eeb1 0a40 	vneg.f32	s0, s0
 8011ddc:	e7e2      	b.n	8011da4 <cosf+0x28>
 8011dde:	eddd 0a01 	vldr	s1, [sp, #4]
 8011de2:	ed9d 0a00 	vldr	s0, [sp]
 8011de6:	f000 fc37 	bl	8012658 <__kernel_cosf>
 8011dea:	e7f5      	b.n	8011dd8 <cosf+0x5c>
 8011dec:	eddd 0a01 	vldr	s1, [sp, #4]
 8011df0:	ed9d 0a00 	vldr	s0, [sp]
 8011df4:	2001      	movs	r0, #1
 8011df6:	f000 fc87 	bl	8012708 <__kernel_sinf>
 8011dfa:	e7d3      	b.n	8011da4 <cosf+0x28>
 8011dfc:	3f490fd8 	.word	0x3f490fd8
 8011e00:	00000000 	.word	0x00000000

08011e04 <sinf>:
 8011e04:	ee10 3a10 	vmov	r3, s0
 8011e08:	b507      	push	{r0, r1, r2, lr}
 8011e0a:	4a1f      	ldr	r2, [pc, #124]	@ (8011e88 <sinf+0x84>)
 8011e0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e10:	4293      	cmp	r3, r2
 8011e12:	d807      	bhi.n	8011e24 <sinf+0x20>
 8011e14:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011e8c <sinf+0x88>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	b003      	add	sp, #12
 8011e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e20:	f000 bc72 	b.w	8012708 <__kernel_sinf>
 8011e24:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011e28:	d304      	bcc.n	8011e34 <sinf+0x30>
 8011e2a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011e2e:	b003      	add	sp, #12
 8011e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e34:	4668      	mov	r0, sp
 8011e36:	f000 fd31 	bl	801289c <__ieee754_rem_pio2f>
 8011e3a:	f000 0003 	and.w	r0, r0, #3
 8011e3e:	2801      	cmp	r0, #1
 8011e40:	d00a      	beq.n	8011e58 <sinf+0x54>
 8011e42:	2802      	cmp	r0, #2
 8011e44:	d00f      	beq.n	8011e66 <sinf+0x62>
 8011e46:	b9c0      	cbnz	r0, 8011e7a <sinf+0x76>
 8011e48:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e4c:	ed9d 0a00 	vldr	s0, [sp]
 8011e50:	2001      	movs	r0, #1
 8011e52:	f000 fc59 	bl	8012708 <__kernel_sinf>
 8011e56:	e7ea      	b.n	8011e2e <sinf+0x2a>
 8011e58:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e5c:	ed9d 0a00 	vldr	s0, [sp]
 8011e60:	f000 fbfa 	bl	8012658 <__kernel_cosf>
 8011e64:	e7e3      	b.n	8011e2e <sinf+0x2a>
 8011e66:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e6a:	ed9d 0a00 	vldr	s0, [sp]
 8011e6e:	2001      	movs	r0, #1
 8011e70:	f000 fc4a 	bl	8012708 <__kernel_sinf>
 8011e74:	eeb1 0a40 	vneg.f32	s0, s0
 8011e78:	e7d9      	b.n	8011e2e <sinf+0x2a>
 8011e7a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e7e:	ed9d 0a00 	vldr	s0, [sp]
 8011e82:	f000 fbe9 	bl	8012658 <__kernel_cosf>
 8011e86:	e7f5      	b.n	8011e74 <sinf+0x70>
 8011e88:	3f490fd8 	.word	0x3f490fd8
 8011e8c:	00000000 	.word	0x00000000

08011e90 <fmaxf>:
 8011e90:	b508      	push	{r3, lr}
 8011e92:	ed2d 8b02 	vpush	{d8}
 8011e96:	eeb0 8a40 	vmov.f32	s16, s0
 8011e9a:	eef0 8a60 	vmov.f32	s17, s1
 8011e9e:	f000 f831 	bl	8011f04 <__fpclassifyf>
 8011ea2:	b930      	cbnz	r0, 8011eb2 <fmaxf+0x22>
 8011ea4:	eeb0 8a68 	vmov.f32	s16, s17
 8011ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8011eac:	ecbd 8b02 	vpop	{d8}
 8011eb0:	bd08      	pop	{r3, pc}
 8011eb2:	eeb0 0a68 	vmov.f32	s0, s17
 8011eb6:	f000 f825 	bl	8011f04 <__fpclassifyf>
 8011eba:	2800      	cmp	r0, #0
 8011ebc:	d0f4      	beq.n	8011ea8 <fmaxf+0x18>
 8011ebe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec6:	dded      	ble.n	8011ea4 <fmaxf+0x14>
 8011ec8:	e7ee      	b.n	8011ea8 <fmaxf+0x18>

08011eca <fminf>:
 8011eca:	b508      	push	{r3, lr}
 8011ecc:	ed2d 8b02 	vpush	{d8}
 8011ed0:	eeb0 8a40 	vmov.f32	s16, s0
 8011ed4:	eef0 8a60 	vmov.f32	s17, s1
 8011ed8:	f000 f814 	bl	8011f04 <__fpclassifyf>
 8011edc:	b930      	cbnz	r0, 8011eec <fminf+0x22>
 8011ede:	eeb0 8a68 	vmov.f32	s16, s17
 8011ee2:	eeb0 0a48 	vmov.f32	s0, s16
 8011ee6:	ecbd 8b02 	vpop	{d8}
 8011eea:	bd08      	pop	{r3, pc}
 8011eec:	eeb0 0a68 	vmov.f32	s0, s17
 8011ef0:	f000 f808 	bl	8011f04 <__fpclassifyf>
 8011ef4:	2800      	cmp	r0, #0
 8011ef6:	d0f4      	beq.n	8011ee2 <fminf+0x18>
 8011ef8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f00:	d5ed      	bpl.n	8011ede <fminf+0x14>
 8011f02:	e7ee      	b.n	8011ee2 <fminf+0x18>

08011f04 <__fpclassifyf>:
 8011f04:	ee10 3a10 	vmov	r3, s0
 8011f08:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8011f0c:	d00d      	beq.n	8011f2a <__fpclassifyf+0x26>
 8011f0e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011f12:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011f16:	d30a      	bcc.n	8011f2e <__fpclassifyf+0x2a>
 8011f18:	4b07      	ldr	r3, [pc, #28]	@ (8011f38 <__fpclassifyf+0x34>)
 8011f1a:	1e42      	subs	r2, r0, #1
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d908      	bls.n	8011f32 <__fpclassifyf+0x2e>
 8011f20:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011f24:	4258      	negs	r0, r3
 8011f26:	4158      	adcs	r0, r3
 8011f28:	4770      	bx	lr
 8011f2a:	2002      	movs	r0, #2
 8011f2c:	4770      	bx	lr
 8011f2e:	2004      	movs	r0, #4
 8011f30:	4770      	bx	lr
 8011f32:	2003      	movs	r0, #3
 8011f34:	4770      	bx	lr
 8011f36:	bf00      	nop
 8011f38:	007ffffe 	.word	0x007ffffe

08011f3c <__ieee754_sqrtf>:
 8011f3c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011f40:	4770      	bx	lr
 8011f42:	0000      	movs	r0, r0
 8011f44:	0000      	movs	r0, r0
	...

08011f48 <__kernel_cos>:
 8011f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f4c:	ec57 6b10 	vmov	r6, r7, d0
 8011f50:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011f54:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011f58:	ed8d 1b00 	vstr	d1, [sp]
 8011f5c:	d206      	bcs.n	8011f6c <__kernel_cos+0x24>
 8011f5e:	4630      	mov	r0, r6
 8011f60:	4639      	mov	r1, r7
 8011f62:	f7ee fdaf 	bl	8000ac4 <__aeabi_d2iz>
 8011f66:	2800      	cmp	r0, #0
 8011f68:	f000 8088 	beq.w	801207c <__kernel_cos+0x134>
 8011f6c:	4632      	mov	r2, r6
 8011f6e:	463b      	mov	r3, r7
 8011f70:	4630      	mov	r0, r6
 8011f72:	4639      	mov	r1, r7
 8011f74:	f7ee fb0c 	bl	8000590 <__aeabi_dmul>
 8011f78:	4b51      	ldr	r3, [pc, #324]	@ (80120c0 <__kernel_cos+0x178>)
 8011f7a:	2200      	movs	r2, #0
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	460d      	mov	r5, r1
 8011f80:	f7ee fb06 	bl	8000590 <__aeabi_dmul>
 8011f84:	a340      	add	r3, pc, #256	@ (adr r3, 8012088 <__kernel_cos+0x140>)
 8011f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8a:	4682      	mov	sl, r0
 8011f8c:	468b      	mov	fp, r1
 8011f8e:	4620      	mov	r0, r4
 8011f90:	4629      	mov	r1, r5
 8011f92:	f7ee fafd 	bl	8000590 <__aeabi_dmul>
 8011f96:	a33e      	add	r3, pc, #248	@ (adr r3, 8012090 <__kernel_cos+0x148>)
 8011f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9c:	f7ee f942 	bl	8000224 <__adddf3>
 8011fa0:	4622      	mov	r2, r4
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	f7ee faf4 	bl	8000590 <__aeabi_dmul>
 8011fa8:	a33b      	add	r3, pc, #236	@ (adr r3, 8012098 <__kernel_cos+0x150>)
 8011faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fae:	f7ee f937 	bl	8000220 <__aeabi_dsub>
 8011fb2:	4622      	mov	r2, r4
 8011fb4:	462b      	mov	r3, r5
 8011fb6:	f7ee faeb 	bl	8000590 <__aeabi_dmul>
 8011fba:	a339      	add	r3, pc, #228	@ (adr r3, 80120a0 <__kernel_cos+0x158>)
 8011fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc0:	f7ee f930 	bl	8000224 <__adddf3>
 8011fc4:	4622      	mov	r2, r4
 8011fc6:	462b      	mov	r3, r5
 8011fc8:	f7ee fae2 	bl	8000590 <__aeabi_dmul>
 8011fcc:	a336      	add	r3, pc, #216	@ (adr r3, 80120a8 <__kernel_cos+0x160>)
 8011fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd2:	f7ee f925 	bl	8000220 <__aeabi_dsub>
 8011fd6:	4622      	mov	r2, r4
 8011fd8:	462b      	mov	r3, r5
 8011fda:	f7ee fad9 	bl	8000590 <__aeabi_dmul>
 8011fde:	a334      	add	r3, pc, #208	@ (adr r3, 80120b0 <__kernel_cos+0x168>)
 8011fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe4:	f7ee f91e 	bl	8000224 <__adddf3>
 8011fe8:	4622      	mov	r2, r4
 8011fea:	462b      	mov	r3, r5
 8011fec:	f7ee fad0 	bl	8000590 <__aeabi_dmul>
 8011ff0:	4622      	mov	r2, r4
 8011ff2:	462b      	mov	r3, r5
 8011ff4:	f7ee facc 	bl	8000590 <__aeabi_dmul>
 8011ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	460d      	mov	r5, r1
 8012000:	4630      	mov	r0, r6
 8012002:	4639      	mov	r1, r7
 8012004:	f7ee fac4 	bl	8000590 <__aeabi_dmul>
 8012008:	460b      	mov	r3, r1
 801200a:	4602      	mov	r2, r0
 801200c:	4629      	mov	r1, r5
 801200e:	4620      	mov	r0, r4
 8012010:	f7ee f906 	bl	8000220 <__aeabi_dsub>
 8012014:	4b2b      	ldr	r3, [pc, #172]	@ (80120c4 <__kernel_cos+0x17c>)
 8012016:	4598      	cmp	r8, r3
 8012018:	4606      	mov	r6, r0
 801201a:	460f      	mov	r7, r1
 801201c:	d810      	bhi.n	8012040 <__kernel_cos+0xf8>
 801201e:	4602      	mov	r2, r0
 8012020:	460b      	mov	r3, r1
 8012022:	4650      	mov	r0, sl
 8012024:	4659      	mov	r1, fp
 8012026:	f7ee f8fb 	bl	8000220 <__aeabi_dsub>
 801202a:	460b      	mov	r3, r1
 801202c:	4926      	ldr	r1, [pc, #152]	@ (80120c8 <__kernel_cos+0x180>)
 801202e:	4602      	mov	r2, r0
 8012030:	2000      	movs	r0, #0
 8012032:	f7ee f8f5 	bl	8000220 <__aeabi_dsub>
 8012036:	ec41 0b10 	vmov	d0, r0, r1
 801203a:	b003      	add	sp, #12
 801203c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012040:	4b22      	ldr	r3, [pc, #136]	@ (80120cc <__kernel_cos+0x184>)
 8012042:	4921      	ldr	r1, [pc, #132]	@ (80120c8 <__kernel_cos+0x180>)
 8012044:	4598      	cmp	r8, r3
 8012046:	bf8c      	ite	hi
 8012048:	4d21      	ldrhi	r5, [pc, #132]	@ (80120d0 <__kernel_cos+0x188>)
 801204a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801204e:	2400      	movs	r4, #0
 8012050:	4622      	mov	r2, r4
 8012052:	462b      	mov	r3, r5
 8012054:	2000      	movs	r0, #0
 8012056:	f7ee f8e3 	bl	8000220 <__aeabi_dsub>
 801205a:	4622      	mov	r2, r4
 801205c:	4680      	mov	r8, r0
 801205e:	4689      	mov	r9, r1
 8012060:	462b      	mov	r3, r5
 8012062:	4650      	mov	r0, sl
 8012064:	4659      	mov	r1, fp
 8012066:	f7ee f8db 	bl	8000220 <__aeabi_dsub>
 801206a:	4632      	mov	r2, r6
 801206c:	463b      	mov	r3, r7
 801206e:	f7ee f8d7 	bl	8000220 <__aeabi_dsub>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4640      	mov	r0, r8
 8012078:	4649      	mov	r1, r9
 801207a:	e7da      	b.n	8012032 <__kernel_cos+0xea>
 801207c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80120b8 <__kernel_cos+0x170>
 8012080:	e7db      	b.n	801203a <__kernel_cos+0xf2>
 8012082:	bf00      	nop
 8012084:	f3af 8000 	nop.w
 8012088:	be8838d4 	.word	0xbe8838d4
 801208c:	bda8fae9 	.word	0xbda8fae9
 8012090:	bdb4b1c4 	.word	0xbdb4b1c4
 8012094:	3e21ee9e 	.word	0x3e21ee9e
 8012098:	809c52ad 	.word	0x809c52ad
 801209c:	3e927e4f 	.word	0x3e927e4f
 80120a0:	19cb1590 	.word	0x19cb1590
 80120a4:	3efa01a0 	.word	0x3efa01a0
 80120a8:	16c15177 	.word	0x16c15177
 80120ac:	3f56c16c 	.word	0x3f56c16c
 80120b0:	5555554c 	.word	0x5555554c
 80120b4:	3fa55555 	.word	0x3fa55555
 80120b8:	00000000 	.word	0x00000000
 80120bc:	3ff00000 	.word	0x3ff00000
 80120c0:	3fe00000 	.word	0x3fe00000
 80120c4:	3fd33332 	.word	0x3fd33332
 80120c8:	3ff00000 	.word	0x3ff00000
 80120cc:	3fe90000 	.word	0x3fe90000
 80120d0:	3fd20000 	.word	0x3fd20000
 80120d4:	00000000 	.word	0x00000000

080120d8 <__kernel_sin>:
 80120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120dc:	ec55 4b10 	vmov	r4, r5, d0
 80120e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80120e4:	b085      	sub	sp, #20
 80120e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80120ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 80120ee:	4680      	mov	r8, r0
 80120f0:	d205      	bcs.n	80120fe <__kernel_sin+0x26>
 80120f2:	4620      	mov	r0, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	f7ee fce5 	bl	8000ac4 <__aeabi_d2iz>
 80120fa:	2800      	cmp	r0, #0
 80120fc:	d052      	beq.n	80121a4 <__kernel_sin+0xcc>
 80120fe:	4622      	mov	r2, r4
 8012100:	462b      	mov	r3, r5
 8012102:	4620      	mov	r0, r4
 8012104:	4629      	mov	r1, r5
 8012106:	f7ee fa43 	bl	8000590 <__aeabi_dmul>
 801210a:	4682      	mov	sl, r0
 801210c:	468b      	mov	fp, r1
 801210e:	4602      	mov	r2, r0
 8012110:	460b      	mov	r3, r1
 8012112:	4620      	mov	r0, r4
 8012114:	4629      	mov	r1, r5
 8012116:	f7ee fa3b 	bl	8000590 <__aeabi_dmul>
 801211a:	a342      	add	r3, pc, #264	@ (adr r3, 8012224 <__kernel_sin+0x14c>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	e9cd 0100 	strd	r0, r1, [sp]
 8012124:	4650      	mov	r0, sl
 8012126:	4659      	mov	r1, fp
 8012128:	f7ee fa32 	bl	8000590 <__aeabi_dmul>
 801212c:	a33f      	add	r3, pc, #252	@ (adr r3, 801222c <__kernel_sin+0x154>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee f875 	bl	8000220 <__aeabi_dsub>
 8012136:	4652      	mov	r2, sl
 8012138:	465b      	mov	r3, fp
 801213a:	f7ee fa29 	bl	8000590 <__aeabi_dmul>
 801213e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012234 <__kernel_sin+0x15c>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	f7ee f86e 	bl	8000224 <__adddf3>
 8012148:	4652      	mov	r2, sl
 801214a:	465b      	mov	r3, fp
 801214c:	f7ee fa20 	bl	8000590 <__aeabi_dmul>
 8012150:	a33a      	add	r3, pc, #232	@ (adr r3, 801223c <__kernel_sin+0x164>)
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	f7ee f863 	bl	8000220 <__aeabi_dsub>
 801215a:	4652      	mov	r2, sl
 801215c:	465b      	mov	r3, fp
 801215e:	f7ee fa17 	bl	8000590 <__aeabi_dmul>
 8012162:	a338      	add	r3, pc, #224	@ (adr r3, 8012244 <__kernel_sin+0x16c>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	f7ee f85c 	bl	8000224 <__adddf3>
 801216c:	4606      	mov	r6, r0
 801216e:	460f      	mov	r7, r1
 8012170:	f1b8 0f00 	cmp.w	r8, #0
 8012174:	d11b      	bne.n	80121ae <__kernel_sin+0xd6>
 8012176:	4602      	mov	r2, r0
 8012178:	460b      	mov	r3, r1
 801217a:	4650      	mov	r0, sl
 801217c:	4659      	mov	r1, fp
 801217e:	f7ee fa07 	bl	8000590 <__aeabi_dmul>
 8012182:	a325      	add	r3, pc, #148	@ (adr r3, 8012218 <__kernel_sin+0x140>)
 8012184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012188:	f7ee f84a 	bl	8000220 <__aeabi_dsub>
 801218c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012190:	f7ee f9fe 	bl	8000590 <__aeabi_dmul>
 8012194:	4602      	mov	r2, r0
 8012196:	460b      	mov	r3, r1
 8012198:	4620      	mov	r0, r4
 801219a:	4629      	mov	r1, r5
 801219c:	f7ee f842 	bl	8000224 <__adddf3>
 80121a0:	4604      	mov	r4, r0
 80121a2:	460d      	mov	r5, r1
 80121a4:	ec45 4b10 	vmov	d0, r4, r5
 80121a8:	b005      	add	sp, #20
 80121aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121b2:	4b1b      	ldr	r3, [pc, #108]	@ (8012220 <__kernel_sin+0x148>)
 80121b4:	2200      	movs	r2, #0
 80121b6:	f7ee f9eb 	bl	8000590 <__aeabi_dmul>
 80121ba:	4632      	mov	r2, r6
 80121bc:	4680      	mov	r8, r0
 80121be:	4689      	mov	r9, r1
 80121c0:	463b      	mov	r3, r7
 80121c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121c6:	f7ee f9e3 	bl	8000590 <__aeabi_dmul>
 80121ca:	4602      	mov	r2, r0
 80121cc:	460b      	mov	r3, r1
 80121ce:	4640      	mov	r0, r8
 80121d0:	4649      	mov	r1, r9
 80121d2:	f7ee f825 	bl	8000220 <__aeabi_dsub>
 80121d6:	4652      	mov	r2, sl
 80121d8:	465b      	mov	r3, fp
 80121da:	f7ee f9d9 	bl	8000590 <__aeabi_dmul>
 80121de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121e2:	f7ee f81d 	bl	8000220 <__aeabi_dsub>
 80121e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012218 <__kernel_sin+0x140>)
 80121e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ec:	4606      	mov	r6, r0
 80121ee:	460f      	mov	r7, r1
 80121f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121f4:	f7ee f9cc 	bl	8000590 <__aeabi_dmul>
 80121f8:	4602      	mov	r2, r0
 80121fa:	460b      	mov	r3, r1
 80121fc:	4630      	mov	r0, r6
 80121fe:	4639      	mov	r1, r7
 8012200:	f7ee f810 	bl	8000224 <__adddf3>
 8012204:	4602      	mov	r2, r0
 8012206:	460b      	mov	r3, r1
 8012208:	4620      	mov	r0, r4
 801220a:	4629      	mov	r1, r5
 801220c:	f7ee f808 	bl	8000220 <__aeabi_dsub>
 8012210:	e7c6      	b.n	80121a0 <__kernel_sin+0xc8>
 8012212:	bf00      	nop
 8012214:	f3af 8000 	nop.w
 8012218:	55555549 	.word	0x55555549
 801221c:	3fc55555 	.word	0x3fc55555
 8012220:	3fe00000 	.word	0x3fe00000
 8012224:	5acfd57c 	.word	0x5acfd57c
 8012228:	3de5d93a 	.word	0x3de5d93a
 801222c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012230:	3e5ae5e6 	.word	0x3e5ae5e6
 8012234:	57b1fe7d 	.word	0x57b1fe7d
 8012238:	3ec71de3 	.word	0x3ec71de3
 801223c:	19c161d5 	.word	0x19c161d5
 8012240:	3f2a01a0 	.word	0x3f2a01a0
 8012244:	1110f8a6 	.word	0x1110f8a6
 8012248:	3f811111 	.word	0x3f811111
 801224c:	00000000 	.word	0x00000000

08012250 <__ieee754_rem_pio2>:
 8012250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012254:	ec57 6b10 	vmov	r6, r7, d0
 8012258:	4bc5      	ldr	r3, [pc, #788]	@ (8012570 <__ieee754_rem_pio2+0x320>)
 801225a:	b08d      	sub	sp, #52	@ 0x34
 801225c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012260:	4598      	cmp	r8, r3
 8012262:	4604      	mov	r4, r0
 8012264:	9704      	str	r7, [sp, #16]
 8012266:	d807      	bhi.n	8012278 <__ieee754_rem_pio2+0x28>
 8012268:	2200      	movs	r2, #0
 801226a:	2300      	movs	r3, #0
 801226c:	ed80 0b00 	vstr	d0, [r0]
 8012270:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012274:	2500      	movs	r5, #0
 8012276:	e028      	b.n	80122ca <__ieee754_rem_pio2+0x7a>
 8012278:	4bbe      	ldr	r3, [pc, #760]	@ (8012574 <__ieee754_rem_pio2+0x324>)
 801227a:	4598      	cmp	r8, r3
 801227c:	d878      	bhi.n	8012370 <__ieee754_rem_pio2+0x120>
 801227e:	9b04      	ldr	r3, [sp, #16]
 8012280:	4dbd      	ldr	r5, [pc, #756]	@ (8012578 <__ieee754_rem_pio2+0x328>)
 8012282:	2b00      	cmp	r3, #0
 8012284:	4630      	mov	r0, r6
 8012286:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012538 <__ieee754_rem_pio2+0x2e8>)
 8012288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801228c:	4639      	mov	r1, r7
 801228e:	dd38      	ble.n	8012302 <__ieee754_rem_pio2+0xb2>
 8012290:	f7ed ffc6 	bl	8000220 <__aeabi_dsub>
 8012294:	45a8      	cmp	r8, r5
 8012296:	4606      	mov	r6, r0
 8012298:	460f      	mov	r7, r1
 801229a:	d01a      	beq.n	80122d2 <__ieee754_rem_pio2+0x82>
 801229c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x2f0>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f7ed ffbd 	bl	8000220 <__aeabi_dsub>
 80122a6:	4602      	mov	r2, r0
 80122a8:	460b      	mov	r3, r1
 80122aa:	4680      	mov	r8, r0
 80122ac:	4689      	mov	r9, r1
 80122ae:	4630      	mov	r0, r6
 80122b0:	4639      	mov	r1, r7
 80122b2:	f7ed ffb5 	bl	8000220 <__aeabi_dsub>
 80122b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x2f0>)
 80122b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122bc:	f7ed ffb0 	bl	8000220 <__aeabi_dsub>
 80122c0:	e9c4 8900 	strd	r8, r9, [r4]
 80122c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122c8:	2501      	movs	r5, #1
 80122ca:	4628      	mov	r0, r5
 80122cc:	b00d      	add	sp, #52	@ 0x34
 80122ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d2:	a39d      	add	r3, pc, #628	@ (adr r3, 8012548 <__ieee754_rem_pio2+0x2f8>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	f7ed ffa2 	bl	8000220 <__aeabi_dsub>
 80122dc:	a39c      	add	r3, pc, #624	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x300>)
 80122de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e2:	4606      	mov	r6, r0
 80122e4:	460f      	mov	r7, r1
 80122e6:	f7ed ff9b 	bl	8000220 <__aeabi_dsub>
 80122ea:	4602      	mov	r2, r0
 80122ec:	460b      	mov	r3, r1
 80122ee:	4680      	mov	r8, r0
 80122f0:	4689      	mov	r9, r1
 80122f2:	4630      	mov	r0, r6
 80122f4:	4639      	mov	r1, r7
 80122f6:	f7ed ff93 	bl	8000220 <__aeabi_dsub>
 80122fa:	a395      	add	r3, pc, #596	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x300>)
 80122fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012300:	e7dc      	b.n	80122bc <__ieee754_rem_pio2+0x6c>
 8012302:	f7ed ff8f 	bl	8000224 <__adddf3>
 8012306:	45a8      	cmp	r8, r5
 8012308:	4606      	mov	r6, r0
 801230a:	460f      	mov	r7, r1
 801230c:	d018      	beq.n	8012340 <__ieee754_rem_pio2+0xf0>
 801230e:	a38c      	add	r3, pc, #560	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x2f0>)
 8012310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012314:	f7ed ff86 	bl	8000224 <__adddf3>
 8012318:	4602      	mov	r2, r0
 801231a:	460b      	mov	r3, r1
 801231c:	4680      	mov	r8, r0
 801231e:	4689      	mov	r9, r1
 8012320:	4630      	mov	r0, r6
 8012322:	4639      	mov	r1, r7
 8012324:	f7ed ff7c 	bl	8000220 <__aeabi_dsub>
 8012328:	a385      	add	r3, pc, #532	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x2f0>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	f7ed ff79 	bl	8000224 <__adddf3>
 8012332:	f04f 35ff 	mov.w	r5, #4294967295
 8012336:	e9c4 8900 	strd	r8, r9, [r4]
 801233a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801233e:	e7c4      	b.n	80122ca <__ieee754_rem_pio2+0x7a>
 8012340:	a381      	add	r3, pc, #516	@ (adr r3, 8012548 <__ieee754_rem_pio2+0x2f8>)
 8012342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012346:	f7ed ff6d 	bl	8000224 <__adddf3>
 801234a:	a381      	add	r3, pc, #516	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x300>)
 801234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012350:	4606      	mov	r6, r0
 8012352:	460f      	mov	r7, r1
 8012354:	f7ed ff66 	bl	8000224 <__adddf3>
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	4630      	mov	r0, r6
 8012362:	4639      	mov	r1, r7
 8012364:	f7ed ff5c 	bl	8000220 <__aeabi_dsub>
 8012368:	a379      	add	r3, pc, #484	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x300>)
 801236a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801236e:	e7de      	b.n	801232e <__ieee754_rem_pio2+0xde>
 8012370:	4b82      	ldr	r3, [pc, #520]	@ (801257c <__ieee754_rem_pio2+0x32c>)
 8012372:	4598      	cmp	r8, r3
 8012374:	f200 80d1 	bhi.w	801251a <__ieee754_rem_pio2+0x2ca>
 8012378:	f000 f966 	bl	8012648 <fabs>
 801237c:	ec57 6b10 	vmov	r6, r7, d0
 8012380:	a375      	add	r3, pc, #468	@ (adr r3, 8012558 <__ieee754_rem_pio2+0x308>)
 8012382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012386:	4630      	mov	r0, r6
 8012388:	4639      	mov	r1, r7
 801238a:	f7ee f901 	bl	8000590 <__aeabi_dmul>
 801238e:	4b7c      	ldr	r3, [pc, #496]	@ (8012580 <__ieee754_rem_pio2+0x330>)
 8012390:	2200      	movs	r2, #0
 8012392:	f7ed ff47 	bl	8000224 <__adddf3>
 8012396:	f7ee fb95 	bl	8000ac4 <__aeabi_d2iz>
 801239a:	4605      	mov	r5, r0
 801239c:	f7ee f88e 	bl	80004bc <__aeabi_i2d>
 80123a0:	4602      	mov	r2, r0
 80123a2:	460b      	mov	r3, r1
 80123a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80123a8:	a363      	add	r3, pc, #396	@ (adr r3, 8012538 <__ieee754_rem_pio2+0x2e8>)
 80123aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123ae:	f7ee f8ef 	bl	8000590 <__aeabi_dmul>
 80123b2:	4602      	mov	r2, r0
 80123b4:	460b      	mov	r3, r1
 80123b6:	4630      	mov	r0, r6
 80123b8:	4639      	mov	r1, r7
 80123ba:	f7ed ff31 	bl	8000220 <__aeabi_dsub>
 80123be:	a360      	add	r3, pc, #384	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x2f0>)
 80123c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c4:	4682      	mov	sl, r0
 80123c6:	468b      	mov	fp, r1
 80123c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123cc:	f7ee f8e0 	bl	8000590 <__aeabi_dmul>
 80123d0:	2d1f      	cmp	r5, #31
 80123d2:	4606      	mov	r6, r0
 80123d4:	460f      	mov	r7, r1
 80123d6:	dc0c      	bgt.n	80123f2 <__ieee754_rem_pio2+0x1a2>
 80123d8:	4b6a      	ldr	r3, [pc, #424]	@ (8012584 <__ieee754_rem_pio2+0x334>)
 80123da:	1e6a      	subs	r2, r5, #1
 80123dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123e0:	4543      	cmp	r3, r8
 80123e2:	d006      	beq.n	80123f2 <__ieee754_rem_pio2+0x1a2>
 80123e4:	4632      	mov	r2, r6
 80123e6:	463b      	mov	r3, r7
 80123e8:	4650      	mov	r0, sl
 80123ea:	4659      	mov	r1, fp
 80123ec:	f7ed ff18 	bl	8000220 <__aeabi_dsub>
 80123f0:	e00e      	b.n	8012410 <__ieee754_rem_pio2+0x1c0>
 80123f2:	463b      	mov	r3, r7
 80123f4:	4632      	mov	r2, r6
 80123f6:	4650      	mov	r0, sl
 80123f8:	4659      	mov	r1, fp
 80123fa:	f7ed ff11 	bl	8000220 <__aeabi_dsub>
 80123fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012402:	9305      	str	r3, [sp, #20]
 8012404:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012408:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801240c:	2b10      	cmp	r3, #16
 801240e:	dc02      	bgt.n	8012416 <__ieee754_rem_pio2+0x1c6>
 8012410:	e9c4 0100 	strd	r0, r1, [r4]
 8012414:	e039      	b.n	801248a <__ieee754_rem_pio2+0x23a>
 8012416:	a34c      	add	r3, pc, #304	@ (adr r3, 8012548 <__ieee754_rem_pio2+0x2f8>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012420:	f7ee f8b6 	bl	8000590 <__aeabi_dmul>
 8012424:	4606      	mov	r6, r0
 8012426:	460f      	mov	r7, r1
 8012428:	4602      	mov	r2, r0
 801242a:	460b      	mov	r3, r1
 801242c:	4650      	mov	r0, sl
 801242e:	4659      	mov	r1, fp
 8012430:	f7ed fef6 	bl	8000220 <__aeabi_dsub>
 8012434:	4602      	mov	r2, r0
 8012436:	460b      	mov	r3, r1
 8012438:	4680      	mov	r8, r0
 801243a:	4689      	mov	r9, r1
 801243c:	4650      	mov	r0, sl
 801243e:	4659      	mov	r1, fp
 8012440:	f7ed feee 	bl	8000220 <__aeabi_dsub>
 8012444:	4632      	mov	r2, r6
 8012446:	463b      	mov	r3, r7
 8012448:	f7ed feea 	bl	8000220 <__aeabi_dsub>
 801244c:	a340      	add	r3, pc, #256	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x300>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	4606      	mov	r6, r0
 8012454:	460f      	mov	r7, r1
 8012456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801245a:	f7ee f899 	bl	8000590 <__aeabi_dmul>
 801245e:	4632      	mov	r2, r6
 8012460:	463b      	mov	r3, r7
 8012462:	f7ed fedd 	bl	8000220 <__aeabi_dsub>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4606      	mov	r6, r0
 801246c:	460f      	mov	r7, r1
 801246e:	4640      	mov	r0, r8
 8012470:	4649      	mov	r1, r9
 8012472:	f7ed fed5 	bl	8000220 <__aeabi_dsub>
 8012476:	9a05      	ldr	r2, [sp, #20]
 8012478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	2b31      	cmp	r3, #49	@ 0x31
 8012480:	dc20      	bgt.n	80124c4 <__ieee754_rem_pio2+0x274>
 8012482:	e9c4 0100 	strd	r0, r1, [r4]
 8012486:	46c2      	mov	sl, r8
 8012488:	46cb      	mov	fp, r9
 801248a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801248e:	4650      	mov	r0, sl
 8012490:	4642      	mov	r2, r8
 8012492:	464b      	mov	r3, r9
 8012494:	4659      	mov	r1, fp
 8012496:	f7ed fec3 	bl	8000220 <__aeabi_dsub>
 801249a:	463b      	mov	r3, r7
 801249c:	4632      	mov	r2, r6
 801249e:	f7ed febf 	bl	8000220 <__aeabi_dsub>
 80124a2:	9b04      	ldr	r3, [sp, #16]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80124aa:	f6bf af0e 	bge.w	80122ca <__ieee754_rem_pio2+0x7a>
 80124ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80124b2:	6063      	str	r3, [r4, #4]
 80124b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124b8:	f8c4 8000 	str.w	r8, [r4]
 80124bc:	60a0      	str	r0, [r4, #8]
 80124be:	60e3      	str	r3, [r4, #12]
 80124c0:	426d      	negs	r5, r5
 80124c2:	e702      	b.n	80122ca <__ieee754_rem_pio2+0x7a>
 80124c4:	a326      	add	r3, pc, #152	@ (adr r3, 8012560 <__ieee754_rem_pio2+0x310>)
 80124c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124ce:	f7ee f85f 	bl	8000590 <__aeabi_dmul>
 80124d2:	4606      	mov	r6, r0
 80124d4:	460f      	mov	r7, r1
 80124d6:	4602      	mov	r2, r0
 80124d8:	460b      	mov	r3, r1
 80124da:	4640      	mov	r0, r8
 80124dc:	4649      	mov	r1, r9
 80124de:	f7ed fe9f 	bl	8000220 <__aeabi_dsub>
 80124e2:	4602      	mov	r2, r0
 80124e4:	460b      	mov	r3, r1
 80124e6:	4682      	mov	sl, r0
 80124e8:	468b      	mov	fp, r1
 80124ea:	4640      	mov	r0, r8
 80124ec:	4649      	mov	r1, r9
 80124ee:	f7ed fe97 	bl	8000220 <__aeabi_dsub>
 80124f2:	4632      	mov	r2, r6
 80124f4:	463b      	mov	r3, r7
 80124f6:	f7ed fe93 	bl	8000220 <__aeabi_dsub>
 80124fa:	a31b      	add	r3, pc, #108	@ (adr r3, 8012568 <__ieee754_rem_pio2+0x318>)
 80124fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012500:	4606      	mov	r6, r0
 8012502:	460f      	mov	r7, r1
 8012504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012508:	f7ee f842 	bl	8000590 <__aeabi_dmul>
 801250c:	4632      	mov	r2, r6
 801250e:	463b      	mov	r3, r7
 8012510:	f7ed fe86 	bl	8000220 <__aeabi_dsub>
 8012514:	4606      	mov	r6, r0
 8012516:	460f      	mov	r7, r1
 8012518:	e764      	b.n	80123e4 <__ieee754_rem_pio2+0x194>
 801251a:	4b1b      	ldr	r3, [pc, #108]	@ (8012588 <__ieee754_rem_pio2+0x338>)
 801251c:	4598      	cmp	r8, r3
 801251e:	d935      	bls.n	801258c <__ieee754_rem_pio2+0x33c>
 8012520:	4632      	mov	r2, r6
 8012522:	463b      	mov	r3, r7
 8012524:	4630      	mov	r0, r6
 8012526:	4639      	mov	r1, r7
 8012528:	f7ed fe7a 	bl	8000220 <__aeabi_dsub>
 801252c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012530:	e9c4 0100 	strd	r0, r1, [r4]
 8012534:	e69e      	b.n	8012274 <__ieee754_rem_pio2+0x24>
 8012536:	bf00      	nop
 8012538:	54400000 	.word	0x54400000
 801253c:	3ff921fb 	.word	0x3ff921fb
 8012540:	1a626331 	.word	0x1a626331
 8012544:	3dd0b461 	.word	0x3dd0b461
 8012548:	1a600000 	.word	0x1a600000
 801254c:	3dd0b461 	.word	0x3dd0b461
 8012550:	2e037073 	.word	0x2e037073
 8012554:	3ba3198a 	.word	0x3ba3198a
 8012558:	6dc9c883 	.word	0x6dc9c883
 801255c:	3fe45f30 	.word	0x3fe45f30
 8012560:	2e000000 	.word	0x2e000000
 8012564:	3ba3198a 	.word	0x3ba3198a
 8012568:	252049c1 	.word	0x252049c1
 801256c:	397b839a 	.word	0x397b839a
 8012570:	3fe921fb 	.word	0x3fe921fb
 8012574:	4002d97b 	.word	0x4002d97b
 8012578:	3ff921fb 	.word	0x3ff921fb
 801257c:	413921fb 	.word	0x413921fb
 8012580:	3fe00000 	.word	0x3fe00000
 8012584:	08013a88 	.word	0x08013a88
 8012588:	7fefffff 	.word	0x7fefffff
 801258c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012590:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012594:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012598:	4630      	mov	r0, r6
 801259a:	460f      	mov	r7, r1
 801259c:	f7ee fa92 	bl	8000ac4 <__aeabi_d2iz>
 80125a0:	f7ed ff8c 	bl	80004bc <__aeabi_i2d>
 80125a4:	4602      	mov	r2, r0
 80125a6:	460b      	mov	r3, r1
 80125a8:	4630      	mov	r0, r6
 80125aa:	4639      	mov	r1, r7
 80125ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80125b0:	f7ed fe36 	bl	8000220 <__aeabi_dsub>
 80125b4:	4b22      	ldr	r3, [pc, #136]	@ (8012640 <__ieee754_rem_pio2+0x3f0>)
 80125b6:	2200      	movs	r2, #0
 80125b8:	f7ed ffea 	bl	8000590 <__aeabi_dmul>
 80125bc:	460f      	mov	r7, r1
 80125be:	4606      	mov	r6, r0
 80125c0:	f7ee fa80 	bl	8000ac4 <__aeabi_d2iz>
 80125c4:	f7ed ff7a 	bl	80004bc <__aeabi_i2d>
 80125c8:	4602      	mov	r2, r0
 80125ca:	460b      	mov	r3, r1
 80125cc:	4630      	mov	r0, r6
 80125ce:	4639      	mov	r1, r7
 80125d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80125d4:	f7ed fe24 	bl	8000220 <__aeabi_dsub>
 80125d8:	4b19      	ldr	r3, [pc, #100]	@ (8012640 <__ieee754_rem_pio2+0x3f0>)
 80125da:	2200      	movs	r2, #0
 80125dc:	f7ed ffd8 	bl	8000590 <__aeabi_dmul>
 80125e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80125e4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80125e8:	f04f 0803 	mov.w	r8, #3
 80125ec:	2600      	movs	r6, #0
 80125ee:	2700      	movs	r7, #0
 80125f0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80125f4:	4632      	mov	r2, r6
 80125f6:	463b      	mov	r3, r7
 80125f8:	46c2      	mov	sl, r8
 80125fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80125fe:	f7ee fa2f 	bl	8000a60 <__aeabi_dcmpeq>
 8012602:	2800      	cmp	r0, #0
 8012604:	d1f4      	bne.n	80125f0 <__ieee754_rem_pio2+0x3a0>
 8012606:	4b0f      	ldr	r3, [pc, #60]	@ (8012644 <__ieee754_rem_pio2+0x3f4>)
 8012608:	9301      	str	r3, [sp, #4]
 801260a:	2302      	movs	r3, #2
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	462a      	mov	r2, r5
 8012610:	4653      	mov	r3, sl
 8012612:	4621      	mov	r1, r4
 8012614:	a806      	add	r0, sp, #24
 8012616:	f000 fb5b 	bl	8012cd0 <__kernel_rem_pio2>
 801261a:	9b04      	ldr	r3, [sp, #16]
 801261c:	2b00      	cmp	r3, #0
 801261e:	4605      	mov	r5, r0
 8012620:	f6bf ae53 	bge.w	80122ca <__ieee754_rem_pio2+0x7a>
 8012624:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801262c:	e9c4 2300 	strd	r2, r3, [r4]
 8012630:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012634:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012638:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801263c:	e740      	b.n	80124c0 <__ieee754_rem_pio2+0x270>
 801263e:	bf00      	nop
 8012640:	41700000 	.word	0x41700000
 8012644:	08013b08 	.word	0x08013b08

08012648 <fabs>:
 8012648:	ec51 0b10 	vmov	r0, r1, d0
 801264c:	4602      	mov	r2, r0
 801264e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012652:	ec43 2b10 	vmov	d0, r2, r3
 8012656:	4770      	bx	lr

08012658 <__kernel_cosf>:
 8012658:	ee10 3a10 	vmov	r3, s0
 801265c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012660:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012664:	eef0 6a40 	vmov.f32	s13, s0
 8012668:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801266c:	d204      	bcs.n	8012678 <__kernel_cosf+0x20>
 801266e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012672:	ee17 2a90 	vmov	r2, s15
 8012676:	b342      	cbz	r2, 80126ca <__kernel_cosf+0x72>
 8012678:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801267c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80126e8 <__kernel_cosf+0x90>
 8012680:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80126ec <__kernel_cosf+0x94>
 8012684:	4a1a      	ldr	r2, [pc, #104]	@ (80126f0 <__kernel_cosf+0x98>)
 8012686:	eea7 6a27 	vfma.f32	s12, s14, s15
 801268a:	4293      	cmp	r3, r2
 801268c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80126f4 <__kernel_cosf+0x9c>
 8012690:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012694:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80126f8 <__kernel_cosf+0xa0>
 8012698:	eea7 6a87 	vfma.f32	s12, s15, s14
 801269c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80126fc <__kernel_cosf+0xa4>
 80126a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80126a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012700 <__kernel_cosf+0xa8>
 80126a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80126ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80126b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80126b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80126b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80126bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126c0:	d804      	bhi.n	80126cc <__kernel_cosf+0x74>
 80126c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80126c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80126ca:	4770      	bx	lr
 80126cc:	4a0d      	ldr	r2, [pc, #52]	@ (8012704 <__kernel_cosf+0xac>)
 80126ce:	4293      	cmp	r3, r2
 80126d0:	bf9a      	itte	ls
 80126d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80126d6:	ee07 3a10 	vmovls	s14, r3
 80126da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80126de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126e6:	e7ec      	b.n	80126c2 <__kernel_cosf+0x6a>
 80126e8:	ad47d74e 	.word	0xad47d74e
 80126ec:	310f74f6 	.word	0x310f74f6
 80126f0:	3e999999 	.word	0x3e999999
 80126f4:	b493f27c 	.word	0xb493f27c
 80126f8:	37d00d01 	.word	0x37d00d01
 80126fc:	bab60b61 	.word	0xbab60b61
 8012700:	3d2aaaab 	.word	0x3d2aaaab
 8012704:	3f480000 	.word	0x3f480000

08012708 <__kernel_sinf>:
 8012708:	ee10 3a10 	vmov	r3, s0
 801270c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012710:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012714:	d204      	bcs.n	8012720 <__kernel_sinf+0x18>
 8012716:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801271a:	ee17 3a90 	vmov	r3, s15
 801271e:	b35b      	cbz	r3, 8012778 <__kernel_sinf+0x70>
 8012720:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012724:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801277c <__kernel_sinf+0x74>
 8012728:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012780 <__kernel_sinf+0x78>
 801272c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012730:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012784 <__kernel_sinf+0x7c>
 8012734:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012738:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012788 <__kernel_sinf+0x80>
 801273c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012740:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801278c <__kernel_sinf+0x84>
 8012744:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012748:	eee6 7a07 	vfma.f32	s15, s12, s14
 801274c:	b930      	cbnz	r0, 801275c <__kernel_sinf+0x54>
 801274e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012790 <__kernel_sinf+0x88>
 8012752:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012756:	eea6 0a26 	vfma.f32	s0, s12, s13
 801275a:	4770      	bx	lr
 801275c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012760:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012764:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012768:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801276c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012794 <__kernel_sinf+0x8c>
 8012770:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012774:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012778:	4770      	bx	lr
 801277a:	bf00      	nop
 801277c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012780:	b2d72f34 	.word	0xb2d72f34
 8012784:	3638ef1b 	.word	0x3638ef1b
 8012788:	b9500d01 	.word	0xb9500d01
 801278c:	3c088889 	.word	0x3c088889
 8012790:	be2aaaab 	.word	0xbe2aaaab
 8012794:	3e2aaaab 	.word	0x3e2aaaab

08012798 <__ieee754_fmodf>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	ee10 6a90 	vmov	r6, s1
 801279e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80127a2:	1e5a      	subs	r2, r3, #1
 80127a4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80127a8:	d206      	bcs.n	80127b8 <__ieee754_fmodf+0x20>
 80127aa:	ee10 4a10 	vmov	r4, s0
 80127ae:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80127b2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80127b6:	d304      	bcc.n	80127c2 <__ieee754_fmodf+0x2a>
 80127b8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80127bc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80127c0:	bd70      	pop	{r4, r5, r6, pc}
 80127c2:	4299      	cmp	r1, r3
 80127c4:	dbfc      	blt.n	80127c0 <__ieee754_fmodf+0x28>
 80127c6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80127ca:	d105      	bne.n	80127d8 <__ieee754_fmodf+0x40>
 80127cc:	4b32      	ldr	r3, [pc, #200]	@ (8012898 <__ieee754_fmodf+0x100>)
 80127ce:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80127d2:	ed93 0a00 	vldr	s0, [r3]
 80127d6:	e7f3      	b.n	80127c0 <__ieee754_fmodf+0x28>
 80127d8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80127dc:	d146      	bne.n	801286c <__ieee754_fmodf+0xd4>
 80127de:	020a      	lsls	r2, r1, #8
 80127e0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80127e4:	2a00      	cmp	r2, #0
 80127e6:	dc3e      	bgt.n	8012866 <__ieee754_fmodf+0xce>
 80127e8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80127ec:	bf01      	itttt	eq
 80127ee:	021a      	lsleq	r2, r3, #8
 80127f0:	fab2 f282 	clzeq	r2, r2
 80127f4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80127f8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80127fc:	bf16      	itet	ne
 80127fe:	15da      	asrne	r2, r3, #23
 8012800:	3282      	addeq	r2, #130	@ 0x82
 8012802:	3a7f      	subne	r2, #127	@ 0x7f
 8012804:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8012808:	bfbb      	ittet	lt
 801280a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801280e:	1a24      	sublt	r4, r4, r0
 8012810:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8012814:	40a1      	lsllt	r1, r4
 8012816:	bfa8      	it	ge
 8012818:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801281c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012820:	bfb5      	itete	lt
 8012822:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8012826:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801282a:	1aa4      	sublt	r4, r4, r2
 801282c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8012830:	bfb8      	it	lt
 8012832:	fa03 f404 	lsllt.w	r4, r3, r4
 8012836:	1a80      	subs	r0, r0, r2
 8012838:	1b0b      	subs	r3, r1, r4
 801283a:	b9d0      	cbnz	r0, 8012872 <__ieee754_fmodf+0xda>
 801283c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012840:	bf28      	it	cs
 8012842:	460b      	movcs	r3, r1
 8012844:	2b00      	cmp	r3, #0
 8012846:	d0c1      	beq.n	80127cc <__ieee754_fmodf+0x34>
 8012848:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801284c:	db19      	blt.n	8012882 <__ieee754_fmodf+0xea>
 801284e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012852:	db19      	blt.n	8012888 <__ieee754_fmodf+0xf0>
 8012854:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8012858:	327f      	adds	r2, #127	@ 0x7f
 801285a:	432b      	orrs	r3, r5
 801285c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012860:	ee00 3a10 	vmov	s0, r3
 8012864:	e7ac      	b.n	80127c0 <__ieee754_fmodf+0x28>
 8012866:	3801      	subs	r0, #1
 8012868:	0052      	lsls	r2, r2, #1
 801286a:	e7bb      	b.n	80127e4 <__ieee754_fmodf+0x4c>
 801286c:	15c8      	asrs	r0, r1, #23
 801286e:	387f      	subs	r0, #127	@ 0x7f
 8012870:	e7ba      	b.n	80127e8 <__ieee754_fmodf+0x50>
 8012872:	2b00      	cmp	r3, #0
 8012874:	da02      	bge.n	801287c <__ieee754_fmodf+0xe4>
 8012876:	0049      	lsls	r1, r1, #1
 8012878:	3801      	subs	r0, #1
 801287a:	e7dd      	b.n	8012838 <__ieee754_fmodf+0xa0>
 801287c:	d0a6      	beq.n	80127cc <__ieee754_fmodf+0x34>
 801287e:	0059      	lsls	r1, r3, #1
 8012880:	e7fa      	b.n	8012878 <__ieee754_fmodf+0xe0>
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	3a01      	subs	r2, #1
 8012886:	e7df      	b.n	8012848 <__ieee754_fmodf+0xb0>
 8012888:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801288c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012890:	3282      	adds	r2, #130	@ 0x82
 8012892:	4113      	asrs	r3, r2
 8012894:	432b      	orrs	r3, r5
 8012896:	e7e3      	b.n	8012860 <__ieee754_fmodf+0xc8>
 8012898:	08013c10 	.word	0x08013c10

0801289c <__ieee754_rem_pio2f>:
 801289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801289e:	ee10 6a10 	vmov	r6, s0
 80128a2:	4b88      	ldr	r3, [pc, #544]	@ (8012ac4 <__ieee754_rem_pio2f+0x228>)
 80128a4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80128a8:	429d      	cmp	r5, r3
 80128aa:	b087      	sub	sp, #28
 80128ac:	4604      	mov	r4, r0
 80128ae:	d805      	bhi.n	80128bc <__ieee754_rem_pio2f+0x20>
 80128b0:	2300      	movs	r3, #0
 80128b2:	ed80 0a00 	vstr	s0, [r0]
 80128b6:	6043      	str	r3, [r0, #4]
 80128b8:	2000      	movs	r0, #0
 80128ba:	e022      	b.n	8012902 <__ieee754_rem_pio2f+0x66>
 80128bc:	4b82      	ldr	r3, [pc, #520]	@ (8012ac8 <__ieee754_rem_pio2f+0x22c>)
 80128be:	429d      	cmp	r5, r3
 80128c0:	d83a      	bhi.n	8012938 <__ieee754_rem_pio2f+0x9c>
 80128c2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80128c6:	2e00      	cmp	r6, #0
 80128c8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012acc <__ieee754_rem_pio2f+0x230>
 80128cc:	4a80      	ldr	r2, [pc, #512]	@ (8012ad0 <__ieee754_rem_pio2f+0x234>)
 80128ce:	f023 030f 	bic.w	r3, r3, #15
 80128d2:	dd18      	ble.n	8012906 <__ieee754_rem_pio2f+0x6a>
 80128d4:	4293      	cmp	r3, r2
 80128d6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80128da:	bf09      	itett	eq
 80128dc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012ad4 <__ieee754_rem_pio2f+0x238>
 80128e0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012ad8 <__ieee754_rem_pio2f+0x23c>
 80128e4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012adc <__ieee754_rem_pio2f+0x240>
 80128e8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80128ec:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80128f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128f4:	ed80 7a00 	vstr	s14, [r0]
 80128f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80128fc:	edc0 7a01 	vstr	s15, [r0, #4]
 8012900:	2001      	movs	r0, #1
 8012902:	b007      	add	sp, #28
 8012904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012906:	4293      	cmp	r3, r2
 8012908:	ee70 7a07 	vadd.f32	s15, s0, s14
 801290c:	bf09      	itett	eq
 801290e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012ad4 <__ieee754_rem_pio2f+0x238>
 8012912:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012ad8 <__ieee754_rem_pio2f+0x23c>
 8012916:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012adc <__ieee754_rem_pio2f+0x240>
 801291a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801291e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012922:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012926:	ed80 7a00 	vstr	s14, [r0]
 801292a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801292e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012932:	f04f 30ff 	mov.w	r0, #4294967295
 8012936:	e7e4      	b.n	8012902 <__ieee754_rem_pio2f+0x66>
 8012938:	4b69      	ldr	r3, [pc, #420]	@ (8012ae0 <__ieee754_rem_pio2f+0x244>)
 801293a:	429d      	cmp	r5, r3
 801293c:	d873      	bhi.n	8012a26 <__ieee754_rem_pio2f+0x18a>
 801293e:	f000 f8dd 	bl	8012afc <fabsf>
 8012942:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012ae4 <__ieee754_rem_pio2f+0x248>
 8012946:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801294a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801294e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012952:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012956:	ee17 0a90 	vmov	r0, s15
 801295a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012acc <__ieee754_rem_pio2f+0x230>
 801295e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012962:	281f      	cmp	r0, #31
 8012964:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012ad8 <__ieee754_rem_pio2f+0x23c>
 8012968:	ee67 7a27 	vmul.f32	s15, s14, s15
 801296c:	eeb1 6a47 	vneg.f32	s12, s14
 8012970:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012974:	ee16 1a90 	vmov	r1, s13
 8012978:	dc09      	bgt.n	801298e <__ieee754_rem_pio2f+0xf2>
 801297a:	4a5b      	ldr	r2, [pc, #364]	@ (8012ae8 <__ieee754_rem_pio2f+0x24c>)
 801297c:	1e47      	subs	r7, r0, #1
 801297e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012982:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012986:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801298a:	4293      	cmp	r3, r2
 801298c:	d107      	bne.n	801299e <__ieee754_rem_pio2f+0x102>
 801298e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012992:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012996:	2a08      	cmp	r2, #8
 8012998:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801299c:	dc14      	bgt.n	80129c8 <__ieee754_rem_pio2f+0x12c>
 801299e:	6021      	str	r1, [r4, #0]
 80129a0:	ed94 7a00 	vldr	s14, [r4]
 80129a4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80129a8:	2e00      	cmp	r6, #0
 80129aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80129ae:	ed84 0a01 	vstr	s0, [r4, #4]
 80129b2:	daa6      	bge.n	8012902 <__ieee754_rem_pio2f+0x66>
 80129b4:	eeb1 7a47 	vneg.f32	s14, s14
 80129b8:	eeb1 0a40 	vneg.f32	s0, s0
 80129bc:	ed84 7a00 	vstr	s14, [r4]
 80129c0:	ed84 0a01 	vstr	s0, [r4, #4]
 80129c4:	4240      	negs	r0, r0
 80129c6:	e79c      	b.n	8012902 <__ieee754_rem_pio2f+0x66>
 80129c8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012ad4 <__ieee754_rem_pio2f+0x238>
 80129cc:	eef0 6a40 	vmov.f32	s13, s0
 80129d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80129d4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80129d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80129dc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012adc <__ieee754_rem_pio2f+0x240>
 80129e0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80129e4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80129e8:	ee15 2a90 	vmov	r2, s11
 80129ec:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80129f0:	1a5b      	subs	r3, r3, r1
 80129f2:	2b19      	cmp	r3, #25
 80129f4:	dc04      	bgt.n	8012a00 <__ieee754_rem_pio2f+0x164>
 80129f6:	edc4 5a00 	vstr	s11, [r4]
 80129fa:	eeb0 0a66 	vmov.f32	s0, s13
 80129fe:	e7cf      	b.n	80129a0 <__ieee754_rem_pio2f+0x104>
 8012a00:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012aec <__ieee754_rem_pio2f+0x250>
 8012a04:	eeb0 0a66 	vmov.f32	s0, s13
 8012a08:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012a0c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012a10:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012af0 <__ieee754_rem_pio2f+0x254>
 8012a14:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012a18:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012a1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a20:	ed84 7a00 	vstr	s14, [r4]
 8012a24:	e7bc      	b.n	80129a0 <__ieee754_rem_pio2f+0x104>
 8012a26:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012a2a:	d306      	bcc.n	8012a3a <__ieee754_rem_pio2f+0x19e>
 8012a2c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012a30:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a34:	edc0 7a00 	vstr	s15, [r0]
 8012a38:	e73e      	b.n	80128b8 <__ieee754_rem_pio2f+0x1c>
 8012a3a:	15ea      	asrs	r2, r5, #23
 8012a3c:	3a86      	subs	r2, #134	@ 0x86
 8012a3e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012a42:	ee07 3a90 	vmov	s15, r3
 8012a46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012a4a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012af4 <__ieee754_rem_pio2f+0x258>
 8012a4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a56:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012a5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012a62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a6a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012a6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a7a:	edcd 7a05 	vstr	s15, [sp, #20]
 8012a7e:	d11e      	bne.n	8012abe <__ieee754_rem_pio2f+0x222>
 8012a80:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a88:	bf0c      	ite	eq
 8012a8a:	2301      	moveq	r3, #1
 8012a8c:	2302      	movne	r3, #2
 8012a8e:	491a      	ldr	r1, [pc, #104]	@ (8012af8 <__ieee754_rem_pio2f+0x25c>)
 8012a90:	9101      	str	r1, [sp, #4]
 8012a92:	2102      	movs	r1, #2
 8012a94:	9100      	str	r1, [sp, #0]
 8012a96:	a803      	add	r0, sp, #12
 8012a98:	4621      	mov	r1, r4
 8012a9a:	f000 fc69 	bl	8013370 <__kernel_rem_pio2f>
 8012a9e:	2e00      	cmp	r6, #0
 8012aa0:	f6bf af2f 	bge.w	8012902 <__ieee754_rem_pio2f+0x66>
 8012aa4:	edd4 7a00 	vldr	s15, [r4]
 8012aa8:	eef1 7a67 	vneg.f32	s15, s15
 8012aac:	edc4 7a00 	vstr	s15, [r4]
 8012ab0:	edd4 7a01 	vldr	s15, [r4, #4]
 8012ab4:	eef1 7a67 	vneg.f32	s15, s15
 8012ab8:	edc4 7a01 	vstr	s15, [r4, #4]
 8012abc:	e782      	b.n	80129c4 <__ieee754_rem_pio2f+0x128>
 8012abe:	2303      	movs	r3, #3
 8012ac0:	e7e5      	b.n	8012a8e <__ieee754_rem_pio2f+0x1f2>
 8012ac2:	bf00      	nop
 8012ac4:	3f490fd8 	.word	0x3f490fd8
 8012ac8:	4016cbe3 	.word	0x4016cbe3
 8012acc:	3fc90f80 	.word	0x3fc90f80
 8012ad0:	3fc90fd0 	.word	0x3fc90fd0
 8012ad4:	37354400 	.word	0x37354400
 8012ad8:	37354443 	.word	0x37354443
 8012adc:	2e85a308 	.word	0x2e85a308
 8012ae0:	43490f80 	.word	0x43490f80
 8012ae4:	3f22f984 	.word	0x3f22f984
 8012ae8:	08013c18 	.word	0x08013c18
 8012aec:	2e85a300 	.word	0x2e85a300
 8012af0:	248d3132 	.word	0x248d3132
 8012af4:	43800000 	.word	0x43800000
 8012af8:	08013c98 	.word	0x08013c98

08012afc <fabsf>:
 8012afc:	ee10 3a10 	vmov	r3, s0
 8012b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012b04:	ee00 3a10 	vmov	s0, r3
 8012b08:	4770      	bx	lr
 8012b0a:	0000      	movs	r0, r0
 8012b0c:	0000      	movs	r0, r0
	...

08012b10 <scalbn>:
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	ec55 4b10 	vmov	r4, r5, d0
 8012b16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012b1a:	4606      	mov	r6, r0
 8012b1c:	462b      	mov	r3, r5
 8012b1e:	b991      	cbnz	r1, 8012b46 <scalbn+0x36>
 8012b20:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012b24:	4323      	orrs	r3, r4
 8012b26:	d03b      	beq.n	8012ba0 <scalbn+0x90>
 8012b28:	4b33      	ldr	r3, [pc, #204]	@ (8012bf8 <scalbn+0xe8>)
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	2200      	movs	r2, #0
 8012b30:	f7ed fd2e 	bl	8000590 <__aeabi_dmul>
 8012b34:	4b31      	ldr	r3, [pc, #196]	@ (8012bfc <scalbn+0xec>)
 8012b36:	429e      	cmp	r6, r3
 8012b38:	4604      	mov	r4, r0
 8012b3a:	460d      	mov	r5, r1
 8012b3c:	da0f      	bge.n	8012b5e <scalbn+0x4e>
 8012b3e:	a326      	add	r3, pc, #152	@ (adr r3, 8012bd8 <scalbn+0xc8>)
 8012b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b44:	e01e      	b.n	8012b84 <scalbn+0x74>
 8012b46:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012b4a:	4291      	cmp	r1, r2
 8012b4c:	d10b      	bne.n	8012b66 <scalbn+0x56>
 8012b4e:	4622      	mov	r2, r4
 8012b50:	4620      	mov	r0, r4
 8012b52:	4629      	mov	r1, r5
 8012b54:	f7ed fb66 	bl	8000224 <__adddf3>
 8012b58:	4604      	mov	r4, r0
 8012b5a:	460d      	mov	r5, r1
 8012b5c:	e020      	b.n	8012ba0 <scalbn+0x90>
 8012b5e:	460b      	mov	r3, r1
 8012b60:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012b64:	3936      	subs	r1, #54	@ 0x36
 8012b66:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012b6a:	4296      	cmp	r6, r2
 8012b6c:	dd0d      	ble.n	8012b8a <scalbn+0x7a>
 8012b6e:	2d00      	cmp	r5, #0
 8012b70:	a11b      	add	r1, pc, #108	@ (adr r1, 8012be0 <scalbn+0xd0>)
 8012b72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b76:	da02      	bge.n	8012b7e <scalbn+0x6e>
 8012b78:	a11b      	add	r1, pc, #108	@ (adr r1, 8012be8 <scalbn+0xd8>)
 8012b7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b7e:	a318      	add	r3, pc, #96	@ (adr r3, 8012be0 <scalbn+0xd0>)
 8012b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b84:	f7ed fd04 	bl	8000590 <__aeabi_dmul>
 8012b88:	e7e6      	b.n	8012b58 <scalbn+0x48>
 8012b8a:	1872      	adds	r2, r6, r1
 8012b8c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012b90:	428a      	cmp	r2, r1
 8012b92:	dcec      	bgt.n	8012b6e <scalbn+0x5e>
 8012b94:	2a00      	cmp	r2, #0
 8012b96:	dd06      	ble.n	8012ba6 <scalbn+0x96>
 8012b98:	f36f 531e 	bfc	r3, #20, #11
 8012b9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ba0:	ec45 4b10 	vmov	d0, r4, r5
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012baa:	da08      	bge.n	8012bbe <scalbn+0xae>
 8012bac:	2d00      	cmp	r5, #0
 8012bae:	a10a      	add	r1, pc, #40	@ (adr r1, 8012bd8 <scalbn+0xc8>)
 8012bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bb4:	dac3      	bge.n	8012b3e <scalbn+0x2e>
 8012bb6:	a10e      	add	r1, pc, #56	@ (adr r1, 8012bf0 <scalbn+0xe0>)
 8012bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bbc:	e7bf      	b.n	8012b3e <scalbn+0x2e>
 8012bbe:	3236      	adds	r2, #54	@ 0x36
 8012bc0:	f36f 531e 	bfc	r3, #20, #11
 8012bc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012bc8:	4620      	mov	r0, r4
 8012bca:	4b0d      	ldr	r3, [pc, #52]	@ (8012c00 <scalbn+0xf0>)
 8012bcc:	4629      	mov	r1, r5
 8012bce:	2200      	movs	r2, #0
 8012bd0:	e7d8      	b.n	8012b84 <scalbn+0x74>
 8012bd2:	bf00      	nop
 8012bd4:	f3af 8000 	nop.w
 8012bd8:	c2f8f359 	.word	0xc2f8f359
 8012bdc:	01a56e1f 	.word	0x01a56e1f
 8012be0:	8800759c 	.word	0x8800759c
 8012be4:	7e37e43c 	.word	0x7e37e43c
 8012be8:	8800759c 	.word	0x8800759c
 8012bec:	fe37e43c 	.word	0xfe37e43c
 8012bf0:	c2f8f359 	.word	0xc2f8f359
 8012bf4:	81a56e1f 	.word	0x81a56e1f
 8012bf8:	43500000 	.word	0x43500000
 8012bfc:	ffff3cb0 	.word	0xffff3cb0
 8012c00:	3c900000 	.word	0x3c900000

08012c04 <scalbnf>:
 8012c04:	ee10 3a10 	vmov	r3, s0
 8012c08:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012c0c:	d02b      	beq.n	8012c66 <scalbnf+0x62>
 8012c0e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012c12:	d302      	bcc.n	8012c1a <scalbnf+0x16>
 8012c14:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c18:	4770      	bx	lr
 8012c1a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012c1e:	d123      	bne.n	8012c68 <scalbnf+0x64>
 8012c20:	4b24      	ldr	r3, [pc, #144]	@ (8012cb4 <scalbnf+0xb0>)
 8012c22:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012cb8 <scalbnf+0xb4>
 8012c26:	4298      	cmp	r0, r3
 8012c28:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c2c:	db17      	blt.n	8012c5e <scalbnf+0x5a>
 8012c2e:	ee10 3a10 	vmov	r3, s0
 8012c32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c36:	3a19      	subs	r2, #25
 8012c38:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012c3c:	4288      	cmp	r0, r1
 8012c3e:	dd15      	ble.n	8012c6c <scalbnf+0x68>
 8012c40:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012cbc <scalbnf+0xb8>
 8012c44:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012cc0 <scalbnf+0xbc>
 8012c48:	ee10 3a10 	vmov	r3, s0
 8012c4c:	eeb0 7a67 	vmov.f32	s14, s15
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	bfb8      	it	lt
 8012c54:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c58:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012c5c:	4770      	bx	lr
 8012c5e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012cc4 <scalbnf+0xc0>
 8012c62:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c66:	4770      	bx	lr
 8012c68:	0dd2      	lsrs	r2, r2, #23
 8012c6a:	e7e5      	b.n	8012c38 <scalbnf+0x34>
 8012c6c:	4410      	add	r0, r2
 8012c6e:	28fe      	cmp	r0, #254	@ 0xfe
 8012c70:	dce6      	bgt.n	8012c40 <scalbnf+0x3c>
 8012c72:	2800      	cmp	r0, #0
 8012c74:	dd06      	ble.n	8012c84 <scalbnf+0x80>
 8012c76:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c7a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c7e:	ee00 3a10 	vmov	s0, r3
 8012c82:	4770      	bx	lr
 8012c84:	f110 0f16 	cmn.w	r0, #22
 8012c88:	da09      	bge.n	8012c9e <scalbnf+0x9a>
 8012c8a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012cc4 <scalbnf+0xc0>
 8012c8e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012cc8 <scalbnf+0xc4>
 8012c92:	ee10 3a10 	vmov	r3, s0
 8012c96:	eeb0 7a67 	vmov.f32	s14, s15
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	e7d9      	b.n	8012c52 <scalbnf+0x4e>
 8012c9e:	3019      	adds	r0, #25
 8012ca0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012ca4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012ca8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012ccc <scalbnf+0xc8>
 8012cac:	ee07 3a90 	vmov	s15, r3
 8012cb0:	e7d7      	b.n	8012c62 <scalbnf+0x5e>
 8012cb2:	bf00      	nop
 8012cb4:	ffff3cb0 	.word	0xffff3cb0
 8012cb8:	4c000000 	.word	0x4c000000
 8012cbc:	7149f2ca 	.word	0x7149f2ca
 8012cc0:	f149f2ca 	.word	0xf149f2ca
 8012cc4:	0da24260 	.word	0x0da24260
 8012cc8:	8da24260 	.word	0x8da24260
 8012ccc:	33000000 	.word	0x33000000

08012cd0 <__kernel_rem_pio2>:
 8012cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd4:	ed2d 8b02 	vpush	{d8}
 8012cd8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012cdc:	f112 0f14 	cmn.w	r2, #20
 8012ce0:	9306      	str	r3, [sp, #24]
 8012ce2:	9104      	str	r1, [sp, #16]
 8012ce4:	4bc2      	ldr	r3, [pc, #776]	@ (8012ff0 <__kernel_rem_pio2+0x320>)
 8012ce6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012ce8:	9008      	str	r0, [sp, #32]
 8012cea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012cee:	9300      	str	r3, [sp, #0]
 8012cf0:	9b06      	ldr	r3, [sp, #24]
 8012cf2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012cf6:	bfa8      	it	ge
 8012cf8:	1ed4      	subge	r4, r2, #3
 8012cfa:	9305      	str	r3, [sp, #20]
 8012cfc:	bfb2      	itee	lt
 8012cfe:	2400      	movlt	r4, #0
 8012d00:	2318      	movge	r3, #24
 8012d02:	fb94 f4f3 	sdivge	r4, r4, r3
 8012d06:	f06f 0317 	mvn.w	r3, #23
 8012d0a:	fb04 3303 	mla	r3, r4, r3, r3
 8012d0e:	eb03 0b02 	add.w	fp, r3, r2
 8012d12:	9b00      	ldr	r3, [sp, #0]
 8012d14:	9a05      	ldr	r2, [sp, #20]
 8012d16:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8012fe0 <__kernel_rem_pio2+0x310>
 8012d1a:	eb03 0802 	add.w	r8, r3, r2
 8012d1e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012d20:	1aa7      	subs	r7, r4, r2
 8012d22:	ae20      	add	r6, sp, #128	@ 0x80
 8012d24:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012d28:	2500      	movs	r5, #0
 8012d2a:	4545      	cmp	r5, r8
 8012d2c:	dd12      	ble.n	8012d54 <__kernel_rem_pio2+0x84>
 8012d2e:	9b06      	ldr	r3, [sp, #24]
 8012d30:	aa20      	add	r2, sp, #128	@ 0x80
 8012d32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012d36:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012d3a:	2700      	movs	r7, #0
 8012d3c:	9b00      	ldr	r3, [sp, #0]
 8012d3e:	429f      	cmp	r7, r3
 8012d40:	dc2e      	bgt.n	8012da0 <__kernel_rem_pio2+0xd0>
 8012d42:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8012fe0 <__kernel_rem_pio2+0x310>
 8012d46:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d4e:	46a8      	mov	r8, r5
 8012d50:	2600      	movs	r6, #0
 8012d52:	e01b      	b.n	8012d8c <__kernel_rem_pio2+0xbc>
 8012d54:	42ef      	cmn	r7, r5
 8012d56:	d407      	bmi.n	8012d68 <__kernel_rem_pio2+0x98>
 8012d58:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012d5c:	f7ed fbae 	bl	80004bc <__aeabi_i2d>
 8012d60:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012d64:	3501      	adds	r5, #1
 8012d66:	e7e0      	b.n	8012d2a <__kernel_rem_pio2+0x5a>
 8012d68:	ec51 0b18 	vmov	r0, r1, d8
 8012d6c:	e7f8      	b.n	8012d60 <__kernel_rem_pio2+0x90>
 8012d6e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012d72:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012d76:	f7ed fc0b 	bl	8000590 <__aeabi_dmul>
 8012d7a:	4602      	mov	r2, r0
 8012d7c:	460b      	mov	r3, r1
 8012d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d82:	f7ed fa4f 	bl	8000224 <__adddf3>
 8012d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d8a:	3601      	adds	r6, #1
 8012d8c:	9b05      	ldr	r3, [sp, #20]
 8012d8e:	429e      	cmp	r6, r3
 8012d90:	dded      	ble.n	8012d6e <__kernel_rem_pio2+0x9e>
 8012d92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d96:	3701      	adds	r7, #1
 8012d98:	ecaa 7b02 	vstmia	sl!, {d7}
 8012d9c:	3508      	adds	r5, #8
 8012d9e:	e7cd      	b.n	8012d3c <__kernel_rem_pio2+0x6c>
 8012da0:	9b00      	ldr	r3, [sp, #0]
 8012da2:	f8dd 8000 	ldr.w	r8, [sp]
 8012da6:	aa0c      	add	r2, sp, #48	@ 0x30
 8012da8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8012dae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012db0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012db6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dbc:	ab98      	add	r3, sp, #608	@ 0x260
 8012dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012dc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012dc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012dca:	ac0c      	add	r4, sp, #48	@ 0x30
 8012dcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012dce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012dd2:	46a1      	mov	r9, r4
 8012dd4:	46c2      	mov	sl, r8
 8012dd6:	f1ba 0f00 	cmp.w	sl, #0
 8012dda:	dc77      	bgt.n	8012ecc <__kernel_rem_pio2+0x1fc>
 8012ddc:	4658      	mov	r0, fp
 8012dde:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012de2:	f7ff fe95 	bl	8012b10 <scalbn>
 8012de6:	ec57 6b10 	vmov	r6, r7, d0
 8012dea:	2200      	movs	r2, #0
 8012dec:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fbcc 	bl	8000590 <__aeabi_dmul>
 8012df8:	ec41 0b10 	vmov	d0, r0, r1
 8012dfc:	f000 fd20 	bl	8013840 <floor>
 8012e00:	4b7c      	ldr	r3, [pc, #496]	@ (8012ff4 <__kernel_rem_pio2+0x324>)
 8012e02:	ec51 0b10 	vmov	r0, r1, d0
 8012e06:	2200      	movs	r2, #0
 8012e08:	f7ed fbc2 	bl	8000590 <__aeabi_dmul>
 8012e0c:	4602      	mov	r2, r0
 8012e0e:	460b      	mov	r3, r1
 8012e10:	4630      	mov	r0, r6
 8012e12:	4639      	mov	r1, r7
 8012e14:	f7ed fa04 	bl	8000220 <__aeabi_dsub>
 8012e18:	460f      	mov	r7, r1
 8012e1a:	4606      	mov	r6, r0
 8012e1c:	f7ed fe52 	bl	8000ac4 <__aeabi_d2iz>
 8012e20:	9002      	str	r0, [sp, #8]
 8012e22:	f7ed fb4b 	bl	80004bc <__aeabi_i2d>
 8012e26:	4602      	mov	r2, r0
 8012e28:	460b      	mov	r3, r1
 8012e2a:	4630      	mov	r0, r6
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	f7ed f9f7 	bl	8000220 <__aeabi_dsub>
 8012e32:	f1bb 0f00 	cmp.w	fp, #0
 8012e36:	4606      	mov	r6, r0
 8012e38:	460f      	mov	r7, r1
 8012e3a:	dd6c      	ble.n	8012f16 <__kernel_rem_pio2+0x246>
 8012e3c:	f108 31ff 	add.w	r1, r8, #4294967295
 8012e40:	ab0c      	add	r3, sp, #48	@ 0x30
 8012e42:	9d02      	ldr	r5, [sp, #8]
 8012e44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e48:	f1cb 0018 	rsb	r0, fp, #24
 8012e4c:	fa43 f200 	asr.w	r2, r3, r0
 8012e50:	4415      	add	r5, r2
 8012e52:	4082      	lsls	r2, r0
 8012e54:	1a9b      	subs	r3, r3, r2
 8012e56:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e58:	9502      	str	r5, [sp, #8]
 8012e5a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012e5e:	f1cb 0217 	rsb	r2, fp, #23
 8012e62:	fa43 f902 	asr.w	r9, r3, r2
 8012e66:	f1b9 0f00 	cmp.w	r9, #0
 8012e6a:	dd64      	ble.n	8012f36 <__kernel_rem_pio2+0x266>
 8012e6c:	9b02      	ldr	r3, [sp, #8]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	3301      	adds	r3, #1
 8012e72:	9302      	str	r3, [sp, #8]
 8012e74:	4615      	mov	r5, r2
 8012e76:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012e7a:	4590      	cmp	r8, r2
 8012e7c:	f300 80a1 	bgt.w	8012fc2 <__kernel_rem_pio2+0x2f2>
 8012e80:	f1bb 0f00 	cmp.w	fp, #0
 8012e84:	dd07      	ble.n	8012e96 <__kernel_rem_pio2+0x1c6>
 8012e86:	f1bb 0f01 	cmp.w	fp, #1
 8012e8a:	f000 80c1 	beq.w	8013010 <__kernel_rem_pio2+0x340>
 8012e8e:	f1bb 0f02 	cmp.w	fp, #2
 8012e92:	f000 80c8 	beq.w	8013026 <__kernel_rem_pio2+0x356>
 8012e96:	f1b9 0f02 	cmp.w	r9, #2
 8012e9a:	d14c      	bne.n	8012f36 <__kernel_rem_pio2+0x266>
 8012e9c:	4632      	mov	r2, r6
 8012e9e:	463b      	mov	r3, r7
 8012ea0:	4955      	ldr	r1, [pc, #340]	@ (8012ff8 <__kernel_rem_pio2+0x328>)
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	f7ed f9bc 	bl	8000220 <__aeabi_dsub>
 8012ea8:	4606      	mov	r6, r0
 8012eaa:	460f      	mov	r7, r1
 8012eac:	2d00      	cmp	r5, #0
 8012eae:	d042      	beq.n	8012f36 <__kernel_rem_pio2+0x266>
 8012eb0:	4658      	mov	r0, fp
 8012eb2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8012fe8 <__kernel_rem_pio2+0x318>
 8012eb6:	f7ff fe2b 	bl	8012b10 <scalbn>
 8012eba:	4630      	mov	r0, r6
 8012ebc:	4639      	mov	r1, r7
 8012ebe:	ec53 2b10 	vmov	r2, r3, d0
 8012ec2:	f7ed f9ad 	bl	8000220 <__aeabi_dsub>
 8012ec6:	4606      	mov	r6, r0
 8012ec8:	460f      	mov	r7, r1
 8012eca:	e034      	b.n	8012f36 <__kernel_rem_pio2+0x266>
 8012ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8012ffc <__kernel_rem_pio2+0x32c>)
 8012ece:	2200      	movs	r2, #0
 8012ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ed4:	f7ed fb5c 	bl	8000590 <__aeabi_dmul>
 8012ed8:	f7ed fdf4 	bl	8000ac4 <__aeabi_d2iz>
 8012edc:	f7ed faee 	bl	80004bc <__aeabi_i2d>
 8012ee0:	4b47      	ldr	r3, [pc, #284]	@ (8013000 <__kernel_rem_pio2+0x330>)
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	4606      	mov	r6, r0
 8012ee6:	460f      	mov	r7, r1
 8012ee8:	f7ed fb52 	bl	8000590 <__aeabi_dmul>
 8012eec:	4602      	mov	r2, r0
 8012eee:	460b      	mov	r3, r1
 8012ef0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ef4:	f7ed f994 	bl	8000220 <__aeabi_dsub>
 8012ef8:	f7ed fde4 	bl	8000ac4 <__aeabi_d2iz>
 8012efc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012f00:	f849 0b04 	str.w	r0, [r9], #4
 8012f04:	4639      	mov	r1, r7
 8012f06:	4630      	mov	r0, r6
 8012f08:	f7ed f98c 	bl	8000224 <__adddf3>
 8012f0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f14:	e75f      	b.n	8012dd6 <__kernel_rem_pio2+0x106>
 8012f16:	d107      	bne.n	8012f28 <__kernel_rem_pio2+0x258>
 8012f18:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f1c:	aa0c      	add	r2, sp, #48	@ 0x30
 8012f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f22:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012f26:	e79e      	b.n	8012e66 <__kernel_rem_pio2+0x196>
 8012f28:	4b36      	ldr	r3, [pc, #216]	@ (8013004 <__kernel_rem_pio2+0x334>)
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f7ed fdb6 	bl	8000a9c <__aeabi_dcmpge>
 8012f30:	2800      	cmp	r0, #0
 8012f32:	d143      	bne.n	8012fbc <__kernel_rem_pio2+0x2ec>
 8012f34:	4681      	mov	r9, r0
 8012f36:	2200      	movs	r2, #0
 8012f38:	2300      	movs	r3, #0
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	f7ed fd8f 	bl	8000a60 <__aeabi_dcmpeq>
 8012f42:	2800      	cmp	r0, #0
 8012f44:	f000 80c1 	beq.w	80130ca <__kernel_rem_pio2+0x3fa>
 8012f48:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	9900      	ldr	r1, [sp, #0]
 8012f50:	428b      	cmp	r3, r1
 8012f52:	da70      	bge.n	8013036 <__kernel_rem_pio2+0x366>
 8012f54:	2a00      	cmp	r2, #0
 8012f56:	f000 808b 	beq.w	8013070 <__kernel_rem_pio2+0x3a0>
 8012f5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f5e:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f60:	f1ab 0b18 	sub.w	fp, fp, #24
 8012f64:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d0f6      	beq.n	8012f5a <__kernel_rem_pio2+0x28a>
 8012f6c:	4658      	mov	r0, fp
 8012f6e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8012fe8 <__kernel_rem_pio2+0x318>
 8012f72:	f7ff fdcd 	bl	8012b10 <scalbn>
 8012f76:	f108 0301 	add.w	r3, r8, #1
 8012f7a:	00da      	lsls	r2, r3, #3
 8012f7c:	9205      	str	r2, [sp, #20]
 8012f7e:	ec55 4b10 	vmov	r4, r5, d0
 8012f82:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012f84:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8012ffc <__kernel_rem_pio2+0x32c>
 8012f88:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012f8c:	4646      	mov	r6, r8
 8012f8e:	f04f 0a00 	mov.w	sl, #0
 8012f92:	2e00      	cmp	r6, #0
 8012f94:	f280 80d1 	bge.w	801313a <__kernel_rem_pio2+0x46a>
 8012f98:	4644      	mov	r4, r8
 8012f9a:	2c00      	cmp	r4, #0
 8012f9c:	f2c0 80ff 	blt.w	801319e <__kernel_rem_pio2+0x4ce>
 8012fa0:	4b19      	ldr	r3, [pc, #100]	@ (8013008 <__kernel_rem_pio2+0x338>)
 8012fa2:	461f      	mov	r7, r3
 8012fa4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012fa6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012faa:	9306      	str	r3, [sp, #24]
 8012fac:	f04f 0a00 	mov.w	sl, #0
 8012fb0:	f04f 0b00 	mov.w	fp, #0
 8012fb4:	2600      	movs	r6, #0
 8012fb6:	eba8 0504 	sub.w	r5, r8, r4
 8012fba:	e0e4      	b.n	8013186 <__kernel_rem_pio2+0x4b6>
 8012fbc:	f04f 0902 	mov.w	r9, #2
 8012fc0:	e754      	b.n	8012e6c <__kernel_rem_pio2+0x19c>
 8012fc2:	f854 3b04 	ldr.w	r3, [r4], #4
 8012fc6:	bb0d      	cbnz	r5, 801300c <__kernel_rem_pio2+0x33c>
 8012fc8:	b123      	cbz	r3, 8012fd4 <__kernel_rem_pio2+0x304>
 8012fca:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	3201      	adds	r2, #1
 8012fd6:	461d      	mov	r5, r3
 8012fd8:	e74f      	b.n	8012e7a <__kernel_rem_pio2+0x1aa>
 8012fda:	bf00      	nop
 8012fdc:	f3af 8000 	nop.w
	...
 8012fec:	3ff00000 	.word	0x3ff00000
 8012ff0:	08013ff0 	.word	0x08013ff0
 8012ff4:	40200000 	.word	0x40200000
 8012ff8:	3ff00000 	.word	0x3ff00000
 8012ffc:	3e700000 	.word	0x3e700000
 8013000:	41700000 	.word	0x41700000
 8013004:	3fe00000 	.word	0x3fe00000
 8013008:	08013fb0 	.word	0x08013fb0
 801300c:	1acb      	subs	r3, r1, r3
 801300e:	e7de      	b.n	8012fce <__kernel_rem_pio2+0x2fe>
 8013010:	f108 32ff 	add.w	r2, r8, #4294967295
 8013014:	ab0c      	add	r3, sp, #48	@ 0x30
 8013016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801301a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801301e:	a90c      	add	r1, sp, #48	@ 0x30
 8013020:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013024:	e737      	b.n	8012e96 <__kernel_rem_pio2+0x1c6>
 8013026:	f108 32ff 	add.w	r2, r8, #4294967295
 801302a:	ab0c      	add	r3, sp, #48	@ 0x30
 801302c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013030:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013034:	e7f3      	b.n	801301e <__kernel_rem_pio2+0x34e>
 8013036:	a90c      	add	r1, sp, #48	@ 0x30
 8013038:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801303c:	3b01      	subs	r3, #1
 801303e:	430a      	orrs	r2, r1
 8013040:	e785      	b.n	8012f4e <__kernel_rem_pio2+0x27e>
 8013042:	3401      	adds	r4, #1
 8013044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013048:	2a00      	cmp	r2, #0
 801304a:	d0fa      	beq.n	8013042 <__kernel_rem_pio2+0x372>
 801304c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801304e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013052:	eb0d 0503 	add.w	r5, sp, r3
 8013056:	9b06      	ldr	r3, [sp, #24]
 8013058:	aa20      	add	r2, sp, #128	@ 0x80
 801305a:	4443      	add	r3, r8
 801305c:	f108 0701 	add.w	r7, r8, #1
 8013060:	3d98      	subs	r5, #152	@ 0x98
 8013062:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013066:	4444      	add	r4, r8
 8013068:	42bc      	cmp	r4, r7
 801306a:	da04      	bge.n	8013076 <__kernel_rem_pio2+0x3a6>
 801306c:	46a0      	mov	r8, r4
 801306e:	e6a2      	b.n	8012db6 <__kernel_rem_pio2+0xe6>
 8013070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013072:	2401      	movs	r4, #1
 8013074:	e7e6      	b.n	8013044 <__kernel_rem_pio2+0x374>
 8013076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013078:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801307c:	f7ed fa1e 	bl	80004bc <__aeabi_i2d>
 8013080:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013340 <__kernel_rem_pio2+0x670>
 8013084:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013088:	ed8d 7b02 	vstr	d7, [sp, #8]
 801308c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013090:	46b2      	mov	sl, r6
 8013092:	f04f 0800 	mov.w	r8, #0
 8013096:	9b05      	ldr	r3, [sp, #20]
 8013098:	4598      	cmp	r8, r3
 801309a:	dd05      	ble.n	80130a8 <__kernel_rem_pio2+0x3d8>
 801309c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80130a0:	3701      	adds	r7, #1
 80130a2:	eca5 7b02 	vstmia	r5!, {d7}
 80130a6:	e7df      	b.n	8013068 <__kernel_rem_pio2+0x398>
 80130a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80130ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80130b0:	f7ed fa6e 	bl	8000590 <__aeabi_dmul>
 80130b4:	4602      	mov	r2, r0
 80130b6:	460b      	mov	r3, r1
 80130b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130bc:	f7ed f8b2 	bl	8000224 <__adddf3>
 80130c0:	f108 0801 	add.w	r8, r8, #1
 80130c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130c8:	e7e5      	b.n	8013096 <__kernel_rem_pio2+0x3c6>
 80130ca:	f1cb 0000 	rsb	r0, fp, #0
 80130ce:	ec47 6b10 	vmov	d0, r6, r7
 80130d2:	f7ff fd1d 	bl	8012b10 <scalbn>
 80130d6:	ec55 4b10 	vmov	r4, r5, d0
 80130da:	4b9b      	ldr	r3, [pc, #620]	@ (8013348 <__kernel_rem_pio2+0x678>)
 80130dc:	2200      	movs	r2, #0
 80130de:	4620      	mov	r0, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	f7ed fcdb 	bl	8000a9c <__aeabi_dcmpge>
 80130e6:	b300      	cbz	r0, 801312a <__kernel_rem_pio2+0x45a>
 80130e8:	4b98      	ldr	r3, [pc, #608]	@ (801334c <__kernel_rem_pio2+0x67c>)
 80130ea:	2200      	movs	r2, #0
 80130ec:	4620      	mov	r0, r4
 80130ee:	4629      	mov	r1, r5
 80130f0:	f7ed fa4e 	bl	8000590 <__aeabi_dmul>
 80130f4:	f7ed fce6 	bl	8000ac4 <__aeabi_d2iz>
 80130f8:	4606      	mov	r6, r0
 80130fa:	f7ed f9df 	bl	80004bc <__aeabi_i2d>
 80130fe:	4b92      	ldr	r3, [pc, #584]	@ (8013348 <__kernel_rem_pio2+0x678>)
 8013100:	2200      	movs	r2, #0
 8013102:	f7ed fa45 	bl	8000590 <__aeabi_dmul>
 8013106:	460b      	mov	r3, r1
 8013108:	4602      	mov	r2, r0
 801310a:	4629      	mov	r1, r5
 801310c:	4620      	mov	r0, r4
 801310e:	f7ed f887 	bl	8000220 <__aeabi_dsub>
 8013112:	f7ed fcd7 	bl	8000ac4 <__aeabi_d2iz>
 8013116:	ab0c      	add	r3, sp, #48	@ 0x30
 8013118:	f10b 0b18 	add.w	fp, fp, #24
 801311c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013120:	f108 0801 	add.w	r8, r8, #1
 8013124:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013128:	e720      	b.n	8012f6c <__kernel_rem_pio2+0x29c>
 801312a:	4620      	mov	r0, r4
 801312c:	4629      	mov	r1, r5
 801312e:	f7ed fcc9 	bl	8000ac4 <__aeabi_d2iz>
 8013132:	ab0c      	add	r3, sp, #48	@ 0x30
 8013134:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013138:	e718      	b.n	8012f6c <__kernel_rem_pio2+0x29c>
 801313a:	ab0c      	add	r3, sp, #48	@ 0x30
 801313c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013140:	f7ed f9bc 	bl	80004bc <__aeabi_i2d>
 8013144:	4622      	mov	r2, r4
 8013146:	462b      	mov	r3, r5
 8013148:	f7ed fa22 	bl	8000590 <__aeabi_dmul>
 801314c:	4652      	mov	r2, sl
 801314e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013152:	465b      	mov	r3, fp
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fa1a 	bl	8000590 <__aeabi_dmul>
 801315c:	3e01      	subs	r6, #1
 801315e:	4604      	mov	r4, r0
 8013160:	460d      	mov	r5, r1
 8013162:	e716      	b.n	8012f92 <__kernel_rem_pio2+0x2c2>
 8013164:	9906      	ldr	r1, [sp, #24]
 8013166:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801316a:	9106      	str	r1, [sp, #24]
 801316c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013170:	f7ed fa0e 	bl	8000590 <__aeabi_dmul>
 8013174:	4602      	mov	r2, r0
 8013176:	460b      	mov	r3, r1
 8013178:	4650      	mov	r0, sl
 801317a:	4659      	mov	r1, fp
 801317c:	f7ed f852 	bl	8000224 <__adddf3>
 8013180:	3601      	adds	r6, #1
 8013182:	4682      	mov	sl, r0
 8013184:	468b      	mov	fp, r1
 8013186:	9b00      	ldr	r3, [sp, #0]
 8013188:	429e      	cmp	r6, r3
 801318a:	dc01      	bgt.n	8013190 <__kernel_rem_pio2+0x4c0>
 801318c:	42ae      	cmp	r6, r5
 801318e:	dde9      	ble.n	8013164 <__kernel_rem_pio2+0x494>
 8013190:	ab48      	add	r3, sp, #288	@ 0x120
 8013192:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013196:	e9c5 ab00 	strd	sl, fp, [r5]
 801319a:	3c01      	subs	r4, #1
 801319c:	e6fd      	b.n	8012f9a <__kernel_rem_pio2+0x2ca>
 801319e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	dc0b      	bgt.n	80131bc <__kernel_rem_pio2+0x4ec>
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	dc35      	bgt.n	8013214 <__kernel_rem_pio2+0x544>
 80131a8:	d059      	beq.n	801325e <__kernel_rem_pio2+0x58e>
 80131aa:	9b02      	ldr	r3, [sp, #8]
 80131ac:	f003 0007 	and.w	r0, r3, #7
 80131b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80131b4:	ecbd 8b02 	vpop	{d8}
 80131b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80131be:	2b03      	cmp	r3, #3
 80131c0:	d1f3      	bne.n	80131aa <__kernel_rem_pio2+0x4da>
 80131c2:	9b05      	ldr	r3, [sp, #20]
 80131c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80131c8:	eb0d 0403 	add.w	r4, sp, r3
 80131cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80131d0:	4625      	mov	r5, r4
 80131d2:	46c2      	mov	sl, r8
 80131d4:	f1ba 0f00 	cmp.w	sl, #0
 80131d8:	dc69      	bgt.n	80132ae <__kernel_rem_pio2+0x5de>
 80131da:	4645      	mov	r5, r8
 80131dc:	2d01      	cmp	r5, #1
 80131de:	f300 8087 	bgt.w	80132f0 <__kernel_rem_pio2+0x620>
 80131e2:	9c05      	ldr	r4, [sp, #20]
 80131e4:	ab48      	add	r3, sp, #288	@ 0x120
 80131e6:	441c      	add	r4, r3
 80131e8:	2000      	movs	r0, #0
 80131ea:	2100      	movs	r1, #0
 80131ec:	f1b8 0f01 	cmp.w	r8, #1
 80131f0:	f300 809c 	bgt.w	801332c <__kernel_rem_pio2+0x65c>
 80131f4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80131f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80131fc:	f1b9 0f00 	cmp.w	r9, #0
 8013200:	f040 80a6 	bne.w	8013350 <__kernel_rem_pio2+0x680>
 8013204:	9b04      	ldr	r3, [sp, #16]
 8013206:	e9c3 5600 	strd	r5, r6, [r3]
 801320a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801320e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013212:	e7ca      	b.n	80131aa <__kernel_rem_pio2+0x4da>
 8013214:	9d05      	ldr	r5, [sp, #20]
 8013216:	ab48      	add	r3, sp, #288	@ 0x120
 8013218:	441d      	add	r5, r3
 801321a:	4644      	mov	r4, r8
 801321c:	2000      	movs	r0, #0
 801321e:	2100      	movs	r1, #0
 8013220:	2c00      	cmp	r4, #0
 8013222:	da35      	bge.n	8013290 <__kernel_rem_pio2+0x5c0>
 8013224:	f1b9 0f00 	cmp.w	r9, #0
 8013228:	d038      	beq.n	801329c <__kernel_rem_pio2+0x5cc>
 801322a:	4602      	mov	r2, r0
 801322c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013230:	9c04      	ldr	r4, [sp, #16]
 8013232:	e9c4 2300 	strd	r2, r3, [r4]
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801323e:	f7ec ffef 	bl	8000220 <__aeabi_dsub>
 8013242:	ad4a      	add	r5, sp, #296	@ 0x128
 8013244:	2401      	movs	r4, #1
 8013246:	45a0      	cmp	r8, r4
 8013248:	da2b      	bge.n	80132a2 <__kernel_rem_pio2+0x5d2>
 801324a:	f1b9 0f00 	cmp.w	r9, #0
 801324e:	d002      	beq.n	8013256 <__kernel_rem_pio2+0x586>
 8013250:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013254:	4619      	mov	r1, r3
 8013256:	9b04      	ldr	r3, [sp, #16]
 8013258:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801325c:	e7a5      	b.n	80131aa <__kernel_rem_pio2+0x4da>
 801325e:	9c05      	ldr	r4, [sp, #20]
 8013260:	ab48      	add	r3, sp, #288	@ 0x120
 8013262:	441c      	add	r4, r3
 8013264:	2000      	movs	r0, #0
 8013266:	2100      	movs	r1, #0
 8013268:	f1b8 0f00 	cmp.w	r8, #0
 801326c:	da09      	bge.n	8013282 <__kernel_rem_pio2+0x5b2>
 801326e:	f1b9 0f00 	cmp.w	r9, #0
 8013272:	d002      	beq.n	801327a <__kernel_rem_pio2+0x5aa>
 8013274:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013278:	4619      	mov	r1, r3
 801327a:	9b04      	ldr	r3, [sp, #16]
 801327c:	e9c3 0100 	strd	r0, r1, [r3]
 8013280:	e793      	b.n	80131aa <__kernel_rem_pio2+0x4da>
 8013282:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013286:	f7ec ffcd 	bl	8000224 <__adddf3>
 801328a:	f108 38ff 	add.w	r8, r8, #4294967295
 801328e:	e7eb      	b.n	8013268 <__kernel_rem_pio2+0x598>
 8013290:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013294:	f7ec ffc6 	bl	8000224 <__adddf3>
 8013298:	3c01      	subs	r4, #1
 801329a:	e7c1      	b.n	8013220 <__kernel_rem_pio2+0x550>
 801329c:	4602      	mov	r2, r0
 801329e:	460b      	mov	r3, r1
 80132a0:	e7c6      	b.n	8013230 <__kernel_rem_pio2+0x560>
 80132a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80132a6:	f7ec ffbd 	bl	8000224 <__adddf3>
 80132aa:	3401      	adds	r4, #1
 80132ac:	e7cb      	b.n	8013246 <__kernel_rem_pio2+0x576>
 80132ae:	ed35 7b02 	vldmdb	r5!, {d7}
 80132b2:	ed8d 7b00 	vstr	d7, [sp]
 80132b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80132ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132be:	ec53 2b17 	vmov	r2, r3, d7
 80132c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132c6:	f7ec ffad 	bl	8000224 <__adddf3>
 80132ca:	4602      	mov	r2, r0
 80132cc:	460b      	mov	r3, r1
 80132ce:	4606      	mov	r6, r0
 80132d0:	460f      	mov	r7, r1
 80132d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132d6:	f7ec ffa3 	bl	8000220 <__aeabi_dsub>
 80132da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80132de:	f7ec ffa1 	bl	8000224 <__adddf3>
 80132e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80132ea:	e9c5 6700 	strd	r6, r7, [r5]
 80132ee:	e771      	b.n	80131d4 <__kernel_rem_pio2+0x504>
 80132f0:	ed34 7b02 	vldmdb	r4!, {d7}
 80132f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80132f8:	ec51 0b17 	vmov	r0, r1, d7
 80132fc:	4652      	mov	r2, sl
 80132fe:	465b      	mov	r3, fp
 8013300:	ed8d 7b00 	vstr	d7, [sp]
 8013304:	f7ec ff8e 	bl	8000224 <__adddf3>
 8013308:	4602      	mov	r2, r0
 801330a:	460b      	mov	r3, r1
 801330c:	4606      	mov	r6, r0
 801330e:	460f      	mov	r7, r1
 8013310:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013314:	f7ec ff84 	bl	8000220 <__aeabi_dsub>
 8013318:	4652      	mov	r2, sl
 801331a:	465b      	mov	r3, fp
 801331c:	f7ec ff82 	bl	8000224 <__adddf3>
 8013320:	3d01      	subs	r5, #1
 8013322:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013326:	e9c4 6700 	strd	r6, r7, [r4]
 801332a:	e757      	b.n	80131dc <__kernel_rem_pio2+0x50c>
 801332c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013330:	f7ec ff78 	bl	8000224 <__adddf3>
 8013334:	f108 38ff 	add.w	r8, r8, #4294967295
 8013338:	e758      	b.n	80131ec <__kernel_rem_pio2+0x51c>
 801333a:	bf00      	nop
 801333c:	f3af 8000 	nop.w
	...
 8013348:	41700000 	.word	0x41700000
 801334c:	3e700000 	.word	0x3e700000
 8013350:	9b04      	ldr	r3, [sp, #16]
 8013352:	9a04      	ldr	r2, [sp, #16]
 8013354:	601d      	str	r5, [r3, #0]
 8013356:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801335a:	605c      	str	r4, [r3, #4]
 801335c:	609f      	str	r7, [r3, #8]
 801335e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013362:	60d3      	str	r3, [r2, #12]
 8013364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013368:	6110      	str	r0, [r2, #16]
 801336a:	6153      	str	r3, [r2, #20]
 801336c:	e71d      	b.n	80131aa <__kernel_rem_pio2+0x4da>
 801336e:	bf00      	nop

08013370 <__kernel_rem_pio2f>:
 8013370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013374:	ed2d 8b04 	vpush	{d8-d9}
 8013378:	b0d9      	sub	sp, #356	@ 0x164
 801337a:	4690      	mov	r8, r2
 801337c:	9001      	str	r0, [sp, #4]
 801337e:	4ab6      	ldr	r2, [pc, #728]	@ (8013658 <__kernel_rem_pio2f+0x2e8>)
 8013380:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013382:	f118 0f04 	cmn.w	r8, #4
 8013386:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801338a:	460f      	mov	r7, r1
 801338c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013390:	db26      	blt.n	80133e0 <__kernel_rem_pio2f+0x70>
 8013392:	f1b8 0203 	subs.w	r2, r8, #3
 8013396:	bf48      	it	mi
 8013398:	f108 0204 	addmi.w	r2, r8, #4
 801339c:	10d2      	asrs	r2, r2, #3
 801339e:	1c55      	adds	r5, r2, #1
 80133a0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80133a2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 80133a6:	00e8      	lsls	r0, r5, #3
 80133a8:	eba2 060b 	sub.w	r6, r2, fp
 80133ac:	9002      	str	r0, [sp, #8]
 80133ae:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80133b2:	eb0a 0c0b 	add.w	ip, sl, fp
 80133b6:	ac1c      	add	r4, sp, #112	@ 0x70
 80133b8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80133bc:	2000      	movs	r0, #0
 80133be:	4560      	cmp	r0, ip
 80133c0:	dd10      	ble.n	80133e4 <__kernel_rem_pio2f+0x74>
 80133c2:	a91c      	add	r1, sp, #112	@ 0x70
 80133c4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80133c8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80133cc:	2600      	movs	r6, #0
 80133ce:	4556      	cmp	r6, sl
 80133d0:	dc24      	bgt.n	801341c <__kernel_rem_pio2f+0xac>
 80133d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80133d6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 80133da:	4684      	mov	ip, r0
 80133dc:	2400      	movs	r4, #0
 80133de:	e016      	b.n	801340e <__kernel_rem_pio2f+0x9e>
 80133e0:	2200      	movs	r2, #0
 80133e2:	e7dc      	b.n	801339e <__kernel_rem_pio2f+0x2e>
 80133e4:	42c6      	cmn	r6, r0
 80133e6:	bf5d      	ittte	pl
 80133e8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80133ec:	ee07 1a90 	vmovpl	s15, r1
 80133f0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80133f4:	eef0 7a47 	vmovmi.f32	s15, s14
 80133f8:	ece4 7a01 	vstmia	r4!, {s15}
 80133fc:	3001      	adds	r0, #1
 80133fe:	e7de      	b.n	80133be <__kernel_rem_pio2f+0x4e>
 8013400:	ecfe 6a01 	vldmia	lr!, {s13}
 8013404:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013408:	eee6 7a87 	vfma.f32	s15, s13, s14
 801340c:	3401      	adds	r4, #1
 801340e:	455c      	cmp	r4, fp
 8013410:	ddf6      	ble.n	8013400 <__kernel_rem_pio2f+0x90>
 8013412:	ece9 7a01 	vstmia	r9!, {s15}
 8013416:	3601      	adds	r6, #1
 8013418:	3004      	adds	r0, #4
 801341a:	e7d8      	b.n	80133ce <__kernel_rem_pio2f+0x5e>
 801341c:	a908      	add	r1, sp, #32
 801341e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013422:	9104      	str	r1, [sp, #16]
 8013424:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013426:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8013664 <__kernel_rem_pio2f+0x2f4>
 801342a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013660 <__kernel_rem_pio2f+0x2f0>
 801342e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013432:	9203      	str	r2, [sp, #12]
 8013434:	4654      	mov	r4, sl
 8013436:	00a2      	lsls	r2, r4, #2
 8013438:	9205      	str	r2, [sp, #20]
 801343a:	aa58      	add	r2, sp, #352	@ 0x160
 801343c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013440:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013444:	a944      	add	r1, sp, #272	@ 0x110
 8013446:	aa08      	add	r2, sp, #32
 8013448:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801344c:	4694      	mov	ip, r2
 801344e:	4626      	mov	r6, r4
 8013450:	2e00      	cmp	r6, #0
 8013452:	dc4c      	bgt.n	80134ee <__kernel_rem_pio2f+0x17e>
 8013454:	4628      	mov	r0, r5
 8013456:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801345a:	f7ff fbd3 	bl	8012c04 <scalbnf>
 801345e:	eeb0 8a40 	vmov.f32	s16, s0
 8013462:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013466:	ee28 0a00 	vmul.f32	s0, s16, s0
 801346a:	f000 fa65 	bl	8013938 <floorf>
 801346e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013472:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013476:	2d00      	cmp	r5, #0
 8013478:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801347c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013480:	ee17 9a90 	vmov	r9, s15
 8013484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013488:	ee38 8a67 	vsub.f32	s16, s16, s15
 801348c:	dd41      	ble.n	8013512 <__kernel_rem_pio2f+0x1a2>
 801348e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013492:	a908      	add	r1, sp, #32
 8013494:	f1c5 0e08 	rsb	lr, r5, #8
 8013498:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801349c:	fa46 f00e 	asr.w	r0, r6, lr
 80134a0:	4481      	add	r9, r0
 80134a2:	fa00 f00e 	lsl.w	r0, r0, lr
 80134a6:	1a36      	subs	r6, r6, r0
 80134a8:	f1c5 0007 	rsb	r0, r5, #7
 80134ac:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80134b0:	4106      	asrs	r6, r0
 80134b2:	2e00      	cmp	r6, #0
 80134b4:	dd3c      	ble.n	8013530 <__kernel_rem_pio2f+0x1c0>
 80134b6:	f04f 0e00 	mov.w	lr, #0
 80134ba:	f109 0901 	add.w	r9, r9, #1
 80134be:	4670      	mov	r0, lr
 80134c0:	4574      	cmp	r4, lr
 80134c2:	dc68      	bgt.n	8013596 <__kernel_rem_pio2f+0x226>
 80134c4:	2d00      	cmp	r5, #0
 80134c6:	dd03      	ble.n	80134d0 <__kernel_rem_pio2f+0x160>
 80134c8:	2d01      	cmp	r5, #1
 80134ca:	d074      	beq.n	80135b6 <__kernel_rem_pio2f+0x246>
 80134cc:	2d02      	cmp	r5, #2
 80134ce:	d07d      	beq.n	80135cc <__kernel_rem_pio2f+0x25c>
 80134d0:	2e02      	cmp	r6, #2
 80134d2:	d12d      	bne.n	8013530 <__kernel_rem_pio2f+0x1c0>
 80134d4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80134d8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80134dc:	b340      	cbz	r0, 8013530 <__kernel_rem_pio2f+0x1c0>
 80134de:	4628      	mov	r0, r5
 80134e0:	9306      	str	r3, [sp, #24]
 80134e2:	f7ff fb8f 	bl	8012c04 <scalbnf>
 80134e6:	9b06      	ldr	r3, [sp, #24]
 80134e8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80134ec:	e020      	b.n	8013530 <__kernel_rem_pio2f+0x1c0>
 80134ee:	ee60 7a28 	vmul.f32	s15, s0, s17
 80134f2:	3e01      	subs	r6, #1
 80134f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134fc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013500:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013504:	ecac 0a01 	vstmia	ip!, {s0}
 8013508:	ed30 0a01 	vldmdb	r0!, {s0}
 801350c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013510:	e79e      	b.n	8013450 <__kernel_rem_pio2f+0xe0>
 8013512:	d105      	bne.n	8013520 <__kernel_rem_pio2f+0x1b0>
 8013514:	1e60      	subs	r0, r4, #1
 8013516:	a908      	add	r1, sp, #32
 8013518:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801351c:	11f6      	asrs	r6, r6, #7
 801351e:	e7c8      	b.n	80134b2 <__kernel_rem_pio2f+0x142>
 8013520:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013524:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801352c:	da31      	bge.n	8013592 <__kernel_rem_pio2f+0x222>
 801352e:	2600      	movs	r6, #0
 8013530:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013538:	f040 8098 	bne.w	801366c <__kernel_rem_pio2f+0x2fc>
 801353c:	1e60      	subs	r0, r4, #1
 801353e:	2200      	movs	r2, #0
 8013540:	4550      	cmp	r0, sl
 8013542:	da4b      	bge.n	80135dc <__kernel_rem_pio2f+0x26c>
 8013544:	2a00      	cmp	r2, #0
 8013546:	d065      	beq.n	8013614 <__kernel_rem_pio2f+0x2a4>
 8013548:	3c01      	subs	r4, #1
 801354a:	ab08      	add	r3, sp, #32
 801354c:	3d08      	subs	r5, #8
 801354e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d0f8      	beq.n	8013548 <__kernel_rem_pio2f+0x1d8>
 8013556:	4628      	mov	r0, r5
 8013558:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801355c:	f7ff fb52 	bl	8012c04 <scalbnf>
 8013560:	1c63      	adds	r3, r4, #1
 8013562:	aa44      	add	r2, sp, #272	@ 0x110
 8013564:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013664 <__kernel_rem_pio2f+0x2f4>
 8013568:	0099      	lsls	r1, r3, #2
 801356a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801356e:	4623      	mov	r3, r4
 8013570:	2b00      	cmp	r3, #0
 8013572:	f280 80a9 	bge.w	80136c8 <__kernel_rem_pio2f+0x358>
 8013576:	4623      	mov	r3, r4
 8013578:	2b00      	cmp	r3, #0
 801357a:	f2c0 80c7 	blt.w	801370c <__kernel_rem_pio2f+0x39c>
 801357e:	aa44      	add	r2, sp, #272	@ 0x110
 8013580:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013584:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801365c <__kernel_rem_pio2f+0x2ec>
 8013588:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 801358c:	2000      	movs	r0, #0
 801358e:	1ae2      	subs	r2, r4, r3
 8013590:	e0b1      	b.n	80136f6 <__kernel_rem_pio2f+0x386>
 8013592:	2602      	movs	r6, #2
 8013594:	e78f      	b.n	80134b6 <__kernel_rem_pio2f+0x146>
 8013596:	f852 1b04 	ldr.w	r1, [r2], #4
 801359a:	b948      	cbnz	r0, 80135b0 <__kernel_rem_pio2f+0x240>
 801359c:	b121      	cbz	r1, 80135a8 <__kernel_rem_pio2f+0x238>
 801359e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80135a2:	f842 1c04 	str.w	r1, [r2, #-4]
 80135a6:	2101      	movs	r1, #1
 80135a8:	f10e 0e01 	add.w	lr, lr, #1
 80135ac:	4608      	mov	r0, r1
 80135ae:	e787      	b.n	80134c0 <__kernel_rem_pio2f+0x150>
 80135b0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80135b4:	e7f5      	b.n	80135a2 <__kernel_rem_pio2f+0x232>
 80135b6:	f104 3cff 	add.w	ip, r4, #4294967295
 80135ba:	aa08      	add	r2, sp, #32
 80135bc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80135c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80135c4:	a908      	add	r1, sp, #32
 80135c6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80135ca:	e781      	b.n	80134d0 <__kernel_rem_pio2f+0x160>
 80135cc:	f104 3cff 	add.w	ip, r4, #4294967295
 80135d0:	aa08      	add	r2, sp, #32
 80135d2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80135d6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80135da:	e7f3      	b.n	80135c4 <__kernel_rem_pio2f+0x254>
 80135dc:	a908      	add	r1, sp, #32
 80135de:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80135e2:	3801      	subs	r0, #1
 80135e4:	430a      	orrs	r2, r1
 80135e6:	e7ab      	b.n	8013540 <__kernel_rem_pio2f+0x1d0>
 80135e8:	3201      	adds	r2, #1
 80135ea:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80135ee:	2e00      	cmp	r6, #0
 80135f0:	d0fa      	beq.n	80135e8 <__kernel_rem_pio2f+0x278>
 80135f2:	9905      	ldr	r1, [sp, #20]
 80135f4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80135f8:	eb0d 0001 	add.w	r0, sp, r1
 80135fc:	18e6      	adds	r6, r4, r3
 80135fe:	a91c      	add	r1, sp, #112	@ 0x70
 8013600:	f104 0c01 	add.w	ip, r4, #1
 8013604:	384c      	subs	r0, #76	@ 0x4c
 8013606:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801360a:	4422      	add	r2, r4
 801360c:	4562      	cmp	r2, ip
 801360e:	da04      	bge.n	801361a <__kernel_rem_pio2f+0x2aa>
 8013610:	4614      	mov	r4, r2
 8013612:	e710      	b.n	8013436 <__kernel_rem_pio2f+0xc6>
 8013614:	9804      	ldr	r0, [sp, #16]
 8013616:	2201      	movs	r2, #1
 8013618:	e7e7      	b.n	80135ea <__kernel_rem_pio2f+0x27a>
 801361a:	9903      	ldr	r1, [sp, #12]
 801361c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013620:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013624:	9105      	str	r1, [sp, #20]
 8013626:	ee07 1a90 	vmov	s15, r1
 801362a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801362e:	2400      	movs	r4, #0
 8013630:	ece6 7a01 	vstmia	r6!, {s15}
 8013634:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 8013638:	46b1      	mov	r9, r6
 801363a:	455c      	cmp	r4, fp
 801363c:	dd04      	ble.n	8013648 <__kernel_rem_pio2f+0x2d8>
 801363e:	ece0 7a01 	vstmia	r0!, {s15}
 8013642:	f10c 0c01 	add.w	ip, ip, #1
 8013646:	e7e1      	b.n	801360c <__kernel_rem_pio2f+0x29c>
 8013648:	ecfe 6a01 	vldmia	lr!, {s13}
 801364c:	ed39 7a01 	vldmdb	r9!, {s14}
 8013650:	3401      	adds	r4, #1
 8013652:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013656:	e7f0      	b.n	801363a <__kernel_rem_pio2f+0x2ca>
 8013658:	0801402c 	.word	0x0801402c
 801365c:	08014000 	.word	0x08014000
 8013660:	43800000 	.word	0x43800000
 8013664:	3b800000 	.word	0x3b800000
 8013668:	00000000 	.word	0x00000000
 801366c:	9b02      	ldr	r3, [sp, #8]
 801366e:	eeb0 0a48 	vmov.f32	s0, s16
 8013672:	eba3 0008 	sub.w	r0, r3, r8
 8013676:	f7ff fac5 	bl	8012c04 <scalbnf>
 801367a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013660 <__kernel_rem_pio2f+0x2f0>
 801367e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013686:	db19      	blt.n	80136bc <__kernel_rem_pio2f+0x34c>
 8013688:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013664 <__kernel_rem_pio2f+0x2f4>
 801368c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013690:	aa08      	add	r2, sp, #32
 8013692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013696:	3508      	adds	r5, #8
 8013698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801369c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80136a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136a4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136a8:	ee10 3a10 	vmov	r3, s0
 80136ac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80136b0:	ee17 3a90 	vmov	r3, s15
 80136b4:	3401      	adds	r4, #1
 80136b6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80136ba:	e74c      	b.n	8013556 <__kernel_rem_pio2f+0x1e6>
 80136bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136c0:	aa08      	add	r2, sp, #32
 80136c2:	ee10 3a10 	vmov	r3, s0
 80136c6:	e7f6      	b.n	80136b6 <__kernel_rem_pio2f+0x346>
 80136c8:	a808      	add	r0, sp, #32
 80136ca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80136ce:	9001      	str	r0, [sp, #4]
 80136d0:	ee07 0a90 	vmov	s15, r0
 80136d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136d8:	3b01      	subs	r3, #1
 80136da:	ee67 7a80 	vmul.f32	s15, s15, s0
 80136de:	ee20 0a07 	vmul.f32	s0, s0, s14
 80136e2:	ed62 7a01 	vstmdb	r2!, {s15}
 80136e6:	e743      	b.n	8013570 <__kernel_rem_pio2f+0x200>
 80136e8:	ecfc 6a01 	vldmia	ip!, {s13}
 80136ec:	ecb5 7a01 	vldmia	r5!, {s14}
 80136f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80136f4:	3001      	adds	r0, #1
 80136f6:	4550      	cmp	r0, sl
 80136f8:	dc01      	bgt.n	80136fe <__kernel_rem_pio2f+0x38e>
 80136fa:	4290      	cmp	r0, r2
 80136fc:	ddf4      	ble.n	80136e8 <__kernel_rem_pio2f+0x378>
 80136fe:	a858      	add	r0, sp, #352	@ 0x160
 8013700:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013704:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013708:	3b01      	subs	r3, #1
 801370a:	e735      	b.n	8013578 <__kernel_rem_pio2f+0x208>
 801370c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801370e:	2b02      	cmp	r3, #2
 8013710:	dc09      	bgt.n	8013726 <__kernel_rem_pio2f+0x3b6>
 8013712:	2b00      	cmp	r3, #0
 8013714:	dc27      	bgt.n	8013766 <__kernel_rem_pio2f+0x3f6>
 8013716:	d040      	beq.n	801379a <__kernel_rem_pio2f+0x42a>
 8013718:	f009 0007 	and.w	r0, r9, #7
 801371c:	b059      	add	sp, #356	@ 0x164
 801371e:	ecbd 8b04 	vpop	{d8-d9}
 8013722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013726:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013728:	2b03      	cmp	r3, #3
 801372a:	d1f5      	bne.n	8013718 <__kernel_rem_pio2f+0x3a8>
 801372c:	aa30      	add	r2, sp, #192	@ 0xc0
 801372e:	1f0b      	subs	r3, r1, #4
 8013730:	4413      	add	r3, r2
 8013732:	461a      	mov	r2, r3
 8013734:	4620      	mov	r0, r4
 8013736:	2800      	cmp	r0, #0
 8013738:	dc50      	bgt.n	80137dc <__kernel_rem_pio2f+0x46c>
 801373a:	4622      	mov	r2, r4
 801373c:	2a01      	cmp	r2, #1
 801373e:	dc5d      	bgt.n	80137fc <__kernel_rem_pio2f+0x48c>
 8013740:	ab30      	add	r3, sp, #192	@ 0xc0
 8013742:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 8013746:	440b      	add	r3, r1
 8013748:	2c01      	cmp	r4, #1
 801374a:	dc67      	bgt.n	801381c <__kernel_rem_pio2f+0x4ac>
 801374c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013750:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013754:	2e00      	cmp	r6, #0
 8013756:	d167      	bne.n	8013828 <__kernel_rem_pio2f+0x4b8>
 8013758:	edc7 6a00 	vstr	s13, [r7]
 801375c:	ed87 7a01 	vstr	s14, [r7, #4]
 8013760:	edc7 7a02 	vstr	s15, [r7, #8]
 8013764:	e7d8      	b.n	8013718 <__kernel_rem_pio2f+0x3a8>
 8013766:	ab30      	add	r3, sp, #192	@ 0xc0
 8013768:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 801376c:	440b      	add	r3, r1
 801376e:	4622      	mov	r2, r4
 8013770:	2a00      	cmp	r2, #0
 8013772:	da24      	bge.n	80137be <__kernel_rem_pio2f+0x44e>
 8013774:	b34e      	cbz	r6, 80137ca <__kernel_rem_pio2f+0x45a>
 8013776:	eef1 7a47 	vneg.f32	s15, s14
 801377a:	edc7 7a00 	vstr	s15, [r7]
 801377e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013786:	aa31      	add	r2, sp, #196	@ 0xc4
 8013788:	2301      	movs	r3, #1
 801378a:	429c      	cmp	r4, r3
 801378c:	da20      	bge.n	80137d0 <__kernel_rem_pio2f+0x460>
 801378e:	b10e      	cbz	r6, 8013794 <__kernel_rem_pio2f+0x424>
 8013790:	eef1 7a67 	vneg.f32	s15, s15
 8013794:	edc7 7a01 	vstr	s15, [r7, #4]
 8013798:	e7be      	b.n	8013718 <__kernel_rem_pio2f+0x3a8>
 801379a:	ab30      	add	r3, sp, #192	@ 0xc0
 801379c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013668 <__kernel_rem_pio2f+0x2f8>
 80137a0:	440b      	add	r3, r1
 80137a2:	2c00      	cmp	r4, #0
 80137a4:	da05      	bge.n	80137b2 <__kernel_rem_pio2f+0x442>
 80137a6:	b10e      	cbz	r6, 80137ac <__kernel_rem_pio2f+0x43c>
 80137a8:	eef1 7a67 	vneg.f32	s15, s15
 80137ac:	edc7 7a00 	vstr	s15, [r7]
 80137b0:	e7b2      	b.n	8013718 <__kernel_rem_pio2f+0x3a8>
 80137b2:	ed33 7a01 	vldmdb	r3!, {s14}
 80137b6:	3c01      	subs	r4, #1
 80137b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137bc:	e7f1      	b.n	80137a2 <__kernel_rem_pio2f+0x432>
 80137be:	ed73 7a01 	vldmdb	r3!, {s15}
 80137c2:	3a01      	subs	r2, #1
 80137c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80137c8:	e7d2      	b.n	8013770 <__kernel_rem_pio2f+0x400>
 80137ca:	eef0 7a47 	vmov.f32	s15, s14
 80137ce:	e7d4      	b.n	801377a <__kernel_rem_pio2f+0x40a>
 80137d0:	ecb2 7a01 	vldmia	r2!, {s14}
 80137d4:	3301      	adds	r3, #1
 80137d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137da:	e7d6      	b.n	801378a <__kernel_rem_pio2f+0x41a>
 80137dc:	ed72 7a01 	vldmdb	r2!, {s15}
 80137e0:	edd2 6a01 	vldr	s13, [r2, #4]
 80137e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80137e8:	3801      	subs	r0, #1
 80137ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137ee:	ed82 7a00 	vstr	s14, [r2]
 80137f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137f6:	edc2 7a01 	vstr	s15, [r2, #4]
 80137fa:	e79c      	b.n	8013736 <__kernel_rem_pio2f+0x3c6>
 80137fc:	ed73 7a01 	vldmdb	r3!, {s15}
 8013800:	edd3 6a01 	vldr	s13, [r3, #4]
 8013804:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013808:	3a01      	subs	r2, #1
 801380a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801380e:	ed83 7a00 	vstr	s14, [r3]
 8013812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013816:	edc3 7a01 	vstr	s15, [r3, #4]
 801381a:	e78f      	b.n	801373c <__kernel_rem_pio2f+0x3cc>
 801381c:	ed33 7a01 	vldmdb	r3!, {s14}
 8013820:	3c01      	subs	r4, #1
 8013822:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013826:	e78f      	b.n	8013748 <__kernel_rem_pio2f+0x3d8>
 8013828:	eef1 6a66 	vneg.f32	s13, s13
 801382c:	eeb1 7a47 	vneg.f32	s14, s14
 8013830:	edc7 6a00 	vstr	s13, [r7]
 8013834:	ed87 7a01 	vstr	s14, [r7, #4]
 8013838:	eef1 7a67 	vneg.f32	s15, s15
 801383c:	e790      	b.n	8013760 <__kernel_rem_pio2f+0x3f0>
 801383e:	bf00      	nop

08013840 <floor>:
 8013840:	ec51 0b10 	vmov	r0, r1, d0
 8013844:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801384c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013850:	2e13      	cmp	r6, #19
 8013852:	460c      	mov	r4, r1
 8013854:	4605      	mov	r5, r0
 8013856:	4680      	mov	r8, r0
 8013858:	dc34      	bgt.n	80138c4 <floor+0x84>
 801385a:	2e00      	cmp	r6, #0
 801385c:	da17      	bge.n	801388e <floor+0x4e>
 801385e:	a332      	add	r3, pc, #200	@ (adr r3, 8013928 <floor+0xe8>)
 8013860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013864:	f7ec fcde 	bl	8000224 <__adddf3>
 8013868:	2200      	movs	r2, #0
 801386a:	2300      	movs	r3, #0
 801386c:	f7ed f920 	bl	8000ab0 <__aeabi_dcmpgt>
 8013870:	b150      	cbz	r0, 8013888 <floor+0x48>
 8013872:	2c00      	cmp	r4, #0
 8013874:	da55      	bge.n	8013922 <floor+0xe2>
 8013876:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801387a:	432c      	orrs	r4, r5
 801387c:	2500      	movs	r5, #0
 801387e:	42ac      	cmp	r4, r5
 8013880:	4c2b      	ldr	r4, [pc, #172]	@ (8013930 <floor+0xf0>)
 8013882:	bf08      	it	eq
 8013884:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013888:	4621      	mov	r1, r4
 801388a:	4628      	mov	r0, r5
 801388c:	e023      	b.n	80138d6 <floor+0x96>
 801388e:	4f29      	ldr	r7, [pc, #164]	@ (8013934 <floor+0xf4>)
 8013890:	4137      	asrs	r7, r6
 8013892:	ea01 0307 	and.w	r3, r1, r7
 8013896:	4303      	orrs	r3, r0
 8013898:	d01d      	beq.n	80138d6 <floor+0x96>
 801389a:	a323      	add	r3, pc, #140	@ (adr r3, 8013928 <floor+0xe8>)
 801389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a0:	f7ec fcc0 	bl	8000224 <__adddf3>
 80138a4:	2200      	movs	r2, #0
 80138a6:	2300      	movs	r3, #0
 80138a8:	f7ed f902 	bl	8000ab0 <__aeabi_dcmpgt>
 80138ac:	2800      	cmp	r0, #0
 80138ae:	d0eb      	beq.n	8013888 <floor+0x48>
 80138b0:	2c00      	cmp	r4, #0
 80138b2:	bfbe      	ittt	lt
 80138b4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80138b8:	4133      	asrlt	r3, r6
 80138ba:	18e4      	addlt	r4, r4, r3
 80138bc:	ea24 0407 	bic.w	r4, r4, r7
 80138c0:	2500      	movs	r5, #0
 80138c2:	e7e1      	b.n	8013888 <floor+0x48>
 80138c4:	2e33      	cmp	r6, #51	@ 0x33
 80138c6:	dd0a      	ble.n	80138de <floor+0x9e>
 80138c8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80138cc:	d103      	bne.n	80138d6 <floor+0x96>
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	f7ec fca7 	bl	8000224 <__adddf3>
 80138d6:	ec41 0b10 	vmov	d0, r0, r1
 80138da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138de:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80138e2:	f04f 37ff 	mov.w	r7, #4294967295
 80138e6:	40df      	lsrs	r7, r3
 80138e8:	4207      	tst	r7, r0
 80138ea:	d0f4      	beq.n	80138d6 <floor+0x96>
 80138ec:	a30e      	add	r3, pc, #56	@ (adr r3, 8013928 <floor+0xe8>)
 80138ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f2:	f7ec fc97 	bl	8000224 <__adddf3>
 80138f6:	2200      	movs	r2, #0
 80138f8:	2300      	movs	r3, #0
 80138fa:	f7ed f8d9 	bl	8000ab0 <__aeabi_dcmpgt>
 80138fe:	2800      	cmp	r0, #0
 8013900:	d0c2      	beq.n	8013888 <floor+0x48>
 8013902:	2c00      	cmp	r4, #0
 8013904:	da0a      	bge.n	801391c <floor+0xdc>
 8013906:	2e14      	cmp	r6, #20
 8013908:	d101      	bne.n	801390e <floor+0xce>
 801390a:	3401      	adds	r4, #1
 801390c:	e006      	b.n	801391c <floor+0xdc>
 801390e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013912:	2301      	movs	r3, #1
 8013914:	40b3      	lsls	r3, r6
 8013916:	441d      	add	r5, r3
 8013918:	4545      	cmp	r5, r8
 801391a:	d3f6      	bcc.n	801390a <floor+0xca>
 801391c:	ea25 0507 	bic.w	r5, r5, r7
 8013920:	e7b2      	b.n	8013888 <floor+0x48>
 8013922:	2500      	movs	r5, #0
 8013924:	462c      	mov	r4, r5
 8013926:	e7af      	b.n	8013888 <floor+0x48>
 8013928:	8800759c 	.word	0x8800759c
 801392c:	7e37e43c 	.word	0x7e37e43c
 8013930:	bff00000 	.word	0xbff00000
 8013934:	000fffff 	.word	0x000fffff

08013938 <floorf>:
 8013938:	ee10 3a10 	vmov	r3, s0
 801393c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013940:	3a7f      	subs	r2, #127	@ 0x7f
 8013942:	2a16      	cmp	r2, #22
 8013944:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013948:	dc2b      	bgt.n	80139a2 <floorf+0x6a>
 801394a:	2a00      	cmp	r2, #0
 801394c:	da12      	bge.n	8013974 <floorf+0x3c>
 801394e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80139b4 <floorf+0x7c>
 8013952:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013956:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801395e:	dd06      	ble.n	801396e <floorf+0x36>
 8013960:	2b00      	cmp	r3, #0
 8013962:	da24      	bge.n	80139ae <floorf+0x76>
 8013964:	2900      	cmp	r1, #0
 8013966:	4b14      	ldr	r3, [pc, #80]	@ (80139b8 <floorf+0x80>)
 8013968:	bf08      	it	eq
 801396a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801396e:	ee00 3a10 	vmov	s0, r3
 8013972:	4770      	bx	lr
 8013974:	4911      	ldr	r1, [pc, #68]	@ (80139bc <floorf+0x84>)
 8013976:	4111      	asrs	r1, r2
 8013978:	420b      	tst	r3, r1
 801397a:	d0fa      	beq.n	8013972 <floorf+0x3a>
 801397c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80139b4 <floorf+0x7c>
 8013980:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013984:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398c:	ddef      	ble.n	801396e <floorf+0x36>
 801398e:	2b00      	cmp	r3, #0
 8013990:	bfbe      	ittt	lt
 8013992:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013996:	fa40 f202 	asrlt.w	r2, r0, r2
 801399a:	189b      	addlt	r3, r3, r2
 801399c:	ea23 0301 	bic.w	r3, r3, r1
 80139a0:	e7e5      	b.n	801396e <floorf+0x36>
 80139a2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80139a6:	d3e4      	bcc.n	8013972 <floorf+0x3a>
 80139a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80139ac:	4770      	bx	lr
 80139ae:	2300      	movs	r3, #0
 80139b0:	e7dd      	b.n	801396e <floorf+0x36>
 80139b2:	bf00      	nop
 80139b4:	7149f2ca 	.word	0x7149f2ca
 80139b8:	bf800000 	.word	0xbf800000
 80139bc:	007fffff 	.word	0x007fffff

080139c0 <_init>:
 80139c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139c2:	bf00      	nop
 80139c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139c6:	bc08      	pop	{r3}
 80139c8:	469e      	mov	lr, r3
 80139ca:	4770      	bx	lr

080139cc <_fini>:
 80139cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139ce:	bf00      	nop
 80139d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139d2:	bc08      	pop	{r3}
 80139d4:	469e      	mov	lr, r3
 80139d6:	4770      	bx	lr
