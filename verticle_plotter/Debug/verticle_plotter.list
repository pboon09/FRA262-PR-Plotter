
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ded4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800e0ac  0800e0ac  0000f0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4fc  0800e4fc  000101e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e4fc  0800e4fc  0000f4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e504  0800e504  000101e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e504  0800e504  0000f504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e508  0800e508  0000f508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800e50c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002074  200001e8  0800e6f4  000101e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000225c  0800e6f4  0001025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b25f  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051c8  00000000  00000000  0003b477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00040640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001583  00000000  00000000  000421f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d0a0  00000000  00000000  0004377b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f9e  00000000  00000000  0007081b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011998a  00000000  00000000  000997b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b3143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b84  00000000  00000000  001b3188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bad0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800e094 	.word	0x0800e094

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800e094 	.word	0x0800e094

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fefb 	bl	8006c34 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f004 ffe4 	bl	8005e18 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6178      	str	r0, [r7, #20]
 8000e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e6c:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]

}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3328      	adds	r3, #40	@ 0x28
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fd03 	bl	80028dc <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8b3a      	ldrh	r2, [r7, #24]
 8000ee0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f00:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d15f      	bne.n	8000fce <MDXX_set_range+0xda>
		if (duty == 0) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d115      	bne.n	8000f48 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3310      	adds	r3, #16
 8000f20:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f24:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fdfd 	bl	8002b28 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3328      	adds	r3, #40	@ 0x28
 8000f32:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f36:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fdf4 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = 0;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000f46:	e0a6      	b.n	8001096 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	dd1a      	ble.n	8000f8c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3310      	adds	r3, #16
 8000f5a:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fde0 	bl	8002b28 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3328      	adds	r3, #40	@ 0x28
 8000f6c:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f70:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 fdd7 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = duty;
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 2a90 	vmov	r2, s15
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f8a:	e084      	b.n	8001096 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3310      	adds	r3, #16
 8000f90:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80010a4 <MDXX_set_range+0x1b0>
 8000f94:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fdc5 	bl	8002b28 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3328      	adds	r3, #40	@ 0x28
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef0 7ae7 	vabs.f32	s15, s15
 8000faa:	eef0 0a67 	vmov.f32	s1, s15
 8000fae:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fdb8 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fcc:	e063      	b.n	8001096 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d15e      	bne.n	8001096 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d115      	bne.n	8001012 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f006 fd4c 	bl	8007a90 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3328      	adds	r3, #40	@ 0x28
 8000ffc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80010a0 <MDXX_set_range+0x1ac>
 8001000:	ed97 0a02 	vldr	s0, [r7, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f001 fd8f 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = 0;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001010:	e041      	b.n	8001096 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	dd1a      	ble.n	8001056 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f006 fd2f 	bl	8007a90 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3328      	adds	r3, #40	@ 0x28
 8001036:	edd7 0a01 	vldr	s1, [r7, #4]
 800103a:	ed97 0a02 	vldr	s0, [r7, #8]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fd72 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = duty;
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001054:	e01f      	b.n	8001096 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f006 fd14 	bl	8007a90 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3328      	adds	r3, #40	@ 0x28
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	eef0 7ae7 	vabs.f32	s15, s15
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	ed97 0a02 	vldr	s0, [r7, #8]
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fd53 	bl	8002b28 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108e:	ee17 2a90 	vmov	r2, s15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	00000000 	.word	0x00000000
 80010a4:	42c80000 	.word	0x42c80000

080010a8 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001128:	b580      	push	{r7, lr}
 800112a:	ed2d 8b02 	vpush	{d8}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	460b      	mov	r3, r1
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
 800113a:	edc7 0a00 	vstr	s1, [r7]
 800113e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001140:	897b      	ldrh	r3, [r7, #10]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <FIR_init+0x2a>
        numTaps += 1;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	3301      	adds	r3, #1
 8001150:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	897a      	ldrh	r2, [r7, #10]
 8001156:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800115e:	897b      	ldrh	r3, [r7, #10]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f00c f8f8 	bl	800d358 <malloc>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f00c f8ef 	bl	800d358 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80e0 	beq.w	800134c <FIR_init+0x224>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80db 	beq.w	800134c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800119a:	e00a      	b.n	80011b2 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 80011ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ae:	3301      	adds	r3, #1
 80011b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80011b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3f0      	bcc.n	800119c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 80011ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80011be:	ed97 7a00 	vldr	s14, [r7]
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80011d6:	e077      	b.n	80012c8 <FIR_init+0x1a0>
            if (i == half_taps) {
 80011d8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80011dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10c      	bne.n	80011fe <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f8:	edc3 7a00 	vstr	s15, [r3]
 80011fc:	e02c      	b.n	8001258 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80011fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001200:	8afb      	ldrh	r3, [r7, #22]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001208:	edd7 7a06 	vldr	s15, [r7, #24]
 800120c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001358 <FIR_init+0x230>
 8001210:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	f00c fa00 	bl	800d62c <sinf>
 800122c:	eef0 6a40 	vmov.f32	s13, s0
 8001230:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800135c <FIR_init+0x234>
 8001240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	ed93 8a00 	vldr	s16, [r3]
 8001268:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001358 <FIR_init+0x230>
 8001278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	3b01      	subs	r3, #1
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800128c:	eeb0 0a66 	vmov.f32	s0, s13
 8001290:	f00c f988 	bl	800d5a4 <cosf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001360 <FIR_init+0x238>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001364 <FIR_init+0x23c>
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012b8:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 80012bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012c8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	db82      	blt.n	80011d8 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	83fb      	strh	r3, [r7, #30]
 80012dc:	e00f      	b.n	80012fe <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	8bfb      	ldrh	r3, [r7, #30]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80012f8:	8bfb      	ldrh	r3, [r7, #30]
 80012fa:	3301      	adds	r3, #1
 80012fc:	83fb      	strh	r3, [r7, #30]
 80012fe:	8bfa      	ldrh	r2, [r7, #30]
 8001300:	897b      	ldrh	r3, [r7, #10]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3eb      	bcc.n	80012de <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d01b      	beq.n	800134c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	83bb      	strh	r3, [r7, #28]
 8001318:	e014      	b.n	8001344 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	8bbb      	ldrh	r3, [r7, #28]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	ed97 7a08 	vldr	s14, [r7, #32]
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800133e:	8bbb      	ldrh	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	83bb      	strh	r3, [r7, #28]
 8001344:	8bba      	ldrh	r2, [r7, #28]
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3e6      	bcc.n	800131a <FIR_init+0x1f2>
            }
        }
    }
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	ecbd 8b02 	vpop	{d8}
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40c90fdb 	.word	0x40c90fdb
 800135c:	40490fdb 	.word	0x40490fdb
 8001360:	3eeb851f 	.word	0x3eeb851f
 8001364:	3f0a3d71 	.word	0x3f0a3d71

08001368 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000204 	.word	0x20000204

080013a8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <modbus_3t5_Timeout+0x1c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	755a      	strb	r2, [r3, #21]

}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000204 	.word	0x20000204

080013c8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f00a fa07 	bl	800b7e4 <HAL_UART_GetError>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d101      	bne.n	80013e0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80013dc:	f7ff ffc4 	bl	8001368 <modbus_1t5_Timeout>

	}
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80013f6:	4a2d      	ldr	r2, [pc, #180]	@ (80014ac <Modbus_init+0xc4>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <Modbus_init+0xc4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <Modbus_init+0xc4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <Modbus_init+0xc4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <Modbus_init+0xc4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7e3a      	ldrb	r2, [r7, #24]
 800141a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <Modbus_init+0xc4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <Modbus_init+0xc8>)
 800142a:	210e      	movs	r1, #14
 800142c:	4618      	mov	r0, r3
 800142e:	f008 fc87 	bl	8009d40 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2110      	movs	r1, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f00a f97d 	bl	800b738 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f00a f994 	bl	800b770 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <Modbus_init+0xcc>)
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f009 fcc5 	bl	800ade0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <Modbus_init+0xc4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <Modbus_init+0xc4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <Modbus_init+0xc4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001468:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800146c:	4413      	add	r3, r2
 800146e:	3302      	adds	r3, #2
 8001470:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001474:	4619      	mov	r1, r3
 8001476:	f009 fd6d 	bl	800af54 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <Modbus_init+0xc4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10c      	bne.n	80014a4 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <Modbus_init+0xc4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4618      	mov	r0, r3
 8001492:	f007 fc31 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <Modbus_init+0xc4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 fe80 	bl	80091a4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000204 	.word	0x20000204
 80014b0:	080013a9 	.word	0x080013a9
 80014b4:	080013c9 	.word	0x080013c9

080014b8 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6278      	str	r0, [r7, #36]	@ 0x24
 80014c0:	ed87 0a08 	vstr	s0, [r7, #32]
 80014c4:	edc7 0a07 	vstr	s1, [r7, #28]
 80014c8:	ed87 1a06 	vstr	s2, [r7, #24]
 80014cc:	edc7 1a05 	vstr	s3, [r7, #20]
 80014d0:	ed87 2a04 	vstr	s4, [r7, #16]
 80014d4:	edc7 2a03 	vstr	s5, [r7, #12]
 80014d8:	ed87 3a02 	vstr	s6, [r7, #8]
 80014dc:	edc7 3a01 	vstr	s7, [r7, #4]
 80014e0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	6a3a      	ldr	r2, [r7, #32]
 80014e8:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	2210      	movs	r2, #16
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f00b ffce 	bl	800d4c4 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	3310      	adds	r3, #16
 800152c:	2240      	movs	r2, #64	@ 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00b ffc7 	bl	800d4c4 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800153a:	e00c      	b.n	8001556 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 800153c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	3304      	adds	r3, #4
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	4a7b      	ldr	r2, [pc, #492]	@ (800173c <MotorKalman_Init+0x284>)
 800154e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001552:	3301      	adds	r3, #1
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001558:	2b03      	cmp	r3, #3
 800155a:	ddef      	ble.n	800153c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00b ffac 	bl	800d4c4 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	e00d      	b.n	800158e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	33be      	adds	r3, #190	@ 0xbe
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001586:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158a:	3301      	adds	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	2b03      	cmp	r3, #3
 8001592:	ddee      	ble.n	8001572 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	33f0      	adds	r3, #240	@ 0xf0
 8001598:	2210      	movs	r2, #16
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f00b ff91 	bl	800d4c4 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015a8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00b ff84 	bl	800d4c4 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015c2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    // Default measurement configuration - only position
    filter->use_position_measurement = 1;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 236c 	strb.w	r2, [r3, #876]	@ 0x36c

    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80015ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80015d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015d4:	f000 f922 	bl	800181c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80015d8:	ed97 0a00 	vldr	s0, [r7]
 80015dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015de:	f000 f94d 	bl	800187c <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	2201      	movs	r2, #1
 80015ec:	2104      	movs	r1, #4
 80015ee:	f00b f9f8 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80015f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fa:	3310      	adds	r3, #16
 80015fc:	2204      	movs	r2, #4
 80015fe:	2104      	movs	r1, #4
 8001600:	f00b f9ef 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001610:	2204      	movs	r2, #4
 8001612:	2104      	movs	r1, #4
 8001614:	f00b f9e5 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001624:	2201      	movs	r2, #1
 8001626:	2101      	movs	r1, #1
 8001628:	f00b f9db 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001638:	2201      	movs	r2, #1
 800163a:	2101      	movs	r1, #1
 800163c:	f00b f9d1 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800164c:	2201      	movs	r2, #1
 800164e:	2101      	movs	r1, #1
 8001650:	f00b f9c7 	bl	800c9e2 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001660:	2204      	movs	r2, #4
 8001662:	2104      	movs	r1, #4
 8001664:	f00b f9bd 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001674:	2201      	movs	r2, #1
 8001676:	2104      	movs	r1, #4
 8001678:	f00b f9b3 	bl	800c9e2 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001688:	2201      	movs	r2, #1
 800168a:	2104      	movs	r1, #4
 800168c:	f00b f9a9 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001692:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001698:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 800169c:	2204      	movs	r2, #4
 800169e:	2104      	movs	r1, #4
 80016a0:	f00b f99f 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80016aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ac:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80016b0:	2204      	movs	r2, #4
 80016b2:	2101      	movs	r1, #1
 80016b4:	f00b f995 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ba:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80016be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c0:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80016c4:	2201      	movs	r2, #1
 80016c6:	2101      	movs	r1, #1
 80016c8:	f00b f98b 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80016d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d4:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80016d8:	2201      	movs	r2, #1
 80016da:	2104      	movs	r1, #4
 80016dc:	f00b f981 	bl	800c9e2 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80016e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80016e2:	f000 f82d 	bl	8001740 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e8:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	3390      	adds	r3, #144	@ 0x90
 80016f0:	2204      	movs	r2, #4
 80016f2:	2104      	movs	r1, #4
 80016f4:	f00b f975 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	33e0      	adds	r3, #224	@ 0xe0
 8001702:	2201      	movs	r2, #1
 8001704:	2104      	movs	r1, #4
 8001706:	f00b f96c 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001716:	2204      	movs	r2, #4
 8001718:	2104      	movs	r1, #4
 800171a:	f00b f962 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800172a:	2201      	movs	r2, #1
 800172c:	2104      	movs	r1, #4
 800172e:	f00b f958 	bl	800c9e2 <arm_mat_init_f32>
}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	@ 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	42c80000 	.word	0x42c80000

08001740 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	eeb0 3a64 	vmov.f32	s6, s9
 8001784:	eef0 2a45 	vmov.f32	s5, s10
 8001788:	eeb0 2a65 	vmov.f32	s4, s11
 800178c:	eef0 1a46 	vmov.f32	s3, s12
 8001790:	eeb0 1a66 	vmov.f32	s2, s13
 8001794:	eef0 0a47 	vmov.f32	s1, s14
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f001 f836 	bl	800280c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017a6:	2240      	movs	r2, #64	@ 0x40
 80017a8:	2100      	movs	r1, #0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f00b fe8a 	bl	800d4c4 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80017b6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001814 <MotorKalman_DiscretizeModel+0xd4>
 80017ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80017c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80017da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80017ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001818 <MotorKalman_DiscretizeModel+0xd8>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80017fe:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001814 <MotorKalman_DiscretizeModel+0xd4>
 8001802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	3c23d70a 	.word	0x3c23d70a
 8001818:	3dcccccd 	.word	0x3dcccccd

0800181c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800182e:	2240      	movs	r2, #64	@ 0x40
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f00b fe46 	bl	800d4c4 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001838:	edd7 7a00 	vldr	s15, [r7]
 800183c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001854:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	d107      	bne.n	800186e <MotorKalman_SetProcessNoise+0x52>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001864:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186c:	d002      	beq.n	8001874 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff66 	bl	8001740 <MotorKalman_DiscretizeModel>
    }
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001888:	ed97 0a00 	vldr	s0, [r7]
 800188c:	f00b fe6c 	bl	800d568 <sqrtf>
 8001890:	eef0 7a40 	vmov.f32	s15, s0
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b0b2      	sub	sp, #200	@ 0xc8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80018be:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80018cc:	2300      	movs	r3, #0
 80018ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80018d2:	e041      	b.n	8001958 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80018d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	33c8      	adds	r3, #200	@ 0xc8
 80018dc:	443b      	add	r3, r7
 80018de:	3b3c      	subs	r3, #60	@ 0x3c
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80018ec:	e02b      	b.n	8001946 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 80018ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	33c8      	adds	r3, #200	@ 0xc8
 80018f6:	443b      	add	r3, r7
 80018f8:	3b3c      	subs	r3, #60	@ 0x3c
 80018fa:	ed93 7a00 	vldr	s14, [r3]
 80018fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001902:	009a      	lsls	r2, r3, #2
 8001904:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001908:	4413      	add	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	3324      	adds	r3, #36	@ 0x24
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	edd3 6a00 	vldr	s13, [r3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	edd3 7a00 	vldr	s15, [r3]
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	33c8      	adds	r3, #200	@ 0xc8
 8001934:	443b      	add	r3, r7
 8001936:	3b3c      	subs	r3, #60	@ 0x3c
 8001938:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800193c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001940:	3301      	adds	r3, #1
 8001942:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800194a:	2b03      	cmp	r3, #3
 800194c:	ddcf      	ble.n	80018ee <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800194e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001952:	3301      	adds	r3, #1
 8001954:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800195c:	2b03      	cmp	r3, #3
 800195e:	ddb9      	ble.n	80018d4 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001966:	e021      	b.n	80019ac <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8001968:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	33c8      	adds	r3, #200	@ 0xc8
 8001970:	443b      	add	r3, r7
 8001972:	3b3c      	subs	r3, #60	@ 0x3c
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800197e:	3338      	adds	r3, #56	@ 0x38
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	edd3 6a00 	vldr	s13, [r3]
 8001988:	edd7 7a00 	vldr	s15, [r7]
 800198c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80019a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019a6:	3301      	adds	r3, #1
 80019a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80019ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	ddd9      	ble.n	8001968 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80019b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80019b8:	2240      	movs	r2, #64	@ 0x40
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f00b fd81 	bl	800d4c4 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80019c2:	f107 030c 	add.w	r3, r7, #12
 80019c6:	2240      	movs	r2, #64	@ 0x40
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f00b fd7a 	bl	800d4c4 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80019d6:	e05f      	b.n	8001a98 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019de:	e052      	b.n	8001a86 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80019e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	33c8      	adds	r3, #200	@ 0xc8
 80019f0:	443b      	add	r3, r7
 80019f2:	3b7c      	subs	r3, #124	@ 0x7c
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a00:	e038      	b.n	8001a74 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a06:	009a      	lsls	r2, r3, #2
 8001a08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	33c8      	adds	r3, #200	@ 0xc8
 8001a12:	443b      	add	r3, r7
 8001a14:	3b7c      	subs	r3, #124	@ 0x7c
 8001a16:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8001a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a1e:	009a      	lsls	r2, r3, #2
 8001a20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a24:	4413      	add	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	3324      	adds	r3, #36	@ 0x24
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	edd3 6a00 	vldr	s13, [r3]
 8001a32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a36:	009a      	lsls	r2, r3, #2
 8001a38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	3304      	adds	r3, #4
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001a4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a58:	4413      	add	r3, r2
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	33c8      	adds	r3, #200	@ 0xc8
 8001a62:	443b      	add	r3, r7
 8001a64:	3b7c      	subs	r3, #124	@ 0x7c
 8001a66:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001a6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	ddc2      	ble.n	8001a02 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001a7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a80:	3301      	adds	r3, #1
 8001a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	dda8      	ble.n	80019e0 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001a8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	dd9b      	ble.n	80019d8 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001aa6:	e05f      	b.n	8001b68 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001aae:	e052      	b.n	8001b56 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8001ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ab4:	009a      	lsls	r2, r3, #2
 8001ab6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	33c8      	adds	r3, #200	@ 0xc8
 8001ac0:	443b      	add	r3, r7
 8001ac2:	3bbc      	subs	r3, #188	@ 0xbc
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001ad0:	e038      	b.n	8001b44 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ad6:	009a      	lsls	r2, r3, #2
 8001ad8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	33c8      	adds	r3, #200	@ 0xc8
 8001ae2:	443b      	add	r3, r7
 8001ae4:	3bbc      	subs	r3, #188	@ 0xbc
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8001aea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001af4:	4413      	add	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	33c8      	adds	r3, #200	@ 0xc8
 8001afa:	443b      	add	r3, r7
 8001afc:	3b7c      	subs	r3, #124	@ 0x7c
 8001afe:	edd3 6a00 	vldr	s13, [r3]
 8001b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b06:	009a      	lsls	r2, r3, #2
 8001b08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b0c:	4413      	add	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	3324      	adds	r3, #36	@ 0x24
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8001b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b22:	009a      	lsls	r2, r3, #2
 8001b24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b28:	4413      	add	r3, r2
 8001b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	33c8      	adds	r3, #200	@ 0xc8
 8001b32:	443b      	add	r3, r7
 8001b34:	3bbc      	subs	r3, #188	@ 0xbc
 8001b36:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8001b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b3e:	3301      	adds	r3, #1
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8001b44:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	ddc2      	ble.n	8001ad2 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001b4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b50:	3301      	adds	r3, #1
 8001b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	dda8      	ble.n	8001ab0 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	dd9b      	ble.n	8001aa8 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b76:	e037      	b.n	8001be8 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b7e:	e02a      	b.n	8001bd6 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001b80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b84:	009a      	lsls	r2, r3, #2
 8001b86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	33c8      	adds	r3, #200	@ 0xc8
 8001b90:	443b      	add	r3, r7
 8001b92:	3bbc      	subs	r3, #188	@ 0xbc
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ba2:	4413      	add	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	3354      	adds	r3, #84	@ 0x54
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001bb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bb4:	009a      	lsls	r2, r3, #2
 8001bb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bba:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001bd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	ddd0      	ble.n	8001b80 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001be2:	3301      	adds	r3, #1
 8001be4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001be8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	ddc3      	ble.n	8001b78 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68da      	ldr	r2, [r3, #12]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	2104      	movs	r1, #4
 8001c24:	f00a fedd 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3310      	adds	r3, #16
 8001c32:	2204      	movs	r2, #4
 8001c34:	2104      	movs	r1, #4
 8001c36:	f00a fed4 	bl	800c9e2 <arm_mat_init_f32>
}
 8001c3a:	bf00      	nop
 8001c3c:	37c8      	adds	r7, #200	@ 0xc8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0d0      	sub	sp, #320	@ 0x140
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c4e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c52:	6018      	str	r0, [r3, #0]
 8001c54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001c5c:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8001c60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001c6e:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8001c78:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8001c86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c8a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001c9c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8001ca6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001caa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8001cb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8001cbc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001cc0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8001cca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001cce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8001cdc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8001ce0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ce4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8001cee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001cf2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8001d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d0c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001d10:	ed93 7a00 	vldr	s14, [r3]
 8001d14:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8001d20:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001d34:	e04d      	b.n	8001dd2 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8001d36:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001d40:	443b      	add	r3, r7
 8001d42:	3b58      	subs	r3, #88	@ 0x58
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001d50:	e036      	b.n	8001dc0 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8001d52:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001d5c:	443b      	add	r3, r7
 8001d5e:	3b58      	subs	r3, #88	@ 0x58
 8001d60:	ed93 7a00 	vldr	s14, [r3]
 8001d64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d72:	333c      	adds	r3, #60	@ 0x3c
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	edd3 6a00 	vldr	s13, [r3]
 8001d7c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001d80:	009a      	lsls	r2, r3, #2
 8001d82:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001d86:	4413      	add	r3, r2
 8001d88:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001d8c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	3304      	adds	r3, #4
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001dae:	443b      	add	r3, r7
 8001db0:	3b58      	subs	r3, #88	@ 0x58
 8001db2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001db6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001dba:	3301      	adds	r3, #1
 8001dbc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001dc0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	ddc4      	ble.n	8001d52 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001dc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8001dd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	ddad      	ble.n	8001d36 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8001dda:	f04f 0300 	mov.w	r3, #0
 8001dde:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001de8:	e021      	b.n	8001e2e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8001dea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001df4:	443b      	add	r3, r7
 8001df6:	3b58      	subs	r3, #88	@ 0x58
 8001df8:	ed93 7a00 	vldr	s14, [r3]
 8001dfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e00:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e0a:	333c      	adds	r3, #60	@ 0x3c
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e18:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001e2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	ddd9      	ble.n	8001dea <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8001e36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e3a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8001e44:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8001e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4c:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8001e50:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001e64:	e04d      	b.n	8001f02 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8001e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001e70:	443b      	add	r3, r7
 8001e72:	3b68      	subs	r3, #104	@ 0x68
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001e80:	e036      	b.n	8001ef0 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8001e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001e8c:	443b      	add	r3, r7
 8001e8e:	3b68      	subs	r3, #104	@ 0x68
 8001e90:	ed93 7a00 	vldr	s14, [r3]
 8001e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001e98:	009a      	lsls	r2, r3, #2
 8001e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8001ea4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	edd3 6a00 	vldr	s13, [r3]
 8001eb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001eb8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ec2:	333c      	adds	r3, #60	@ 0x3c
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001ede:	443b      	add	r3, r7
 8001ee0:	3b68      	subs	r3, #104	@ 0x68
 8001ee2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001eea:	3301      	adds	r3, #1
 8001eec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001ef0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	ddc4      	ble.n	8001e82 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001efc:	3301      	adds	r3, #1
 8001efe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	ddad      	ble.n	8001e66 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8001f0a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f1e:	e01a      	b.n	8001f56 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8001f20:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001f2a:	443b      	add	r3, r7
 8001f2c:	3b68      	subs	r3, #104	@ 0x68
 8001f2e:	edd3 6a00 	vldr	s13, [r3]
 8001f32:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8001f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001f44:	443b      	add	r3, r7
 8001f46:	3b78      	subs	r3, #120	@ 0x78
 8001f48:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f50:	3301      	adds	r3, #1
 8001f52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001f56:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	dde0      	ble.n	8001f20 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001f64:	e029      	b.n	8001fba <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8001f66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f6a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4413      	add	r3, r2
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001f86:	443b      	add	r3, r7
 8001f88:	3b78      	subs	r3, #120	@ 0x78
 8001f8a:	edd3 6a00 	vldr	s13, [r3]
 8001f8e:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8001f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001fba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	ddd1      	ble.n	8001f66 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8001fc2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001fc6:	2240      	movs	r2, #64	@ 0x40
 8001fc8:	2100      	movs	r1, #0
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f00b fa7a 	bl	800d4c4 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001fd6:	e035      	b.n	8002044 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001fde:	e028      	b.n	8002032 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8001fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001fea:	443b      	add	r3, r7
 8001fec:	3b78      	subs	r3, #120	@ 0x78
 8001fee:	ed93 7a00 	vldr	s14, [r3]
 8001ff2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ff6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002000:	333c      	adds	r3, #60	@ 0x3c
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800200e:	009a      	lsls	r2, r3, #2
 8002010:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002014:	4413      	add	r3, r2
 8002016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002020:	443b      	add	r3, r7
 8002022:	3bb8      	subs	r3, #184	@ 0xb8
 8002024:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002028:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800202c:	3301      	adds	r3, #1
 800202e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002032:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002036:	2b03      	cmp	r3, #3
 8002038:	ddd2      	ble.n	8001fe0 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800203a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800203e:	3301      	adds	r3, #1
 8002040:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002044:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002048:	2b03      	cmp	r3, #3
 800204a:	ddc5      	ble.n	8001fd8 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800204c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002050:	2240      	movs	r2, #64	@ 0x40
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f00b fa35 	bl	800d4c4 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800205a:	2300      	movs	r3, #0
 800205c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002060:	e038      	b.n	80020d4 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002068:	e02b      	b.n	80020c2 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 800206a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800206e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002072:	429a      	cmp	r2, r3
 8002074:	d102      	bne.n	800207c <MotorKalman_Update+0x438>
 8002076:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800207a:	e001      	b.n	8002080 <MotorKalman_Update+0x43c>
 800207c:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002298 <MotorKalman_Update+0x654>
 8002080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002084:	009a      	lsls	r2, r3, #2
 8002086:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002092:	443b      	add	r3, r7
 8002094:	3bb8      	subs	r3, #184	@ 0xb8
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800209e:	009a      	lsls	r2, r3, #2
 80020a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020a4:	4413      	add	r3, r2
 80020a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80020b0:	443b      	add	r3, r7
 80020b2:	3bf8      	subs	r3, #248	@ 0xf8
 80020b4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80020b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020bc:	3301      	adds	r3, #1
 80020be:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80020c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	ddcf      	ble.n	800206a <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020ce:	3301      	adds	r3, #1
 80020d0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80020d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80020d8:	2b03      	cmp	r3, #3
 80020da:	ddc2      	ble.n	8002062 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80020dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80020e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f103 0110 	add.w	r1, r3, #16
 80020ea:	f107 0308 	add.w	r3, r7, #8
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00b fa2b 	bl	800d54c <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80020fc:	e06e      	b.n	80021dc <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80020fe:	2300      	movs	r3, #0
 8002100:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002104:	e061      	b.n	80021ca <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800210a:	009a      	lsls	r2, r3, #2
 800210c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002110:	4413      	add	r3, r2
 8002112:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002116:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	3304      	adds	r3, #4
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800212e:	e043      	b.n	80021b8 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002130:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002134:	009a      	lsls	r2, r3, #2
 8002136:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800213a:	4413      	add	r3, r2
 800213c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002140:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	3304      	adds	r3, #4
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002154:	009a      	lsls	r2, r3, #2
 8002156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002162:	443b      	add	r3, r7
 8002164:	3bf8      	subs	r3, #248	@ 0xf8
 8002166:	edd3 6a00 	vldr	s13, [r3]
 800216a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800216e:	009a      	lsls	r2, r3, #2
 8002170:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002174:	4413      	add	r3, r2
 8002176:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800217a:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800218a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002194:	4413      	add	r3, r2
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800219e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80021a2:	6812      	ldr	r2, [r2, #0]
 80021a4:	3304      	adds	r3, #4
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80021ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021b2:	3301      	adds	r3, #1
 80021b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80021b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80021bc:	2b03      	cmp	r3, #3
 80021be:	ddb7      	ble.n	8002130 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80021c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021c4:	3301      	adds	r3, #1
 80021c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80021ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80021ce:	2b03      	cmp	r3, #3
 80021d0:	dd99      	ble.n	8002106 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80021d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021d6:	3301      	adds	r3, #1
 80021d8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80021dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	dd8c      	ble.n	80020fe <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80021e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80021f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80021fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002202:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800220e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002218:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800221c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002228:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002232:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002236:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002242:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800224c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002250:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 800225a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800225e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2201      	movs	r2, #1
 8002266:	2104      	movs	r1, #4
 8002268:	f00a fbbb 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800226c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002270:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800227a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800227e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3310      	adds	r3, #16
 8002286:	2204      	movs	r2, #4
 8002288:	2104      	movs	r1, #4
 800228a:	f00a fbaa 	bl	800c9e2 <arm_mat_init_f32>
}
 800228e:	bf00      	nop
 8002290:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	00000000 	.word	0x00000000

0800229c <MotorKalman_Estimate>:

float32_t MotorKalman_GetCurrent(MotorKalman* filter) {
    return filter->X[3];
}

void MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80022a8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 80022ac:	ed97 0a02 	vldr	s0, [r7, #8]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f7ff fafa 	bl	80018aa <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 80022b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f7ff fcc2 	bl	8001c44 <MotorKalman_Update>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80022c8:	b480      	push	{r7}
 80022ca:	b087      	sub	sp, #28
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	e00c      	b.n	80022f4 <matrix_copy+0x2c>
        dst[i] = src[i];
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	441a      	add	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	68b9      	ldr	r1, [r7, #8]
 80022e8:	440b      	add	r3, r1
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	3301      	adds	r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	dbee      	blt.n	80022da <matrix_copy+0x12>
    }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002312:	af00      	add	r7, sp, #0
 8002314:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002318:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 800231c:	6020      	str	r0, [r4, #0]
 800231e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002322:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002326:	6001      	str	r1, [r0, #0]
 8002328:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 800232c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002330:	ed81 0a00 	vstr	s0, [r1]
 8002334:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002338:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 800233c:	600a      	str	r2, [r1, #0]
 800233e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002342:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002346:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002348:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800234c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002350:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2204      	movs	r2, #4
 8002358:	2104      	movs	r1, #4
 800235a:	f00a fb42 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 800235e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002362:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002366:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2204      	movs	r2, #4
 800236e:	2104      	movs	r1, #4
 8002370:	f00a fb37 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002374:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002378:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800237c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	2104      	movs	r1, #4
 8002386:	f00a fb2c 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800238a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800238e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002392:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	2104      	movs	r1, #4
 800239c:	f00a fb21 	bl	800c9e2 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 80023a0:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80023a4:	2240      	movs	r2, #64	@ 0x40
 80023a6:	2100      	movs	r1, #0
 80023a8:	4618      	mov	r0, r3
 80023aa:	f00b f88b 	bl	800d4c4 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 80023ae:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 80023b2:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 80023b6:	2204      	movs	r2, #4
 80023b8:	2104      	movs	r1, #4
 80023ba:	f00a fb12 	bl	800c9e2 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80023c4:	e011      	b.n	80023ea <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 80023c6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80023d6:	443b      	add	r3, r7
 80023d8:	3b6c      	subs	r3, #108	@ 0x6c
 80023da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80023de:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80023e0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80023e4:	3301      	adds	r3, #1
 80023e6:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80023ea:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	dde9      	ble.n	80023c6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80023f2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80023f6:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80023fa:	2204      	movs	r2, #4
 80023fc:	2104      	movs	r1, #4
 80023fe:	f00a faf0 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002402:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002406:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800240a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800240e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002412:	ed93 0a00 	vldr	s0, [r3]
 8002416:	4610      	mov	r0, r2
 8002418:	f00a feec 	bl	800d1f4 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 800241c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002420:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002424:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002428:	2210      	movs	r2, #16
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	f7ff ff4c 	bl	80022c8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002430:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002434:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002438:	2204      	movs	r2, #4
 800243a:	2104      	movs	r1, #4
 800243c:	f00a fad1 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002440:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002444:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002448:	2204      	movs	r2, #4
 800244a:	2104      	movs	r1, #4
 800244c:	f00a fac9 	bl	800c9e2 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002450:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002454:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002458:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 800245c:	4618      	mov	r0, r3
 800245e:	f00a fa85 	bl	800c96c <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002462:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002466:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800246a:	2210      	movs	r2, #16
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff ff2b 	bl	80022c8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002472:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002476:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800247a:	2302      	movs	r3, #2
 800247c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002480:	e03a      	b.n	80024f8 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002482:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002486:	ee07 3a90 	vmov	s15, r3
 800248a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248e:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002496:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800249a:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800249e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80024a2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80024a6:	4618      	mov	r0, r3
 80024a8:	f00a fe2a 	bl	800d100 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 80024ac:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80024b0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80024b4:	2210      	movs	r2, #16
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff ff06 	bl	80022c8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 80024bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024c0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 80024c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80024cc:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80024d0:	4611      	mov	r1, r2
 80024d2:	eeb0 0a47 	vmov.f32	s0, s14
 80024d6:	4618      	mov	r0, r3
 80024d8:	f00a fe8c 	bl	800d1f4 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 80024dc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80024e0:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 80024e4:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a fa3f 	bl	800c96c <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80024ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80024f2:	3301      	adds	r3, #1
 80024f4:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80024f8:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80024fc:	2b0a      	cmp	r3, #10
 80024fe:	ddc0      	ble.n	8002482 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002500:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002504:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002508:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800250c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002510:	ed93 0a00 	vldr	s0, [r3]
 8002514:	4610      	mov	r0, r2
 8002516:	f00a fe6d 	bl	800d1f4 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800251a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800251e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002522:	461a      	mov	r2, r3
 8002524:	2300      	movs	r3, #0
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	6053      	str	r3, [r2, #4]
 800252a:	6093      	str	r3, [r2, #8]
 800252c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800252e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002532:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002536:	2201      	movs	r2, #1
 8002538:	2104      	movs	r1, #4
 800253a:	f00a fa52 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 800253e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002542:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002546:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800254a:	4618      	mov	r0, r3
 800254c:	f00a fdd8 	bl	800d100 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002550:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002554:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002558:	2201      	movs	r2, #1
 800255a:	2104      	movs	r1, #4
 800255c:	f00a fa41 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002560:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002564:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002570:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002574:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002578:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800257c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002580:	4611      	mov	r1, r2
 8002582:	eeb0 0a47 	vmov.f32	s0, s14
 8002586:	4618      	mov	r0, r3
 8002588:	f00a fe34 	bl	800d1f4 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800258c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002590:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002594:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002598:	4618      	mov	r0, r3
 800259a:	f00a f9e7 	bl	800c96c <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800259e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80025a2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80025a6:	4618      	mov	r0, r3
 80025a8:	2340      	movs	r3, #64	@ 0x40
 80025aa:	461a      	mov	r2, r3
 80025ac:	2100      	movs	r1, #0
 80025ae:	f00a ff89 	bl	800d4c4 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80025b2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80025b6:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80025ba:	2204      	movs	r2, #4
 80025bc:	2104      	movs	r1, #4
 80025be:	f00a fa10 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80025c2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80025c6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80025ca:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80025ce:	4618      	mov	r0, r3
 80025d0:	f00a fd96 	bl	800d100 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80025d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80025d8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80025dc:	461a      	mov	r2, r3
 80025de:	2300      	movs	r3, #0
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	6053      	str	r3, [r2, #4]
 80025e4:	6093      	str	r3, [r2, #8]
 80025e6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80025e8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025ec:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80025f0:	2201      	movs	r2, #1
 80025f2:	2104      	movs	r1, #4
 80025f4:	f00a f9f5 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80025f8:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80025fc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002600:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002604:	4618      	mov	r0, r3
 8002606:	f00a fd7b 	bl	800d100 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800260a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800260e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002612:	edd3 7a00 	vldr	s15, [r3]
 8002616:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800261a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800261e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002622:	edd3 7a00 	vldr	s15, [r3]
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800262e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002632:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002636:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800263a:	4611      	mov	r1, r2
 800263c:	eeb0 0a47 	vmov.f32	s0, s14
 8002640:	4618      	mov	r0, r3
 8002642:	f00a fdd7 	bl	800d1f4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002646:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800264a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800264e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002652:	4618      	mov	r0, r3
 8002654:	f00a f98a 	bl	800c96c <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002658:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800265c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002660:	4618      	mov	r0, r3
 8002662:	2340      	movs	r3, #64	@ 0x40
 8002664:	461a      	mov	r2, r3
 8002666:	2100      	movs	r1, #0
 8002668:	f00a ff2c 	bl	800d4c4 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 800266c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002670:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002674:	2204      	movs	r2, #4
 8002676:	2104      	movs	r1, #4
 8002678:	f00a f9b3 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 800267c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002680:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002684:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002688:	4618      	mov	r0, r3
 800268a:	f00a fd39 	bl	800d100 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 800268e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002692:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002696:	461a      	mov	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	6053      	str	r3, [r2, #4]
 800269e:	6093      	str	r3, [r2, #8]
 80026a0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80026a2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80026a6:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80026aa:	2201      	movs	r2, #1
 80026ac:	2104      	movs	r1, #4
 80026ae:	f00a f998 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80026b2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80026b6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80026ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80026be:	4618      	mov	r0, r3
 80026c0:	f00a fd1e 	bl	800d100 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80026c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026c8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80026cc:	edd3 7a00 	vldr	s15, [r3]
 80026d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80026d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026d8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026e8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80026f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026fc:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002700:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002704:	4611      	mov	r1, r2
 8002706:	eeb0 0a47 	vmov.f32	s0, s14
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fd72 	bl	800d1f4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002710:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002714:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002718:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800271c:	4618      	mov	r0, r3
 800271e:	f00a f925 	bl	800c96c <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8002722:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002726:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800272a:	4618      	mov	r0, r3
 800272c:	2340      	movs	r3, #64	@ 0x40
 800272e:	461a      	mov	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	f00a fec7 	bl	800d4c4 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8002736:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800273a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800273e:	2204      	movs	r2, #4
 8002740:	2104      	movs	r1, #4
 8002742:	f00a f94e 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8002746:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800274a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800274e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002752:	4618      	mov	r0, r3
 8002754:	f00a fcd4 	bl	800d100 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002758:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800275c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002760:	461a      	mov	r2, r3
 8002762:	2300      	movs	r3, #0
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	6053      	str	r3, [r2, #4]
 8002768:	6093      	str	r3, [r2, #8]
 800276a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	f107 001c 	add.w	r0, r7, #28
 8002774:	2201      	movs	r2, #1
 8002776:	2104      	movs	r1, #4
 8002778:	f00a f933 	bl	800c9e2 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 800277c:	f107 021c 	add.w	r2, r7, #28
 8002780:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002784:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002788:	4618      	mov	r0, r3
 800278a:	f00a fcb9 	bl	800d100 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 800278e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002792:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800279e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80027a2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80027b2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80027b6:	edd3 7a00 	vldr	s15, [r3]
 80027ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80027c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ce:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002808 <discretize_system_with_arm+0x4fc>
 80027d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027d6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4611      	mov	r1, r2
 80027e0:	eeb0 0a47 	vmov.f32	s0, s14
 80027e4:	4618      	mov	r0, r3
 80027e6:	f00a fd05 	bl	800d1f4 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80027ea:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80027ee:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80027f2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80027f6:	4618      	mov	r0, r3
 80027f8:	f00a f8b8 	bl	800c96c <arm_mat_add_f32>
}
 80027fc:	bf00      	nop
 80027fe:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8002802:	46bd      	mov	sp, r7
 8002804:	bd90      	pop	{r4, r7, pc}
 8002806:	bf00      	nop
 8002808:	42f00000 	.word	0x42f00000

0800280c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800280c:	b580      	push	{r7, lr}
 800280e:	b09e      	sub	sp, #120	@ 0x78
 8002810:	af00      	add	r7, sp, #0
 8002812:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002816:	edc7 0a08 	vstr	s1, [r7, #32]
 800281a:	ed87 1a07 	vstr	s2, [r7, #28]
 800281e:	edc7 1a06 	vstr	s3, [r7, #24]
 8002822:	ed87 2a05 	vstr	s4, [r7, #20]
 8002826:	edc7 2a04 	vstr	s5, [r7, #16]
 800282a:	ed87 3a03 	vstr	s6, [r7, #12]
 800282e:	60b8      	str	r0, [r7, #8]
 8002830:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8002832:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002836:	2240      	movs	r2, #64	@ 0x40
 8002838:	2100      	movs	r1, #0
 800283a:	4618      	mov	r0, r3
 800283c:	f00a fe42 	bl	800d4c4 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002840:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800284e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002852:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002854:	edd7 7a06 	vldr	s15, [r7, #24]
 8002858:	eef1 6a67 	vneg.f32	s13, s15
 800285c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002864:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002868:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800286c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002874:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002878:	edd7 6a04 	vldr	s13, [r7, #16]
 800287c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002884:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002888:	edd7 7a05 	vldr	s15, [r7, #20]
 800288c:	eef1 6a67 	vneg.f32	s13, s15
 8002890:	ed97 7a08 	vldr	s14, [r7, #32]
 8002894:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002898:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 800289c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80028a0:	eef1 6a67 	vneg.f32	s13, s15
 80028a4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028ac:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80028b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80028b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028bc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80028c0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80028c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	ed97 0a03 	vldr	s0, [r7, #12]
 80028d0:	f7ff fd1c 	bl	800230c <discretize_system_with_arm>
}
 80028d4:	bf00      	nop
 80028d6:	3778      	adds	r7, #120	@ 0x78
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <PWM_init+0x40>)
 80028ee:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	88fa      	ldrh	r2, [r7, #6]
 80028fa:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8002902:	68b8      	ldr	r0, [r7, #8]
 8002904:	f006 f988 	bl	8008c18 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	4619      	mov	r1, r3
 800290c:	68b8      	ldr	r0, [r7, #8]
 800290e:	f006 facf 	bl	8008eb0 <HAL_TIM_PWM_Start>
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	0a21fe80 	.word	0x0a21fe80

08002920 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8002920:	b5b0      	push	{r4, r5, r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	ed87 0a02 	vstr	s0, [r7, #8]
 800292c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002930:	edd7 7a02 	vldr	s15, [r7, #8]
 8002934:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293c:	d137      	bne.n	80029ae <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	889b      	ldrh	r3, [r3, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <PWM_write_duty+0x32>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002950:	e0e1      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	889b      	ldrh	r3, [r3, #4]
 8002956:	2b04      	cmp	r3, #4
 8002958:	d105      	bne.n	8002966 <PWM_write_duty+0x46>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	6393      	str	r3, [r2, #56]	@ 0x38
 8002964:	e0d7      	b.n	8002b16 <PWM_write_duty+0x1f6>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	889b      	ldrh	r3, [r3, #4]
 800296a:	2b08      	cmp	r3, #8
 800296c:	d105      	bne.n	800297a <PWM_write_duty+0x5a>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2300      	movs	r3, #0
 8002976:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002978:	e0cd      	b.n	8002b16 <PWM_write_duty+0x1f6>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	889b      	ldrh	r3, [r3, #4]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d105      	bne.n	800298e <PWM_write_duty+0x6e>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2300      	movs	r3, #0
 800298a:	6413      	str	r3, [r2, #64]	@ 0x40
 800298c:	e0c3      	b.n	8002b16 <PWM_write_duty+0x1f6>
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	889b      	ldrh	r3, [r3, #4]
 8002992:	2b10      	cmp	r3, #16
 8002994:	d105      	bne.n	80029a2 <PWM_write_duty+0x82>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2300      	movs	r3, #0
 800299e:	6493      	str	r3, [r2, #72]	@ 0x48
 80029a0:	e0b9      	b.n	8002b16 <PWM_write_duty+0x1f6>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2300      	movs	r3, #0
 80029aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80029ac:	e0b3      	b.n	8002b16 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029ba:	ed97 7a02 	vldr	s14, [r7, #8]
 80029be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c6:	ee17 2a90 	vmov	r2, s15
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80029d6:	33fe      	adds	r3, #254	@ 0xfe
 80029d8:	4a51      	ldr	r2, [pc, #324]	@ (8002b20 <PWM_write_duty+0x200>)
 80029da:	fba2 2303 	umull	r2, r3, r2, r3
 80029de:	0bdb      	lsrs	r3, r3, #15
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	ee07 3a90 	vmov	s15, r3
 80029f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	899b      	ldrh	r3, [r3, #12]
 80029fa:	3301      	adds	r3, #1
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a04:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a08:	ed97 7a02 	vldr	s14, [r7, #8]
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a1c:	ee17 3a90 	vmov	r3, s15
 8002a20:	b29a      	uxth	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	89db      	ldrh	r3, [r3, #14]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd46 	bl	80004bc <__aeabi_i2d>
 8002a30:	4604      	mov	r4, r0
 8002a32:	460d      	mov	r5, r1
 8002a34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a38:	eef0 7ae7 	vabs.f32	s15, s15
 8002a3c:	ee17 0a90 	vmov	r0, s15
 8002a40:	f7fd fd4e 	bl	80004e0 <__aeabi_f2d>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd fda0 	bl	8000590 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <PWM_write_duty+0x204>)
 8002a5e:	f7fd fec1 	bl	80007e4 <__aeabi_ddiv>
 8002a62:	4602      	mov	r2, r0
 8002a64:	460b      	mov	r3, r1
 8002a66:	4610      	mov	r0, r2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	f7fd ffa3 	bl	80009b4 <__aeabi_d2uiz>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	461a      	mov	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	899a      	ldrh	r2, [r3, #12]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	89da      	ldrh	r2, [r3, #14]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	89da      	ldrh	r2, [r3, #14]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	889b      	ldrh	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <PWM_write_duty+0x190>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	6952      	ldr	r2, [r2, #20]
 8002aac:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002aae:	e032      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	889b      	ldrh	r3, [r3, #4]
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d106      	bne.n	8002ac6 <PWM_write_duty+0x1a6>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ac4:	e027      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	889b      	ldrh	r3, [r3, #4]
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d106      	bne.n	8002adc <PWM_write_duty+0x1bc>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ada:	e01c      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	889b      	ldrh	r3, [r3, #4]
 8002ae0:	2b0c      	cmp	r3, #12
 8002ae2:	d106      	bne.n	8002af2 <PWM_write_duty+0x1d2>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002af0:	e011      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	889b      	ldrh	r3, [r3, #4]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d106      	bne.n	8002b08 <PWM_write_duty+0x1e8>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002b06:	e006      	b.n	8002b16 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002b14:	e7ff      	b.n	8002b16 <PWM_write_duty+0x1f6>
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	80008001 	.word	0x80008001
 8002b24:	40590000 	.word	0x40590000

08002b28 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b34:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002b38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	d137      	bne.n	8002bb6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	889b      	ldrh	r3, [r3, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <PWM_write_range+0x32>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2200      	movs	r2, #0
 8002b56:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002b58:	e0e1      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	889b      	ldrh	r3, [r3, #4]
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d105      	bne.n	8002b6e <PWM_write_range+0x46>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b6c:	e0d7      	b.n	8002d1e <PWM_write_range+0x1f6>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	889b      	ldrh	r3, [r3, #4]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d105      	bne.n	8002b82 <PWM_write_range+0x5a>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b80:	e0cd      	b.n	8002d1e <PWM_write_range+0x1f6>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	889b      	ldrh	r3, [r3, #4]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d105      	bne.n	8002b96 <PWM_write_range+0x6e>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2300      	movs	r3, #0
 8002b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b94:	e0c3      	b.n	8002d1e <PWM_write_range+0x1f6>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	889b      	ldrh	r3, [r3, #4]
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d105      	bne.n	8002baa <PWM_write_range+0x82>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ba8:	e0b9      	b.n	8002d1e <PWM_write_range+0x1f6>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002bb4:	e0b3      	b.n	8002d1e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc2:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	ee17 2a90 	vmov	r2, s15
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002bde:	33fe      	adds	r3, #254	@ 0xfe
 8002be0:	4a53      	ldr	r2, [pc, #332]	@ (8002d30 <PWM_write_range+0x208>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0bdb      	lsrs	r3, r3, #15
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	899b      	ldrh	r3, [r3, #12]
 8002c02:	3301      	adds	r3, #1
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c10:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c1c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c24:	ee17 3a90 	vmov	r3, s15
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	89db      	ldrh	r3, [r3, #14]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc42 	bl	80004bc <__aeabi_i2d>
 8002c38:	4604      	mov	r4, r0
 8002c3a:	460d      	mov	r5, r1
 8002c3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c40:	eef0 7ae7 	vabs.f32	s15, s15
 8002c44:	ee17 0a90 	vmov	r0, s15
 8002c48:	f7fd fc4a 	bl	80004e0 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fc9c 	bl	8000590 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	a331      	add	r3, pc, #196	@ (adr r3, 8002d28 <PWM_write_range+0x200>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fdbd 	bl	80007e4 <__aeabi_ddiv>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f7fd fe9f 	bl	80009b4 <__aeabi_d2uiz>
 8002c76:	4603      	mov	r3, r0
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	899a      	ldrh	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	89da      	ldrh	r2, [r3, #14]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	89da      	ldrh	r2, [r3, #14]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	889b      	ldrh	r3, [r3, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <PWM_write_range+0x190>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	6952      	ldr	r2, [r2, #20]
 8002cb4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002cb6:	e032      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	889b      	ldrh	r3, [r3, #4]
 8002cbc:	2b04      	cmp	r3, #4
 8002cbe:	d106      	bne.n	8002cce <PWM_write_range+0x1a6>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ccc:	e027      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	889b      	ldrh	r3, [r3, #4]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d106      	bne.n	8002ce4 <PWM_write_range+0x1bc>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002ce2:	e01c      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	889b      	ldrh	r3, [r3, #4]
 8002ce8:	2b0c      	cmp	r3, #12
 8002cea:	d106      	bne.n	8002cfa <PWM_write_range+0x1d2>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002cf8:	e011      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	889b      	ldrh	r3, [r3, #4]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d106      	bne.n	8002d10 <PWM_write_range+0x1e8>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002d0e:	e006      	b.n	8002d1e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002d1c:	e7ff      	b.n	8002d1e <PWM_write_range+0x1f6>
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdb0      	pop	{r4, r5, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	00000000 	.word	0x00000000
 8002d2c:	40efffe0 	.word	0x40efffe0
 8002d30:	80008001 	.word	0x80008001

08002d34 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6178      	str	r0, [r7, #20]
 8002d3c:	6139      	str	r1, [r7, #16]
 8002d3e:	60fa      	str	r2, [r7, #12]
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	ed87 0a01 	vstr	s0, [r7, #4]
 8002d46:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f04f 0200 	mov.w	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8002d94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8002d9e:	68f9      	ldr	r1, [r7, #12]
 8002da0:	fb01 f202 	mul.w	r2, r1, r2
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2200      	movs	r2, #0
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8002e02:	213c      	movs	r1, #60	@ 0x3c
 8002e04:	6938      	ldr	r0, [r7, #16]
 8002e06:	f006 fb0f 	bl	8009428 <HAL_TIM_Encoder_Start>
}
 8002e0a:	bf00      	nop
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	0000      	movs	r0, r0
 8002e14:	0000      	movs	r0, r0
	...

08002e18 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8002e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e1c:	b084      	sub	sp, #16
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	0fda      	lsrs	r2, r3, #31
 8002e40:	4413      	add	r3, r2
 8002e42:	105b      	asrs	r3, r3, #1
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	dd05      	ble.n	8002e58 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	e00e      	b.n	8002e76 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	0fda      	lsrs	r2, r3, #31
 8002e5e:	4413      	add	r3, r2
 8002e60:	105b      	asrs	r3, r3, #1
 8002e62:	425b      	negs	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	da04      	bge.n	8002e76 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	441a      	add	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e94:	ee07 3a90 	vmov	s15, r3
 8002e98:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	ee07 3a90 	vmov	s15, r3
 8002ea4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb0b 	bl	80004e0 <__aeabi_f2d>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	460d      	mov	r5, r1
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	ee07 3a90 	vmov	s15, r3
 8002ee2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002eee:	ee17 0a90 	vmov	r0, s15
 8002ef2:	f7fd faf5 	bl	80004e0 <__aeabi_f2d>
 8002ef6:	a33c      	add	r3, pc, #240	@ (adr r3, 8002fe8 <QEI_get_diff_count+0x1d0>)
 8002ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efc:	f7fd fb48 	bl	8000590 <__aeabi_dmul>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	4690      	mov	r8, r2
 8002f06:	4699      	mov	r9, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fae7 	bl	80004e0 <__aeabi_f2d>
 8002f12:	4602      	mov	r2, r0
 8002f14:	460b      	mov	r3, r1
 8002f16:	4640      	mov	r0, r8
 8002f18:	4649      	mov	r1, r9
 8002f1a:	f7fd fb39 	bl	8000590 <__aeabi_dmul>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	4620      	mov	r0, r4
 8002f24:	4629      	mov	r1, r5
 8002f26:	f7fd f97d 	bl	8000224 <__adddf3>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7fd fd5f 	bl	80009f4 <__aeabi_d2f>
 8002f36:	4602      	mov	r2, r0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd facd 	bl	80004e0 <__aeabi_f2d>
 8002f46:	4604      	mov	r4, r0
 8002f48:	460d      	mov	r5, r1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f66:	ee16 0a90 	vmov	r0, s13
 8002f6a:	f7fd fab9 	bl	80004e0 <__aeabi_f2d>
 8002f6e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002fe8 <QEI_get_diff_count+0x1d0>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fb0c 	bl	8000590 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4690      	mov	r8, r2
 8002f7e:	4699      	mov	r9, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd faab 	bl	80004e0 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4640      	mov	r0, r8
 8002f90:	4649      	mov	r1, r9
 8002f92:	f7fd fafd 	bl	8000590 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4690      	mov	r8, r2
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7fd fa9c 	bl	80004e0 <__aeabi_f2d>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4640      	mov	r0, r8
 8002fae:	4649      	mov	r1, r9
 8002fb0:	f7fd faee 	bl	8000590 <__aeabi_dmul>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd f932 	bl	8000224 <__adddf3>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	f7fd fd14 	bl	80009f4 <__aeabi_d2f>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]
}
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fe4:	f3af 8000 	nop.w
 8002fe8:	54442d18 	.word	0x54442d18
 8002fec:	400921fb 	.word	0x400921fb

08002ff0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003000:	fb02 f303 	mul.w	r3, r2, r3
 8003004:	ee07 3a90 	vmov	s15, r3
 8003008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa62 	bl	80004e0 <__aeabi_f2d>
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	4b83      	ldr	r3, [pc, #524]	@ (8003230 <QEI_compute_data+0x240>)
 8003022:	f7fd fab5 	bl	8000590 <__aeabi_dmul>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	461d      	mov	r5, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800303a:	ee17 0a90 	vmov	r0, s15
 800303e:	f7fd fa4f 	bl	80004e0 <__aeabi_f2d>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd fbcb 	bl	80007e4 <__aeabi_ddiv>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4614      	mov	r4, r2
 8003054:	461d      	mov	r5, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fa40 	bl	80004e0 <__aeabi_f2d>
 8003060:	4602      	mov	r2, r0
 8003062:	460b      	mov	r3, r1
 8003064:	4620      	mov	r0, r4
 8003066:	4629      	mov	r1, r5
 8003068:	f7fd fa92 	bl	8000590 <__aeabi_dmul>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4610      	mov	r0, r2
 8003072:	4619      	mov	r1, r3
 8003074:	f7fd fcbe 	bl	80009f4 <__aeabi_d2f>
 8003078:	4602      	mov	r2, r0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003084:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003088:	ee17 0a90 	vmov	r0, s15
 800308c:	f7fd fa28 	bl	80004e0 <__aeabi_f2d>
 8003090:	a365      	add	r3, pc, #404	@ (adr r3, 8003228 <QEI_compute_data+0x238>)
 8003092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003096:	f7fd fa7b 	bl	8000590 <__aeabi_dmul>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4614      	mov	r4, r2
 80030a0:	461d      	mov	r5, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	ee07 3a90 	vmov	s15, r3
 80030aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ae:	ee17 0a90 	vmov	r0, s15
 80030b2:	f7fd fa15 	bl	80004e0 <__aeabi_f2d>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4620      	mov	r0, r4
 80030bc:	4629      	mov	r1, r5
 80030be:	f7fd fb91 	bl	80007e4 <__aeabi_ddiv>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	4614      	mov	r4, r2
 80030c8:	461d      	mov	r5, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa06 	bl	80004e0 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd fa58 	bl	8000590 <__aeabi_dmul>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fc84 	bl	80009f4 <__aeabi_d2f>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fd f9f2 	bl	80004e0 <__aeabi_f2d>
 80030fc:	a34a      	add	r3, pc, #296	@ (adr r3, 8003228 <QEI_compute_data+0x238>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd fa45 	bl	8000590 <__aeabi_dmul>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4614      	mov	r4, r2
 800310c:	461d      	mov	r5, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003112:	4618      	mov	r0, r3
 8003114:	f7fd f9e4 	bl	80004e0 <__aeabi_f2d>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4620      	mov	r0, r4
 800311e:	4629      	mov	r1, r5
 8003120:	f7fd fa36 	bl	8000590 <__aeabi_dmul>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4614      	mov	r4, r2
 800312a:	461d      	mov	r5, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003138:	ee17 0a90 	vmov	r0, s15
 800313c:	f7fd f9d0 	bl	80004e0 <__aeabi_f2d>
 8003140:	4602      	mov	r2, r0
 8003142:	460b      	mov	r3, r1
 8003144:	4620      	mov	r0, r4
 8003146:	4629      	mov	r1, r5
 8003148:	f7fd fb4c 	bl	80007e4 <__aeabi_ddiv>
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4614      	mov	r4, r2
 8003152:	461d      	mov	r5, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003158:	4618      	mov	r0, r3
 800315a:	f7fd f9c1 	bl	80004e0 <__aeabi_f2d>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4620      	mov	r0, r4
 8003164:	4629      	mov	r1, r5
 8003166:	f7fd fa13 	bl	8000590 <__aeabi_dmul>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4610      	mov	r0, r2
 8003170:	4619      	mov	r1, r3
 8003172:	f7fd fc3f 	bl	80009f4 <__aeabi_d2f>
 8003176:	4602      	mov	r2, r0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	edd3 7a03 	vldr	s15, [r3, #12]
 8003198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800319c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 80031a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d00a      	beq.n	80031c4 <QEI_compute_data+0x1d4>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80031be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c2:	e001      	b.n	80031c8 <QEI_compute_data+0x1d8>
 80031c4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003234 <QEI_compute_data+0x244>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80031da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031de:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80031e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80031e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ee:	d00a      	beq.n	8003206 <QEI_compute_data+0x216>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	ee07 3a90 	vmov	s15, r3
 80031f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	e001      	b.n	800320a <QEI_compute_data+0x21a>
 8003206:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003234 <QEI_compute_data+0x244>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	615a      	str	r2, [r3, #20]
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bdb0      	pop	{r4, r5, r7, pc}
 8003228:	54442d18 	.word	0x54442d18
 800322c:	400921fb 	.word	0x400921fb
 8003230:	404e0000 	.word	0x404e0000
 8003234:	00000000 	.word	0x00000000

08003238 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	@ 0x30
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800323e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	2220      	movs	r2, #32
 800324e:	2100      	movs	r1, #0
 8003250:	4618      	mov	r0, r3
 8003252:	f00a f937 	bl	800d4c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003256:	4b39      	ldr	r3, [pc, #228]	@ (800333c <MX_ADC1_Init+0x104>)
 8003258:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800325c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800325e:	4b37      	ldr	r3, [pc, #220]	@ (800333c <MX_ADC1_Init+0x104>)
 8003260:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003264:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003266:	4b35      	ldr	r3, [pc, #212]	@ (800333c <MX_ADC1_Init+0x104>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800326c:	4b33      	ldr	r3, [pc, #204]	@ (800333c <MX_ADC1_Init+0x104>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003272:	4b32      	ldr	r3, [pc, #200]	@ (800333c <MX_ADC1_Init+0x104>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003278:	4b30      	ldr	r3, [pc, #192]	@ (800333c <MX_ADC1_Init+0x104>)
 800327a:	2201      	movs	r2, #1
 800327c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800327e:	4b2f      	ldr	r3, [pc, #188]	@ (800333c <MX_ADC1_Init+0x104>)
 8003280:	2204      	movs	r2, #4
 8003282:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003284:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <MX_ADC1_Init+0x104>)
 8003286:	2200      	movs	r2, #0
 8003288:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800328a:	4b2c      	ldr	r3, [pc, #176]	@ (800333c <MX_ADC1_Init+0x104>)
 800328c:	2201      	movs	r2, #1
 800328e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8003290:	4b2a      	ldr	r3, [pc, #168]	@ (800333c <MX_ADC1_Init+0x104>)
 8003292:	2202      	movs	r2, #2
 8003294:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003296:	4b29      	ldr	r3, [pc, #164]	@ (800333c <MX_ADC1_Init+0x104>)
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800329e:	4b27      	ldr	r3, [pc, #156]	@ (800333c <MX_ADC1_Init+0x104>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032a4:	4b25      	ldr	r3, [pc, #148]	@ (800333c <MX_ADC1_Init+0x104>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80032aa:	4b24      	ldr	r3, [pc, #144]	@ (800333c <MX_ADC1_Init+0x104>)
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032b2:	4b22      	ldr	r3, [pc, #136]	@ (800333c <MX_ADC1_Init+0x104>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80032b8:	4b20      	ldr	r3, [pc, #128]	@ (800333c <MX_ADC1_Init+0x104>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032c0:	481e      	ldr	r0, [pc, #120]	@ (800333c <MX_ADC1_Init+0x104>)
 80032c2:	f002 fbed 	bl	8005aa0 <HAL_ADC_Init>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80032cc:	f000 fe16 	bl	8003efc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80032d0:	2300      	movs	r3, #0
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80032d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d8:	4619      	mov	r1, r3
 80032da:	4818      	ldr	r0, [pc, #96]	@ (800333c <MX_ADC1_Init+0x104>)
 80032dc:	f003 fd0c 	bl	8006cf8 <HAL_ADCEx_MultiModeConfigChannel>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80032e6:	f000 fe09 	bl	8003efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80032ea:	4b15      	ldr	r3, [pc, #84]	@ (8003340 <MX_ADC1_Init+0x108>)
 80032ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032ee:	2306      	movs	r3, #6
 80032f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80032f2:	2307      	movs	r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032f6:	237f      	movs	r3, #127	@ 0x7f
 80032f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032fa:	2304      	movs	r3, #4
 80032fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003302:	1d3b      	adds	r3, r7, #4
 8003304:	4619      	mov	r1, r3
 8003306:	480d      	ldr	r0, [pc, #52]	@ (800333c <MX_ADC1_Init+0x104>)
 8003308:	f002 fe78 	bl	8005ffc <HAL_ADC_ConfigChannel>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003312:	f000 fdf3 	bl	8003efc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <MX_ADC1_Init+0x10c>)
 8003318:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800331a:	230c      	movs	r3, #12
 800331c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	4619      	mov	r1, r3
 8003322:	4806      	ldr	r0, [pc, #24]	@ (800333c <MX_ADC1_Init+0x104>)
 8003324:	f002 fe6a 	bl	8005ffc <HAL_ADC_ConfigChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800332e:	f000 fde5 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003332:	bf00      	nop
 8003334:	3730      	adds	r7, #48	@ 0x30
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000208 	.word	0x20000208
 8003340:	19200040 	.word	0x19200040
 8003344:	1d500080 	.word	0x1d500080

08003348 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b09e      	sub	sp, #120	@ 0x78
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	2254      	movs	r2, #84	@ 0x54
 8003366:	2100      	movs	r1, #0
 8003368:	4618      	mov	r0, r3
 800336a:	f00a f8ab 	bl	800d4c4 <memset>
  if(adcHandle->Instance==ADC1)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003376:	d15e      	bne.n	8003436 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003378:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800337c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800337e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003382:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003384:	f107 0310 	add.w	r3, r7, #16
 8003388:	4618      	mov	r0, r3
 800338a:	f005 f993 	bl	80086b4 <HAL_RCCEx_PeriphCLKConfig>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003394:	f000 fdb2 	bl	8003efc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003398:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 800339a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339c:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 800339e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033a4:	4b26      	ldr	r3, [pc, #152]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 80033a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b0:	4b23      	ldr	r3, [pc, #140]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 80033b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 80033b6:	f043 0304 	orr.w	r3, r3, #4
 80033ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80033bc:	4b20      	ldr	r3, [pc, #128]	@ (8003440 <HAL_ADC_MspInit+0xf8>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80033c8:	2303      	movs	r3, #3
 80033ca:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033cc:	2303      	movs	r3, #3
 80033ce:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80033d8:	4619      	mov	r1, r3
 80033da:	481a      	ldr	r0, [pc, #104]	@ (8003444 <HAL_ADC_MspInit+0xfc>)
 80033dc:	f004 f9d6 	bl	800778c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033e0:	4b19      	ldr	r3, [pc, #100]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 80033e2:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <HAL_ADC_MspInit+0x104>)
 80033e4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 80033e8:	2205      	movs	r2, #5
 80033ea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033ec:	4b16      	ldr	r3, [pc, #88]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033f2:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033f8:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 8003400:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003404:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 8003408:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800340c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800340e:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 8003410:	2220      	movs	r2, #32
 8003412:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003414:	4b0c      	ldr	r3, [pc, #48]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800341a:	480b      	ldr	r0, [pc, #44]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 800341c:	f003 fe84 	bl	8007128 <HAL_DMA_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8003426:	f000 fd69 	bl	8003efc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a06      	ldr	r2, [pc, #24]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003430:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <HAL_ADC_MspInit+0x100>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003436:	bf00      	nop
 8003438:	3778      	adds	r7, #120	@ 0x78
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40021000 	.word	0x40021000
 8003444:	48000800 	.word	0x48000800
 8003448:	20000274 	.word	0x20000274
 800344c:	40020008 	.word	0x40020008

08003450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003456:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <MX_DMA_Init+0x90>)
 8003458:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345a:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <MX_DMA_Init+0x90>)
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	6493      	str	r3, [r2, #72]	@ 0x48
 8003462:	4b1f      	ldr	r3, [pc, #124]	@ (80034e0 <MX_DMA_Init+0x90>)
 8003464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	607b      	str	r3, [r7, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800346e:	4b1c      	ldr	r3, [pc, #112]	@ (80034e0 <MX_DMA_Init+0x90>)
 8003470:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003472:	4a1b      	ldr	r2, [pc, #108]	@ (80034e0 <MX_DMA_Init+0x90>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6493      	str	r3, [r2, #72]	@ 0x48
 800347a:	4b19      	ldr	r3, [pc, #100]	@ (80034e0 <MX_DMA_Init+0x90>)
 800347c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	2100      	movs	r1, #0
 800348a:	200b      	movs	r0, #11
 800348c:	f003 fe17 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003490:	200b      	movs	r0, #11
 8003492:	f003 fe2e 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	200c      	movs	r0, #12
 800349c:	f003 fe0f 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80034a0:	200c      	movs	r0, #12
 80034a2:	f003 fe26 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2100      	movs	r1, #0
 80034aa:	200d      	movs	r0, #13
 80034ac:	f003 fe07 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80034b0:	200d      	movs	r0, #13
 80034b2:	f003 fe1e 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80034b6:	2200      	movs	r2, #0
 80034b8:	2100      	movs	r1, #0
 80034ba:	200e      	movs	r0, #14
 80034bc:	f003 fdff 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80034c0:	200e      	movs	r0, #14
 80034c2:	f003 fe16 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	200f      	movs	r0, #15
 80034cc:	f003 fdf7 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80034d0:	200f      	movs	r0, #15
 80034d2:	f003 fe0e 	bl	80070f2 <HAL_NVIC_EnableIRQ>

}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40021000 	.word	0x40021000

080034e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	@ 0x28
 80034e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ea:	f107 0314 	add.w	r3, r7, #20
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]
 80034f4:	609a      	str	r2, [r3, #8]
 80034f6:	60da      	str	r2, [r3, #12]
 80034f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034fa:	4b4f      	ldr	r3, [pc, #316]	@ (8003638 <MX_GPIO_Init+0x154>)
 80034fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003500:	f043 0304 	orr.w	r3, r3, #4
 8003504:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003506:	4b4c      	ldr	r3, [pc, #304]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	613b      	str	r3, [r7, #16]
 8003510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003512:	4b49      	ldr	r3, [pc, #292]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003516:	4a48      	ldr	r2, [pc, #288]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003518:	f043 0320 	orr.w	r3, r3, #32
 800351c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800351e:	4b46      	ldr	r3, [pc, #280]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	4b43      	ldr	r3, [pc, #268]	@ (8003638 <MX_GPIO_Init+0x154>)
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	4a42      	ldr	r2, [pc, #264]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003530:	f043 0301 	orr.w	r3, r3, #1
 8003534:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	60bb      	str	r3, [r7, #8]
 8003540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003542:	4b3d      	ldr	r3, [pc, #244]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003546:	4a3c      	ldr	r2, [pc, #240]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003548:	f043 0302 	orr.w	r3, r3, #2
 800354c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800354e:	4b3a      	ldr	r3, [pc, #232]	@ (8003638 <MX_GPIO_Init+0x154>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800355a:	2200      	movs	r2, #0
 800355c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8003560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003564:	f004 fa94 	bl	8007a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8003568:	2200      	movs	r2, #0
 800356a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800356e:	4833      	ldr	r0, [pc, #204]	@ (800363c <MX_GPIO_Init+0x158>)
 8003570:	f004 fa8e 	bl	8007a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800357a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800357e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4619      	mov	r1, r3
 800358a:	482c      	ldr	r0, [pc, #176]	@ (800363c <MX_GPIO_Init+0x158>)
 800358c:	f004 f8fe 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8003590:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8003594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003596:	2301      	movs	r3, #1
 8003598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	2300      	movs	r3, #0
 80035a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f107 0314 	add.w	r3, r7, #20
 80035a6:	4619      	mov	r1, r3
 80035a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80035ac:	f004 f8ee 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 80035b0:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 80035b4:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b6:	2300      	movs	r3, #0
 80035b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	481e      	ldr	r0, [pc, #120]	@ (8003640 <MX_GPIO_Init+0x15c>)
 80035c6:	f004 f8e1 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035d0:	2301      	movs	r3, #1
 80035d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d4:	2300      	movs	r3, #0
 80035d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d8:	2300      	movs	r3, #0
 80035da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035dc:	f107 0314 	add.w	r3, r7, #20
 80035e0:	4619      	mov	r1, r3
 80035e2:	4816      	ldr	r0, [pc, #88]	@ (800363c <MX_GPIO_Init+0x158>)
 80035e4:	f004 f8d2 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 80035e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 0314 	add.w	r3, r7, #20
 80035fa:	4619      	mov	r1, r3
 80035fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003600:	f004 f8c4 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8003604:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	4808      	ldr	r0, [pc, #32]	@ (800363c <MX_GPIO_Init+0x158>)
 800361a:	f004 f8b7 	bl	800778c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2100      	movs	r1, #0
 8003622:	2028      	movs	r0, #40	@ 0x28
 8003624:	f003 fd4b 	bl	80070be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003628:	2028      	movs	r0, #40	@ 0x28
 800362a:	f003 fd62 	bl	80070f2 <HAL_NVIC_EnableIRQ>

}
 800362e:	bf00      	nop
 8003630:	3728      	adds	r7, #40	@ 0x28
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	48000800 	.word	0x48000800
 8003640:	48000400 	.word	0x48000400

08003644 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003644:	b580      	push	{r7, lr}
 8003646:	b096      	sub	sp, #88	@ 0x58
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003650:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800365a:	1d3b      	adds	r3, r7, #4
 800365c:	2201      	movs	r2, #1
 800365e:	2101      	movs	r1, #1
 8003660:	f009 f9bf 	bl	800c9e2 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f009 fe2f 	bl	800d2d6 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f009 fe25 	bl	800d2d6 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f009 fe1b 	bl	800d2d6 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80036ac:	4619      	mov	r1, r3
 80036ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80036b2:	4610      	mov	r0, r2
 80036b4:	f009 fd9e 	bl	800d1f4 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 80036ca:	461a      	mov	r2, r3
 80036cc:	f009 fd18 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80036e2:	461a      	mov	r2, r3
 80036e4:	f009 f942 	bl	800c96c <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80036fa:	461a      	mov	r2, r3
 80036fc:	f009 fd00 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003712:	461a      	mov	r2, r3
 8003714:	f009 fcf4 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800372a:	461a      	mov	r2, r3
 800372c:	f009 fce8 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003742:	4619      	mov	r1, r3
 8003744:	eeb0 0a67 	vmov.f32	s0, s15
 8003748:	4610      	mov	r0, r2
 800374a:	f009 fd53 	bl	800d1f4 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003760:	461a      	mov	r2, r3
 8003762:	f009 f903 	bl	800c96c <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003778:	461a      	mov	r2, r3
 800377a:	f009 fcc1 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003790:	461a      	mov	r2, r3
 8003792:	f009 fcb5 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80037a8:	461a      	mov	r2, r3
 80037aa:	f009 f8df 	bl	800c96c <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f009 f928 	bl	800ca12 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 80037d4:	461a      	mov	r2, r3
 80037d6:	f009 fc93 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80037ec:	461a      	mov	r2, r3
 80037ee:	f009 fc87 	bl	800d100 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003804:	461a      	mov	r2, r3
 8003806:	f009 fc7b 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800381c:	461a      	mov	r2, r3
 800381e:	f009 fd1f 	bl	800d260 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003834:	461a      	mov	r2, r3
 8003836:	f009 fc63 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800384c:	461a      	mov	r2, r3
 800384e:	f009 f88d 	bl	800c96c <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8003864:	461a      	mov	r2, r3
 8003866:	f009 fc4b 	bl	800d100 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800386a:	f107 0310 	add.w	r3, r7, #16
 800386e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003872:	2204      	movs	r2, #4
 8003874:	2104      	movs	r1, #4
 8003876:	f009 f8b4 	bl	800c9e2 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8003886:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800388a:	4619      	mov	r1, r3
 800388c:	f009 fc38 	bl	800d100 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003896:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800389a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800389e:	4618      	mov	r0, r3
 80038a0:	f009 fcde 	bl	800d260 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 80038b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80038b4:	4618      	mov	r0, r3
 80038b6:	f009 fc23 	bl	800d100 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80038ca:	ee07 3a90 	vmov	s15, r3
}
 80038ce:	eeb0 0a67 	vmov.f32	s0, s15
 80038d2:	3758      	adds	r7, #88	@ 0x58
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b0a4      	sub	sp, #144	@ 0x90
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6178      	str	r0, [r7, #20]
 80038e0:	6139      	str	r1, [r7, #16]
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80038e8:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80038fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800390a:	f04f 0300 	mov.w	r3, #0
 800390e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003920:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003924:	673b      	str	r3, [r7, #112]	@ 0x70
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	677b      	str	r3, [r7, #116]	@ 0x74
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003932:	4bc6      	ldr	r3, [pc, #792]	@ (8003c4c <Kalman_Start+0x374>)
 8003934:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003938:	461d      	mov	r5, r3
 800393a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800393c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800393e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003942:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003946:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800394a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800394e:	f107 031c 	add.w	r3, r7, #28
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800396c:	e028      	b.n	80039c0 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 800396e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4413      	add	r3, r2
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003980:	3314      	adds	r3, #20
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	3390      	adds	r3, #144	@ 0x90
 8003990:	443b      	add	r3, r7
 8003992:	3b64      	subs	r3, #100	@ 0x64
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800399c:	3398      	adds	r3, #152	@ 0x98
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039aa:	3304      	adds	r3, #4
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80039b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ba:	3301      	adds	r3, #1
 80039bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c4:	2b0f      	cmp	r3, #15
 80039c6:	ddd2      	ble.n	800396e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80039ce:	e03a      	b.n	8003a46 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 80039d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3390      	adds	r3, #144	@ 0x90
 80039d8:	443b      	add	r3, r7
 80039da:	3b74      	subs	r3, #116	@ 0x74
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80039ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fc:	3324      	adds	r3, #36	@ 0x24
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003a04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	3390      	adds	r3, #144	@ 0x90
 8003a0c:	443b      	add	r3, r7
 8003a0e:	3b14      	subs	r3, #20
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	6979      	ldr	r1, [r7, #20]
 8003a14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a18:	3328      	adds	r3, #40	@ 0x28
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	3390      	adds	r3, #144	@ 0x90
 8003a28:	443b      	add	r3, r7
 8003a2a:	3b24      	subs	r3, #36	@ 0x24
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	6979      	ldr	r1, [r7, #20]
 8003a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a34:	332c      	adds	r3, #44	@ 0x2c
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a40:	3301      	adds	r3, #1
 8003a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	ddc0      	ble.n	80039d0 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	2201      	movs	r2, #1
 8003a58:	2104      	movs	r1, #4
 8003a5a:	f008 ffc2 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3310      	adds	r3, #16
 8003a68:	2204      	movs	r2, #4
 8003a6a:	2104      	movs	r1, #4
 8003a6c:	f008 ffb9 	bl	800c9e2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	3350      	adds	r3, #80	@ 0x50
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	f008 ffb0 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3390      	adds	r3, #144	@ 0x90
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	2104      	movs	r1, #4
 8003a90:	f008 ffa7 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	33a0      	adds	r3, #160	@ 0xa0
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	f008 ff9e 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	33b0      	adds	r3, #176	@ 0xb0
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	f008 ff95 	bl	800c9e2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	33c8      	adds	r3, #200	@ 0xc8
 8003ac2:	2204      	movs	r2, #4
 8003ac4:	2104      	movs	r1, #4
 8003ac6:	f008 ff8c 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	2104      	movs	r1, #4
 8003ada:	f008 ff82 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003aea:	2204      	movs	r2, #4
 8003aec:	2101      	movs	r1, #1
 8003aee:	f008 ff78 	bl	800c9e2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003afe:	2204      	movs	r2, #4
 8003b00:	2104      	movs	r1, #4
 8003b02:	f008 ff6e 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003b12:	2204      	movs	r2, #4
 8003b14:	2104      	movs	r1, #4
 8003b16:	f008 ff64 	bl	800c9e2 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003b26:	2201      	movs	r2, #1
 8003b28:	2104      	movs	r1, #4
 8003b2a:	f008 ff5a 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2104      	movs	r1, #4
 8003b3e:	f008 ff50 	bl	800c9e2 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003b4e:	2204      	movs	r2, #4
 8003b50:	2101      	movs	r1, #1
 8003b52:	f008 ff46 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003b62:	2201      	movs	r2, #1
 8003b64:	2101      	movs	r1, #1
 8003b66:	f008 ff3c 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003b76:	2201      	movs	r2, #1
 8003b78:	2101      	movs	r1, #1
 8003b7a:	f008 ff32 	bl	800c9e2 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	f008 ff28 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	2104      	movs	r1, #4
 8003ba2:	f008 ff1e 	bl	800c9e2 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	f008 ff14 	bl	800c9e2 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	2101      	movs	r1, #1
 8003bca:	f008 ff0a 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8003bda:	2201      	movs	r2, #1
 8003bdc:	2101      	movs	r1, #1
 8003bde:	f008 ff00 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	f008 fef6 	bl	800c9e2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003c02:	2201      	movs	r2, #1
 8003c04:	2101      	movs	r1, #1
 8003c06:	f008 feec 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c16:	2204      	movs	r2, #4
 8003c18:	2104      	movs	r1, #4
 8003c1a:	f008 fee2 	bl	800c9e2 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	33c4      	adds	r3, #196	@ 0xc4
 8003c28:	2201      	movs	r2, #1
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f008 fed9 	bl	800c9e2 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	2101      	movs	r1, #1
 8003c40:	f008 fecf 	bl	800c9e2 <arm_mat_init_f32>
}
 8003c44:	bf00      	nop
 8003c46:	3790      	adds	r7, #144	@ 0x90
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4c:	0800e0ac 	.word	0x0800e0ac

08003c50 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c54:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003c56:	f001 fc6e 	bl	8005536 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003c5a:	f000 f875 	bl	8003d48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003c5e:	f7ff fc41 	bl	80034e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8003c62:	f7ff fbf5 	bl	8003450 <MX_DMA_Init>
	MX_ADC1_Init();
 8003c66:	f7ff fae7 	bl	8003238 <MX_ADC1_Init>
	MX_TIM2_Init();
 8003c6a:	f000 fe77 	bl	800495c <MX_TIM2_Init>
	MX_TIM3_Init();
 8003c6e:	f000 fec3 	bl	80049f8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003c72:	f000 ff17 	bl	8004aa4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003c76:	f000 ff6b 	bl	8004b50 <MX_TIM5_Init>
	MX_TIM8_Init();
 8003c7a:	f000 ffb7 	bl	8004bec <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8003c7e:	f001 fa83 	bl	8005188 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8003c82:	f001 f87b 	bl	8004d7c <MX_TIM16_Init>
	MX_TIM1_Init();
 8003c86:	f000 fdd5 	bl	8004834 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8003c8a:	f001 fa33 	bl	80050f4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8003c8e:	f000 f93b 	bl	8003f08 <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003c92:	4b29      	ldr	r3, [pc, #164]	@ (8003d38 <main+0xe8>)
 8003c94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c98:	4610      	mov	r0, r2
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f7fc feaa 	bl	80009f4 <__aeabi_d2f>
 8003ca0:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B * 0.735, ZGX45RGG_150RPM_Constant.Kt,
 8003ca2:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <main+0xe8>)
 8003ca4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003ca8:	a321      	add	r3, pc, #132	@ (adr r3, 8003d30 <main+0xe0>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fc6f 	bl	8000590 <__aeabi_dmul>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fc fe9b 	bl	80009f4 <__aeabi_d2f>
 8003cbe:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B * 0.735, ZGX45RGG_150RPM_Constant.Kt,
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <main+0xe8>)
 8003cc2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f7fc fe93 	bl	80009f4 <__aeabi_d2f>
 8003cce:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8003cd0:	4b19      	ldr	r3, [pc, #100]	@ (8003d38 <main+0xe8>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003cd6:	4610      	mov	r0, r2
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f7fc fe8b 	bl	80009f4 <__aeabi_d2f>
 8003cde:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8003ce0:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <main+0xe8>)
 8003ce2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f7fc fe83 	bl	80009f4 <__aeabi_d2f>
 8003cee:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 0.05);
 8003cf0:	4b11      	ldr	r3, [pc, #68]	@ (8003d38 <main+0xe8>)
 8003cf2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f7fc fe7b 	bl	80009f4 <__aeabi_d2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	ed9f 4a0e 	vldr	s8, [pc, #56]	@ 8003d3c <main+0xec>
 8003d04:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8003d08:	ee03 3a10 	vmov	s6, r3
 8003d0c:	ee02 9a90 	vmov	s5, r9
 8003d10:	ee02 8a10 	vmov	s4, r8
 8003d14:	ee01 6a90 	vmov	s3, r6
 8003d18:	ee01 5a10 	vmov	s2, r5
 8003d1c:	ee00 4a90 	vmov	s1, r4
 8003d20:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003d40 <main+0xf0>
 8003d24:	4807      	ldr	r0, [pc, #28]	@ (8003d44 <main+0xf4>)
 8003d26:	f7fd fbc7 	bl	80014b8 <MotorKalman_Init>
//	SerialFrame_StartReceive(&serial_frame);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003d2a:	bf00      	nop
 8003d2c:	e7fd      	b.n	8003d2a <main+0xda>
 8003d2e:	bf00      	nop
 8003d30:	b851eb85 	.word	0xb851eb85
 8003d34:	3fe7851e 	.word	0x3fe7851e
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	3d4ccccd 	.word	0x3d4ccccd
 8003d40:	3a83126f 	.word	0x3a83126f
 8003d44:	200002d4 	.word	0x200002d4

08003d48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b094      	sub	sp, #80	@ 0x50
 8003d4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003d4e:	f107 0318 	add.w	r3, r7, #24
 8003d52:	2238      	movs	r2, #56	@ 0x38
 8003d54:	2100      	movs	r1, #0
 8003d56:	4618      	mov	r0, r3
 8003d58:	f009 fbb4 	bl	800d4c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003d5c:	1d3b      	adds	r3, r7, #4
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	60da      	str	r2, [r3, #12]
 8003d68:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f003 fec0 	bl	8007af0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d70:	2302      	movs	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d7a:	2340      	movs	r3, #64	@ 0x40
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d82:	2302      	movs	r3, #2
 8003d84:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003d86:	2304      	movs	r3, #4
 8003d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003d8a:	2355      	movs	r3, #85	@ 0x55
 8003d8c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003d92:	2302      	movs	r3, #2
 8003d94:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003d96:	2302      	movs	r3, #2
 8003d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003d9a:	f107 0318 	add.w	r3, r7, #24
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f003 ff5a 	bl	8007c58 <HAL_RCC_OscConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <SystemClock_Config+0x66>
		Error_Handler();
 8003daa:	f000 f8a7 	bl	8003efc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003dae:	230f      	movs	r3, #15
 8003db0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003db2:	2303      	movs	r3, #3
 8003db4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2104      	movs	r1, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f004 fa58 	bl	800827c <HAL_RCC_ClockConfig>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <SystemClock_Config+0x8e>
		Error_Handler();
 8003dd2:	f000 f893 	bl	8003efc <Error_Handler>
	}
}
 8003dd6:	bf00      	nop
 8003dd8:	3750      	adds	r7, #80	@ 0x50
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
	...

08003de0 <HAL_GPIO_EXTI_Callback>:
	default:
		return 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d105      	bne.n	8003dfc <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <HAL_GPIO_EXTI_Callback+0x28>)
 8003df2:	2205      	movs	r2, #5
 8003df4:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8003df6:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_GPIO_EXTI_Callback+0x2c>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
	}
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	200000e8 	.word	0x200000e8
 8003e0c:	200000e9 	.word	0x200000e9

08003e10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a29      	ldr	r2, [pc, #164]	@ (8003ed4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d14a      	bne.n	8003eca <HAL_TIM_PeriodElapsedCallback+0xa6>
//		rev_cmd_ux = SIGNAL_generate(&sine_sg_PWM, 0.001f);
		QEI_get_diff_count(&revolute_encoder);
 8003e34:	4828      	ldr	r0, [pc, #160]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e36:	f7fe ffef 	bl	8002e18 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8003e3a:	4827      	ldr	r0, [pc, #156]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e3c:	f7ff f8d8 	bl	8002ff0 <QEI_compute_data>
//
		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max / ZGX45RGG_150RPM_Constant.U_max;
 8003e40:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fb4b 	bl	80004e0 <__aeabi_f2d>
 8003e4a:	4b25      	ldr	r3, [pc, #148]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003e4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003e50:	f7fc fb9e 	bl	8000590 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ee0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003e5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003e62:	f7fc fcbf 	bl	80007e4 <__aeabi_ddiv>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f7fc fdc1 	bl	80009f4 <__aeabi_d2f>
 8003e72:	4603      	mov	r3, r0
 8003e74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003e76:	6013      	str	r3, [r2, #0]
//
		MotorKalman_Estimate(&motor_filter, rev_vin, revolute_encoder.rads);
 8003e78:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003e7a:	edd3 7a00 	vldr	s15, [r3]
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e80:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003e84:	eef0 0a47 	vmov.f32	s1, s14
 8003e88:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8c:	4816      	ldr	r0, [pc, #88]	@ (8003ee8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003e8e:	f7fe fa05 	bl	800229c <MotorKalman_Estimate>
		rev_kal_filt = SteadyStateKalmanFilter(&revolute_kalman, rev_vin, revolute_encoder.rads);
 8003e92:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003e9a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003e9e:	eef0 0a47 	vmov.f32	s1, s14
 8003ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea6:	4811      	ldr	r0, [pc, #68]	@ (8003eec <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003ea8:	f7ff fbcc 	bl	8003644 <SteadyStateKalmanFilter>
 8003eac:	eef0 7a40 	vmov.f32	s15, s0
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003eb2:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003eb8:	edd3 7a00 	vldr	s15, [r3]
 8003ebc:	eef0 0a67 	vmov.f32	s1, s15
 8003ec0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003ef4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003ec4:	480c      	ldr	r0, [pc, #48]	@ (8003ef8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003ec6:	f7fd f815 	bl	8000ef4 <MDXX_set_range>
	}
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20001930 	.word	0x20001930
 8003ed8:	20000744 	.word	0x20000744
 8003edc:	2000064c 	.word	0x2000064c
 8003ee0:	20000000 	.word	0x20000000
 8003ee4:	20000648 	.word	0x20000648
 8003ee8:	200002d4 	.word	0x200002d4
 8003eec:	20000e28 	.word	0x20000e28
 8003ef0:	20000644 	.word	0x20000644
 8003ef4:	44fa0000 	.word	0x44fa0000
 8003ef8:	2000069c 	.word	0x2000069c

08003efc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f00:	b672      	cpsid	i
}
 8003f02:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003f04:	bf00      	nop
 8003f06:	e7fd      	b.n	8003f04 <Error_Handler+0x8>

08003f08 <plotter_begin>:
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, up_photo, low_photo, up_lim, low_lim;
void plotter_begin() {
 8003f08:	b590      	push	{r4, r7, lr}
 8003f0a:	ed2d 8b02 	vpush	{d8}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8003f12:	2100      	movs	r1, #0
 8003f14:	48c8      	ldr	r0, [pc, #800]	@ (8004238 <plotter_begin+0x330>)
 8003f16:	f000 fabd 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8003f1a:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 800423c <plotter_begin+0x334>
 8003f1e:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8004240 <plotter_begin+0x338>
 8003f22:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8004244 <plotter_begin+0x33c>
 8003f26:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 8004244 <plotter_begin+0x33c>
 8003f2a:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8004248 <plotter_begin+0x340>
 8003f2e:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 800423c <plotter_begin+0x334>
 8003f32:	48c1      	ldr	r0, [pc, #772]	@ (8004238 <plotter_begin+0x330>)
 8003f34:	f000 fb0c 	bl	8004550 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8003f38:	2102      	movs	r1, #2
 8003f3a:	48c4      	ldr	r0, [pc, #784]	@ (800424c <plotter_begin+0x344>)
 8003f3c:	f000 faaa 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8003f40:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 800423c <plotter_begin+0x334>
 8003f44:	eddf 2abe 	vldr	s5, [pc, #760]	@ 8004240 <plotter_begin+0x338>
 8003f48:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 8004244 <plotter_begin+0x33c>
 8003f4c:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8004244 <plotter_begin+0x33c>
 8003f50:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003f54:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8004248 <plotter_begin+0x340>
 8003f58:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 800423c <plotter_begin+0x334>
 8003f5c:	48bb      	ldr	r0, [pc, #748]	@ (800424c <plotter_begin+0x344>)
 8003f5e:	f000 fb22 	bl	80045a6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8003f62:	2100      	movs	r1, #0
 8003f64:	48ba      	ldr	r0, [pc, #744]	@ (8004250 <plotter_begin+0x348>)
 8003f66:	f000 fa95 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8003f6a:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8003f6e:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8003f72:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8004244 <plotter_begin+0x33c>
 8003f76:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8004244 <plotter_begin+0x33c>
 8003f7a:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8004248 <plotter_begin+0x340>
 8003f7e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003f82:	48b3      	ldr	r0, [pc, #716]	@ (8004250 <plotter_begin+0x348>)
 8003f84:	f000 fae4 	bl	8004550 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8003f88:	2102      	movs	r1, #2
 8003f8a:	48b2      	ldr	r0, [pc, #712]	@ (8004254 <plotter_begin+0x34c>)
 8003f8c:	f000 fa82 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8003f90:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8003f94:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8003f98:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8004244 <plotter_begin+0x33c>
 8003f9c:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8004244 <plotter_begin+0x33c>
 8003fa0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003fa4:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8004248 <plotter_begin+0x340>
 8003fa8:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003fac:	48a9      	ldr	r0, [pc, #676]	@ (8004254 <plotter_begin+0x34c>)
 8003fae:	f000 fafa 	bl	80045a6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	48a8      	ldr	r0, [pc, #672]	@ (8004258 <plotter_begin+0x350>)
 8003fb6:	f000 fa6d 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fba:	4ba8      	ldr	r3, [pc, #672]	@ (800425c <plotter_begin+0x354>)
 8003fbc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003fc0:	4610      	mov	r0, r2
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f7fc fd16 	bl	80009f4 <__aeabi_d2f>
 8003fc8:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8003fca:	4ba4      	ldr	r3, [pc, #656]	@ (800425c <plotter_begin+0x354>)
 8003fcc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fd0e 	bl	80009f4 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fda:	ee07 3a90 	vmov	s15, r3
 8003fde:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8003fe2:	4b9e      	ldr	r3, [pc, #632]	@ (800425c <plotter_begin+0x354>)
 8003fe4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4619      	mov	r1, r3
 8003fec:	f7fc fd02 	bl	80009f4 <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	ee02 3a90 	vmov	s5, r3
 8003ff6:	eeb0 2a48 	vmov.f32	s4, s16
 8003ffa:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8004244 <plotter_begin+0x33c>
 8003ffe:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8004244 <plotter_begin+0x33c>
 8004002:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8004248 <plotter_begin+0x340>
 8004006:	ee00 4a10 	vmov	s0, r4
 800400a:	4893      	ldr	r0, [pc, #588]	@ (8004258 <plotter_begin+0x350>)
 800400c:	f000 faa0 	bl	8004550 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8004010:	2102      	movs	r1, #2
 8004012:	4893      	ldr	r0, [pc, #588]	@ (8004260 <plotter_begin+0x358>)
 8004014:	f000 fa3e 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004018:	4b90      	ldr	r3, [pc, #576]	@ (800425c <plotter_begin+0x354>)
 800401a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	f7fc fce7 	bl	80009f4 <__aeabi_d2f>
 8004026:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004028:	4b8c      	ldr	r3, [pc, #560]	@ (800425c <plotter_begin+0x354>)
 800402a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f7fc fcdf 	bl	80009f4 <__aeabi_d2f>
 8004036:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004038:	ee07 3a90 	vmov	s15, r3
 800403c:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004040:	4b86      	ldr	r3, [pc, #536]	@ (800425c <plotter_begin+0x354>)
 8004042:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f7fc fcd3 	bl	80009f4 <__aeabi_d2f>
 800404e:	4603      	mov	r3, r0
 8004050:	ee03 3a10 	vmov	s6, r3
 8004054:	eef0 2a48 	vmov.f32	s5, s16
 8004058:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8004244 <plotter_begin+0x33c>
 800405c:	eddf 1a79 	vldr	s3, [pc, #484]	@ 8004244 <plotter_begin+0x33c>
 8004060:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004064:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8004248 <plotter_begin+0x340>
 8004068:	ee00 4a10 	vmov	s0, r4
 800406c:	487c      	ldr	r0, [pc, #496]	@ (8004260 <plotter_begin+0x358>)
 800406e:	f000 fa9a 	bl	80045a6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8004072:	2100      	movs	r1, #0
 8004074:	487b      	ldr	r0, [pc, #492]	@ (8004264 <plotter_begin+0x35c>)
 8004076:	f000 fa0d 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800407a:	4b7b      	ldr	r3, [pc, #492]	@ (8004268 <plotter_begin+0x360>)
 800407c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	f7fc fcb6 	bl	80009f4 <__aeabi_d2f>
 8004088:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 800408a:	4b77      	ldr	r3, [pc, #476]	@ (8004268 <plotter_begin+0x360>)
 800408c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004090:	4610      	mov	r0, r2
 8004092:	4619      	mov	r1, r3
 8004094:	f7fc fcae 	bl	80009f4 <__aeabi_d2f>
 8004098:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80040a2:	4b71      	ldr	r3, [pc, #452]	@ (8004268 <plotter_begin+0x360>)
 80040a4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f7fc fca2 	bl	80009f4 <__aeabi_d2f>
 80040b0:	4603      	mov	r3, r0
 80040b2:	ee02 3a90 	vmov	s5, r3
 80040b6:	eeb0 2a48 	vmov.f32	s4, s16
 80040ba:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8004244 <plotter_begin+0x33c>
 80040be:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8004244 <plotter_begin+0x33c>
 80040c2:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8004248 <plotter_begin+0x340>
 80040c6:	ee00 4a10 	vmov	s0, r4
 80040ca:	4866      	ldr	r0, [pc, #408]	@ (8004264 <plotter_begin+0x35c>)
 80040cc:	f000 fa40 	bl	8004550 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80040d0:	2102      	movs	r1, #2
 80040d2:	4866      	ldr	r0, [pc, #408]	@ (800426c <plotter_begin+0x364>)
 80040d4:	f000 f9de 	bl	8004494 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80040d8:	4b63      	ldr	r3, [pc, #396]	@ (8004268 <plotter_begin+0x360>)
 80040da:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fc fc87 	bl	80009f4 <__aeabi_d2f>
 80040e6:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80040e8:	4b5f      	ldr	r3, [pc, #380]	@ (8004268 <plotter_begin+0x360>)
 80040ea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	f7fc fc7f 	bl	80009f4 <__aeabi_d2f>
 80040f6:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004100:	4b59      	ldr	r3, [pc, #356]	@ (8004268 <plotter_begin+0x360>)
 8004102:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fc73 	bl	80009f4 <__aeabi_d2f>
 800410e:	4603      	mov	r3, r0
 8004110:	ee03 3a10 	vmov	s6, r3
 8004114:	eef0 2a48 	vmov.f32	s5, s16
 8004118:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8004244 <plotter_begin+0x33c>
 800411c:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8004244 <plotter_begin+0x33c>
 8004120:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004124:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8004248 <plotter_begin+0x340>
 8004128:	ee00 4a10 	vmov	s0, r4
 800412c:	484f      	ldr	r0, [pc, #316]	@ (800426c <plotter_begin+0x364>)
 800412e:	f000 fa3a 	bl	80045a6 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004132:	4b4a      	ldr	r3, [pc, #296]	@ (800425c <plotter_begin+0x354>)
 8004134:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 8004138:	4b4d      	ldr	r3, [pc, #308]	@ (8004270 <plotter_begin+0x368>)
 800413a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800413e:	f7fc fa27 	bl	8000590 <__aeabi_dmul>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004146:	4945      	ldr	r1, [pc, #276]	@ (800425c <plotter_begin+0x354>)
 8004148:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 800414c:	4b43      	ldr	r3, [pc, #268]	@ (800425c <plotter_begin+0x354>)
 800414e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004152:	f04f 0200 	mov.w	r2, #0
 8004156:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <plotter_begin+0x36c>)
 8004158:	f7fc fa1a 	bl	8000590 <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	493e      	ldr	r1, [pc, #248]	@ (800425c <plotter_begin+0x354>)
 8004162:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 8004166:	4b42      	ldr	r3, [pc, #264]	@ (8004270 <plotter_begin+0x368>)
 8004168:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	f7fc f858 	bl	8000224 <__adddf3>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f7fc fc3a 	bl	80009f4 <__aeabi_d2f>
 8004180:	4603      	mov	r3, r0
 8004182:	ee00 3a90 	vmov	s1, r3
 8004186:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800418a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800418e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004192:	4939      	ldr	r1, [pc, #228]	@ (8004278 <plotter_begin+0x370>)
 8004194:	4839      	ldr	r0, [pc, #228]	@ (800427c <plotter_begin+0x374>)
 8004196:	f7fe fdcd 	bl	8002d34 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 800419a:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004244 <plotter_begin+0x33c>
 800419e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80041a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041aa:	4935      	ldr	r1, [pc, #212]	@ (8004280 <plotter_begin+0x378>)
 80041ac:	4835      	ldr	r0, [pc, #212]	@ (8004284 <plotter_begin+0x37c>)
 80041ae:	f7fe fdc1 	bl	8002d34 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80041b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041bc:	2204      	movs	r2, #4
 80041be:	4932      	ldr	r1, [pc, #200]	@ (8004288 <plotter_begin+0x380>)
 80041c0:	4832      	ldr	r0, [pc, #200]	@ (800428c <plotter_begin+0x384>)
 80041c2:	f7fc fe73 	bl	8000eac <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80041c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4b30      	ldr	r3, [pc, #192]	@ (8004290 <plotter_begin+0x388>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	492d      	ldr	r1, [pc, #180]	@ (8004288 <plotter_begin+0x380>)
 80041d2:	4830      	ldr	r0, [pc, #192]	@ (8004294 <plotter_begin+0x38c>)
 80041d4:	f7fc fe6a 	bl	8000eac <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80041d8:	220c      	movs	r2, #12
 80041da:	492f      	ldr	r1, [pc, #188]	@ (8004298 <plotter_begin+0x390>)
 80041dc:	482f      	ldr	r0, [pc, #188]	@ (800429c <plotter_begin+0x394>)
 80041de:	f7fe fb7d 	bl	80028dc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80041e2:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004244 <plotter_begin+0x33c>
 80041e6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80042a0 <plotter_begin+0x398>
 80041ea:	4828      	ldr	r0, [pc, #160]	@ (800428c <plotter_begin+0x384>)
 80041ec:	f7fc fe82 	bl	8000ef4 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80041f0:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8004244 <plotter_begin+0x33c>
 80041f4:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80042a0 <plotter_begin+0x398>
 80041f8:	4826      	ldr	r0, [pc, #152]	@ (8004294 <plotter_begin+0x38c>)
 80041fa:	f7fc fe7b 	bl	8000ef4 <MDXX_set_range>
	plotter_pen_up();
 80041fe:	f000 f939 	bl	8004474 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
			ZGX45RGG_400RPM_Constant.qd_max);
 8004202:	4b16      	ldr	r3, [pc, #88]	@ (800425c <plotter_begin+0x354>)
 8004204:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc fbf2 	bl	80009f4 <__aeabi_d2f>
 8004210:	4603      	mov	r3, r0
 8004212:	ee01 3a90 	vmov	s3, r3
 8004216:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80042a4 <plotter_begin+0x39c>
 800421a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800421e:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80042b0 <plotter_begin+0x3a8>
 8004222:	4821      	ldr	r0, [pc, #132]	@ (80042a8 <plotter_begin+0x3a0>)
 8004224:	f7fc fe18 	bl	8000e58 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <plotter_begin+0x354>)
 800422a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
 800422e:	4610      	mov	r0, r2
 8004230:	4619      	mov	r1, r3
 8004232:	f7fc fbdf 	bl	80009f4 <__aeabi_d2f>
 8004236:	e03d      	b.n	80042b4 <plotter_begin+0x3ac>
 8004238:	20000858 	.word	0x20000858
 800423c:	477fff00 	.word	0x477fff00
 8004240:	c77fff00 	.word	0xc77fff00
 8004244:	00000000 	.word	0x00000000
 8004248:	3dcccccd 	.word	0x3dcccccd
 800424c:	2000089c 	.word	0x2000089c
 8004250:	200008e0 	.word	0x200008e0
 8004254:	20000924 	.word	0x20000924
 8004258:	20000968 	.word	0x20000968
 800425c:	20000060 	.word	0x20000060
 8004260:	200009ac 	.word	0x200009ac
 8004264:	200009f0 	.word	0x200009f0
 8004268:	20000000 	.word	0x20000000
 800426c:	20000a34 	.word	0x20000a34
 8004270:	200000c0 	.word	0x200000c0
 8004274:	3fe00000 	.word	0x3fe00000
 8004278:	20001ac8 	.word	0x20001ac8
 800427c:	200006e8 	.word	0x200006e8
 8004280:	200019fc 	.word	0x200019fc
 8004284:	20000744 	.word	0x20000744
 8004288:	20001c60 	.word	0x20001c60
 800428c:	20000650 	.word	0x20000650
 8004290:	48000800 	.word	0x48000800
 8004294:	2000069c 	.word	0x2000069c
 8004298:	20001864 	.word	0x20001864
 800429c:	20000828 	.word	0x20000828
 80042a0:	44fa0000 	.word	0x44fa0000
 80042a4:	428c0000 	.word	0x428c0000
 80042a8:	200007a0 	.word	0x200007a0
 80042ac:	00000000 	.word	0x00000000
 80042b0:	43fa0000 	.word	0x43fa0000
 80042b4:	4603      	mov	r3, r0
 80042b6:	ee01 3a90 	vmov	s3, r3
 80042ba:	ed1f 1a04 	vldr	s2, [pc, #-16]	@ 80042ac <plotter_begin+0x3a4>
 80042be:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80042c2:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 80042b0 <plotter_begin+0x3a8>
 80042c6:	4847      	ldr	r0, [pc, #284]	@ (80043e4 <plotter_begin+0x4dc>)
 80042c8:	f7fc fdc6 	bl	8000e58 <PID_CONTROLLER_Init>

	//unit test
	//25 1e-8 0
	//2000 80 0
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
			ZGX45RGG_150RPM_Constant.qd_max);
 80042cc:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <plotter_begin+0x4e0>)
 80042ce:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fc fb8d 	bl	80009f4 <__aeabi_d2f>
 80042da:	4603      	mov	r3, r0
 80042dc:	ee01 3a90 	vmov	s3, r3
 80042e0:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 80043ec <plotter_begin+0x4e4>
 80042e4:	eddf 0a42 	vldr	s1, [pc, #264]	@ 80043f0 <plotter_begin+0x4e8>
 80042e8:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 80043f4 <plotter_begin+0x4ec>
 80042ec:	4842      	ldr	r0, [pc, #264]	@ (80043f8 <plotter_begin+0x4f0>)
 80042ee:	f7fc fdb3 	bl	8000e58 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 80042f2:	4b3d      	ldr	r3, [pc, #244]	@ (80043e8 <plotter_begin+0x4e0>)
 80042f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
 80042f8:	4610      	mov	r0, r2
 80042fa:	4619      	mov	r1, r3
 80042fc:	f7fc fb7a 	bl	80009f4 <__aeabi_d2f>
 8004300:	4603      	mov	r3, r0
 8004302:	ee01 3a90 	vmov	s3, r3
 8004306:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 80043fc <plotter_begin+0x4f4>
 800430a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800430e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8004400 <plotter_begin+0x4f8>
 8004312:	483c      	ldr	r0, [pc, #240]	@ (8004404 <plotter_begin+0x4fc>)
 8004314:	f7fc fda0 	bl	8000e58 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8004318:	4933      	ldr	r1, [pc, #204]	@ (80043e8 <plotter_begin+0x4e0>)
 800431a:	483b      	ldr	r0, [pc, #236]	@ (8004408 <plotter_begin+0x500>)
 800431c:	f7fc fec4 	bl	80010a8 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8004320:	493a      	ldr	r1, [pc, #232]	@ (800440c <plotter_begin+0x504>)
 8004322:	483b      	ldr	r0, [pc, #236]	@ (8004410 <plotter_begin+0x508>)
 8004324:	f7fc fee0 	bl	80010e8 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8004328:	4a3a      	ldr	r2, [pc, #232]	@ (8004414 <plotter_begin+0x50c>)
 800432a:	492f      	ldr	r1, [pc, #188]	@ (80043e8 <plotter_begin+0x4e0>)
 800432c:	483a      	ldr	r0, [pc, #232]	@ (8004418 <plotter_begin+0x510>)
 800432e:	f7fc fec9 	bl	80010c4 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8004332:	4a38      	ldr	r2, [pc, #224]	@ (8004414 <plotter_begin+0x50c>)
 8004334:	4935      	ldr	r1, [pc, #212]	@ (800440c <plotter_begin+0x504>)
 8004336:	4839      	ldr	r0, [pc, #228]	@ (800441c <plotter_begin+0x514>)
 8004338:	f7fc fee4 	bl	8001104 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 800433c:	2304      	movs	r3, #4
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8004420 <plotter_begin+0x518>
 8004344:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8004424 <plotter_begin+0x51c>
 8004348:	2328      	movs	r3, #40	@ 0x28
 800434a:	4a37      	ldr	r2, [pc, #220]	@ (8004428 <plotter_begin+0x520>)
 800434c:	4937      	ldr	r1, [pc, #220]	@ (800442c <plotter_begin+0x524>)
 800434e:	4838      	ldr	r0, [pc, #224]	@ (8004430 <plotter_begin+0x528>)
 8004350:	f7fc fd36 	bl	8000dc0 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8004354:	4836      	ldr	r0, [pc, #216]	@ (8004430 <plotter_begin+0x528>)
 8004356:	f7fc fd68 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800435a:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8004400 <plotter_begin+0x4f8>
 800435e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004362:	211f      	movs	r1, #31
 8004364:	4833      	ldr	r0, [pc, #204]	@ (8004434 <plotter_begin+0x52c>)
 8004366:	f7fc fedf 	bl	8001128 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800436a:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8004400 <plotter_begin+0x4f8>
 800436e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004372:	211f      	movs	r1, #31
 8004374:	4830      	ldr	r0, [pc, #192]	@ (8004438 <plotter_begin+0x530>)
 8004376:	f7fc fed7 	bl	8001128 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800437a:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8004400 <plotter_begin+0x4f8>
 800437e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004382:	211f      	movs	r1, #31
 8004384:	482d      	ldr	r0, [pc, #180]	@ (800443c <plotter_begin+0x534>)
 8004386:	f7fc fecf 	bl	8001128 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800438a:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8004400 <plotter_begin+0x4f8>
 800438e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004392:	211f      	movs	r1, #31
 8004394:	482a      	ldr	r0, [pc, #168]	@ (8004440 <plotter_begin+0x538>)
 8004396:	f7fc fec7 	bl	8001128 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 800439a:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8004444 <plotter_begin+0x53c>
 800439e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043a2:	4a29      	ldr	r2, [pc, #164]	@ (8004448 <plotter_begin+0x540>)
 80043a4:	4929      	ldr	r1, [pc, #164]	@ (800444c <plotter_begin+0x544>)
 80043a6:	482a      	ldr	r0, [pc, #168]	@ (8004450 <plotter_begin+0x548>)
 80043a8:	f7ff fa96 	bl	80038d8 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 80043ac:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8004444 <plotter_begin+0x53c>
 80043b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80043b4:	4a27      	ldr	r2, [pc, #156]	@ (8004454 <plotter_begin+0x54c>)
 80043b6:	4928      	ldr	r1, [pc, #160]	@ (8004458 <plotter_begin+0x550>)
 80043b8:	4828      	ldr	r0, [pc, #160]	@ (800445c <plotter_begin+0x554>)
 80043ba:	f7ff fa8d 	bl	80038d8 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80043be:	23c8      	movs	r3, #200	@ 0xc8
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	2315      	movs	r3, #21
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <plotter_begin+0x558>)
 80043c8:	4a26      	ldr	r2, [pc, #152]	@ (8004464 <plotter_begin+0x55c>)
 80043ca:	4927      	ldr	r1, [pc, #156]	@ (8004468 <plotter_begin+0x560>)
 80043cc:	4827      	ldr	r0, [pc, #156]	@ (800446c <plotter_begin+0x564>)
 80043ce:	f7fd f80b 	bl	80013e8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80043d2:	4827      	ldr	r0, [pc, #156]	@ (8004470 <plotter_begin+0x568>)
 80043d4:	f004 fc90 	bl	8008cf8 <HAL_TIM_Base_Start_IT>
}
 80043d8:	bf00      	nop
 80043da:	3704      	adds	r7, #4
 80043dc:	46bd      	mov	sp, r7
 80043de:	ecbd 8b02 	vpop	{d8}
 80043e2:	bd90      	pop	{r4, r7, pc}
 80043e4:	200007bc 	.word	0x200007bc
 80043e8:	20000000 	.word	0x20000000
 80043ec:	42900000 	.word	0x42900000
 80043f0:	3089705f 	.word	0x3089705f
 80043f4:	43fa0000 	.word	0x43fa0000
 80043f8:	200007d8 	.word	0x200007d8
 80043fc:	00000000 	.word	0x00000000
 8004400:	447a0000 	.word	0x447a0000
 8004404:	200007f4 	.word	0x200007f4
 8004408:	2000081c 	.word	0x2000081c
 800440c:	20000060 	.word	0x20000060
 8004410:	20000810 	.word	0x20000810
 8004414:	200000c0 	.word	0x200000c0
 8004418:	20000820 	.word	0x20000820
 800441c:	20000814 	.word	0x20000814
 8004420:	457ff000 	.word	0x457ff000
 8004424:	40533333 	.word	0x40533333
 8004428:	200011a8 	.word	0x200011a8
 800442c:	20000208 	.word	0x20000208
 8004430:	20000840 	.word	0x20000840
 8004434:	20000a84 	.word	0x20000a84
 8004438:	20000a78 	.word	0x20000a78
 800443c:	20000a9c 	.word	0x20000a9c
 8004440:	20000a90 	.word	0x20000a90
 8004444:	3d4ccccd 	.word	0x3d4ccccd
 8004448:	2000017c 	.word	0x2000017c
 800444c:	2000013c 	.word	0x2000013c
 8004450:	20000e28 	.word	0x20000e28
 8004454:	2000012c 	.word	0x2000012c
 8004458:	200000ec 	.word	0x200000ec
 800445c:	20000aa8 	.word	0x20000aa8
 8004460:	200016d0 	.word	0x200016d0
 8004464:	20001d2c 	.word	0x20001d2c
 8004468:	20001ec4 	.word	0x20001ec4
 800446c:	200011f8 	.word	0x200011f8
 8004470:	20001930 	.word	0x20001930

08004474 <plotter_pen_up>:

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}

void plotter_pen_up() {
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8004478:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 800447c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800448c <plotter_pen_up+0x18>
 8004480:	4803      	ldr	r0, [pc, #12]	@ (8004490 <plotter_pen_up+0x1c>)
 8004482:	f7fe fa4d 	bl	8002920 <PWM_write_duty>
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	42480000 	.word	0x42480000
 8004490:	20000828 	.word	0x20000828

08004494 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	78fa      	ldrb	r2, [r7, #3]
 80044a4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044ac:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044b4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f04f 0200 	mov.w	r2, #0
 80044cc:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <SIGNAL_init+0xb4>)
 80044da:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044e2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80044e4:	78fb      	ldrb	r3, [r7, #3]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d828      	bhi.n	800453c <SIGNAL_init+0xa8>
 80044ea:	a201      	add	r2, pc, #4	@ (adr r2, 80044f0 <SIGNAL_init+0x5c>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	0800453b 	.word	0x0800453b
 80044f4:	08004501 	.word	0x08004501
 80044f8:	0800451f 	.word	0x0800451f
 80044fc:	08004529 	.word	0x08004529
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800450c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <SIGNAL_init+0xb8>)
 8004512:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800451a:	621a      	str	r2, [r3, #32]
            break;
 800451c:	e00e      	b.n	800453c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8004524:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8004526:	e009      	b.n	800453c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8004538:	e000      	b.n	800453c <SIGNAL_init+0xa8>
            break;
 800453a:	bf00      	nop
    }
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr
 8004548:	bf800000 	.word	0xbf800000
 800454c:	41200000 	.word	0x41200000

08004550 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	@ 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	61f8      	str	r0, [r7, #28]
 8004558:	ed87 0a06 	vstr	s0, [r7, #24]
 800455c:	edc7 0a05 	vstr	s1, [r7, #20]
 8004560:	ed87 1a04 	vstr	s2, [r7, #16]
 8004564:	edc7 1a03 	vstr	s3, [r7, #12]
 8004568:	ed87 2a02 	vstr	s4, [r7, #8]
 800456c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	2200      	movs	r2, #0
 8004574:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800459a:	bf00      	nop
 800459c:	3724      	adds	r7, #36	@ 0x24
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80045a6:	b480      	push	{r7}
 80045a8:	b089      	sub	sp, #36	@ 0x24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	61f8      	str	r0, [r7, #28]
 80045ae:	ed87 0a06 	vstr	s0, [r7, #24]
 80045b2:	edc7 0a05 	vstr	s1, [r7, #20]
 80045b6:	ed87 1a04 	vstr	s2, [r7, #16]
 80045ba:	edc7 1a03 	vstr	s3, [r7, #12]
 80045be:	ed87 2a02 	vstr	s4, [r7, #8]
 80045c2:	edc7 2a01 	vstr	s5, [r7, #4]
 80045c6:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2202      	movs	r2, #2
 80045ce:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80045fa:	bf00      	nop
 80045fc:	3724      	adds	r7, #36	@ 0x24
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800460e:	4b0f      	ldr	r3, [pc, #60]	@ (800464c <HAL_MspInit+0x44>)
 8004610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004612:	4a0e      	ldr	r2, [pc, #56]	@ (800464c <HAL_MspInit+0x44>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6613      	str	r3, [r2, #96]	@ 0x60
 800461a:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <HAL_MspInit+0x44>)
 800461c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	607b      	str	r3, [r7, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004626:	4b09      	ldr	r3, [pc, #36]	@ (800464c <HAL_MspInit+0x44>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <HAL_MspInit+0x44>)
 800462c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6593      	str	r3, [r2, #88]	@ 0x58
 8004632:	4b06      	ldr	r3, [pc, #24]	@ (800464c <HAL_MspInit+0x44>)
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800463a:	603b      	str	r3, [r7, #0]
 800463c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800463e:	f003 fafb 	bl	8007c38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004642:	bf00      	nop
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40021000 	.word	0x40021000

08004650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <NMI_Handler+0x4>

08004658 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <HardFault_Handler+0x4>

08004660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004660:	b480      	push	{r7}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <MemManage_Handler+0x4>

08004668 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <BusFault_Handler+0x4>

08004670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <UsageFault_Handler+0x4>

08004678 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004686:	b480      	push	{r7}
 8004688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004694:	b480      	push	{r7}
 8004696:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80046a6:	f000 ff99 	bl	80055dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80046aa:	bf00      	nop
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <DMA1_Channel1_IRQHandler+0x10>)
 80046b6:	f002 ff1a 	bl	80074ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000274 	.word	0x20000274

080046c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <DMA1_Channel2_IRQHandler+0x10>)
 80046ca:	f002 ff10 	bl	80074ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20002050 	.word	0x20002050

080046d8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80046dc:	4802      	ldr	r0, [pc, #8]	@ (80046e8 <DMA1_Channel3_IRQHandler+0x10>)
 80046de:	f002 ff06 	bl	80074ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80046e2:	bf00      	nop
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200020b0 	.word	0x200020b0

080046ec <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80046f0:	4802      	ldr	r0, [pc, #8]	@ (80046fc <DMA1_Channel4_IRQHandler+0x10>)
 80046f2:	f002 fefc 	bl	80074ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80046f6:	bf00      	nop
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20001f90 	.word	0x20001f90

08004700 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004704:	4802      	ldr	r0, [pc, #8]	@ (8004710 <DMA1_Channel5_IRQHandler+0x10>)
 8004706:	f002 fef2 	bl	80074ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20001ff0 	.word	0x20001ff0

08004714 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004718:	4803      	ldr	r0, [pc, #12]	@ (8004728 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800471a:	f004 ff13 	bl	8009544 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800471e:	4803      	ldr	r0, [pc, #12]	@ (800472c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004720:	f004 ff10 	bl	8009544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004724:	bf00      	nop
 8004726:	bd80      	pop	{r7, pc}
 8004728:	20001864 	.word	0x20001864
 800472c:	20001d2c 	.word	0x20001d2c

08004730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004734:	4802      	ldr	r0, [pc, #8]	@ (8004740 <TIM2_IRQHandler+0x10>)
 8004736:	f004 ff05 	bl	8009544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20001930 	.word	0x20001930

08004744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004748:	4802      	ldr	r0, [pc, #8]	@ (8004754 <TIM3_IRQHandler+0x10>)
 800474a:	f004 fefb 	bl	8009544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800474e:	bf00      	nop
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	200019fc 	.word	0x200019fc

08004758 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800475c:	4802      	ldr	r0, [pc, #8]	@ (8004768 <TIM4_IRQHandler+0x10>)
 800475e:	f004 fef1 	bl	8009544 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004762:	bf00      	nop
 8004764:	bd80      	pop	{r7, pc}
 8004766:	bf00      	nop
 8004768:	20001ac8 	.word	0x20001ac8

0800476c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004770:	4802      	ldr	r0, [pc, #8]	@ (800477c <USART2_IRQHandler+0x10>)
 8004772:	f006 fc3b 	bl	800afec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004776:	bf00      	nop
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20001ec4 	.word	0x20001ec4

08004780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004784:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004788:	f003 f99a 	bl	8007ac0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	bd80      	pop	{r7, pc}

08004790 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004794:	4802      	ldr	r0, [pc, #8]	@ (80047a0 <LPUART1_IRQHandler+0x10>)
 8004796:	f006 fc29 	bl	800afec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	20001df8 	.word	0x20001df8

080047a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80047ac:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <_sbrk+0x5c>)
 80047ae:	4b15      	ldr	r3, [pc, #84]	@ (8004804 <_sbrk+0x60>)
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047b8:	4b13      	ldr	r3, [pc, #76]	@ (8004808 <_sbrk+0x64>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047c0:	4b11      	ldr	r3, [pc, #68]	@ (8004808 <_sbrk+0x64>)
 80047c2:	4a12      	ldr	r2, [pc, #72]	@ (800480c <_sbrk+0x68>)
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047c6:	4b10      	ldr	r3, [pc, #64]	@ (8004808 <_sbrk+0x64>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d207      	bcs.n	80047e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047d4:	f008 fe8e 	bl	800d4f4 <__errno>
 80047d8:	4603      	mov	r3, r0
 80047da:	220c      	movs	r2, #12
 80047dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	e009      	b.n	80047f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047e4:	4b08      	ldr	r3, [pc, #32]	@ (8004808 <_sbrk+0x64>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ea:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <_sbrk+0x64>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a05      	ldr	r2, [pc, #20]	@ (8004808 <_sbrk+0x64>)
 80047f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20020000 	.word	0x20020000
 8004804:	00000400 	.word	0x00000400
 8004808:	20001860 	.word	0x20001860
 800480c:	20002260 	.word	0x20002260

08004810 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <SystemInit+0x20>)
 8004816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800481a:	4a05      	ldr	r2, [pc, #20]	@ (8004830 <SystemInit+0x20>)
 800481c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	e000ed00 	.word	0xe000ed00

08004834 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b098      	sub	sp, #96	@ 0x60
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800483a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	605a      	str	r2, [r3, #4]
 8004844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004846:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	609a      	str	r2, [r3, #8]
 8004852:	60da      	str	r2, [r3, #12]
 8004854:	611a      	str	r2, [r3, #16]
 8004856:	615a      	str	r2, [r3, #20]
 8004858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	2234      	movs	r2, #52	@ 0x34
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f008 fe2f 	bl	800d4c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004866:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004868:	4a3b      	ldr	r2, [pc, #236]	@ (8004958 <MX_TIM1_Init+0x124>)
 800486a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800486c:	4b39      	ldr	r3, [pc, #228]	@ (8004954 <MX_TIM1_Init+0x120>)
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004872:	4b38      	ldr	r3, [pc, #224]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004878:	4b36      	ldr	r3, [pc, #216]	@ (8004954 <MX_TIM1_Init+0x120>)
 800487a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800487e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004880:	4b34      	ldr	r3, [pc, #208]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004886:	4b33      	ldr	r3, [pc, #204]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800488c:	4b31      	ldr	r3, [pc, #196]	@ (8004954 <MX_TIM1_Init+0x120>)
 800488e:	2200      	movs	r2, #0
 8004890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004892:	4830      	ldr	r0, [pc, #192]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004894:	f004 faa8 	bl	8008de8 <HAL_TIM_PWM_Init>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800489e:	f7ff fb2d 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048a2:	2300      	movs	r3, #0
 80048a4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048aa:	2300      	movs	r3, #0
 80048ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048ae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80048b2:	4619      	mov	r1, r3
 80048b4:	4827      	ldr	r0, [pc, #156]	@ (8004954 <MX_TIM1_Init+0x120>)
 80048b6:	f006 f8b9 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d001      	beq.n	80048c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80048c0:	f7ff fb1c 	bl	8003efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80048c4:	2360      	movs	r3, #96	@ 0x60
 80048c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80048c8:	2300      	movs	r3, #0
 80048ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80048cc:	2300      	movs	r3, #0
 80048ce:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80048d0:	2300      	movs	r3, #0
 80048d2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80048d4:	2300      	movs	r3, #0
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80048d8:	2300      	movs	r3, #0
 80048da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80048dc:	2300      	movs	r3, #0
 80048de:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80048e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80048e4:	220c      	movs	r2, #12
 80048e6:	4619      	mov	r1, r3
 80048e8:	481a      	ldr	r0, [pc, #104]	@ (8004954 <MX_TIM1_Init+0x120>)
 80048ea:	f004 ffa5 	bl	8009838 <HAL_TIM_PWM_ConfigChannel>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80048f4:	f7ff fb02 	bl	8003efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80048f8:	2300      	movs	r3, #0
 80048fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80048fc:	2300      	movs	r3, #0
 80048fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800490c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004910:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004912:	2300      	movs	r3, #0
 8004914:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004916:	2300      	movs	r3, #0
 8004918:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800491e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004928:	2300      	movs	r3, #0
 800492a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800492c:	2300      	movs	r3, #0
 800492e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004930:	1d3b      	adds	r3, r7, #4
 8004932:	4619      	mov	r1, r3
 8004934:	4807      	ldr	r0, [pc, #28]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004936:	f006 f90f 	bl	800ab58 <HAL_TIMEx_ConfigBreakDeadTime>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004940:	f7ff fadc 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004944:	4803      	ldr	r0, [pc, #12]	@ (8004954 <MX_TIM1_Init+0x120>)
 8004946:	f000 fb5b 	bl	8005000 <HAL_TIM_MspPostInit>

}
 800494a:	bf00      	nop
 800494c:	3760      	adds	r7, #96	@ 0x60
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20001864 	.word	0x20001864
 8004958:	40012c00 	.word	0x40012c00

0800495c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004962:	f107 0310 	add.w	r3, r7, #16
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	609a      	str	r2, [r3, #8]
 800496e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004970:	1d3b      	adds	r3, r7, #4
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800497a:	4b1e      	ldr	r3, [pc, #120]	@ (80049f4 <MX_TIM2_Init+0x98>)
 800497c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004980:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8004982:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <MX_TIM2_Init+0x98>)
 8004984:	22a9      	movs	r2, #169	@ 0xa9
 8004986:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004988:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <MX_TIM2_Init+0x98>)
 800498a:	2200      	movs	r2, #0
 800498c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800498e:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <MX_TIM2_Init+0x98>)
 8004990:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004994:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004996:	4b17      	ldr	r3, [pc, #92]	@ (80049f4 <MX_TIM2_Init+0x98>)
 8004998:	2200      	movs	r2, #0
 800499a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800499c:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <MX_TIM2_Init+0x98>)
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80049a2:	4814      	ldr	r0, [pc, #80]	@ (80049f4 <MX_TIM2_Init+0x98>)
 80049a4:	f004 f8d4 	bl	8008b50 <HAL_TIM_Base_Init>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80049ae:	f7ff faa5 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	4619      	mov	r1, r3
 80049be:	480d      	ldr	r0, [pc, #52]	@ (80049f4 <MX_TIM2_Init+0x98>)
 80049c0:	f005 f84e 	bl	8009a60 <HAL_TIM_ConfigClockSource>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80049ca:	f7ff fa97 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80049d6:	1d3b      	adds	r3, r7, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4806      	ldr	r0, [pc, #24]	@ (80049f4 <MX_TIM2_Init+0x98>)
 80049dc:	f006 f826 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80049e6:	f7ff fa89 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	20001930 	.word	0x20001930

080049f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08c      	sub	sp, #48	@ 0x30
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049fe:	f107 030c 	add.w	r3, r7, #12
 8004a02:	2224      	movs	r2, #36	@ 0x24
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f008 fd5c 	bl	800d4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a0c:	463b      	mov	r3, r7
 8004a0e:	2200      	movs	r2, #0
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a16:	4b21      	ldr	r3, [pc, #132]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a18:	4a21      	ldr	r2, [pc, #132]	@ (8004aa0 <MX_TIM3_Init+0xa8>)
 8004a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a22:	4b1e      	ldr	r3, [pc, #120]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004a28:	4b1c      	ldr	r3, [pc, #112]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a30:	4b1a      	ldr	r3, [pc, #104]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a36:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a44:	2301      	movs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a54:	2301      	movs	r3, #1
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8004a60:	f107 030c 	add.w	r3, r7, #12
 8004a64:	4619      	mov	r1, r3
 8004a66:	480d      	ldr	r0, [pc, #52]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a68:	f004 fc2a 	bl	80092c0 <HAL_TIM_Encoder_Init>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8004a72:	f7ff fa43 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a7e:	463b      	mov	r3, r7
 8004a80:	4619      	mov	r1, r3
 8004a82:	4806      	ldr	r0, [pc, #24]	@ (8004a9c <MX_TIM3_Init+0xa4>)
 8004a84:	f005 ffd2 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8004a8e:	f7ff fa35 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004a92:	bf00      	nop
 8004a94:	3730      	adds	r7, #48	@ 0x30
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	200019fc 	.word	0x200019fc
 8004aa0:	40000400 	.word	0x40000400

08004aa4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	@ 0x30
 8004aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004aaa:	f107 030c 	add.w	r3, r7, #12
 8004aae:	2224      	movs	r2, #36	@ 0x24
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f008 fd06 	bl	800d4c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ab8:	463b      	mov	r3, r7
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	605a      	str	r2, [r3, #4]
 8004ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ac2:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004ac4:	4a21      	ldr	r2, [pc, #132]	@ (8004b4c <MX_TIM4_Init+0xa8>)
 8004ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004ac8:	4b1f      	ldr	r3, [pc, #124]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ace:	4b1e      	ldr	r3, [pc, #120]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ae2:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004af0:	2301      	movs	r3, #1
 8004af2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004afc:	2300      	movs	r3, #0
 8004afe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b00:	2301      	movs	r3, #1
 8004b02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b04:	2300      	movs	r3, #0
 8004b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004b0c:	f107 030c 	add.w	r3, r7, #12
 8004b10:	4619      	mov	r1, r3
 8004b12:	480d      	ldr	r0, [pc, #52]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004b14:	f004 fbd4 	bl	80092c0 <HAL_TIM_Encoder_Init>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8004b1e:	f7ff f9ed 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b22:	2300      	movs	r3, #0
 8004b24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b2a:	463b      	mov	r3, r7
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4806      	ldr	r0, [pc, #24]	@ (8004b48 <MX_TIM4_Init+0xa4>)
 8004b30:	f005 ff7c 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8004b3a:	f7ff f9df 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004b3e:	bf00      	nop
 8004b40:	3730      	adds	r7, #48	@ 0x30
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20001ac8 	.word	0x20001ac8
 8004b4c:	40000800 	.word	0x40000800

08004b50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
 8004b60:	609a      	str	r2, [r3, #8]
 8004b62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b70:	4a1d      	ldr	r2, [pc, #116]	@ (8004be8 <MX_TIM5_Init+0x98>)
 8004b72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8004b74:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b76:	22a9      	movs	r2, #169	@ 0xa9
 8004b78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004b80:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b82:	f04f 32ff 	mov.w	r2, #4294967295
 8004b86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b88:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004b94:	4813      	ldr	r0, [pc, #76]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004b96:	f003 ffdb 	bl	8008b50 <HAL_TIM_Base_Init>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004ba0:	f7ff f9ac 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ba8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004baa:	f107 0310 	add.w	r3, r7, #16
 8004bae:	4619      	mov	r1, r3
 8004bb0:	480c      	ldr	r0, [pc, #48]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004bb2:	f004 ff55 	bl	8009a60 <HAL_TIM_ConfigClockSource>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004bbc:	f7ff f99e 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004bc8:	1d3b      	adds	r3, r7, #4
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4805      	ldr	r0, [pc, #20]	@ (8004be4 <MX_TIM5_Init+0x94>)
 8004bce:	f005 ff2d 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004bd8:	f7ff f990 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004bdc:	bf00      	nop
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20001b94 	.word	0x20001b94
 8004be8:	40000c00 	.word	0x40000c00

08004bec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b09c      	sub	sp, #112	@ 0x70
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bf2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004c0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	611a      	str	r2, [r3, #16]
 8004c1c:	615a      	str	r2, [r3, #20]
 8004c1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004c20:	1d3b      	adds	r3, r7, #4
 8004c22:	2234      	movs	r2, #52	@ 0x34
 8004c24:	2100      	movs	r1, #0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f008 fc4c 	bl	800d4c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c2c:	4b51      	ldr	r3, [pc, #324]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c2e:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <MX_TIM8_Init+0x18c>)
 8004c30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004c32:	4b50      	ldr	r3, [pc, #320]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c38:	4b4e      	ldr	r3, [pc, #312]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c46:	4b4b      	ldr	r3, [pc, #300]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004c4c:	4b49      	ldr	r3, [pc, #292]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c52:	4b48      	ldr	r3, [pc, #288]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004c58:	4846      	ldr	r0, [pc, #280]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c5a:	f003 ff79 	bl	8008b50 <HAL_TIM_Base_Init>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8004c64:	f7ff f94a 	bl	8003efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004c6c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004c6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004c72:	4619      	mov	r1, r3
 8004c74:	483f      	ldr	r0, [pc, #252]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c76:	f004 fef3 	bl	8009a60 <HAL_TIM_ConfigClockSource>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8004c80:	f7ff f93c 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004c84:	483b      	ldr	r0, [pc, #236]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004c86:	f004 f8af 	bl	8008de8 <HAL_TIM_PWM_Init>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8004c90:	f7ff f934 	bl	8003efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c94:	2300      	movs	r3, #0
 8004c96:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ca0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4833      	ldr	r0, [pc, #204]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004ca8:	f005 fec0 	bl	800aa2c <HAL_TIMEx_MasterConfigSynchronization>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8004cb2:	f7ff f923 	bl	8003efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004cb6:	2360      	movs	r3, #96	@ 0x60
 8004cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004cd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	4619      	mov	r1, r3
 8004cda:	4826      	ldr	r0, [pc, #152]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004cdc:	f004 fdac 	bl	8009838 <HAL_TIM_PWM_ConfigChannel>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8004ce6:	f7ff f909 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004cea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004cee:	2204      	movs	r2, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4820      	ldr	r0, [pc, #128]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004cf4:	f004 fda0 	bl	8009838 <HAL_TIM_PWM_ConfigChannel>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8004cfe:	f7ff f8fd 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004d02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004d06:	2208      	movs	r2, #8
 8004d08:	4619      	mov	r1, r3
 8004d0a:	481a      	ldr	r0, [pc, #104]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004d0c:	f004 fd94 	bl	8009838 <HAL_TIM_PWM_ConfigChannel>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8004d16:	f7ff f8f1 	bl	8003efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004d22:	2300      	movs	r3, #0
 8004d24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004d32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004d40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004d46:	2300      	movs	r3, #0
 8004d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	4619      	mov	r1, r3
 8004d56:	4807      	ldr	r0, [pc, #28]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004d58:	f005 fefe 	bl	800ab58 <HAL_TIMEx_ConfigBreakDeadTime>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8004d62:	f7ff f8cb 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004d66:	4803      	ldr	r0, [pc, #12]	@ (8004d74 <MX_TIM8_Init+0x188>)
 8004d68:	f000 f94a 	bl	8005000 <HAL_TIM_MspPostInit>

}
 8004d6c:	bf00      	nop
 8004d6e:	3770      	adds	r7, #112	@ 0x70
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	20001c60 	.word	0x20001c60
 8004d78:	40013400 	.word	0x40013400

08004d7c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004d80:	4b14      	ldr	r3, [pc, #80]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004d82:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <MX_TIM16_Init+0x5c>)
 8004d84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004d86:	4b13      	ldr	r3, [pc, #76]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004d88:	22a9      	movs	r2, #169	@ 0xa9
 8004d8a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d8c:	4b11      	ldr	r3, [pc, #68]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004d92:	4b10      	ldr	r3, [pc, #64]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004d94:	f240 4279 	movw	r2, #1145	@ 0x479
 8004d98:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004da0:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004da6:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004dac:	4809      	ldr	r0, [pc, #36]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004dae:	f003 fecf 	bl	8008b50 <HAL_TIM_Base_Init>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004db8:	f7ff f8a0 	bl	8003efc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004dbc:	2108      	movs	r1, #8
 8004dbe:	4805      	ldr	r0, [pc, #20]	@ (8004dd4 <MX_TIM16_Init+0x58>)
 8004dc0:	f004 f988 	bl	80090d4 <HAL_TIM_OnePulse_Init>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8004dca:	f7ff f897 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20001d2c 	.word	0x20001d2c
 8004dd8:	40014400 	.word	0x40014400

08004ddc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <HAL_TIM_PWM_MspInit+0x44>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d113      	bne.n	8004e16 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <HAL_TIM_PWM_MspInit+0x48>)
 8004df0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df2:	4a0c      	ldr	r2, [pc, #48]	@ (8004e24 <HAL_TIM_PWM_MspInit+0x48>)
 8004df4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004df8:	6613      	str	r3, [r2, #96]	@ 0x60
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <HAL_TIM_PWM_MspInit+0x48>)
 8004dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2100      	movs	r1, #0
 8004e0a:	2019      	movs	r0, #25
 8004e0c:	f002 f957 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004e10:	2019      	movs	r0, #25
 8004e12:	f002 f96e 	bl	80070f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40012c00 	.word	0x40012c00
 8004e24:	40021000 	.word	0x40021000

08004e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b086      	sub	sp, #24
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e38:	d114      	bne.n	8004e64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e46:	4b28      	ldr	r3, [pc, #160]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e52:	2200      	movs	r2, #0
 8004e54:	2100      	movs	r1, #0
 8004e56:	201c      	movs	r0, #28
 8004e58:	f002 f931 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e5c:	201c      	movs	r0, #28
 8004e5e:	f002 f948 	bl	80070f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004e62:	e03c      	b.n	8004ede <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a20      	ldr	r2, [pc, #128]	@ (8004eec <HAL_TIM_Base_MspInit+0xc4>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d10c      	bne.n	8004e88 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e74:	f043 0308 	orr.w	r3, r3, #8
 8004e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
}
 8004e86:	e02a      	b.n	8004ede <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a18      	ldr	r2, [pc, #96]	@ (8004ef0 <HAL_TIM_Base_MspInit+0xc8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10c      	bne.n	8004eac <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e92:	4b15      	ldr	r3, [pc, #84]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e96:	4a14      	ldr	r2, [pc, #80]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004e98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
}
 8004eaa:	e018      	b.n	8004ede <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a10      	ldr	r2, [pc, #64]	@ (8004ef4 <HAL_TIM_Base_MspInit+0xcc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d113      	bne.n	8004ede <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eba:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <HAL_TIM_Base_MspInit+0xc0>)
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	60bb      	str	r3, [r7, #8]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	2019      	movs	r0, #25
 8004ed4:	f002 f8f3 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ed8:	2019      	movs	r0, #25
 8004eda:	f002 f90a 	bl	80070f2 <HAL_NVIC_EnableIRQ>
}
 8004ede:	bf00      	nop
 8004ee0:	3718      	adds	r7, #24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40000c00 	.word	0x40000c00
 8004ef0:	40013400 	.word	0x40013400
 8004ef4:	40014400 	.word	0x40014400

08004ef8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08c      	sub	sp, #48	@ 0x30
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	f107 031c 	add.w	r3, r7, #28
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a37      	ldr	r2, [pc, #220]	@ (8004ff4 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d131      	bne.n	8004f7e <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f1a:	4b37      	ldr	r3, [pc, #220]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1e:	4a36      	ldr	r2, [pc, #216]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f20:	f043 0302 	orr.w	r3, r3, #2
 8004f24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f26:	4b34      	ldr	r3, [pc, #208]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	61bb      	str	r3, [r7, #24]
 8004f30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f32:	4b31      	ldr	r3, [pc, #196]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	4a30      	ldr	r2, [pc, #192]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f4a:	23c0      	movs	r3, #192	@ 0xc0
 8004f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4e:	2302      	movs	r3, #2
 8004f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5e:	f107 031c 	add.w	r3, r7, #28
 8004f62:	4619      	mov	r1, r3
 8004f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f68:	f002 fc10 	bl	800778c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	2100      	movs	r1, #0
 8004f70:	201d      	movs	r0, #29
 8004f72:	f002 f8a4 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f76:	201d      	movs	r0, #29
 8004f78:	f002 f8bb 	bl	80070f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004f7c:	e036      	b.n	8004fec <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1e      	ldr	r2, [pc, #120]	@ (8004ffc <HAL_TIM_Encoder_MspInit+0x104>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d131      	bne.n	8004fec <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004f88:	4b1b      	ldr	r3, [pc, #108]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f8e:	f043 0304 	orr.w	r3, r3, #4
 8004f92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f94:	4b18      	ldr	r3, [pc, #96]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fa0:	4b15      	ldr	r3, [pc, #84]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	4a14      	ldr	r2, [pc, #80]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004fac:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <HAL_TIM_Encoder_MspInit+0x100>)
 8004fae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	60fb      	str	r3, [r7, #12]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004fb8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004fca:	230a      	movs	r3, #10
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 031c 	add.w	r3, r7, #28
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd8:	f002 fbd8 	bl	800778c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2100      	movs	r1, #0
 8004fe0:	201e      	movs	r0, #30
 8004fe2:	f002 f86c 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004fe6:	201e      	movs	r0, #30
 8004fe8:	f002 f883 	bl	80070f2 <HAL_NVIC_EnableIRQ>
}
 8004fec:	bf00      	nop
 8004fee:	3730      	adds	r7, #48	@ 0x30
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40000400 	.word	0x40000400
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	40000800 	.word	0x40000800

08005000 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b08a      	sub	sp, #40	@ 0x28
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	609a      	str	r2, [r3, #8]
 8005014:	60da      	str	r2, [r3, #12]
 8005016:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a30      	ldr	r2, [pc, #192]	@ (80050e0 <HAL_TIM_MspPostInit+0xe0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d11c      	bne.n	800505c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005022:	4b30      	ldr	r3, [pc, #192]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005026:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800502e:	4b2d      	ldr	r3, [pc, #180]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	613b      	str	r3, [r7, #16]
 8005038:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800503a:	2308      	movs	r3, #8
 800503c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800503e:	2302      	movs	r3, #2
 8005040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800504a:	2302      	movs	r3, #2
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800504e:	f107 0314 	add.w	r3, r7, #20
 8005052:	4619      	mov	r1, r3
 8005054:	4824      	ldr	r0, [pc, #144]	@ (80050e8 <HAL_TIM_MspPostInit+0xe8>)
 8005056:	f002 fb99 	bl	800778c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800505a:	e03d      	b.n	80050d8 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a22      	ldr	r2, [pc, #136]	@ (80050ec <HAL_TIM_MspPostInit+0xec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d138      	bne.n	80050d8 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005066:	4b1f      	ldr	r3, [pc, #124]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	4a1e      	ldr	r2, [pc, #120]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 800506c:	f043 0304 	orr.w	r3, r3, #4
 8005070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005072:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800507e:	4b19      	ldr	r3, [pc, #100]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005082:	4a18      	ldr	r2, [pc, #96]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800508a:	4b16      	ldr	r3, [pc, #88]	@ (80050e4 <HAL_TIM_MspPostInit+0xe4>)
 800508c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005096:	23c0      	movs	r3, #192	@ 0xc0
 8005098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	2302      	movs	r3, #2
 800509c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a2:	2300      	movs	r3, #0
 80050a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80050a6:	2304      	movs	r3, #4
 80050a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050aa:	f107 0314 	add.w	r3, r7, #20
 80050ae:	4619      	mov	r1, r3
 80050b0:	480d      	ldr	r0, [pc, #52]	@ (80050e8 <HAL_TIM_MspPostInit+0xe8>)
 80050b2:	f002 fb6b 	bl	800778c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80050b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80050ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050bc:	2302      	movs	r3, #2
 80050be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c4:	2300      	movs	r3, #0
 80050c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80050c8:	230a      	movs	r3, #10
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050cc:	f107 0314 	add.w	r3, r7, #20
 80050d0:	4619      	mov	r1, r3
 80050d2:	4807      	ldr	r0, [pc, #28]	@ (80050f0 <HAL_TIM_MspPostInit+0xf0>)
 80050d4:	f002 fb5a 	bl	800778c <HAL_GPIO_Init>
}
 80050d8:	bf00      	nop
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40012c00 	.word	0x40012c00
 80050e4:	40021000 	.word	0x40021000
 80050e8:	48000800 	.word	0x48000800
 80050ec:	40013400 	.word	0x40013400
 80050f0:	48000400 	.word	0x48000400

080050f4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80050f8:	4b20      	ldr	r3, [pc, #128]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 80050fa:	4a21      	ldr	r2, [pc, #132]	@ (8005180 <MX_LPUART1_UART_Init+0x8c>)
 80050fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80050fe:	4b1f      	ldr	r3, [pc, #124]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005100:	4a20      	ldr	r2, [pc, #128]	@ (8005184 <MX_LPUART1_UART_Init+0x90>)
 8005102:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005104:	4b1d      	ldr	r3, [pc, #116]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005106:	2200      	movs	r2, #0
 8005108:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800510a:	4b1c      	ldr	r3, [pc, #112]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 800510c:	2200      	movs	r2, #0
 800510e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005110:	4b1a      	ldr	r3, [pc, #104]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005116:	4b19      	ldr	r3, [pc, #100]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005118:	220c      	movs	r2, #12
 800511a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800511c:	4b17      	ldr	r3, [pc, #92]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 800511e:	2200      	movs	r2, #0
 8005120:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005122:	4b16      	ldr	r3, [pc, #88]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005124:	2200      	movs	r2, #0
 8005126:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005128:	4b14      	ldr	r3, [pc, #80]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 800512a:	2200      	movs	r2, #0
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800512e:	4b13      	ldr	r3, [pc, #76]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005130:	2200      	movs	r2, #0
 8005132:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005134:	4811      	ldr	r0, [pc, #68]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005136:	f005 fdf3 	bl	800ad20 <HAL_UART_Init>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8005140:	f7fe fedc 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005144:	2100      	movs	r1, #0
 8005146:	480d      	ldr	r0, [pc, #52]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 8005148:	f007 fb46 	bl	800c7d8 <HAL_UARTEx_SetTxFifoThreshold>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8005152:	f7fe fed3 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005156:	2100      	movs	r1, #0
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 800515a:	f007 fb7b 	bl	800c854 <HAL_UARTEx_SetRxFifoThreshold>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8005164:	f7fe feca 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005168:	4804      	ldr	r0, [pc, #16]	@ (800517c <MX_LPUART1_UART_Init+0x88>)
 800516a:	f007 fafc 	bl	800c766 <HAL_UARTEx_DisableFifoMode>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8005174:	f7fe fec2 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005178:	bf00      	nop
 800517a:	bd80      	pop	{r7, pc}
 800517c:	20001df8 	.word	0x20001df8
 8005180:	40008000 	.word	0x40008000
 8005184:	001e8480 	.word	0x001e8480

08005188 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800518c:	4b23      	ldr	r3, [pc, #140]	@ (800521c <MX_USART2_UART_Init+0x94>)
 800518e:	4a24      	ldr	r2, [pc, #144]	@ (8005220 <MX_USART2_UART_Init+0x98>)
 8005190:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005192:	4b22      	ldr	r3, [pc, #136]	@ (800521c <MX_USART2_UART_Init+0x94>)
 8005194:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005198:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800519a:	4b20      	ldr	r3, [pc, #128]	@ (800521c <MX_USART2_UART_Init+0x94>)
 800519c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80051a0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80051a2:	4b1e      	ldr	r3, [pc, #120]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80051a8:	4b1c      	ldr	r3, [pc, #112]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80051ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80051b0:	4b1a      	ldr	r3, [pc, #104]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051b2:	220c      	movs	r2, #12
 80051b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80051b6:	4b19      	ldr	r3, [pc, #100]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80051bc:	4b17      	ldr	r3, [pc, #92]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051be:	2200      	movs	r2, #0
 80051c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80051c2:	4b16      	ldr	r3, [pc, #88]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80051c8:	4b14      	ldr	r3, [pc, #80]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80051ce:	4b13      	ldr	r3, [pc, #76]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80051d4:	4811      	ldr	r0, [pc, #68]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051d6:	f005 fda3 	bl	800ad20 <HAL_UART_Init>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80051e0:	f7fe fe8c 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051e4:	2100      	movs	r1, #0
 80051e6:	480d      	ldr	r0, [pc, #52]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051e8:	f007 faf6 	bl	800c7d8 <HAL_UARTEx_SetTxFifoThreshold>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80051f2:	f7fe fe83 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80051f6:	2100      	movs	r1, #0
 80051f8:	4808      	ldr	r0, [pc, #32]	@ (800521c <MX_USART2_UART_Init+0x94>)
 80051fa:	f007 fb2b 	bl	800c854 <HAL_UARTEx_SetRxFifoThreshold>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8005204:	f7fe fe7a 	bl	8003efc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005208:	4804      	ldr	r0, [pc, #16]	@ (800521c <MX_USART2_UART_Init+0x94>)
 800520a:	f007 faac 	bl	800c766 <HAL_UARTEx_DisableFifoMode>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8005214:	f7fe fe72 	bl	8003efc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005218:	bf00      	nop
 800521a:	bd80      	pop	{r7, pc}
 800521c:	20001ec4 	.word	0x20001ec4
 8005220:	40004400 	.word	0x40004400

08005224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b0a0      	sub	sp, #128	@ 0x80
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	60da      	str	r2, [r3, #12]
 800523a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800523c:	f107 0318 	add.w	r3, r7, #24
 8005240:	2254      	movs	r2, #84	@ 0x54
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f008 f93d 	bl	800d4c4 <memset>
  if(uartHandle->Instance==LPUART1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a99      	ldr	r2, [pc, #612]	@ (80054b4 <HAL_UART_MspInit+0x290>)
 8005250:	4293      	cmp	r3, r2
 8005252:	f040 8093 	bne.w	800537c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005256:	2320      	movs	r3, #32
 8005258:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800525a:	2300      	movs	r3, #0
 800525c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800525e:	f107 0318 	add.w	r3, r7, #24
 8005262:	4618      	mov	r0, r3
 8005264:	f003 fa26 	bl	80086b4 <HAL_RCCEx_PeriphCLKConfig>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800526e:	f7fe fe45 	bl	8003efc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005272:	4b91      	ldr	r3, [pc, #580]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 8005274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005276:	4a90      	ldr	r2, [pc, #576]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800527e:	4b8e      	ldr	r3, [pc, #568]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 8005280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528a:	4b8b      	ldr	r3, [pc, #556]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 800528c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528e:	4a8a      	ldr	r2, [pc, #552]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 8005290:	f043 0302 	orr.w	r3, r3, #2
 8005294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005296:	4b88      	ldr	r3, [pc, #544]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	f003 0302 	and.w	r3, r3, #2
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052a2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80052a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a8:	2302      	movs	r3, #2
 80052aa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ac:	2300      	movs	r3, #0
 80052ae:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b0:	2300      	movs	r3, #0
 80052b2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80052b4:	2308      	movs	r3, #8
 80052b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80052bc:	4619      	mov	r1, r3
 80052be:	487f      	ldr	r0, [pc, #508]	@ (80054bc <HAL_UART_MspInit+0x298>)
 80052c0:	f002 fa64 	bl	800778c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80052c4:	4b7e      	ldr	r3, [pc, #504]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052c6:	4a7f      	ldr	r2, [pc, #508]	@ (80054c4 <HAL_UART_MspInit+0x2a0>)
 80052c8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80052ca:	4b7d      	ldr	r3, [pc, #500]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052cc:	2222      	movs	r2, #34	@ 0x22
 80052ce:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052d0:	4b7b      	ldr	r3, [pc, #492]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052d6:	4b7a      	ldr	r3, [pc, #488]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052d8:	2200      	movs	r2, #0
 80052da:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052dc:	4b78      	ldr	r3, [pc, #480]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052de:	2280      	movs	r2, #128	@ 0x80
 80052e0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052e2:	4b77      	ldr	r3, [pc, #476]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052e8:	4b75      	ldr	r3, [pc, #468]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80052ee:	4b74      	ldr	r3, [pc, #464]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052f4:	4b72      	ldr	r3, [pc, #456]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80052fa:	4871      	ldr	r0, [pc, #452]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 80052fc:	f001 ff14 	bl	8007128 <HAL_DMA_Init>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8005306:	f7fe fdf9 	bl	8003efc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a6c      	ldr	r2, [pc, #432]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005312:	4a6b      	ldr	r2, [pc, #428]	@ (80054c0 <HAL_UART_MspInit+0x29c>)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8005318:	4b6b      	ldr	r3, [pc, #428]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 800531a:	4a6c      	ldr	r2, [pc, #432]	@ (80054cc <HAL_UART_MspInit+0x2a8>)
 800531c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800531e:	4b6a      	ldr	r3, [pc, #424]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005320:	2223      	movs	r2, #35	@ 0x23
 8005322:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005324:	4b68      	ldr	r3, [pc, #416]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005326:	2210      	movs	r2, #16
 8005328:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800532a:	4b67      	ldr	r3, [pc, #412]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005330:	4b65      	ldr	r3, [pc, #404]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005336:	4b64      	ldr	r3, [pc, #400]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005338:	2200      	movs	r2, #0
 800533a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800533c:	4b62      	ldr	r3, [pc, #392]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 800533e:	2200      	movs	r2, #0
 8005340:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8005342:	4b61      	ldr	r3, [pc, #388]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005344:	2200      	movs	r2, #0
 8005346:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005348:	4b5f      	ldr	r3, [pc, #380]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 800534a:	2200      	movs	r2, #0
 800534c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800534e:	485e      	ldr	r0, [pc, #376]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005350:	f001 feea 	bl	8007128 <HAL_DMA_Init>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800535a:	f7fe fdcf 	bl	8003efc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a59      	ldr	r2, [pc, #356]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005362:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005364:	4a58      	ldr	r2, [pc, #352]	@ (80054c8 <HAL_UART_MspInit+0x2a4>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	2100      	movs	r1, #0
 800536e:	205b      	movs	r0, #91	@ 0x5b
 8005370:	f001 fea5 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005374:	205b      	movs	r0, #91	@ 0x5b
 8005376:	f001 febc 	bl	80070f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800537a:	e097      	b.n	80054ac <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a53      	ldr	r2, [pc, #332]	@ (80054d0 <HAL_UART_MspInit+0x2ac>)
 8005382:	4293      	cmp	r3, r2
 8005384:	f040 8092 	bne.w	80054ac <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005388:	2302      	movs	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800538c:	2300      	movs	r3, #0
 800538e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005390:	f107 0318 	add.w	r3, r7, #24
 8005394:	4618      	mov	r0, r3
 8005396:	f003 f98d 	bl	80086b4 <HAL_RCCEx_PeriphCLKConfig>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80053a0:	f7fe fdac 	bl	8003efc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053a4:	4b44      	ldr	r3, [pc, #272]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a8:	4a43      	ldr	r2, [pc, #268]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b0:	4b41      	ldr	r3, [pc, #260]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b8:	60fb      	str	r3, [r7, #12]
 80053ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053bc:	4b3e      	ldr	r3, [pc, #248]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c0:	4a3d      	ldr	r2, [pc, #244]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053c8:	4b3b      	ldr	r3, [pc, #236]	@ (80054b8 <HAL_UART_MspInit+0x294>)
 80053ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80053d4:	230c      	movs	r3, #12
 80053d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d8:	2302      	movs	r3, #2
 80053da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e0:	2300      	movs	r3, #0
 80053e2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80053e4:	2307      	movs	r3, #7
 80053e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80053ec:	4619      	mov	r1, r3
 80053ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80053f2:	f002 f9cb 	bl	800778c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80053f6:	4b37      	ldr	r3, [pc, #220]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 80053f8:	4a37      	ldr	r2, [pc, #220]	@ (80054d8 <HAL_UART_MspInit+0x2b4>)
 80053fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80053fc:	4b35      	ldr	r3, [pc, #212]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 80053fe:	221a      	movs	r2, #26
 8005400:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005402:	4b34      	ldr	r3, [pc, #208]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005404:	2200      	movs	r2, #0
 8005406:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005408:	4b32      	ldr	r3, [pc, #200]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 800540a:	2200      	movs	r2, #0
 800540c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800540e:	4b31      	ldr	r3, [pc, #196]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005410:	2280      	movs	r2, #128	@ 0x80
 8005412:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005414:	4b2f      	ldr	r3, [pc, #188]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005416:	2200      	movs	r2, #0
 8005418:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800541a:	4b2e      	ldr	r3, [pc, #184]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 800541c:	2200      	movs	r2, #0
 800541e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005420:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005422:	2200      	movs	r2, #0
 8005424:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005426:	4b2b      	ldr	r3, [pc, #172]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005428:	2200      	movs	r2, #0
 800542a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800542c:	4829      	ldr	r0, [pc, #164]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 800542e:	f001 fe7b 	bl	8007128 <HAL_DMA_Init>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8005438:	f7fe fd60 	bl	8003efc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a25      	ldr	r2, [pc, #148]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005440:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8005444:	4a23      	ldr	r2, [pc, #140]	@ (80054d4 <HAL_UART_MspInit+0x2b0>)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800544a:	4b24      	ldr	r3, [pc, #144]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 800544c:	4a24      	ldr	r2, [pc, #144]	@ (80054e0 <HAL_UART_MspInit+0x2bc>)
 800544e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005450:	4b22      	ldr	r3, [pc, #136]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005452:	221b      	movs	r2, #27
 8005454:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005456:	4b21      	ldr	r3, [pc, #132]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005458:	2210      	movs	r2, #16
 800545a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800545c:	4b1f      	ldr	r3, [pc, #124]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 800545e:	2200      	movs	r2, #0
 8005460:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005462:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005464:	2280      	movs	r2, #128	@ 0x80
 8005466:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005468:	4b1c      	ldr	r3, [pc, #112]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 800546a:	2200      	movs	r2, #0
 800546c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800546e:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005470:	2200      	movs	r2, #0
 8005472:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005474:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005476:	2200      	movs	r2, #0
 8005478:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800547a:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 800547c:	2200      	movs	r2, #0
 800547e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005480:	4816      	ldr	r0, [pc, #88]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005482:	f001 fe51 	bl	8007128 <HAL_DMA_Init>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d001      	beq.n	8005490 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800548c:	f7fe fd36 	bl	8003efc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a12      	ldr	r2, [pc, #72]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005494:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005496:	4a11      	ldr	r2, [pc, #68]	@ (80054dc <HAL_UART_MspInit+0x2b8>)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	2026      	movs	r0, #38	@ 0x26
 80054a2:	f001 fe0c 	bl	80070be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054a6:	2026      	movs	r0, #38	@ 0x26
 80054a8:	f001 fe23 	bl	80070f2 <HAL_NVIC_EnableIRQ>
}
 80054ac:	bf00      	nop
 80054ae:	3780      	adds	r7, #128	@ 0x80
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	40008000 	.word	0x40008000
 80054b8:	40021000 	.word	0x40021000
 80054bc:	48000400 	.word	0x48000400
 80054c0:	20001f90 	.word	0x20001f90
 80054c4:	40020044 	.word	0x40020044
 80054c8:	20001ff0 	.word	0x20001ff0
 80054cc:	40020058 	.word	0x40020058
 80054d0:	40004400 	.word	0x40004400
 80054d4:	20002050 	.word	0x20002050
 80054d8:	4002001c 	.word	0x4002001c
 80054dc:	200020b0 	.word	0x200020b0
 80054e0:	40020030 	.word	0x40020030

080054e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80054e4:	480d      	ldr	r0, [pc, #52]	@ (800551c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80054e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80054e8:	f7ff f992 	bl	8004810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80054ec:	480c      	ldr	r0, [pc, #48]	@ (8005520 <LoopForever+0x6>)
  ldr r1, =_edata
 80054ee:	490d      	ldr	r1, [pc, #52]	@ (8005524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80054f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005528 <LoopForever+0xe>)
  movs r3, #0
 80054f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80054f4:	e002      	b.n	80054fc <LoopCopyDataInit>

080054f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054fa:	3304      	adds	r3, #4

080054fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005500:	d3f9      	bcc.n	80054f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005502:	4a0a      	ldr	r2, [pc, #40]	@ (800552c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005504:	4c0a      	ldr	r4, [pc, #40]	@ (8005530 <LoopForever+0x16>)
  movs r3, #0
 8005506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005508:	e001      	b.n	800550e <LoopFillZerobss>

0800550a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800550a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800550c:	3204      	adds	r2, #4

0800550e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800550e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005510:	d3fb      	bcc.n	800550a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005512:	f007 fff5 	bl	800d500 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005516:	f7fe fb9b 	bl	8003c50 <main>

0800551a <LoopForever>:

LoopForever:
    b LoopForever
 800551a:	e7fe      	b.n	800551a <LoopForever>
  ldr   r0, =_estack
 800551c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005524:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005528:	0800e50c 	.word	0x0800e50c
  ldr r2, =_sbss
 800552c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005530:	2000225c 	.word	0x2000225c

08005534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005534:	e7fe      	b.n	8005534 <ADC1_2_IRQHandler>

08005536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b082      	sub	sp, #8
 800553a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800553c:	2300      	movs	r3, #0
 800553e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005540:	2003      	movs	r0, #3
 8005542:	f001 fdb1 	bl	80070a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005546:	2000      	movs	r0, #0
 8005548:	f000 f80e 	bl	8005568 <HAL_InitTick>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	71fb      	strb	r3, [r7, #7]
 8005556:	e001      	b.n	800555c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005558:	f7ff f856 	bl	8004608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800555c:	79fb      	ldrb	r3, [r7, #7]

}
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005574:	4b16      	ldr	r3, [pc, #88]	@ (80055d0 <HAL_InitTick+0x68>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d022      	beq.n	80055c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800557c:	4b15      	ldr	r3, [pc, #84]	@ (80055d4 <HAL_InitTick+0x6c>)
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b13      	ldr	r3, [pc, #76]	@ (80055d0 <HAL_InitTick+0x68>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005588:	fbb1 f3f3 	udiv	r3, r1, r3
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fdbc 	bl	800710e <HAL_SYSTICK_Config>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10f      	bne.n	80055bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d809      	bhi.n	80055b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055a2:	2200      	movs	r2, #0
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	f04f 30ff 	mov.w	r0, #4294967295
 80055aa:	f001 fd88 	bl	80070be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80055ae:	4a0a      	ldr	r2, [pc, #40]	@ (80055d8 <HAL_InitTick+0x70>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e007      	b.n	80055c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	73fb      	strb	r3, [r7, #15]
 80055ba:	e004      	b.n	80055c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
 80055c0:	e001      	b.n	80055c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80055c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3710      	adds	r7, #16
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000194 	.word	0x20000194
 80055d4:	2000018c 	.word	0x2000018c
 80055d8:	20000190 	.word	0x20000190

080055dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055e0:	4b05      	ldr	r3, [pc, #20]	@ (80055f8 <HAL_IncTick+0x1c>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b05      	ldr	r3, [pc, #20]	@ (80055fc <HAL_IncTick+0x20>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	4a03      	ldr	r2, [pc, #12]	@ (80055f8 <HAL_IncTick+0x1c>)
 80055ec:	6013      	str	r3, [r2, #0]
}
 80055ee:	bf00      	nop
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	20002110 	.word	0x20002110
 80055fc:	20000194 	.word	0x20000194

08005600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  return uwTick;
 8005604:	4b03      	ldr	r3, [pc, #12]	@ (8005614 <HAL_GetTick+0x14>)
 8005606:	681b      	ldr	r3, [r3, #0]
}
 8005608:	4618      	mov	r0, r3
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	20002110 	.word	0x20002110

08005618 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	609a      	str	r2, [r3, #8]
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
 800568c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3360      	adds	r3, #96	@ 0x60
 8005692:	461a      	mov	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <LL_ADC_SetOffset+0x44>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	4313      	orrs	r3, r2
 80056b0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80056b8:	bf00      	nop
 80056ba:	371c      	adds	r7, #28
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	03fff000 	.word	0x03fff000

080056c8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3360      	adds	r3, #96	@ 0x60
 80056d6:	461a      	mov	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	4413      	add	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	3360      	adds	r3, #96	@ 0x60
 8005704:	461a      	mov	r2, r3
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	431a      	orrs	r2, r3
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3360      	adds	r3, #96	@ 0x60
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	431a      	orrs	r2, r3
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	3360      	adds	r3, #96	@ 0x60
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	615a      	str	r2, [r3, #20]
}
 80057b0:	bf00      	nop
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b087      	sub	sp, #28
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3330      	adds	r3, #48	@ 0x30
 80057f2:	461a      	mov	r2, r3
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	0a1b      	lsrs	r3, r3, #8
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	4413      	add	r3, r2
 8005800:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f003 031f 	and.w	r3, r3, #31
 800580c:	211f      	movs	r1, #31
 800580e:	fa01 f303 	lsl.w	r3, r1, r3
 8005812:	43db      	mvns	r3, r3
 8005814:	401a      	ands	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0e9b      	lsrs	r3, r3, #26
 800581a:	f003 011f 	and.w	r1, r3, #31
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f003 031f 	and.w	r3, r3, #31
 8005824:	fa01 f303 	lsl.w	r3, r1, r3
 8005828:	431a      	orrs	r2, r3
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800583a:	b480      	push	{r7}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3314      	adds	r3, #20
 800584a:	461a      	mov	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	0e5b      	lsrs	r3, r3, #25
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	4413      	add	r3, r2
 8005858:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	0d1b      	lsrs	r3, r3, #20
 8005862:	f003 031f 	and.w	r3, r3, #31
 8005866:	2107      	movs	r1, #7
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	43db      	mvns	r3, r3
 800586e:	401a      	ands	r2, r3
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	0d1b      	lsrs	r3, r3, #20
 8005874:	f003 031f 	and.w	r3, r3, #31
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	fa01 f303 	lsl.w	r3, r1, r3
 800587e:	431a      	orrs	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058a8:	43db      	mvns	r3, r3
 80058aa:	401a      	ands	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f003 0318 	and.w	r3, r3, #24
 80058b2:	4908      	ldr	r1, [pc, #32]	@ (80058d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80058b4:	40d9      	lsrs	r1, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	400b      	ands	r3, r1
 80058ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058be:	431a      	orrs	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	0007ffff 	.word	0x0007ffff

080058d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 031f 	and.w	r3, r3, #31
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005904:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6093      	str	r3, [r2, #8]
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800592c:	d101      	bne.n	8005932 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005950:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005954:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800597c:	d101      	bne.n	8005982 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800597e:	2301      	movs	r3, #1
 8005980:	e000      	b.n	8005984 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059a4:	f043 0201 	orr.w	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059cc:	f043 0202 	orr.w	r2, r3, #2
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b083      	sub	sp, #12
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <LL_ADC_IsEnabled+0x18>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <LL_ADC_IsEnabled+0x1a>
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d101      	bne.n	8005a1e <LL_ADC_IsDisableOngoing+0x18>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <LL_ADC_IsDisableOngoing+0x1a>
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a40:	f043 0204 	orr.w	r2, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d101      	bne.n	8005a6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d101      	bne.n	8005a92 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005aa0:	b590      	push	{r4, r7, lr}
 8005aa2:	b089      	sub	sp, #36	@ 0x24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005aac:	2300      	movs	r3, #0
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e1a9      	b.n	8005e0e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d109      	bne.n	8005adc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7fd fc3d 	bl	8003348 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff ff19 	bl	8005918 <LL_ADC_IsDeepPowerDownEnabled>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d004      	beq.n	8005af6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff feff 	bl	80058f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ff34 	bl	8005968 <LL_ADC_IsInternalRegulatorEnabled>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d115      	bne.n	8005b32 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff ff18 	bl	8005940 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b10:	4b9c      	ldr	r3, [pc, #624]	@ (8005d84 <HAL_ADC_Init+0x2e4>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	099b      	lsrs	r3, r3, #6
 8005b16:	4a9c      	ldr	r2, [pc, #624]	@ (8005d88 <HAL_ADC_Init+0x2e8>)
 8005b18:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1c:	099b      	lsrs	r3, r3, #6
 8005b1e:	3301      	adds	r3, #1
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b24:	e002      	b.n	8005b2c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1f9      	bne.n	8005b26 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff ff16 	bl	8005968 <LL_ADC_IsInternalRegulatorEnabled>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10d      	bne.n	8005b5e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff ff76 	bl	8005a54 <LL_ADC_REG_IsConversionOngoing>
 8005b68:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f040 8142 	bne.w	8005dfc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 813e 	bne.w	8005dfc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b84:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005b88:	f043 0202 	orr.w	r2, r3, #2
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f7ff ff23 	bl	80059e0 <LL_ADC_IsEnabled>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d141      	bne.n	8005c24 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ba8:	d004      	beq.n	8005bb4 <HAL_ADC_Init+0x114>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a77      	ldr	r2, [pc, #476]	@ (8005d8c <HAL_ADC_Init+0x2ec>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10f      	bne.n	8005bd4 <HAL_ADC_Init+0x134>
 8005bb4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005bb8:	f7ff ff12 	bl	80059e0 <LL_ADC_IsEnabled>
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	4873      	ldr	r0, [pc, #460]	@ (8005d8c <HAL_ADC_Init+0x2ec>)
 8005bc0:	f7ff ff0e 	bl	80059e0 <LL_ADC_IsEnabled>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4323      	orrs	r3, r4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	e012      	b.n	8005bfa <HAL_ADC_Init+0x15a>
 8005bd4:	486e      	ldr	r0, [pc, #440]	@ (8005d90 <HAL_ADC_Init+0x2f0>)
 8005bd6:	f7ff ff03 	bl	80059e0 <LL_ADC_IsEnabled>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	486d      	ldr	r0, [pc, #436]	@ (8005d94 <HAL_ADC_Init+0x2f4>)
 8005bde:	f7ff feff 	bl	80059e0 <LL_ADC_IsEnabled>
 8005be2:	4603      	mov	r3, r0
 8005be4:	431c      	orrs	r4, r3
 8005be6:	486c      	ldr	r0, [pc, #432]	@ (8005d98 <HAL_ADC_Init+0x2f8>)
 8005be8:	f7ff fefa 	bl	80059e0 <LL_ADC_IsEnabled>
 8005bec:	4603      	mov	r3, r0
 8005bee:	4323      	orrs	r3, r4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bf0c      	ite	eq
 8005bf4:	2301      	moveq	r3, #1
 8005bf6:	2300      	movne	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d012      	beq.n	8005c24 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c06:	d004      	beq.n	8005c12 <HAL_ADC_Init+0x172>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a5f      	ldr	r2, [pc, #380]	@ (8005d8c <HAL_ADC_Init+0x2ec>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_Init+0x176>
 8005c12:	4a62      	ldr	r2, [pc, #392]	@ (8005d9c <HAL_ADC_Init+0x2fc>)
 8005c14:	e000      	b.n	8005c18 <HAL_ADC_Init+0x178>
 8005c16:	4a62      	ldr	r2, [pc, #392]	@ (8005da0 <HAL_ADC_Init+0x300>)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f7ff fcfa 	bl	8005618 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7f5b      	ldrb	r3, [r3, #29]
 8005c28:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c2e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005c34:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005c3a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c42:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c44:	4313      	orrs	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d106      	bne.n	8005c60 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	3b01      	subs	r3, #1
 8005c58:	045b      	lsls	r3, r3, #17
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c74:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005c76:	69ba      	ldr	r2, [r7, #24]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	4b48      	ldr	r3, [pc, #288]	@ (8005da4 <HAL_ADC_Init+0x304>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6812      	ldr	r2, [r2, #0]
 8005c8a:	69b9      	ldr	r1, [r7, #24]
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7ff fee5 	bl	8005a7a <LL_ADC_INJ_IsConversionOngoing>
 8005cb0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d17f      	bne.n	8005db8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d17c      	bne.n	8005db8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005cc2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005cca:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005cda:	f023 0302 	bic.w	r3, r3, #2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6812      	ldr	r2, [r2, #0]
 8005ce2:	69b9      	ldr	r1, [r7, #24]
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d017      	beq.n	8005d20 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005cfe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d08:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6911      	ldr	r1, [r2, #16]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005d1e:	e013      	b.n	8005d48 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005d2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6812      	ldr	r2, [r2, #0]
 8005d3c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005d40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d44:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d12a      	bne.n	8005da8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d5c:	f023 0304 	bic.w	r3, r3, #4
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d68:	4311      	orrs	r1, r2
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005d6e:	4311      	orrs	r1, r2
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d74:	430a      	orrs	r2, r1
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0201 	orr.w	r2, r2, #1
 8005d80:	611a      	str	r2, [r3, #16]
 8005d82:	e019      	b.n	8005db8 <HAL_ADC_Init+0x318>
 8005d84:	2000018c 	.word	0x2000018c
 8005d88:	053e2d63 	.word	0x053e2d63
 8005d8c:	50000100 	.word	0x50000100
 8005d90:	50000400 	.word	0x50000400
 8005d94:	50000500 	.word	0x50000500
 8005d98:	50000600 	.word	0x50000600
 8005d9c:	50000300 	.word	0x50000300
 8005da0:	50000700 	.word	0x50000700
 8005da4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10c      	bne.n	8005dda <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dc6:	f023 010f 	bic.w	r1, r3, #15
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	1e5a      	subs	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	631a      	str	r2, [r3, #48]	@ 0x30
 8005dd8:	e007      	b.n	8005dea <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 020f 	bic.w	r2, r2, #15
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dee:	f023 0303 	bic.w	r3, r3, #3
 8005df2:	f043 0201 	orr.w	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dfa:	e007      	b.n	8005e0c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e00:	f043 0210 	orr.w	r2, r3, #16
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	@ 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd90      	pop	{r4, r7, pc}
 8005e16:	bf00      	nop

08005e18 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e2c:	d004      	beq.n	8005e38 <HAL_ADC_Start_DMA+0x20>
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5a      	ldr	r2, [pc, #360]	@ (8005f9c <HAL_ADC_Start_DMA+0x184>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d101      	bne.n	8005e3c <HAL_ADC_Start_DMA+0x24>
 8005e38:	4b59      	ldr	r3, [pc, #356]	@ (8005fa0 <HAL_ADC_Start_DMA+0x188>)
 8005e3a:	e000      	b.n	8005e3e <HAL_ADC_Start_DMA+0x26>
 8005e3c:	4b59      	ldr	r3, [pc, #356]	@ (8005fa4 <HAL_ADC_Start_DMA+0x18c>)
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fd4a 	bl	80058d8 <LL_ADC_GetMultimode>
 8005e44:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fe02 	bl	8005a54 <LL_ADC_REG_IsConversionOngoing>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f040 809b 	bne.w	8005f8e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d101      	bne.n	8005e66 <HAL_ADC_Start_DMA+0x4e>
 8005e62:	2302      	movs	r3, #2
 8005e64:	e096      	b.n	8005f94 <HAL_ADC_Start_DMA+0x17c>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a4d      	ldr	r2, [pc, #308]	@ (8005fa8 <HAL_ADC_Start_DMA+0x190>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d008      	beq.n	8005e8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d005      	beq.n	8005e8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b05      	cmp	r3, #5
 8005e82:	d002      	beq.n	8005e8a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b09      	cmp	r3, #9
 8005e88:	d17a      	bne.n	8005f80 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 fcf6 	bl	800687c <ADC_Enable>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d16d      	bne.n	8005f76 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ea2:	f023 0301 	bic.w	r3, r3, #1
 8005ea6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a3a      	ldr	r2, [pc, #232]	@ (8005f9c <HAL_ADC_Start_DMA+0x184>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <HAL_ADC_Start_DMA+0xb4>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a3b      	ldr	r2, [pc, #236]	@ (8005fac <HAL_ADC_Start_DMA+0x194>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d002      	beq.n	8005ec8 <HAL_ADC_Start_DMA+0xb0>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	e003      	b.n	8005ed0 <HAL_ADC_Start_DMA+0xb8>
 8005ec8:	4b39      	ldr	r3, [pc, #228]	@ (8005fb0 <HAL_ADC_Start_DMA+0x198>)
 8005eca:	e001      	b.n	8005ed0 <HAL_ADC_Start_DMA+0xb8>
 8005ecc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d002      	beq.n	8005ede <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ee2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d006      	beq.n	8005f04 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005efa:	f023 0206 	bic.w	r2, r3, #6
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f02:	e002      	b.n	8005f0a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f0e:	4a29      	ldr	r2, [pc, #164]	@ (8005fb4 <HAL_ADC_Start_DMA+0x19c>)
 8005f10:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f16:	4a28      	ldr	r2, [pc, #160]	@ (8005fb8 <HAL_ADC_Start_DMA+0x1a0>)
 8005f18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	4a27      	ldr	r2, [pc, #156]	@ (8005fbc <HAL_ADC_Start_DMA+0x1a4>)
 8005f20:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	221c      	movs	r2, #28
 8005f28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0210 	orr.w	r2, r2, #16
 8005f40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68da      	ldr	r2, [r3, #12]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3340      	adds	r3, #64	@ 0x40
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f001 f989 	bl	8007278 <HAL_DMA_Start_IT>
 8005f66:	4603      	mov	r3, r0
 8005f68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fd5c 	bl	8005a2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005f74:	e00d      	b.n	8005f92 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005f7e:	e008      	b.n	8005f92 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005f8c:	e001      	b.n	8005f92 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	50000100 	.word	0x50000100
 8005fa0:	50000300 	.word	0x50000300
 8005fa4:	50000700 	.word	0x50000700
 8005fa8:	50000600 	.word	0x50000600
 8005fac:	50000500 	.word	0x50000500
 8005fb0:	50000400 	.word	0x50000400
 8005fb4:	08006a67 	.word	0x08006a67
 8005fb8:	08006b3f 	.word	0x08006b3f
 8005fbc:	08006b5b 	.word	0x08006b5b

08005fc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b0b6      	sub	sp, #216	@ 0xd8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006016:	2b01      	cmp	r3, #1
 8006018:	d102      	bne.n	8006020 <HAL_ADC_ConfigChannel+0x24>
 800601a:	2302      	movs	r3, #2
 800601c:	f000 bc13 	b.w	8006846 <HAL_ADC_ConfigChannel+0x84a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff fd11 	bl	8005a54 <LL_ADC_REG_IsConversionOngoing>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 83f3 	bne.w	8006820 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	6859      	ldr	r1, [r3, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f7ff fbcb 	bl	80057e2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fcff 	bl	8005a54 <LL_ADC_REG_IsConversionOngoing>
 8006056:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fd0b 	bl	8005a7a <LL_ADC_INJ_IsConversionOngoing>
 8006064:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006068:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 81d9 	bne.w	8006424 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006072:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 81d4 	bne.w	8006424 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006084:	d10f      	bne.n	80060a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6818      	ldr	r0, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	4619      	mov	r1, r3
 8006092:	f7ff fbd2 	bl	800583a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800609e:	4618      	mov	r0, r3
 80060a0:	f7ff fb79 	bl	8005796 <LL_ADC_SetSamplingTimeCommonConfig>
 80060a4:	e00e      	b.n	80060c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6819      	ldr	r1, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7ff fbc1 	bl	800583a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2100      	movs	r1, #0
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fb69 	bl	8005796 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	695a      	ldr	r2, [r3, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b04      	cmp	r3, #4
 80060e4:	d022      	beq.n	800612c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6919      	ldr	r1, [r3, #16]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80060f6:	f7ff fac3 	bl	8005680 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6919      	ldr	r1, [r3, #16]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	461a      	mov	r2, r3
 8006108:	f7ff fb0f 	bl	800572a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <HAL_ADC_ConfigChannel+0x126>
 800611c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006120:	e000      	b.n	8006124 <HAL_ADC_ConfigChannel+0x128>
 8006122:	2300      	movs	r3, #0
 8006124:	461a      	mov	r2, r3
 8006126:	f7ff fb1b 	bl	8005760 <LL_ADC_SetOffsetSaturation>
 800612a:	e17b      	b.n	8006424 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f7ff fac8 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 8006138:	4603      	mov	r3, r0
 800613a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <HAL_ADC_ConfigChannel+0x15c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2100      	movs	r1, #0
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fabd 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 800614e:	4603      	mov	r3, r0
 8006150:	0e9b      	lsrs	r3, r3, #26
 8006152:	f003 021f 	and.w	r2, r3, #31
 8006156:	e01e      	b.n	8006196 <HAL_ADC_ConfigChannel+0x19a>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2100      	movs	r1, #0
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff fab2 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 8006164:	4603      	mov	r3, r0
 8006166:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800616e:	fa93 f3a3 	rbit	r3, r3
 8006172:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800617a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800617e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006186:	2320      	movs	r3, #32
 8006188:	e004      	b.n	8006194 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800618a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800618e:	fab3 f383 	clz	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d105      	bne.n	80061ae <HAL_ADC_ConfigChannel+0x1b2>
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	0e9b      	lsrs	r3, r3, #26
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	e018      	b.n	80061e0 <HAL_ADC_ConfigChannel+0x1e4>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80061ba:	fa93 f3a3 	rbit	r3, r3
 80061be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80061c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80061c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80061ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80061d2:	2320      	movs	r3, #32
 80061d4:	e004      	b.n	80061e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80061d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80061da:	fab3 f383 	clz	r3, r3
 80061de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d106      	bne.n	80061f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	4618      	mov	r0, r3
 80061ee:	f7ff fa81 	bl	80056f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2101      	movs	r1, #1
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fa65 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <HAL_ADC_ConfigChannel+0x222>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2101      	movs	r1, #1
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fa5a 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	0e9b      	lsrs	r3, r3, #26
 8006218:	f003 021f 	and.w	r2, r3, #31
 800621c:	e01e      	b.n	800625c <HAL_ADC_ConfigChannel+0x260>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2101      	movs	r1, #1
 8006224:	4618      	mov	r0, r3
 8006226:	f7ff fa4f 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 800622a:	4603      	mov	r3, r0
 800622c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006230:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006234:	fa93 f3a3 	rbit	r3, r3
 8006238:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800623c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006240:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800624c:	2320      	movs	r3, #32
 800624e:	e004      	b.n	800625a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006254:	fab3 f383 	clz	r3, r3
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x278>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	0e9b      	lsrs	r3, r3, #26
 800626e:	f003 031f 	and.w	r3, r3, #31
 8006272:	e018      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x2aa>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800627c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006280:	fa93 f3a3 	rbit	r3, r3
 8006284:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006288:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800628c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006290:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006294:	2b00      	cmp	r3, #0
 8006296:	d101      	bne.n	800629c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006298:	2320      	movs	r3, #32
 800629a:	e004      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800629c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062a0:	fab3 f383 	clz	r3, r3
 80062a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d106      	bne.n	80062b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2200      	movs	r2, #0
 80062b0:	2101      	movs	r1, #1
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff fa1e 	bl	80056f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2102      	movs	r1, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7ff fa02 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 80062c4:	4603      	mov	r3, r0
 80062c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_ADC_ConfigChannel+0x2e8>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2102      	movs	r1, #2
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff f9f7 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 80062da:	4603      	mov	r3, r0
 80062dc:	0e9b      	lsrs	r3, r3, #26
 80062de:	f003 021f 	and.w	r2, r3, #31
 80062e2:	e01e      	b.n	8006322 <HAL_ADC_ConfigChannel+0x326>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2102      	movs	r1, #2
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f9ec 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062fa:	fa93 f3a3 	rbit	r3, r3
 80062fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8006302:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800630a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8006312:	2320      	movs	r3, #32
 8006314:	e004      	b.n	8006320 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006316:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800631a:	fab3 f383 	clz	r3, r3
 800631e:	b2db      	uxtb	r3, r3
 8006320:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <HAL_ADC_ConfigChannel+0x33e>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	0e9b      	lsrs	r3, r3, #26
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	e016      	b.n	8006368 <HAL_ADC_ConfigChannel+0x36c>
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006342:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006346:	fa93 f3a3 	rbit	r3, r3
 800634a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800634c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800634e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006352:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800635a:	2320      	movs	r3, #32
 800635c:	e004      	b.n	8006368 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800635e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006362:	fab3 f383 	clz	r3, r3
 8006366:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006368:	429a      	cmp	r2, r3
 800636a:	d106      	bne.n	800637a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2200      	movs	r2, #0
 8006372:	2102      	movs	r1, #2
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff f9bd 	bl	80056f4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2103      	movs	r1, #3
 8006380:	4618      	mov	r0, r3
 8006382:	f7ff f9a1 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 8006386:	4603      	mov	r3, r0
 8006388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10a      	bne.n	80063a6 <HAL_ADC_ConfigChannel+0x3aa>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2103      	movs	r1, #3
 8006396:	4618      	mov	r0, r3
 8006398:	f7ff f996 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 800639c:	4603      	mov	r3, r0
 800639e:	0e9b      	lsrs	r3, r3, #26
 80063a0:	f003 021f 	and.w	r2, r3, #31
 80063a4:	e017      	b.n	80063d6 <HAL_ADC_ConfigChannel+0x3da>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2103      	movs	r1, #3
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff f98b 	bl	80056c8 <LL_ADC_GetOffsetChannel>
 80063b2:	4603      	mov	r3, r0
 80063b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80063b8:	fa93 f3a3 	rbit	r3, r3
 80063bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80063be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80063c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80063c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80063c8:	2320      	movs	r3, #32
 80063ca:	e003      	b.n	80063d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80063cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ce:	fab3 f383 	clz	r3, r3
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d105      	bne.n	80063ee <HAL_ADC_ConfigChannel+0x3f2>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	0e9b      	lsrs	r3, r3, #26
 80063e8:	f003 031f 	and.w	r3, r3, #31
 80063ec:	e011      	b.n	8006412 <HAL_ADC_ConfigChannel+0x416>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80063f6:	fa93 f3a3 	rbit	r3, r3
 80063fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80063fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d101      	bne.n	800640a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006406:	2320      	movs	r3, #32
 8006408:	e003      	b.n	8006412 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800640a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800640c:	fab3 f383 	clz	r3, r3
 8006410:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006412:	429a      	cmp	r2, r3
 8006414:	d106      	bne.n	8006424 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	2103      	movs	r1, #3
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff f968 	bl	80056f4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fad9 	bl	80059e0 <LL_ADC_IsEnabled>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	f040 813d 	bne.w	80066b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6818      	ldr	r0, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6819      	ldr	r1, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	461a      	mov	r2, r3
 8006444:	f7ff fa24 	bl	8005890 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4aa2      	ldr	r2, [pc, #648]	@ (80066d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800644e:	4293      	cmp	r3, r2
 8006450:	f040 812e 	bne.w	80066b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <HAL_ADC_ConfigChannel+0x480>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	0e9b      	lsrs	r3, r3, #26
 800646a:	3301      	adds	r3, #1
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2b09      	cmp	r3, #9
 8006472:	bf94      	ite	ls
 8006474:	2301      	movls	r3, #1
 8006476:	2300      	movhi	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e019      	b.n	80064b0 <HAL_ADC_ConfigChannel+0x4b4>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006482:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006484:	fa93 f3a3 	rbit	r3, r3
 8006488:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800648a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800648c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800648e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006494:	2320      	movs	r3, #32
 8006496:	e003      	b.n	80064a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800649a:	fab3 f383 	clz	r3, r3
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	3301      	adds	r3, #1
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	2b09      	cmp	r3, #9
 80064a8:	bf94      	ite	ls
 80064aa:	2301      	movls	r3, #1
 80064ac:	2300      	movhi	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d079      	beq.n	80065a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d107      	bne.n	80064d0 <HAL_ADC_ConfigChannel+0x4d4>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	0e9b      	lsrs	r3, r3, #26
 80064c6:	3301      	adds	r3, #1
 80064c8:	069b      	lsls	r3, r3, #26
 80064ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064ce:	e015      	b.n	80064fc <HAL_ADC_ConfigChannel+0x500>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064d8:	fa93 f3a3 	rbit	r3, r3
 80064dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80064de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80064e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80064e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80064e8:	2320      	movs	r3, #32
 80064ea:	e003      	b.n	80064f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80064ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ee:	fab3 f383 	clz	r3, r3
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	3301      	adds	r3, #1
 80064f6:	069b      	lsls	r3, r3, #26
 80064f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006504:	2b00      	cmp	r3, #0
 8006506:	d109      	bne.n	800651c <HAL_ADC_ConfigChannel+0x520>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	0e9b      	lsrs	r3, r3, #26
 800650e:	3301      	adds	r3, #1
 8006510:	f003 031f 	and.w	r3, r3, #31
 8006514:	2101      	movs	r1, #1
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	e017      	b.n	800654c <HAL_ADC_ConfigChannel+0x550>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006522:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006524:	fa93 f3a3 	rbit	r3, r3
 8006528:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800652a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800652c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800652e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006534:	2320      	movs	r3, #32
 8006536:	e003      	b.n	8006540 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	3301      	adds	r3, #1
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2101      	movs	r1, #1
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	ea42 0103 	orr.w	r1, r2, r3
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10a      	bne.n	8006572 <HAL_ADC_ConfigChannel+0x576>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	0e9b      	lsrs	r3, r3, #26
 8006562:	3301      	adds	r3, #1
 8006564:	f003 021f 	and.w	r2, r3, #31
 8006568:	4613      	mov	r3, r2
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	4413      	add	r3, r2
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	e018      	b.n	80065a4 <HAL_ADC_ConfigChannel+0x5a8>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800657a:	fa93 f3a3 	rbit	r3, r3
 800657e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800658a:	2320      	movs	r3, #32
 800658c:	e003      	b.n	8006596 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800658e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006590:	fab3 f383 	clz	r3, r3
 8006594:	b2db      	uxtb	r3, r3
 8006596:	3301      	adds	r3, #1
 8006598:	f003 021f 	and.w	r2, r3, #31
 800659c:	4613      	mov	r3, r2
 800659e:	005b      	lsls	r3, r3, #1
 80065a0:	4413      	add	r3, r2
 80065a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065a4:	430b      	orrs	r3, r1
 80065a6:	e07e      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d107      	bne.n	80065c4 <HAL_ADC_ConfigChannel+0x5c8>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0e9b      	lsrs	r3, r3, #26
 80065ba:	3301      	adds	r3, #1
 80065bc:	069b      	lsls	r3, r3, #26
 80065be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065c2:	e015      	b.n	80065f0 <HAL_ADC_ConfigChannel+0x5f4>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065cc:	fa93 f3a3 	rbit	r3, r3
 80065d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80065dc:	2320      	movs	r3, #32
 80065de:	e003      	b.n	80065e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	fab3 f383 	clz	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	069b      	lsls	r3, r3, #26
 80065ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <HAL_ADC_ConfigChannel+0x614>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	0e9b      	lsrs	r3, r3, #26
 8006602:	3301      	adds	r3, #1
 8006604:	f003 031f 	and.w	r3, r3, #31
 8006608:	2101      	movs	r1, #1
 800660a:	fa01 f303 	lsl.w	r3, r1, r3
 800660e:	e017      	b.n	8006640 <HAL_ADC_ConfigChannel+0x644>
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	fa93 f3a3 	rbit	r3, r3
 800661c:	61fb      	str	r3, [r7, #28]
  return result;
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006628:	2320      	movs	r3, #32
 800662a:	e003      	b.n	8006634 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800662c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662e:	fab3 f383 	clz	r3, r3
 8006632:	b2db      	uxtb	r3, r3
 8006634:	3301      	adds	r3, #1
 8006636:	f003 031f 	and.w	r3, r3, #31
 800663a:	2101      	movs	r1, #1
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	ea42 0103 	orr.w	r1, r2, r3
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664c:	2b00      	cmp	r3, #0
 800664e:	d10d      	bne.n	800666c <HAL_ADC_ConfigChannel+0x670>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	0e9b      	lsrs	r3, r3, #26
 8006656:	3301      	adds	r3, #1
 8006658:	f003 021f 	and.w	r2, r3, #31
 800665c:	4613      	mov	r3, r2
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	4413      	add	r3, r2
 8006662:	3b1e      	subs	r3, #30
 8006664:	051b      	lsls	r3, r3, #20
 8006666:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800666a:	e01b      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x6a8>
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	fa93 f3a3 	rbit	r3, r3
 8006678:	613b      	str	r3, [r7, #16]
  return result;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d101      	bne.n	8006688 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006684:	2320      	movs	r3, #32
 8006686:	e003      	b.n	8006690 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	fab3 f383 	clz	r3, r3
 800668e:	b2db      	uxtb	r3, r3
 8006690:	3301      	adds	r3, #1
 8006692:	f003 021f 	and.w	r2, r3, #31
 8006696:	4613      	mov	r3, r2
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	4413      	add	r3, r2
 800669c:	3b1e      	subs	r3, #30
 800669e:	051b      	lsls	r3, r3, #20
 80066a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066aa:	4619      	mov	r1, r3
 80066ac:	f7ff f8c5 	bl	800583a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b09      	ldr	r3, [pc, #36]	@ (80066dc <HAL_ADC_ConfigChannel+0x6e0>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80be 	beq.w	800683a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066c6:	d004      	beq.n	80066d2 <HAL_ADC_ConfigChannel+0x6d6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a04      	ldr	r2, [pc, #16]	@ (80066e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10a      	bne.n	80066e8 <HAL_ADC_ConfigChannel+0x6ec>
 80066d2:	4b04      	ldr	r3, [pc, #16]	@ (80066e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80066d4:	e009      	b.n	80066ea <HAL_ADC_ConfigChannel+0x6ee>
 80066d6:	bf00      	nop
 80066d8:	407f0000 	.word	0x407f0000
 80066dc:	80080000 	.word	0x80080000
 80066e0:	50000100 	.word	0x50000100
 80066e4:	50000300 	.word	0x50000300
 80066e8:	4b59      	ldr	r3, [pc, #356]	@ (8006850 <HAL_ADC_ConfigChannel+0x854>)
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fe ffba 	bl	8005664 <LL_ADC_GetCommonPathInternalCh>
 80066f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a56      	ldr	r2, [pc, #344]	@ (8006854 <HAL_ADC_ConfigChannel+0x858>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d004      	beq.n	8006708 <HAL_ADC_ConfigChannel+0x70c>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a55      	ldr	r2, [pc, #340]	@ (8006858 <HAL_ADC_ConfigChannel+0x85c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d13a      	bne.n	800677e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800670c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d134      	bne.n	800677e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800671c:	d005      	beq.n	800672a <HAL_ADC_ConfigChannel+0x72e>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a4e      	ldr	r2, [pc, #312]	@ (800685c <HAL_ADC_ConfigChannel+0x860>)
 8006724:	4293      	cmp	r3, r2
 8006726:	f040 8085 	bne.w	8006834 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006732:	d004      	beq.n	800673e <HAL_ADC_ConfigChannel+0x742>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a49      	ldr	r2, [pc, #292]	@ (8006860 <HAL_ADC_ConfigChannel+0x864>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d101      	bne.n	8006742 <HAL_ADC_ConfigChannel+0x746>
 800673e:	4a49      	ldr	r2, [pc, #292]	@ (8006864 <HAL_ADC_ConfigChannel+0x868>)
 8006740:	e000      	b.n	8006744 <HAL_ADC_ConfigChannel+0x748>
 8006742:	4a43      	ldr	r2, [pc, #268]	@ (8006850 <HAL_ADC_ConfigChannel+0x854>)
 8006744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe ff75 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006754:	4b44      	ldr	r3, [pc, #272]	@ (8006868 <HAL_ADC_ConfigChannel+0x86c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	099b      	lsrs	r3, r3, #6
 800675a:	4a44      	ldr	r2, [pc, #272]	@ (800686c <HAL_ADC_ConfigChannel+0x870>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	099b      	lsrs	r3, r3, #6
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800676e:	e002      	b.n	8006776 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3b01      	subs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1f9      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800677c:	e05a      	b.n	8006834 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a3b      	ldr	r2, [pc, #236]	@ (8006870 <HAL_ADC_ConfigChannel+0x874>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d125      	bne.n	80067d4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006788:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800678c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d11f      	bne.n	80067d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a31      	ldr	r2, [pc, #196]	@ (8006860 <HAL_ADC_ConfigChannel+0x864>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d104      	bne.n	80067a8 <HAL_ADC_ConfigChannel+0x7ac>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a34      	ldr	r2, [pc, #208]	@ (8006874 <HAL_ADC_ConfigChannel+0x878>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d047      	beq.n	8006838 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067b0:	d004      	beq.n	80067bc <HAL_ADC_ConfigChannel+0x7c0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a2a      	ldr	r2, [pc, #168]	@ (8006860 <HAL_ADC_ConfigChannel+0x864>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_ADC_ConfigChannel+0x7c4>
 80067bc:	4a29      	ldr	r2, [pc, #164]	@ (8006864 <HAL_ADC_ConfigChannel+0x868>)
 80067be:	e000      	b.n	80067c2 <HAL_ADC_ConfigChannel+0x7c6>
 80067c0:	4a23      	ldr	r2, [pc, #140]	@ (8006850 <HAL_ADC_ConfigChannel+0x854>)
 80067c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067ca:	4619      	mov	r1, r3
 80067cc:	4610      	mov	r0, r2
 80067ce:	f7fe ff36 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80067d2:	e031      	b.n	8006838 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a27      	ldr	r2, [pc, #156]	@ (8006878 <HAL_ADC_ConfigChannel+0x87c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d12d      	bne.n	800683a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80067de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80067e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d127      	bne.n	800683a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006860 <HAL_ADC_ConfigChannel+0x864>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d022      	beq.n	800683a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067fc:	d004      	beq.n	8006808 <HAL_ADC_ConfigChannel+0x80c>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a17      	ldr	r2, [pc, #92]	@ (8006860 <HAL_ADC_ConfigChannel+0x864>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d101      	bne.n	800680c <HAL_ADC_ConfigChannel+0x810>
 8006808:	4a16      	ldr	r2, [pc, #88]	@ (8006864 <HAL_ADC_ConfigChannel+0x868>)
 800680a:	e000      	b.n	800680e <HAL_ADC_ConfigChannel+0x812>
 800680c:	4a10      	ldr	r2, [pc, #64]	@ (8006850 <HAL_ADC_ConfigChannel+0x854>)
 800680e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006812:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe ff10 	bl	800563e <LL_ADC_SetCommonPathInternalCh>
 800681e:	e00c      	b.n	800683a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006832:	e002      	b.n	800683a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006834:	bf00      	nop
 8006836:	e000      	b.n	800683a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006838:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006842:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006846:	4618      	mov	r0, r3
 8006848:	37d8      	adds	r7, #216	@ 0xd8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	50000700 	.word	0x50000700
 8006854:	c3210000 	.word	0xc3210000
 8006858:	90c00010 	.word	0x90c00010
 800685c:	50000600 	.word	0x50000600
 8006860:	50000100 	.word	0x50000100
 8006864:	50000300 	.word	0x50000300
 8006868:	2000018c 	.word	0x2000018c
 800686c:	053e2d63 	.word	0x053e2d63
 8006870:	c7520000 	.word	0xc7520000
 8006874:	50000500 	.word	0x50000500
 8006878:	cb840000 	.word	0xcb840000

0800687c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006884:	2300      	movs	r3, #0
 8006886:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff f8a7 	bl	80059e0 <LL_ADC_IsEnabled>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d176      	bne.n	8006986 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	4b3c      	ldr	r3, [pc, #240]	@ (8006990 <ADC_Enable+0x114>)
 80068a0:	4013      	ands	r3, r2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00d      	beq.n	80068c2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068aa:	f043 0210 	orr.w	r2, r3, #16
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e062      	b.n	8006988 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff f862 	bl	8005990 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068d4:	d004      	beq.n	80068e0 <ADC_Enable+0x64>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2e      	ldr	r2, [pc, #184]	@ (8006994 <ADC_Enable+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d101      	bne.n	80068e4 <ADC_Enable+0x68>
 80068e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006998 <ADC_Enable+0x11c>)
 80068e2:	e000      	b.n	80068e6 <ADC_Enable+0x6a>
 80068e4:	4b2d      	ldr	r3, [pc, #180]	@ (800699c <ADC_Enable+0x120>)
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe febc 	bl	8005664 <LL_ADC_GetCommonPathInternalCh>
 80068ec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80068ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d013      	beq.n	800691e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068f6:	4b2a      	ldr	r3, [pc, #168]	@ (80069a0 <ADC_Enable+0x124>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	099b      	lsrs	r3, r3, #6
 80068fc:	4a29      	ldr	r2, [pc, #164]	@ (80069a4 <ADC_Enable+0x128>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	099b      	lsrs	r3, r3, #6
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	4613      	mov	r3, r2
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	4413      	add	r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006910:	e002      	b.n	8006918 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3b01      	subs	r3, #1
 8006916:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d1f9      	bne.n	8006912 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800691e:	f7fe fe6f 	bl	8005600 <HAL_GetTick>
 8006922:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006924:	e028      	b.n	8006978 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4618      	mov	r0, r3
 800692c:	f7ff f858 	bl	80059e0 <LL_ADC_IsEnabled>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d104      	bne.n	8006940 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7ff f828 	bl	8005990 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006940:	f7fe fe5e 	bl	8005600 <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d914      	bls.n	8006978 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b01      	cmp	r3, #1
 800695a:	d00d      	beq.n	8006978 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006960:	f043 0210 	orr.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696c:	f043 0201 	orr.w	r2, r3, #1
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e007      	b.n	8006988 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b01      	cmp	r3, #1
 8006984:	d1cf      	bne.n	8006926 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	8000003f 	.word	0x8000003f
 8006994:	50000100 	.word	0x50000100
 8006998:	50000300 	.word	0x50000300
 800699c:	50000700 	.word	0x50000700
 80069a0:	2000018c 	.word	0x2000018c
 80069a4:	053e2d63 	.word	0x053e2d63

080069a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7ff f826 	bl	8005a06 <LL_ADC_IsDisableOngoing>
 80069ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff f80d 	bl	80059e0 <LL_ADC_IsEnabled>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d047      	beq.n	8006a5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d144      	bne.n	8006a5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f003 030d 	and.w	r3, r3, #13
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10c      	bne.n	80069fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7fe ffe7 	bl	80059b8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2203      	movs	r2, #3
 80069f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80069f2:	f7fe fe05 	bl	8005600 <HAL_GetTick>
 80069f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80069f8:	e029      	b.n	8006a4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fe:	f043 0210 	orr.w	r2, r3, #16
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a0a:	f043 0201 	orr.w	r2, r3, #1
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e023      	b.n	8006a5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a16:	f7fe fdf3 	bl	8005600 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d914      	bls.n	8006a4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00d      	beq.n	8006a4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a36:	f043 0210 	orr.w	r2, r3, #16
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a42:	f043 0201 	orr.w	r2, r3, #1
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e007      	b.n	8006a5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1dc      	bne.n	8006a16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b084      	sub	sp, #16
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d14b      	bne.n	8006b18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a84:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0308 	and.w	r3, r3, #8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d021      	beq.n	8006ade <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fe8c 	bl	80057bc <LL_ADC_REG_IsTriggerSourceSWStart>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d032      	beq.n	8006b10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d12b      	bne.n	8006b10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ac8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d11f      	bne.n	8006b10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006adc:	e018      	b.n	8006b10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d111      	bne.n	8006b10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b08:	f043 0201 	orr.w	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff fa55 	bl	8005fc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b16:	e00e      	b.n	8006b36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fa5f 	bl	8005fe8 <HAL_ADC_ErrorCallback>
}
 8006b2a:	e004      	b.n	8006b36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fa41 	bl	8005fd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b78:	f043 0204 	orr.w	r2, r3, #4
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fa31 	bl	8005fe8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <LL_ADC_IsEnabled>:
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <LL_ADC_IsEnabled+0x18>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <LL_ADC_IsEnabled+0x1a>
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <LL_ADC_StartCalibration>:
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006bc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	609a      	str	r2, [r3, #8]
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <LL_ADC_IsCalibrationOnGoing>:
{
 8006be6:	b480      	push	{r7}
 8006be8:	b083      	sub	sp, #12
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bfa:	d101      	bne.n	8006c00 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e000      	b.n	8006c02 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <LL_ADC_REG_IsConversionOngoing>:
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 0304 	and.w	r3, r3, #4
 8006c1e:	2b04      	cmp	r3, #4
 8006c20:	d101      	bne.n	8006c26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c48:	2b01      	cmp	r3, #1
 8006c4a:	d101      	bne.n	8006c50 <HAL_ADCEx_Calibration_Start+0x1c>
 8006c4c:	2302      	movs	r3, #2
 8006c4e:	e04d      	b.n	8006cec <HAL_ADCEx_Calibration_Start+0xb8>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff fea5 	bl	80069a8 <ADC_Disable>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d136      	bne.n	8006cd6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c6c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006c70:	f023 0302 	bic.w	r3, r3, #2
 8006c74:	f043 0202 	orr.w	r2, r3, #2
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ff96 	bl	8006bb4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c88:	e014      	b.n	8006cb4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d90d      	bls.n	8006cb4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9c:	f023 0312 	bic.w	r3, r3, #18
 8006ca0:	f043 0210 	orr.w	r2, r3, #16
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e01b      	b.n	8006cec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7ff ff94 	bl	8006be6 <LL_ADC_IsCalibrationOnGoing>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e2      	bne.n	8006c8a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc8:	f023 0303 	bic.w	r3, r3, #3
 8006ccc:	f043 0201 	orr.w	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006cd4:	e005      	b.n	8006ce2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cda:	f043 0210 	orr.w	r2, r3, #16
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	0004de01 	.word	0x0004de01

08006cf8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b0a1      	sub	sp, #132	@ 0x84
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e0e7      	b.n	8006ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006d1e:	2300      	movs	r3, #0
 8006d20:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006d22:	2300      	movs	r3, #0
 8006d24:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d2e:	d102      	bne.n	8006d36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006d30:	4b6f      	ldr	r3, [pc, #444]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006d32:	60bb      	str	r3, [r7, #8]
 8006d34:	e009      	b.n	8006d4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a6e      	ldr	r2, [pc, #440]	@ (8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d102      	bne.n	8006d46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006d40:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006d42:	60bb      	str	r3, [r7, #8]
 8006d44:	e001      	b.n	8006d4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0be      	b.n	8006ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff ff4f 	bl	8006c0e <LL_ADC_REG_IsConversionOngoing>
 8006d70:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ff49 	bl	8006c0e <LL_ADC_REG_IsConversionOngoing>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 80a0 	bne.w	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 809c 	bne.w	8006ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d94:	d004      	beq.n	8006da0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a55      	ldr	r2, [pc, #340]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d101      	bne.n	8006da4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8006da0:	4b56      	ldr	r3, [pc, #344]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006da2:	e000      	b.n	8006da6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8006da4:	4b56      	ldr	r3, [pc, #344]	@ (8006f00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8006da6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d04b      	beq.n	8006e48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006db0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6859      	ldr	r1, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006dc2:	035b      	lsls	r3, r3, #13
 8006dc4:	430b      	orrs	r3, r1
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dd4:	d004      	beq.n	8006de0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a45      	ldr	r2, [pc, #276]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10f      	bne.n	8006e00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006de0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006de4:	f7ff fed3 	bl	8006b8e <LL_ADC_IsEnabled>
 8006de8:	4604      	mov	r4, r0
 8006dea:	4841      	ldr	r0, [pc, #260]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006dec:	f7ff fecf 	bl	8006b8e <LL_ADC_IsEnabled>
 8006df0:	4603      	mov	r3, r0
 8006df2:	4323      	orrs	r3, r4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	bf0c      	ite	eq
 8006df8:	2301      	moveq	r3, #1
 8006dfa:	2300      	movne	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	e012      	b.n	8006e26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006e00:	483c      	ldr	r0, [pc, #240]	@ (8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e02:	f7ff fec4 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e06:	4604      	mov	r4, r0
 8006e08:	483b      	ldr	r0, [pc, #236]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e0a:	f7ff fec0 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	431c      	orrs	r4, r3
 8006e12:	483c      	ldr	r0, [pc, #240]	@ (8006f04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006e14:	f7ff febb 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4323      	orrs	r3, r4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d056      	beq.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006e32:	f023 030f 	bic.w	r3, r3, #15
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	6811      	ldr	r1, [r2, #0]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	6892      	ldr	r2, [r2, #8]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	431a      	orrs	r2, r3
 8006e42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e44:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006e46:	e047      	b.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006e48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e5c:	d004      	beq.n	8006e68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a23      	ldr	r2, [pc, #140]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d10f      	bne.n	8006e88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006e68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006e6c:	f7ff fe8f 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e70:	4604      	mov	r4, r0
 8006e72:	481f      	ldr	r0, [pc, #124]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006e74:	f7ff fe8b 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	4323      	orrs	r3, r4
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	e012      	b.n	8006eae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006e88:	481a      	ldr	r0, [pc, #104]	@ (8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006e8a:	f7ff fe80 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e8e:	4604      	mov	r4, r0
 8006e90:	4819      	ldr	r0, [pc, #100]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006e92:	f7ff fe7c 	bl	8006b8e <LL_ADC_IsEnabled>
 8006e96:	4603      	mov	r3, r0
 8006e98:	431c      	orrs	r4, r3
 8006e9a:	481a      	ldr	r0, [pc, #104]	@ (8006f04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006e9c:	f7ff fe77 	bl	8006b8e <LL_ADC_IsEnabled>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	4323      	orrs	r3, r4
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	bf0c      	ite	eq
 8006ea8:	2301      	moveq	r3, #1
 8006eaa:	2300      	movne	r3, #0
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d012      	beq.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006eb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006eba:	f023 030f 	bic.w	r3, r3, #15
 8006ebe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006ec0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ec2:	e009      	b.n	8006ed8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec8:	f043 0220 	orr.w	r2, r3, #32
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006ed6:	e000      	b.n	8006eda <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006ed8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006ee2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3784      	adds	r7, #132	@ 0x84
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	50000100 	.word	0x50000100
 8006ef4:	50000400 	.word	0x50000400
 8006ef8:	50000500 	.word	0x50000500
 8006efc:	50000300 	.word	0x50000300
 8006f00:	50000700 	.word	0x50000700
 8006f04:	50000600 	.word	0x50000600

08006f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006f18:	4b0c      	ldr	r3, [pc, #48]	@ (8006f4c <__NVIC_SetPriorityGrouping+0x44>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f24:	4013      	ands	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006f34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f3a:	4a04      	ldr	r2, [pc, #16]	@ (8006f4c <__NVIC_SetPriorityGrouping+0x44>)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	60d3      	str	r3, [r2, #12]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f54:	4b04      	ldr	r3, [pc, #16]	@ (8006f68 <__NVIC_GetPriorityGrouping+0x18>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	0a1b      	lsrs	r3, r3, #8
 8006f5a:	f003 0307 	and.w	r3, r3, #7
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	db0b      	blt.n	8006f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	f003 021f 	and.w	r2, r3, #31
 8006f84:	4907      	ldr	r1, [pc, #28]	@ (8006fa4 <__NVIC_EnableIRQ+0x38>)
 8006f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	2001      	movs	r0, #1
 8006f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f96:	bf00      	nop
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	e000e100 	.word	0xe000e100

08006fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	6039      	str	r1, [r7, #0]
 8006fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	db0a      	blt.n	8006fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	490c      	ldr	r1, [pc, #48]	@ (8006ff4 <__NVIC_SetPriority+0x4c>)
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	0112      	lsls	r2, r2, #4
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	440b      	add	r3, r1
 8006fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fd0:	e00a      	b.n	8006fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	4908      	ldr	r1, [pc, #32]	@ (8006ff8 <__NVIC_SetPriority+0x50>)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	3b04      	subs	r3, #4
 8006fe0:	0112      	lsls	r2, r2, #4
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	761a      	strb	r2, [r3, #24]
}
 8006fe8:	bf00      	nop
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	e000e100 	.word	0xe000e100
 8006ff8:	e000ed00 	.word	0xe000ed00

08006ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b089      	sub	sp, #36	@ 0x24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	f1c3 0307 	rsb	r3, r3, #7
 8007016:	2b04      	cmp	r3, #4
 8007018:	bf28      	it	cs
 800701a:	2304      	movcs	r3, #4
 800701c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	3304      	adds	r3, #4
 8007022:	2b06      	cmp	r3, #6
 8007024:	d902      	bls.n	800702c <NVIC_EncodePriority+0x30>
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	3b03      	subs	r3, #3
 800702a:	e000      	b.n	800702e <NVIC_EncodePriority+0x32>
 800702c:	2300      	movs	r3, #0
 800702e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007030:	f04f 32ff 	mov.w	r2, #4294967295
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	43da      	mvns	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	401a      	ands	r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007044:	f04f 31ff 	mov.w	r1, #4294967295
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	fa01 f303 	lsl.w	r3, r1, r3
 800704e:	43d9      	mvns	r1, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007054:	4313      	orrs	r3, r2
         );
}
 8007056:	4618      	mov	r0, r3
 8007058:	3724      	adds	r7, #36	@ 0x24
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3b01      	subs	r3, #1
 8007070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007074:	d301      	bcc.n	800707a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007076:	2301      	movs	r3, #1
 8007078:	e00f      	b.n	800709a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800707a:	4a0a      	ldr	r2, [pc, #40]	@ (80070a4 <SysTick_Config+0x40>)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3b01      	subs	r3, #1
 8007080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007082:	210f      	movs	r1, #15
 8007084:	f04f 30ff 	mov.w	r0, #4294967295
 8007088:	f7ff ff8e 	bl	8006fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <SysTick_Config+0x40>)
 800708e:	2200      	movs	r2, #0
 8007090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007092:	4b04      	ldr	r3, [pc, #16]	@ (80070a4 <SysTick_Config+0x40>)
 8007094:	2207      	movs	r2, #7
 8007096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	e000e010 	.word	0xe000e010

080070a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7ff ff29 	bl	8006f08 <__NVIC_SetPriorityGrouping>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b086      	sub	sp, #24
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	4603      	mov	r3, r0
 80070c6:	60b9      	str	r1, [r7, #8]
 80070c8:	607a      	str	r2, [r7, #4]
 80070ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070cc:	f7ff ff40 	bl	8006f50 <__NVIC_GetPriorityGrouping>
 80070d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	6978      	ldr	r0, [r7, #20]
 80070d8:	f7ff ff90 	bl	8006ffc <NVIC_EncodePriority>
 80070dc:	4602      	mov	r2, r0
 80070de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff ff5f 	bl	8006fa8 <__NVIC_SetPriority>
}
 80070ea:	bf00      	nop
 80070ec:	3718      	adds	r7, #24
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	4603      	mov	r3, r0
 80070fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ff33 	bl	8006f6c <__NVIC_EnableIRQ>
}
 8007106:	bf00      	nop
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ffa4 	bl	8007064 <SysTick_Config>
 800711c:	4603      	mov	r3, r0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e08d      	b.n	8007256 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	4b47      	ldr	r3, [pc, #284]	@ (8007260 <HAL_DMA_Init+0x138>)
 8007142:	429a      	cmp	r2, r3
 8007144:	d80f      	bhi.n	8007166 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	4b45      	ldr	r3, [pc, #276]	@ (8007264 <HAL_DMA_Init+0x13c>)
 800714e:	4413      	add	r3, r2
 8007150:	4a45      	ldr	r2, [pc, #276]	@ (8007268 <HAL_DMA_Init+0x140>)
 8007152:	fba2 2303 	umull	r2, r3, r2, r3
 8007156:	091b      	lsrs	r3, r3, #4
 8007158:	009a      	lsls	r2, r3, #2
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a42      	ldr	r2, [pc, #264]	@ (800726c <HAL_DMA_Init+0x144>)
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40
 8007164:	e00e      	b.n	8007184 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	4b40      	ldr	r3, [pc, #256]	@ (8007270 <HAL_DMA_Init+0x148>)
 800716e:	4413      	add	r3, r2
 8007170:	4a3d      	ldr	r2, [pc, #244]	@ (8007268 <HAL_DMA_Init+0x140>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	091b      	lsrs	r3, r3, #4
 8007178:	009a      	lsls	r2, r3, #2
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a3c      	ldr	r2, [pc, #240]	@ (8007274 <HAL_DMA_Init+0x14c>)
 8007182:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2202      	movs	r2, #2
 8007188:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800719a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800719e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80071a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80071b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80071c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa76 	bl	80076c8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071e4:	d102      	bne.n	80071ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007200:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d010      	beq.n	800722c <HAL_DMA_Init+0x104>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d80c      	bhi.n	800722c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fa96 	bl	8007744 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	e008      	b.n	800723e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	40020407 	.word	0x40020407
 8007264:	bffdfff8 	.word	0xbffdfff8
 8007268:	cccccccd 	.word	0xcccccccd
 800726c:	40020000 	.word	0x40020000
 8007270:	bffdfbf8 	.word	0xbffdfbf8
 8007274:	40020400 	.word	0x40020400

08007278 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_DMA_Start_IT+0x20>
 8007294:	2302      	movs	r3, #2
 8007296:	e066      	b.n	8007366 <HAL_DMA_Start_IT+0xee>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d155      	bne.n	8007358 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0201 	bic.w	r2, r2, #1
 80072c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f9bb 	bl	800764c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d008      	beq.n	80072f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 020e 	orr.w	r2, r2, #14
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e00f      	b.n	8007310 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 0204 	bic.w	r2, r2, #4
 80072fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 020a 	orr.w	r2, r2, #10
 800730e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007328:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800732c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007332:	2b00      	cmp	r3, #0
 8007334:	d007      	beq.n	8007346 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007340:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007344:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f042 0201 	orr.w	r2, r2, #1
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	e005      	b.n	8007364 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007360:	2302      	movs	r3, #2
 8007362:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007364:	7dfb      	ldrb	r3, [r7, #23]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800736e:	b480      	push	{r7}
 8007370:	b085      	sub	sp, #20
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007380:	b2db      	uxtb	r3, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d005      	beq.n	8007392 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800738c:	2301      	movs	r3, #1
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e037      	b.n	8007402 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 020e 	bic.w	r2, r2, #14
 80073a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f022 0201 	bic.w	r2, r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	f003 021f 	and.w	r2, r3, #31
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ce:	2101      	movs	r1, #1
 80073d0:	fa01 f202 	lsl.w	r2, r1, r2
 80073d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80073de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007400:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8007412:	7bfb      	ldrb	r3, [r7, #15]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d00d      	beq.n	8007454 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2204      	movs	r2, #4
 800743c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
 8007452:	e047      	b.n	80074e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 020e 	bic.w	r2, r2, #14
 8007462:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800747e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007488:	f003 021f 	and.w	r2, r3, #31
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007490:	2101      	movs	r1, #1
 8007492:	fa01 f202 	lsl.w	r2, r1, r2
 8007496:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80074a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00c      	beq.n	80074c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80074c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
    }
  }
  return status;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2204      	movs	r2, #4
 8007510:	409a      	lsls	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	4013      	ands	r3, r2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d026      	beq.n	8007568 <HAL_DMA_IRQHandler+0x7a>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d021      	beq.n	8007568 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0320 	and.w	r3, r3, #32
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0204 	bic.w	r2, r2, #4
 8007540:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007546:	f003 021f 	and.w	r2, r3, #31
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	2104      	movs	r1, #4
 8007550:	fa01 f202 	lsl.w	r2, r1, r2
 8007554:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	2b00      	cmp	r3, #0
 800755c:	d071      	beq.n	8007642 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007566:	e06c      	b.n	8007642 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2202      	movs	r2, #2
 8007572:	409a      	lsls	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02e      	beq.n	80075da <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f003 0302 	and.w	r3, r3, #2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d029      	beq.n	80075da <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10b      	bne.n	80075ac <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f022 020a 	bic.w	r2, r2, #10
 80075a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b0:	f003 021f 	and.w	r2, r3, #31
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b8:	2102      	movs	r1, #2
 80075ba:	fa01 f202 	lsl.w	r2, r1, r2
 80075be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d038      	beq.n	8007642 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80075d8:	e033      	b.n	8007642 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	2208      	movs	r2, #8
 80075e4:	409a      	lsls	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d02a      	beq.n	8007644 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d025      	beq.n	8007644 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 020e 	bic.w	r2, r2, #14
 8007606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760c:	f003 021f 	and.w	r2, r3, #31
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007614:	2101      	movs	r1, #1
 8007616:	fa01 f202 	lsl.w	r2, r1, r2
 800761a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007636:	2b00      	cmp	r3, #0
 8007638:	d004      	beq.n	8007644 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007642:	bf00      	nop
 8007644:	bf00      	nop
}
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007662:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007674:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767a:	f003 021f 	and.w	r2, r3, #31
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007682:	2101      	movs	r1, #1
 8007684:	fa01 f202 	lsl.w	r2, r1, r2
 8007688:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	2b10      	cmp	r3, #16
 8007698:	d108      	bne.n	80076ac <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076aa:	e007      	b.n	80076bc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	60da      	str	r2, [r3, #12]
}
 80076bc:	bf00      	nop
 80076be:	3714      	adds	r7, #20
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	4b16      	ldr	r3, [pc, #88]	@ (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80076d8:	429a      	cmp	r2, r3
 80076da:	d802      	bhi.n	80076e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80076dc:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	e001      	b.n	80076e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80076e2:	4b15      	ldr	r3, [pc, #84]	@ (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80076e4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	3b08      	subs	r3, #8
 80076f2:	4a12      	ldr	r2, [pc, #72]	@ (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80076f4:	fba2 2303 	umull	r2, r3, r2, r3
 80076f8:	091b      	lsrs	r3, r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007700:	089b      	lsrs	r3, r3, #2
 8007702:	009a      	lsls	r2, r3, #2
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	4413      	add	r3, r2
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a0b      	ldr	r2, [pc, #44]	@ (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f003 031f 	and.w	r3, r3, #31
 800771a:	2201      	movs	r2, #1
 800771c:	409a      	lsls	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40020407 	.word	0x40020407
 8007734:	40020800 	.word	0x40020800
 8007738:	40020820 	.word	0x40020820
 800773c:	cccccccd 	.word	0xcccccccd
 8007740:	40020880 	.word	0x40020880

08007744 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	b2db      	uxtb	r3, r3
 8007752:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4b0b      	ldr	r3, [pc, #44]	@ (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	461a      	mov	r2, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a08      	ldr	r2, [pc, #32]	@ (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007766:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3b01      	subs	r3, #1
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	2201      	movs	r2, #1
 8007772:	409a      	lsls	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	1000823f 	.word	0x1000823f
 8007788:	40020940 	.word	0x40020940

0800778c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800779a:	e15a      	b.n	8007a52 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	2101      	movs	r1, #1
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	fa01 f303 	lsl.w	r3, r1, r3
 80077a8:	4013      	ands	r3, r2
 80077aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 814c 	beq.w	8007a4c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d005      	beq.n	80077cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d130      	bne.n	800782e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	2203      	movs	r2, #3
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	43db      	mvns	r3, r3
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4013      	ands	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	fa02 f303 	lsl.w	r3, r2, r3
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007802:	2201      	movs	r2, #1
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	fa02 f303 	lsl.w	r3, r2, r3
 800780a:	43db      	mvns	r3, r3
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	4013      	ands	r3, r2
 8007810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	091b      	lsrs	r3, r3, #4
 8007818:	f003 0201 	and.w	r2, r3, #1
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f003 0303 	and.w	r3, r3, #3
 8007836:	2b03      	cmp	r3, #3
 8007838:	d017      	beq.n	800786a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	2203      	movs	r2, #3
 8007846:	fa02 f303 	lsl.w	r3, r2, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4013      	ands	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689a      	ldr	r2, [r3, #8]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	fa02 f303 	lsl.w	r3, r2, r3
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	693a      	ldr	r2, [r7, #16]
 8007868:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f003 0303 	and.w	r3, r3, #3
 8007872:	2b02      	cmp	r3, #2
 8007874:	d123      	bne.n	80078be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	08da      	lsrs	r2, r3, #3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3208      	adds	r2, #8
 800787e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007882:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	220f      	movs	r2, #15
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4013      	ands	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	691a      	ldr	r2, [r3, #16]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f003 0307 	and.w	r3, r3, #7
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	fa02 f303 	lsl.w	r3, r2, r3
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	08da      	lsrs	r2, r3, #3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3208      	adds	r2, #8
 80078b8:	6939      	ldr	r1, [r7, #16]
 80078ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	005b      	lsls	r3, r3, #1
 80078c8:	2203      	movs	r2, #3
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43db      	mvns	r3, r3
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	4013      	ands	r3, r2
 80078d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	f003 0203 	and.w	r2, r3, #3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	fa02 f303 	lsl.w	r3, r2, r3
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80a6 	beq.w	8007a4c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007900:	4b5b      	ldr	r3, [pc, #364]	@ (8007a70 <HAL_GPIO_Init+0x2e4>)
 8007902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007904:	4a5a      	ldr	r2, [pc, #360]	@ (8007a70 <HAL_GPIO_Init+0x2e4>)
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	6613      	str	r3, [r2, #96]	@ 0x60
 800790c:	4b58      	ldr	r3, [pc, #352]	@ (8007a70 <HAL_GPIO_Init+0x2e4>)
 800790e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007918:	4a56      	ldr	r2, [pc, #344]	@ (8007a74 <HAL_GPIO_Init+0x2e8>)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	089b      	lsrs	r3, r3, #2
 800791e:	3302      	adds	r3, #2
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	220f      	movs	r2, #15
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	43db      	mvns	r3, r3
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	4013      	ands	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007942:	d01f      	beq.n	8007984 <HAL_GPIO_Init+0x1f8>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a4c      	ldr	r2, [pc, #304]	@ (8007a78 <HAL_GPIO_Init+0x2ec>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d019      	beq.n	8007980 <HAL_GPIO_Init+0x1f4>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a4b      	ldr	r2, [pc, #300]	@ (8007a7c <HAL_GPIO_Init+0x2f0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d013      	beq.n	800797c <HAL_GPIO_Init+0x1f0>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a4a      	ldr	r2, [pc, #296]	@ (8007a80 <HAL_GPIO_Init+0x2f4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00d      	beq.n	8007978 <HAL_GPIO_Init+0x1ec>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a49      	ldr	r2, [pc, #292]	@ (8007a84 <HAL_GPIO_Init+0x2f8>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d007      	beq.n	8007974 <HAL_GPIO_Init+0x1e8>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a48      	ldr	r2, [pc, #288]	@ (8007a88 <HAL_GPIO_Init+0x2fc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d101      	bne.n	8007970 <HAL_GPIO_Init+0x1e4>
 800796c:	2305      	movs	r3, #5
 800796e:	e00a      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 8007970:	2306      	movs	r3, #6
 8007972:	e008      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 8007974:	2304      	movs	r3, #4
 8007976:	e006      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 8007978:	2303      	movs	r3, #3
 800797a:	e004      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 800797c:	2302      	movs	r3, #2
 800797e:	e002      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 8007980:	2301      	movs	r3, #1
 8007982:	e000      	b.n	8007986 <HAL_GPIO_Init+0x1fa>
 8007984:	2300      	movs	r3, #0
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	f002 0203 	and.w	r2, r2, #3
 800798c:	0092      	lsls	r2, r2, #2
 800798e:	4093      	lsls	r3, r2
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007996:	4937      	ldr	r1, [pc, #220]	@ (8007a74 <HAL_GPIO_Init+0x2e8>)
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	3302      	adds	r3, #2
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80079a4:	4b39      	ldr	r3, [pc, #228]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	4013      	ands	r3, r2
 80079b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80079c8:	4a30      	ldr	r2, [pc, #192]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80079ce:	4b2f      	ldr	r3, [pc, #188]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	43db      	mvns	r3, r3
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	4013      	ands	r3, r2
 80079dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d003      	beq.n	80079f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80079f2:	4a26      	ldr	r2, [pc, #152]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80079f8:	4b24      	ldr	r3, [pc, #144]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	43db      	mvns	r3, r3
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	4013      	ands	r3, r2
 8007a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007a14:	693a      	ldr	r2, [r7, #16]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007a22:	4b1a      	ldr	r3, [pc, #104]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007a46:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <HAL_GPIO_Init+0x300>)
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f47f ae9d 	bne.w	800779c <HAL_GPIO_Init+0x10>
  }
}
 8007a62:	bf00      	nop
 8007a64:	bf00      	nop
 8007a66:	371c      	adds	r7, #28
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	40021000 	.word	0x40021000
 8007a74:	40010000 	.word	0x40010000
 8007a78:	48000400 	.word	0x48000400
 8007a7c:	48000800 	.word	0x48000800
 8007a80:	48000c00 	.word	0x48000c00
 8007a84:	48001000 	.word	0x48001000
 8007a88:	48001400 	.word	0x48001400
 8007a8c:	40010400 	.word	0x40010400

08007a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	460b      	mov	r3, r1
 8007a9a:	807b      	strh	r3, [r7, #2]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007aa0:	787b      	ldrb	r3, [r7, #1]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007aa6:	887a      	ldrh	r2, [r7, #2]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007aac:	e002      	b.n	8007ab4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007aae:	887a      	ldrh	r2, [r7, #2]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007aca:	4b08      	ldr	r3, [pc, #32]	@ (8007aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007acc:	695a      	ldr	r2, [r3, #20]
 8007ace:	88fb      	ldrh	r3, [r7, #6]
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007ad6:	4a05      	ldr	r2, [pc, #20]	@ (8007aec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ad8:	88fb      	ldrh	r3, [r7, #6]
 8007ada:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007adc:	88fb      	ldrh	r3, [r7, #6]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fc f97e 	bl	8003de0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3708      	adds	r7, #8
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40010400 	.word	0x40010400

08007af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d141      	bne.n	8007b82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007afe:	4b4b      	ldr	r3, [pc, #300]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b0a:	d131      	bne.n	8007b70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b0c:	4b47      	ldr	r3, [pc, #284]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b12:	4a46      	ldr	r2, [pc, #280]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b1c:	4b43      	ldr	r3, [pc, #268]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b24:	4a41      	ldr	r2, [pc, #260]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b2c:	4b40      	ldr	r3, [pc, #256]	@ (8007c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2232      	movs	r2, #50	@ 0x32
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	4a3f      	ldr	r2, [pc, #252]	@ (8007c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b38:	fba2 2303 	umull	r2, r3, r2, r3
 8007b3c:	0c9b      	lsrs	r3, r3, #18
 8007b3e:	3301      	adds	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b42:	e002      	b.n	8007b4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3b01      	subs	r3, #1
 8007b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b4a:	4b38      	ldr	r3, [pc, #224]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b56:	d102      	bne.n	8007b5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f2      	bne.n	8007b44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b5e:	4b33      	ldr	r3, [pc, #204]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6a:	d158      	bne.n	8007c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e057      	b.n	8007c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b70:	4b2e      	ldr	r3, [pc, #184]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b76:	4a2d      	ldr	r2, [pc, #180]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007b80:	e04d      	b.n	8007c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b88:	d141      	bne.n	8007c0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b8a:	4b28      	ldr	r3, [pc, #160]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b96:	d131      	bne.n	8007bfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b98:	4b24      	ldr	r3, [pc, #144]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9e:	4a23      	ldr	r2, [pc, #140]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ba4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ba8:	4b20      	ldr	r3, [pc, #128]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8007c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2232      	movs	r2, #50	@ 0x32
 8007bbe:	fb02 f303 	mul.w	r3, r2, r3
 8007bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8007c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc8:	0c9b      	lsrs	r3, r3, #18
 8007bca:	3301      	adds	r3, #1
 8007bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bce:	e002      	b.n	8007bd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007bd6:	4b15      	ldr	r3, [pc, #84]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007be2:	d102      	bne.n	8007bea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1f2      	bne.n	8007bd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bea:	4b10      	ldr	r3, [pc, #64]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf6:	d112      	bne.n	8007c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e011      	b.n	8007c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c02:	4a0a      	ldr	r2, [pc, #40]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c0c:	e007      	b.n	8007c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c0e:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c16:	4a05      	ldr	r2, [pc, #20]	@ (8007c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c18:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40007000 	.word	0x40007000
 8007c30:	2000018c 	.word	0x2000018c
 8007c34:	431bde83 	.word	0x431bde83

08007c38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4a04      	ldr	r2, [pc, #16]	@ (8007c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c46:	6093      	str	r3, [r2, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40007000 	.word	0x40007000

08007c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e2fe      	b.n	8008268 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d075      	beq.n	8007d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c76:	4b97      	ldr	r3, [pc, #604]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	f003 030c 	and.w	r3, r3, #12
 8007c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c80:	4b94      	ldr	r3, [pc, #592]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007c8a:	69bb      	ldr	r3, [r7, #24]
 8007c8c:	2b0c      	cmp	r3, #12
 8007c8e:	d102      	bne.n	8007c96 <HAL_RCC_OscConfig+0x3e>
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d002      	beq.n	8007c9c <HAL_RCC_OscConfig+0x44>
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d10b      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c9c:	4b8d      	ldr	r3, [pc, #564]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d05b      	beq.n	8007d60 <HAL_RCC_OscConfig+0x108>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d157      	bne.n	8007d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e2d9      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cbc:	d106      	bne.n	8007ccc <HAL_RCC_OscConfig+0x74>
 8007cbe:	4b85      	ldr	r3, [pc, #532]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a84      	ldr	r2, [pc, #528]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e01d      	b.n	8007d08 <HAL_RCC_OscConfig+0xb0>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007cd4:	d10c      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x98>
 8007cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a7e      	ldr	r2, [pc, #504]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	4b7c      	ldr	r3, [pc, #496]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cec:	6013      	str	r3, [r2, #0]
 8007cee:	e00b      	b.n	8007d08 <HAL_RCC_OscConfig+0xb0>
 8007cf0:	4b78      	ldr	r3, [pc, #480]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a77      	ldr	r2, [pc, #476]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	4b75      	ldr	r3, [pc, #468]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a74      	ldr	r2, [pc, #464]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d013      	beq.n	8007d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d10:	f7fd fc76 	bl	8005600 <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d16:	e008      	b.n	8007d2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d18:	f7fd fc72 	bl	8005600 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	2b64      	cmp	r3, #100	@ 0x64
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e29e      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0f0      	beq.n	8007d18 <HAL_RCC_OscConfig+0xc0>
 8007d36:	e014      	b.n	8007d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d38:	f7fd fc62 	bl	8005600 <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d3e:	e008      	b.n	8007d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d40:	f7fd fc5e 	bl	8005600 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	2b64      	cmp	r3, #100	@ 0x64
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e28a      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d52:	4b60      	ldr	r3, [pc, #384]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1f0      	bne.n	8007d40 <HAL_RCC_OscConfig+0xe8>
 8007d5e:	e000      	b.n	8007d62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d075      	beq.n	8007e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d6e:	4b59      	ldr	r3, [pc, #356]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 030c 	and.w	r3, r3, #12
 8007d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d78:	4b56      	ldr	r3, [pc, #344]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f003 0303 	and.w	r3, r3, #3
 8007d80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	2b0c      	cmp	r3, #12
 8007d86:	d102      	bne.n	8007d8e <HAL_RCC_OscConfig+0x136>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d002      	beq.n	8007d94 <HAL_RCC_OscConfig+0x13c>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d11f      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d94:	4b4f      	ldr	r3, [pc, #316]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d005      	beq.n	8007dac <HAL_RCC_OscConfig+0x154>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e25d      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dac:	4b49      	ldr	r3, [pc, #292]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	061b      	lsls	r3, r3, #24
 8007dba:	4946      	ldr	r1, [pc, #280]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007dc0:	4b45      	ldr	r3, [pc, #276]	@ (8007ed8 <HAL_RCC_OscConfig+0x280>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd fbcf 	bl	8005568 <HAL_InitTick>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d043      	beq.n	8007e58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e249      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d023      	beq.n	8007e24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007de2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de8:	f7fd fc0a 	bl	8005600 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007dee:	e008      	b.n	8007e02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007df0:	f7fd fc06 	bl	8005600 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e232      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e02:	4b34      	ldr	r3, [pc, #208]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0f0      	beq.n	8007df0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0e:	4b31      	ldr	r3, [pc, #196]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	061b      	lsls	r3, r3, #24
 8007e1c:	492d      	ldr	r1, [pc, #180]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	604b      	str	r3, [r1, #4]
 8007e22:	e01a      	b.n	8007e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e24:	4b2b      	ldr	r3, [pc, #172]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2a      	ldr	r2, [pc, #168]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e30:	f7fd fbe6 	bl	8005600 <HAL_GetTick>
 8007e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e38:	f7fd fbe2 	bl	8005600 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e20e      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e4a:	4b22      	ldr	r3, [pc, #136]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f0      	bne.n	8007e38 <HAL_RCC_OscConfig+0x1e0>
 8007e56:	e000      	b.n	8007e5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 0308 	and.w	r3, r3, #8
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d041      	beq.n	8007eea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d01c      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e6e:	4b19      	ldr	r3, [pc, #100]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e74:	4a17      	ldr	r2, [pc, #92]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e76:	f043 0301 	orr.w	r3, r3, #1
 8007e7a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e7e:	f7fd fbbf 	bl	8005600 <HAL_GetTick>
 8007e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e84:	e008      	b.n	8007e98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e86:	f7fd fbbb 	bl	8005600 <HAL_GetTick>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	2b02      	cmp	r3, #2
 8007e92:	d901      	bls.n	8007e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e1e7      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0ef      	beq.n	8007e86 <HAL_RCC_OscConfig+0x22e>
 8007ea6:	e020      	b.n	8007eea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007eae:	4a09      	ldr	r2, [pc, #36]	@ (8007ed4 <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	f023 0301 	bic.w	r3, r3, #1
 8007eb4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fd fba2 	bl	8005600 <HAL_GetTick>
 8007ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ebe:	e00d      	b.n	8007edc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fd fb9e 	bl	8005600 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d906      	bls.n	8007edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e1ca      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
 8007ed2:	bf00      	nop
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	20000190 	.word	0x20000190
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007edc:	4b8c      	ldr	r3, [pc, #560]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1ea      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0304 	and.w	r3, r3, #4
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 80a6 	beq.w	8008044 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007efc:	4b84      	ldr	r3, [pc, #528]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d101      	bne.n	8007f0c <HAL_RCC_OscConfig+0x2b4>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e000      	b.n	8007f0e <HAL_RCC_OscConfig+0x2b6>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00d      	beq.n	8007f2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f12:	4b7f      	ldr	r3, [pc, #508]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f16:	4a7e      	ldr	r2, [pc, #504]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f2e:	4b79      	ldr	r3, [pc, #484]	@ (8008114 <HAL_RCC_OscConfig+0x4bc>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d118      	bne.n	8007f6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f3a:	4b76      	ldr	r3, [pc, #472]	@ (8008114 <HAL_RCC_OscConfig+0x4bc>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a75      	ldr	r2, [pc, #468]	@ (8008114 <HAL_RCC_OscConfig+0x4bc>)
 8007f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007f46:	f7fd fb5b 	bl	8005600 <HAL_GetTick>
 8007f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f4c:	e008      	b.n	8007f60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f4e:	f7fd fb57 	bl	8005600 <HAL_GetTick>
 8007f52:	4602      	mov	r2, r0
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d901      	bls.n	8007f60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e183      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f60:	4b6c      	ldr	r3, [pc, #432]	@ (8008114 <HAL_RCC_OscConfig+0x4bc>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0f0      	beq.n	8007f4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d108      	bne.n	8007f86 <HAL_RCC_OscConfig+0x32e>
 8007f74:	4b66      	ldr	r3, [pc, #408]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f7a:	4a65      	ldr	r2, [pc, #404]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f84:	e024      	b.n	8007fd0 <HAL_RCC_OscConfig+0x378>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	2b05      	cmp	r3, #5
 8007f8c:	d110      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x358>
 8007f8e:	4b60      	ldr	r3, [pc, #384]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f94:	4a5e      	ldr	r2, [pc, #376]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007f96:	f043 0304 	orr.w	r3, r3, #4
 8007f9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007f9e:	4b5c      	ldr	r3, [pc, #368]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fa4:	4a5a      	ldr	r2, [pc, #360]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fae:	e00f      	b.n	8007fd0 <HAL_RCC_OscConfig+0x378>
 8007fb0:	4b57      	ldr	r3, [pc, #348]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fb6:	4a56      	ldr	r2, [pc, #344]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fc0:	4b53      	ldr	r3, [pc, #332]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fc6:	4a52      	ldr	r2, [pc, #328]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007fc8:	f023 0304 	bic.w	r3, r3, #4
 8007fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d016      	beq.n	8008006 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fd8:	f7fd fb12 	bl	8005600 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fde:	e00a      	b.n	8007ff6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fe0:	f7fd fb0e 	bl	8005600 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d901      	bls.n	8007ff6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e138      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ff6:	4b46      	ldr	r3, [pc, #280]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8007ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ffc:	f003 0302 	and.w	r3, r3, #2
 8008000:	2b00      	cmp	r3, #0
 8008002:	d0ed      	beq.n	8007fe0 <HAL_RCC_OscConfig+0x388>
 8008004:	e015      	b.n	8008032 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008006:	f7fd fafb 	bl	8005600 <HAL_GetTick>
 800800a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800800c:	e00a      	b.n	8008024 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800e:	f7fd faf7 	bl	8005600 <HAL_GetTick>
 8008012:	4602      	mov	r2, r0
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	1ad3      	subs	r3, r2, r3
 8008018:	f241 3288 	movw	r2, #5000	@ 0x1388
 800801c:	4293      	cmp	r3, r2
 800801e:	d901      	bls.n	8008024 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e121      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008024:	4b3a      	ldr	r3, [pc, #232]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8008026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1ed      	bne.n	800800e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008032:	7ffb      	ldrb	r3, [r7, #31]
 8008034:	2b01      	cmp	r3, #1
 8008036:	d105      	bne.n	8008044 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008038:	4b35      	ldr	r3, [pc, #212]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 800803a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800803c:	4a34      	ldr	r2, [pc, #208]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 800803e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008042:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0320 	and.w	r3, r3, #32
 800804c:	2b00      	cmp	r3, #0
 800804e:	d03c      	beq.n	80080ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d01c      	beq.n	8008092 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008058:	4b2d      	ldr	r3, [pc, #180]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 800805a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800805e:	4a2c      	ldr	r2, [pc, #176]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008068:	f7fd faca 	bl	8005600 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800806e:	e008      	b.n	8008082 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008070:	f7fd fac6 	bl	8005600 <HAL_GetTick>
 8008074:	4602      	mov	r2, r0
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	1ad3      	subs	r3, r2, r3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d901      	bls.n	8008082 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e0f2      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008082:	4b23      	ldr	r3, [pc, #140]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8008084:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008088:	f003 0302 	and.w	r3, r3, #2
 800808c:	2b00      	cmp	r3, #0
 800808e:	d0ef      	beq.n	8008070 <HAL_RCC_OscConfig+0x418>
 8008090:	e01b      	b.n	80080ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008092:	4b1f      	ldr	r3, [pc, #124]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 8008094:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008098:	4a1d      	ldr	r2, [pc, #116]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 800809a:	f023 0301 	bic.w	r3, r3, #1
 800809e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a2:	f7fd faad 	bl	8005600 <HAL_GetTick>
 80080a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080aa:	f7fd faa9 	bl	8005600 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e0d5      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80080bc:	4b14      	ldr	r3, [pc, #80]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 80080be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1ef      	bne.n	80080aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	69db      	ldr	r3, [r3, #28]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 80c9 	beq.w	8008266 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80080d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 030c 	and.w	r3, r3, #12
 80080dc:	2b0c      	cmp	r3, #12
 80080de:	f000 8083 	beq.w	80081e8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	69db      	ldr	r3, [r3, #28]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d15e      	bne.n	80081a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080ea:	4b09      	ldr	r3, [pc, #36]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a08      	ldr	r2, [pc, #32]	@ (8008110 <HAL_RCC_OscConfig+0x4b8>)
 80080f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f6:	f7fd fa83 	bl	8005600 <HAL_GetTick>
 80080fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080fc:	e00c      	b.n	8008118 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080fe:	f7fd fa7f 	bl	8005600 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	2b02      	cmp	r3, #2
 800810a:	d905      	bls.n	8008118 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e0ab      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
 8008110:	40021000 	.word	0x40021000
 8008114:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008118:	4b55      	ldr	r3, [pc, #340]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008120:	2b00      	cmp	r3, #0
 8008122:	d1ec      	bne.n	80080fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008124:	4b52      	ldr	r3, [pc, #328]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	4b52      	ldr	r3, [pc, #328]	@ (8008274 <HAL_RCC_OscConfig+0x61c>)
 800812a:	4013      	ands	r3, r2
 800812c:	687a      	ldr	r2, [r7, #4]
 800812e:	6a11      	ldr	r1, [r2, #32]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008134:	3a01      	subs	r2, #1
 8008136:	0112      	lsls	r2, r2, #4
 8008138:	4311      	orrs	r1, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800813e:	0212      	lsls	r2, r2, #8
 8008140:	4311      	orrs	r1, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008146:	0852      	lsrs	r2, r2, #1
 8008148:	3a01      	subs	r2, #1
 800814a:	0552      	lsls	r2, r2, #21
 800814c:	4311      	orrs	r1, r2
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008152:	0852      	lsrs	r2, r2, #1
 8008154:	3a01      	subs	r2, #1
 8008156:	0652      	lsls	r2, r2, #25
 8008158:	4311      	orrs	r1, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800815e:	06d2      	lsls	r2, r2, #27
 8008160:	430a      	orrs	r2, r1
 8008162:	4943      	ldr	r1, [pc, #268]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 8008164:	4313      	orrs	r3, r2
 8008166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008168:	4b41      	ldr	r3, [pc, #260]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a40      	ldr	r2, [pc, #256]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 800816e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008174:	4b3e      	ldr	r3, [pc, #248]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4a3d      	ldr	r2, [pc, #244]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 800817a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800817e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008180:	f7fd fa3e 	bl	8005600 <HAL_GetTick>
 8008184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008186:	e008      	b.n	800819a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008188:	f7fd fa3a 	bl	8005600 <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	2b02      	cmp	r3, #2
 8008194:	d901      	bls.n	800819a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008196:	2303      	movs	r3, #3
 8008198:	e066      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800819a:	4b35      	ldr	r3, [pc, #212]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f0      	beq.n	8008188 <HAL_RCC_OscConfig+0x530>
 80081a6:	e05e      	b.n	8008266 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081a8:	4b31      	ldr	r3, [pc, #196]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a30      	ldr	r2, [pc, #192]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b4:	f7fd fa24 	bl	8005600 <HAL_GetTick>
 80081b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ba:	e008      	b.n	80081ce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081bc:	f7fd fa20 	bl	8005600 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	2b02      	cmp	r3, #2
 80081c8:	d901      	bls.n	80081ce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80081ca:	2303      	movs	r3, #3
 80081cc:	e04c      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081ce:	4b28      	ldr	r3, [pc, #160]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1f0      	bne.n	80081bc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80081da:	4b25      	ldr	r3, [pc, #148]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	4924      	ldr	r1, [pc, #144]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081e0:	4b25      	ldr	r3, [pc, #148]	@ (8008278 <HAL_RCC_OscConfig+0x620>)
 80081e2:	4013      	ands	r3, r2
 80081e4:	60cb      	str	r3, [r1, #12]
 80081e6:	e03e      	b.n	8008266 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	69db      	ldr	r3, [r3, #28]
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e039      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80081f4:	4b1e      	ldr	r3, [pc, #120]	@ (8008270 <HAL_RCC_OscConfig+0x618>)
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	f003 0203 	and.w	r2, r3, #3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	429a      	cmp	r2, r3
 8008206:	d12c      	bne.n	8008262 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008212:	3b01      	subs	r3, #1
 8008214:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008216:	429a      	cmp	r2, r3
 8008218:	d123      	bne.n	8008262 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008224:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008226:	429a      	cmp	r2, r3
 8008228:	d11b      	bne.n	8008262 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008234:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008236:	429a      	cmp	r2, r3
 8008238:	d113      	bne.n	8008262 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	3b01      	subs	r3, #1
 8008248:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800824a:	429a      	cmp	r2, r3
 800824c:	d109      	bne.n	8008262 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008258:	085b      	lsrs	r3, r3, #1
 800825a:	3b01      	subs	r3, #1
 800825c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800825e:	429a      	cmp	r2, r3
 8008260:	d001      	beq.n	8008266 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3720      	adds	r7, #32
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40021000 	.word	0x40021000
 8008274:	019f800c 	.word	0x019f800c
 8008278:	feeefffc 	.word	0xfeeefffc

0800827c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b086      	sub	sp, #24
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008286:	2300      	movs	r3, #0
 8008288:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e11e      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008294:	4b91      	ldr	r3, [pc, #580]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 030f 	and.w	r3, r3, #15
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d910      	bls.n	80082c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082a2:	4b8e      	ldr	r3, [pc, #568]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f023 020f 	bic.w	r2, r3, #15
 80082aa:	498c      	ldr	r1, [pc, #560]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082b2:	4b8a      	ldr	r3, [pc, #552]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 030f 	and.w	r3, r3, #15
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d001      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	e106      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d073      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d129      	bne.n	800832c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082d8:	4b81      	ldr	r3, [pc, #516]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d101      	bne.n	80082e8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e0f4      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80082e8:	f000 f99e 	bl	8008628 <RCC_GetSysClockFreqFromPLLSource>
 80082ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	4a7c      	ldr	r2, [pc, #496]	@ (80084e4 <HAL_RCC_ClockConfig+0x268>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d93f      	bls.n	8008376 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082f6:	4b7a      	ldr	r3, [pc, #488]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d009      	beq.n	8008316 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800830a:	2b00      	cmp	r3, #0
 800830c:	d033      	beq.n	8008376 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008312:	2b00      	cmp	r3, #0
 8008314:	d12f      	bne.n	8008376 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008316:	4b72      	ldr	r3, [pc, #456]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800831e:	4a70      	ldr	r2, [pc, #448]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008324:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	617b      	str	r3, [r7, #20]
 800832a:	e024      	b.n	8008376 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d107      	bne.n	8008344 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008334:	4b6a      	ldr	r3, [pc, #424]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e0c6      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008344:	4b66      	ldr	r3, [pc, #408]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e0be      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008354:	f000 f8ce 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 8008358:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	4a61      	ldr	r2, [pc, #388]	@ (80084e4 <HAL_RCC_ClockConfig+0x268>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d909      	bls.n	8008376 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008362:	4b5f      	ldr	r3, [pc, #380]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800836a:	4a5d      	ldr	r2, [pc, #372]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 800836c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008370:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008372:	2380      	movs	r3, #128	@ 0x80
 8008374:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008376:	4b5a      	ldr	r3, [pc, #360]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f023 0203 	bic.w	r2, r3, #3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	4957      	ldr	r1, [pc, #348]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008384:	4313      	orrs	r3, r2
 8008386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008388:	f7fd f93a 	bl	8005600 <HAL_GetTick>
 800838c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800838e:	e00a      	b.n	80083a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008390:	f7fd f936 	bl	8005600 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800839e:	4293      	cmp	r3, r2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e095      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083a6:	4b4e      	ldr	r3, [pc, #312]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f003 020c 	and.w	r2, r3, #12
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d1eb      	bne.n	8008390 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d023      	beq.n	800840c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083d0:	4b43      	ldr	r3, [pc, #268]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	4a42      	ldr	r2, [pc, #264]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80083da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0308 	and.w	r3, r3, #8
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d007      	beq.n	80083f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80083e8:	4b3d      	ldr	r3, [pc, #244]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80083f0:	4a3b      	ldr	r2, [pc, #236]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80083f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083f8:	4b39      	ldr	r3, [pc, #228]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	4936      	ldr	r1, [pc, #216]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008406:	4313      	orrs	r3, r2
 8008408:	608b      	str	r3, [r1, #8]
 800840a:	e008      	b.n	800841e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	2b80      	cmp	r3, #128	@ 0x80
 8008410:	d105      	bne.n	800841e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008412:	4b33      	ldr	r3, [pc, #204]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	4a32      	ldr	r2, [pc, #200]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008418:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800841c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800841e:	4b2f      	ldr	r3, [pc, #188]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 030f 	and.w	r3, r3, #15
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d21d      	bcs.n	8008468 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800842c:	4b2b      	ldr	r3, [pc, #172]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f023 020f 	bic.w	r2, r3, #15
 8008434:	4929      	ldr	r1, [pc, #164]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	4313      	orrs	r3, r2
 800843a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800843c:	f7fd f8e0 	bl	8005600 <HAL_GetTick>
 8008440:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008442:	e00a      	b.n	800845a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008444:	f7fd f8dc 	bl	8005600 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008452:	4293      	cmp	r3, r2
 8008454:	d901      	bls.n	800845a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e03b      	b.n	80084d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800845a:	4b20      	ldr	r3, [pc, #128]	@ (80084dc <HAL_RCC_ClockConfig+0x260>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 030f 	and.w	r3, r3, #15
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d1ed      	bne.n	8008444 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d008      	beq.n	8008486 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008474:	4b1a      	ldr	r3, [pc, #104]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	4917      	ldr	r1, [pc, #92]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008482:	4313      	orrs	r3, r2
 8008484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d009      	beq.n	80084a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008492:	4b13      	ldr	r3, [pc, #76]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	490f      	ldr	r1, [pc, #60]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80084a6:	f000 f825 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b0c      	ldr	r3, [pc, #48]	@ (80084e0 <HAL_RCC_ClockConfig+0x264>)
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	091b      	lsrs	r3, r3, #4
 80084b2:	f003 030f 	and.w	r3, r3, #15
 80084b6:	490c      	ldr	r1, [pc, #48]	@ (80084e8 <HAL_RCC_ClockConfig+0x26c>)
 80084b8:	5ccb      	ldrb	r3, [r1, r3]
 80084ba:	f003 031f 	and.w	r3, r3, #31
 80084be:	fa22 f303 	lsr.w	r3, r2, r3
 80084c2:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <HAL_RCC_ClockConfig+0x270>)
 80084c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80084c6:	4b0a      	ldr	r3, [pc, #40]	@ (80084f0 <HAL_RCC_ClockConfig+0x274>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd f84c 	bl	8005568 <HAL_InitTick>
 80084d0:	4603      	mov	r3, r0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	40022000 	.word	0x40022000
 80084e0:	40021000 	.word	0x40021000
 80084e4:	04c4b400 	.word	0x04c4b400
 80084e8:	0800e0ec 	.word	0x0800e0ec
 80084ec:	2000018c 	.word	0x2000018c
 80084f0:	20000190 	.word	0x20000190

080084f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084fa:	4b2c      	ldr	r3, [pc, #176]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 030c 	and.w	r3, r3, #12
 8008502:	2b04      	cmp	r3, #4
 8008504:	d102      	bne.n	800850c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008506:	4b2a      	ldr	r3, [pc, #168]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008508:	613b      	str	r3, [r7, #16]
 800850a:	e047      	b.n	800859c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800850c:	4b27      	ldr	r3, [pc, #156]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 030c 	and.w	r3, r3, #12
 8008514:	2b08      	cmp	r3, #8
 8008516:	d102      	bne.n	800851e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008518:	4b26      	ldr	r3, [pc, #152]	@ (80085b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	e03e      	b.n	800859c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800851e:	4b23      	ldr	r3, [pc, #140]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	f003 030c 	and.w	r3, r3, #12
 8008526:	2b0c      	cmp	r3, #12
 8008528:	d136      	bne.n	8008598 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800852a:	4b20      	ldr	r3, [pc, #128]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008534:	4b1d      	ldr	r3, [pc, #116]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	091b      	lsrs	r3, r3, #4
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	3301      	adds	r3, #1
 8008540:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d10c      	bne.n	8008562 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008548:	4a1a      	ldr	r2, [pc, #104]	@ (80085b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008550:	4a16      	ldr	r2, [pc, #88]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008552:	68d2      	ldr	r2, [r2, #12]
 8008554:	0a12      	lsrs	r2, r2, #8
 8008556:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800855a:	fb02 f303 	mul.w	r3, r2, r3
 800855e:	617b      	str	r3, [r7, #20]
      break;
 8008560:	e00c      	b.n	800857c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008562:	4a13      	ldr	r2, [pc, #76]	@ (80085b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	fbb2 f3f3 	udiv	r3, r2, r3
 800856a:	4a10      	ldr	r2, [pc, #64]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800856c:	68d2      	ldr	r2, [r2, #12]
 800856e:	0a12      	lsrs	r2, r2, #8
 8008570:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008574:	fb02 f303 	mul.w	r3, r2, r3
 8008578:	617b      	str	r3, [r7, #20]
      break;
 800857a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800857c:	4b0b      	ldr	r3, [pc, #44]	@ (80085ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	0e5b      	lsrs	r3, r3, #25
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	3301      	adds	r3, #1
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800858c:	697a      	ldr	r2, [r7, #20]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	fbb2 f3f3 	udiv	r3, r2, r3
 8008594:	613b      	str	r3, [r7, #16]
 8008596:	e001      	b.n	800859c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008598:	2300      	movs	r3, #0
 800859a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800859c:	693b      	ldr	r3, [r7, #16]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	40021000 	.word	0x40021000
 80085b0:	00f42400 	.word	0x00f42400
 80085b4:	016e3600 	.word	0x016e3600

080085b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <HAL_RCC_GetHCLKFreq+0x14>)
 80085be:	681b      	ldr	r3, [r3, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	2000018c 	.word	0x2000018c

080085d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085d4:	f7ff fff0 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 80085d8:	4602      	mov	r2, r0
 80085da:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	0a1b      	lsrs	r3, r3, #8
 80085e0:	f003 0307 	and.w	r3, r3, #7
 80085e4:	4904      	ldr	r1, [pc, #16]	@ (80085f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085e6:	5ccb      	ldrb	r3, [r1, r3]
 80085e8:	f003 031f 	and.w	r3, r3, #31
 80085ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	40021000 	.word	0x40021000
 80085f8:	0800e0fc 	.word	0x0800e0fc

080085fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008600:	f7ff ffda 	bl	80085b8 <HAL_RCC_GetHCLKFreq>
 8008604:	4602      	mov	r2, r0
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	0adb      	lsrs	r3, r3, #11
 800860c:	f003 0307 	and.w	r3, r3, #7
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008612:	5ccb      	ldrb	r3, [r1, r3]
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800861c:	4618      	mov	r0, r3
 800861e:	bd80      	pop	{r7, pc}
 8008620:	40021000 	.word	0x40021000
 8008624:	0800e0fc 	.word	0x0800e0fc

08008628 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800862e:	4b1e      	ldr	r3, [pc, #120]	@ (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008638:	4b1b      	ldr	r3, [pc, #108]	@ (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	091b      	lsrs	r3, r3, #4
 800863e:	f003 030f 	and.w	r3, r3, #15
 8008642:	3301      	adds	r3, #1
 8008644:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b03      	cmp	r3, #3
 800864a:	d10c      	bne.n	8008666 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800864c:	4a17      	ldr	r2, [pc, #92]	@ (80086ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	fbb2 f3f3 	udiv	r3, r2, r3
 8008654:	4a14      	ldr	r2, [pc, #80]	@ (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008656:	68d2      	ldr	r2, [r2, #12]
 8008658:	0a12      	lsrs	r2, r2, #8
 800865a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	617b      	str	r3, [r7, #20]
    break;
 8008664:	e00c      	b.n	8008680 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008666:	4a12      	ldr	r2, [pc, #72]	@ (80086b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	fbb2 f3f3 	udiv	r3, r2, r3
 800866e:	4a0e      	ldr	r2, [pc, #56]	@ (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008670:	68d2      	ldr	r2, [r2, #12]
 8008672:	0a12      	lsrs	r2, r2, #8
 8008674:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008678:	fb02 f303 	mul.w	r3, r2, r3
 800867c:	617b      	str	r3, [r7, #20]
    break;
 800867e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008680:	4b09      	ldr	r3, [pc, #36]	@ (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	0e5b      	lsrs	r3, r3, #25
 8008686:	f003 0303 	and.w	r3, r3, #3
 800868a:	3301      	adds	r3, #1
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	fbb2 f3f3 	udiv	r3, r2, r3
 8008698:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800869a:	687b      	ldr	r3, [r7, #4]
}
 800869c:	4618      	mov	r0, r3
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr
 80086a8:	40021000 	.word	0x40021000
 80086ac:	016e3600 	.word	0x016e3600
 80086b0:	00f42400 	.word	0x00f42400

080086b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086bc:	2300      	movs	r3, #0
 80086be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086c0:	2300      	movs	r3, #0
 80086c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f000 8098 	beq.w	8008802 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086d2:	2300      	movs	r3, #0
 80086d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086d6:	4b43      	ldr	r3, [pc, #268]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d10d      	bne.n	80086fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086e2:	4b40      	ldr	r3, [pc, #256]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086e6:	4a3f      	ldr	r2, [pc, #252]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80086ee:	4b3d      	ldr	r3, [pc, #244]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086f6:	60bb      	str	r3, [r7, #8]
 80086f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086fa:	2301      	movs	r3, #1
 80086fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086fe:	4b3a      	ldr	r3, [pc, #232]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a39      	ldr	r2, [pc, #228]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800870a:	f7fc ff79 	bl	8005600 <HAL_GetTick>
 800870e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008710:	e009      	b.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008712:	f7fc ff75 	bl	8005600 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d902      	bls.n	8008726 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	74fb      	strb	r3, [r7, #19]
        break;
 8008724:	e005      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008726:	4b30      	ldr	r3, [pc, #192]	@ (80087e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800872e:	2b00      	cmp	r3, #0
 8008730:	d0ef      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008732:	7cfb      	ldrb	r3, [r7, #19]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d159      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008738:	4b2a      	ldr	r3, [pc, #168]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800873e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008742:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d01e      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	429a      	cmp	r2, r3
 8008752:	d019      	beq.n	8008788 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008754:	4b23      	ldr	r3, [pc, #140]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800875a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800875e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008760:	4b20      	ldr	r3, [pc, #128]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008766:	4a1f      	ldr	r2, [pc, #124]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800876c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008770:	4b1c      	ldr	r3, [pc, #112]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008776:	4a1b      	ldr	r2, [pc, #108]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008778:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008780:	4a18      	ldr	r2, [pc, #96]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d016      	beq.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008792:	f7fc ff35 	bl	8005600 <HAL_GetTick>
 8008796:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008798:	e00b      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800879a:	f7fc ff31 	bl	8005600 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d902      	bls.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	74fb      	strb	r3, [r7, #19]
            break;
 80087b0:	e006      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087b2:	4b0c      	ldr	r3, [pc, #48]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d0ec      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80087c0:	7cfb      	ldrb	r3, [r7, #19]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10b      	bne.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087c6:	4b07      	ldr	r3, [pc, #28]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087d4:	4903      	ldr	r1, [pc, #12]	@ (80087e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80087dc:	e008      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087de:	7cfb      	ldrb	r3, [r7, #19]
 80087e0:	74bb      	strb	r3, [r7, #18]
 80087e2:	e005      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80087e4:	40021000 	.word	0x40021000
 80087e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ec:	7cfb      	ldrb	r3, [r7, #19]
 80087ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087f0:	7c7b      	ldrb	r3, [r7, #17]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087f6:	4ba7      	ldr	r3, [pc, #668]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087fa:	4aa6      	ldr	r2, [pc, #664]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008800:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800880e:	4ba1      	ldr	r3, [pc, #644]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008814:	f023 0203 	bic.w	r2, r3, #3
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	499d      	ldr	r1, [pc, #628]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 0302 	and.w	r3, r3, #2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00a      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008830:	4b98      	ldr	r3, [pc, #608]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008836:	f023 020c 	bic.w	r2, r3, #12
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	4995      	ldr	r1, [pc, #596]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008840:	4313      	orrs	r3, r2
 8008842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008852:	4b90      	ldr	r3, [pc, #576]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008858:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	498c      	ldr	r1, [pc, #560]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008862:	4313      	orrs	r3, r2
 8008864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00a      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008874:	4b87      	ldr	r3, [pc, #540]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800887a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	691b      	ldr	r3, [r3, #16]
 8008882:	4984      	ldr	r1, [pc, #528]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008884:	4313      	orrs	r3, r2
 8008886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00a      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008896:	4b7f      	ldr	r3, [pc, #508]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800889c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	497b      	ldr	r1, [pc, #492]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088a6:	4313      	orrs	r3, r2
 80088a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00a      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088b8:	4b76      	ldr	r3, [pc, #472]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	4973      	ldr	r1, [pc, #460]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d00a      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088da:	4b6e      	ldr	r3, [pc, #440]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	69db      	ldr	r3, [r3, #28]
 80088e8:	496a      	ldr	r1, [pc, #424]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088fc:	4b65      	ldr	r3, [pc, #404]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008902:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a1b      	ldr	r3, [r3, #32]
 800890a:	4962      	ldr	r1, [pc, #392]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800890c:	4313      	orrs	r3, r2
 800890e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00a      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800891e:	4b5d      	ldr	r3, [pc, #372]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800892c:	4959      	ldr	r1, [pc, #356]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800892e:	4313      	orrs	r3, r2
 8008930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00a      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008940:	4b54      	ldr	r3, [pc, #336]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008942:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008946:	f023 0203 	bic.w	r2, r3, #3
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800894e:	4951      	ldr	r1, [pc, #324]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008950:	4313      	orrs	r3, r2
 8008952:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008962:	4b4c      	ldr	r3, [pc, #304]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008968:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	4948      	ldr	r1, [pc, #288]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008980:	2b00      	cmp	r3, #0
 8008982:	d015      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008984:	4b43      	ldr	r3, [pc, #268]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800898a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008992:	4940      	ldr	r1, [pc, #256]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800899e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089a2:	d105      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	4a3a      	ldr	r2, [pc, #232]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089ae:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d015      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089bc:	4b35      	ldr	r3, [pc, #212]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ca:	4932      	ldr	r1, [pc, #200]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089cc:	4313      	orrs	r3, r2
 80089ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089da:	d105      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80089e6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d015      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089f4:	4b27      	ldr	r3, [pc, #156]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089fa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a02:	4924      	ldr	r1, [pc, #144]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a12:	d105      	bne.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a14:	4b1f      	ldr	r3, [pc, #124]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	4a1e      	ldr	r2, [pc, #120]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a1e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a2c:	4b19      	ldr	r3, [pc, #100]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a32:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3a:	4916      	ldr	r1, [pc, #88]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a46:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a4a:	d105      	bne.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a4c:	4b11      	ldr	r3, [pc, #68]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	4a10      	ldr	r2, [pc, #64]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a56:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d019      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a64:	4b0b      	ldr	r3, [pc, #44]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a6a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a72:	4908      	ldr	r1, [pc, #32]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a74:	4313      	orrs	r3, r2
 8008a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a82:	d109      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a84:	4b03      	ldr	r3, [pc, #12]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	4a02      	ldr	r2, [pc, #8]	@ (8008a94 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a8e:	60d3      	str	r3, [r2, #12]
 8008a90:	e002      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a92:	bf00      	nop
 8008a94:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d015      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008aa4:	4b29      	ldr	r3, [pc, #164]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aaa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ab2:	4926      	ldr	r1, [pc, #152]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008abe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac2:	d105      	bne.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ac4:	4b21      	ldr	r3, [pc, #132]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	4a20      	ldr	r2, [pc, #128]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ace:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d015      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008adc:	4b1b      	ldr	r3, [pc, #108]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ae2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aea:	4918      	ldr	r1, [pc, #96]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008af6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008afa:	d105      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008afc:	4b13      	ldr	r3, [pc, #76]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	4a12      	ldr	r2, [pc, #72]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b06:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d015      	beq.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b14:	4b0d      	ldr	r3, [pc, #52]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b22:	490a      	ldr	r1, [pc, #40]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b32:	d105      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b34:	4b05      	ldr	r3, [pc, #20]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	4a04      	ldr	r2, [pc, #16]	@ (8008b4c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b3e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008b40:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40021000 	.word	0x40021000

08008b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d101      	bne.n	8008b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e054      	b.n	8008c0c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d111      	bne.n	8008b92 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f001 fee2 	bl	800a940 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a23      	ldr	r2, [pc, #140]	@ (8008c14 <HAL_TIM_Base_Init+0xc4>)
 8008b88:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	f001 fa2b 	bl	800a000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2201      	movs	r2, #1
 8008bae:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2201      	movs	r2, #1
 8008bfe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	08004e29 	.word	0x08004e29

08008c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d001      	beq.n	8008c30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e04c      	b.n	8008cca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a26      	ldr	r2, [pc, #152]	@ (8008cd8 <HAL_TIM_Base_Start+0xc0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d022      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4a:	d01d      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a22      	ldr	r2, [pc, #136]	@ (8008cdc <HAL_TIM_Base_Start+0xc4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d018      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a21      	ldr	r2, [pc, #132]	@ (8008ce0 <HAL_TIM_Base_Start+0xc8>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d013      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a1f      	ldr	r2, [pc, #124]	@ (8008ce4 <HAL_TIM_Base_Start+0xcc>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d00e      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ce8 <HAL_TIM_Base_Start+0xd0>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d009      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a1c      	ldr	r2, [pc, #112]	@ (8008cec <HAL_TIM_Base_Start+0xd4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d004      	beq.n	8008c88 <HAL_TIM_Base_Start+0x70>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a1b      	ldr	r2, [pc, #108]	@ (8008cf0 <HAL_TIM_Base_Start+0xd8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d115      	bne.n	8008cb4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	689a      	ldr	r2, [r3, #8]
 8008c8e:	4b19      	ldr	r3, [pc, #100]	@ (8008cf4 <HAL_TIM_Base_Start+0xdc>)
 8008c90:	4013      	ands	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b06      	cmp	r3, #6
 8008c98:	d015      	beq.n	8008cc6 <HAL_TIM_Base_Start+0xae>
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ca0:	d011      	beq.n	8008cc6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f042 0201 	orr.w	r2, r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb2:	e008      	b.n	8008cc6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e000      	b.n	8008cc8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40013400 	.word	0x40013400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40015000 	.word	0x40015000
 8008cf4:	00010007 	.word	0x00010007

08008cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d001      	beq.n	8008d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e054      	b.n	8008dba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2202      	movs	r2, #2
 8008d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68da      	ldr	r2, [r3, #12]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0201 	orr.w	r2, r2, #1
 8008d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a26      	ldr	r2, [pc, #152]	@ (8008dc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d022      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d3a:	d01d      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a22      	ldr	r2, [pc, #136]	@ (8008dcc <HAL_TIM_Base_Start_IT+0xd4>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d018      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a21      	ldr	r2, [pc, #132]	@ (8008dd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d013      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a1f      	ldr	r2, [pc, #124]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d00e      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d009      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a1c      	ldr	r2, [pc, #112]	@ (8008ddc <HAL_TIM_Base_Start_IT+0xe4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d004      	beq.n	8008d78 <HAL_TIM_Base_Start_IT+0x80>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a1b      	ldr	r2, [pc, #108]	@ (8008de0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d115      	bne.n	8008da4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	4b19      	ldr	r3, [pc, #100]	@ (8008de4 <HAL_TIM_Base_Start_IT+0xec>)
 8008d80:	4013      	ands	r3, r2
 8008d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b06      	cmp	r3, #6
 8008d88:	d015      	beq.n	8008db6 <HAL_TIM_Base_Start_IT+0xbe>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d90:	d011      	beq.n	8008db6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f042 0201 	orr.w	r2, r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008da2:	e008      	b.n	8008db6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	681a      	ldr	r2, [r3, #0]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f042 0201 	orr.w	r2, r2, #1
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	e000      	b.n	8008db8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40012c00 	.word	0x40012c00
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	40013400 	.word	0x40013400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40015000 	.word	0x40015000
 8008de4:	00010007 	.word	0x00010007

08008de8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e054      	b.n	8008ea4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d111      	bne.n	8008e2a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f001 fd96 	bl	800a940 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d102      	bne.n	8008e22 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a23      	ldr	r2, [pc, #140]	@ (8008eac <HAL_TIM_PWM_Init+0xc4>)
 8008e20:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	3304      	adds	r3, #4
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4610      	mov	r0, r2
 8008e3e:	f001 f8df 	bl	800a000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ea2:	2300      	movs	r3, #0
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	3708      	adds	r7, #8
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	bd80      	pop	{r7, pc}
 8008eac:	08004ddd 	.word	0x08004ddd

08008eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d109      	bne.n	8008ed4 <HAL_TIM_PWM_Start+0x24>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	bf14      	ite	ne
 8008ecc:	2301      	movne	r3, #1
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	e03c      	b.n	8008f4e <HAL_TIM_PWM_Start+0x9e>
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d109      	bne.n	8008eee <HAL_TIM_PWM_Start+0x3e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	bf14      	ite	ne
 8008ee6:	2301      	movne	r3, #1
 8008ee8:	2300      	moveq	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	e02f      	b.n	8008f4e <HAL_TIM_PWM_Start+0x9e>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b08      	cmp	r3, #8
 8008ef2:	d109      	bne.n	8008f08 <HAL_TIM_PWM_Start+0x58>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	bf14      	ite	ne
 8008f00:	2301      	movne	r3, #1
 8008f02:	2300      	moveq	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	e022      	b.n	8008f4e <HAL_TIM_PWM_Start+0x9e>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b0c      	cmp	r3, #12
 8008f0c:	d109      	bne.n	8008f22 <HAL_TIM_PWM_Start+0x72>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	bf14      	ite	ne
 8008f1a:	2301      	movne	r3, #1
 8008f1c:	2300      	moveq	r3, #0
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	e015      	b.n	8008f4e <HAL_TIM_PWM_Start+0x9e>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d109      	bne.n	8008f3c <HAL_TIM_PWM_Start+0x8c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	bf14      	ite	ne
 8008f34:	2301      	movne	r3, #1
 8008f36:	2300      	moveq	r3, #0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	e008      	b.n	8008f4e <HAL_TIM_PWM_Start+0x9e>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	bf14      	ite	ne
 8008f48:	2301      	movne	r3, #1
 8008f4a:	2300      	moveq	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d001      	beq.n	8008f56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e0a6      	b.n	80090a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <HAL_TIM_PWM_Start+0xb6>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2202      	movs	r2, #2
 8008f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f64:	e023      	b.n	8008fae <HAL_TIM_PWM_Start+0xfe>
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d104      	bne.n	8008f76 <HAL_TIM_PWM_Start+0xc6>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2202      	movs	r2, #2
 8008f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f74:	e01b      	b.n	8008fae <HAL_TIM_PWM_Start+0xfe>
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d104      	bne.n	8008f86 <HAL_TIM_PWM_Start+0xd6>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f84:	e013      	b.n	8008fae <HAL_TIM_PWM_Start+0xfe>
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b0c      	cmp	r3, #12
 8008f8a:	d104      	bne.n	8008f96 <HAL_TIM_PWM_Start+0xe6>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f94:	e00b      	b.n	8008fae <HAL_TIM_PWM_Start+0xfe>
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b10      	cmp	r3, #16
 8008f9a:	d104      	bne.n	8008fa6 <HAL_TIM_PWM_Start+0xf6>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fa4:	e003      	b.n	8008fae <HAL_TIM_PWM_Start+0xfe>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f001 fc9c 	bl	800a8f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a3a      	ldr	r2, [pc, #232]	@ (80090ac <HAL_TIM_PWM_Start+0x1fc>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d018      	beq.n	8008ff8 <HAL_TIM_PWM_Start+0x148>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a39      	ldr	r2, [pc, #228]	@ (80090b0 <HAL_TIM_PWM_Start+0x200>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d013      	beq.n	8008ff8 <HAL_TIM_PWM_Start+0x148>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a37      	ldr	r2, [pc, #220]	@ (80090b4 <HAL_TIM_PWM_Start+0x204>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d00e      	beq.n	8008ff8 <HAL_TIM_PWM_Start+0x148>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a36      	ldr	r2, [pc, #216]	@ (80090b8 <HAL_TIM_PWM_Start+0x208>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d009      	beq.n	8008ff8 <HAL_TIM_PWM_Start+0x148>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a34      	ldr	r2, [pc, #208]	@ (80090bc <HAL_TIM_PWM_Start+0x20c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d004      	beq.n	8008ff8 <HAL_TIM_PWM_Start+0x148>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a33      	ldr	r2, [pc, #204]	@ (80090c0 <HAL_TIM_PWM_Start+0x210>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d101      	bne.n	8008ffc <HAL_TIM_PWM_Start+0x14c>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e000      	b.n	8008ffe <HAL_TIM_PWM_Start+0x14e>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d007      	beq.n	8009012 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009010:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a25      	ldr	r2, [pc, #148]	@ (80090ac <HAL_TIM_PWM_Start+0x1fc>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d022      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009024:	d01d      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a26      	ldr	r2, [pc, #152]	@ (80090c4 <HAL_TIM_PWM_Start+0x214>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d018      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a24      	ldr	r2, [pc, #144]	@ (80090c8 <HAL_TIM_PWM_Start+0x218>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d013      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a23      	ldr	r2, [pc, #140]	@ (80090cc <HAL_TIM_PWM_Start+0x21c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d00e      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a19      	ldr	r2, [pc, #100]	@ (80090b0 <HAL_TIM_PWM_Start+0x200>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d009      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a18      	ldr	r2, [pc, #96]	@ (80090b4 <HAL_TIM_PWM_Start+0x204>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <HAL_TIM_PWM_Start+0x1b2>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a18      	ldr	r2, [pc, #96]	@ (80090c0 <HAL_TIM_PWM_Start+0x210>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d115      	bne.n	800908e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	4b19      	ldr	r3, [pc, #100]	@ (80090d0 <HAL_TIM_PWM_Start+0x220>)
 800906a:	4013      	ands	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2b06      	cmp	r3, #6
 8009072:	d015      	beq.n	80090a0 <HAL_TIM_PWM_Start+0x1f0>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800907a:	d011      	beq.n	80090a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0201 	orr.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800908c:	e008      	b.n	80090a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f042 0201 	orr.w	r2, r2, #1
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	e000      	b.n	80090a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40012c00 	.word	0x40012c00
 80090b0:	40013400 	.word	0x40013400
 80090b4:	40014000 	.word	0x40014000
 80090b8:	40014400 	.word	0x40014400
 80090bc:	40014800 	.word	0x40014800
 80090c0:	40015000 	.word	0x40015000
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	00010007 	.word	0x00010007

080090d4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d101      	bne.n	80090e8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
 80090e6:	e04c      	b.n	8009182 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d111      	bne.n	8009118 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f001 fc1f 	bl	800a940 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a1f      	ldr	r2, [pc, #124]	@ (800918c <HAL_TIM_OnePulse_Init+0xb8>)
 800910e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681a      	ldr	r2, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	3304      	adds	r3, #4
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f000 ff68 	bl	800a000 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f022 0208 	bic.w	r2, r2, #8
 800913e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6819      	ldr	r1, [r3, #0]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	430a      	orrs	r2, r1
 800914e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2201      	movs	r2, #1
 8009174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2201      	movs	r2, #1
 800917c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3708      	adds	r7, #8
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	08009191 	.word	0x08009191

08009190 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80091b4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80091bc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80091c4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80091cc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d108      	bne.n	80091e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d105      	bne.n	80091e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80091da:	7b7b      	ldrb	r3, [r7, #13]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d102      	bne.n	80091e6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80091e0:	7b3b      	ldrb	r3, [r7, #12]
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d001      	beq.n	80091ea <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e059      	b.n	800929e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2202      	movs	r2, #2
 80091ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2202      	movs	r2, #2
 80091f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2202      	movs	r2, #2
 80091fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2202      	movs	r2, #2
 8009206:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68da      	ldr	r2, [r3, #12]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f042 0202 	orr.w	r2, r2, #2
 8009218:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	68da      	ldr	r2, [r3, #12]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0204 	orr.w	r2, r2, #4
 8009228:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2201      	movs	r2, #1
 8009230:	2100      	movs	r1, #0
 8009232:	4618      	mov	r0, r3
 8009234:	f001 fb5e 	bl	800a8f4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2201      	movs	r2, #1
 800923e:	2104      	movs	r1, #4
 8009240:	4618      	mov	r0, r3
 8009242:	f001 fb57 	bl	800a8f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a17      	ldr	r2, [pc, #92]	@ (80092a8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d018      	beq.n	8009282 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a15      	ldr	r2, [pc, #84]	@ (80092ac <HAL_TIM_OnePulse_Start_IT+0x108>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d013      	beq.n	8009282 <HAL_TIM_OnePulse_Start_IT+0xde>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a14      	ldr	r2, [pc, #80]	@ (80092b0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d00e      	beq.n	8009282 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a12      	ldr	r2, [pc, #72]	@ (80092b4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d009      	beq.n	8009282 <HAL_TIM_OnePulse_Start_IT+0xde>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d004      	beq.n	8009282 <HAL_TIM_OnePulse_Start_IT+0xde>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a0f      	ldr	r2, [pc, #60]	@ (80092bc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d101      	bne.n	8009286 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8009286:	2300      	movs	r3, #0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d007      	beq.n	800929c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800929a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	40012c00 	.word	0x40012c00
 80092ac:	40013400 	.word	0x40013400
 80092b0:	40014000 	.word	0x40014000
 80092b4:	40014400 	.word	0x40014400
 80092b8:	40014800 	.word	0x40014800
 80092bc:	40015000 	.word	0x40015000

080092c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	e0a2      	b.n	800941a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d111      	bne.n	8009304 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 fb29 	bl	800a940 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d102      	bne.n	80092fc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a4a      	ldr	r2, [pc, #296]	@ (8009424 <HAL_TIM_Encoder_Init+0x164>)
 80092fa:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800931a:	f023 0307 	bic.w	r3, r3, #7
 800931e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	3304      	adds	r3, #4
 8009328:	4619      	mov	r1, r3
 800932a:	4610      	mov	r0, r2
 800932c:	f000 fe68 	bl	800a000 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	6a1b      	ldr	r3, [r3, #32]
 8009346:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	4313      	orrs	r3, r2
 8009350:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009358:	f023 0303 	bic.w	r3, r3, #3
 800935c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689a      	ldr	r2, [r3, #8]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	699b      	ldr	r3, [r3, #24]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	4313      	orrs	r3, r2
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009376:	f023 030c 	bic.w	r3, r3, #12
 800937a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009382:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	68da      	ldr	r2, [r3, #12]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	69db      	ldr	r3, [r3, #28]
 8009390:	021b      	lsls	r3, r3, #8
 8009392:	4313      	orrs	r3, r2
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	4313      	orrs	r3, r2
 8009398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	011a      	lsls	r2, r3, #4
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	6a1b      	ldr	r3, [r3, #32]
 80093a4:	031b      	lsls	r3, r3, #12
 80093a6:	4313      	orrs	r3, r2
 80093a8:	693a      	ldr	r2, [r7, #16]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80093b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80093bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	4313      	orrs	r3, r2
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	697a      	ldr	r2, [r7, #20]
 80093d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	693a      	ldr	r2, [r7, #16]
 80093de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2201      	movs	r2, #1
 80093ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2201      	movs	r2, #1
 80093f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	08004ef9 	.word	0x08004ef9

08009428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009438:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009440:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009448:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009450:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d110      	bne.n	800947a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d102      	bne.n	8009464 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d001      	beq.n	8009468 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
 8009466:	e069      	b.n	800953c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2202      	movs	r2, #2
 8009474:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009478:	e031      	b.n	80094de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b04      	cmp	r3, #4
 800947e:	d110      	bne.n	80094a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d102      	bne.n	800948c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009486:	7b3b      	ldrb	r3, [r7, #12]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d001      	beq.n	8009490 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e055      	b.n	800953c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80094a0:	e01d      	b.n	80094de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094a2:	7bfb      	ldrb	r3, [r7, #15]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d108      	bne.n	80094ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80094a8:	7bbb      	ldrb	r3, [r7, #14]
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d105      	bne.n	80094ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80094ae:	7b7b      	ldrb	r3, [r7, #13]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d102      	bne.n	80094ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80094b4:	7b3b      	ldrb	r3, [r7, #12]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d001      	beq.n	80094be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e03e      	b.n	800953c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2202      	movs	r2, #2
 80094c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2202      	movs	r2, #2
 80094ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2202      	movs	r2, #2
 80094d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <HAL_TIM_Encoder_Start+0xc4>
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d008      	beq.n	80094fc <HAL_TIM_Encoder_Start+0xd4>
 80094ea:	e00f      	b.n	800950c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2201      	movs	r2, #1
 80094f2:	2100      	movs	r1, #0
 80094f4:	4618      	mov	r0, r3
 80094f6:	f001 f9fd 	bl	800a8f4 <TIM_CCxChannelCmd>
      break;
 80094fa:	e016      	b.n	800952a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2201      	movs	r2, #1
 8009502:	2104      	movs	r1, #4
 8009504:	4618      	mov	r0, r3
 8009506:	f001 f9f5 	bl	800a8f4 <TIM_CCxChannelCmd>
      break;
 800950a:	e00e      	b.n	800952a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2201      	movs	r2, #1
 8009512:	2100      	movs	r1, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f9ed 	bl	800a8f4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	2201      	movs	r2, #1
 8009520:	2104      	movs	r1, #4
 8009522:	4618      	mov	r0, r3
 8009524:	f001 f9e6 	bl	800a8f4 <TIM_CCxChannelCmd>
      break;
 8009528:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d026      	beq.n	80095b4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d021      	beq.n	80095b4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f06f 0202 	mvn.w	r2, #2
 8009578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	4798      	blx	r3
 8009598:	e009      	b.n	80095ae <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	f003 0304 	and.w	r3, r3, #4
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d026      	beq.n	800960c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 0304 	and.w	r3, r3, #4
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d021      	beq.n	800960c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0204 	mvn.w	r2, #4
 80095d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d005      	beq.n	80095f2 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	4798      	blx	r3
 80095f0:	e009      	b.n	8009606 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	f003 0308 	and.w	r3, r3, #8
 8009612:	2b00      	cmp	r3, #0
 8009614:	d026      	beq.n	8009664 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f003 0308 	and.w	r3, r3, #8
 800961c:	2b00      	cmp	r3, #0
 800961e:	d021      	beq.n	8009664 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f06f 0208 	mvn.w	r2, #8
 8009628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2204      	movs	r2, #4
 800962e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d005      	beq.n	800964a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	4798      	blx	r3
 8009648:	e009      	b.n	800965e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f003 0310 	and.w	r3, r3, #16
 800966a:	2b00      	cmp	r3, #0
 800966c:	d026      	beq.n	80096bc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	2b00      	cmp	r3, #0
 8009676:	d021      	beq.n	80096bc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0210 	mvn.w	r2, #16
 8009680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2208      	movs	r2, #8
 8009686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009692:	2b00      	cmp	r3, #0
 8009694:	d005      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	4798      	blx	r3
 80096a0:	e009      	b.n	80096b6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00e      	beq.n	80096e4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f003 0301 	and.w	r3, r3, #1
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0201 	mvn.w	r2, #1
 80096d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d104      	bne.n	80096f8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00e      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800970a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00e      	beq.n	800973e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800975a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f003 0320 	and.w	r3, r3, #32
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00e      	beq.n	800978e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 0320 	and.w	r3, r3, #32
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f06f 0220 	mvn.w	r2, #32
 8009782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00e      	beq.n	80097b6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d009      	beq.n	80097b6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80097aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00e      	beq.n	80097de <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d009      	beq.n	80097de <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80097d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00e      	beq.n	8009806 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d009      	beq.n	8009806 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80097fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d00e      	beq.n	800982e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d009      	beq.n	800982e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800982e:	bf00      	nop
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009844:	2300      	movs	r3, #0
 8009846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009852:	2302      	movs	r3, #2
 8009854:	e0ff      	b.n	8009a56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2b14      	cmp	r3, #20
 8009862:	f200 80f0 	bhi.w	8009a46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009866:	a201      	add	r2, pc, #4	@ (adr r2, 800986c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800986c:	080098c1 	.word	0x080098c1
 8009870:	08009a47 	.word	0x08009a47
 8009874:	08009a47 	.word	0x08009a47
 8009878:	08009a47 	.word	0x08009a47
 800987c:	08009901 	.word	0x08009901
 8009880:	08009a47 	.word	0x08009a47
 8009884:	08009a47 	.word	0x08009a47
 8009888:	08009a47 	.word	0x08009a47
 800988c:	08009943 	.word	0x08009943
 8009890:	08009a47 	.word	0x08009a47
 8009894:	08009a47 	.word	0x08009a47
 8009898:	08009a47 	.word	0x08009a47
 800989c:	08009983 	.word	0x08009983
 80098a0:	08009a47 	.word	0x08009a47
 80098a4:	08009a47 	.word	0x08009a47
 80098a8:	08009a47 	.word	0x08009a47
 80098ac:	080099c5 	.word	0x080099c5
 80098b0:	08009a47 	.word	0x08009a47
 80098b4:	08009a47 	.word	0x08009a47
 80098b8:	08009a47 	.word	0x08009a47
 80098bc:	08009a05 	.word	0x08009a05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fc4e 	bl	800a168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699a      	ldr	r2, [r3, #24]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0208 	orr.w	r2, r2, #8
 80098da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0204 	bic.w	r2, r2, #4
 80098ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6999      	ldr	r1, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	691a      	ldr	r2, [r3, #16]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	430a      	orrs	r2, r1
 80098fc:	619a      	str	r2, [r3, #24]
      break;
 80098fe:	e0a5      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68b9      	ldr	r1, [r7, #8]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fcc8 	bl	800a29c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	699a      	ldr	r2, [r3, #24]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800991a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	699a      	ldr	r2, [r3, #24]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800992a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6999      	ldr	r1, [r3, #24]
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	021a      	lsls	r2, r3, #8
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	619a      	str	r2, [r3, #24]
      break;
 8009940:	e084      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fd3b 	bl	800a3c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f042 0208 	orr.w	r2, r2, #8
 800995c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f022 0204 	bic.w	r2, r2, #4
 800996c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69d9      	ldr	r1, [r3, #28]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	430a      	orrs	r2, r1
 800997e:	61da      	str	r2, [r3, #28]
      break;
 8009980:	e064      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	4618      	mov	r0, r3
 800998a:	f000 fdad 	bl	800a4e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69da      	ldr	r2, [r3, #28]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800999c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	69da      	ldr	r2, [r3, #28]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80099ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	69d9      	ldr	r1, [r3, #28]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	021a      	lsls	r2, r3, #8
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	61da      	str	r2, [r3, #28]
      break;
 80099c2:	e043      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fe20 	bl	800a610 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0208 	orr.w	r2, r2, #8
 80099de:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 0204 	bic.w	r2, r2, #4
 80099ee:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691a      	ldr	r2, [r3, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009a02:	e023      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fe6a 	bl	800a6e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009a2e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	021a      	lsls	r2, r3, #8
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009a44:	e002      	b.n	8009a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop

08009a60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d101      	bne.n	8009a7c <HAL_TIM_ConfigClockSource+0x1c>
 8009a78:	2302      	movs	r3, #2
 8009a7a:	e0f6      	b.n	8009c6a <HAL_TIM_ConfigClockSource+0x20a>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2202      	movs	r2, #2
 8009a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009a9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a6f      	ldr	r2, [pc, #444]	@ (8009c74 <HAL_TIM_ConfigClockSource+0x214>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	f000 80c1 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009abc:	4a6d      	ldr	r2, [pc, #436]	@ (8009c74 <HAL_TIM_ConfigClockSource+0x214>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	f200 80c6 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ac4:	4a6c      	ldr	r2, [pc, #432]	@ (8009c78 <HAL_TIM_ConfigClockSource+0x218>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	f000 80b9 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009acc:	4a6a      	ldr	r2, [pc, #424]	@ (8009c78 <HAL_TIM_ConfigClockSource+0x218>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	f200 80be 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ad4:	4a69      	ldr	r2, [pc, #420]	@ (8009c7c <HAL_TIM_ConfigClockSource+0x21c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	f000 80b1 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009adc:	4a67      	ldr	r2, [pc, #412]	@ (8009c7c <HAL_TIM_ConfigClockSource+0x21c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	f200 80b6 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009ae4:	4a66      	ldr	r2, [pc, #408]	@ (8009c80 <HAL_TIM_ConfigClockSource+0x220>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	f000 80a9 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009aec:	4a64      	ldr	r2, [pc, #400]	@ (8009c80 <HAL_TIM_ConfigClockSource+0x220>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	f200 80ae 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009af4:	4a63      	ldr	r2, [pc, #396]	@ (8009c84 <HAL_TIM_ConfigClockSource+0x224>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	f000 80a1 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009afc:	4a61      	ldr	r2, [pc, #388]	@ (8009c84 <HAL_TIM_ConfigClockSource+0x224>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	f200 80a6 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b04:	4a60      	ldr	r2, [pc, #384]	@ (8009c88 <HAL_TIM_ConfigClockSource+0x228>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	f000 8099 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b0c:	4a5e      	ldr	r2, [pc, #376]	@ (8009c88 <HAL_TIM_ConfigClockSource+0x228>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	f200 809e 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b14:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b18:	f000 8091 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009b20:	f200 8096 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b28:	f000 8089 	beq.w	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b30:	f200 808e 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b38:	d03e      	beq.n	8009bb8 <HAL_TIM_ConfigClockSource+0x158>
 8009b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b3e:	f200 8087 	bhi.w	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b46:	f000 8086 	beq.w	8009c56 <HAL_TIM_ConfigClockSource+0x1f6>
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b4e:	d87f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b50:	2b70      	cmp	r3, #112	@ 0x70
 8009b52:	d01a      	beq.n	8009b8a <HAL_TIM_ConfigClockSource+0x12a>
 8009b54:	2b70      	cmp	r3, #112	@ 0x70
 8009b56:	d87b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b58:	2b60      	cmp	r3, #96	@ 0x60
 8009b5a:	d050      	beq.n	8009bfe <HAL_TIM_ConfigClockSource+0x19e>
 8009b5c:	2b60      	cmp	r3, #96	@ 0x60
 8009b5e:	d877      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b60:	2b50      	cmp	r3, #80	@ 0x50
 8009b62:	d03c      	beq.n	8009bde <HAL_TIM_ConfigClockSource+0x17e>
 8009b64:	2b50      	cmp	r3, #80	@ 0x50
 8009b66:	d873      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b68:	2b40      	cmp	r3, #64	@ 0x40
 8009b6a:	d058      	beq.n	8009c1e <HAL_TIM_ConfigClockSource+0x1be>
 8009b6c:	2b40      	cmp	r3, #64	@ 0x40
 8009b6e:	d86f      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b70:	2b30      	cmp	r3, #48	@ 0x30
 8009b72:	d064      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b74:	2b30      	cmp	r3, #48	@ 0x30
 8009b76:	d86b      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d060      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b7c:	2b20      	cmp	r3, #32
 8009b7e:	d867      	bhi.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d05c      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b84:	2b10      	cmp	r3, #16
 8009b86:	d05a      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0x1de>
 8009b88:	e062      	b.n	8009c50 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b9a:	f000 fe8b 	bl	800a8b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	68ba      	ldr	r2, [r7, #8]
 8009bb4:	609a      	str	r2, [r3, #8]
      break;
 8009bb6:	e04f      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bc8:	f000 fe74 	bl	800a8b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bda:	609a      	str	r2, [r3, #8]
      break;
 8009bdc:	e03c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bea:	461a      	mov	r2, r3
 8009bec:	f000 fde6 	bl	800a7bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2150      	movs	r1, #80	@ 0x50
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f000 fe3f 	bl	800a87a <TIM_ITRx_SetConfig>
      break;
 8009bfc:	e02c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f000 fe05 	bl	800a81a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2160      	movs	r1, #96	@ 0x60
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fe2f 	bl	800a87a <TIM_ITRx_SetConfig>
      break;
 8009c1c:	e01c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f000 fdc6 	bl	800a7bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2140      	movs	r1, #64	@ 0x40
 8009c36:	4618      	mov	r0, r3
 8009c38:	f000 fe1f 	bl	800a87a <TIM_ITRx_SetConfig>
      break;
 8009c3c:	e00c      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4619      	mov	r1, r3
 8009c48:	4610      	mov	r0, r2
 8009c4a:	f000 fe16 	bl	800a87a <TIM_ITRx_SetConfig>
      break;
 8009c4e:	e003      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	73fb      	strb	r3, [r7, #15]
      break;
 8009c54:	e000      	b.n	8009c58 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	00100070 	.word	0x00100070
 8009c78:	00100060 	.word	0x00100060
 8009c7c:	00100050 	.word	0x00100050
 8009c80:	00100040 	.word	0x00100040
 8009c84:	00100030 	.word	0x00100030
 8009c88:	00100020 	.word	0x00100020

08009c8c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b087      	sub	sp, #28
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	607a      	str	r2, [r7, #4]
 8009d4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e14a      	b.n	8009ff2 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	f040 80dd 	bne.w	8009f24 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8009d6a:	7afb      	ldrb	r3, [r7, #11]
 8009d6c:	2b1f      	cmp	r3, #31
 8009d6e:	f200 80d6 	bhi.w	8009f1e <HAL_TIM_RegisterCallback+0x1de>
 8009d72:	a201      	add	r2, pc, #4	@ (adr r2, 8009d78 <HAL_TIM_RegisterCallback+0x38>)
 8009d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d78:	08009df9 	.word	0x08009df9
 8009d7c:	08009e01 	.word	0x08009e01
 8009d80:	08009e09 	.word	0x08009e09
 8009d84:	08009e11 	.word	0x08009e11
 8009d88:	08009e19 	.word	0x08009e19
 8009d8c:	08009e21 	.word	0x08009e21
 8009d90:	08009e29 	.word	0x08009e29
 8009d94:	08009e31 	.word	0x08009e31
 8009d98:	08009e39 	.word	0x08009e39
 8009d9c:	08009e41 	.word	0x08009e41
 8009da0:	08009e49 	.word	0x08009e49
 8009da4:	08009e51 	.word	0x08009e51
 8009da8:	08009e59 	.word	0x08009e59
 8009dac:	08009e61 	.word	0x08009e61
 8009db0:	08009e6b 	.word	0x08009e6b
 8009db4:	08009e75 	.word	0x08009e75
 8009db8:	08009e7f 	.word	0x08009e7f
 8009dbc:	08009e89 	.word	0x08009e89
 8009dc0:	08009e93 	.word	0x08009e93
 8009dc4:	08009e9d 	.word	0x08009e9d
 8009dc8:	08009ea7 	.word	0x08009ea7
 8009dcc:	08009eb1 	.word	0x08009eb1
 8009dd0:	08009ebb 	.word	0x08009ebb
 8009dd4:	08009ec5 	.word	0x08009ec5
 8009dd8:	08009ecf 	.word	0x08009ecf
 8009ddc:	08009ed9 	.word	0x08009ed9
 8009de0:	08009ee3 	.word	0x08009ee3
 8009de4:	08009eed 	.word	0x08009eed
 8009de8:	08009ef7 	.word	0x08009ef7
 8009dec:	08009f01 	.word	0x08009f01
 8009df0:	08009f0b 	.word	0x08009f0b
 8009df4:	08009f15 	.word	0x08009f15
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009dfe:	e0f7      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009e06:	e0f3      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009e0e:	e0ef      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009e16:	e0eb      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009e1e:	e0e7      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009e26:	e0e3      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009e2e:	e0df      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009e36:	e0db      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	687a      	ldr	r2, [r7, #4]
 8009e3c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009e3e:	e0d7      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009e46:	e0d3      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009e4e:	e0cf      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009e56:	e0cb      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009e5e:	e0c7      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009e68:	e0c2      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8009e72:	e0bd      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8009e7c:	e0b8      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8009e86:	e0b3      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8009e90:	e0ae      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009e9a:	e0a9      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009ea4:	e0a4      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009eae:	e09f      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009eb8:	e09a      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009ec2:	e095      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009ecc:	e090      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009ed6:	e08b      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009ee0:	e086      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009eea:	e081      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009ef4:	e07c      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009efe:	e077      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009f08:	e072      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009f12:	e06d      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009f1c:	e068      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
        break;
 8009f22:	e065      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d15d      	bne.n	8009fec <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009f30:	7afb      	ldrb	r3, [r7, #11]
 8009f32:	2b0d      	cmp	r3, #13
 8009f34:	d857      	bhi.n	8009fe6 <HAL_TIM_RegisterCallback+0x2a6>
 8009f36:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <HAL_TIM_RegisterCallback+0x1fc>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f75 	.word	0x08009f75
 8009f40:	08009f7d 	.word	0x08009f7d
 8009f44:	08009f85 	.word	0x08009f85
 8009f48:	08009f8d 	.word	0x08009f8d
 8009f4c:	08009f95 	.word	0x08009f95
 8009f50:	08009f9d 	.word	0x08009f9d
 8009f54:	08009fa5 	.word	0x08009fa5
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009fb5 	.word	0x08009fb5
 8009f60:	08009fbd 	.word	0x08009fbd
 8009f64:	08009fc5 	.word	0x08009fc5
 8009f68:	08009fcd 	.word	0x08009fcd
 8009f6c:	08009fd5 	.word	0x08009fd5
 8009f70:	08009fdd 	.word	0x08009fdd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8009f7a:	e039      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009f82:	e035      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009f8a:	e031      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009f92:	e02d      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8009f9a:	e029      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fa2:	e025      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8009faa:	e021      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009fb2:	e01d      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8009fba:	e019      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009fc2:	e015      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009fca:	e011      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009fd2:	e00d      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009fda:	e009      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009fe4:	e004      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	75fb      	strb	r3, [r7, #23]
        break;
 8009fea:	e001      	b.n	8009ff0 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	4a4c      	ldr	r2, [pc, #304]	@ (800a144 <TIM_Base_SetConfig+0x144>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d017      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a01e:	d013      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	4a49      	ldr	r2, [pc, #292]	@ (800a148 <TIM_Base_SetConfig+0x148>)
 800a024:	4293      	cmp	r3, r2
 800a026:	d00f      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	4a48      	ldr	r2, [pc, #288]	@ (800a14c <TIM_Base_SetConfig+0x14c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00b      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a47      	ldr	r2, [pc, #284]	@ (800a150 <TIM_Base_SetConfig+0x150>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d007      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	4a46      	ldr	r2, [pc, #280]	@ (800a154 <TIM_Base_SetConfig+0x154>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d003      	beq.n	800a048 <TIM_Base_SetConfig+0x48>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a45      	ldr	r2, [pc, #276]	@ (800a158 <TIM_Base_SetConfig+0x158>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d108      	bne.n	800a05a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a04e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	4313      	orrs	r3, r2
 800a058:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	4a39      	ldr	r2, [pc, #228]	@ (800a144 <TIM_Base_SetConfig+0x144>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d023      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a068:	d01f      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	4a36      	ldr	r2, [pc, #216]	@ (800a148 <TIM_Base_SetConfig+0x148>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d01b      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a35      	ldr	r2, [pc, #212]	@ (800a14c <TIM_Base_SetConfig+0x14c>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d017      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	4a34      	ldr	r2, [pc, #208]	@ (800a150 <TIM_Base_SetConfig+0x150>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d013      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a33      	ldr	r2, [pc, #204]	@ (800a154 <TIM_Base_SetConfig+0x154>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00f      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a33      	ldr	r2, [pc, #204]	@ (800a15c <TIM_Base_SetConfig+0x15c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00b      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a32      	ldr	r2, [pc, #200]	@ (800a160 <TIM_Base_SetConfig+0x160>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d007      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a31      	ldr	r2, [pc, #196]	@ (800a164 <TIM_Base_SetConfig+0x164>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d003      	beq.n	800a0aa <TIM_Base_SetConfig+0xaa>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a2c      	ldr	r2, [pc, #176]	@ (800a158 <TIM_Base_SetConfig+0x158>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d108      	bne.n	800a0bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a0b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	68fa      	ldr	r2, [r7, #12]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	689a      	ldr	r2, [r3, #8]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	681a      	ldr	r2, [r3, #0]
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a18      	ldr	r2, [pc, #96]	@ (800a144 <TIM_Base_SetConfig+0x144>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d013      	beq.n	800a110 <TIM_Base_SetConfig+0x110>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a154 <TIM_Base_SetConfig+0x154>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d00f      	beq.n	800a110 <TIM_Base_SetConfig+0x110>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a15c <TIM_Base_SetConfig+0x15c>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d00b      	beq.n	800a110 <TIM_Base_SetConfig+0x110>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a19      	ldr	r2, [pc, #100]	@ (800a160 <TIM_Base_SetConfig+0x160>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d007      	beq.n	800a110 <TIM_Base_SetConfig+0x110>
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a18      	ldr	r2, [pc, #96]	@ (800a164 <TIM_Base_SetConfig+0x164>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d003      	beq.n	800a110 <TIM_Base_SetConfig+0x110>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a13      	ldr	r2, [pc, #76]	@ (800a158 <TIM_Base_SetConfig+0x158>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d103      	bne.n	800a118 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	691a      	ldr	r2, [r3, #16]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2201      	movs	r2, #1
 800a11c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	2b01      	cmp	r3, #1
 800a128:	d105      	bne.n	800a136 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f023 0201 	bic.w	r2, r3, #1
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	611a      	str	r2, [r3, #16]
  }
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40012c00 	.word	0x40012c00
 800a148:	40000400 	.word	0x40000400
 800a14c:	40000800 	.word	0x40000800
 800a150:	40000c00 	.word	0x40000c00
 800a154:	40013400 	.word	0x40013400
 800a158:	40015000 	.word	0x40015000
 800a15c:	40014000 	.word	0x40014000
 800a160:	40014400 	.word	0x40014400
 800a164:	40014800 	.word	0x40014800

0800a168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	f023 0201 	bic.w	r2, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	699b      	ldr	r3, [r3, #24]
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f023 0303 	bic.w	r3, r3, #3
 800a1a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f023 0302 	bic.w	r3, r3, #2
 800a1b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	697a      	ldr	r2, [r7, #20]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4a30      	ldr	r2, [pc, #192]	@ (800a284 <TIM_OC1_SetConfig+0x11c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d013      	beq.n	800a1f0 <TIM_OC1_SetConfig+0x88>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4a2f      	ldr	r2, [pc, #188]	@ (800a288 <TIM_OC1_SetConfig+0x120>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d00f      	beq.n	800a1f0 <TIM_OC1_SetConfig+0x88>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	4a2e      	ldr	r2, [pc, #184]	@ (800a28c <TIM_OC1_SetConfig+0x124>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d00b      	beq.n	800a1f0 <TIM_OC1_SetConfig+0x88>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	4a2d      	ldr	r2, [pc, #180]	@ (800a290 <TIM_OC1_SetConfig+0x128>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d007      	beq.n	800a1f0 <TIM_OC1_SetConfig+0x88>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	4a2c      	ldr	r2, [pc, #176]	@ (800a294 <TIM_OC1_SetConfig+0x12c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d003      	beq.n	800a1f0 <TIM_OC1_SetConfig+0x88>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a298 <TIM_OC1_SetConfig+0x130>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d10c      	bne.n	800a20a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	f023 0308 	bic.w	r3, r3, #8
 800a1f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f023 0304 	bic.w	r3, r3, #4
 800a208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a1d      	ldr	r2, [pc, #116]	@ (800a284 <TIM_OC1_SetConfig+0x11c>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d013      	beq.n	800a23a <TIM_OC1_SetConfig+0xd2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a1c      	ldr	r2, [pc, #112]	@ (800a288 <TIM_OC1_SetConfig+0x120>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d00f      	beq.n	800a23a <TIM_OC1_SetConfig+0xd2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a1b      	ldr	r2, [pc, #108]	@ (800a28c <TIM_OC1_SetConfig+0x124>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d00b      	beq.n	800a23a <TIM_OC1_SetConfig+0xd2>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a1a      	ldr	r2, [pc, #104]	@ (800a290 <TIM_OC1_SetConfig+0x128>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d007      	beq.n	800a23a <TIM_OC1_SetConfig+0xd2>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	4a19      	ldr	r2, [pc, #100]	@ (800a294 <TIM_OC1_SetConfig+0x12c>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d003      	beq.n	800a23a <TIM_OC1_SetConfig+0xd2>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a18      	ldr	r2, [pc, #96]	@ (800a298 <TIM_OC1_SetConfig+0x130>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d111      	bne.n	800a25e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	693a      	ldr	r2, [r7, #16]
 800a250:	4313      	orrs	r3, r2
 800a252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	699b      	ldr	r3, [r3, #24]
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	4313      	orrs	r3, r2
 800a25c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	693a      	ldr	r2, [r7, #16]
 800a262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	621a      	str	r2, [r3, #32]
}
 800a278:	bf00      	nop
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	40012c00 	.word	0x40012c00
 800a288:	40013400 	.word	0x40013400
 800a28c:	40014000 	.word	0x40014000
 800a290:	40014400 	.word	0x40014400
 800a294:	40014800 	.word	0x40014800
 800a298:	40015000 	.word	0x40015000

0800a29c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6a1b      	ldr	r3, [r3, #32]
 800a2aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a1b      	ldr	r3, [r3, #32]
 800a2b0:	f023 0210 	bic.w	r2, r3, #16
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a2ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a2ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a2d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f023 0320 	bic.w	r3, r3, #32
 800a2ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	011b      	lsls	r3, r3, #4
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a3ac <TIM_OC2_SetConfig+0x110>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d007      	beq.n	800a310 <TIM_OC2_SetConfig+0x74>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b0 <TIM_OC2_SetConfig+0x114>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d003      	beq.n	800a310 <TIM_OC2_SetConfig+0x74>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a2a      	ldr	r2, [pc, #168]	@ (800a3b4 <TIM_OC2_SetConfig+0x118>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10d      	bne.n	800a32c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	697a      	ldr	r2, [r7, #20]
 800a320:	4313      	orrs	r3, r2
 800a322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a32a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a1f      	ldr	r2, [pc, #124]	@ (800a3ac <TIM_OC2_SetConfig+0x110>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d013      	beq.n	800a35c <TIM_OC2_SetConfig+0xc0>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b0 <TIM_OC2_SetConfig+0x114>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d00f      	beq.n	800a35c <TIM_OC2_SetConfig+0xc0>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a1e      	ldr	r2, [pc, #120]	@ (800a3b8 <TIM_OC2_SetConfig+0x11c>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00b      	beq.n	800a35c <TIM_OC2_SetConfig+0xc0>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a1d      	ldr	r2, [pc, #116]	@ (800a3bc <TIM_OC2_SetConfig+0x120>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d007      	beq.n	800a35c <TIM_OC2_SetConfig+0xc0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a1c      	ldr	r2, [pc, #112]	@ (800a3c0 <TIM_OC2_SetConfig+0x124>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d003      	beq.n	800a35c <TIM_OC2_SetConfig+0xc0>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a17      	ldr	r2, [pc, #92]	@ (800a3b4 <TIM_OC2_SetConfig+0x118>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d113      	bne.n	800a384 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a36a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	693a      	ldr	r2, [r7, #16]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	699b      	ldr	r3, [r3, #24]
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	697a      	ldr	r2, [r7, #20]
 800a39c:	621a      	str	r2, [r3, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	40012c00 	.word	0x40012c00
 800a3b0:	40013400 	.word	0x40013400
 800a3b4:	40015000 	.word	0x40015000
 800a3b8:	40014000 	.word	0x40014000
 800a3bc:	40014400 	.word	0x40014400
 800a3c0:	40014800 	.word	0x40014800

0800a3c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f023 0303 	bic.w	r3, r3, #3
 800a3fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	021b      	lsls	r3, r3, #8
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a2b      	ldr	r2, [pc, #172]	@ (800a4d0 <TIM_OC3_SetConfig+0x10c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d007      	beq.n	800a436 <TIM_OC3_SetConfig+0x72>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a2a      	ldr	r2, [pc, #168]	@ (800a4d4 <TIM_OC3_SetConfig+0x110>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_OC3_SetConfig+0x72>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a29      	ldr	r2, [pc, #164]	@ (800a4d8 <TIM_OC3_SetConfig+0x114>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d10d      	bne.n	800a452 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a43c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	021b      	lsls	r3, r3, #8
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a1e      	ldr	r2, [pc, #120]	@ (800a4d0 <TIM_OC3_SetConfig+0x10c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d013      	beq.n	800a482 <TIM_OC3_SetConfig+0xbe>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <TIM_OC3_SetConfig+0x110>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00f      	beq.n	800a482 <TIM_OC3_SetConfig+0xbe>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a1d      	ldr	r2, [pc, #116]	@ (800a4dc <TIM_OC3_SetConfig+0x118>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d00b      	beq.n	800a482 <TIM_OC3_SetConfig+0xbe>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a1c      	ldr	r2, [pc, #112]	@ (800a4e0 <TIM_OC3_SetConfig+0x11c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d007      	beq.n	800a482 <TIM_OC3_SetConfig+0xbe>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	4a1b      	ldr	r2, [pc, #108]	@ (800a4e4 <TIM_OC3_SetConfig+0x120>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d003      	beq.n	800a482 <TIM_OC3_SetConfig+0xbe>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a16      	ldr	r2, [pc, #88]	@ (800a4d8 <TIM_OC3_SetConfig+0x114>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d113      	bne.n	800a4aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	699b      	ldr	r3, [r3, #24]
 800a4a2:	011b      	lsls	r3, r3, #4
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	621a      	str	r2, [r3, #32]
}
 800a4c4:	bf00      	nop
 800a4c6:	371c      	adds	r7, #28
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	40012c00 	.word	0x40012c00
 800a4d4:	40013400 	.word	0x40013400
 800a4d8:	40015000 	.word	0x40015000
 800a4dc:	40014000 	.word	0x40014000
 800a4e0:	40014400 	.word	0x40014400
 800a4e4:	40014800 	.word	0x40014800

0800a4e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a1b      	ldr	r3, [r3, #32]
 800a4fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69db      	ldr	r3, [r3, #28]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a536:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	031b      	lsls	r3, r3, #12
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4313      	orrs	r3, r2
 800a542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a2c      	ldr	r2, [pc, #176]	@ (800a5f8 <TIM_OC4_SetConfig+0x110>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d007      	beq.n	800a55c <TIM_OC4_SetConfig+0x74>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a2b      	ldr	r2, [pc, #172]	@ (800a5fc <TIM_OC4_SetConfig+0x114>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d003      	beq.n	800a55c <TIM_OC4_SetConfig+0x74>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2a      	ldr	r2, [pc, #168]	@ (800a600 <TIM_OC4_SetConfig+0x118>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d10d      	bne.n	800a578 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	031b      	lsls	r3, r3, #12
 800a56a:	697a      	ldr	r2, [r7, #20]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	4a1f      	ldr	r2, [pc, #124]	@ (800a5f8 <TIM_OC4_SetConfig+0x110>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d013      	beq.n	800a5a8 <TIM_OC4_SetConfig+0xc0>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a1e      	ldr	r2, [pc, #120]	@ (800a5fc <TIM_OC4_SetConfig+0x114>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d00f      	beq.n	800a5a8 <TIM_OC4_SetConfig+0xc0>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a1e      	ldr	r2, [pc, #120]	@ (800a604 <TIM_OC4_SetConfig+0x11c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d00b      	beq.n	800a5a8 <TIM_OC4_SetConfig+0xc0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a1d      	ldr	r2, [pc, #116]	@ (800a608 <TIM_OC4_SetConfig+0x120>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d007      	beq.n	800a5a8 <TIM_OC4_SetConfig+0xc0>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a1c      	ldr	r2, [pc, #112]	@ (800a60c <TIM_OC4_SetConfig+0x124>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d003      	beq.n	800a5a8 <TIM_OC4_SetConfig+0xc0>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a17      	ldr	r2, [pc, #92]	@ (800a600 <TIM_OC4_SetConfig+0x118>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d113      	bne.n	800a5d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a5ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a5b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	695b      	ldr	r3, [r3, #20]
 800a5bc:	019b      	lsls	r3, r3, #6
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	019b      	lsls	r3, r3, #6
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	693a      	ldr	r2, [r7, #16]
 800a5d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	697a      	ldr	r2, [r7, #20]
 800a5e8:	621a      	str	r2, [r3, #32]
}
 800a5ea:	bf00      	nop
 800a5ec:	371c      	adds	r7, #28
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40012c00 	.word	0x40012c00
 800a5fc:	40013400 	.word	0x40013400
 800a600:	40015000 	.word	0x40015000
 800a604:	40014000 	.word	0x40014000
 800a608:	40014400 	.word	0x40014400
 800a60c:	40014800 	.word	0x40014800

0800a610 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a1b      	ldr	r3, [r3, #32]
 800a61e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a63e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a654:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	693a      	ldr	r2, [r7, #16]
 800a65e:	4313      	orrs	r3, r2
 800a660:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	4a19      	ldr	r2, [pc, #100]	@ (800a6cc <TIM_OC5_SetConfig+0xbc>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d013      	beq.n	800a692 <TIM_OC5_SetConfig+0x82>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	4a18      	ldr	r2, [pc, #96]	@ (800a6d0 <TIM_OC5_SetConfig+0xc0>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d00f      	beq.n	800a692 <TIM_OC5_SetConfig+0x82>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	4a17      	ldr	r2, [pc, #92]	@ (800a6d4 <TIM_OC5_SetConfig+0xc4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d00b      	beq.n	800a692 <TIM_OC5_SetConfig+0x82>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	4a16      	ldr	r2, [pc, #88]	@ (800a6d8 <TIM_OC5_SetConfig+0xc8>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d007      	beq.n	800a692 <TIM_OC5_SetConfig+0x82>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	4a15      	ldr	r2, [pc, #84]	@ (800a6dc <TIM_OC5_SetConfig+0xcc>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d003      	beq.n	800a692 <TIM_OC5_SetConfig+0x82>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4a14      	ldr	r2, [pc, #80]	@ (800a6e0 <TIM_OC5_SetConfig+0xd0>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d109      	bne.n	800a6a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a698:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	021b      	lsls	r3, r3, #8
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	621a      	str	r2, [r3, #32]
}
 800a6c0:	bf00      	nop
 800a6c2:	371c      	adds	r7, #28
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	40012c00 	.word	0x40012c00
 800a6d0:	40013400 	.word	0x40013400
 800a6d4:	40014000 	.word	0x40014000
 800a6d8:	40014400 	.word	0x40014400
 800a6dc:	40014800 	.word	0x40014800
 800a6e0:	40015000 	.word	0x40015000

0800a6e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b087      	sub	sp, #28
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a712:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	021b      	lsls	r3, r3, #8
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a72a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	051b      	lsls	r3, r3, #20
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4313      	orrs	r3, r2
 800a736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a1a      	ldr	r2, [pc, #104]	@ (800a7a4 <TIM_OC6_SetConfig+0xc0>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d013      	beq.n	800a768 <TIM_OC6_SetConfig+0x84>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a19      	ldr	r2, [pc, #100]	@ (800a7a8 <TIM_OC6_SetConfig+0xc4>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d00f      	beq.n	800a768 <TIM_OC6_SetConfig+0x84>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4a18      	ldr	r2, [pc, #96]	@ (800a7ac <TIM_OC6_SetConfig+0xc8>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d00b      	beq.n	800a768 <TIM_OC6_SetConfig+0x84>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a17      	ldr	r2, [pc, #92]	@ (800a7b0 <TIM_OC6_SetConfig+0xcc>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d007      	beq.n	800a768 <TIM_OC6_SetConfig+0x84>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a16      	ldr	r2, [pc, #88]	@ (800a7b4 <TIM_OC6_SetConfig+0xd0>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d003      	beq.n	800a768 <TIM_OC6_SetConfig+0x84>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a15      	ldr	r2, [pc, #84]	@ (800a7b8 <TIM_OC6_SetConfig+0xd4>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d109      	bne.n	800a77c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a76e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	029b      	lsls	r3, r3, #10
 800a776:	697a      	ldr	r2, [r7, #20]
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	621a      	str	r2, [r3, #32]
}
 800a796:	bf00      	nop
 800a798:	371c      	adds	r7, #28
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop
 800a7a4:	40012c00 	.word	0x40012c00
 800a7a8:	40013400 	.word	0x40013400
 800a7ac:	40014000 	.word	0x40014000
 800a7b0:	40014400 	.word	0x40014400
 800a7b4:	40014800 	.word	0x40014800
 800a7b8:	40015000 	.word	0x40015000

0800a7bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b087      	sub	sp, #28
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6a1b      	ldr	r3, [r3, #32]
 800a7cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6a1b      	ldr	r3, [r3, #32]
 800a7d2:	f023 0201 	bic.w	r2, r3, #1
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a7e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	011b      	lsls	r3, r3, #4
 800a7ec:	693a      	ldr	r2, [r7, #16]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f023 030a 	bic.w	r3, r3, #10
 800a7f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	693a      	ldr	r2, [r7, #16]
 800a806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	697a      	ldr	r2, [r7, #20]
 800a80c:	621a      	str	r2, [r3, #32]
}
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b087      	sub	sp, #28
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	f023 0210 	bic.w	r2, r3, #16
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	031b      	lsls	r3, r3, #12
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a856:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	4313      	orrs	r3, r2
 800a860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	693a      	ldr	r2, [r7, #16]
 800a866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	621a      	str	r2, [r3, #32]
}
 800a86e:	bf00      	nop
 800a870:	371c      	adds	r7, #28
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b085      	sub	sp, #20
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
 800a882:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a890:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a896:	683a      	ldr	r2, [r7, #0]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	f043 0307 	orr.w	r3, r3, #7
 800a8a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	609a      	str	r2, [r3, #8]
}
 800a8a8:	bf00      	nop
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b087      	sub	sp, #28
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
 800a8c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	021a      	lsls	r2, r3, #8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	431a      	orrs	r2, r3
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	697a      	ldr	r2, [r7, #20]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	609a      	str	r2, [r3, #8]
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b087      	sub	sp, #28
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f003 031f 	and.w	r3, r3, #31
 800a906:	2201      	movs	r2, #1
 800a908:	fa02 f303 	lsl.w	r3, r2, r3
 800a90c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a1a      	ldr	r2, [r3, #32]
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	43db      	mvns	r3, r3
 800a916:	401a      	ands	r2, r3
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6a1a      	ldr	r2, [r3, #32]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 031f 	and.w	r3, r3, #31
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	fa01 f303 	lsl.w	r3, r1, r3
 800a92c:	431a      	orrs	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	621a      	str	r2, [r3, #32]
}
 800a932:	bf00      	nop
 800a934:	371c      	adds	r7, #28
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
	...

0800a940 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a26      	ldr	r2, [pc, #152]	@ (800a9e4 <TIM_ResetCallback+0xa4>)
 800a94c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a25      	ldr	r2, [pc, #148]	@ (800a9e8 <TIM_ResetCallback+0xa8>)
 800a954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a24      	ldr	r2, [pc, #144]	@ (800a9ec <TIM_ResetCallback+0xac>)
 800a95c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a23      	ldr	r2, [pc, #140]	@ (800a9f0 <TIM_ResetCallback+0xb0>)
 800a964:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a22      	ldr	r2, [pc, #136]	@ (800a9f4 <TIM_ResetCallback+0xb4>)
 800a96c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a21      	ldr	r2, [pc, #132]	@ (800a9f8 <TIM_ResetCallback+0xb8>)
 800a974:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	4a20      	ldr	r2, [pc, #128]	@ (800a9fc <TIM_ResetCallback+0xbc>)
 800a97c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	4a1f      	ldr	r2, [pc, #124]	@ (800aa00 <TIM_ResetCallback+0xc0>)
 800a984:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a1e      	ldr	r2, [pc, #120]	@ (800aa04 <TIM_ResetCallback+0xc4>)
 800a98c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a1d      	ldr	r2, [pc, #116]	@ (800aa08 <TIM_ResetCallback+0xc8>)
 800a994:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	4a1c      	ldr	r2, [pc, #112]	@ (800aa0c <TIM_ResetCallback+0xcc>)
 800a99c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	@ (800aa10 <TIM_ResetCallback+0xd0>)
 800a9a4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a1a      	ldr	r2, [pc, #104]	@ (800aa14 <TIM_ResetCallback+0xd4>)
 800a9ac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a19      	ldr	r2, [pc, #100]	@ (800aa18 <TIM_ResetCallback+0xd8>)
 800a9b4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a18      	ldr	r2, [pc, #96]	@ (800aa1c <TIM_ResetCallback+0xdc>)
 800a9bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a17      	ldr	r2, [pc, #92]	@ (800aa20 <TIM_ResetCallback+0xe0>)
 800a9c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a16      	ldr	r2, [pc, #88]	@ (800aa24 <TIM_ResetCallback+0xe4>)
 800a9cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a15      	ldr	r2, [pc, #84]	@ (800aa28 <TIM_ResetCallback+0xe8>)
 800a9d4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a9d8:	bf00      	nop
 800a9da:	370c      	adds	r7, #12
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e2:	4770      	bx	lr
 800a9e4:	08003e25 	.word	0x08003e25
 800a9e8:	08009c8d 	.word	0x08009c8d
 800a9ec:	08009d05 	.word	0x08009d05
 800a9f0:	08009d19 	.word	0x08009d19
 800a9f4:	08009cb5 	.word	0x08009cb5
 800a9f8:	08009cc9 	.word	0x08009cc9
 800a9fc:	08009ca1 	.word	0x08009ca1
 800aa00:	08009cdd 	.word	0x08009cdd
 800aa04:	08009cf1 	.word	0x08009cf1
 800aa08:	08009d2d 	.word	0x08009d2d
 800aa0c:	0800ac81 	.word	0x0800ac81
 800aa10:	0800ac95 	.word	0x0800ac95
 800aa14:	0800aca9 	.word	0x0800aca9
 800aa18:	0800acbd 	.word	0x0800acbd
 800aa1c:	0800acd1 	.word	0x0800acd1
 800aa20:	0800ace5 	.word	0x0800ace5
 800aa24:	0800acf9 	.word	0x0800acf9
 800aa28:	0800ad0d 	.word	0x0800ad0d

0800aa2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b085      	sub	sp, #20
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d101      	bne.n	800aa44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa40:	2302      	movs	r3, #2
 800aa42:	e074      	b.n	800ab2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2201      	movs	r2, #1
 800aa48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a34      	ldr	r2, [pc, #208]	@ (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d009      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a33      	ldr	r2, [pc, #204]	@ (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a31      	ldr	r2, [pc, #196]	@ (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d108      	bne.n	800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aa88:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	685b      	ldr	r3, [r3, #4]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aa9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a21      	ldr	r2, [pc, #132]	@ (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d022      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac4:	d01d      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a1f      	ldr	r2, [pc, #124]	@ (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d018      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1d      	ldr	r2, [pc, #116]	@ (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d013      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a1c      	ldr	r2, [pc, #112]	@ (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d00e      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a15      	ldr	r2, [pc, #84]	@ (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d009      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a18      	ldr	r2, [pc, #96]	@ (800ab54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d004      	beq.n	800ab02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a11      	ldr	r2, [pc, #68]	@ (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d10c      	bne.n	800ab1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	689b      	ldr	r3, [r3, #8]
 800ab0e:	68ba      	ldr	r2, [r7, #8]
 800ab10:	4313      	orrs	r3, r2
 800ab12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68ba      	ldr	r2, [r7, #8]
 800ab1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	40012c00 	.word	0x40012c00
 800ab40:	40013400 	.word	0x40013400
 800ab44:	40015000 	.word	0x40015000
 800ab48:	40000400 	.word	0x40000400
 800ab4c:	40000800 	.word	0x40000800
 800ab50:	40000c00 	.word	0x40000c00
 800ab54:	40014000 	.word	0x40014000

0800ab58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d101      	bne.n	800ab74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab70:	2302      	movs	r3, #2
 800ab72:	e078      	b.n	800ac66 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	4313      	orrs	r3, r2
 800ab88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	4313      	orrs	r3, r2
 800ab96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	041b      	lsls	r3, r3, #16
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a1c      	ldr	r2, [pc, #112]	@ (800ac74 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d009      	beq.n	800ac1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ac78 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d004      	beq.n	800ac1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a19      	ldr	r2, [pc, #100]	@ (800ac7c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d11c      	bne.n	800ac54 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac24:	051b      	lsls	r3, r3, #20
 800ac26:	4313      	orrs	r3, r2
 800ac28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac50:	4313      	orrs	r3, r2
 800ac52:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac64:	2300      	movs	r3, #0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	40012c00 	.word	0x40012c00
 800ac78:	40013400 	.word	0x40013400
 800ac7c:	40015000 	.word	0x40015000

0800ac80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac88:	bf00      	nop
 800ac8a:	370c      	adds	r7, #12
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ac9c:	bf00      	nop
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acb0:	bf00      	nop
 800acb2:	370c      	adds	r7, #12
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acc4:	bf00      	nop
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b083      	sub	sp, #12
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800acd8:	bf00      	nop
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad00:	bf00      	nop
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b083      	sub	sp, #12
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad14:	bf00      	nop
 800ad16:	370c      	adds	r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1e:	4770      	bx	lr

0800ad20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d101      	bne.n	800ad32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e050      	b.n	800add4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d114      	bne.n	800ad66 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fd5b 	bl	800b800 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d103      	bne.n	800ad5c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a21      	ldr	r2, [pc, #132]	@ (800addc <HAL_UART_Init+0xbc>)
 800ad58:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2224      	movs	r2, #36	@ 0x24
 800ad6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f022 0201 	bic.w	r2, r2, #1
 800ad7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d002      	beq.n	800ad8c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 f888 	bl	800be9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fd89 	bl	800b8a4 <UART_SetConfig>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d101      	bne.n	800ad9c <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	e01b      	b.n	800add4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800adaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689a      	ldr	r2, [r3, #8]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800adba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f042 0201 	orr.w	r2, r2, #1
 800adca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 f907 	bl	800bfe0 <UART_CheckIdleState>
 800add2:	4603      	mov	r3, r0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	08005225 	.word	0x08005225

0800ade0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b087      	sub	sp, #28
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	460b      	mov	r3, r1
 800adea:	607a      	str	r2, [r7, #4]
 800adec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800adee:	2300      	movs	r3, #0
 800adf0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d109      	bne.n	800ae0c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800adfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e09c      	b.n	800af46 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d16c      	bne.n	800aef0 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800ae16:	7afb      	ldrb	r3, [r7, #11]
 800ae18:	2b0c      	cmp	r3, #12
 800ae1a:	d85e      	bhi.n	800aeda <HAL_UART_RegisterCallback+0xfa>
 800ae1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae24 <HAL_UART_RegisterCallback+0x44>)
 800ae1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae22:	bf00      	nop
 800ae24:	0800ae59 	.word	0x0800ae59
 800ae28:	0800ae63 	.word	0x0800ae63
 800ae2c:	0800ae6d 	.word	0x0800ae6d
 800ae30:	0800ae77 	.word	0x0800ae77
 800ae34:	0800ae81 	.word	0x0800ae81
 800ae38:	0800ae8b 	.word	0x0800ae8b
 800ae3c:	0800ae95 	.word	0x0800ae95
 800ae40:	0800ae9f 	.word	0x0800ae9f
 800ae44:	0800aea9 	.word	0x0800aea9
 800ae48:	0800aeb3 	.word	0x0800aeb3
 800ae4c:	0800aebd 	.word	0x0800aebd
 800ae50:	0800aec7 	.word	0x0800aec7
 800ae54:	0800aed1 	.word	0x0800aed1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ae60:	e070      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ae6a:	e06b      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ae74:	e066      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ae7e:	e061      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ae88:	e05c      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ae92:	e057      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ae9c:	e052      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800aea6:	e04d      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800aeb0:	e048      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800aeba:	e043      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800aec4:	e03e      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800aece:	e039      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800aed8:	e034      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aee0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]
        break;
 800aeee:	e029      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d11a      	bne.n	800af30 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800aefa:	7afb      	ldrb	r3, [r7, #11]
 800aefc:	2b0b      	cmp	r3, #11
 800aefe:	d002      	beq.n	800af06 <HAL_UART_RegisterCallback+0x126>
 800af00:	2b0c      	cmp	r3, #12
 800af02:	d005      	beq.n	800af10 <HAL_UART_RegisterCallback+0x130>
 800af04:	e009      	b.n	800af1a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800af0e:	e019      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800af18:	e014      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af20:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	75fb      	strb	r3, [r7, #23]
        break;
 800af2e:	e009      	b.n	800af44 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	371c      	adds	r7, #28
 800af4a:	46bd      	mov	sp, r7
 800af4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af50:	4770      	bx	lr
 800af52:	bf00      	nop

0800af54 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b08a      	sub	sp, #40	@ 0x28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	60b9      	str	r1, [r7, #8]
 800af5e:	4613      	mov	r3, r2
 800af60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800af68:	2b20      	cmp	r3, #32
 800af6a:	d137      	bne.n	800afdc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d002      	beq.n	800af78 <HAL_UART_Receive_DMA+0x24>
 800af72:	88fb      	ldrh	r3, [r7, #6]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e030      	b.n	800afde <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2200      	movs	r2, #0
 800af80:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a18      	ldr	r2, [pc, #96]	@ (800afe8 <HAL_UART_Receive_DMA+0x94>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d01f      	beq.n	800afcc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d018      	beq.n	800afcc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	e853 3f00 	ldrex	r3, [r3]
 800afa6:	613b      	str	r3, [r7, #16]
   return(result);
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800afae:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afb8:	623b      	str	r3, [r7, #32]
 800afba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afbc:	69f9      	ldr	r1, [r7, #28]
 800afbe:	6a3a      	ldr	r2, [r7, #32]
 800afc0:	e841 2300 	strex	r3, r2, [r1]
 800afc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1e6      	bne.n	800af9a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800afcc:	88fb      	ldrh	r3, [r7, #6]
 800afce:	461a      	mov	r2, r3
 800afd0:	68b9      	ldr	r1, [r7, #8]
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f001 f91c 	bl	800c210 <UART_Start_Receive_DMA>
 800afd8:	4603      	mov	r3, r0
 800afda:	e000      	b.n	800afde <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800afdc:	2302      	movs	r3, #2
  }
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3728      	adds	r7, #40	@ 0x28
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	40008000 	.word	0x40008000

0800afec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b0ba      	sub	sp, #232	@ 0xe8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	69db      	ldr	r3, [r3, #28]
 800affa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b012:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b016:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b01a:	4013      	ands	r3, r2
 800b01c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d11b      	bne.n	800b060 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b02c:	f003 0320 	and.w	r3, r3, #32
 800b030:	2b00      	cmp	r3, #0
 800b032:	d015      	beq.n	800b060 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b038:	f003 0320 	and.w	r3, r3, #32
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d105      	bne.n	800b04c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d009      	beq.n	800b060 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 8312 	beq.w	800b67a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	4798      	blx	r3
      }
      return;
 800b05e:	e30c      	b.n	800b67a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b060:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8129 	beq.w	800b2bc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b06a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b06e:	4b90      	ldr	r3, [pc, #576]	@ (800b2b0 <HAL_UART_IRQHandler+0x2c4>)
 800b070:	4013      	ands	r3, r2
 800b072:	2b00      	cmp	r3, #0
 800b074:	d106      	bne.n	800b084 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b076:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b07a:	4b8e      	ldr	r3, [pc, #568]	@ (800b2b4 <HAL_UART_IRQHandler+0x2c8>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	2b00      	cmp	r3, #0
 800b080:	f000 811c 	beq.w	800b2bc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b088:	f003 0301 	and.w	r3, r3, #1
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d011      	beq.n	800b0b4 <HAL_UART_IRQHandler+0xc8>
 800b090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0aa:	f043 0201 	orr.w	r2, r3, #1
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b8:	f003 0302 	and.w	r3, r3, #2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d011      	beq.n	800b0e4 <HAL_UART_IRQHandler+0xf8>
 800b0c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0c4:	f003 0301 	and.w	r3, r3, #1
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00b      	beq.n	800b0e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0da:	f043 0204 	orr.w	r2, r3, #4
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d011      	beq.n	800b114 <HAL_UART_IRQHandler+0x128>
 800b0f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0f4:	f003 0301 	and.w	r3, r3, #1
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d00b      	beq.n	800b114 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	2204      	movs	r2, #4
 800b102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10a:	f043 0202 	orr.w	r2, r3, #2
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b118:	f003 0308 	and.w	r3, r3, #8
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d017      	beq.n	800b150 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b124:	f003 0320 	and.w	r3, r3, #32
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d105      	bne.n	800b138 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b12c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b130:	4b5f      	ldr	r3, [pc, #380]	@ (800b2b0 <HAL_UART_IRQHandler+0x2c4>)
 800b132:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00b      	beq.n	800b150 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2208      	movs	r2, #8
 800b13e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b146:	f043 0208 	orr.w	r2, r3, #8
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b154:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d012      	beq.n	800b182 <HAL_UART_IRQHandler+0x196>
 800b15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b160:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00c      	beq.n	800b182 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b170:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b178:	f043 0220 	orr.w	r2, r3, #32
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 8278 	beq.w	800b67e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b192:	f003 0320 	and.w	r3, r3, #32
 800b196:	2b00      	cmp	r3, #0
 800b198:	d013      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b19a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b19e:	f003 0320 	and.w	r3, r3, #32
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d105      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b1aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d007      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d003      	beq.n	800b1c2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d6:	2b40      	cmp	r3, #64	@ 0x40
 800b1d8:	d005      	beq.n	800b1e6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b1da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b1de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d058      	beq.n	800b298 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f001 f8f9 	bl	800c3de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1f6:	2b40      	cmp	r3, #64	@ 0x40
 800b1f8:	d148      	bne.n	800b28c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b204:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b210:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b218:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3308      	adds	r3, #8
 800b222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b226:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b236:	e841 2300 	strex	r3, r2, [r1]
 800b23a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b23e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b242:	2b00      	cmp	r3, #0
 800b244:	d1d9      	bne.n	800b1fa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d017      	beq.n	800b280 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b256:	4a18      	ldr	r2, [pc, #96]	@ (800b2b8 <HAL_UART_IRQHandler+0x2cc>)
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b260:	4618      	mov	r0, r3
 800b262:	f7fc f8dd 	bl	8007420 <HAL_DMA_Abort_IT>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d01f      	beq.n	800b2ac <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b27a:	4610      	mov	r0, r2
 800b27c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b27e:	e015      	b.n	800b2ac <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28a:	e00f      	b.n	800b2ac <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b296:	e009      	b.n	800b2ac <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b2aa:	e1e8      	b.n	800b67e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ac:	bf00      	nop
    return;
 800b2ae:	e1e6      	b.n	800b67e <HAL_UART_IRQHandler+0x692>
 800b2b0:	10000001 	.word	0x10000001
 800b2b4:	04000120 	.word	0x04000120
 800b2b8:	0800c6a9 	.word	0x0800c6a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	f040 8176 	bne.w	800b5b2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b2c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2ca:	f003 0310 	and.w	r3, r3, #16
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f000 816f 	beq.w	800b5b2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b2d8:	f003 0310 	and.w	r3, r3, #16
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 8168 	beq.w	800b5b2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2f4:	2b40      	cmp	r3, #64	@ 0x40
 800b2f6:	f040 80dc 	bne.w	800b4b2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f000 80b1 	beq.w	800b474 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b318:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b31c:	429a      	cmp	r2, r3
 800b31e:	f080 80a9 	bcs.w	800b474 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b328:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0320 	and.w	r3, r3, #32
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 8087 	bne.w	800b44e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b34c:	e853 3f00 	ldrex	r3, [r3]
 800b350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b35c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	461a      	mov	r2, r3
 800b366:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b36a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b36e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b372:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b376:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1da      	bne.n	800b340 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3308      	adds	r3, #8
 800b390:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b39a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b39c:	f023 0301 	bic.w	r3, r3, #1
 800b3a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	3308      	adds	r3, #8
 800b3aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b3ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b3b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b3b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b3c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e1      	bne.n	800b38a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b3d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b3ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b3ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b3f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b3f2:	e841 2300 	strex	r3, r2, [r1]
 800b3f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d1e3      	bne.n	800b3c6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b41a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b41c:	f023 0310 	bic.w	r3, r3, #16
 800b420:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	461a      	mov	r2, r3
 800b42a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b42e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b430:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b434:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e4      	bne.n	800b40c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b448:	4618      	mov	r0, r3
 800b44a:	f7fb ff90 	bl	800736e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800b466:	b292      	uxth	r2, r2
 800b468:	1a8a      	subs	r2, r1, r2
 800b46a:	b292      	uxth	r2, r2
 800b46c:	4611      	mov	r1, r2
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b472:	e106      	b.n	800b682 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b47a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b47e:	429a      	cmp	r2, r3
 800b480:	f040 80ff 	bne.w	800b682 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0320 	and.w	r3, r3, #32
 800b492:	2b20      	cmp	r3, #32
 800b494:	f040 80f5 	bne.w	800b682 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	4798      	blx	r3
      return;
 800b4b0:	e0e7      	b.n	800b682 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 80d9 	beq.w	800b686 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800b4d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 80d4 	beq.w	800b686 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b4f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b500:	647b      	str	r3, [r7, #68]	@ 0x44
 800b502:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b508:	e841 2300 	strex	r3, r2, [r1]
 800b50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b510:	2b00      	cmp	r3, #0
 800b512:	d1e4      	bne.n	800b4de <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3308      	adds	r3, #8
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51e:	e853 3f00 	ldrex	r3, [r3]
 800b522:	623b      	str	r3, [r7, #32]
   return(result);
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b52a:	f023 0301 	bic.w	r3, r3, #1
 800b52e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3308      	adds	r3, #8
 800b538:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b53c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b53e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b542:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b544:	e841 2300 	strex	r3, r2, [r1]
 800b548:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b54a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1e1      	bne.n	800b514 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2220      	movs	r2, #32
 800b554:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2200      	movs	r2, #0
 800b55c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	60fb      	str	r3, [r7, #12]
   return(result);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f023 0310 	bic.w	r3, r3, #16
 800b578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b586:	61fb      	str	r3, [r7, #28]
 800b588:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	69fa      	ldr	r2, [r7, #28]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	617b      	str	r3, [r7, #20]
   return(result);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e4      	bne.n	800b564 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b5a6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5b0:	e069      	b.n	800b686 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d010      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x5f4>
 800b5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b5d2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b5de:	e055      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b5e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d014      	beq.n	800b616 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b5ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d105      	bne.n	800b604 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b5f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b5fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b600:	2b00      	cmp	r3, #0
 800b602:	d008      	beq.n	800b616 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d03e      	beq.n	800b68a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	4798      	blx	r3
    }
    return;
 800b614:	e039      	b.n	800b68a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d009      	beq.n	800b636 <HAL_UART_IRQHandler+0x64a>
 800b622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f001 f84e 	bl	800c6d0 <UART_EndTransmit_IT>
    return;
 800b634:	e02a      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b63a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d00b      	beq.n	800b65a <HAL_UART_IRQHandler+0x66e>
 800b642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b646:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b658:	e018      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b65e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b662:	2b00      	cmp	r3, #0
 800b664:	d012      	beq.n	800b68c <HAL_UART_IRQHandler+0x6a0>
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	da0e      	bge.n	800b68c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b678:	e008      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800b67a:	bf00      	nop
 800b67c:	e006      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
    return;
 800b67e:	bf00      	nop
 800b680:	e004      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800b682:	bf00      	nop
 800b684:	e002      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
      return;
 800b686:	bf00      	nop
 800b688:	e000      	b.n	800b68c <HAL_UART_IRQHandler+0x6a0>
    return;
 800b68a:	bf00      	nop
  }
}
 800b68c:	37e8      	adds	r7, #232	@ 0xe8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop

0800b694 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b6b0:	bf00      	nop
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b6c4:	bf00      	nop
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b6d8:	bf00      	nop
 800b6da:	370c      	adds	r7, #12
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b6ec:	bf00      	nop
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f6:	4770      	bx	lr

0800b6f8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	b083      	sub	sp, #12
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b714:	bf00      	nop
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a09      	ldr	r2, [pc, #36]	@ (800b76c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d009      	beq.n	800b760 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	683a      	ldr	r2, [r7, #0]
 800b75c:	430a      	orrs	r2, r1
 800b75e:	615a      	str	r2, [r3, #20]
  }
}
 800b760:	bf00      	nop
 800b762:	370c      	adds	r7, #12
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr
 800b76c:	40008000 	.word	0x40008000

0800b770 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a18      	ldr	r2, [pc, #96]	@ (800b7e0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d027      	beq.n	800b7d2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d120      	bne.n	800b7ce <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_UART_EnableReceiverTimeout+0x2a>
 800b796:	2302      	movs	r3, #2
 800b798:	e01c      	b.n	800b7d4 <HAL_UART_EnableReceiverTimeout+0x64>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2224      	movs	r2, #36	@ 0x24
 800b7a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b7b8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2220      	movs	r2, #32
 800b7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	e002      	b.n	800b7d4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e000      	b.n	800b7d4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
  }
}
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr
 800b7e0:	40008000 	.word	0x40008000

0800b7e4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	370c      	adds	r7, #12
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr
	...

0800b800 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	4a1a      	ldr	r2, [pc, #104]	@ (800b874 <UART_InitCallbacksToDefault+0x74>)
 800b80c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	4a19      	ldr	r2, [pc, #100]	@ (800b878 <UART_InitCallbacksToDefault+0x78>)
 800b814:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	4a18      	ldr	r2, [pc, #96]	@ (800b87c <UART_InitCallbacksToDefault+0x7c>)
 800b81c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a17      	ldr	r2, [pc, #92]	@ (800b880 <UART_InitCallbacksToDefault+0x80>)
 800b824:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a16      	ldr	r2, [pc, #88]	@ (800b884 <UART_InitCallbacksToDefault+0x84>)
 800b82c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	4a15      	ldr	r2, [pc, #84]	@ (800b888 <UART_InitCallbacksToDefault+0x88>)
 800b834:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a14      	ldr	r2, [pc, #80]	@ (800b88c <UART_InitCallbacksToDefault+0x8c>)
 800b83c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a13      	ldr	r2, [pc, #76]	@ (800b890 <UART_InitCallbacksToDefault+0x90>)
 800b844:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	4a12      	ldr	r2, [pc, #72]	@ (800b894 <UART_InitCallbacksToDefault+0x94>)
 800b84c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	4a11      	ldr	r2, [pc, #68]	@ (800b898 <UART_InitCallbacksToDefault+0x98>)
 800b854:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4a10      	ldr	r2, [pc, #64]	@ (800b89c <UART_InitCallbacksToDefault+0x9c>)
 800b85c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	4a0f      	ldr	r2, [pc, #60]	@ (800b8a0 <UART_InitCallbacksToDefault+0xa0>)
 800b864:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b868:	bf00      	nop
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr
 800b874:	0800b6a9 	.word	0x0800b6a9
 800b878:	0800b695 	.word	0x0800b695
 800b87c:	0800b6bd 	.word	0x0800b6bd
 800b880:	08003e11 	.word	0x08003e11
 800b884:	0800b6d1 	.word	0x0800b6d1
 800b888:	0800b6e5 	.word	0x0800b6e5
 800b88c:	0800b6f9 	.word	0x0800b6f9
 800b890:	0800b70d 	.word	0x0800b70d
 800b894:	0800c72b 	.word	0x0800c72b
 800b898:	0800c73f 	.word	0x0800c73f
 800b89c:	0800c753 	.word	0x0800c753
 800b8a0:	0800b721 	.word	0x0800b721

0800b8a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8a8:	b08c      	sub	sp, #48	@ 0x30
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	431a      	orrs	r2, r3
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	69db      	ldr	r3, [r3, #28]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4baa      	ldr	r3, [pc, #680]	@ (800bb7c <UART_SetConfig+0x2d8>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	6812      	ldr	r2, [r2, #0]
 800b8da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8dc:	430b      	orrs	r3, r1
 800b8de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	68da      	ldr	r2, [r3, #12]
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	430a      	orrs	r2, r1
 800b8f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a9f      	ldr	r2, [pc, #636]	@ (800bb80 <UART_SetConfig+0x2dc>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d004      	beq.n	800b910 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	6a1b      	ldr	r3, [r3, #32]
 800b90a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b90c:	4313      	orrs	r3, r2
 800b90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b91a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	6812      	ldr	r2, [r2, #0]
 800b922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b924:	430b      	orrs	r3, r1
 800b926:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b92e:	f023 010f 	bic.w	r1, r3, #15
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	430a      	orrs	r2, r1
 800b93c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a90      	ldr	r2, [pc, #576]	@ (800bb84 <UART_SetConfig+0x2e0>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d125      	bne.n	800b994 <UART_SetConfig+0xf0>
 800b948:	4b8f      	ldr	r3, [pc, #572]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800b94a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b94e:	f003 0303 	and.w	r3, r3, #3
 800b952:	2b03      	cmp	r3, #3
 800b954:	d81a      	bhi.n	800b98c <UART_SetConfig+0xe8>
 800b956:	a201      	add	r2, pc, #4	@ (adr r2, 800b95c <UART_SetConfig+0xb8>)
 800b958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95c:	0800b96d 	.word	0x0800b96d
 800b960:	0800b97d 	.word	0x0800b97d
 800b964:	0800b975 	.word	0x0800b975
 800b968:	0800b985 	.word	0x0800b985
 800b96c:	2301      	movs	r3, #1
 800b96e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b972:	e116      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b974:	2302      	movs	r3, #2
 800b976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b97a:	e112      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b97c:	2304      	movs	r3, #4
 800b97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b982:	e10e      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b984:	2308      	movs	r3, #8
 800b986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b98a:	e10a      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b98c:	2310      	movs	r3, #16
 800b98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b992:	e106      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a7c      	ldr	r2, [pc, #496]	@ (800bb8c <UART_SetConfig+0x2e8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d138      	bne.n	800ba10 <UART_SetConfig+0x16c>
 800b99e:	4b7a      	ldr	r3, [pc, #488]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800b9a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9a4:	f003 030c 	and.w	r3, r3, #12
 800b9a8:	2b0c      	cmp	r3, #12
 800b9aa:	d82d      	bhi.n	800ba08 <UART_SetConfig+0x164>
 800b9ac:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b4 <UART_SetConfig+0x110>)
 800b9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b2:	bf00      	nop
 800b9b4:	0800b9e9 	.word	0x0800b9e9
 800b9b8:	0800ba09 	.word	0x0800ba09
 800b9bc:	0800ba09 	.word	0x0800ba09
 800b9c0:	0800ba09 	.word	0x0800ba09
 800b9c4:	0800b9f9 	.word	0x0800b9f9
 800b9c8:	0800ba09 	.word	0x0800ba09
 800b9cc:	0800ba09 	.word	0x0800ba09
 800b9d0:	0800ba09 	.word	0x0800ba09
 800b9d4:	0800b9f1 	.word	0x0800b9f1
 800b9d8:	0800ba09 	.word	0x0800ba09
 800b9dc:	0800ba09 	.word	0x0800ba09
 800b9e0:	0800ba09 	.word	0x0800ba09
 800b9e4:	0800ba01 	.word	0x0800ba01
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ee:	e0d8      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9f6:	e0d4      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9fe:	e0d0      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba00:	2308      	movs	r3, #8
 800ba02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba06:	e0cc      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba08:	2310      	movs	r3, #16
 800ba0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba0e:	e0c8      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a5e      	ldr	r2, [pc, #376]	@ (800bb90 <UART_SetConfig+0x2ec>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d125      	bne.n	800ba66 <UART_SetConfig+0x1c2>
 800ba1a:	4b5b      	ldr	r3, [pc, #364]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800ba1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba20:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ba24:	2b30      	cmp	r3, #48	@ 0x30
 800ba26:	d016      	beq.n	800ba56 <UART_SetConfig+0x1b2>
 800ba28:	2b30      	cmp	r3, #48	@ 0x30
 800ba2a:	d818      	bhi.n	800ba5e <UART_SetConfig+0x1ba>
 800ba2c:	2b20      	cmp	r3, #32
 800ba2e:	d00a      	beq.n	800ba46 <UART_SetConfig+0x1a2>
 800ba30:	2b20      	cmp	r3, #32
 800ba32:	d814      	bhi.n	800ba5e <UART_SetConfig+0x1ba>
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d002      	beq.n	800ba3e <UART_SetConfig+0x19a>
 800ba38:	2b10      	cmp	r3, #16
 800ba3a:	d008      	beq.n	800ba4e <UART_SetConfig+0x1aa>
 800ba3c:	e00f      	b.n	800ba5e <UART_SetConfig+0x1ba>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba44:	e0ad      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba46:	2302      	movs	r3, #2
 800ba48:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba4c:	e0a9      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba4e:	2304      	movs	r3, #4
 800ba50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba54:	e0a5      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba56:	2308      	movs	r3, #8
 800ba58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba5c:	e0a1      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba5e:	2310      	movs	r3, #16
 800ba60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba64:	e09d      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a4a      	ldr	r2, [pc, #296]	@ (800bb94 <UART_SetConfig+0x2f0>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d125      	bne.n	800babc <UART_SetConfig+0x218>
 800ba70:	4b45      	ldr	r3, [pc, #276]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800ba72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba76:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba7a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba7c:	d016      	beq.n	800baac <UART_SetConfig+0x208>
 800ba7e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba80:	d818      	bhi.n	800bab4 <UART_SetConfig+0x210>
 800ba82:	2b80      	cmp	r3, #128	@ 0x80
 800ba84:	d00a      	beq.n	800ba9c <UART_SetConfig+0x1f8>
 800ba86:	2b80      	cmp	r3, #128	@ 0x80
 800ba88:	d814      	bhi.n	800bab4 <UART_SetConfig+0x210>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <UART_SetConfig+0x1f0>
 800ba8e:	2b40      	cmp	r3, #64	@ 0x40
 800ba90:	d008      	beq.n	800baa4 <UART_SetConfig+0x200>
 800ba92:	e00f      	b.n	800bab4 <UART_SetConfig+0x210>
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e082      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa2:	e07e      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800baa4:	2304      	movs	r3, #4
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baaa:	e07a      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800baac:	2308      	movs	r3, #8
 800baae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bab2:	e076      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bab4:	2310      	movs	r3, #16
 800bab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baba:	e072      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a35      	ldr	r2, [pc, #212]	@ (800bb98 <UART_SetConfig+0x2f4>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d12a      	bne.n	800bb1c <UART_SetConfig+0x278>
 800bac6:	4b30      	ldr	r3, [pc, #192]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800bac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bacc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bad0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bad4:	d01a      	beq.n	800bb0c <UART_SetConfig+0x268>
 800bad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bada:	d81b      	bhi.n	800bb14 <UART_SetConfig+0x270>
 800badc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bae0:	d00c      	beq.n	800bafc <UART_SetConfig+0x258>
 800bae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bae6:	d815      	bhi.n	800bb14 <UART_SetConfig+0x270>
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d003      	beq.n	800baf4 <UART_SetConfig+0x250>
 800baec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800baf0:	d008      	beq.n	800bb04 <UART_SetConfig+0x260>
 800baf2:	e00f      	b.n	800bb14 <UART_SetConfig+0x270>
 800baf4:	2300      	movs	r3, #0
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bafa:	e052      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bafc:	2302      	movs	r3, #2
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb02:	e04e      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb04:	2304      	movs	r3, #4
 800bb06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0a:	e04a      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb0c:	2308      	movs	r3, #8
 800bb0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb12:	e046      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb14:	2310      	movs	r3, #16
 800bb16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb1a:	e042      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4a17      	ldr	r2, [pc, #92]	@ (800bb80 <UART_SetConfig+0x2dc>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d13a      	bne.n	800bb9c <UART_SetConfig+0x2f8>
 800bb26:	4b18      	ldr	r3, [pc, #96]	@ (800bb88 <UART_SetConfig+0x2e4>)
 800bb28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb2c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb34:	d01a      	beq.n	800bb6c <UART_SetConfig+0x2c8>
 800bb36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb3a:	d81b      	bhi.n	800bb74 <UART_SetConfig+0x2d0>
 800bb3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb40:	d00c      	beq.n	800bb5c <UART_SetConfig+0x2b8>
 800bb42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb46:	d815      	bhi.n	800bb74 <UART_SetConfig+0x2d0>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d003      	beq.n	800bb54 <UART_SetConfig+0x2b0>
 800bb4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb50:	d008      	beq.n	800bb64 <UART_SetConfig+0x2c0>
 800bb52:	e00f      	b.n	800bb74 <UART_SetConfig+0x2d0>
 800bb54:	2300      	movs	r3, #0
 800bb56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb5a:	e022      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb5c:	2302      	movs	r3, #2
 800bb5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb62:	e01e      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb64:	2304      	movs	r3, #4
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb6a:	e01a      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb6c:	2308      	movs	r3, #8
 800bb6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb72:	e016      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb74:	2310      	movs	r3, #16
 800bb76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb7a:	e012      	b.n	800bba2 <UART_SetConfig+0x2fe>
 800bb7c:	cfff69f3 	.word	0xcfff69f3
 800bb80:	40008000 	.word	0x40008000
 800bb84:	40013800 	.word	0x40013800
 800bb88:	40021000 	.word	0x40021000
 800bb8c:	40004400 	.word	0x40004400
 800bb90:	40004800 	.word	0x40004800
 800bb94:	40004c00 	.word	0x40004c00
 800bb98:	40005000 	.word	0x40005000
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4aae      	ldr	r2, [pc, #696]	@ (800be60 <UART_SetConfig+0x5bc>)
 800bba8:	4293      	cmp	r3, r2
 800bbaa:	f040 8097 	bne.w	800bcdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbb2:	2b08      	cmp	r3, #8
 800bbb4:	d823      	bhi.n	800bbfe <UART_SetConfig+0x35a>
 800bbb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbbc <UART_SetConfig+0x318>)
 800bbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbbc:	0800bbe1 	.word	0x0800bbe1
 800bbc0:	0800bbff 	.word	0x0800bbff
 800bbc4:	0800bbe9 	.word	0x0800bbe9
 800bbc8:	0800bbff 	.word	0x0800bbff
 800bbcc:	0800bbef 	.word	0x0800bbef
 800bbd0:	0800bbff 	.word	0x0800bbff
 800bbd4:	0800bbff 	.word	0x0800bbff
 800bbd8:	0800bbff 	.word	0x0800bbff
 800bbdc:	0800bbf7 	.word	0x0800bbf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbe0:	f7fc fcf6 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800bbe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbe6:	e010      	b.n	800bc0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbe8:	4b9e      	ldr	r3, [pc, #632]	@ (800be64 <UART_SetConfig+0x5c0>)
 800bbea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbec:	e00d      	b.n	800bc0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbee:	f7fc fc81 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 800bbf2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbf4:	e009      	b.n	800bc0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbfc:	e005      	b.n	800bc0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 8130 	beq.w	800be72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc16:	4a94      	ldr	r2, [pc, #592]	@ (800be68 <UART_SetConfig+0x5c4>)
 800bc18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc20:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	685a      	ldr	r2, [r3, #4]
 800bc2a:	4613      	mov	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	4413      	add	r3, r2
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d305      	bcc.n	800bc42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc3c:	69ba      	ldr	r2, [r7, #24]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d903      	bls.n	800bc4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc48:	e113      	b.n	800be72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	60fa      	str	r2, [r7, #12]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc56:	4a84      	ldr	r2, [pc, #528]	@ (800be68 <UART_SetConfig+0x5c4>)
 800bc58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	2200      	movs	r2, #0
 800bc60:	603b      	str	r3, [r7, #0]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc6c:	f7f4 ff12 	bl	8000a94 <__aeabi_uldivmod>
 800bc70:	4602      	mov	r2, r0
 800bc72:	460b      	mov	r3, r1
 800bc74:	4610      	mov	r0, r2
 800bc76:	4619      	mov	r1, r3
 800bc78:	f04f 0200 	mov.w	r2, #0
 800bc7c:	f04f 0300 	mov.w	r3, #0
 800bc80:	020b      	lsls	r3, r1, #8
 800bc82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc86:	0202      	lsls	r2, r0, #8
 800bc88:	6979      	ldr	r1, [r7, #20]
 800bc8a:	6849      	ldr	r1, [r1, #4]
 800bc8c:	0849      	lsrs	r1, r1, #1
 800bc8e:	2000      	movs	r0, #0
 800bc90:	460c      	mov	r4, r1
 800bc92:	4605      	mov	r5, r0
 800bc94:	eb12 0804 	adds.w	r8, r2, r4
 800bc98:	eb43 0905 	adc.w	r9, r3, r5
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	685b      	ldr	r3, [r3, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	469a      	mov	sl, r3
 800bca4:	4693      	mov	fp, r2
 800bca6:	4652      	mov	r2, sl
 800bca8:	465b      	mov	r3, fp
 800bcaa:	4640      	mov	r0, r8
 800bcac:	4649      	mov	r1, r9
 800bcae:	f7f4 fef1 	bl	8000a94 <__aeabi_uldivmod>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcba:	6a3b      	ldr	r3, [r7, #32]
 800bcbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcc0:	d308      	bcc.n	800bcd4 <UART_SetConfig+0x430>
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcc8:	d204      	bcs.n	800bcd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a3a      	ldr	r2, [r7, #32]
 800bcd0:	60da      	str	r2, [r3, #12]
 800bcd2:	e0ce      	b.n	800be72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bcda:	e0ca      	b.n	800be72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	69db      	ldr	r3, [r3, #28]
 800bce0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bce4:	d166      	bne.n	800bdb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bce6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcea:	2b08      	cmp	r3, #8
 800bcec:	d827      	bhi.n	800bd3e <UART_SetConfig+0x49a>
 800bcee:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <UART_SetConfig+0x450>)
 800bcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	0800bd3f 	.word	0x0800bd3f
 800bd04:	0800bd2f 	.word	0x0800bd2f
 800bd08:	0800bd3f 	.word	0x0800bd3f
 800bd0c:	0800bd3f 	.word	0x0800bd3f
 800bd10:	0800bd3f 	.word	0x0800bd3f
 800bd14:	0800bd37 	.word	0x0800bd37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd18:	f7fc fc5a 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800bd1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd1e:	e014      	b.n	800bd4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd20:	f7fc fc6c 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800bd24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd26:	e010      	b.n	800bd4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd28:	4b4e      	ldr	r3, [pc, #312]	@ (800be64 <UART_SetConfig+0x5c0>)
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd2c:	e00d      	b.n	800bd4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd2e:	f7fc fbe1 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 800bd32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd34:	e009      	b.n	800bd4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd3c:	e005      	b.n	800bd4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	f000 8090 	beq.w	800be72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd56:	4a44      	ldr	r2, [pc, #272]	@ (800be68 <UART_SetConfig+0x5c4>)
 800bd58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd60:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd64:	005a      	lsls	r2, r3, #1
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	085b      	lsrs	r3, r3, #1
 800bd6c:	441a      	add	r2, r3
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd78:	6a3b      	ldr	r3, [r7, #32]
 800bd7a:	2b0f      	cmp	r3, #15
 800bd7c:	d916      	bls.n	800bdac <UART_SetConfig+0x508>
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd84:	d212      	bcs.n	800bdac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	b29b      	uxth	r3, r3
 800bd8a:	f023 030f 	bic.w	r3, r3, #15
 800bd8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd90:	6a3b      	ldr	r3, [r7, #32]
 800bd92:	085b      	lsrs	r3, r3, #1
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	f003 0307 	and.w	r3, r3, #7
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	8bfb      	ldrh	r3, [r7, #30]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	8bfa      	ldrh	r2, [r7, #30]
 800bda8:	60da      	str	r2, [r3, #12]
 800bdaa:	e062      	b.n	800be72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bdac:	2301      	movs	r3, #1
 800bdae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bdb2:	e05e      	b.n	800be72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bdb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d828      	bhi.n	800be0e <UART_SetConfig+0x56a>
 800bdbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc4 <UART_SetConfig+0x520>)
 800bdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc2:	bf00      	nop
 800bdc4:	0800bde9 	.word	0x0800bde9
 800bdc8:	0800bdf1 	.word	0x0800bdf1
 800bdcc:	0800bdf9 	.word	0x0800bdf9
 800bdd0:	0800be0f 	.word	0x0800be0f
 800bdd4:	0800bdff 	.word	0x0800bdff
 800bdd8:	0800be0f 	.word	0x0800be0f
 800bddc:	0800be0f 	.word	0x0800be0f
 800bde0:	0800be0f 	.word	0x0800be0f
 800bde4:	0800be07 	.word	0x0800be07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bde8:	f7fc fbf2 	bl	80085d0 <HAL_RCC_GetPCLK1Freq>
 800bdec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdee:	e014      	b.n	800be1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdf0:	f7fc fc04 	bl	80085fc <HAL_RCC_GetPCLK2Freq>
 800bdf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bdf6:	e010      	b.n	800be1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdf8:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <UART_SetConfig+0x5c0>)
 800bdfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bdfc:	e00d      	b.n	800be1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdfe:	f7fc fb79 	bl	80084f4 <HAL_RCC_GetSysClockFreq>
 800be02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be04:	e009      	b.n	800be1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be0c:	e005      	b.n	800be1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800be0e:	2300      	movs	r3, #0
 800be10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800be18:	bf00      	nop
    }

    if (pclk != 0U)
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d028      	beq.n	800be72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be24:	4a10      	ldr	r2, [pc, #64]	@ (800be68 <UART_SetConfig+0x5c4>)
 800be26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be2a:	461a      	mov	r2, r3
 800be2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be2e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	085b      	lsrs	r3, r3, #1
 800be38:	441a      	add	r2, r3
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be44:	6a3b      	ldr	r3, [r7, #32]
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d910      	bls.n	800be6c <UART_SetConfig+0x5c8>
 800be4a:	6a3b      	ldr	r3, [r7, #32]
 800be4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be50:	d20c      	bcs.n	800be6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	b29a      	uxth	r2, r3
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60da      	str	r2, [r3, #12]
 800be5c:	e009      	b.n	800be72 <UART_SetConfig+0x5ce>
 800be5e:	bf00      	nop
 800be60:	40008000 	.word	0x40008000
 800be64:	00f42400 	.word	0x00f42400
 800be68:	0800e104 	.word	0x0800e104
      }
      else
      {
        ret = HAL_ERROR;
 800be6c:	2301      	movs	r3, #1
 800be6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2201      	movs	r2, #1
 800be76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2201      	movs	r2, #1
 800be7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2200      	movs	r2, #0
 800be86:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	2200      	movs	r2, #0
 800be8c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800be8e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800be92:	4618      	mov	r0, r3
 800be94:	3730      	adds	r7, #48	@ 0x30
 800be96:	46bd      	mov	sp, r7
 800be98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800be9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bea8:	f003 0308 	and.w	r3, r3, #8
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00a      	beq.n	800bec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00a      	beq.n	800bee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00a      	beq.n	800bf0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0e:	f003 0304 	and.w	r3, r3, #4
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00a      	beq.n	800bf2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	685b      	ldr	r3, [r3, #4]
 800bf1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf30:	f003 0310 	and.w	r3, r3, #16
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00a      	beq.n	800bf4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	689b      	ldr	r3, [r3, #8]
 800bf3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00a      	beq.n	800bf70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	689b      	ldr	r3, [r3, #8]
 800bf60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01a      	beq.n	800bfb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf9a:	d10a      	bne.n	800bfb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00a      	beq.n	800bfd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	430a      	orrs	r2, r1
 800bfd2:	605a      	str	r2, [r3, #4]
  }
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b098      	sub	sp, #96	@ 0x60
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bff0:	f7f9 fb06 	bl	8005600 <HAL_GetTick>
 800bff4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0308 	and.w	r3, r3, #8
 800c000:	2b08      	cmp	r3, #8
 800c002:	d12f      	bne.n	800c064 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c004:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c00c:	2200      	movs	r2, #0
 800c00e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 f88e 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d022      	beq.n	800c064 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c026:	e853 3f00 	ldrex	r3, [r3]
 800c02a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c02e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c032:	653b      	str	r3, [r7, #80]	@ 0x50
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	461a      	mov	r2, r3
 800c03a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c03c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c03e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c040:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c042:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c044:	e841 2300 	strex	r3, r2, [r1]
 800c048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c04a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1e6      	bne.n	800c01e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2220      	movs	r2, #32
 800c054:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	e063      	b.n	800c12c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	f003 0304 	and.w	r3, r3, #4
 800c06e:	2b04      	cmp	r3, #4
 800c070:	d149      	bne.n	800c106 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c072:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07a:	2200      	movs	r2, #0
 800c07c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 f857 	bl	800c134 <UART_WaitOnFlagUntilTimeout>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d03c      	beq.n	800c106 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c094:	e853 3f00 	ldrex	r3, [r3]
 800c098:	623b      	str	r3, [r7, #32]
   return(result);
 800c09a:	6a3b      	ldr	r3, [r7, #32]
 800c09c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	461a      	mov	r2, r3
 800c0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0aa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0b2:	e841 2300 	strex	r3, r2, [r1]
 800c0b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d1e6      	bne.n	800c08c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3308      	adds	r3, #8
 800c0c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	e853 3f00 	ldrex	r3, [r3]
 800c0cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	3308      	adds	r3, #8
 800c0dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c0de:	61fa      	str	r2, [r7, #28]
 800c0e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0e2:	69b9      	ldr	r1, [r7, #24]
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	e841 2300 	strex	r3, r2, [r1]
 800c0ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1e5      	bne.n	800c0be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c102:	2303      	movs	r3, #3
 800c104:	e012      	b.n	800c12c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2220      	movs	r2, #32
 800c10a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2220      	movs	r2, #32
 800c112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c12a:	2300      	movs	r3, #0
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3758      	adds	r7, #88	@ 0x58
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	603b      	str	r3, [r7, #0]
 800c140:	4613      	mov	r3, r2
 800c142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c144:	e04f      	b.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c146:	69bb      	ldr	r3, [r7, #24]
 800c148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c14c:	d04b      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c14e:	f7f9 fa57 	bl	8005600 <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <UART_WaitOnFlagUntilTimeout+0x30>
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d101      	bne.n	800c168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c164:	2303      	movs	r3, #3
 800c166:	e04e      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 0304 	and.w	r3, r3, #4
 800c172:	2b00      	cmp	r3, #0
 800c174:	d037      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2b80      	cmp	r3, #128	@ 0x80
 800c17a:	d034      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2b40      	cmp	r3, #64	@ 0x40
 800c180:	d031      	beq.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	69db      	ldr	r3, [r3, #28]
 800c188:	f003 0308 	and.w	r3, r3, #8
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d110      	bne.n	800c1b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2208      	movs	r2, #8
 800c196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c198:	68f8      	ldr	r0, [r7, #12]
 800c19a:	f000 f920 	bl	800c3de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e029      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1c0:	d111      	bne.n	800c1e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1cc:	68f8      	ldr	r0, [r7, #12]
 800c1ce:	f000 f906 	bl	800c3de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2220      	movs	r2, #32
 800c1d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e00f      	b.n	800c206 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	69da      	ldr	r2, [r3, #28]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	4013      	ands	r3, r2
 800c1f0:	68ba      	ldr	r2, [r7, #8]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	bf0c      	ite	eq
 800c1f6:	2301      	moveq	r3, #1
 800c1f8:	2300      	movne	r3, #0
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	429a      	cmp	r2, r3
 800c202:	d0a0      	beq.n	800c146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}
	...

0800c210 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b096      	sub	sp, #88	@ 0x58
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	88fa      	ldrh	r2, [r7, #6]
 800c228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2200      	movs	r2, #0
 800c230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2222      	movs	r2, #34	@ 0x22
 800c238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c242:	2b00      	cmp	r3, #0
 800c244:	d02d      	beq.n	800c2a2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c24c:	4a40      	ldr	r2, [pc, #256]	@ (800c350 <UART_Start_Receive_DMA+0x140>)
 800c24e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c256:	4a3f      	ldr	r2, [pc, #252]	@ (800c354 <UART_Start_Receive_DMA+0x144>)
 800c258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c260:	4a3d      	ldr	r2, [pc, #244]	@ (800c358 <UART_Start_Receive_DMA+0x148>)
 800c262:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c26a:	2200      	movs	r2, #0
 800c26c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3324      	adds	r3, #36	@ 0x24
 800c27a:	4619      	mov	r1, r3
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c280:	461a      	mov	r2, r3
 800c282:	88fb      	ldrh	r3, [r7, #6]
 800c284:	f7fa fff8 	bl	8007278 <HAL_DMA_Start_IT>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d009      	beq.n	800c2a2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2210      	movs	r2, #16
 800c292:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2220      	movs	r2, #32
 800c29a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e051      	b.n	800c346 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d018      	beq.n	800c2dc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2b2:	e853 3f00 	ldrex	r3, [r3]
 800c2b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c2be:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c2ca:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c2ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c2d0:	e841 2300 	strex	r3, r2, [r1]
 800c2d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c2d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d1e6      	bne.n	800c2aa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	3308      	adds	r3, #8
 800c2e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e6:	e853 3f00 	ldrex	r3, [r3]
 800c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ee:	f043 0301 	orr.w	r3, r3, #1
 800c2f2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3308      	adds	r3, #8
 800c2fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c2fc:	637a      	str	r2, [r7, #52]	@ 0x34
 800c2fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c300:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c302:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c304:	e841 2300 	strex	r3, r2, [r1]
 800c308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c30a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d1e5      	bne.n	800c2dc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	3308      	adds	r3, #8
 800c316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	e853 3f00 	ldrex	r3, [r3]
 800c31e:	613b      	str	r3, [r7, #16]
   return(result);
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c330:	623a      	str	r2, [r7, #32]
 800c332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c334:	69f9      	ldr	r1, [r7, #28]
 800c336:	6a3a      	ldr	r2, [r7, #32]
 800c338:	e841 2300 	strex	r3, r2, [r1]
 800c33c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c33e:	69bb      	ldr	r3, [r7, #24]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1e5      	bne.n	800c310 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800c344:	2300      	movs	r3, #0
}
 800c346:	4618      	mov	r0, r3
 800c348:	3758      	adds	r7, #88	@ 0x58
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	0800c4ab 	.word	0x0800c4ab
 800c354:	0800c5df 	.word	0x0800c5df
 800c358:	0800c625 	.word	0x0800c625

0800c35c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b08f      	sub	sp, #60	@ 0x3c
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c36a:	6a3b      	ldr	r3, [r7, #32]
 800c36c:	e853 3f00 	ldrex	r3, [r3]
 800c370:	61fb      	str	r3, [r7, #28]
   return(result);
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c378:	637b      	str	r3, [r7, #52]	@ 0x34
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	461a      	mov	r2, r3
 800c380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c384:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38a:	e841 2300 	strex	r3, r2, [r1]
 800c38e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c392:	2b00      	cmp	r3, #0
 800c394:	d1e6      	bne.n	800c364 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	3308      	adds	r3, #8
 800c39c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	e853 3f00 	ldrex	r3, [r3]
 800c3a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800c3ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	3308      	adds	r3, #8
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3b6:	61ba      	str	r2, [r7, #24]
 800c3b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ba:	6979      	ldr	r1, [r7, #20]
 800c3bc:	69ba      	ldr	r2, [r7, #24]
 800c3be:	e841 2300 	strex	r3, r2, [r1]
 800c3c2:	613b      	str	r3, [r7, #16]
   return(result);
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1e5      	bne.n	800c396 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	2220      	movs	r2, #32
 800c3ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800c3d2:	bf00      	nop
 800c3d4:	373c      	adds	r7, #60	@ 0x3c
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c3de:	b480      	push	{r7}
 800c3e0:	b095      	sub	sp, #84	@ 0x54
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ee:	e853 3f00 	ldrex	r3, [r3]
 800c3f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c3fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c404:	643b      	str	r3, [r7, #64]	@ 0x40
 800c406:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c408:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c40a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c40c:	e841 2300 	strex	r3, r2, [r1]
 800c410:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c414:	2b00      	cmp	r3, #0
 800c416:	d1e6      	bne.n	800c3e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3308      	adds	r3, #8
 800c41e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	6a3b      	ldr	r3, [r7, #32]
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	61fb      	str	r3, [r7, #28]
   return(result);
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c42e:	f023 0301 	bic.w	r3, r3, #1
 800c432:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	3308      	adds	r3, #8
 800c43a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c43c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c43e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e3      	bne.n	800c418 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c454:	2b01      	cmp	r3, #1
 800c456:	d118      	bne.n	800c48a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	60bb      	str	r3, [r7, #8]
   return(result);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f023 0310 	bic.w	r3, r3, #16
 800c46c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c476:	61bb      	str	r3, [r7, #24]
 800c478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	6979      	ldr	r1, [r7, #20]
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	613b      	str	r3, [r7, #16]
   return(result);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e6      	bne.n	800c458 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2200      	movs	r2, #0
 800c49c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c49e:	bf00      	nop
 800c4a0:	3754      	adds	r7, #84	@ 0x54
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr

0800c4aa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b09c      	sub	sp, #112	@ 0x70
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f003 0320 	and.w	r3, r3, #32
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d171      	bne.n	800c5aa <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800c4c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4d6:	e853 3f00 	ldrex	r3, [r3]
 800c4da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c4dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c4e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c4ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c4ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c4f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c4f4:	e841 2300 	strex	r3, r2, [r1]
 800c4f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c4fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d1e6      	bne.n	800c4ce <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c500:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	3308      	adds	r3, #8
 800c506:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50a:	e853 3f00 	ldrex	r3, [r3]
 800c50e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c512:	f023 0301 	bic.w	r3, r3, #1
 800c516:	667b      	str	r3, [r7, #100]	@ 0x64
 800c518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	3308      	adds	r3, #8
 800c51e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c520:	647a      	str	r2, [r7, #68]	@ 0x44
 800c522:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c524:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c526:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c528:	e841 2300 	strex	r3, r2, [r1]
 800c52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c52e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c530:	2b00      	cmp	r3, #0
 800c532:	d1e5      	bne.n	800c500 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c534:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	3308      	adds	r3, #8
 800c53a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c53e:	e853 3f00 	ldrex	r3, [r3]
 800c542:	623b      	str	r3, [r7, #32]
   return(result);
 800c544:	6a3b      	ldr	r3, [r7, #32]
 800c546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c54a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	3308      	adds	r3, #8
 800c552:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c554:	633a      	str	r2, [r7, #48]	@ 0x30
 800c556:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c558:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c55c:	e841 2300 	strex	r3, r2, [r1]
 800c560:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1e5      	bne.n	800c534 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c56a:	2220      	movs	r2, #32
 800c56c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c570:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c572:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c574:	2b01      	cmp	r3, #1
 800c576:	d118      	bne.n	800c5aa <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	e853 3f00 	ldrex	r3, [r3]
 800c584:	60fb      	str	r3, [r7, #12]
   return(result);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f023 0310 	bic.w	r3, r3, #16
 800c58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c58e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	461a      	mov	r2, r3
 800c594:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c596:	61fb      	str	r3, [r7, #28]
 800c598:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59a:	69b9      	ldr	r1, [r7, #24]
 800c59c:	69fa      	ldr	r2, [r7, #28]
 800c59e:	e841 2300 	strex	r3, r2, [r1]
 800c5a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d1e6      	bne.n	800c578 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d109      	bne.n	800c5cc <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c5be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c5c0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c5c4:	4611      	mov	r1, r2
 800c5c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5ca:	e004      	b.n	800c5d6 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c5cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c5d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5d4:	4798      	blx	r3
}
 800c5d6:	bf00      	nop
 800c5d8:	3770      	adds	r7, #112	@ 0x70
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c5de:	b580      	push	{r7, lr}
 800c5e0:	b084      	sub	sp, #16
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5ea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d10b      	bne.n	800c612 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c606:	0852      	lsrs	r2, r2, #1
 800c608:	b292      	uxth	r2, r2
 800c60a:	4611      	mov	r1, r2
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c610:	e004      	b.n	800c61c <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	4798      	blx	r3
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c630:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c638:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c640:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c64c:	2b80      	cmp	r3, #128	@ 0x80
 800c64e:	d109      	bne.n	800c664 <UART_DMAError+0x40>
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b21      	cmp	r3, #33	@ 0x21
 800c654:	d106      	bne.n	800c664 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	2200      	movs	r2, #0
 800c65a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c65e:	6978      	ldr	r0, [r7, #20]
 800c660:	f7ff fe7c 	bl	800c35c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c664:	697b      	ldr	r3, [r7, #20]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c66e:	2b40      	cmp	r3, #64	@ 0x40
 800c670:	d109      	bne.n	800c686 <UART_DMAError+0x62>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b22      	cmp	r3, #34	@ 0x22
 800c676:	d106      	bne.n	800c686 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c680:	6978      	ldr	r0, [r7, #20]
 800c682:	f7ff feac 	bl	800c3de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c68c:	f043 0210 	orr.w	r2, r3, #16
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c69c:	6978      	ldr	r0, [r7, #20]
 800c69e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6a0:	bf00      	nop
 800c6a2:	3718      	adds	r7, #24
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c8:	bf00      	nop
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b088      	sub	sp, #32
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6ec:	61fb      	str	r3, [r7, #28]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	69fb      	ldr	r3, [r7, #28]
 800c6f6:	61bb      	str	r3, [r7, #24]
 800c6f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6979      	ldr	r1, [r7, #20]
 800c6fc:	69ba      	ldr	r2, [r7, #24]
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	613b      	str	r3, [r7, #16]
   return(result);
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e6      	bne.n	800c6d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2220      	movs	r2, #32
 800c70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	2200      	movs	r2, #0
 800c716:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c722:	bf00      	nop
 800c724:	3720      	adds	r7, #32
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b083      	sub	sp, #12
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c732:	bf00      	nop
 800c734:	370c      	adds	r7, #12
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c73e:	b480      	push	{r7}
 800c740:	b083      	sub	sp, #12
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c746:	bf00      	nop
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c752:	b480      	push	{r7}
 800c754:	b083      	sub	sp, #12
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c75a:	bf00      	nop
 800c75c:	370c      	adds	r7, #12
 800c75e:	46bd      	mov	sp, r7
 800c760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c764:	4770      	bx	lr

0800c766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c766:	b480      	push	{r7}
 800c768:	b085      	sub	sp, #20
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c774:	2b01      	cmp	r3, #1
 800c776:	d101      	bne.n	800c77c <HAL_UARTEx_DisableFifoMode+0x16>
 800c778:	2302      	movs	r3, #2
 800c77a:	e027      	b.n	800c7cc <HAL_UARTEx_DisableFifoMode+0x66>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2224      	movs	r2, #36	@ 0x24
 800c788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f022 0201 	bic.w	r2, r2, #1
 800c7a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c7aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2220      	movs	r2, #32
 800c7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c7ca:	2300      	movs	r3, #0
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3714      	adds	r7, #20
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d6:	4770      	bx	lr

0800c7d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c7e8:	2b01      	cmp	r3, #1
 800c7ea:	d101      	bne.n	800c7f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c7ec:	2302      	movs	r3, #2
 800c7ee:	e02d      	b.n	800c84c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2224      	movs	r2, #36	@ 0x24
 800c7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f022 0201 	bic.w	r2, r2, #1
 800c816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	689b      	ldr	r3, [r3, #8]
 800c81e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	430a      	orrs	r2, r1
 800c82a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f84f 	bl	800c8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	68fa      	ldr	r2, [r7, #12]
 800c838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2220      	movs	r2, #32
 800c83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2200      	movs	r2, #0
 800c846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3710      	adds	r7, #16
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}

0800c854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c864:	2b01      	cmp	r3, #1
 800c866:	d101      	bne.n	800c86c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c868:	2302      	movs	r3, #2
 800c86a:	e02d      	b.n	800c8c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2224      	movs	r2, #36	@ 0x24
 800c878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f022 0201 	bic.w	r2, r2, #1
 800c892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f811 	bl	800c8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c8c6:	2300      	movs	r3, #0
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b085      	sub	sp, #20
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d108      	bne.n	800c8f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c8f0:	e031      	b.n	800c956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c8f2:	2308      	movs	r3, #8
 800c8f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c8f6:	2308      	movs	r3, #8
 800c8f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	0e5b      	lsrs	r3, r3, #25
 800c902:	b2db      	uxtb	r3, r3
 800c904:	f003 0307 	and.w	r3, r3, #7
 800c908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	0f5b      	lsrs	r3, r3, #29
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f003 0307 	and.w	r3, r3, #7
 800c918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c91a:	7bbb      	ldrb	r3, [r7, #14]
 800c91c:	7b3a      	ldrb	r2, [r7, #12]
 800c91e:	4911      	ldr	r1, [pc, #68]	@ (800c964 <UARTEx_SetNbDataToProcess+0x94>)
 800c920:	5c8a      	ldrb	r2, [r1, r2]
 800c922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c926:	7b3a      	ldrb	r2, [r7, #12]
 800c928:	490f      	ldr	r1, [pc, #60]	@ (800c968 <UARTEx_SetNbDataToProcess+0x98>)
 800c92a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c92c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c930:	b29a      	uxth	r2, r3
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	7b7a      	ldrb	r2, [r7, #13]
 800c93c:	4909      	ldr	r1, [pc, #36]	@ (800c964 <UARTEx_SetNbDataToProcess+0x94>)
 800c93e:	5c8a      	ldrb	r2, [r1, r2]
 800c940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c944:	7b7a      	ldrb	r2, [r7, #13]
 800c946:	4908      	ldr	r1, [pc, #32]	@ (800c968 <UARTEx_SetNbDataToProcess+0x98>)
 800c948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c94a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c94e:	b29a      	uxth	r2, r3
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c956:	bf00      	nop
 800c958:	3714      	adds	r7, #20
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr
 800c962:	bf00      	nop
 800c964:	0800e11c 	.word	0x0800e11c
 800c968:	0800e124 	.word	0x0800e124

0800c96c <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b08b      	sub	sp, #44	@ 0x2c
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	881b      	ldrh	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	885b      	ldrh	r3, [r3, #2]
 800c994:	fb02 f303 	mul.w	r3, r2, r3
 800c998:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c99e:	e013      	b.n	800c9c8 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c9a6:	ed93 7a00 	vldr	s14, [r3]
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	1d1a      	adds	r2, r3, #4
 800c9ae:	623a      	str	r2, [r7, #32]
 800c9b0:	edd3 7a00 	vldr	s15, [r3]
 800c9b4:	69fb      	ldr	r3, [r7, #28]
 800c9b6:	1d1a      	adds	r2, r3, #4
 800c9b8:	61fa      	str	r2, [r7, #28]
 800c9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9be:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d1e8      	bne.n	800c9a0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c9d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	372c      	adds	r7, #44	@ 0x2c
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c9e2:	b480      	push	{r7}
 800c9e4:	b085      	sub	sp, #20
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	607b      	str	r3, [r7, #4]
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	817b      	strh	r3, [r7, #10]
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	897a      	ldrh	r2, [r7, #10]
 800c9f8:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	893a      	ldrh	r2, [r7, #8]
 800c9fe:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	605a      	str	r2, [r3, #4]
}
 800ca06:	bf00      	nop
 800ca08:	3714      	adds	r7, #20
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr

0800ca12 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ca12:	b480      	push	{r7}
 800ca14:	b0bb      	sub	sp, #236	@ 0xec
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	6078      	str	r0, [r7, #4]
 800ca1a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	881b      	ldrh	r3, [r3, #0]
 800ca2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	885b      	ldrh	r3, [r3, #2]
 800ca32:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ca34:	f04f 0300 	mov.w	r3, #0
 800ca38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ca42:	2300      	movs	r3, #0
 800ca44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ca48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ca4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ca54:	e03b      	b.n	800cace <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ca56:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ca58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca62:	e00c      	b.n	800ca7e <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ca64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca68:	1d1a      	adds	r2, r3, #4
 800ca6a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca6e:	f04f 0200 	mov.w	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
        j--;
 800ca74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ca7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d1ee      	bne.n	800ca64 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ca86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca8a:	1d1a      	adds	r2, r3, #4
 800ca8c:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ca90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ca94:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ca96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800caa0:	e00c      	b.n	800cabc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800caa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800caa6:	1d1a      	adds	r2, r3, #4
 800caa8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800caac:	f04f 0200 	mov.w	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
        j--;
 800cab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cab6:	3b01      	subs	r3, #1
 800cab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800cabc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d1ee      	bne.n	800caa2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800cac4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cac8:	3b01      	subs	r3, #1
 800caca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800cace:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d1bf      	bne.n	800ca56 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800cad6:	2300      	movs	r3, #0
 800cad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cadc:	e2c7      	b.n	800d06e <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800cade:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cae2:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	885b      	ldrh	r3, [r3, #2]
 800caec:	3301      	adds	r3, #1
 800caee:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800caf2:	fb01 f303 	mul.w	r3, r1, r3
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800cafe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800cb08:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb0c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cb10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb14:	3301      	adds	r3, #1
 800cb16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cb1a:	e02c      	b.n	800cb76 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	885b      	ldrh	r3, [r3, #2]
 800cb24:	4619      	mov	r1, r3
 800cb26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb2a:	fb03 f101 	mul.w	r1, r3, r1
 800cb2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb32:	440b      	add	r3, r1
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	4413      	add	r3, r2
 800cb38:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800cb3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800cb44:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800cb48:	eeb0 7ae7 	vabs.f32	s14, s15
 800cb4c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cb50:	eef0 7ae7 	vabs.f32	s15, s15
 800cb54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5c:	dd06      	ble.n	800cb6c <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800cb5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800cb66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800cb6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cb70:	3301      	adds	r3, #1
 800cb72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cb76:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cb7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d3cd      	bcc.n	800cb1c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800cb80:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cb84:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8c:	f000 809b 	beq.w	800ccc6 <arm_mat_inverse_f32+0x2b4>
 800cb90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cb94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	f000 8094 	beq.w	800ccc6 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	885b      	ldrh	r3, [r3, #2]
 800cbb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cbb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbba:	1ad3      	subs	r3, r2, r3
 800cbbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbc2:	fb03 f202 	mul.w	r2, r3, r2
 800cbc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbca:	4413      	add	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cbd2:	4413      	add	r3, r2
 800cbd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cbd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cbde:	fb03 f202 	mul.w	r2, r3, r2
 800cbe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cbee:	4413      	add	r3, r2
 800cbf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cbfa:	e018      	b.n	800cc2e <arm_mat_inverse_f32+0x21c>
 800cbfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800cc08:	1d1a      	adds	r2, r3, #4
 800cc0a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800cc0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cc12:	6812      	ldr	r2, [r2, #0]
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cc1a:	1d1a      	adds	r2, r3, #4
 800cc1c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800cc20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc22:	601a      	str	r2, [r3, #0]
 800cc24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800cc28:	3301      	adds	r3, #1
 800cc2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cc2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800cc32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc34:	429a      	cmp	r2, r3
 800cc36:	dbe1      	blt.n	800cbfc <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	885b      	ldrh	r3, [r3, #2]
 800cc4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc50:	643b      	str	r3, [r7, #64]	@ 0x40
 800cc52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cc56:	fb02 f303 	mul.w	r3, r2, r3
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cc60:	4413      	add	r3, r2
 800cc62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cc6c:	fb02 f303 	mul.w	r3, r2, r3
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc76:	4413      	add	r3, r2
 800cc78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cc82:	e018      	b.n	800ccb6 <arm_mat_inverse_f32+0x2a4>
 800cc84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cc90:	1d1a      	adds	r2, r3, #4
 800cc92:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800cc96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cc9a:	6812      	ldr	r2, [r2, #0]
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cca2:	1d1a      	adds	r2, r3, #4
 800cca4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ccb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ccba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	dbe1      	blt.n	800cc84 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ccc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ccca:	2b01      	cmp	r3, #1
 800cccc:	d009      	beq.n	800cce2 <arm_mat_inverse_f32+0x2d0>
 800ccce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ccd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccda:	d102      	bne.n	800cce2 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ccdc:	f06f 0304 	mvn.w	r3, #4
 800cce0:	e208      	b.n	800d0f4 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800cce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cce6:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800ccea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccee:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd0e:	fb03 f202 	mul.w	r2, r3, r2
 800cd12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cd16:	4413      	add	r3, r2
 800cd18:	009b      	lsls	r3, r3, #2
 800cd1a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cd1e:	4413      	add	r3, r2
 800cd20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd24:	2300      	movs	r3, #0
 800cd26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd2a:	e011      	b.n	800cd50 <arm_mat_inverse_f32+0x33e>
 800cd2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800cd36:	ed93 7a00 	vldr	s14, [r3]
 800cd3a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd42:	edc3 7a00 	vstr	s15, [r3]
 800cd46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800cd54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd56:	429a      	cmp	r2, r3
 800cd58:	dbe8      	blt.n	800cd2c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	885b      	ldrh	r3, [r3, #2]
 800cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cd6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd70:	fb02 f303 	mul.w	r3, r2, r3
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800cd7a:	4413      	add	r3, r2
 800cd7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800cd80:	2300      	movs	r3, #0
 800cd82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cd86:	e011      	b.n	800cdac <arm_mat_inverse_f32+0x39a>
 800cd88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cd8c:	1d1a      	adds	r2, r3, #4
 800cd8e:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800cd92:	ed93 7a00 	vldr	s14, [r3]
 800cd96:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc3 7a00 	vstr	s15, [r3]
 800cda2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cda6:	3301      	adds	r3, #1
 800cda8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cdac:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800cdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	dbe8      	blt.n	800cd88 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800cdbc:	e0ae      	b.n	800cf1c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	885b      	ldrh	r3, [r3, #2]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdcc:	fb03 f101 	mul.w	r1, r3, r1
 800cdd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cdd4:	440b      	add	r3, r1
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	685b      	ldr	r3, [r3, #4]
 800cdf4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	885b      	ldrh	r3, [r3, #2]
 800cdfc:	617b      	str	r3, [r7, #20]
 800cdfe:	697a      	ldr	r2, [r7, #20]
 800ce00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	613b      	str	r3, [r7, #16]
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ce0e:	fb03 f202 	mul.w	r2, r3, r2
 800ce12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce16:	4413      	add	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800ce1e:	4413      	add	r3, r2
 800ce20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ce28:	fb03 f202 	mul.w	r2, r3, r2
 800ce2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ce30:	4413      	add	r3, r2
 800ce32:	009b      	lsls	r3, r3, #2
 800ce34:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800ce38:	4413      	add	r3, r2
 800ce3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce3e:	2300      	movs	r3, #0
 800ce40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce44:	e01a      	b.n	800ce7c <arm_mat_inverse_f32+0x46a>
 800ce46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce4a:	1d1a      	adds	r2, r3, #4
 800ce4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ce50:	ed93 7a00 	vldr	s14, [r3]
 800ce54:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ce58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ce60:	1d1a      	adds	r2, r3, #4
 800ce62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ce66:	ed93 7a00 	vldr	s14, [r3]
 800ce6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce6e:	edc3 7a00 	vstr	s15, [r3]
 800ce72:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ce76:	3301      	adds	r3, #1
 800ce78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ce7c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	dbdf      	blt.n	800ce46 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	885b      	ldrh	r3, [r3, #2]
 800ce9a:	60fb      	str	r3, [r7, #12]
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	60bb      	str	r3, [r7, #8]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cea6:	fb02 f303 	mul.w	r3, r2, r3
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ceb0:	4413      	add	r3, r2
 800ceb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ceba:	fb02 f303 	mul.w	r3, r2, r3
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cec4:	4413      	add	r3, r2
 800cec6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ceca:	2300      	movs	r3, #0
 800cecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ced0:	e01a      	b.n	800cf08 <arm_mat_inverse_f32+0x4f6>
 800ced2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ced6:	1d1a      	adds	r2, r3, #4
 800ced8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cedc:	ed93 7a00 	vldr	s14, [r3]
 800cee0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ceec:	1d1a      	adds	r2, r3, #4
 800ceee:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800cef2:	ed93 7a00 	vldr	s14, [r3]
 800cef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cefa:	edc3 7a00 	vstr	s15, [r3]
 800cefe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf02:	3301      	adds	r3, #1
 800cf04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cf08:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	dbdf      	blt.n	800ced2 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800cf12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf16:	3301      	adds	r3, #1
 800cf18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cf1c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf22:	429a      	cmp	r2, r3
 800cf24:	f4ff af4b 	bcc.w	800cdbe <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800cf28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800cf30:	e092      	b.n	800d058 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	685a      	ldr	r2, [r3, #4]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	885b      	ldrh	r3, [r3, #2]
 800cf3a:	4619      	mov	r1, r3
 800cf3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf40:	fb03 f101 	mul.w	r1, r3, r1
 800cf44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf48:	440b      	add	r3, r1
 800cf4a:	009b      	lsls	r3, r3, #2
 800cf4c:	4413      	add	r3, r2
 800cf4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800cf52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	885b      	ldrh	r3, [r3, #2]
 800cf6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	623b      	str	r3, [r7, #32]
 800cf78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cf7e:	fb03 f202 	mul.w	r2, r3, r2
 800cf82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf86:	4413      	add	r3, r2
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cf8c:	4413      	add	r3, r2
 800cf8e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf94:	fb03 f202 	mul.w	r2, r3, r2
 800cf98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800cf9c:	4413      	add	r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800cfa2:	4413      	add	r3, r2
 800cfa4:	677b      	str	r3, [r7, #116]	@ 0x74
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cfaa:	e014      	b.n	800cfd6 <arm_mat_inverse_f32+0x5c4>
 800cfac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cfae:	1d1a      	adds	r2, r3, #4
 800cfb0:	677a      	str	r2, [r7, #116]	@ 0x74
 800cfb2:	ed93 7a00 	vldr	s14, [r3]
 800cfb6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfc0:	1d1a      	adds	r2, r3, #4
 800cfc2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800cfc4:	ed93 7a00 	vldr	s14, [r3]
 800cfc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfcc:	edc3 7a00 	vstr	s15, [r3]
 800cfd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cfd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800cfd8:	6a3b      	ldr	r3, [r7, #32]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	dbe6      	blt.n	800cfac <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	885b      	ldrh	r3, [r3, #2]
 800cfee:	61fb      	str	r3, [r7, #28]
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	61bb      	str	r3, [r7, #24]
 800cff4:	69fb      	ldr	r3, [r7, #28]
 800cff6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800cffa:	fb02 f303 	mul.w	r3, r2, r3
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d002:	4413      	add	r3, r2
 800d004:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d00a:	fb02 f303 	mul.w	r3, r2, r3
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d012:	4413      	add	r3, r2
 800d014:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d016:	2300      	movs	r3, #0
 800d018:	673b      	str	r3, [r7, #112]	@ 0x70
 800d01a:	e014      	b.n	800d046 <arm_mat_inverse_f32+0x634>
 800d01c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d01e:	1d1a      	adds	r2, r3, #4
 800d020:	66ba      	str	r2, [r7, #104]	@ 0x68
 800d022:	ed93 7a00 	vldr	s14, [r3]
 800d026:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d030:	1d1a      	adds	r2, r3, #4
 800d032:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d034:	ed93 7a00 	vldr	s14, [r3]
 800d038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d03c:	edc3 7a00 	vstr	s15, [r3]
 800d040:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d042:	3301      	adds	r3, #1
 800d044:	673b      	str	r3, [r7, #112]	@ 0x70
 800d046:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d048:	69bb      	ldr	r3, [r7, #24]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	dbe6      	blt.n	800d01c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800d04e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d052:	3301      	adds	r3, #1
 800d054:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d058:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d05c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d05e:	429a      	cmp	r2, r3
 800d060:	f4ff af67 	bcc.w	800cf32 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800d064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d068:	3301      	adds	r3, #1
 800d06a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d06e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d074:	429a      	cmp	r2, r3
 800d076:	f4ff ad32 	bcc.w	800cade <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800d080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d084:	2b01      	cmp	r3, #1
 800d086:	d033      	beq.n	800d0f0 <arm_mat_inverse_f32+0x6de>
 800d088:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d08c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d094:	d12c      	bne.n	800d0f0 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800d09c:	2300      	movs	r3, #0
 800d09e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d0a2:	e010      	b.n	800d0c6 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800d0a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d0ac:	4413      	add	r3, r2
 800d0ae:	edd3 7a00 	vldr	s15, [r3]
 800d0b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ba:	d10d      	bne.n	800d0d8 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800d0bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d0c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ca:	fb02 f303 	mul.w	r3, r2, r3
 800d0ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d3e6      	bcc.n	800d0a4 <arm_mat_inverse_f32+0x692>
 800d0d6:	e000      	b.n	800d0da <arm_mat_inverse_f32+0x6c8>
            break;
 800d0d8:	bf00      	nop
      }

      if (i == numRows * numCols)
 800d0da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d0dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0de:	fb02 f303 	mul.w	r3, r2, r3
 800d0e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d102      	bne.n	800d0f0 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800d0ea:	23fb      	movs	r3, #251	@ 0xfb
 800d0ec:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800d0f0:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	37ec      	adds	r7, #236	@ 0xec
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d100:	b480      	push	{r7}
 800d102:	b093      	sub	sp, #76	@ 0x4c
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	881b      	ldrh	r3, [r3, #0]
 800d12e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	885b      	ldrh	r3, [r3, #2]
 800d134:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	885b      	ldrh	r3, [r3, #2]
 800d13a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800d13c:	2300      	movs	r3, #0
 800d13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d140:	8b7b      	ldrh	r3, [r7, #26]
 800d142:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800d144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d146:	009b      	lsls	r3, r3, #2
 800d148:	69fa      	ldr	r2, [r7, #28]
 800d14a:	4413      	add	r3, r2
 800d14c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800d14e:	8b3b      	ldrh	r3, [r7, #24]
 800d150:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800d158:	f04f 0300 	mov.w	r3, #0
 800d15c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800d15e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d160:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800d162:	8afb      	ldrh	r3, [r7, #22]
 800d164:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800d166:	e017      	b.n	800d198 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800d168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d16a:	1d1a      	adds	r2, r3, #4
 800d16c:	647a      	str	r2, [r7, #68]	@ 0x44
 800d16e:	ed93 7a00 	vldr	s14, [r3]
 800d172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d174:	edd3 7a00 	vldr	s15, [r3]
 800d178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d17c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800d180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d184:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800d188:	8b3b      	ldrh	r3, [r7, #24]
 800d18a:	009b      	lsls	r3, r3, #2
 800d18c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d18e:	4413      	add	r3, r2
 800d190:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800d192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d194:	3b01      	subs	r3, #1
 800d196:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800d198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d1e4      	bne.n	800d168 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800d19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a0:	1d1a      	adds	r2, r3, #4
 800d1a2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d1a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d1a6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800d1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800d1ae:	8b3a      	ldrh	r2, [r7, #24]
 800d1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	6a3a      	ldr	r2, [r7, #32]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800d1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d1ca      	bne.n	800d158 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800d1c2:	8b3b      	ldrh	r3, [r7, #24]
 800d1c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1c6:	4413      	add	r3, r2
 800d1c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800d1ca:	8afb      	ldrh	r3, [r7, #22]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d1d0:	4413      	add	r3, r2
 800d1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d6:	3b01      	subs	r3, #1
 800d1d8:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d1b1      	bne.n	800d144 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800d1e4:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	374c      	adds	r7, #76	@ 0x4c
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr

0800d1f4 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800d1f4:	b480      	push	{r7}
 800d1f6:	b08b      	sub	sp, #44	@ 0x2c
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	ed87 0a02 	vstr	s0, [r7, #8]
 800d200:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	685b      	ldr	r3, [r3, #4]
 800d206:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	885b      	ldrh	r3, [r3, #2]
 800d218:	fb02 f303 	mul.w	r3, r2, r3
 800d21c:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d222:	e010      	b.n	800d246 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	1d1a      	adds	r2, r3, #4
 800d228:	627a      	str	r2, [r7, #36]	@ 0x24
 800d22a:	ed93 7a00 	vldr	s14, [r3]
 800d22e:	6a3b      	ldr	r3, [r7, #32]
 800d230:	1d1a      	adds	r2, r3, #4
 800d232:	623a      	str	r2, [r7, #32]
 800d234:	edd7 7a02 	vldr	s15, [r7, #8]
 800d238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d23c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	3b01      	subs	r3, #1
 800d244:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800d246:	69fb      	ldr	r3, [r7, #28]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d1eb      	bne.n	800d224 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d24c:	2300      	movs	r3, #0
 800d24e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800d250:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d254:	4618      	mov	r0, r3
 800d256:	372c      	adds	r7, #44	@ 0x2c
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d260:	b480      	push	{r7}
 800d262:	b08b      	sub	sp, #44	@ 0x2c
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	881b      	ldrh	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	885b      	ldrh	r3, [r3, #2]
 800d288:	fb02 f303 	mul.w	r3, r2, r3
 800d28c:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d292:	e013      	b.n	800d2bc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800d294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d296:	1d1a      	adds	r2, r3, #4
 800d298:	627a      	str	r2, [r7, #36]	@ 0x24
 800d29a:	ed93 7a00 	vldr	s14, [r3]
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	1d1a      	adds	r2, r3, #4
 800d2a2:	623a      	str	r2, [r7, #32]
 800d2a4:	edd3 7a00 	vldr	s15, [r3]
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	1d1a      	adds	r2, r3, #4
 800d2ac:	61fa      	str	r2, [r7, #28]
 800d2ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2b2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d2b6:	69bb      	ldr	r3, [r7, #24]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e8      	bne.n	800d294 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d2c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	372c      	adds	r7, #44	@ 0x2c
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b08b      	sub	sp, #44	@ 0x2c
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	885b      	ldrh	r3, [r3, #2]
 800d2f6:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800d2f8:	89fb      	ldrh	r3, [r7, #14]
 800d2fa:	61bb      	str	r3, [r7, #24]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	693a      	ldr	r2, [r7, #16]
 800d306:	4413      	add	r3, r2
 800d308:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800d30a:	89bb      	ldrh	r3, [r7, #12]
 800d30c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800d30e:	e00d      	b.n	800d32c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800d310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d312:	1d1a      	adds	r2, r3, #4
 800d314:	627a      	str	r2, [r7, #36]	@ 0x24
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800d31c:	89fb      	ldrh	r3, [r7, #14]
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	6a3a      	ldr	r2, [r7, #32]
 800d322:	4413      	add	r3, r2
 800d324:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	3b01      	subs	r3, #1
 800d32a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1ee      	bne.n	800d310 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	3301      	adds	r3, #1
 800d336:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800d338:	69bb      	ldr	r3, [r7, #24]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1dd      	bne.n	800d300 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d344:	2300      	movs	r3, #0
 800d346:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800d348:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	372c      	adds	r7, #44	@ 0x2c
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <malloc>:
 800d358:	4b02      	ldr	r3, [pc, #8]	@ (800d364 <malloc+0xc>)
 800d35a:	4601      	mov	r1, r0
 800d35c:	6818      	ldr	r0, [r3, #0]
 800d35e:	f000 b825 	b.w	800d3ac <_malloc_r>
 800d362:	bf00      	nop
 800d364:	20000198 	.word	0x20000198

0800d368 <sbrk_aligned>:
 800d368:	b570      	push	{r4, r5, r6, lr}
 800d36a:	4e0f      	ldr	r6, [pc, #60]	@ (800d3a8 <sbrk_aligned+0x40>)
 800d36c:	460c      	mov	r4, r1
 800d36e:	6831      	ldr	r1, [r6, #0]
 800d370:	4605      	mov	r5, r0
 800d372:	b911      	cbnz	r1, 800d37a <sbrk_aligned+0x12>
 800d374:	f000 f8ae 	bl	800d4d4 <_sbrk_r>
 800d378:	6030      	str	r0, [r6, #0]
 800d37a:	4621      	mov	r1, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	f000 f8a9 	bl	800d4d4 <_sbrk_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	d103      	bne.n	800d38e <sbrk_aligned+0x26>
 800d386:	f04f 34ff 	mov.w	r4, #4294967295
 800d38a:	4620      	mov	r0, r4
 800d38c:	bd70      	pop	{r4, r5, r6, pc}
 800d38e:	1cc4      	adds	r4, r0, #3
 800d390:	f024 0403 	bic.w	r4, r4, #3
 800d394:	42a0      	cmp	r0, r4
 800d396:	d0f8      	beq.n	800d38a <sbrk_aligned+0x22>
 800d398:	1a21      	subs	r1, r4, r0
 800d39a:	4628      	mov	r0, r5
 800d39c:	f000 f89a 	bl	800d4d4 <_sbrk_r>
 800d3a0:	3001      	adds	r0, #1
 800d3a2:	d1f2      	bne.n	800d38a <sbrk_aligned+0x22>
 800d3a4:	e7ef      	b.n	800d386 <sbrk_aligned+0x1e>
 800d3a6:	bf00      	nop
 800d3a8:	20002114 	.word	0x20002114

0800d3ac <_malloc_r>:
 800d3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d3b0:	1ccd      	adds	r5, r1, #3
 800d3b2:	f025 0503 	bic.w	r5, r5, #3
 800d3b6:	3508      	adds	r5, #8
 800d3b8:	2d0c      	cmp	r5, #12
 800d3ba:	bf38      	it	cc
 800d3bc:	250c      	movcc	r5, #12
 800d3be:	2d00      	cmp	r5, #0
 800d3c0:	4606      	mov	r6, r0
 800d3c2:	db01      	blt.n	800d3c8 <_malloc_r+0x1c>
 800d3c4:	42a9      	cmp	r1, r5
 800d3c6:	d904      	bls.n	800d3d2 <_malloc_r+0x26>
 800d3c8:	230c      	movs	r3, #12
 800d3ca:	6033      	str	r3, [r6, #0]
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d4a8 <_malloc_r+0xfc>
 800d3d6:	f000 f869 	bl	800d4ac <__malloc_lock>
 800d3da:	f8d8 3000 	ldr.w	r3, [r8]
 800d3de:	461c      	mov	r4, r3
 800d3e0:	bb44      	cbnz	r4, 800d434 <_malloc_r+0x88>
 800d3e2:	4629      	mov	r1, r5
 800d3e4:	4630      	mov	r0, r6
 800d3e6:	f7ff ffbf 	bl	800d368 <sbrk_aligned>
 800d3ea:	1c43      	adds	r3, r0, #1
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	d158      	bne.n	800d4a2 <_malloc_r+0xf6>
 800d3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800d3f4:	4627      	mov	r7, r4
 800d3f6:	2f00      	cmp	r7, #0
 800d3f8:	d143      	bne.n	800d482 <_malloc_r+0xd6>
 800d3fa:	2c00      	cmp	r4, #0
 800d3fc:	d04b      	beq.n	800d496 <_malloc_r+0xea>
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	4639      	mov	r1, r7
 800d402:	4630      	mov	r0, r6
 800d404:	eb04 0903 	add.w	r9, r4, r3
 800d408:	f000 f864 	bl	800d4d4 <_sbrk_r>
 800d40c:	4581      	cmp	r9, r0
 800d40e:	d142      	bne.n	800d496 <_malloc_r+0xea>
 800d410:	6821      	ldr	r1, [r4, #0]
 800d412:	1a6d      	subs	r5, r5, r1
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f7ff ffa6 	bl	800d368 <sbrk_aligned>
 800d41c:	3001      	adds	r0, #1
 800d41e:	d03a      	beq.n	800d496 <_malloc_r+0xea>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	442b      	add	r3, r5
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	f8d8 3000 	ldr.w	r3, [r8]
 800d42a:	685a      	ldr	r2, [r3, #4]
 800d42c:	bb62      	cbnz	r2, 800d488 <_malloc_r+0xdc>
 800d42e:	f8c8 7000 	str.w	r7, [r8]
 800d432:	e00f      	b.n	800d454 <_malloc_r+0xa8>
 800d434:	6822      	ldr	r2, [r4, #0]
 800d436:	1b52      	subs	r2, r2, r5
 800d438:	d420      	bmi.n	800d47c <_malloc_r+0xd0>
 800d43a:	2a0b      	cmp	r2, #11
 800d43c:	d917      	bls.n	800d46e <_malloc_r+0xc2>
 800d43e:	1961      	adds	r1, r4, r5
 800d440:	42a3      	cmp	r3, r4
 800d442:	6025      	str	r5, [r4, #0]
 800d444:	bf18      	it	ne
 800d446:	6059      	strne	r1, [r3, #4]
 800d448:	6863      	ldr	r3, [r4, #4]
 800d44a:	bf08      	it	eq
 800d44c:	f8c8 1000 	streq.w	r1, [r8]
 800d450:	5162      	str	r2, [r4, r5]
 800d452:	604b      	str	r3, [r1, #4]
 800d454:	4630      	mov	r0, r6
 800d456:	f000 f82f 	bl	800d4b8 <__malloc_unlock>
 800d45a:	f104 000b 	add.w	r0, r4, #11
 800d45e:	1d23      	adds	r3, r4, #4
 800d460:	f020 0007 	bic.w	r0, r0, #7
 800d464:	1ac2      	subs	r2, r0, r3
 800d466:	bf1c      	itt	ne
 800d468:	1a1b      	subne	r3, r3, r0
 800d46a:	50a3      	strne	r3, [r4, r2]
 800d46c:	e7af      	b.n	800d3ce <_malloc_r+0x22>
 800d46e:	6862      	ldr	r2, [r4, #4]
 800d470:	42a3      	cmp	r3, r4
 800d472:	bf0c      	ite	eq
 800d474:	f8c8 2000 	streq.w	r2, [r8]
 800d478:	605a      	strne	r2, [r3, #4]
 800d47a:	e7eb      	b.n	800d454 <_malloc_r+0xa8>
 800d47c:	4623      	mov	r3, r4
 800d47e:	6864      	ldr	r4, [r4, #4]
 800d480:	e7ae      	b.n	800d3e0 <_malloc_r+0x34>
 800d482:	463c      	mov	r4, r7
 800d484:	687f      	ldr	r7, [r7, #4]
 800d486:	e7b6      	b.n	800d3f6 <_malloc_r+0x4a>
 800d488:	461a      	mov	r2, r3
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	42a3      	cmp	r3, r4
 800d48e:	d1fb      	bne.n	800d488 <_malloc_r+0xdc>
 800d490:	2300      	movs	r3, #0
 800d492:	6053      	str	r3, [r2, #4]
 800d494:	e7de      	b.n	800d454 <_malloc_r+0xa8>
 800d496:	230c      	movs	r3, #12
 800d498:	6033      	str	r3, [r6, #0]
 800d49a:	4630      	mov	r0, r6
 800d49c:	f000 f80c 	bl	800d4b8 <__malloc_unlock>
 800d4a0:	e794      	b.n	800d3cc <_malloc_r+0x20>
 800d4a2:	6005      	str	r5, [r0, #0]
 800d4a4:	e7d6      	b.n	800d454 <_malloc_r+0xa8>
 800d4a6:	bf00      	nop
 800d4a8:	20002118 	.word	0x20002118

0800d4ac <__malloc_lock>:
 800d4ac:	4801      	ldr	r0, [pc, #4]	@ (800d4b4 <__malloc_lock+0x8>)
 800d4ae:	f000 b84b 	b.w	800d548 <__retarget_lock_acquire_recursive>
 800d4b2:	bf00      	nop
 800d4b4:	20002258 	.word	0x20002258

0800d4b8 <__malloc_unlock>:
 800d4b8:	4801      	ldr	r0, [pc, #4]	@ (800d4c0 <__malloc_unlock+0x8>)
 800d4ba:	f000 b846 	b.w	800d54a <__retarget_lock_release_recursive>
 800d4be:	bf00      	nop
 800d4c0:	20002258 	.word	0x20002258

0800d4c4 <memset>:
 800d4c4:	4402      	add	r2, r0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d100      	bne.n	800d4ce <memset+0xa>
 800d4cc:	4770      	bx	lr
 800d4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d2:	e7f9      	b.n	800d4c8 <memset+0x4>

0800d4d4 <_sbrk_r>:
 800d4d4:	b538      	push	{r3, r4, r5, lr}
 800d4d6:	4d06      	ldr	r5, [pc, #24]	@ (800d4f0 <_sbrk_r+0x1c>)
 800d4d8:	2300      	movs	r3, #0
 800d4da:	4604      	mov	r4, r0
 800d4dc:	4608      	mov	r0, r1
 800d4de:	602b      	str	r3, [r5, #0]
 800d4e0:	f7f7 f960 	bl	80047a4 <_sbrk>
 800d4e4:	1c43      	adds	r3, r0, #1
 800d4e6:	d102      	bne.n	800d4ee <_sbrk_r+0x1a>
 800d4e8:	682b      	ldr	r3, [r5, #0]
 800d4ea:	b103      	cbz	r3, 800d4ee <_sbrk_r+0x1a>
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	bd38      	pop	{r3, r4, r5, pc}
 800d4f0:	20002254 	.word	0x20002254

0800d4f4 <__errno>:
 800d4f4:	4b01      	ldr	r3, [pc, #4]	@ (800d4fc <__errno+0x8>)
 800d4f6:	6818      	ldr	r0, [r3, #0]
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop
 800d4fc:	20000198 	.word	0x20000198

0800d500 <__libc_init_array>:
 800d500:	b570      	push	{r4, r5, r6, lr}
 800d502:	4d0d      	ldr	r5, [pc, #52]	@ (800d538 <__libc_init_array+0x38>)
 800d504:	4c0d      	ldr	r4, [pc, #52]	@ (800d53c <__libc_init_array+0x3c>)
 800d506:	1b64      	subs	r4, r4, r5
 800d508:	10a4      	asrs	r4, r4, #2
 800d50a:	2600      	movs	r6, #0
 800d50c:	42a6      	cmp	r6, r4
 800d50e:	d109      	bne.n	800d524 <__libc_init_array+0x24>
 800d510:	4d0b      	ldr	r5, [pc, #44]	@ (800d540 <__libc_init_array+0x40>)
 800d512:	4c0c      	ldr	r4, [pc, #48]	@ (800d544 <__libc_init_array+0x44>)
 800d514:	f000 fdbe 	bl	800e094 <_init>
 800d518:	1b64      	subs	r4, r4, r5
 800d51a:	10a4      	asrs	r4, r4, #2
 800d51c:	2600      	movs	r6, #0
 800d51e:	42a6      	cmp	r6, r4
 800d520:	d105      	bne.n	800d52e <__libc_init_array+0x2e>
 800d522:	bd70      	pop	{r4, r5, r6, pc}
 800d524:	f855 3b04 	ldr.w	r3, [r5], #4
 800d528:	4798      	blx	r3
 800d52a:	3601      	adds	r6, #1
 800d52c:	e7ee      	b.n	800d50c <__libc_init_array+0xc>
 800d52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d532:	4798      	blx	r3
 800d534:	3601      	adds	r6, #1
 800d536:	e7f2      	b.n	800d51e <__libc_init_array+0x1e>
 800d538:	0800e504 	.word	0x0800e504
 800d53c:	0800e504 	.word	0x0800e504
 800d540:	0800e504 	.word	0x0800e504
 800d544:	0800e508 	.word	0x0800e508

0800d548 <__retarget_lock_acquire_recursive>:
 800d548:	4770      	bx	lr

0800d54a <__retarget_lock_release_recursive>:
 800d54a:	4770      	bx	lr

0800d54c <memcpy>:
 800d54c:	440a      	add	r2, r1
 800d54e:	4291      	cmp	r1, r2
 800d550:	f100 33ff 	add.w	r3, r0, #4294967295
 800d554:	d100      	bne.n	800d558 <memcpy+0xc>
 800d556:	4770      	bx	lr
 800d558:	b510      	push	{r4, lr}
 800d55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d562:	4291      	cmp	r1, r2
 800d564:	d1f9      	bne.n	800d55a <memcpy+0xe>
 800d566:	bd10      	pop	{r4, pc}

0800d568 <sqrtf>:
 800d568:	b508      	push	{r3, lr}
 800d56a:	ed2d 8b02 	vpush	{d8}
 800d56e:	eeb0 8a40 	vmov.f32	s16, s0
 800d572:	f000 f8a1 	bl	800d6b8 <__ieee754_sqrtf>
 800d576:	eeb4 8a48 	vcmp.f32	s16, s16
 800d57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57e:	d60c      	bvs.n	800d59a <sqrtf+0x32>
 800d580:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d5a0 <sqrtf+0x38>
 800d584:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d58c:	d505      	bpl.n	800d59a <sqrtf+0x32>
 800d58e:	f7ff ffb1 	bl	800d4f4 <__errno>
 800d592:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d596:	2321      	movs	r3, #33	@ 0x21
 800d598:	6003      	str	r3, [r0, #0]
 800d59a:	ecbd 8b02 	vpop	{d8}
 800d59e:	bd08      	pop	{r3, pc}
 800d5a0:	00000000 	.word	0x00000000

0800d5a4 <cosf>:
 800d5a4:	ee10 3a10 	vmov	r3, s0
 800d5a8:	b507      	push	{r0, r1, r2, lr}
 800d5aa:	4a1e      	ldr	r2, [pc, #120]	@ (800d624 <cosf+0x80>)
 800d5ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d5b0:	4293      	cmp	r3, r2
 800d5b2:	d806      	bhi.n	800d5c2 <cosf+0x1e>
 800d5b4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d628 <cosf+0x84>
 800d5b8:	b003      	add	sp, #12
 800d5ba:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5be:	f000 b87f 	b.w	800d6c0 <__kernel_cosf>
 800d5c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d5c6:	d304      	bcc.n	800d5d2 <cosf+0x2e>
 800d5c8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d5cc:	b003      	add	sp, #12
 800d5ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5d2:	4668      	mov	r0, sp
 800d5d4:	f000 f914 	bl	800d800 <__ieee754_rem_pio2f>
 800d5d8:	f000 0003 	and.w	r0, r0, #3
 800d5dc:	2801      	cmp	r0, #1
 800d5de:	d009      	beq.n	800d5f4 <cosf+0x50>
 800d5e0:	2802      	cmp	r0, #2
 800d5e2:	d010      	beq.n	800d606 <cosf+0x62>
 800d5e4:	b9b0      	cbnz	r0, 800d614 <cosf+0x70>
 800d5e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d5ea:	ed9d 0a00 	vldr	s0, [sp]
 800d5ee:	f000 f867 	bl	800d6c0 <__kernel_cosf>
 800d5f2:	e7eb      	b.n	800d5cc <cosf+0x28>
 800d5f4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d5f8:	ed9d 0a00 	vldr	s0, [sp]
 800d5fc:	f000 f8b8 	bl	800d770 <__kernel_sinf>
 800d600:	eeb1 0a40 	vneg.f32	s0, s0
 800d604:	e7e2      	b.n	800d5cc <cosf+0x28>
 800d606:	eddd 0a01 	vldr	s1, [sp, #4]
 800d60a:	ed9d 0a00 	vldr	s0, [sp]
 800d60e:	f000 f857 	bl	800d6c0 <__kernel_cosf>
 800d612:	e7f5      	b.n	800d600 <cosf+0x5c>
 800d614:	eddd 0a01 	vldr	s1, [sp, #4]
 800d618:	ed9d 0a00 	vldr	s0, [sp]
 800d61c:	2001      	movs	r0, #1
 800d61e:	f000 f8a7 	bl	800d770 <__kernel_sinf>
 800d622:	e7d3      	b.n	800d5cc <cosf+0x28>
 800d624:	3f490fd8 	.word	0x3f490fd8
 800d628:	00000000 	.word	0x00000000

0800d62c <sinf>:
 800d62c:	ee10 3a10 	vmov	r3, s0
 800d630:	b507      	push	{r0, r1, r2, lr}
 800d632:	4a1f      	ldr	r2, [pc, #124]	@ (800d6b0 <sinf+0x84>)
 800d634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d638:	4293      	cmp	r3, r2
 800d63a:	d807      	bhi.n	800d64c <sinf+0x20>
 800d63c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d6b4 <sinf+0x88>
 800d640:	2000      	movs	r0, #0
 800d642:	b003      	add	sp, #12
 800d644:	f85d eb04 	ldr.w	lr, [sp], #4
 800d648:	f000 b892 	b.w	800d770 <__kernel_sinf>
 800d64c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d650:	d304      	bcc.n	800d65c <sinf+0x30>
 800d652:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d656:	b003      	add	sp, #12
 800d658:	f85d fb04 	ldr.w	pc, [sp], #4
 800d65c:	4668      	mov	r0, sp
 800d65e:	f000 f8cf 	bl	800d800 <__ieee754_rem_pio2f>
 800d662:	f000 0003 	and.w	r0, r0, #3
 800d666:	2801      	cmp	r0, #1
 800d668:	d00a      	beq.n	800d680 <sinf+0x54>
 800d66a:	2802      	cmp	r0, #2
 800d66c:	d00f      	beq.n	800d68e <sinf+0x62>
 800d66e:	b9c0      	cbnz	r0, 800d6a2 <sinf+0x76>
 800d670:	eddd 0a01 	vldr	s1, [sp, #4]
 800d674:	ed9d 0a00 	vldr	s0, [sp]
 800d678:	2001      	movs	r0, #1
 800d67a:	f000 f879 	bl	800d770 <__kernel_sinf>
 800d67e:	e7ea      	b.n	800d656 <sinf+0x2a>
 800d680:	eddd 0a01 	vldr	s1, [sp, #4]
 800d684:	ed9d 0a00 	vldr	s0, [sp]
 800d688:	f000 f81a 	bl	800d6c0 <__kernel_cosf>
 800d68c:	e7e3      	b.n	800d656 <sinf+0x2a>
 800d68e:	eddd 0a01 	vldr	s1, [sp, #4]
 800d692:	ed9d 0a00 	vldr	s0, [sp]
 800d696:	2001      	movs	r0, #1
 800d698:	f000 f86a 	bl	800d770 <__kernel_sinf>
 800d69c:	eeb1 0a40 	vneg.f32	s0, s0
 800d6a0:	e7d9      	b.n	800d656 <sinf+0x2a>
 800d6a2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d6a6:	ed9d 0a00 	vldr	s0, [sp]
 800d6aa:	f000 f809 	bl	800d6c0 <__kernel_cosf>
 800d6ae:	e7f5      	b.n	800d69c <sinf+0x70>
 800d6b0:	3f490fd8 	.word	0x3f490fd8
 800d6b4:	00000000 	.word	0x00000000

0800d6b8 <__ieee754_sqrtf>:
 800d6b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d6bc:	4770      	bx	lr
	...

0800d6c0 <__kernel_cosf>:
 800d6c0:	ee10 3a10 	vmov	r3, s0
 800d6c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d6c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d6cc:	eef0 6a40 	vmov.f32	s13, s0
 800d6d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6d4:	d204      	bcs.n	800d6e0 <__kernel_cosf+0x20>
 800d6d6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d6da:	ee17 2a90 	vmov	r2, s15
 800d6de:	b342      	cbz	r2, 800d732 <__kernel_cosf+0x72>
 800d6e0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d6e4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d750 <__kernel_cosf+0x90>
 800d6e8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d754 <__kernel_cosf+0x94>
 800d6ec:	4a1a      	ldr	r2, [pc, #104]	@ (800d758 <__kernel_cosf+0x98>)
 800d6ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d75c <__kernel_cosf+0x9c>
 800d6f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d6fc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d760 <__kernel_cosf+0xa0>
 800d700:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d704:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d764 <__kernel_cosf+0xa4>
 800d708:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d70c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d768 <__kernel_cosf+0xa8>
 800d710:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d714:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d718:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d71c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d720:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d724:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d728:	d804      	bhi.n	800d734 <__kernel_cosf+0x74>
 800d72a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d72e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d732:	4770      	bx	lr
 800d734:	4a0d      	ldr	r2, [pc, #52]	@ (800d76c <__kernel_cosf+0xac>)
 800d736:	4293      	cmp	r3, r2
 800d738:	bf9a      	itte	ls
 800d73a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d73e:	ee07 3a10 	vmovls	s14, r3
 800d742:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d746:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d74a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d74e:	e7ec      	b.n	800d72a <__kernel_cosf+0x6a>
 800d750:	ad47d74e 	.word	0xad47d74e
 800d754:	310f74f6 	.word	0x310f74f6
 800d758:	3e999999 	.word	0x3e999999
 800d75c:	b493f27c 	.word	0xb493f27c
 800d760:	37d00d01 	.word	0x37d00d01
 800d764:	bab60b61 	.word	0xbab60b61
 800d768:	3d2aaaab 	.word	0x3d2aaaab
 800d76c:	3f480000 	.word	0x3f480000

0800d770 <__kernel_sinf>:
 800d770:	ee10 3a10 	vmov	r3, s0
 800d774:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d778:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d77c:	d204      	bcs.n	800d788 <__kernel_sinf+0x18>
 800d77e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d782:	ee17 3a90 	vmov	r3, s15
 800d786:	b35b      	cbz	r3, 800d7e0 <__kernel_sinf+0x70>
 800d788:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d78c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d7e4 <__kernel_sinf+0x74>
 800d790:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d7e8 <__kernel_sinf+0x78>
 800d794:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d798:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d7ec <__kernel_sinf+0x7c>
 800d79c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d7f0 <__kernel_sinf+0x80>
 800d7a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d7a8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d7f4 <__kernel_sinf+0x84>
 800d7ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d7b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d7b4:	b930      	cbnz	r0, 800d7c4 <__kernel_sinf+0x54>
 800d7b6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d7f8 <__kernel_sinf+0x88>
 800d7ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d7be:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d7c2:	4770      	bx	lr
 800d7c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d7c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d7cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d7d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d7d4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d7fc <__kernel_sinf+0x8c>
 800d7d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d7dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d7e0:	4770      	bx	lr
 800d7e2:	bf00      	nop
 800d7e4:	2f2ec9d3 	.word	0x2f2ec9d3
 800d7e8:	b2d72f34 	.word	0xb2d72f34
 800d7ec:	3638ef1b 	.word	0x3638ef1b
 800d7f0:	b9500d01 	.word	0xb9500d01
 800d7f4:	3c088889 	.word	0x3c088889
 800d7f8:	be2aaaab 	.word	0xbe2aaaab
 800d7fc:	3e2aaaab 	.word	0x3e2aaaab

0800d800 <__ieee754_rem_pio2f>:
 800d800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d802:	ee10 6a10 	vmov	r6, s0
 800d806:	4b88      	ldr	r3, [pc, #544]	@ (800da28 <__ieee754_rem_pio2f+0x228>)
 800d808:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d80c:	429d      	cmp	r5, r3
 800d80e:	b087      	sub	sp, #28
 800d810:	4604      	mov	r4, r0
 800d812:	d805      	bhi.n	800d820 <__ieee754_rem_pio2f+0x20>
 800d814:	2300      	movs	r3, #0
 800d816:	ed80 0a00 	vstr	s0, [r0]
 800d81a:	6043      	str	r3, [r0, #4]
 800d81c:	2000      	movs	r0, #0
 800d81e:	e022      	b.n	800d866 <__ieee754_rem_pio2f+0x66>
 800d820:	4b82      	ldr	r3, [pc, #520]	@ (800da2c <__ieee754_rem_pio2f+0x22c>)
 800d822:	429d      	cmp	r5, r3
 800d824:	d83a      	bhi.n	800d89c <__ieee754_rem_pio2f+0x9c>
 800d826:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d82a:	2e00      	cmp	r6, #0
 800d82c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800da30 <__ieee754_rem_pio2f+0x230>
 800d830:	4a80      	ldr	r2, [pc, #512]	@ (800da34 <__ieee754_rem_pio2f+0x234>)
 800d832:	f023 030f 	bic.w	r3, r3, #15
 800d836:	dd18      	ble.n	800d86a <__ieee754_rem_pio2f+0x6a>
 800d838:	4293      	cmp	r3, r2
 800d83a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d83e:	bf09      	itett	eq
 800d840:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800da38 <__ieee754_rem_pio2f+0x238>
 800d844:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800da3c <__ieee754_rem_pio2f+0x23c>
 800d848:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800da40 <__ieee754_rem_pio2f+0x240>
 800d84c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d850:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d858:	ed80 7a00 	vstr	s14, [r0]
 800d85c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d860:	edc0 7a01 	vstr	s15, [r0, #4]
 800d864:	2001      	movs	r0, #1
 800d866:	b007      	add	sp, #28
 800d868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d86a:	4293      	cmp	r3, r2
 800d86c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d870:	bf09      	itett	eq
 800d872:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800da38 <__ieee754_rem_pio2f+0x238>
 800d876:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800da3c <__ieee754_rem_pio2f+0x23c>
 800d87a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800da40 <__ieee754_rem_pio2f+0x240>
 800d87e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d882:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d88a:	ed80 7a00 	vstr	s14, [r0]
 800d88e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d892:	edc0 7a01 	vstr	s15, [r0, #4]
 800d896:	f04f 30ff 	mov.w	r0, #4294967295
 800d89a:	e7e4      	b.n	800d866 <__ieee754_rem_pio2f+0x66>
 800d89c:	4b69      	ldr	r3, [pc, #420]	@ (800da44 <__ieee754_rem_pio2f+0x244>)
 800d89e:	429d      	cmp	r5, r3
 800d8a0:	d873      	bhi.n	800d98a <__ieee754_rem_pio2f+0x18a>
 800d8a2:	f000 f8dd 	bl	800da60 <fabsf>
 800d8a6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800da48 <__ieee754_rem_pio2f+0x248>
 800d8aa:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d8ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d8b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8ba:	ee17 0a90 	vmov	r0, s15
 800d8be:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800da30 <__ieee754_rem_pio2f+0x230>
 800d8c2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d8c6:	281f      	cmp	r0, #31
 800d8c8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800da3c <__ieee754_rem_pio2f+0x23c>
 800d8cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d0:	eeb1 6a47 	vneg.f32	s12, s14
 800d8d4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d8d8:	ee16 1a90 	vmov	r1, s13
 800d8dc:	dc09      	bgt.n	800d8f2 <__ieee754_rem_pio2f+0xf2>
 800d8de:	4a5b      	ldr	r2, [pc, #364]	@ (800da4c <__ieee754_rem_pio2f+0x24c>)
 800d8e0:	1e47      	subs	r7, r0, #1
 800d8e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d8e6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d8ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d107      	bne.n	800d902 <__ieee754_rem_pio2f+0x102>
 800d8f2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d8f6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d8fa:	2a08      	cmp	r2, #8
 800d8fc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d900:	dc14      	bgt.n	800d92c <__ieee754_rem_pio2f+0x12c>
 800d902:	6021      	str	r1, [r4, #0]
 800d904:	ed94 7a00 	vldr	s14, [r4]
 800d908:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d90c:	2e00      	cmp	r6, #0
 800d90e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d912:	ed84 0a01 	vstr	s0, [r4, #4]
 800d916:	daa6      	bge.n	800d866 <__ieee754_rem_pio2f+0x66>
 800d918:	eeb1 7a47 	vneg.f32	s14, s14
 800d91c:	eeb1 0a40 	vneg.f32	s0, s0
 800d920:	ed84 7a00 	vstr	s14, [r4]
 800d924:	ed84 0a01 	vstr	s0, [r4, #4]
 800d928:	4240      	negs	r0, r0
 800d92a:	e79c      	b.n	800d866 <__ieee754_rem_pio2f+0x66>
 800d92c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800da38 <__ieee754_rem_pio2f+0x238>
 800d930:	eef0 6a40 	vmov.f32	s13, s0
 800d934:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d938:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d93c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d940:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800da40 <__ieee754_rem_pio2f+0x240>
 800d944:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d948:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d94c:	ee15 2a90 	vmov	r2, s11
 800d950:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d954:	1a5b      	subs	r3, r3, r1
 800d956:	2b19      	cmp	r3, #25
 800d958:	dc04      	bgt.n	800d964 <__ieee754_rem_pio2f+0x164>
 800d95a:	edc4 5a00 	vstr	s11, [r4]
 800d95e:	eeb0 0a66 	vmov.f32	s0, s13
 800d962:	e7cf      	b.n	800d904 <__ieee754_rem_pio2f+0x104>
 800d964:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800da50 <__ieee754_rem_pio2f+0x250>
 800d968:	eeb0 0a66 	vmov.f32	s0, s13
 800d96c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d970:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d974:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800da54 <__ieee754_rem_pio2f+0x254>
 800d978:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d97c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d980:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d984:	ed84 7a00 	vstr	s14, [r4]
 800d988:	e7bc      	b.n	800d904 <__ieee754_rem_pio2f+0x104>
 800d98a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d98e:	d306      	bcc.n	800d99e <__ieee754_rem_pio2f+0x19e>
 800d990:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d994:	edc0 7a01 	vstr	s15, [r0, #4]
 800d998:	edc0 7a00 	vstr	s15, [r0]
 800d99c:	e73e      	b.n	800d81c <__ieee754_rem_pio2f+0x1c>
 800d99e:	15ea      	asrs	r2, r5, #23
 800d9a0:	3a86      	subs	r2, #134	@ 0x86
 800d9a2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d9a6:	ee07 3a90 	vmov	s15, r3
 800d9aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d9ae:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800da58 <__ieee754_rem_pio2f+0x258>
 800d9b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9ba:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d9be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d9c2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d9c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d9ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9ce:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d9d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d9d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9de:	edcd 7a05 	vstr	s15, [sp, #20]
 800d9e2:	d11e      	bne.n	800da22 <__ieee754_rem_pio2f+0x222>
 800d9e4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9ec:	bf0c      	ite	eq
 800d9ee:	2301      	moveq	r3, #1
 800d9f0:	2302      	movne	r3, #2
 800d9f2:	491a      	ldr	r1, [pc, #104]	@ (800da5c <__ieee754_rem_pio2f+0x25c>)
 800d9f4:	9101      	str	r1, [sp, #4]
 800d9f6:	2102      	movs	r1, #2
 800d9f8:	9100      	str	r1, [sp, #0]
 800d9fa:	a803      	add	r0, sp, #12
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	f000 f89d 	bl	800db3c <__kernel_rem_pio2f>
 800da02:	2e00      	cmp	r6, #0
 800da04:	f6bf af2f 	bge.w	800d866 <__ieee754_rem_pio2f+0x66>
 800da08:	edd4 7a00 	vldr	s15, [r4]
 800da0c:	eef1 7a67 	vneg.f32	s15, s15
 800da10:	edc4 7a00 	vstr	s15, [r4]
 800da14:	edd4 7a01 	vldr	s15, [r4, #4]
 800da18:	eef1 7a67 	vneg.f32	s15, s15
 800da1c:	edc4 7a01 	vstr	s15, [r4, #4]
 800da20:	e782      	b.n	800d928 <__ieee754_rem_pio2f+0x128>
 800da22:	2303      	movs	r3, #3
 800da24:	e7e5      	b.n	800d9f2 <__ieee754_rem_pio2f+0x1f2>
 800da26:	bf00      	nop
 800da28:	3f490fd8 	.word	0x3f490fd8
 800da2c:	4016cbe3 	.word	0x4016cbe3
 800da30:	3fc90f80 	.word	0x3fc90f80
 800da34:	3fc90fd0 	.word	0x3fc90fd0
 800da38:	37354400 	.word	0x37354400
 800da3c:	37354443 	.word	0x37354443
 800da40:	2e85a308 	.word	0x2e85a308
 800da44:	43490f80 	.word	0x43490f80
 800da48:	3f22f984 	.word	0x3f22f984
 800da4c:	0800e12c 	.word	0x0800e12c
 800da50:	2e85a300 	.word	0x2e85a300
 800da54:	248d3132 	.word	0x248d3132
 800da58:	43800000 	.word	0x43800000
 800da5c:	0800e1ac 	.word	0x0800e1ac

0800da60 <fabsf>:
 800da60:	ee10 3a10 	vmov	r3, s0
 800da64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da68:	ee00 3a10 	vmov	s0, r3
 800da6c:	4770      	bx	lr
	...

0800da70 <scalbnf>:
 800da70:	ee10 3a10 	vmov	r3, s0
 800da74:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800da78:	d02b      	beq.n	800dad2 <scalbnf+0x62>
 800da7a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800da7e:	d302      	bcc.n	800da86 <scalbnf+0x16>
 800da80:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da84:	4770      	bx	lr
 800da86:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800da8a:	d123      	bne.n	800dad4 <scalbnf+0x64>
 800da8c:	4b24      	ldr	r3, [pc, #144]	@ (800db20 <scalbnf+0xb0>)
 800da8e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800db24 <scalbnf+0xb4>
 800da92:	4298      	cmp	r0, r3
 800da94:	ee20 0a27 	vmul.f32	s0, s0, s15
 800da98:	db17      	blt.n	800daca <scalbnf+0x5a>
 800da9a:	ee10 3a10 	vmov	r3, s0
 800da9e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800daa2:	3a19      	subs	r2, #25
 800daa4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800daa8:	4288      	cmp	r0, r1
 800daaa:	dd15      	ble.n	800dad8 <scalbnf+0x68>
 800daac:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800db28 <scalbnf+0xb8>
 800dab0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800db2c <scalbnf+0xbc>
 800dab4:	ee10 3a10 	vmov	r3, s0
 800dab8:	eeb0 7a67 	vmov.f32	s14, s15
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	bfb8      	it	lt
 800dac0:	eef0 7a66 	vmovlt.f32	s15, s13
 800dac4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800dac8:	4770      	bx	lr
 800daca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800db30 <scalbnf+0xc0>
 800dace:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dad2:	4770      	bx	lr
 800dad4:	0dd2      	lsrs	r2, r2, #23
 800dad6:	e7e5      	b.n	800daa4 <scalbnf+0x34>
 800dad8:	4410      	add	r0, r2
 800dada:	28fe      	cmp	r0, #254	@ 0xfe
 800dadc:	dce6      	bgt.n	800daac <scalbnf+0x3c>
 800dade:	2800      	cmp	r0, #0
 800dae0:	dd06      	ble.n	800daf0 <scalbnf+0x80>
 800dae2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800dae6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800daea:	ee00 3a10 	vmov	s0, r3
 800daee:	4770      	bx	lr
 800daf0:	f110 0f16 	cmn.w	r0, #22
 800daf4:	da09      	bge.n	800db0a <scalbnf+0x9a>
 800daf6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800db30 <scalbnf+0xc0>
 800dafa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800db34 <scalbnf+0xc4>
 800dafe:	ee10 3a10 	vmov	r3, s0
 800db02:	eeb0 7a67 	vmov.f32	s14, s15
 800db06:	2b00      	cmp	r3, #0
 800db08:	e7d9      	b.n	800dabe <scalbnf+0x4e>
 800db0a:	3019      	adds	r0, #25
 800db0c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800db10:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800db14:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800db38 <scalbnf+0xc8>
 800db18:	ee07 3a90 	vmov	s15, r3
 800db1c:	e7d7      	b.n	800dace <scalbnf+0x5e>
 800db1e:	bf00      	nop
 800db20:	ffff3cb0 	.word	0xffff3cb0
 800db24:	4c000000 	.word	0x4c000000
 800db28:	7149f2ca 	.word	0x7149f2ca
 800db2c:	f149f2ca 	.word	0xf149f2ca
 800db30:	0da24260 	.word	0x0da24260
 800db34:	8da24260 	.word	0x8da24260
 800db38:	33000000 	.word	0x33000000

0800db3c <__kernel_rem_pio2f>:
 800db3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db40:	ed2d 8b04 	vpush	{d8-d9}
 800db44:	b0d9      	sub	sp, #356	@ 0x164
 800db46:	4690      	mov	r8, r2
 800db48:	9001      	str	r0, [sp, #4]
 800db4a:	4ab6      	ldr	r2, [pc, #728]	@ (800de24 <__kernel_rem_pio2f+0x2e8>)
 800db4c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800db4e:	f118 0f04 	cmn.w	r8, #4
 800db52:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800db56:	460f      	mov	r7, r1
 800db58:	f103 3bff 	add.w	fp, r3, #4294967295
 800db5c:	db26      	blt.n	800dbac <__kernel_rem_pio2f+0x70>
 800db5e:	f1b8 0203 	subs.w	r2, r8, #3
 800db62:	bf48      	it	mi
 800db64:	f108 0204 	addmi.w	r2, r8, #4
 800db68:	10d2      	asrs	r2, r2, #3
 800db6a:	1c55      	adds	r5, r2, #1
 800db6c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800db6e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800db72:	00e8      	lsls	r0, r5, #3
 800db74:	eba2 060b 	sub.w	r6, r2, fp
 800db78:	9002      	str	r0, [sp, #8]
 800db7a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800db7e:	eb0a 0c0b 	add.w	ip, sl, fp
 800db82:	ac1c      	add	r4, sp, #112	@ 0x70
 800db84:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800db88:	2000      	movs	r0, #0
 800db8a:	4560      	cmp	r0, ip
 800db8c:	dd10      	ble.n	800dbb0 <__kernel_rem_pio2f+0x74>
 800db8e:	a91c      	add	r1, sp, #112	@ 0x70
 800db90:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800db94:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800db98:	2600      	movs	r6, #0
 800db9a:	4556      	cmp	r6, sl
 800db9c:	dc24      	bgt.n	800dbe8 <__kernel_rem_pio2f+0xac>
 800db9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800dba2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800dba6:	4684      	mov	ip, r0
 800dba8:	2400      	movs	r4, #0
 800dbaa:	e016      	b.n	800dbda <__kernel_rem_pio2f+0x9e>
 800dbac:	2200      	movs	r2, #0
 800dbae:	e7dc      	b.n	800db6a <__kernel_rem_pio2f+0x2e>
 800dbb0:	42c6      	cmn	r6, r0
 800dbb2:	bf5d      	ittte	pl
 800dbb4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800dbb8:	ee07 1a90 	vmovpl	s15, r1
 800dbbc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800dbc0:	eef0 7a47 	vmovmi.f32	s15, s14
 800dbc4:	ece4 7a01 	vstmia	r4!, {s15}
 800dbc8:	3001      	adds	r0, #1
 800dbca:	e7de      	b.n	800db8a <__kernel_rem_pio2f+0x4e>
 800dbcc:	ecfe 6a01 	vldmia	lr!, {s13}
 800dbd0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800dbd4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dbd8:	3401      	adds	r4, #1
 800dbda:	455c      	cmp	r4, fp
 800dbdc:	ddf6      	ble.n	800dbcc <__kernel_rem_pio2f+0x90>
 800dbde:	ece9 7a01 	vstmia	r9!, {s15}
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	3004      	adds	r0, #4
 800dbe6:	e7d8      	b.n	800db9a <__kernel_rem_pio2f+0x5e>
 800dbe8:	a908      	add	r1, sp, #32
 800dbea:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dbee:	9104      	str	r1, [sp, #16]
 800dbf0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800dbf2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800de30 <__kernel_rem_pio2f+0x2f4>
 800dbf6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800de2c <__kernel_rem_pio2f+0x2f0>
 800dbfa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dbfe:	9203      	str	r2, [sp, #12]
 800dc00:	4654      	mov	r4, sl
 800dc02:	00a2      	lsls	r2, r4, #2
 800dc04:	9205      	str	r2, [sp, #20]
 800dc06:	aa58      	add	r2, sp, #352	@ 0x160
 800dc08:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800dc0c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800dc10:	a944      	add	r1, sp, #272	@ 0x110
 800dc12:	aa08      	add	r2, sp, #32
 800dc14:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800dc18:	4694      	mov	ip, r2
 800dc1a:	4626      	mov	r6, r4
 800dc1c:	2e00      	cmp	r6, #0
 800dc1e:	dc4c      	bgt.n	800dcba <__kernel_rem_pio2f+0x17e>
 800dc20:	4628      	mov	r0, r5
 800dc22:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dc26:	f7ff ff23 	bl	800da70 <scalbnf>
 800dc2a:	eeb0 8a40 	vmov.f32	s16, s0
 800dc2e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800dc32:	ee28 0a00 	vmul.f32	s0, s16, s0
 800dc36:	f000 f9e9 	bl	800e00c <floorf>
 800dc3a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800dc3e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800dc42:	2d00      	cmp	r5, #0
 800dc44:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc48:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800dc4c:	ee17 9a90 	vmov	r9, s15
 800dc50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc54:	ee38 8a67 	vsub.f32	s16, s16, s15
 800dc58:	dd41      	ble.n	800dcde <__kernel_rem_pio2f+0x1a2>
 800dc5a:	f104 3cff 	add.w	ip, r4, #4294967295
 800dc5e:	a908      	add	r1, sp, #32
 800dc60:	f1c5 0e08 	rsb	lr, r5, #8
 800dc64:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800dc68:	fa46 f00e 	asr.w	r0, r6, lr
 800dc6c:	4481      	add	r9, r0
 800dc6e:	fa00 f00e 	lsl.w	r0, r0, lr
 800dc72:	1a36      	subs	r6, r6, r0
 800dc74:	f1c5 0007 	rsb	r0, r5, #7
 800dc78:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800dc7c:	4106      	asrs	r6, r0
 800dc7e:	2e00      	cmp	r6, #0
 800dc80:	dd3c      	ble.n	800dcfc <__kernel_rem_pio2f+0x1c0>
 800dc82:	f04f 0e00 	mov.w	lr, #0
 800dc86:	f109 0901 	add.w	r9, r9, #1
 800dc8a:	4670      	mov	r0, lr
 800dc8c:	4574      	cmp	r4, lr
 800dc8e:	dc68      	bgt.n	800dd62 <__kernel_rem_pio2f+0x226>
 800dc90:	2d00      	cmp	r5, #0
 800dc92:	dd03      	ble.n	800dc9c <__kernel_rem_pio2f+0x160>
 800dc94:	2d01      	cmp	r5, #1
 800dc96:	d074      	beq.n	800dd82 <__kernel_rem_pio2f+0x246>
 800dc98:	2d02      	cmp	r5, #2
 800dc9a:	d07d      	beq.n	800dd98 <__kernel_rem_pio2f+0x25c>
 800dc9c:	2e02      	cmp	r6, #2
 800dc9e:	d12d      	bne.n	800dcfc <__kernel_rem_pio2f+0x1c0>
 800dca0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dca4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800dca8:	b340      	cbz	r0, 800dcfc <__kernel_rem_pio2f+0x1c0>
 800dcaa:	4628      	mov	r0, r5
 800dcac:	9306      	str	r3, [sp, #24]
 800dcae:	f7ff fedf 	bl	800da70 <scalbnf>
 800dcb2:	9b06      	ldr	r3, [sp, #24]
 800dcb4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800dcb8:	e020      	b.n	800dcfc <__kernel_rem_pio2f+0x1c0>
 800dcba:	ee60 7a28 	vmul.f32	s15, s0, s17
 800dcbe:	3e01      	subs	r6, #1
 800dcc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcc8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800dccc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dcd0:	ecac 0a01 	vstmia	ip!, {s0}
 800dcd4:	ed30 0a01 	vldmdb	r0!, {s0}
 800dcd8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800dcdc:	e79e      	b.n	800dc1c <__kernel_rem_pio2f+0xe0>
 800dcde:	d105      	bne.n	800dcec <__kernel_rem_pio2f+0x1b0>
 800dce0:	1e60      	subs	r0, r4, #1
 800dce2:	a908      	add	r1, sp, #32
 800dce4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800dce8:	11f6      	asrs	r6, r6, #7
 800dcea:	e7c8      	b.n	800dc7e <__kernel_rem_pio2f+0x142>
 800dcec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800dcf0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800dcf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcf8:	da31      	bge.n	800dd5e <__kernel_rem_pio2f+0x222>
 800dcfa:	2600      	movs	r6, #0
 800dcfc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800dd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd04:	f040 8098 	bne.w	800de38 <__kernel_rem_pio2f+0x2fc>
 800dd08:	1e60      	subs	r0, r4, #1
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	4550      	cmp	r0, sl
 800dd0e:	da4b      	bge.n	800dda8 <__kernel_rem_pio2f+0x26c>
 800dd10:	2a00      	cmp	r2, #0
 800dd12:	d065      	beq.n	800dde0 <__kernel_rem_pio2f+0x2a4>
 800dd14:	3c01      	subs	r4, #1
 800dd16:	ab08      	add	r3, sp, #32
 800dd18:	3d08      	subs	r5, #8
 800dd1a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d0f8      	beq.n	800dd14 <__kernel_rem_pio2f+0x1d8>
 800dd22:	4628      	mov	r0, r5
 800dd24:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800dd28:	f7ff fea2 	bl	800da70 <scalbnf>
 800dd2c:	1c63      	adds	r3, r4, #1
 800dd2e:	aa44      	add	r2, sp, #272	@ 0x110
 800dd30:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800de30 <__kernel_rem_pio2f+0x2f4>
 800dd34:	0099      	lsls	r1, r3, #2
 800dd36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dd3a:	4623      	mov	r3, r4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	f280 80a9 	bge.w	800de94 <__kernel_rem_pio2f+0x358>
 800dd42:	4623      	mov	r3, r4
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f2c0 80c7 	blt.w	800ded8 <__kernel_rem_pio2f+0x39c>
 800dd4a:	aa44      	add	r2, sp, #272	@ 0x110
 800dd4c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800dd50:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800de28 <__kernel_rem_pio2f+0x2ec>
 800dd54:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	1ae2      	subs	r2, r4, r3
 800dd5c:	e0b1      	b.n	800dec2 <__kernel_rem_pio2f+0x386>
 800dd5e:	2602      	movs	r6, #2
 800dd60:	e78f      	b.n	800dc82 <__kernel_rem_pio2f+0x146>
 800dd62:	f852 1b04 	ldr.w	r1, [r2], #4
 800dd66:	b948      	cbnz	r0, 800dd7c <__kernel_rem_pio2f+0x240>
 800dd68:	b121      	cbz	r1, 800dd74 <__kernel_rem_pio2f+0x238>
 800dd6a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800dd6e:	f842 1c04 	str.w	r1, [r2, #-4]
 800dd72:	2101      	movs	r1, #1
 800dd74:	f10e 0e01 	add.w	lr, lr, #1
 800dd78:	4608      	mov	r0, r1
 800dd7a:	e787      	b.n	800dc8c <__kernel_rem_pio2f+0x150>
 800dd7c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800dd80:	e7f5      	b.n	800dd6e <__kernel_rem_pio2f+0x232>
 800dd82:	f104 3cff 	add.w	ip, r4, #4294967295
 800dd86:	aa08      	add	r2, sp, #32
 800dd88:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dd8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dd90:	a908      	add	r1, sp, #32
 800dd92:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800dd96:	e781      	b.n	800dc9c <__kernel_rem_pio2f+0x160>
 800dd98:	f104 3cff 	add.w	ip, r4, #4294967295
 800dd9c:	aa08      	add	r2, sp, #32
 800dd9e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800dda2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800dda6:	e7f3      	b.n	800dd90 <__kernel_rem_pio2f+0x254>
 800dda8:	a908      	add	r1, sp, #32
 800ddaa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ddae:	3801      	subs	r0, #1
 800ddb0:	430a      	orrs	r2, r1
 800ddb2:	e7ab      	b.n	800dd0c <__kernel_rem_pio2f+0x1d0>
 800ddb4:	3201      	adds	r2, #1
 800ddb6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ddba:	2e00      	cmp	r6, #0
 800ddbc:	d0fa      	beq.n	800ddb4 <__kernel_rem_pio2f+0x278>
 800ddbe:	9905      	ldr	r1, [sp, #20]
 800ddc0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ddc4:	eb0d 0001 	add.w	r0, sp, r1
 800ddc8:	18e6      	adds	r6, r4, r3
 800ddca:	a91c      	add	r1, sp, #112	@ 0x70
 800ddcc:	f104 0c01 	add.w	ip, r4, #1
 800ddd0:	384c      	subs	r0, #76	@ 0x4c
 800ddd2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ddd6:	4422      	add	r2, r4
 800ddd8:	4562      	cmp	r2, ip
 800ddda:	da04      	bge.n	800dde6 <__kernel_rem_pio2f+0x2aa>
 800dddc:	4614      	mov	r4, r2
 800ddde:	e710      	b.n	800dc02 <__kernel_rem_pio2f+0xc6>
 800dde0:	9804      	ldr	r0, [sp, #16]
 800dde2:	2201      	movs	r2, #1
 800dde4:	e7e7      	b.n	800ddb6 <__kernel_rem_pio2f+0x27a>
 800dde6:	9903      	ldr	r1, [sp, #12]
 800dde8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ddec:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ddf0:	9105      	str	r1, [sp, #20]
 800ddf2:	ee07 1a90 	vmov	s15, r1
 800ddf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddfa:	2400      	movs	r4, #0
 800ddfc:	ece6 7a01 	vstmia	r6!, {s15}
 800de00:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800de04:	46b1      	mov	r9, r6
 800de06:	455c      	cmp	r4, fp
 800de08:	dd04      	ble.n	800de14 <__kernel_rem_pio2f+0x2d8>
 800de0a:	ece0 7a01 	vstmia	r0!, {s15}
 800de0e:	f10c 0c01 	add.w	ip, ip, #1
 800de12:	e7e1      	b.n	800ddd8 <__kernel_rem_pio2f+0x29c>
 800de14:	ecfe 6a01 	vldmia	lr!, {s13}
 800de18:	ed39 7a01 	vldmdb	r9!, {s14}
 800de1c:	3401      	adds	r4, #1
 800de1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800de22:	e7f0      	b.n	800de06 <__kernel_rem_pio2f+0x2ca>
 800de24:	0800e4f0 	.word	0x0800e4f0
 800de28:	0800e4c4 	.word	0x0800e4c4
 800de2c:	43800000 	.word	0x43800000
 800de30:	3b800000 	.word	0x3b800000
 800de34:	00000000 	.word	0x00000000
 800de38:	9b02      	ldr	r3, [sp, #8]
 800de3a:	eeb0 0a48 	vmov.f32	s0, s16
 800de3e:	eba3 0008 	sub.w	r0, r3, r8
 800de42:	f7ff fe15 	bl	800da70 <scalbnf>
 800de46:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800de2c <__kernel_rem_pio2f+0x2f0>
 800de4a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800de4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de52:	db19      	blt.n	800de88 <__kernel_rem_pio2f+0x34c>
 800de54:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800de30 <__kernel_rem_pio2f+0x2f4>
 800de58:	ee60 7a27 	vmul.f32	s15, s0, s15
 800de5c:	aa08      	add	r2, sp, #32
 800de5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de62:	3508      	adds	r5, #8
 800de64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de68:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800de6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800de70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800de74:	ee10 3a10 	vmov	r3, s0
 800de78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800de7c:	ee17 3a90 	vmov	r3, s15
 800de80:	3401      	adds	r4, #1
 800de82:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800de86:	e74c      	b.n	800dd22 <__kernel_rem_pio2f+0x1e6>
 800de88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800de8c:	aa08      	add	r2, sp, #32
 800de8e:	ee10 3a10 	vmov	r3, s0
 800de92:	e7f6      	b.n	800de82 <__kernel_rem_pio2f+0x346>
 800de94:	a808      	add	r0, sp, #32
 800de96:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800de9a:	9001      	str	r0, [sp, #4]
 800de9c:	ee07 0a90 	vmov	s15, r0
 800dea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dea4:	3b01      	subs	r3, #1
 800dea6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800deaa:	ee20 0a07 	vmul.f32	s0, s0, s14
 800deae:	ed62 7a01 	vstmdb	r2!, {s15}
 800deb2:	e743      	b.n	800dd3c <__kernel_rem_pio2f+0x200>
 800deb4:	ecfc 6a01 	vldmia	ip!, {s13}
 800deb8:	ecb5 7a01 	vldmia	r5!, {s14}
 800debc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dec0:	3001      	adds	r0, #1
 800dec2:	4550      	cmp	r0, sl
 800dec4:	dc01      	bgt.n	800deca <__kernel_rem_pio2f+0x38e>
 800dec6:	4290      	cmp	r0, r2
 800dec8:	ddf4      	ble.n	800deb4 <__kernel_rem_pio2f+0x378>
 800deca:	a858      	add	r0, sp, #352	@ 0x160
 800decc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ded0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ded4:	3b01      	subs	r3, #1
 800ded6:	e735      	b.n	800dd44 <__kernel_rem_pio2f+0x208>
 800ded8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800deda:	2b02      	cmp	r3, #2
 800dedc:	dc09      	bgt.n	800def2 <__kernel_rem_pio2f+0x3b6>
 800dede:	2b00      	cmp	r3, #0
 800dee0:	dc27      	bgt.n	800df32 <__kernel_rem_pio2f+0x3f6>
 800dee2:	d040      	beq.n	800df66 <__kernel_rem_pio2f+0x42a>
 800dee4:	f009 0007 	and.w	r0, r9, #7
 800dee8:	b059      	add	sp, #356	@ 0x164
 800deea:	ecbd 8b04 	vpop	{d8-d9}
 800deee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800def4:	2b03      	cmp	r3, #3
 800def6:	d1f5      	bne.n	800dee4 <__kernel_rem_pio2f+0x3a8>
 800def8:	aa30      	add	r2, sp, #192	@ 0xc0
 800defa:	1f0b      	subs	r3, r1, #4
 800defc:	4413      	add	r3, r2
 800defe:	461a      	mov	r2, r3
 800df00:	4620      	mov	r0, r4
 800df02:	2800      	cmp	r0, #0
 800df04:	dc50      	bgt.n	800dfa8 <__kernel_rem_pio2f+0x46c>
 800df06:	4622      	mov	r2, r4
 800df08:	2a01      	cmp	r2, #1
 800df0a:	dc5d      	bgt.n	800dfc8 <__kernel_rem_pio2f+0x48c>
 800df0c:	ab30      	add	r3, sp, #192	@ 0xc0
 800df0e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800df12:	440b      	add	r3, r1
 800df14:	2c01      	cmp	r4, #1
 800df16:	dc67      	bgt.n	800dfe8 <__kernel_rem_pio2f+0x4ac>
 800df18:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800df1c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800df20:	2e00      	cmp	r6, #0
 800df22:	d167      	bne.n	800dff4 <__kernel_rem_pio2f+0x4b8>
 800df24:	edc7 6a00 	vstr	s13, [r7]
 800df28:	ed87 7a01 	vstr	s14, [r7, #4]
 800df2c:	edc7 7a02 	vstr	s15, [r7, #8]
 800df30:	e7d8      	b.n	800dee4 <__kernel_rem_pio2f+0x3a8>
 800df32:	ab30      	add	r3, sp, #192	@ 0xc0
 800df34:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800df38:	440b      	add	r3, r1
 800df3a:	4622      	mov	r2, r4
 800df3c:	2a00      	cmp	r2, #0
 800df3e:	da24      	bge.n	800df8a <__kernel_rem_pio2f+0x44e>
 800df40:	b34e      	cbz	r6, 800df96 <__kernel_rem_pio2f+0x45a>
 800df42:	eef1 7a47 	vneg.f32	s15, s14
 800df46:	edc7 7a00 	vstr	s15, [r7]
 800df4a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800df4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800df52:	aa31      	add	r2, sp, #196	@ 0xc4
 800df54:	2301      	movs	r3, #1
 800df56:	429c      	cmp	r4, r3
 800df58:	da20      	bge.n	800df9c <__kernel_rem_pio2f+0x460>
 800df5a:	b10e      	cbz	r6, 800df60 <__kernel_rem_pio2f+0x424>
 800df5c:	eef1 7a67 	vneg.f32	s15, s15
 800df60:	edc7 7a01 	vstr	s15, [r7, #4]
 800df64:	e7be      	b.n	800dee4 <__kernel_rem_pio2f+0x3a8>
 800df66:	ab30      	add	r3, sp, #192	@ 0xc0
 800df68:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800de34 <__kernel_rem_pio2f+0x2f8>
 800df6c:	440b      	add	r3, r1
 800df6e:	2c00      	cmp	r4, #0
 800df70:	da05      	bge.n	800df7e <__kernel_rem_pio2f+0x442>
 800df72:	b10e      	cbz	r6, 800df78 <__kernel_rem_pio2f+0x43c>
 800df74:	eef1 7a67 	vneg.f32	s15, s15
 800df78:	edc7 7a00 	vstr	s15, [r7]
 800df7c:	e7b2      	b.n	800dee4 <__kernel_rem_pio2f+0x3a8>
 800df7e:	ed33 7a01 	vldmdb	r3!, {s14}
 800df82:	3c01      	subs	r4, #1
 800df84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800df88:	e7f1      	b.n	800df6e <__kernel_rem_pio2f+0x432>
 800df8a:	ed73 7a01 	vldmdb	r3!, {s15}
 800df8e:	3a01      	subs	r2, #1
 800df90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df94:	e7d2      	b.n	800df3c <__kernel_rem_pio2f+0x400>
 800df96:	eef0 7a47 	vmov.f32	s15, s14
 800df9a:	e7d4      	b.n	800df46 <__kernel_rem_pio2f+0x40a>
 800df9c:	ecb2 7a01 	vldmia	r2!, {s14}
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dfa6:	e7d6      	b.n	800df56 <__kernel_rem_pio2f+0x41a>
 800dfa8:	ed72 7a01 	vldmdb	r2!, {s15}
 800dfac:	edd2 6a01 	vldr	s13, [r2, #4]
 800dfb0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dfb4:	3801      	subs	r0, #1
 800dfb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfba:	ed82 7a00 	vstr	s14, [r2]
 800dfbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfc2:	edc2 7a01 	vstr	s15, [r2, #4]
 800dfc6:	e79c      	b.n	800df02 <__kernel_rem_pio2f+0x3c6>
 800dfc8:	ed73 7a01 	vldmdb	r3!, {s15}
 800dfcc:	edd3 6a01 	vldr	s13, [r3, #4]
 800dfd0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dfd4:	3a01      	subs	r2, #1
 800dfd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dfda:	ed83 7a00 	vstr	s14, [r3]
 800dfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfe2:	edc3 7a01 	vstr	s15, [r3, #4]
 800dfe6:	e78f      	b.n	800df08 <__kernel_rem_pio2f+0x3cc>
 800dfe8:	ed33 7a01 	vldmdb	r3!, {s14}
 800dfec:	3c01      	subs	r4, #1
 800dfee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dff2:	e78f      	b.n	800df14 <__kernel_rem_pio2f+0x3d8>
 800dff4:	eef1 6a66 	vneg.f32	s13, s13
 800dff8:	eeb1 7a47 	vneg.f32	s14, s14
 800dffc:	edc7 6a00 	vstr	s13, [r7]
 800e000:	ed87 7a01 	vstr	s14, [r7, #4]
 800e004:	eef1 7a67 	vneg.f32	s15, s15
 800e008:	e790      	b.n	800df2c <__kernel_rem_pio2f+0x3f0>
 800e00a:	bf00      	nop

0800e00c <floorf>:
 800e00c:	ee10 3a10 	vmov	r3, s0
 800e010:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e014:	3a7f      	subs	r2, #127	@ 0x7f
 800e016:	2a16      	cmp	r2, #22
 800e018:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e01c:	dc2b      	bgt.n	800e076 <floorf+0x6a>
 800e01e:	2a00      	cmp	r2, #0
 800e020:	da12      	bge.n	800e048 <floorf+0x3c>
 800e022:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800e088 <floorf+0x7c>
 800e026:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e02a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e02e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e032:	dd06      	ble.n	800e042 <floorf+0x36>
 800e034:	2b00      	cmp	r3, #0
 800e036:	da24      	bge.n	800e082 <floorf+0x76>
 800e038:	2900      	cmp	r1, #0
 800e03a:	4b14      	ldr	r3, [pc, #80]	@ (800e08c <floorf+0x80>)
 800e03c:	bf08      	it	eq
 800e03e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800e042:	ee00 3a10 	vmov	s0, r3
 800e046:	4770      	bx	lr
 800e048:	4911      	ldr	r1, [pc, #68]	@ (800e090 <floorf+0x84>)
 800e04a:	4111      	asrs	r1, r2
 800e04c:	420b      	tst	r3, r1
 800e04e:	d0fa      	beq.n	800e046 <floorf+0x3a>
 800e050:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800e088 <floorf+0x7c>
 800e054:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e058:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e060:	ddef      	ble.n	800e042 <floorf+0x36>
 800e062:	2b00      	cmp	r3, #0
 800e064:	bfbe      	ittt	lt
 800e066:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800e06a:	fa40 f202 	asrlt.w	r2, r0, r2
 800e06e:	189b      	addlt	r3, r3, r2
 800e070:	ea23 0301 	bic.w	r3, r3, r1
 800e074:	e7e5      	b.n	800e042 <floorf+0x36>
 800e076:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800e07a:	d3e4      	bcc.n	800e046 <floorf+0x3a>
 800e07c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e080:	4770      	bx	lr
 800e082:	2300      	movs	r3, #0
 800e084:	e7dd      	b.n	800e042 <floorf+0x36>
 800e086:	bf00      	nop
 800e088:	7149f2ca 	.word	0x7149f2ca
 800e08c:	bf800000 	.word	0xbf800000
 800e090:	007fffff 	.word	0x007fffff

0800e094 <_init>:
 800e094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e096:	bf00      	nop
 800e098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e09a:	bc08      	pop	{r3}
 800e09c:	469e      	mov	lr, r3
 800e09e:	4770      	bx	lr

0800e0a0 <_fini>:
 800e0a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0a2:	bf00      	nop
 800e0a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e0a6:	bc08      	pop	{r3}
 800e0a8:	469e      	mov	lr, r3
 800e0aa:	4770      	bx	lr
