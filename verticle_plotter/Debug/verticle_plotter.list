
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800bcbc  0800bcbc  0000ccbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c10c  0800c10c  0000e1c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c10c  0800c10c  0000d10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c114  0800c114  0000e1c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c114  0800c114  0000d114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c118  0800c118  0000d118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  0800c11c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a54  200001c0  0800c2dc  0000e1c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c14  0800c2dc  0000ec14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028e1b  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dbb  00000000  00000000  0003700b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0003bdc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a3  00000000  00000000  0003d860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cb9b  00000000  00000000  0003ed03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027d77  00000000  00000000  0006b89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001189d9  00000000  00000000  00093615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001abfee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007648  00000000  00000000  001ac034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b367c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001c0 	.word	0x200001c0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bca4 	.word	0x0800bca4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001c4 	.word	0x200001c4
 8000214:	0800bca4 	.word	0x0800bca4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 f9cd 	bl	80051d8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fab6 	bl	80043bc <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_ComputeCurrent>:

float ADC_DMA_ComputeCurrent(ADC_DMA *adc_dma, uint8_t channel_index, float offset_voltage) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    // Get raw voltage
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a07 	vstr	s0, [r7, #28]

    float raw_voltage = mapf(value, 0, adc_dma->adc_resolution, 0, adc_dma->adc_vref);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	ed93 7a04 	vldr	s14, [r3, #16]
 8000f0a:	eeb0 2a47 	vmov.f32	s4, s14
 8000f0e:	eddf 1a1e 	vldr	s3, [pc, #120]	@ 8000f88 <ADC_DMA_ComputeCurrent+0xa8>
 8000f12:	eeb0 1a67 	vmov.f32	s2, s15
 8000f16:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8000f88 <ADC_DMA_ComputeCurrent+0xa8>
 8000f1a:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f1e:	f000 faed 	bl	80014fc <mapf>
 8000f22:	ed87 0a06 	vstr	s0, [r7, #24]

    // Calculate offset voltage
    float voltage = raw_voltage - offset_voltage;
 8000f26:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f32:	edc7 7a05 	vstr	s15, [r7, #20]

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff fad2 	bl	80004e0 <__aeabi_f2d>
 8000f3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8000f78 <ADC_DMA_ComputeCurrent+0x98>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	f7ff fb25 	bl	8000590 <__aeabi_dmul>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8000f80 <ADC_DMA_ComputeCurrent+0xa0>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff f964 	bl	8000220 <__aeabi_dsub>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fd48 	bl	80009f4 <__aeabi_d2f>
 8000f64:	4603      	mov	r3, r0
 8000f66:	ee07 3a90 	vmov	s15, r3
}
 8000f6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	f3af 8000 	nop.w
 8000f78:	3624fc1c 	.word	0x3624fc1c
 8000f7c:	402e5bd3 	.word	0x402e5bd3
 8000f80:	2e66d7da 	.word	0x2e66d7da
 8000f84:	4038de10 	.word	0x4038de10
 8000f88:	00000000 	.word	0x00000000

08000f8c <ADC_DMA_GetJoystick>:

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b086      	sub	sp, #24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	460b      	mov	r3, r1
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f9a:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff ff59 	bl	8000e58 <ADC_DMA_GetValue>
 8000fa6:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution/2, -joydata, joydata);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fb0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	eef1 7a67 	vneg.f32	s15, s15
 8000fc0:	ed97 2a01 	vldr	s4, [r7, #4]
 8000fc4:	eef0 1a67 	vmov.f32	s3, s15
 8000fc8:	eeb0 1a47 	vmov.f32	s2, s14
 8000fcc:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000fe8 <ADC_DMA_GetJoystick+0x5c>
 8000fd0:	ed97 0a05 	vldr	s0, [r7, #20]
 8000fd4:	f000 fa92 	bl	80014fc <mapf>
 8000fd8:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	00000000 	.word	0x00000000

08000fec <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6178      	str	r0, [r7, #20]
 8000ff4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ff8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ffc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001000:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	619a      	str	r2, [r3, #24]

}
 8001034:	bf00      	nop
 8001036:	371c      	adds	r7, #28
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4613      	mov	r3, r2
 800104e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	68ba      	ldr	r2, [r7, #8]
 8001054:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	88fa      	ldrh	r2, [r7, #6]
 800105a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	3328      	adds	r3, #40	@ 0x28
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fb29 	bl	80016bc <PWM_init>
	mdxx->GPIOx = GPIOx;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	8b3a      	ldrh	r2, [r7, #24]
 8001074:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	ed87 0a02 	vstr	s0, [r7, #8]
 8001094:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d15f      	bne.n	8001162 <MDXX_set_range+0xda>
		if (duty == 0) {
 80010a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	d115      	bne.n	80010dc <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3310      	adds	r3, #16
 80010b4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001234 <MDXX_set_range+0x1ac>
 80010b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fb1f 	bl	8001700 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3328      	adds	r3, #40	@ 0x28
 80010c6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001234 <MDXX_set_range+0x1ac>
 80010ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fb16 	bl	8001700 <PWM_write_range>
			mdxx->cmd = 0;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80010da:	e0a6      	b.n	800122a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e8:	dd1a      	ble.n	8001120 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3310      	adds	r3, #16
 80010ee:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001234 <MDXX_set_range+0x1ac>
 80010f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 fb02 	bl	8001700 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	3328      	adds	r3, #40	@ 0x28
 8001100:	edd7 0a01 	vldr	s1, [r7, #4]
 8001104:	ed97 0a02 	vldr	s0, [r7, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f000 faf9 	bl	8001700 <PWM_write_range>
			mdxx->cmd = duty;
 800110e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001116:	ee17 2a90 	vmov	r2, s15
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800111e:	e084      	b.n	800122a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3310      	adds	r3, #16
 8001124:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001238 <MDXX_set_range+0x1b0>
 8001128:	ed97 0a02 	vldr	s0, [r7, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fae7 	bl	8001700 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3328      	adds	r3, #40	@ 0x28
 8001136:	edd7 7a01 	vldr	s15, [r7, #4]
 800113a:	eef0 7ae7 	vabs.f32	s15, s15
 800113e:	eef0 0a67 	vmov.f32	s1, s15
 8001142:	ed97 0a02 	vldr	s0, [r7, #8]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 fada 	bl	8001700 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800114c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001150:	eef0 7ae7 	vabs.f32	s15, s15
 8001154:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001158:	ee17 2a90 	vmov	r2, s15
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001160:	e063      	b.n	800122a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001168:	2b01      	cmp	r3, #1
 800116a:	d15e      	bne.n	800122a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 800116c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001170:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d115      	bne.n	80011a6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	f004 ff6c 	bl	8006064 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	3328      	adds	r3, #40	@ 0x28
 8001190:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001234 <MDXX_set_range+0x1ac>
 8001194:	ed97 0a02 	vldr	s0, [r7, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	f000 fab1 	bl	8001700 <PWM_write_range>
			mdxx->cmd = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011a4:	e041      	b.n	800122a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	dd1a      	ble.n	80011ea <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	f004 ff4f 	bl	8006064 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	3328      	adds	r3, #40	@ 0x28
 80011ca:	edd7 0a01 	vldr	s1, [r7, #4]
 80011ce:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 fa94 	bl	8001700 <PWM_write_range>
			mdxx->cmd = duty;
 80011d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e0:	ee17 2a90 	vmov	r2, s15
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011e8:	e01f      	b.n	800122a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011f4:	2201      	movs	r2, #1
 80011f6:	4619      	mov	r1, r3
 80011f8:	f004 ff34 	bl	8006064 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	3328      	adds	r3, #40	@ 0x28
 8001200:	edd7 7a01 	vldr	s15, [r7, #4]
 8001204:	eef0 7ae7 	vabs.f32	s15, s15
 8001208:	eef0 0a67 	vmov.f32	s1, s15
 800120c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa75 	bl	8001700 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001216:	edd7 7a01 	vldr	s15, [r7, #4]
 800121a:	eef0 7ae7 	vabs.f32	s15, s15
 800121e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001222:	ee17 2a90 	vmov	r2, s15
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800122a:	bf00      	nop
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	00000000 	.word	0x00000000
 8001238:	42c80000 	.word	0x42c80000

0800123c <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	605a      	str	r2, [r3, #4]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	601a      	str	r2, [r3, #0]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	ed2d 8b02 	vpush	{d8}
 80012c2:	b08a      	sub	sp, #40	@ 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	460b      	mov	r3, r1
 80012ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80012ce:	edc7 0a00 	vstr	s1, [r7]
 80012d2:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	b29b      	uxth	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <FIR_init+0x2a>
        numTaps += 1;
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	3301      	adds	r3, #1
 80012e4:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	897a      	ldrh	r2, [r7, #10]
 80012ea:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80012f2:	897b      	ldrh	r3, [r7, #10]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f009 fe44 	bl	800af84 <malloc>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001304:	897b      	ldrh	r3, [r7, #10]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4618      	mov	r0, r3
 800130a:	f009 fe3b 	bl	800af84 <malloc>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 80e0 	beq.w	80014e0 <FIR_init+0x224>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 80db 	beq.w	80014e0 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800132a:	2300      	movs	r3, #0
 800132c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800132e:	e00a      	b.n	8001346 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001340:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001342:	3301      	adds	r3, #1
 8001344:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001346:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001348:	897b      	ldrh	r3, [r7, #10]
 800134a:	429a      	cmp	r2, r3
 800134c:	d3f0      	bcc.n	8001330 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800134e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001352:	ed97 7a00 	vldr	s14, [r7]
 8001356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135a:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800135e:	897b      	ldrh	r3, [r7, #10]
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001366:	2300      	movs	r3, #0
 8001368:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800136a:	e077      	b.n	800145c <FIR_init+0x1a0>
            if (i == half_taps) {
 800136c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001370:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001374:	429a      	cmp	r2, r3
 8001376:	d10c      	bne.n	8001392 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	edd7 7a06 	vldr	s15, [r7, #24]
 8001388:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800138c:	edc3 7a00 	vstr	s15, [r3]
 8001390:	e02c      	b.n	80013ec <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001394:	8afb      	ldrh	r3, [r7, #22]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	b29b      	uxth	r3, r3
 800139a:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 800139c:	edd7 7a06 	vldr	s15, [r7, #24]
 80013a0:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80014ec <FIR_init+0x230>
 80013a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013b8:	eeb0 0a67 	vmov.f32	s0, s15
 80013bc:	f009 ff3e 	bl	800b23c <sinf>
 80013c0:	eef0 6a40 	vmov.f32	s13, s0
 80013c4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80014f0 <FIR_init+0x234>
 80013d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e8:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4413      	add	r3, r2
 80013f8:	ed93 8a00 	vldr	s16, [r3]
 80013fc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001400:	ee07 3a90 	vmov	s15, r3
 8001404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001408:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80014ec <FIR_init+0x230>
 800140c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	3b01      	subs	r3, #1
 8001414:	ee07 3a90 	vmov	s15, r3
 8001418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001420:	eeb0 0a66 	vmov.f32	s0, s13
 8001424:	f009 fec6 	bl	800b1b4 <cosf>
 8001428:	eef0 7a40 	vmov.f32	s15, s0
 800142c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80014f4 <FIR_init+0x238>
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80014f8 <FIR_init+0x23c>
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	ee68 7a27 	vmul.f32	s15, s16, s15
 800144c:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001450:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001454:	b29b      	uxth	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b29b      	uxth	r3, r3
 800145a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800145c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	429a      	cmp	r2, r3
 8001464:	db82      	blt.n	800136c <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	83fb      	strh	r3, [r7, #30]
 8001470:	e00f      	b.n	8001492 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	8bfb      	ldrh	r3, [r7, #30]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	edd3 7a00 	vldr	s15, [r3]
 8001480:	ed97 7a08 	vldr	s14, [r7, #32]
 8001484:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001488:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 800148c:	8bfb      	ldrh	r3, [r7, #30]
 800148e:	3301      	adds	r3, #1
 8001490:	83fb      	strh	r3, [r7, #30]
 8001492:	8bfa      	ldrh	r2, [r7, #30]
 8001494:	897b      	ldrh	r3, [r7, #10]
 8001496:	429a      	cmp	r2, r3
 8001498:	d3eb      	bcc.n	8001472 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 800149a:	edd7 7a08 	vldr	s15, [r7, #32]
 800149e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a6:	d01b      	beq.n	80014e0 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	83bb      	strh	r3, [r7, #28]
 80014ac:	e014      	b.n	80014d8 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	8bbb      	ldrh	r3, [r7, #28]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	edd3 6a00 	vldr	s13, [r3]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	8bbb      	ldrh	r3, [r7, #28]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ce:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80014d2:	8bbb      	ldrh	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	83bb      	strh	r3, [r7, #28]
 80014d8:	8bba      	ldrh	r2, [r7, #28]
 80014da:	897b      	ldrh	r3, [r7, #10]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d3e6      	bcc.n	80014ae <FIR_init+0x1f2>
            }
        }
    }
}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	ecbd 8b02 	vpop	{d8}
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40c90fdb 	.word	0x40c90fdb
 80014f0:	40490fdb 	.word	0x40490fdb
 80014f4:	3eeb851f 	.word	0x3eeb851f
 80014f8:	3f0a3d71 	.word	0x3f0a3d71

080014fc <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	ed87 0a05 	vstr	s0, [r7, #20]
 8001506:	edc7 0a04 	vstr	s1, [r7, #16]
 800150a:	ed87 1a03 	vstr	s2, [r7, #12]
 800150e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001512:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001516:	ed97 7a05 	vldr	s14, [r7, #20]
 800151a:	edd7 7a04 	vldr	s15, [r7, #16]
 800151e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001522:	ed97 7a03 	vldr	s14, [r7, #12]
 8001526:	edd7 7a04 	vldr	s15, [r7, #16]
 800152a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800152e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001532:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001536:	ed97 7a01 	vldr	s14, [r7, #4]
 800153a:	edd7 7a02 	vldr	s15, [r7, #8]
 800153e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001542:	edd7 7a07 	vldr	s15, [r7, #28]
 8001546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154a:	ed97 7a02 	vldr	s14, [r7, #8]
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	ee07 3a90 	vmov	s15, r3
}
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	3724      	adds	r7, #36	@ 0x24
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
	...

0800156c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001570:	4b0d      	ldr	r3, [pc, #52]	@ (80015a8 <modbus_1t5_Timeout+0x3c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2201      	movs	r2, #1
 8001576:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <modbus_1t5_Timeout+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001584:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <modbus_1t5_Timeout+0x3c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	691b      	ldr	r3, [r3, #16]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <modbus_1t5_Timeout+0x3c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	200001dc 	.word	0x200001dc

080015ac <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015b4:	4b04      	ldr	r3, [pc, #16]	@ (80015c8 <modbus_3t5_Timeout+0x1c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2201      	movs	r2, #1
 80015ba:	755a      	strb	r2, [r3, #21]

}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	200001dc 	.word	0x200001dc

080015cc <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f008 fbf9 	bl	8009dcc <HAL_UART_GetError>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d101      	bne.n	80015e4 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80015e0:	f7ff ffc4 	bl	800156c <modbus_1t5_Timeout>

	}
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
 80015f8:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80015fa:	4a2d      	ldr	r2, [pc, #180]	@ (80016b0 <Modbus_init+0xc4>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001600:	4b2b      	ldr	r3, [pc, #172]	@ (80016b0 <Modbus_init+0xc4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	68ba      	ldr	r2, [r7, #8]
 8001606:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001608:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <Modbus_init+0xc4>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001610:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <Modbus_init+0xc4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001618:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <Modbus_init+0xc4>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	7e3a      	ldrb	r2, [r7, #24]
 800161e:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <Modbus_init+0xc4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69fa      	ldr	r2, [r7, #28]
 8001626:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <Modbus_init+0xc8>)
 800162e:	210e      	movs	r1, #14
 8001630:	4618      	mov	r0, r3
 8001632:	f006 fe79 	bl	8008328 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2110      	movs	r1, #16
 800163c:	4618      	mov	r0, r3
 800163e:	f008 fb6f 	bl	8009d20 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	4618      	mov	r0, r3
 8001648:	f008 fb86 	bl	8009d58 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4a19      	ldr	r2, [pc, #100]	@ (80016b8 <Modbus_init+0xcc>)
 8001652:	2104      	movs	r1, #4
 8001654:	4618      	mov	r0, r3
 8001656:	f007 feb7 	bl	80093c8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800165a:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <Modbus_init+0xc4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001660:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <Modbus_init+0xc4>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <Modbus_init+0xc4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 800166c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001670:	4413      	add	r3, r2
 8001672:	3302      	adds	r3, #2
 8001674:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001678:	4619      	mov	r1, r3
 800167a:	f007 ff5f 	bl	800953c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <Modbus_init+0xc4>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10c      	bne.n	80016a8 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800168e:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <Modbus_init+0xc4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	4618      	mov	r0, r3
 8001696:	f005 fe19 	bl	80072cc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800169a:	4b05      	ldr	r3, [pc, #20]	@ (80016b0 <Modbus_init+0xc4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f006 f872 	bl	800778c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200001dc 	.word	0x200001dc
 80016b4:	080015ad 	.word	0x080015ad
 80016b8:	080015cd 	.word	0x080015cd

080016bc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <PWM_init+0x40>)
 80016ce:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	88fa      	ldrh	r2, [r7, #6]
 80016da:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80016e2:	68b8      	ldr	r0, [r7, #8]
 80016e4:	f005 fd82 	bl	80071ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f005 fed3 	bl	8007498 <HAL_TIM_PWM_Start>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	0a21fe80 	.word	0x0a21fe80

08001700 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	ed87 0a02 	vstr	s0, [r7, #8]
 800170c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001710:	edd7 7a02 	vldr	s15, [r7, #8]
 8001714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171c:	d137      	bne.n	800178e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	889b      	ldrh	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d105      	bne.n	8001732 <PWM_write_range+0x32>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001730:	e0e1      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	2b04      	cmp	r3, #4
 8001738:	d105      	bne.n	8001746 <PWM_write_range+0x46>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	2300      	movs	r3, #0
 8001742:	6393      	str	r3, [r2, #56]	@ 0x38
 8001744:	e0d7      	b.n	80018f6 <PWM_write_range+0x1f6>
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d105      	bne.n	800175a <PWM_write_range+0x5a>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	2300      	movs	r3, #0
 8001756:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001758:	e0cd      	b.n	80018f6 <PWM_write_range+0x1f6>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	889b      	ldrh	r3, [r3, #4]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d105      	bne.n	800176e <PWM_write_range+0x6e>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	2300      	movs	r3, #0
 800176a:	6413      	str	r3, [r2, #64]	@ 0x40
 800176c:	e0c3      	b.n	80018f6 <PWM_write_range+0x1f6>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	889b      	ldrh	r3, [r3, #4]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d105      	bne.n	8001782 <PWM_write_range+0x82>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001780:	e0b9      	b.n	80018f6 <PWM_write_range+0x1f6>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800178c:	e0b3      	b.n	80018f6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	ee07 3a90 	vmov	s15, r3
 8001796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800179a:	ed97 7a02 	vldr	s14, [r7, #8]
 800179e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017a6:	ee17 2a90 	vmov	r2, s15
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80017b6:	33fe      	adds	r3, #254	@ 0xfe
 80017b8:	4a53      	ldr	r2, [pc, #332]	@ (8001908 <PWM_write_range+0x208>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	0bdb      	lsrs	r3, r3, #15
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	3b01      	subs	r3, #1
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	899b      	ldrh	r3, [r3, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80017ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fc:	ee17 3a90 	vmov	r3, s15
 8001800:	b29a      	uxth	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	89db      	ldrh	r3, [r3, #14]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fe56 	bl	80004bc <__aeabi_i2d>
 8001810:	4604      	mov	r4, r0
 8001812:	460d      	mov	r5, r1
 8001814:	edd7 7a01 	vldr	s15, [r7, #4]
 8001818:	eef0 7ae7 	vabs.f32	s15, s15
 800181c:	ee17 0a90 	vmov	r0, s15
 8001820:	f7fe fe5e 	bl	80004e0 <__aeabi_f2d>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4620      	mov	r0, r4
 800182a:	4629      	mov	r1, r5
 800182c:	f7fe feb0 	bl	8000590 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	a331      	add	r3, pc, #196	@ (adr r3, 8001900 <PWM_write_range+0x200>)
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	f7fe ffd1 	bl	80007e4 <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4610      	mov	r0, r2
 8001848:	4619      	mov	r1, r3
 800184a:	f7ff f8b3 	bl	80009b4 <__aeabi_d2uiz>
 800184e:	4603      	mov	r3, r0
 8001850:	b29b      	uxth	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	899a      	ldrh	r2, [r3, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	89da      	ldrh	r2, [r3, #14]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	89da      	ldrh	r2, [r3, #14]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	889b      	ldrh	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <PWM_write_range+0x190>
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	6952      	ldr	r2, [r2, #20]
 800188c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800188e:	e032      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	889b      	ldrh	r3, [r3, #4]
 8001894:	2b04      	cmp	r3, #4
 8001896:	d106      	bne.n	80018a6 <PWM_write_range+0x1a6>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018a4:	e027      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	889b      	ldrh	r3, [r3, #4]
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d106      	bne.n	80018bc <PWM_write_range+0x1bc>
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018ba:	e01c      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	889b      	ldrh	r3, [r3, #4]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d106      	bne.n	80018d2 <PWM_write_range+0x1d2>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018d0:	e011      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	2b10      	cmp	r3, #16
 80018d8:	d106      	bne.n	80018e8 <PWM_write_range+0x1e8>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80018e6:	e006      	b.n	80018f6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018f4:	e7ff      	b.n	80018f6 <PWM_write_range+0x1f6>
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bdb0      	pop	{r4, r5, r7, pc}
 80018fe:	bf00      	nop
 8001900:	00000000 	.word	0x00000000
 8001904:	40efffe0 	.word	0x40efffe0
 8001908:	80008001 	.word	0x80008001

0800190c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6178      	str	r0, [r7, #20]
 8001914:	6139      	str	r1, [r7, #16]
 8001916:	60fa      	str	r2, [r7, #12]
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	68ba      	ldr	r2, [r7, #8]
 800192e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	fb93 f2f2 	sdiv	r2, r3, r2
 800195e:	68f9      	ldr	r1, [r7, #12]
 8001960:	fb01 f202 	mul.w	r2, r1, r2
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2200      	movs	r2, #0
 8001972:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800199a:	213c      	movs	r1, #60	@ 0x3c
 800199c:	6938      	ldr	r0, [r7, #16]
 800199e:	f006 f837 	bl	8007a10 <HAL_TIM_Encoder_Start>
}
 80019a2:	bf00      	nop
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b08e      	sub	sp, #56	@ 0x38
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6178      	str	r0, [r7, #20]
 80019b2:	ed87 0a04 	vstr	s0, [r7, #16]
 80019b6:	edc7 0a03 	vstr	s1, [r7, #12]
 80019ba:	ed87 1a02 	vstr	s2, [r7, #8]
 80019be:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2200      	movs	r2, #0
 80019c6:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 80019e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f4:	eef0 7ae7 	vabs.f32	s15, s15
 80019f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80019fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a00:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a10:	d503      	bpl.n	8001a1a <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	22ff      	movs	r2, #255	@ 0xff
 8001a16:	741a      	strb	r2, [r3, #16]
 8001a18:	e002      	b.n	8001a20 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8001a20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001a24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d006      	beq.n	8001a3c <Trapezoidal_Generator+0x92>
 8001a2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3a:	d104      	bne.n	8001a46 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	f04f 0200 	mov.w	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
        return;
 8001a44:	e06f      	b.n	8001b26 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8001a46:	edd7 6a02 	vldr	s13, [r7, #8]
 8001a4a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a52:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a5e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a62:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a72:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8001a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8001a7a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001a7e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001a82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8001a8a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001a8e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	db27      	blt.n	8001aec <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8001a9c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001aa0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa8:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8001aac:	edd7 6a07 	vldr	s13, [r7, #28]
 8001ab0:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab8:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ac0:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8001ac2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8001ad4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ad8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001adc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	edc3 7a02 	vstr	s15, [r3, #8]
 8001aea:	e018      	b.n	8001b1e <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8001aec:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001af8:	eeb0 0a66 	vmov.f32	s0, s13
 8001afc:	f009 fb3c 	bl	800b178 <sqrtf>
 8001b00:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	6a3a      	ldr	r2, [r7, #32]
 8001b08:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8001b10:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	60da      	str	r2, [r3, #12]
}
 8001b26:	3738      	adds	r7, #56	@ 0x38
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b08d      	sub	sp, #52	@ 0x34
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6178      	str	r0, [r7, #20]
 8001b34:	6139      	str	r1, [r7, #16]
 8001b36:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b3e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001b42:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8001dd0 <Trapezoidal_Evaluated+0x2a4>
 8001b50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	f200 811b 	bhi.w	8001da8 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2200      	movs	r2, #0
 8001b76:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	7c1b      	ldrb	r3, [r3, #16]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	ed97 7a00 	vldr	s14, [r7]
 8001b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b8e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	ed93 7a00 	vldr	s14, [r3]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b9e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	d109      	bne.n	8001bbc <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8001bba:	e00c      	b.n	8001bd6 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	7c1b      	ldrb	r3, [r3, #16]
 8001bc0:	b25b      	sxtb	r3, r3
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bca:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	ed93 7a03 	vldr	s14, [r3, #12]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d824      	bhi.n	8001c36 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8001bec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001bf0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001bf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c20:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c32:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8001c34:	e0c6      	b.n	8001dc4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d830      	bhi.n	8001cae <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8001c4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c50:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001c54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c74:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	edd3 7a00 	vldr	s15, [r3]
 8001c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c88:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c90:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca2:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
}
 8001cac:	e08a      	b.n	8001dc4 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	ed93 7a03 	vldr	s14, [r3, #12]
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001cba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc2:	d900      	bls.n	8001cc6 <Trapezoidal_Evaluated+0x19a>
}
 8001cc4:	e07e      	b.n	8001dc4 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8001cc6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001cca:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001cce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
 8001cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	dd11      	ble.n	8001d30 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d24:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d40:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8001d44:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d50:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001d54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d5c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001d60:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d68:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001d6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8001d7e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001d82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8001d98:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d9c:	eef1 7a67 	vneg.f32	s15, s15
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001da6:	e00d      	b.n	8001dc4 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2201      	movs	r2, #1
 8001dac:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	3734      	adds	r7, #52	@ 0x34
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	3a83126f 	.word	0x3a83126f

08001dd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08c      	sub	sp, #48	@ 0x30
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2220      	movs	r2, #32
 8001dea:	2100      	movs	r1, #0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f009 f97f 	bl	800b0f0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001df2:	4b47      	ldr	r3, [pc, #284]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001df4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001df8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001dfa:	4b45      	ldr	r3, [pc, #276]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001dfc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e02:	4b43      	ldr	r3, [pc, #268]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e08:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001e0e:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e14:	4b3e      	ldr	r3, [pc, #248]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e20:	4b3b      	ldr	r3, [pc, #236]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e26:	4b3a      	ldr	r3, [pc, #232]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001e2c:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e2e:	2204      	movs	r2, #4
 8001e30:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e32:	4b37      	ldr	r3, [pc, #220]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e3a:	4b35      	ldr	r3, [pc, #212]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e40:	4b33      	ldr	r3, [pc, #204]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e46:	4b32      	ldr	r3, [pc, #200]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e4e:	4b30      	ldr	r3, [pc, #192]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001e54:	4b2e      	ldr	r3, [pc, #184]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e5c:	482c      	ldr	r0, [pc, #176]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e5e:	f002 f8f1 	bl	8004044 <HAL_ADC_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001e68:	f000 fdb2 	bl	80029d0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001e70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e74:	4619      	mov	r1, r3
 8001e76:	4826      	ldr	r0, [pc, #152]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001e78:	f003 fa10 	bl	800529c <HAL_ADCEx_MultiModeConfigChannel>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001e82:	f000 fda5 	bl	80029d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001e86:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <MX_ADC1_Init+0x140>)
 8001e88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001e8e:	2307      	movs	r3, #7
 8001e90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e92:	237f      	movs	r3, #127	@ 0x7f
 8001e94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e96:	2304      	movs	r3, #4
 8001e98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e9e:	1d3b      	adds	r3, r7, #4
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001ea4:	f002 fb7c 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001eae:	f000 fd8f 	bl	80029d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <MX_ADC1_Init+0x144>)
 8001eb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4814      	ldr	r0, [pc, #80]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001ec0:	f002 fb6e 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001eca:	f000 fd81 	bl	80029d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <MX_ADC1_Init+0x148>)
 8001ed0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ed2:	2312      	movs	r3, #18
 8001ed4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001edc:	f002 fb60 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001ee6:	f000 fd73 	bl	80029d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <MX_ADC1_Init+0x14c>)
 8001eec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001eee:	2318      	movs	r3, #24
 8001ef0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4806      	ldr	r0, [pc, #24]	@ (8001f10 <MX_ADC1_Init+0x13c>)
 8001ef8:	f002 fb52 	bl	80045a0 <HAL_ADC_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001f02:	f000 fd65 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	3730      	adds	r7, #48	@ 0x30
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	200001e0 	.word	0x200001e0
 8001f14:	19200040 	.word	0x19200040
 8001f18:	1d500080 	.word	0x1d500080
 8001f1c:	21800100 	.word	0x21800100
 8001f20:	3ef08000 	.word	0x3ef08000

08001f24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0a0      	sub	sp, #128	@ 0x80
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	2254      	movs	r2, #84	@ 0x54
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f009 f8d3 	bl	800b0f0 <memset>
  if(adcHandle->Instance==ADC1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f52:	d176      	bne.n	8002042 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001f5a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fe8f 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001f70:	f000 fd2e 	bl	80029d0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001f74:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f78:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f7a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f98:	4b2c      	ldr	r3, [pc, #176]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa4:	4b29      	ldr	r3, [pc, #164]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	4a28      	ldr	r2, [pc, #160]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb0:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_ADC_MspInit+0x128>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    PC2     ------> ADC1_IN8
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001fbc:	2307      	movs	r3, #7
 8001fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4820      	ldr	r0, [pc, #128]	@ (8002050 <HAL_ADC_MspInit+0x12c>)
 8001fd0:	f003 feae 	bl	8005d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481b      	ldr	r0, [pc, #108]	@ (8002054 <HAL_ADC_MspInit+0x130>)
 8001fe8:	f003 fea2 	bl	8005d30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001fec:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8001fee:	4a1b      	ldr	r2, [pc, #108]	@ (800205c <HAL_ADC_MspInit+0x138>)
 8001ff0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8001ff4:	2205      	movs	r2, #5
 8001ff6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffe:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8002000:	2200      	movs	r2, #0
 8002002:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002004:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 800200c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002010:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8002014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002018:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800201a:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 800201c:	2220      	movs	r2, #32
 800201e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002020:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8002022:	2200      	movs	r2, #0
 8002024:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002026:	480c      	ldr	r0, [pc, #48]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 8002028:	f003 fb50 	bl	80056cc <HAL_DMA_Init>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_ADC_MspInit+0x112>
    {
      Error_Handler();
 8002032:	f000 fccd 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a07      	ldr	r2, [pc, #28]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
 800203c:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <HAL_ADC_MspInit+0x134>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002042:	bf00      	nop
 8002044:	3780      	adds	r7, #128	@ 0x80
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	48000800 	.word	0x48000800
 8002054:	48000400 	.word	0x48000400
 8002058:	2000024c 	.word	0x2000024c
 800205c:	40020008 	.word	0x40020008

08002060 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <MX_DMA_Init+0x70>)
 8002068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206a:	4a19      	ldr	r2, [pc, #100]	@ (80020d0 <MX_DMA_Init+0x70>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6493      	str	r3, [r2, #72]	@ 0x48
 8002072:	4b17      	ldr	r3, [pc, #92]	@ (80020d0 <MX_DMA_Init+0x70>)
 8002074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800207e:	4b14      	ldr	r3, [pc, #80]	@ (80020d0 <MX_DMA_Init+0x70>)
 8002080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002082:	4a13      	ldr	r2, [pc, #76]	@ (80020d0 <MX_DMA_Init+0x70>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6493      	str	r3, [r2, #72]	@ 0x48
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <MX_DMA_Init+0x70>)
 800208c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	603b      	str	r3, [r7, #0]
 8002094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2100      	movs	r1, #0
 800209a:	200b      	movs	r0, #11
 800209c:	f003 fae1 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80020a0:	200b      	movs	r0, #11
 80020a2:	f003 faf8 	bl	8005696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	200c      	movs	r0, #12
 80020ac:	f003 fad9 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80020b0:	200c      	movs	r0, #12
 80020b2:	f003 faf0 	bl	8005696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	200d      	movs	r0, #13
 80020bc:	f003 fad1 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80020c0:	200d      	movs	r0, #13
 80020c2:	f003 fae8 	bl	8005696 <HAL_NVIC_EnableIRQ>

}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08a      	sub	sp, #40	@ 0x28
 80020d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002228 <MX_GPIO_Init+0x154>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002228 <MX_GPIO_Init+0x154>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002228 <MX_GPIO_Init+0x154>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	613b      	str	r3, [r7, #16]
 8002100:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002102:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	4a48      	ldr	r2, [pc, #288]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002108:	f043 0320 	orr.w	r3, r3, #32
 800210c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210e:	4b46      	ldr	r3, [pc, #280]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	f003 0320 	and.w	r3, r3, #32
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b43      	ldr	r3, [pc, #268]	@ (8002228 <MX_GPIO_Init+0x154>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	4a42      	ldr	r2, [pc, #264]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002126:	4b40      	ldr	r3, [pc, #256]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002132:	4b3d      	ldr	r3, [pc, #244]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	4a3c      	ldr	r2, [pc, #240]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002138:	f043 0302 	orr.w	r3, r3, #2
 800213c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <MX_GPIO_Init+0x154>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002154:	f003 ff86 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800215e:	4833      	ldr	r0, [pc, #204]	@ (800222c <MX_GPIO_Init+0x158>)
 8002160:	f003 ff80 	bl	8006064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800216e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	4619      	mov	r1, r3
 800217a:	482c      	ldr	r0, [pc, #176]	@ (800222c <MX_GPIO_Init+0x158>)
 800217c:	f003 fdd8 	bl	8005d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002180:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002192:	f107 0314 	add.w	r3, r7, #20
 8002196:	4619      	mov	r1, r3
 8002198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800219c:	f003 fdc8 	bl	8005d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 EMER_Pin
                           PB5 SAVE_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|EMER_Pin
 80021a0:	f641 43b0 	movw	r3, #7344	@ 0x1cb0
 80021a4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	4619      	mov	r1, r3
 80021b4:	481e      	ldr	r0, [pc, #120]	@ (8002230 <MX_GPIO_Init+0x15c>)
 80021b6:	f003 fdbb 	bl	8005d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c0:	2301      	movs	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c8:	2300      	movs	r3, #0
 80021ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	4619      	mov	r1, r3
 80021d2:	4816      	ldr	r0, [pc, #88]	@ (800222c <MX_GPIO_Init+0x158>)
 80021d4:	f003 fdac 	bl	8005d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e6:	f107 0314 	add.w	r3, r7, #20
 80021ea:	4619      	mov	r1, r3
 80021ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021f0:	f003 fd9e 	bl	8005d30 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 80021f4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	4808      	ldr	r0, [pc, #32]	@ (800222c <MX_GPIO_Init+0x158>)
 800220a:	f003 fd91 	bl	8005d30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2028      	movs	r0, #40	@ 0x28
 8002214:	f003 fa25 	bl	8005662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002218:	2028      	movs	r0, #40	@ 0x28
 800221a:	f003 fa3c 	bl	8005696 <HAL_NVIC_EnableIRQ>

}
 800221e:	bf00      	nop
 8002220:	3728      	adds	r7, #40	@ 0x28
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	48000800 	.word	0x48000800
 8002230:	48000400 	.word	0x48000400

08002234 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 8002234:	b5b0      	push	{r4, r5, r7, lr}
 8002236:	b0a2      	sub	sp, #136	@ 0x88
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4a38      	ldr	r2, [pc, #224]	@ (8002324 <Kalman_Start+0xf0>)
 8002244:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800224e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	677b      	str	r3, [r7, #116]	@ 0x74
 8002258:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800225c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	667b      	str	r3, [r7, #100]	@ 0x64
 8002272:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002276:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002284:	4b28      	ldr	r3, [pc, #160]	@ (8002328 <Kalman_Start+0xf4>)
 8002286:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800228a:	461d      	mov	r5, r3
 800228c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002290:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002294:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002298:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800229c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80022be:	e028      	b.n	8002312 <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 80022c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4413      	add	r3, r2
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68f9      	ldr	r1, [r7, #12]
 80022ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022d2:	3314      	adds	r3, #20
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80022da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	3388      	adds	r3, #136	@ 0x88
 80022e2:	443b      	add	r3, r7
 80022e4:	3b64      	subs	r3, #100	@ 0x64
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68f9      	ldr	r1, [r7, #12]
 80022ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022ee:	3398      	adds	r3, #152	@ 0x98
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022fc:	3304      	adds	r3, #4
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002308:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800230c:	3301      	adds	r3, #1
 800230e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002312:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002316:	2b0f      	cmp	r3, #15
 8002318:	ddd2      	ble.n	80022c0 <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 800231a:	2300      	movs	r3, #0
 800231c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002320:	e03f      	b.n	80023a2 <Kalman_Start+0x16e>
 8002322:	bf00      	nop
 8002324:	3d4ccccd 	.word	0x3d4ccccd
 8002328:	0800bcbc 	.word	0x0800bcbc
	{
		filter->X_k[i] = x_k[i];
 800232c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	3388      	adds	r3, #136	@ 0x88
 8002334:	443b      	add	r3, r7
 8002336:	3b74      	subs	r3, #116	@ 0x74
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68f9      	ldr	r1, [r7, #12]
 800233c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002346:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68f9      	ldr	r1, [r7, #12]
 8002354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002358:	3324      	adds	r3, #36	@ 0x24
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002360:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	3388      	adds	r3, #136	@ 0x88
 8002368:	443b      	add	r3, r7
 800236a:	3b14      	subs	r3, #20
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68f9      	ldr	r1, [r7, #12]
 8002370:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002374:	3328      	adds	r3, #40	@ 0x28
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 800237c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	3388      	adds	r3, #136	@ 0x88
 8002384:	443b      	add	r3, r7
 8002386:	3b24      	subs	r3, #36	@ 0x24
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68f9      	ldr	r1, [r7, #12]
 800238c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002390:	332c      	adds	r3, #44	@ 0x2c
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800239c:	3301      	adds	r3, #1
 800239e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	ddc0      	ble.n	800232c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	2104      	movs	r1, #4
 80023b6:	f008 fdcd 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3310      	adds	r3, #16
 80023c4:	2204      	movs	r2, #4
 80023c6:	2104      	movs	r1, #4
 80023c8:	f008 fdc4 	bl	800af54 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3350      	adds	r3, #80	@ 0x50
 80023d6:	2204      	movs	r2, #4
 80023d8:	2104      	movs	r1, #4
 80023da:	f008 fdbb 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	3390      	adds	r3, #144	@ 0x90
 80023e8:	2201      	movs	r2, #1
 80023ea:	2104      	movs	r1, #4
 80023ec:	f008 fdb2 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	33a0      	adds	r3, #160	@ 0xa0
 80023fa:	2204      	movs	r2, #4
 80023fc:	2101      	movs	r1, #1
 80023fe:	f008 fda9 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	33b0      	adds	r3, #176	@ 0xb0
 800240c:	2201      	movs	r2, #1
 800240e:	2104      	movs	r1, #4
 8002410:	f008 fda0 	bl	800af54 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	33c8      	adds	r3, #200	@ 0xc8
 800241e:	2204      	movs	r2, #4
 8002420:	2104      	movs	r1, #4
 8002422:	f008 fd97 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002432:	2201      	movs	r2, #1
 8002434:	2104      	movs	r1, #4
 8002436:	f008 fd8d 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002446:	2204      	movs	r2, #4
 8002448:	2101      	movs	r1, #1
 800244a:	f008 fd83 	bl	800af54 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800245a:	2204      	movs	r2, #4
 800245c:	2104      	movs	r1, #4
 800245e:	f008 fd79 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800246e:	2204      	movs	r2, #4
 8002470:	2104      	movs	r1, #4
 8002472:	f008 fd6f 	bl	800af54 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002482:	2201      	movs	r2, #1
 8002484:	2104      	movs	r1, #4
 8002486:	f008 fd65 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002496:	2201      	movs	r2, #1
 8002498:	2104      	movs	r1, #4
 800249a:	f008 fd5b 	bl	800af54 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80024aa:	2204      	movs	r2, #4
 80024ac:	2101      	movs	r1, #1
 80024ae:	f008 fd51 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80024be:	2201      	movs	r2, #1
 80024c0:	2101      	movs	r1, #1
 80024c2:	f008 fd47 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80024d2:	2201      	movs	r2, #1
 80024d4:	2101      	movs	r1, #1
 80024d6:	f008 fd3d 	bl	800af54 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80024e6:	2201      	movs	r2, #1
 80024e8:	2104      	movs	r1, #4
 80024ea:	f008 fd33 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80024fa:	2201      	movs	r2, #1
 80024fc:	2104      	movs	r1, #4
 80024fe:	f008 fd29 	bl	800af54 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800250e:	2201      	movs	r2, #1
 8002510:	2101      	movs	r1, #1
 8002512:	f008 fd1f 	bl	800af54 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002522:	2201      	movs	r2, #1
 8002524:	2101      	movs	r1, #1
 8002526:	f008 fd15 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002536:	2201      	movs	r2, #1
 8002538:	2101      	movs	r1, #1
 800253a:	f008 fd0b 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800254a:	2201      	movs	r2, #1
 800254c:	2104      	movs	r1, #4
 800254e:	f008 fd01 	bl	800af54 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800255e:	2201      	movs	r2, #1
 8002560:	2101      	movs	r1, #1
 8002562:	f008 fcf7 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002572:	2204      	movs	r2, #4
 8002574:	2104      	movs	r1, #4
 8002576:	f008 fced 	bl	800af54 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	33c4      	adds	r3, #196	@ 0xc4
 8002584:	2201      	movs	r2, #1
 8002586:	2101      	movs	r1, #1
 8002588:	f008 fce4 	bl	800af54 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002598:	2201      	movs	r2, #1
 800259a:	2101      	movs	r1, #1
 800259c:	f008 fcda 	bl	800af54 <arm_mat_init_f32>
}
 80025a0:	bf00      	nop
 80025a2:	3788      	adds	r7, #136	@ 0x88
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}

080025a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025ac:	f001 fa95 	bl	8003ada <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025b0:	f000 f950 	bl	8002854 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025b4:	f7ff fd8e 	bl	80020d4 <MX_GPIO_Init>
	MX_DMA_Init();
 80025b8:	f7ff fd52 	bl	8002060 <MX_DMA_Init>
	MX_ADC1_Init();
 80025bc:	f7ff fc0a 	bl	8001dd4 <MX_ADC1_Init>
	MX_TIM2_Init();
 80025c0:	f000 fde6 	bl	8003190 <MX_TIM2_Init>
	MX_TIM3_Init();
 80025c4:	f000 fe32 	bl	800322c <MX_TIM3_Init>
	MX_TIM4_Init();
 80025c8:	f000 fe86 	bl	80032d8 <MX_TIM4_Init>
	MX_TIM5_Init();
 80025cc:	f000 feda 	bl	8003384 <MX_TIM5_Init>
	MX_TIM8_Init();
 80025d0:	f000 ff26 	bl	8003420 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80025d4:	f001 f94e 	bl	8003874 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80025d8:	f000 ffea 	bl	80035b0 <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80025dc:	f000 f9fe 	bl	80029dc <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 80025e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80025e4:	4889      	ldr	r0, [pc, #548]	@ (800280c <main+0x264>)
 80025e6:	f003 fd25 	bl	8006034 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b85      	ldr	r3, [pc, #532]	@ (8002810 <main+0x268>)
 80025fa:	601a      	str	r2, [r3, #0]
		b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 80025fc:	2180      	movs	r1, #128	@ 0x80
 80025fe:	4885      	ldr	r0, [pc, #532]	@ (8002814 <main+0x26c>)
 8002600:	f003 fd18 	bl	8006034 <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	bf0c      	ite	eq
 800260a:	2301      	moveq	r3, #1
 800260c:	2300      	movne	r3, #0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	4b81      	ldr	r3, [pc, #516]	@ (8002818 <main+0x270>)
 8002614:	601a      	str	r2, [r3, #0]
		b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8002616:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800261a:	487c      	ldr	r0, [pc, #496]	@ (800280c <main+0x264>)
 800261c:	f003 fd0a 	bl	8006034 <HAL_GPIO_ReadPin>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	bf0c      	ite	eq
 8002626:	2301      	moveq	r3, #1
 8002628:	2300      	movne	r3, #0
 800262a:	b2db      	uxtb	r3, r3
 800262c:	461a      	mov	r2, r3
 800262e:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <main+0x274>)
 8002630:	601a      	str	r2, [r3, #0]
		b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8002632:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002636:	4875      	ldr	r0, [pc, #468]	@ (800280c <main+0x264>)
 8002638:	f003 fcfc 	bl	8006034 <HAL_GPIO_ReadPin>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4b75      	ldr	r3, [pc, #468]	@ (8002820 <main+0x278>)
 800264c:	601a      	str	r2, [r3, #0]

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b1);
 800264e:	4b70      	ldr	r3, [pc, #448]	@ (8002810 <main+0x268>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800265a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800265e:	f003 fd01 	bl	8006064 <HAL_GPIO_WritePin>
//
//			// Generate trapezoidal trajectory
//			Trapezoidal_Generator(&prisGen, initial_p, target_p, vmax, amax);
//			trajectoryActive = true;
//		}
		if (b4) {
 8002662:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <main+0x278>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d02f      	beq.n	80026ca <main+0x122>
			// No longer system reset - now it's a move to target 4
			if (!trajectoryActive) {
 800266a:	4b6e      	ldr	r3, [pc, #440]	@ (8002824 <main+0x27c>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0b3      	beq.n	80025e0 <main+0x38>
				// Initialize evaluator
				prisEva.t = 0.0f;
 8002678:	4b6b      	ldr	r3, [pc, #428]	@ (8002828 <main+0x280>)
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
				prisEva.isFinised = false;
 8002680:	4b69      	ldr	r3, [pc, #420]	@ (8002828 <main+0x280>)
 8002682:	2200      	movs	r2, #0
 8002684:	741a      	strb	r2, [r3, #16]

				// Set initial position to current position
				initial_p = current_position;
 8002686:	4b69      	ldr	r3, [pc, #420]	@ (800282c <main+0x284>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a69      	ldr	r2, [pc, #420]	@ (8002830 <main+0x288>)
 800268c:	6013      	str	r3, [r2, #0]

				// Set target to position 4
				target_p = TARGET_POS_4;
 800268e:	4b69      	ldr	r3, [pc, #420]	@ (8002834 <main+0x28c>)
 8002690:	4a69      	ldr	r2, [pc, #420]	@ (8002838 <main+0x290>)
 8002692:	601a      	str	r2, [r3, #0]

				// Generate trapezoidal trajectory
				Trapezoidal_Generator(&prisGen, initial_p, target_p, vmax,
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <main+0x288>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	4b66      	ldr	r3, [pc, #408]	@ (8002834 <main+0x28c>)
 800269c:	ed93 7a00 	vldr	s14, [r3]
 80026a0:	4b66      	ldr	r3, [pc, #408]	@ (800283c <main+0x294>)
 80026a2:	edd3 6a00 	vldr	s13, [r3]
 80026a6:	4b66      	ldr	r3, [pc, #408]	@ (8002840 <main+0x298>)
 80026a8:	ed93 6a00 	vldr	s12, [r3]
 80026ac:	eef0 1a46 	vmov.f32	s3, s12
 80026b0:	eeb0 1a66 	vmov.f32	s2, s13
 80026b4:	eef0 0a47 	vmov.f32	s1, s14
 80026b8:	eeb0 0a67 	vmov.f32	s0, s15
 80026bc:	4861      	ldr	r0, [pc, #388]	@ (8002844 <main+0x29c>)
 80026be:	f7ff f974 	bl	80019aa <Trapezoidal_Generator>
						amax);
				trajectoryActive = true;
 80026c2:	4b58      	ldr	r3, [pc, #352]	@ (8002824 <main+0x27c>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e78a      	b.n	80025e0 <main+0x38>
			}
		} else if (b3) {
 80026ca:	4b54      	ldr	r3, [pc, #336]	@ (800281c <main+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d030      	beq.n	8002734 <main+0x18c>
			if (!trajectoryActive) {
 80026d2:	4b54      	ldr	r3, [pc, #336]	@ (8002824 <main+0x27c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f083 0301 	eor.w	r3, r3, #1
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f43f af7f 	beq.w	80025e0 <main+0x38>
				// Initialize evaluator
				prisEva.t = 0.0f;
 80026e2:	4b51      	ldr	r3, [pc, #324]	@ (8002828 <main+0x280>)
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
				prisEva.isFinised = false;
 80026ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002828 <main+0x280>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	741a      	strb	r2, [r3, #16]

				// Set initial position to current position
				initial_p = current_position;
 80026f0:	4b4e      	ldr	r3, [pc, #312]	@ (800282c <main+0x284>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002830 <main+0x288>)
 80026f6:	6013      	str	r3, [r2, #0]

				// Set target to position 3
				target_p = TARGET_POS_3;
 80026f8:	4b4e      	ldr	r3, [pc, #312]	@ (8002834 <main+0x28c>)
 80026fa:	4a53      	ldr	r2, [pc, #332]	@ (8002848 <main+0x2a0>)
 80026fc:	601a      	str	r2, [r3, #0]

				// Generate trapezoidal trajectory
				Trapezoidal_Generator(&prisGen, initial_p, target_p, vmax,
 80026fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002830 <main+0x288>)
 8002700:	edd3 7a00 	vldr	s15, [r3]
 8002704:	4b4b      	ldr	r3, [pc, #300]	@ (8002834 <main+0x28c>)
 8002706:	ed93 7a00 	vldr	s14, [r3]
 800270a:	4b4c      	ldr	r3, [pc, #304]	@ (800283c <main+0x294>)
 800270c:	edd3 6a00 	vldr	s13, [r3]
 8002710:	4b4b      	ldr	r3, [pc, #300]	@ (8002840 <main+0x298>)
 8002712:	ed93 6a00 	vldr	s12, [r3]
 8002716:	eef0 1a46 	vmov.f32	s3, s12
 800271a:	eeb0 1a66 	vmov.f32	s2, s13
 800271e:	eef0 0a47 	vmov.f32	s1, s14
 8002722:	eeb0 0a67 	vmov.f32	s0, s15
 8002726:	4847      	ldr	r0, [pc, #284]	@ (8002844 <main+0x29c>)
 8002728:	f7ff f93f 	bl	80019aa <Trapezoidal_Generator>
						amax);
				trajectoryActive = true;
 800272c:	4b3d      	ldr	r3, [pc, #244]	@ (8002824 <main+0x27c>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	e755      	b.n	80025e0 <main+0x38>
			}
		} else if (b2) {
 8002734:	4b38      	ldr	r3, [pc, #224]	@ (8002818 <main+0x270>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d030      	beq.n	800279e <main+0x1f6>
			if (!trajectoryActive) {
 800273c:	4b39      	ldr	r3, [pc, #228]	@ (8002824 <main+0x27c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f43f af4a 	beq.w	80025e0 <main+0x38>
				// Initialize evaluator
				prisEva.t = 0.0f;
 800274c:	4b36      	ldr	r3, [pc, #216]	@ (8002828 <main+0x280>)
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
				prisEva.isFinised = false;
 8002754:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <main+0x280>)
 8002756:	2200      	movs	r2, #0
 8002758:	741a      	strb	r2, [r3, #16]

				// Set initial position to current position
				initial_p = current_position;
 800275a:	4b34      	ldr	r3, [pc, #208]	@ (800282c <main+0x284>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a34      	ldr	r2, [pc, #208]	@ (8002830 <main+0x288>)
 8002760:	6013      	str	r3, [r2, #0]

				// Set target to position 2
				target_p = TARGET_POS_2;
 8002762:	4b34      	ldr	r3, [pc, #208]	@ (8002834 <main+0x28c>)
 8002764:	4a39      	ldr	r2, [pc, #228]	@ (800284c <main+0x2a4>)
 8002766:	601a      	str	r2, [r3, #0]

				// Generate trapezoidal trajectory
				Trapezoidal_Generator(&prisGen, initial_p, target_p, vmax,
 8002768:	4b31      	ldr	r3, [pc, #196]	@ (8002830 <main+0x288>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	4b31      	ldr	r3, [pc, #196]	@ (8002834 <main+0x28c>)
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	4b31      	ldr	r3, [pc, #196]	@ (800283c <main+0x294>)
 8002776:	edd3 6a00 	vldr	s13, [r3]
 800277a:	4b31      	ldr	r3, [pc, #196]	@ (8002840 <main+0x298>)
 800277c:	ed93 6a00 	vldr	s12, [r3]
 8002780:	eef0 1a46 	vmov.f32	s3, s12
 8002784:	eeb0 1a66 	vmov.f32	s2, s13
 8002788:	eef0 0a47 	vmov.f32	s1, s14
 800278c:	eeb0 0a67 	vmov.f32	s0, s15
 8002790:	482c      	ldr	r0, [pc, #176]	@ (8002844 <main+0x29c>)
 8002792:	f7ff f90a 	bl	80019aa <Trapezoidal_Generator>
						amax);
				trajectoryActive = true;
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <main+0x27c>)
 8002798:	2201      	movs	r2, #1
 800279a:	701a      	strb	r2, [r3, #0]
 800279c:	e720      	b.n	80025e0 <main+0x38>
			}
		} else if (b1) {
 800279e:	4b1c      	ldr	r3, [pc, #112]	@ (8002810 <main+0x268>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f43f af1c 	beq.w	80025e0 <main+0x38>
			if (!trajectoryActive) {
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <main+0x27c>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f43f af14 	beq.w	80025e0 <main+0x38>
				// Initialize evaluator
				prisEva.t = 0.0f;
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <main+0x280>)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	60da      	str	r2, [r3, #12]
				prisEva.isFinised = false;
 80027c0:	4b19      	ldr	r3, [pc, #100]	@ (8002828 <main+0x280>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	741a      	strb	r2, [r3, #16]

				// Set initial position to current position
				initial_p = current_position;
 80027c6:	4b19      	ldr	r3, [pc, #100]	@ (800282c <main+0x284>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a19      	ldr	r2, [pc, #100]	@ (8002830 <main+0x288>)
 80027cc:	6013      	str	r3, [r2, #0]

				// Set target to position 1
				target_p = TARGET_POS_1;
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <main+0x28c>)
 80027d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002850 <main+0x2a8>)
 80027d2:	601a      	str	r2, [r3, #0]

				// Generate trapezoidal trajectory
				Trapezoidal_Generator(&prisGen, initial_p, target_p, vmax,
 80027d4:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <main+0x288>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <main+0x28c>)
 80027dc:	ed93 7a00 	vldr	s14, [r3]
 80027e0:	4b16      	ldr	r3, [pc, #88]	@ (800283c <main+0x294>)
 80027e2:	edd3 6a00 	vldr	s13, [r3]
 80027e6:	4b16      	ldr	r3, [pc, #88]	@ (8002840 <main+0x298>)
 80027e8:	ed93 6a00 	vldr	s12, [r3]
 80027ec:	eef0 1a46 	vmov.f32	s3, s12
 80027f0:	eeb0 1a66 	vmov.f32	s2, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	4811      	ldr	r0, [pc, #68]	@ (8002844 <main+0x29c>)
 80027fe:	f7ff f8d4 	bl	80019aa <Trapezoidal_Generator>
						amax);
				trajectoryActive = true;
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <main+0x27c>)
 8002804:	2201      	movs	r2, #1
 8002806:	701a      	strb	r2, [r3, #0]
		b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8002808:	e6ea      	b.n	80025e0 <main+0x38>
 800280a:	bf00      	nop
 800280c:	48000800 	.word	0x48000800
 8002810:	200002ec 	.word	0x200002ec
 8002814:	48000400 	.word	0x48000400
 8002818:	200002f0 	.word	0x200002f0
 800281c:	200002f4 	.word	0x200002f4
 8002820:	200002f8 	.word	0x200002f8
 8002824:	200002d4 	.word	0x200002d4
 8002828:	200002c0 	.word	0x200002c0
 800282c:	200002dc 	.word	0x200002dc
 8002830:	200002d8 	.word	0x200002d8
 8002834:	200000b8 	.word	0x200000b8
 8002838:	43c80000 	.word	0x43c80000
 800283c:	200000bc 	.word	0x200000bc
 8002840:	200000c0 	.word	0x200000c0
 8002844:	200002ac 	.word	0x200002ac
 8002848:	43960000 	.word	0x43960000
 800284c:	43480000 	.word	0x43480000
 8002850:	42c80000 	.word	0x42c80000

08002854 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002854:	b580      	push	{r7, lr}
 8002856:	b094      	sub	sp, #80	@ 0x50
 8002858:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800285a:	f107 0318 	add.w	r3, r7, #24
 800285e:	2238      	movs	r2, #56	@ 0x38
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f008 fc44 	bl	800b0f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
 8002874:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002876:	2000      	movs	r0, #0
 8002878:	f003 fc24 	bl	80060c4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002886:	2340      	movs	r3, #64	@ 0x40
 8002888:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288a:	2302      	movs	r3, #2
 800288c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800288e:	2302      	movs	r3, #2
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002892:	2304      	movs	r3, #4
 8002894:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002896:	2355      	movs	r3, #85	@ 0x55
 8002898:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800289a:	2302      	movs	r3, #2
 800289c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800289e:	2302      	movs	r3, #2
 80028a0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	4618      	mov	r0, r3
 80028ac:	f003 fcbe 	bl	800622c <HAL_RCC_OscConfig>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <SystemClock_Config+0x66>
		Error_Handler();
 80028b6:	f000 f88b 	bl	80029d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028ba:	230f      	movs	r3, #15
 80028bc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028be:	2303      	movs	r3, #3
 80028c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2104      	movs	r1, #4
 80028d2:	4618      	mov	r0, r3
 80028d4:	f003 ffbc 	bl	8006850 <HAL_RCC_ClockConfig>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <SystemClock_Config+0x8e>
		Error_Handler();
 80028de:	f000 f877 	bl	80029d0 <Error_Handler>
	}
}
 80028e2:	bf00      	nop
 80028e4:	3750      	adds	r7, #80	@ 0x50
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	80fb      	strh	r3, [r7, #6]

}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d138      	bne.n	8002996 <HAL_TIM_PeriodElapsedCallback+0x82>
		update_sensors();
 8002924:	f000 f9f6 	bl	8002d14 <update_sensors>

		if (trajectoryActive && !prisEva.isFinised) {
 8002928:	4b1e      	ldr	r3, [pc, #120]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d02b      	beq.n	8002988 <HAL_TIM_PeriodElapsedCallback+0x74>
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002932:	7c1b      	ldrb	r3, [r3, #16]
 8002934:	f083 0301 	eor.w	r3, r3, #1
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_TIM_PeriodElapsedCallback+0x74>
			// Evaluate trajectory
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p, vmax,
 800293e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800294c:	edd3 6a00 	vldr	s13, [r3]
 8002950:	4b19      	ldr	r3, [pc, #100]	@ (80029b8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002952:	ed93 6a00 	vldr	s12, [r3]
 8002956:	eef0 1a46 	vmov.f32	s3, s12
 800295a:	eeb0 1a66 	vmov.f32	s2, s13
 800295e:	eef0 0a47 	vmov.f32	s1, s14
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	4910      	ldr	r1, [pc, #64]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002968:	4814      	ldr	r0, [pc, #80]	@ (80029bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800296a:	f7ff f8df 	bl	8001b2c <Trapezoidal_Evaluated>
					amax);

			// Update variables for CubeMonitor
			current_position = prisEva.setposition;
 800296e:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a13      	ldr	r2, [pc, #76]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002974:	6013      	str	r3, [r2, #0]
			current_velocity = prisEva.setvelocity;
 8002976:	4b0c      	ldr	r3, [pc, #48]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4a12      	ldr	r2, [pc, #72]	@ (80029c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800297c:	6013      	str	r3, [r2, #0]
			current_acceleration = prisEva.setacceleration;
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002984:	6013      	str	r3, [r2, #0]
		} else {
			current_duty = 0.0f;
			trajectoryActive = false;
		}
	}
}
 8002986:	e006      	b.n	8002996 <HAL_TIM_PeriodElapsedCallback+0x82>
			current_duty = 0.0f;
 8002988:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
			trajectoryActive = false;
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20001474 	.word	0x20001474
 80029a4:	200002d4 	.word	0x200002d4
 80029a8:	200002c0 	.word	0x200002c0
 80029ac:	200002d8 	.word	0x200002d8
 80029b0:	200000b8 	.word	0x200000b8
 80029b4:	200000bc 	.word	0x200000bc
 80029b8:	200000c0 	.word	0x200000c0
 80029bc:	200002ac 	.word	0x200002ac
 80029c0:	200002dc 	.word	0x200002dc
 80029c4:	200002e0 	.word	0x200002e0
 80029c8:	200002e4 	.word	0x200002e4
 80029cc:	200002e8 	.word	0x200002e8

080029d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <Error_Handler+0x8>

080029dc <plotter_begin>:
float joystick_x = 0.0f;
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

void plotter_begin() {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 80029e2:	2100      	movs	r1, #0
 80029e4:	4896      	ldr	r0, [pc, #600]	@ (8002c40 <plotter_begin+0x264>)
 80029e6:	f000 f9d1 	bl	8002d8c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE, SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);
 80029ea:	eddf 2a96 	vldr	s5, [pc, #600]	@ 8002c44 <plotter_begin+0x268>
 80029ee:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8002c48 <plotter_begin+0x26c>
 80029f2:	eddf 1a96 	vldr	s3, [pc, #600]	@ 8002c4c <plotter_begin+0x270>
 80029f6:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8002c4c <plotter_begin+0x270>
 80029fa:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8002c50 <plotter_begin+0x274>
 80029fe:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8002c44 <plotter_begin+0x268>
 8002a02:	488f      	ldr	r0, [pc, #572]	@ (8002c40 <plotter_begin+0x264>)
 8002a04:	f000 fa20 	bl	8002e48 <SIGNAL_config_sine>

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4892      	ldr	r0, [pc, #584]	@ (8002c54 <plotter_begin+0x278>)
 8002a0c:	f000 f9be 	bl	8002d8c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE, CHIRP_LINEAR_START_FREQ,
 8002a10:	eddf 2a8c 	vldr	s5, [pc, #560]	@ 8002c44 <plotter_begin+0x268>
 8002a14:	ed9f 2a8c 	vldr	s4, [pc, #560]	@ 8002c48 <plotter_begin+0x26c>
 8002a18:	2100      	movs	r1, #0
 8002a1a:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002a1e:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002a22:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002a26:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 8002c44 <plotter_begin+0x268>
 8002a2a:	488a      	ldr	r0, [pc, #552]	@ (8002c54 <plotter_begin+0x278>)
 8002a2c:	f000 fa37 	bl	8002e9e <SIGNAL_config_chirp>
	                   CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	                   CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002a30:	2101      	movs	r1, #1
 8002a32:	4889      	ldr	r0, [pc, #548]	@ (8002c58 <plotter_begin+0x27c>)
 8002a34:	f000 f9aa 	bl	8002d8c <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE, CHIRP_LOG_START_FREQ,
 8002a38:	eddf 2a82 	vldr	s5, [pc, #520]	@ 8002c44 <plotter_begin+0x268>
 8002a3c:	ed9f 2a82 	vldr	s4, [pc, #520]	@ 8002c48 <plotter_begin+0x26c>
 8002a40:	2101      	movs	r1, #1
 8002a42:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002a46:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002a4a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002a4e:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8002c44 <plotter_begin+0x268>
 8002a52:	4881      	ldr	r0, [pc, #516]	@ (8002c58 <plotter_begin+0x27c>)
 8002a54:	f000 fa23 	bl	8002e9e <SIGNAL_config_chirp>
	                   CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	                   CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4880      	ldr	r0, [pc, #512]	@ (8002c5c <plotter_begin+0x280>)
 8002a5c:	f000 f996 	bl	8002d8c <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002a60:	ed9f 3a78 	vldr	s6, [pc, #480]	@ 8002c44 <plotter_begin+0x268>
 8002a64:	eddf 2a78 	vldr	s5, [pc, #480]	@ 8002c48 <plotter_begin+0x26c>
 8002a68:	ed9f 2a78 	vldr	s4, [pc, #480]	@ 8002c4c <plotter_begin+0x270>
 8002a6c:	eddf 1a77 	vldr	s3, [pc, #476]	@ 8002c4c <plotter_begin+0x270>
 8002a70:	ed9f 1a7b 	vldr	s2, [pc, #492]	@ 8002c60 <plotter_begin+0x284>
 8002a74:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002a78:	ed9f 0a72 	vldr	s0, [pc, #456]	@ 8002c44 <plotter_begin+0x268>
 8002a7c:	4877      	ldr	r0, [pc, #476]	@ (8002c5c <plotter_begin+0x280>)
 8002a7e:	f000 fa42 	bl	8002f06 <SIGNAL_config_square>
	                    SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	                    SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002a82:	2103      	movs	r1, #3
 8002a84:	4877      	ldr	r0, [pc, #476]	@ (8002c64 <plotter_begin+0x288>)
 8002a86:	f000 f981 	bl	8002d8c <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002a8a:	eddf 3a6e 	vldr	s7, [pc, #440]	@ 8002c44 <plotter_begin+0x268>
 8002a8e:	ed9f 3a6e 	vldr	s6, [pc, #440]	@ 8002c48 <plotter_begin+0x26c>
 8002a92:	eddf 2a6e 	vldr	s5, [pc, #440]	@ 8002c4c <plotter_begin+0x270>
 8002a96:	ed9f 2a6d 	vldr	s4, [pc, #436]	@ 8002c4c <plotter_begin+0x270>
 8002a9a:	eddf 1a6a 	vldr	s3, [pc, #424]	@ 8002c44 <plotter_begin+0x268>
 8002a9e:	ed9f 1a6a 	vldr	s2, [pc, #424]	@ 8002c48 <plotter_begin+0x26c>
 8002aa2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002aa6:	ed9f 0a67 	vldr	s0, [pc, #412]	@ 8002c44 <plotter_begin+0x268>
 8002aaa:	486e      	ldr	r0, [pc, #440]	@ (8002c64 <plotter_begin+0x288>)
 8002aac:	f000 fa5b 	bl	8002f66 <SIGNAL_config_ramp>
	                  RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	                  RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002ab0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ab4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ab8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002abc:	496a      	ldr	r1, [pc, #424]	@ (8002c68 <plotter_begin+0x28c>)
 8002abe:	486b      	ldr	r0, [pc, #428]	@ (8002c6c <plotter_begin+0x290>)
 8002ac0:	f7fe ff24 	bl	800190c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002ac4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002acc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ad0:	4967      	ldr	r1, [pc, #412]	@ (8002c70 <plotter_begin+0x294>)
 8002ad2:	4868      	ldr	r0, [pc, #416]	@ (8002c74 <plotter_begin+0x298>)
 8002ad4:	f7fe ff1a 	bl	800190c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 8002ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4b66      	ldr	r3, [pc, #408]	@ (8002c78 <plotter_begin+0x29c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4966      	ldr	r1, [pc, #408]	@ (8002c7c <plotter_begin+0x2a0>)
 8002ae4:	4866      	ldr	r0, [pc, #408]	@ (8002c80 <plotter_begin+0x2a4>)
 8002ae6:	f7fe faab 	bl	8001040 <MDXX_GPIO_init>
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 8002aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002af4:	2204      	movs	r2, #4
 8002af6:	4961      	ldr	r1, [pc, #388]	@ (8002c7c <plotter_begin+0x2a0>)
 8002af8:	4862      	ldr	r0, [pc, #392]	@ (8002c84 <plotter_begin+0x2a8>)
 8002afa:	f7fe faa1 	bl	8001040 <MDXX_GPIO_init>

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002afe:	2208      	movs	r2, #8
 8002b00:	495e      	ldr	r1, [pc, #376]	@ (8002c7c <plotter_begin+0x2a0>)
 8002b02:	4861      	ldr	r0, [pc, #388]	@ (8002c88 <plotter_begin+0x2ac>)
 8002b04:	f7fe fdda 	bl	80016bc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002b08:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002c4c <plotter_begin+0x270>
 8002b0c:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8002c8c <plotter_begin+0x2b0>
 8002b10:	485b      	ldr	r0, [pc, #364]	@ (8002c80 <plotter_begin+0x2a4>)
 8002b12:	f7fe fab9 	bl	8001088 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002b16:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002c4c <plotter_begin+0x270>
 8002b1a:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8002c8c <plotter_begin+0x2b0>
 8002b1e:	4859      	ldr	r0, [pc, #356]	@ (8002c84 <plotter_begin+0x2a8>)
 8002b20:	f7fe fab2 	bl	8001088 <MDXX_set_range>
	PWM_write_range(&servo, 2000, 0);
 8002b24:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8002c4c <plotter_begin+0x270>
 8002b28:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8002c8c <plotter_begin+0x2b0>
 8002b2c:	4856      	ldr	r0, [pc, #344]	@ (8002c88 <plotter_begin+0x2ac>)
 8002b2e:	f7fe fde7 	bl	8001700 <PWM_write_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 0, 0, 0, 65535);
 8002b32:	eddf 1a57 	vldr	s3, [pc, #348]	@ 8002c90 <plotter_begin+0x2b4>
 8002b36:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 8002c4c <plotter_begin+0x270>
 8002b3a:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8002c4c <plotter_begin+0x270>
 8002b3e:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002c4c <plotter_begin+0x270>
 8002b42:	4854      	ldr	r0, [pc, #336]	@ (8002c94 <plotter_begin+0x2b8>)
 8002b44:	f7fe fa52 	bl	8000fec <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 0, 0, 0, 65535);
 8002b48:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8002c90 <plotter_begin+0x2b4>
 8002b4c:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8002c4c <plotter_begin+0x270>
 8002b50:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8002c4c <plotter_begin+0x270>
 8002b54:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8002c4c <plotter_begin+0x270>
 8002b58:	484f      	ldr	r0, [pc, #316]	@ (8002c98 <plotter_begin+0x2bc>)
 8002b5a:	f7fe fa47 	bl	8000fec <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 8002b5e:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 8002c90 <plotter_begin+0x2b4>
 8002b62:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8002c4c <plotter_begin+0x270>
 8002b66:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002c4c <plotter_begin+0x270>
 8002b6a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8002c4c <plotter_begin+0x270>
 8002b6e:	484b      	ldr	r0, [pc, #300]	@ (8002c9c <plotter_begin+0x2c0>)
 8002b70:	f7fe fa3c 	bl	8000fec <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8002b74:	eddf 1a46 	vldr	s3, [pc, #280]	@ 8002c90 <plotter_begin+0x2b4>
 8002b78:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8002c4c <plotter_begin+0x270>
 8002b7c:	eddf 0a33 	vldr	s1, [pc, #204]	@ 8002c4c <plotter_begin+0x270>
 8002b80:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8002c4c <plotter_begin+0x270>
 8002b84:	4846      	ldr	r0, [pc, #280]	@ (8002ca0 <plotter_begin+0x2c4>)
 8002b86:	f7fe fa31 	bl	8000fec <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002b8a:	4946      	ldr	r1, [pc, #280]	@ (8002ca4 <plotter_begin+0x2c8>)
 8002b8c:	4846      	ldr	r0, [pc, #280]	@ (8002ca8 <plotter_begin+0x2cc>)
 8002b8e:	f7fe fb55 	bl	800123c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002b92:	4946      	ldr	r1, [pc, #280]	@ (8002cac <plotter_begin+0x2d0>)
 8002b94:	4846      	ldr	r0, [pc, #280]	@ (8002cb0 <plotter_begin+0x2d4>)
 8002b96:	f7fe fb71 	bl	800127c <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant, &Disturbance_Constant);
 8002b9a:	4a46      	ldr	r2, [pc, #280]	@ (8002cb4 <plotter_begin+0x2d8>)
 8002b9c:	4941      	ldr	r1, [pc, #260]	@ (8002ca4 <plotter_begin+0x2c8>)
 8002b9e:	4846      	ldr	r0, [pc, #280]	@ (8002cb8 <plotter_begin+0x2dc>)
 8002ba0:	f7fe fb5a 	bl	8001258 <REVOLUTE_MOTOR_DFD_Init>
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant, &Disturbance_Constant);
 8002ba4:	4a43      	ldr	r2, [pc, #268]	@ (8002cb4 <plotter_begin+0x2d8>)
 8002ba6:	4941      	ldr	r1, [pc, #260]	@ (8002cac <plotter_begin+0x2d0>)
 8002ba8:	4844      	ldr	r0, [pc, #272]	@ (8002cbc <plotter_begin+0x2e0>)
 8002baa:	f7fe fb75 	bl	8001298 <PRISMATIC_MOTOR_DFD_Init>

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 8002bae:	2304      	movs	r3, #4
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8002cc0 <plotter_begin+0x2e4>
 8002bb6:	ed9f 0a43 	vldr	s0, [pc, #268]	@ 8002cc4 <plotter_begin+0x2e8>
 8002bba:	2328      	movs	r3, #40	@ 0x28
 8002bbc:	4a42      	ldr	r2, [pc, #264]	@ (8002cc8 <plotter_begin+0x2ec>)
 8002bbe:	4943      	ldr	r1, [pc, #268]	@ (8002ccc <plotter_begin+0x2f0>)
 8002bc0:	4843      	ldr	r0, [pc, #268]	@ (8002cd0 <plotter_begin+0x2f4>)
 8002bc2:	f7fe f8fd 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002bc6:	4842      	ldr	r0, [pc, #264]	@ (8002cd0 <plotter_begin+0x2f4>)
 8002bc8:	f7fe f92f 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002bcc:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8002cd4 <plotter_begin+0x2f8>
 8002bd0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002bd4:	211f      	movs	r1, #31
 8002bd6:	4840      	ldr	r0, [pc, #256]	@ (8002cd8 <plotter_begin+0x2fc>)
 8002bd8:	f7fe fb70 	bl	80012bc <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002bdc:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8002cd4 <plotter_begin+0x2f8>
 8002be0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002be4:	211f      	movs	r1, #31
 8002be6:	483d      	ldr	r0, [pc, #244]	@ (8002cdc <plotter_begin+0x300>)
 8002be8:	f7fe fb68 	bl	80012bc <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002bec:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8002cd4 <plotter_begin+0x2f8>
 8002bf0:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002bf4:	211f      	movs	r1, #31
 8002bf6:	483a      	ldr	r0, [pc, #232]	@ (8002ce0 <plotter_begin+0x304>)
 8002bf8:	f7fe fb60 	bl	80012bc <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002bfc:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8002cd4 <plotter_begin+0x2f8>
 8002c00:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002c04:	211f      	movs	r1, #31
 8002c06:	4837      	ldr	r0, [pc, #220]	@ (8002ce4 <plotter_begin+0x308>)
 8002c08:	f7fe fb58 	bl	80012bc <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 8002c0c:	4a36      	ldr	r2, [pc, #216]	@ (8002ce8 <plotter_begin+0x30c>)
 8002c0e:	4937      	ldr	r1, [pc, #220]	@ (8002cec <plotter_begin+0x310>)
 8002c10:	4837      	ldr	r0, [pc, #220]	@ (8002cf0 <plotter_begin+0x314>)
 8002c12:	f7ff fb0f 	bl	8002234 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8002c16:	4a37      	ldr	r2, [pc, #220]	@ (8002cf4 <plotter_begin+0x318>)
 8002c18:	4937      	ldr	r1, [pc, #220]	@ (8002cf8 <plotter_begin+0x31c>)
 8002c1a:	4838      	ldr	r0, [pc, #224]	@ (8002cfc <plotter_begin+0x320>)
 8002c1c:	f7ff fb0a 	bl	8002234 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM, registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);
 8002c20:	23c8      	movs	r3, #200	@ 0xc8
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2315      	movs	r3, #21
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	4b35      	ldr	r3, [pc, #212]	@ (8002d00 <plotter_begin+0x324>)
 8002c2a:	4a36      	ldr	r2, [pc, #216]	@ (8002d04 <plotter_begin+0x328>)
 8002c2c:	4936      	ldr	r1, [pc, #216]	@ (8002d08 <plotter_begin+0x32c>)
 8002c2e:	4837      	ldr	r0, [pc, #220]	@ (8002d0c <plotter_begin+0x330>)
 8002c30:	f7fe fcdc 	bl	80015ec <Modbus_init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002c34:	4836      	ldr	r0, [pc, #216]	@ (8002d10 <plotter_begin+0x334>)
 8002c36:	f004 fb49 	bl	80072cc <HAL_TIM_Base_Start_IT>
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	20000524 	.word	0x20000524
 8002c44:	3e6eeeef 	.word	0x3e6eeeef
 8002c48:	be6eeeef 	.word	0xbe6eeeef
 8002c4c:	00000000 	.word	0x00000000
 8002c50:	3d4ccccd 	.word	0x3d4ccccd
 8002c54:	20000568 	.word	0x20000568
 8002c58:	200005ac 	.word	0x200005ac
 8002c5c:	200005f0 	.word	0x200005f0
 8002c60:	3e99999a 	.word	0x3e99999a
 8002c64:	20000634 	.word	0x20000634
 8002c68:	20001540 	.word	0x20001540
 8002c6c:	20000394 	.word	0x20000394
 8002c70:	2000160c 	.word	0x2000160c
 8002c74:	200003e0 	.word	0x200003e0
 8002c78:	48000800 	.word	0x48000800
 8002c7c:	200017a4 	.word	0x200017a4
 8002c80:	200002fc 	.word	0x200002fc
 8002c84:	20000348 	.word	0x20000348
 8002c88:	200004f4 	.word	0x200004f4
 8002c8c:	44fa0000 	.word	0x44fa0000
 8002c90:	477fff00 	.word	0x477fff00
 8002c94:	2000042c 	.word	0x2000042c
 8002c98:	20000458 	.word	0x20000458
 8002c9c:	20000484 	.word	0x20000484
 8002ca0:	200004b0 	.word	0x200004b0
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	200004e8 	.word	0x200004e8
 8002cac:	20000048 	.word	0x20000048
 8002cb0:	200004dc 	.word	0x200004dc
 8002cb4:	20000090 	.word	0x20000090
 8002cb8:	200004ec 	.word	0x200004ec
 8002cbc:	200004e0 	.word	0x200004e0
 8002cc0:	457ff000 	.word	0x457ff000
 8002cc4:	40533333 	.word	0x40533333
 8002cc8:	20000da8 	.word	0x20000da8
 8002ccc:	200001e0 	.word	0x200001e0
 8002cd0:	2000050c 	.word	0x2000050c
 8002cd4:	447a0000 	.word	0x447a0000
 8002cd8:	20000684 	.word	0x20000684
 8002cdc:	20000678 	.word	0x20000678
 8002ce0:	2000069c 	.word	0x2000069c
 8002ce4:	20000690 	.word	0x20000690
 8002ce8:	20000154 	.word	0x20000154
 8002cec:	20000114 	.word	0x20000114
 8002cf0:	20000a28 	.word	0x20000a28
 8002cf4:	20000104 	.word	0x20000104
 8002cf8:	200000c4 	.word	0x200000c4
 8002cfc:	200006a8 	.word	0x200006a8
 8002d00:	200012d0 	.word	0x200012d0
 8002d04:	20001870 	.word	0x20001870
 8002d08:	2000193c 	.word	0x2000193c
 8002d0c:	20000df8 	.word	0x20000df8
 8002d10:	20001474 	.word	0x20001474

08002d14 <update_sensors>:

void update_sensors(void) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
    joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 10.0);
 8002d18:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002d1c:	2106      	movs	r1, #6
 8002d1e:	4815      	ldr	r0, [pc, #84]	@ (8002d74 <update_sensors+0x60>)
 8002d20:	f7fe f934 	bl	8000f8c <ADC_DMA_GetJoystick>
 8002d24:	eef0 7a40 	vmov.f32	s15, s0
 8002d28:	4b13      	ldr	r3, [pc, #76]	@ (8002d78 <update_sensors+0x64>)
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
    joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 10.0);
 8002d2e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002d32:	2107      	movs	r1, #7
 8002d34:	480f      	ldr	r0, [pc, #60]	@ (8002d74 <update_sensors+0x60>)
 8002d36:	f7fe f929 	bl	8000f8c <ADC_DMA_GetJoystick>
 8002d3a:	eef0 7a40 	vmov.f32	s15, s0
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d7c <update_sensors+0x68>)
 8002d40:	edc3 7a00 	vstr	s15, [r3]
    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
 8002d44:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002d80 <update_sensors+0x6c>
 8002d48:	2108      	movs	r1, #8
 8002d4a:	480a      	ldr	r0, [pc, #40]	@ (8002d74 <update_sensors+0x60>)
 8002d4c:	f7fe f8c8 	bl	8000ee0 <ADC_DMA_ComputeCurrent>
 8002d50:	eef0 7a40 	vmov.f32	s15, s0
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <update_sensors+0x70>)
 8002d56:	edc3 7a00 	vstr	s15, [r3]
    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
 8002d5a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002d80 <update_sensors+0x6c>
 8002d5e:	210f      	movs	r1, #15
 8002d60:	4804      	ldr	r0, [pc, #16]	@ (8002d74 <update_sensors+0x60>)
 8002d62:	f7fe f8bd 	bl	8000ee0 <ADC_DMA_ComputeCurrent>
 8002d66:	eef0 7a40 	vmov.f32	s15, s0
 8002d6a:	4b07      	ldr	r3, [pc, #28]	@ (8002d88 <update_sensors+0x74>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	2000050c 	.word	0x2000050c
 8002d78:	20001460 	.word	0x20001460
 8002d7c:	20001464 	.word	0x20001464
 8002d80:	3fd33333 	.word	0x3fd33333
 8002d84:	20001468 	.word	0x20001468
 8002d88:	2000146c 	.word	0x2000146c

08002d8c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002da4:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002dac:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002e40 <SIGNAL_init+0xb4>)
 8002dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002ddc:	78fb      	ldrb	r3, [r7, #3]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d828      	bhi.n	8002e34 <SIGNAL_init+0xa8>
 8002de2:	a201      	add	r2, pc, #4	@ (adr r2, 8002de8 <SIGNAL_init+0x5c>)
 8002de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de8:	08002e33 	.word	0x08002e33
 8002dec:	08002df9 	.word	0x08002df9
 8002df0:	08002e17 	.word	0x08002e17
 8002df4:	08002e21 	.word	0x08002e21
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e04:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a0e      	ldr	r2, [pc, #56]	@ (8002e44 <SIGNAL_init+0xb8>)
 8002e0a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e12:	621a      	str	r2, [r3, #32]
            break;
 8002e14:	e00e      	b.n	8002e34 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8002e1e:	e009      	b.n	8002e34 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e2e:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8002e30:	e000      	b.n	8002e34 <SIGNAL_init+0xa8>
            break;
 8002e32:	bf00      	nop
    }
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	bf800000 	.word	0xbf800000
 8002e44:	41200000 	.word	0x41200000

08002e48 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	@ 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	61f8      	str	r0, [r7, #28]
 8002e50:	ed87 0a06 	vstr	s0, [r7, #24]
 8002e54:	edc7 0a05 	vstr	s1, [r7, #20]
 8002e58:	ed87 1a04 	vstr	s2, [r7, #16]
 8002e5c:	edc7 1a03 	vstr	s3, [r7, #12]
 8002e60:	ed87 2a02 	vstr	s4, [r7, #8]
 8002e64:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	@ 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8002e9e:	b480      	push	{r7}
 8002ea0:	b089      	sub	sp, #36	@ 0x24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	61f8      	str	r0, [r7, #28]
 8002ea6:	ed87 0a06 	vstr	s0, [r7, #24]
 8002eaa:	edc7 0a05 	vstr	s1, [r7, #20]
 8002eae:	ed87 1a04 	vstr	s2, [r7, #16]
 8002eb2:	edc7 1a03 	vstr	s3, [r7, #12]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ebc:	edc7 2a00 	vstr	s5, [r7]
 8002ec0:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	68fa      	ldr	r2, [r7, #12]
 8002ede:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	7afa      	ldrb	r2, [r7, #11]
 8002ee4:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002efa:	bf00      	nop
 8002efc:	3724      	adds	r7, #36	@ 0x24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8002f06:	b480      	push	{r7}
 8002f08:	b089      	sub	sp, #36	@ 0x24
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	61f8      	str	r0, [r7, #28]
 8002f0e:	ed87 0a06 	vstr	s0, [r7, #24]
 8002f12:	edc7 0a05 	vstr	s1, [r7, #20]
 8002f16:	ed87 1a04 	vstr	s2, [r7, #16]
 8002f1a:	edc7 1a03 	vstr	s3, [r7, #12]
 8002f1e:	ed87 2a02 	vstr	s4, [r7, #8]
 8002f22:	edc7 2a01 	vstr	s5, [r7, #4]
 8002f26:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002f5a:	bf00      	nop
 8002f5c:	3724      	adds	r7, #36	@ 0x24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8002f66:	b480      	push	{r7}
 8002f68:	b08b      	sub	sp, #44	@ 0x2c
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8002f6e:	ed87 0a08 	vstr	s0, [r7, #32]
 8002f72:	edc7 0a07 	vstr	s1, [r7, #28]
 8002f76:	ed87 1a06 	vstr	s2, [r7, #24]
 8002f7a:	edc7 1a05 	vstr	s3, [r7, #20]
 8002f7e:	ed87 2a04 	vstr	s4, [r7, #16]
 8002f82:	edc7 2a03 	vstr	s5, [r7, #12]
 8002f86:	ed87 3a02 	vstr	s6, [r7, #8]
 8002f8a:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	2203      	movs	r2, #3
 8002f92:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8002f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f96:	6a3a      	ldr	r2, [r7, #32]
 8002f98:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	69fa      	ldr	r2, [r7, #28]
 8002f9e:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002fc4:	bf00      	nop
 8002fc6:	372c      	adds	r7, #44	@ 0x2c
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003014 <HAL_MspInit+0x44>)
 8002fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fda:	4a0e      	ldr	r2, [pc, #56]	@ (8003014 <HAL_MspInit+0x44>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_MspInit+0x44>)
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_MspInit+0x44>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <HAL_MspInit+0x44>)
 8002ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ffa:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <HAL_MspInit+0x44>)
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003006:	f003 f901 	bl	800620c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <NMI_Handler+0x4>

08003020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <HardFault_Handler+0x4>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <MemManage_Handler+0x4>

08003030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	bf00      	nop
 800303e:	e7fd      	b.n	800303c <UsageFault_Handler+0x4>

08003040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304e:	b480      	push	{r7}
 8003050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003052:	bf00      	nop
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306e:	f000 fd87 	bl	8003b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800307c:	4802      	ldr	r0, [pc, #8]	@ (8003088 <DMA1_Channel1_IRQHandler+0x10>)
 800307e:	f002 fd08 	bl	8005a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000024c 	.word	0x2000024c

0800308c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <DMA1_Channel2_IRQHandler+0x10>)
 8003092:	f002 fcfe 	bl	8005a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20001a08 	.word	0x20001a08

080030a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <DMA1_Channel3_IRQHandler+0x10>)
 80030a6:	f002 fcf4 	bl	8005a92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20001a68 	.word	0x20001a68

080030b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80030ba:	f004 fd37 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20001870 	.word	0x20001870

080030c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <TIM2_IRQHandler+0x10>)
 80030ce:	f004 fd2d 	bl	8007b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20001474 	.word	0x20001474

080030dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <USART2_IRQHandler+0x10>)
 80030e2:	f006 fa77 	bl	80095d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	2000193c 	.word	0x2000193c

080030f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80030f4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030f8:	f002 ffcc 	bl	8006094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030fc:	bf00      	nop
 80030fe:	bd80      	pop	{r7, pc}

08003100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <_sbrk+0x5c>)
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <_sbrk+0x60>)
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <_sbrk+0x64>)
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <_sbrk+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <_sbrk+0x64>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003130:	f007 fff6 	bl	800b120 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e009      	b.n	8003154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003140:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	4a05      	ldr	r2, [pc, #20]	@ (8003164 <_sbrk+0x64>)
 8003150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20020000 	.word	0x20020000
 8003160:	00000400 	.word	0x00000400
 8003164:	20001470 	.word	0x20001470
 8003168:	20001c18 	.word	0x20001c18

0800316c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031b0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80031b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80031b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031b8:	22a9      	movs	r2, #169	@ 0xa9
 80031ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80031c2:	4b19      	ldr	r3, [pc, #100]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80031c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ca:	4b17      	ldr	r3, [pc, #92]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d0:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031d6:	4814      	ldr	r0, [pc, #80]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031d8:	f003 ffa4 	bl	8007124 <HAL_TIM_Base_Init>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80031e2:	f7ff fbf5 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031ec:	f107 0310 	add.w	r3, r7, #16
 80031f0:	4619      	mov	r1, r3
 80031f2:	480d      	ldr	r0, [pc, #52]	@ (8003228 <MX_TIM2_Init+0x98>)
 80031f4:	f004 ff28 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80031fe:	f7ff fbe7 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800320a:	1d3b      	adds	r3, r7, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4806      	ldr	r0, [pc, #24]	@ (8003228 <MX_TIM2_Init+0x98>)
 8003210:	f005 ff00 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800321a:	f7ff fbd9 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20001474 	.word	0x20001474

0800322c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08c      	sub	sp, #48	@ 0x30
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003232:	f107 030c 	add.w	r3, r7, #12
 8003236:	2224      	movs	r2, #36	@ 0x24
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f007 ff58 	bl	800b0f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003240:	463b      	mov	r3, r7
 8003242:	2200      	movs	r2, #0
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
 8003248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800324a:	4b21      	ldr	r3, [pc, #132]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 800324c:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <MX_TIM3_Init+0xa8>)
 800324e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003250:	4b1f      	ldr	r3, [pc, #124]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 8003252:	2200      	movs	r2, #0
 8003254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 8003258:	2200      	movs	r2, #0
 800325a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800325c:	4b1c      	ldr	r3, [pc, #112]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 800325e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003264:	4b1a      	ldr	r3, [pc, #104]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 8003266:	2200      	movs	r2, #0
 8003268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800326a:	4b19      	ldr	r3, [pc, #100]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003270:	2303      	movs	r3, #3
 8003272:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003278:	2301      	movs	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800327c:	2300      	movs	r3, #0
 800327e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003280:	2300      	movs	r3, #0
 8003282:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800328c:	2300      	movs	r3, #0
 800328e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003294:	f107 030c 	add.w	r3, r7, #12
 8003298:	4619      	mov	r1, r3
 800329a:	480d      	ldr	r0, [pc, #52]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 800329c:	f004 fb04 	bl	80078a8 <HAL_TIM_Encoder_Init>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80032a6:	f7ff fb93 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032b2:	463b      	mov	r3, r7
 80032b4:	4619      	mov	r1, r3
 80032b6:	4806      	ldr	r0, [pc, #24]	@ (80032d0 <MX_TIM3_Init+0xa4>)
 80032b8:	f005 feac 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80032c2:	f7ff fb85 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	3730      	adds	r7, #48	@ 0x30
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	20001540 	.word	0x20001540
 80032d4:	40000400 	.word	0x40000400

080032d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	@ 0x30
 80032dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032de:	f107 030c 	add.w	r3, r7, #12
 80032e2:	2224      	movs	r2, #36	@ 0x24
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f007 ff02 	bl	800b0f0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ec:	463b      	mov	r3, r7
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80032f6:	4b21      	ldr	r3, [pc, #132]	@ (800337c <MX_TIM4_Init+0xa4>)
 80032f8:	4a21      	ldr	r2, [pc, #132]	@ (8003380 <MX_TIM4_Init+0xa8>)
 80032fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80032fc:	4b1f      	ldr	r3, [pc, #124]	@ (800337c <MX_TIM4_Init+0xa4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003302:	4b1e      	ldr	r3, [pc, #120]	@ (800337c <MX_TIM4_Init+0xa4>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003308:	4b1c      	ldr	r3, [pc, #112]	@ (800337c <MX_TIM4_Init+0xa4>)
 800330a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800330e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <MX_TIM4_Init+0xa4>)
 8003312:	2200      	movs	r2, #0
 8003314:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003316:	4b19      	ldr	r3, [pc, #100]	@ (800337c <MX_TIM4_Init+0xa4>)
 8003318:	2200      	movs	r2, #0
 800331a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800331c:	2303      	movs	r3, #3
 800331e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003324:	2301      	movs	r3, #1
 8003326:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003330:	2300      	movs	r3, #0
 8003332:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003334:	2301      	movs	r3, #1
 8003336:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003338:	2300      	movs	r3, #0
 800333a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003340:	f107 030c 	add.w	r3, r7, #12
 8003344:	4619      	mov	r1, r3
 8003346:	480d      	ldr	r0, [pc, #52]	@ (800337c <MX_TIM4_Init+0xa4>)
 8003348:	f004 faae 	bl	80078a8 <HAL_TIM_Encoder_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003352:	f7ff fb3d 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800335e:	463b      	mov	r3, r7
 8003360:	4619      	mov	r1, r3
 8003362:	4806      	ldr	r0, [pc, #24]	@ (800337c <MX_TIM4_Init+0xa4>)
 8003364:	f005 fe56 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800336e:	f7ff fb2f 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003372:	bf00      	nop
 8003374:	3730      	adds	r7, #48	@ 0x30
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000160c 	.word	0x2000160c
 8003380:	40000800 	.word	0x40000800

08003384 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800338a:	f107 0310 	add.w	r3, r7, #16
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	605a      	str	r2, [r3, #4]
 8003394:	609a      	str	r2, [r3, #8]
 8003396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003398:	1d3b      	adds	r3, r7, #4
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80033a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033a4:	4a1d      	ldr	r2, [pc, #116]	@ (800341c <MX_TIM5_Init+0x98>)
 80033a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033aa:	22a9      	movs	r2, #169	@ 0xa9
 80033ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80033b4:	4b18      	ldr	r3, [pc, #96]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033bc:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c2:	4b15      	ldr	r3, [pc, #84]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80033c8:	4813      	ldr	r0, [pc, #76]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033ca:	f003 feab 	bl	8007124 <HAL_TIM_Base_Init>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80033d4:	f7ff fafc 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4619      	mov	r1, r3
 80033e4:	480c      	ldr	r0, [pc, #48]	@ (8003418 <MX_TIM5_Init+0x94>)
 80033e6:	f004 fe2f 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80033f0:	f7ff faee 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f4:	2300      	movs	r3, #0
 80033f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033fc:	1d3b      	adds	r3, r7, #4
 80033fe:	4619      	mov	r1, r3
 8003400:	4805      	ldr	r0, [pc, #20]	@ (8003418 <MX_TIM5_Init+0x94>)
 8003402:	f005 fe07 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800340c:	f7ff fae0 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003410:	bf00      	nop
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200016d8 	.word	0x200016d8
 800341c:	40000c00 	.word	0x40000c00

08003420 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b09c      	sub	sp, #112	@ 0x70
 8003424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003426:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003434:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003440:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
 8003450:	615a      	str	r2, [r3, #20]
 8003452:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003454:	1d3b      	adds	r3, r7, #4
 8003456:	2234      	movs	r2, #52	@ 0x34
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f007 fe48 	bl	800b0f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003460:	4b51      	ldr	r3, [pc, #324]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003462:	4a52      	ldr	r2, [pc, #328]	@ (80035ac <MX_TIM8_Init+0x18c>)
 8003464:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003466:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800346c:	4b4e      	ldr	r3, [pc, #312]	@ (80035a8 <MX_TIM8_Init+0x188>)
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003472:	4b4d      	ldr	r3, [pc, #308]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003474:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003478:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347a:	4b4b      	ldr	r3, [pc, #300]	@ (80035a8 <MX_TIM8_Init+0x188>)
 800347c:	2200      	movs	r2, #0
 800347e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003480:	4b49      	ldr	r3, [pc, #292]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003482:	2200      	movs	r2, #0
 8003484:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003486:	4b48      	ldr	r3, [pc, #288]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003488:	2200      	movs	r2, #0
 800348a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800348c:	4846      	ldr	r0, [pc, #280]	@ (80035a8 <MX_TIM8_Init+0x188>)
 800348e:	f003 fe49 	bl	8007124 <HAL_TIM_Base_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003498:	f7ff fa9a 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800349c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80034a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80034a6:	4619      	mov	r1, r3
 80034a8:	483f      	ldr	r0, [pc, #252]	@ (80035a8 <MX_TIM8_Init+0x188>)
 80034aa:	f004 fdcd 	bl	8008048 <HAL_TIM_ConfigClockSource>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80034b4:	f7ff fa8c 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80034b8:	483b      	ldr	r0, [pc, #236]	@ (80035a8 <MX_TIM8_Init+0x188>)
 80034ba:	f003 ff7f 	bl	80073bc <HAL_TIM_PWM_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80034c4:	f7ff fa84 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c8:	2300      	movs	r3, #0
 80034ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80034cc:	2300      	movs	r3, #0
 80034ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d0:	2300      	movs	r3, #0
 80034d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80034d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80034d8:	4619      	mov	r1, r3
 80034da:	4833      	ldr	r0, [pc, #204]	@ (80035a8 <MX_TIM8_Init+0x188>)
 80034dc:	f005 fd9a 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80034e6:	f7ff fa73 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ea:	2360      	movs	r3, #96	@ 0x60
 80034ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f2:	2300      	movs	r3, #0
 80034f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80034f6:	2300      	movs	r3, #0
 80034f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034fe:	2300      	movs	r3, #0
 8003500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003502:	2300      	movs	r3, #0
 8003504:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003506:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800350a:	2200      	movs	r2, #0
 800350c:	4619      	mov	r1, r3
 800350e:	4826      	ldr	r0, [pc, #152]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003510:	f004 fc86 	bl	8007e20 <HAL_TIM_PWM_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800351a:	f7ff fa59 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800351e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003522:	2204      	movs	r2, #4
 8003524:	4619      	mov	r1, r3
 8003526:	4820      	ldr	r0, [pc, #128]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003528:	f004 fc7a 	bl	8007e20 <HAL_TIM_PWM_ConfigChannel>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003532:	f7ff fa4d 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003536:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800353a:	2208      	movs	r2, #8
 800353c:	4619      	mov	r1, r3
 800353e:	481a      	ldr	r0, [pc, #104]	@ (80035a8 <MX_TIM8_Init+0x188>)
 8003540:	f004 fc6e 	bl	8007e20 <HAL_TIM_PWM_ConfigChannel>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800354a:	f7ff fa41 	bl	80029d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003562:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800356c:	2300      	movs	r3, #0
 800356e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003574:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003578:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800357a:	2300      	movs	r3, #0
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800357e:	2300      	movs	r3, #0
 8003580:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003582:	2300      	movs	r3, #0
 8003584:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4807      	ldr	r0, [pc, #28]	@ (80035a8 <MX_TIM8_Init+0x188>)
 800358c:	f005 fdd8 	bl	8009140 <HAL_TIMEx_ConfigBreakDeadTime>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003596:	f7ff fa1b 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800359a:	4803      	ldr	r0, [pc, #12]	@ (80035a8 <MX_TIM8_Init+0x188>)
 800359c:	f000 f914 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 80035a0:	bf00      	nop
 80035a2:	3770      	adds	r7, #112	@ 0x70
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	200017a4 	.word	0x200017a4
 80035ac:	40013400 	.word	0x40013400

080035b0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80035b4:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035b6:	4a15      	ldr	r2, [pc, #84]	@ (800360c <MX_TIM16_Init+0x5c>)
 80035b8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80035ba:	4b13      	ldr	r3, [pc, #76]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035bc:	22a9      	movs	r2, #169	@ 0xa9
 80035be:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035c0:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035c8:	f240 4279 	movw	r2, #1145	@ 0x479
 80035cc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035dc:	2200      	movs	r2, #0
 80035de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80035e0:	4809      	ldr	r0, [pc, #36]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035e2:	f003 fd9f 	bl	8007124 <HAL_TIM_Base_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80035ec:	f7ff f9f0 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80035f0:	2108      	movs	r1, #8
 80035f2:	4805      	ldr	r0, [pc, #20]	@ (8003608 <MX_TIM16_Init+0x58>)
 80035f4:	f004 f862 	bl	80076bc <HAL_TIM_OnePulse_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80035fe:	f7ff f9e7 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20001870 	.word	0x20001870
 800360c:	40014400 	.word	0x40014400

08003610 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003620:	d114      	bne.n	800364c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003622:	4b2b      	ldr	r3, [pc, #172]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003628:	f043 0301 	orr.w	r3, r3, #1
 800362c:	6593      	str	r3, [r2, #88]	@ 0x58
 800362e:	4b28      	ldr	r3, [pc, #160]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2100      	movs	r1, #0
 800363e:	201c      	movs	r0, #28
 8003640:	f002 f80f 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003644:	201c      	movs	r0, #28
 8003646:	f002 f826 	bl	8005696 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800364a:	e03c      	b.n	80036c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a20      	ldr	r2, [pc, #128]	@ (80036d4 <HAL_TIM_Base_MspInit+0xc4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10c      	bne.n	8003670 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003656:	4b1e      	ldr	r3, [pc, #120]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365a:	4a1d      	ldr	r2, [pc, #116]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 800365c:	f043 0308 	orr.w	r3, r3, #8
 8003660:	6593      	str	r3, [r2, #88]	@ 0x58
 8003662:	4b1b      	ldr	r3, [pc, #108]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	693b      	ldr	r3, [r7, #16]
}
 800366e:	e02a      	b.n	80036c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a18      	ldr	r2, [pc, #96]	@ (80036d8 <HAL_TIM_Base_MspInit+0xc8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10c      	bne.n	8003694 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800367a:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 800367c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367e:	4a14      	ldr	r2, [pc, #80]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003680:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003684:	6613      	str	r3, [r2, #96]	@ 0x60
 8003686:	4b12      	ldr	r3, [pc, #72]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 8003688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	68fb      	ldr	r3, [r7, #12]
}
 8003692:	e018      	b.n	80036c6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a10      	ldr	r2, [pc, #64]	@ (80036dc <HAL_TIM_Base_MspInit+0xcc>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d113      	bne.n	80036c6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800369e:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 80036a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a2:	4a0b      	ldr	r2, [pc, #44]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 80036a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80036aa:	4b09      	ldr	r3, [pc, #36]	@ (80036d0 <HAL_TIM_Base_MspInit+0xc0>)
 80036ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	2019      	movs	r0, #25
 80036bc:	f001 ffd1 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80036c0:	2019      	movs	r0, #25
 80036c2:	f001 ffe8 	bl	8005696 <HAL_NVIC_EnableIRQ>
}
 80036c6:	bf00      	nop
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014400 	.word	0x40014400

080036e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08c      	sub	sp, #48	@ 0x30
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	f107 031c 	add.w	r3, r7, #28
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	605a      	str	r2, [r3, #4]
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	60da      	str	r2, [r3, #12]
 80036f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a2f      	ldr	r2, [pc, #188]	@ (80037bc <HAL_TIM_Encoder_MspInit+0xdc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d129      	bne.n	8003756 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003702:	4b2f      	ldr	r3, [pc, #188]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003706:	4a2e      	ldr	r2, [pc, #184]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	6593      	str	r3, [r2, #88]	@ 0x58
 800370e:	4b2c      	ldr	r3, [pc, #176]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371a:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800371c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371e:	4a28      	ldr	r2, [pc, #160]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	617b      	str	r3, [r7, #20]
 8003730:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003732:	23c0      	movs	r3, #192	@ 0xc0
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800373e:	2300      	movs	r3, #0
 8003740:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003742:	2302      	movs	r3, #2
 8003744:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	4619      	mov	r1, r3
 800374c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003750:	f002 faee 	bl	8005d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003754:	e02e      	b.n	80037b4 <HAL_TIM_Encoder_MspInit+0xd4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	@ (80037c4 <HAL_TIM_Encoder_MspInit+0xe4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d129      	bne.n	80037b4 <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003760:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	4a16      	ldr	r2, [pc, #88]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003766:	f043 0304 	orr.w	r3, r3, #4
 800376a:	6593      	str	r3, [r2, #88]	@ 0x58
 800376c:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003778:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377c:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003784:	4b0e      	ldr	r3, [pc, #56]	@ (80037c0 <HAL_TIM_Encoder_MspInit+0xe0>)
 8003786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003790:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80037a2:	230a      	movs	r3, #10
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80037b0:	f002 fabe 	bl	8005d30 <HAL_GPIO_Init>
}
 80037b4:	bf00      	nop
 80037b6:	3730      	adds	r7, #48	@ 0x30
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40000800 	.word	0x40000800

080037c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003864 <HAL_TIM_MspPostInit+0x9c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d138      	bne.n	800385c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	f003 0304 	and.w	r3, r3, #4
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	4b19      	ldr	r3, [pc, #100]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	4a18      	ldr	r2, [pc, #96]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 8003808:	f043 0302 	orr.w	r3, r3, #2
 800380c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800380e:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <HAL_TIM_MspPostInit+0xa0>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800381a:	23c0      	movs	r3, #192	@ 0xc0
 800381c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800382a:	2304      	movs	r3, #4
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	480d      	ldr	r0, [pc, #52]	@ (800386c <HAL_TIM_MspPostInit+0xa4>)
 8003836:	f002 fa7b 	bl	8005d30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800383a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800383e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003840:	2302      	movs	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800384c:	230a      	movs	r3, #10
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 0314 	add.w	r3, r7, #20
 8003854:	4619      	mov	r1, r3
 8003856:	4806      	ldr	r0, [pc, #24]	@ (8003870 <HAL_TIM_MspPostInit+0xa8>)
 8003858:	f002 fa6a 	bl	8005d30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800385c:	bf00      	nop
 800385e:	3728      	adds	r7, #40	@ 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40013400 	.word	0x40013400
 8003868:	40021000 	.word	0x40021000
 800386c:	48000800 	.word	0x48000800
 8003870:	48000400 	.word	0x48000400

08003874 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003878:	4b23      	ldr	r3, [pc, #140]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 800387a:	4a24      	ldr	r2, [pc, #144]	@ (800390c <MX_USART2_UART_Init+0x98>)
 800387c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800387e:	4b22      	ldr	r3, [pc, #136]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 8003880:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003886:	4b20      	ldr	r3, [pc, #128]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 8003888:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800388c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800388e:	4b1e      	ldr	r3, [pc, #120]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 8003890:	2200      	movs	r2, #0
 8003892:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003894:	4b1c      	ldr	r3, [pc, #112]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 8003896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800389a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b1a      	ldr	r3, [pc, #104]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b19      	ldr	r3, [pc, #100]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b17      	ldr	r3, [pc, #92]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038ae:	4b16      	ldr	r3, [pc, #88]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038b4:	4b14      	ldr	r3, [pc, #80]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038ba:	4b13      	ldr	r3, [pc, #76]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038bc:	2200      	movs	r2, #0
 80038be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038c0:	4811      	ldr	r0, [pc, #68]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038c2:	f005 fd21 	bl	8009308 <HAL_UART_Init>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80038cc:	f7ff f880 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038d0:	2100      	movs	r1, #0
 80038d2:	480d      	ldr	r0, [pc, #52]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038d4:	f007 fa74 	bl	800adc0 <HAL_UARTEx_SetTxFifoThreshold>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80038de:	f7ff f877 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038e2:	2100      	movs	r1, #0
 80038e4:	4808      	ldr	r0, [pc, #32]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038e6:	f007 faa9 	bl	800ae3c <HAL_UARTEx_SetRxFifoThreshold>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80038f0:	f7ff f86e 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80038f4:	4804      	ldr	r0, [pc, #16]	@ (8003908 <MX_USART2_UART_Init+0x94>)
 80038f6:	f007 fa2a 	bl	800ad4e <HAL_UARTEx_DisableFifoMode>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003900:	f7ff f866 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000193c 	.word	0x2000193c
 800390c:	40004400 	.word	0x40004400

08003910 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b09e      	sub	sp, #120	@ 0x78
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003928:	f107 0310 	add.w	r3, r7, #16
 800392c:	2254      	movs	r2, #84	@ 0x54
 800392e:	2100      	movs	r1, #0
 8003930:	4618      	mov	r0, r3
 8003932:	f007 fbdd 	bl	800b0f0 <memset>
  if(uartHandle->Instance==USART2)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a70 <HAL_UART_MspInit+0x160>)
 800393c:	4293      	cmp	r3, r2
 800393e:	f040 8092 	bne.w	8003a66 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003942:	2302      	movs	r3, #2
 8003944:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003946:	2300      	movs	r3, #0
 8003948:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	4618      	mov	r0, r3
 8003950:	f003 f99a 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800395a:	f7ff f839 	bl	80029d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800395e:	4b45      	ldr	r3, [pc, #276]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	4a44      	ldr	r2, [pc, #272]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 8003964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003968:	6593      	str	r3, [r2, #88]	@ 0x58
 800396a:	4b42      	ldr	r3, [pc, #264]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	4b3f      	ldr	r3, [pc, #252]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003982:	4b3c      	ldr	r3, [pc, #240]	@ (8003a74 <HAL_UART_MspInit+0x164>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800398e:	230c      	movs	r3, #12
 8003990:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399a:	2300      	movs	r3, #0
 800399c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800399e:	2307      	movs	r3, #7
 80039a0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80039a6:	4619      	mov	r1, r3
 80039a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ac:	f002 f9c0 	bl	8005d30 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80039b0:	4b31      	ldr	r3, [pc, #196]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039b2:	4a32      	ldr	r2, [pc, #200]	@ (8003a7c <HAL_UART_MspInit+0x16c>)
 80039b4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80039b6:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039b8:	221a      	movs	r2, #26
 80039ba:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ce:	4b2a      	ldr	r3, [pc, #168]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039d4:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039dc:	2200      	movs	r2, #0
 80039de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039e0:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039e6:	4824      	ldr	r0, [pc, #144]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039e8:	f001 fe70 	bl	80056cc <HAL_DMA_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80039f2:	f7fe ffed 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 80039fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80039fe:	4a1e      	ldr	r2, [pc, #120]	@ (8003a78 <HAL_UART_MspInit+0x168>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003a04:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a06:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <HAL_UART_MspInit+0x174>)
 8003a08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a0c:	221b      	movs	r2, #27
 8003a0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a12:	2210      	movs	r2, #16
 8003a14:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a16:	4b1a      	ldr	r3, [pc, #104]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a1c:	4b18      	ldr	r3, [pc, #96]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a22:	4b17      	ldr	r3, [pc, #92]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a28:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003a2e:	4b14      	ldr	r3, [pc, #80]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a34:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003a3a:	4811      	ldr	r0, [pc, #68]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a3c:	f001 fe46 	bl	80056cc <HAL_DMA_Init>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003a46:	f7fe ffc3 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a4e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a50:	4a0b      	ldr	r2, [pc, #44]	@ (8003a80 <HAL_UART_MspInit+0x170>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2026      	movs	r0, #38	@ 0x26
 8003a5c:	f001 fe01 	bl	8005662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a60:	2026      	movs	r0, #38	@ 0x26
 8003a62:	f001 fe18 	bl	8005696 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003a66:	bf00      	nop
 8003a68:	3778      	adds	r7, #120	@ 0x78
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40004400 	.word	0x40004400
 8003a74:	40021000 	.word	0x40021000
 8003a78:	20001a08 	.word	0x20001a08
 8003a7c:	4002001c 	.word	0x4002001c
 8003a80:	20001a68 	.word	0x20001a68
 8003a84:	40020030 	.word	0x40020030

08003a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a88:	480d      	ldr	r0, [pc, #52]	@ (8003ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a8a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a8c:	f7ff fb6e 	bl	800316c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a90:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a92:	490d      	ldr	r1, [pc, #52]	@ (8003ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <LoopForever+0xe>)
  movs r3, #0
 8003a96:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a98:	e002      	b.n	8003aa0 <LoopCopyDataInit>

08003a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a9e:	3304      	adds	r3, #4

08003aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003aa4:	d3f9      	bcc.n	8003a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8003ad4 <LoopForever+0x16>)
  movs r3, #0
 8003aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aac:	e001      	b.n	8003ab2 <LoopFillZerobss>

08003aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ab0:	3204      	adds	r2, #4

08003ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ab4:	d3fb      	bcc.n	8003aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ab6:	f007 fb39 	bl	800b12c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aba:	f7fe fd75 	bl	80025a8 <main>

08003abe <LoopForever>:

LoopForever:
    b LoopForever
 8003abe:	e7fe      	b.n	8003abe <LoopForever>
  ldr   r0, =_estack
 8003ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac8:	200001c0 	.word	0x200001c0
  ldr r2, =_sidata
 8003acc:	0800c11c 	.word	0x0800c11c
  ldr r2, =_sbss
 8003ad0:	200001c0 	.word	0x200001c0
  ldr r4, =_ebss
 8003ad4:	20001c14 	.word	0x20001c14

08003ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ad8:	e7fe      	b.n	8003ad8 <ADC1_2_IRQHandler>

08003ada <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f001 fdb1 	bl	800564c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003aea:	2000      	movs	r0, #0
 8003aec:	f000 f80e 	bl	8003b0c <HAL_InitTick>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	71fb      	strb	r3, [r7, #7]
 8003afa:	e001      	b.n	8003b00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003afc:	f7ff fa68 	bl	8002fd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b00:	79fb      	ldrb	r3, [r7, #7]

}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003b18:	4b16      	ldr	r3, [pc, #88]	@ (8003b74 <HAL_InitTick+0x68>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d022      	beq.n	8003b66 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003b20:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_InitTick+0x6c>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <HAL_InitTick+0x68>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fdbc 	bl	80056b2 <HAL_SYSTICK_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d10f      	bne.n	8003b60 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b0f      	cmp	r3, #15
 8003b44:	d809      	bhi.n	8003b5a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b46:	2200      	movs	r2, #0
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4e:	f001 fd88 	bl	8005662 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <HAL_InitTick+0x70>)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6013      	str	r3, [r2, #0]
 8003b58:	e007      	b.n	8003b6a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e004      	b.n	8003b6a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
 8003b64:	e001      	b.n	8003b6a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	2000016c 	.word	0x2000016c
 8003b78:	20000164 	.word	0x20000164
 8003b7c:	20000168 	.word	0x20000168

08003b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <HAL_IncTick+0x1c>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_IncTick+0x20>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	4a03      	ldr	r2, [pc, #12]	@ (8003b9c <HAL_IncTick+0x1c>)
 8003b90:	6013      	str	r3, [r2, #0]
}
 8003b92:	bf00      	nop
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20001ac8 	.word	0x20001ac8
 8003ba0:	2000016c 	.word	0x2000016c

08003ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <HAL_GetTick+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20001ac8 	.word	0x20001ac8

08003bbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3360      	adds	r3, #96	@ 0x60
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	4b08      	ldr	r3, [pc, #32]	@ (8003c68 <LL_ADC_SetOffset+0x44>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	4313      	orrs	r3, r2
 8003c54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003c5c:	bf00      	nop
 8003c5e:	371c      	adds	r7, #28
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	03fff000 	.word	0x03fff000

08003c6c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3360      	adds	r3, #96	@ 0x60
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3360      	adds	r3, #96	@ 0x60
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b087      	sub	sp, #28
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3360      	adds	r3, #96	@ 0x60
 8003cde:	461a      	mov	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003cf8:	bf00      	nop
 8003cfa:	371c      	adds	r7, #28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3360      	adds	r3, #96	@ 0x60
 8003d14:	461a      	mov	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	615a      	str	r2, [r3, #20]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b087      	sub	sp, #28
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	3330      	adds	r3, #48	@ 0x30
 8003d96:	461a      	mov	r2, r3
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	0a1b      	lsrs	r3, r3, #8
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	4413      	add	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	211f      	movs	r1, #31
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	0e9b      	lsrs	r3, r3, #26
 8003dbe:	f003 011f 	and.w	r1, r3, #31
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b087      	sub	sp, #28
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3314      	adds	r3, #20
 8003dee:	461a      	mov	r2, r3
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	0e5b      	lsrs	r3, r3, #25
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	4413      	add	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	0d1b      	lsrs	r3, r3, #20
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	2107      	movs	r1, #7
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	401a      	ands	r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	0d1b      	lsrs	r3, r3, #20
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e22:	431a      	orrs	r2, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003e28:	bf00      	nop
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	401a      	ands	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0318 	and.w	r3, r3, #24
 8003e56:	4908      	ldr	r1, [pc, #32]	@ (8003e78 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003e58:	40d9      	lsrs	r1, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	400b      	ands	r3, r1
 8003e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e62:	431a      	orrs	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003e6a:	bf00      	nop
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	0007ffff 	.word	0x0007ffff

08003e7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 031f 	and.w	r3, r3, #31
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ea8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6093      	str	r3, [r2, #8]
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ed0:	d101      	bne.n	8003ed6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8003ef4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ef8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f20:	d101      	bne.n	8003f26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f48:	f043 0201 	orr.w	r2, r3, #1
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f70:	f043 0202 	orr.w	r2, r3, #2
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <LL_ADC_IsEnabled+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <LL_ADC_IsEnabled+0x1a>
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d101      	bne.n	8003fc2 <LL_ADC_IsDisableOngoing+0x18>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <LL_ADC_IsDisableOngoing+0x1a>
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003fe4:	f043 0204 	orr.w	r2, r3, #4
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b04      	cmp	r3, #4
 800400a:	d101      	bne.n	8004010 <LL_ADC_REG_IsConversionOngoing+0x18>
 800400c:	2301      	movs	r3, #1
 800400e:	e000      	b.n	8004012 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b08      	cmp	r3, #8
 8004030:	d101      	bne.n	8004036 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800404c:	2300      	movs	r3, #0
 800404e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004050:	2300      	movs	r3, #0
 8004052:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e1a9      	b.n	80043b2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7fd ff59 	bl	8001f24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ff19 	bl	8003ebc <LL_ADC_IsDeepPowerDownEnabled>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d004      	beq.n	800409a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff feff 	bl	8003e98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ff34 	bl	8003f0c <LL_ADC_IsInternalRegulatorEnabled>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d115      	bne.n	80040d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff18 	bl	8003ee4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80040b4:	4b9c      	ldr	r3, [pc, #624]	@ (8004328 <HAL_ADC_Init+0x2e4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	4a9c      	ldr	r2, [pc, #624]	@ (800432c <HAL_ADC_Init+0x2e8>)
 80040bc:	fba2 2303 	umull	r2, r3, r2, r3
 80040c0:	099b      	lsrs	r3, r3, #6
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040c8:	e002      	b.n	80040d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f9      	bne.n	80040ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff16 	bl	8003f0c <LL_ADC_IsInternalRegulatorEnabled>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10d      	bne.n	8004102 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f7ff ff76 	bl	8003ff8 <LL_ADC_REG_IsConversionOngoing>
 800410c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f040 8142 	bne.w	80043a0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b00      	cmp	r3, #0
 8004120:	f040 813e 	bne.w	80043a0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004128:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800412c:	f043 0202 	orr.w	r2, r3, #2
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff23 	bl	8003f84 <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d141      	bne.n	80041c8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414c:	d004      	beq.n	8004158 <HAL_ADC_Init+0x114>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a77      	ldr	r2, [pc, #476]	@ (8004330 <HAL_ADC_Init+0x2ec>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10f      	bne.n	8004178 <HAL_ADC_Init+0x134>
 8004158:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800415c:	f7ff ff12 	bl	8003f84 <LL_ADC_IsEnabled>
 8004160:	4604      	mov	r4, r0
 8004162:	4873      	ldr	r0, [pc, #460]	@ (8004330 <HAL_ADC_Init+0x2ec>)
 8004164:	f7ff ff0e 	bl	8003f84 <LL_ADC_IsEnabled>
 8004168:	4603      	mov	r3, r0
 800416a:	4323      	orrs	r3, r4
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	e012      	b.n	800419e <HAL_ADC_Init+0x15a>
 8004178:	486e      	ldr	r0, [pc, #440]	@ (8004334 <HAL_ADC_Init+0x2f0>)
 800417a:	f7ff ff03 	bl	8003f84 <LL_ADC_IsEnabled>
 800417e:	4604      	mov	r4, r0
 8004180:	486d      	ldr	r0, [pc, #436]	@ (8004338 <HAL_ADC_Init+0x2f4>)
 8004182:	f7ff feff 	bl	8003f84 <LL_ADC_IsEnabled>
 8004186:	4603      	mov	r3, r0
 8004188:	431c      	orrs	r4, r3
 800418a:	486c      	ldr	r0, [pc, #432]	@ (800433c <HAL_ADC_Init+0x2f8>)
 800418c:	f7ff fefa 	bl	8003f84 <LL_ADC_IsEnabled>
 8004190:	4603      	mov	r3, r0
 8004192:	4323      	orrs	r3, r4
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d012      	beq.n	80041c8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041aa:	d004      	beq.n	80041b6 <HAL_ADC_Init+0x172>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a5f      	ldr	r2, [pc, #380]	@ (8004330 <HAL_ADC_Init+0x2ec>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d101      	bne.n	80041ba <HAL_ADC_Init+0x176>
 80041b6:	4a62      	ldr	r2, [pc, #392]	@ (8004340 <HAL_ADC_Init+0x2fc>)
 80041b8:	e000      	b.n	80041bc <HAL_ADC_Init+0x178>
 80041ba:	4a62      	ldr	r2, [pc, #392]	@ (8004344 <HAL_ADC_Init+0x300>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7ff fcfa 	bl	8003bbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	7f5b      	ldrb	r3, [r3, #29]
 80041cc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041d2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80041d8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80041de:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041e6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d106      	bne.n	8004204 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	3b01      	subs	r3, #1
 80041fc:	045b      	lsls	r3, r3, #17
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004218:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	4b48      	ldr	r3, [pc, #288]	@ (8004348 <HAL_ADC_Init+0x304>)
 8004228:	4013      	ands	r3, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	69b9      	ldr	r1, [r7, #24]
 8004230:	430b      	orrs	r3, r1
 8004232:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fee5 	bl	800401e <LL_ADC_INJ_IsConversionOngoing>
 8004254:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d17f      	bne.n	800435c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d17c      	bne.n	800435c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004266:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800426e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800427e:	f023 0302 	bic.w	r3, r3, #2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	430b      	orrs	r3, r1
 800428a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d017      	beq.n	80042c4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80042a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6911      	ldr	r1, [r2, #16]
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	430b      	orrs	r3, r1
 80042be:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80042c2:	e013      	b.n	80042ec <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80042d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80042e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042e8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d12a      	bne.n	800434c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004300:	f023 0304 	bic.w	r3, r3, #4
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800430c:	4311      	orrs	r1, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004312:	4311      	orrs	r1, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004318:	430a      	orrs	r2, r1
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	611a      	str	r2, [r3, #16]
 8004326:	e019      	b.n	800435c <HAL_ADC_Init+0x318>
 8004328:	20000164 	.word	0x20000164
 800432c:	053e2d63 	.word	0x053e2d63
 8004330:	50000100 	.word	0x50000100
 8004334:	50000400 	.word	0x50000400
 8004338:	50000500 	.word	0x50000500
 800433c:	50000600 	.word	0x50000600
 8004340:	50000300 	.word	0x50000300
 8004344:	50000700 	.word	0x50000700
 8004348:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0201 	bic.w	r2, r2, #1
 800435a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10c      	bne.n	800437e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f023 010f 	bic.w	r1, r3, #15
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	631a      	str	r2, [r3, #48]	@ 0x30
 800437c:	e007      	b.n	800438e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 020f 	bic.w	r2, r2, #15
 800438c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	f023 0303 	bic.w	r3, r3, #3
 8004396:	f043 0201 	orr.w	r2, r3, #1
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800439e:	e007      	b.n	80043b0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a4:	f043 0210 	orr.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd90      	pop	{r4, r7, pc}
 80043ba:	bf00      	nop

080043bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043d0:	d004      	beq.n	80043dc <HAL_ADC_Start_DMA+0x20>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5a      	ldr	r2, [pc, #360]	@ (8004540 <HAL_ADC_Start_DMA+0x184>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_Start_DMA+0x24>
 80043dc:	4b59      	ldr	r3, [pc, #356]	@ (8004544 <HAL_ADC_Start_DMA+0x188>)
 80043de:	e000      	b.n	80043e2 <HAL_ADC_Start_DMA+0x26>
 80043e0:	4b59      	ldr	r3, [pc, #356]	@ (8004548 <HAL_ADC_Start_DMA+0x18c>)
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fd4a 	bl	8003e7c <LL_ADC_GetMultimode>
 80043e8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fe02 	bl	8003ff8 <LL_ADC_REG_IsConversionOngoing>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 809b 	bne.w	8004532 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_ADC_Start_DMA+0x4e>
 8004406:	2302      	movs	r3, #2
 8004408:	e096      	b.n	8004538 <HAL_ADC_Start_DMA+0x17c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a4d      	ldr	r2, [pc, #308]	@ (800454c <HAL_ADC_Start_DMA+0x190>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d008      	beq.n	800442e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b05      	cmp	r3, #5
 8004426:	d002      	beq.n	800442e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b09      	cmp	r3, #9
 800442c:	d17a      	bne.n	8004524 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 fcf6 	bl	8004e20 <ADC_Enable>
 8004434:	4603      	mov	r3, r0
 8004436:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004438:	7dfb      	ldrb	r3, [r7, #23]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d16d      	bne.n	800451a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004446:	f023 0301 	bic.w	r3, r3, #1
 800444a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a3a      	ldr	r2, [pc, #232]	@ (8004540 <HAL_ADC_Start_DMA+0x184>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_ADC_Start_DMA+0xb4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a3b      	ldr	r2, [pc, #236]	@ (8004550 <HAL_ADC_Start_DMA+0x194>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d002      	beq.n	800446c <HAL_ADC_Start_DMA+0xb0>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	e003      	b.n	8004474 <HAL_ADC_Start_DMA+0xb8>
 800446c:	4b39      	ldr	r3, [pc, #228]	@ (8004554 <HAL_ADC_Start_DMA+0x198>)
 800446e:	e001      	b.n	8004474 <HAL_ADC_Start_DMA+0xb8>
 8004470:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	4293      	cmp	r3, r2
 800447a:	d002      	beq.n	8004482 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004486:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004492:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800449e:	f023 0206 	bic.w	r2, r3, #6
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	661a      	str	r2, [r3, #96]	@ 0x60
 80044a6:	e002      	b.n	80044ae <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b2:	4a29      	ldr	r2, [pc, #164]	@ (8004558 <HAL_ADC_Start_DMA+0x19c>)
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ba:	4a28      	ldr	r2, [pc, #160]	@ (800455c <HAL_ADC_Start_DMA+0x1a0>)
 80044bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	4a27      	ldr	r2, [pc, #156]	@ (8004560 <HAL_ADC_Start_DMA+0x1a4>)
 80044c4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	221c      	movs	r2, #28
 80044cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0210 	orr.w	r2, r2, #16
 80044e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f042 0201 	orr.w	r2, r2, #1
 80044f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3340      	adds	r3, #64	@ 0x40
 8004500:	4619      	mov	r1, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f001 f989 	bl	800581c <HAL_DMA_Start_IT>
 800450a:	4603      	mov	r3, r0
 800450c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fd5c 	bl	8003fd0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004518:	e00d      	b.n	8004536 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004522:	e008      	b.n	8004536 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004530:	e001      	b.n	8004536 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004532:	2302      	movs	r3, #2
 8004534:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004536:	7dfb      	ldrb	r3, [r7, #23]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	50000100 	.word	0x50000100
 8004544:	50000300 	.word	0x50000300
 8004548:	50000700 	.word	0x50000700
 800454c:	50000600 	.word	0x50000600
 8004550:	50000500 	.word	0x50000500
 8004554:	50000400 	.word	0x50000400
 8004558:	0800500b 	.word	0x0800500b
 800455c:	080050e3 	.word	0x080050e3
 8004560:	080050ff 	.word	0x080050ff

08004564 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b0b6      	sub	sp, #216	@ 0xd8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_ADC_ConfigChannel+0x24>
 80045be:	2302      	movs	r3, #2
 80045c0:	f000 bc13 	b.w	8004dea <HAL_ADC_ConfigChannel+0x84a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fd11 	bl	8003ff8 <LL_ADC_REG_IsConversionOngoing>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f040 83f3 	bne.w	8004dc4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	f7ff fbcb 	bl	8003d86 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fcff 	bl	8003ff8 <LL_ADC_REG_IsConversionOngoing>
 80045fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff fd0b 	bl	800401e <LL_ADC_INJ_IsConversionOngoing>
 8004608:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800460c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004610:	2b00      	cmp	r3, #0
 8004612:	f040 81d9 	bne.w	80049c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004616:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800461a:	2b00      	cmp	r3, #0
 800461c:	f040 81d4 	bne.w	80049c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004628:	d10f      	bne.n	800464a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6818      	ldr	r0, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	4619      	mov	r1, r3
 8004636:	f7ff fbd2 	bl	8003dde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff fb79 	bl	8003d3a <LL_ADC_SetSamplingTimeCommonConfig>
 8004648:	e00e      	b.n	8004668 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	461a      	mov	r2, r3
 8004658:	f7ff fbc1 	bl	8003dde <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fb69 	bl	8003d3a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	fa02 f303 	lsl.w	r3, r2, r3
 800467e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b04      	cmp	r3, #4
 8004688:	d022      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6919      	ldr	r1, [r3, #16]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800469a:	f7ff fac3 	bl	8003c24 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6919      	ldr	r1, [r3, #16]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7ff fb0f 	bl	8003cce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x126>
 80046c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046c4:	e000      	b.n	80046c8 <HAL_ADC_ConfigChannel+0x128>
 80046c6:	2300      	movs	r3, #0
 80046c8:	461a      	mov	r2, r3
 80046ca:	f7ff fb1b 	bl	8003d04 <LL_ADC_SetOffsetSaturation>
 80046ce:	e17b      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fac8 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 80046dc:	4603      	mov	r3, r0
 80046de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x15c>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff fabd 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 80046f2:	4603      	mov	r3, r0
 80046f4:	0e9b      	lsrs	r3, r3, #26
 80046f6:	f003 021f 	and.w	r2, r3, #31
 80046fa:	e01e      	b.n	800473a <HAL_ADC_ConfigChannel+0x19a>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff fab2 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 8004708:	4603      	mov	r3, r0
 800470a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800471a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800471e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004722:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800472a:	2320      	movs	r3, #32
 800472c:	e004      	b.n	8004738 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800472e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004732:	fab3 f383 	clz	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	2b00      	cmp	r3, #0
 8004744:	d105      	bne.n	8004752 <HAL_ADC_ConfigChannel+0x1b2>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	0e9b      	lsrs	r3, r3, #26
 800474c:	f003 031f 	and.w	r3, r3, #31
 8004750:	e018      	b.n	8004784 <HAL_ADC_ConfigChannel+0x1e4>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800476a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800476e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e004      	b.n	8004784 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800477a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800477e:	fab3 f383 	clz	r3, r3
 8004782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004784:	429a      	cmp	r2, r3
 8004786:	d106      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2200      	movs	r2, #0
 800478e:	2100      	movs	r1, #0
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fa81 	bl	8003c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fa65 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x222>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7ff fa5a 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 80047b8:	4603      	mov	r3, r0
 80047ba:	0e9b      	lsrs	r3, r3, #26
 80047bc:	f003 021f 	and.w	r2, r3, #31
 80047c0:	e01e      	b.n	8004800 <HAL_ADC_ConfigChannel+0x260>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff fa4f 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80047e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80047e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e004      	b.n	80047fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80047f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	2b00      	cmp	r3, #0
 800480a:	d105      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x278>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	e018      	b.n	800484a <HAL_ADC_ConfigChannel+0x2aa>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800482c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004830:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004834:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e004      	b.n	800484a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004844:	fab3 f383 	clz	r3, r3
 8004848:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800484a:	429a      	cmp	r2, r3
 800484c:	d106      	bne.n	800485c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fa1e 	bl	8003c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2102      	movs	r1, #2
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff fa02 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x2e8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2102      	movs	r1, #2
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff f9f7 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 800487e:	4603      	mov	r3, r0
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	f003 021f 	and.w	r2, r3, #31
 8004886:	e01e      	b.n	80048c6 <HAL_ADC_ConfigChannel+0x326>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2102      	movs	r1, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff f9ec 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 8004894:	4603      	mov	r3, r0
 8004896:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80048a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80048ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80048b6:	2320      	movs	r3, #32
 80048b8:	e004      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80048ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048be:	fab3 f383 	clz	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d105      	bne.n	80048de <HAL_ADC_ConfigChannel+0x33e>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	0e9b      	lsrs	r3, r3, #26
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	e016      	b.n	800490c <HAL_ADC_ConfigChannel+0x36c>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048ea:	fa93 f3a3 	rbit	r3, r3
 80048ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80048f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80048f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80048fe:	2320      	movs	r3, #32
 8004900:	e004      	b.n	800490c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004906:	fab3 f383 	clz	r3, r3
 800490a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800490c:	429a      	cmp	r2, r3
 800490e:	d106      	bne.n	800491e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2200      	movs	r2, #0
 8004916:	2102      	movs	r1, #2
 8004918:	4618      	mov	r0, r3
 800491a:	f7ff f9bd 	bl	8003c98 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2103      	movs	r1, #3
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff f9a1 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 800492a:	4603      	mov	r3, r0
 800492c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <HAL_ADC_ConfigChannel+0x3aa>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2103      	movs	r1, #3
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff f996 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 8004940:	4603      	mov	r3, r0
 8004942:	0e9b      	lsrs	r3, r3, #26
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	e017      	b.n	800497a <HAL_ADC_ConfigChannel+0x3da>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2103      	movs	r1, #3
 8004950:	4618      	mov	r0, r3
 8004952:	f7ff f98b 	bl	8003c6c <LL_ADC_GetOffsetChannel>
 8004956:	4603      	mov	r3, r0
 8004958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800495c:	fa93 f3a3 	rbit	r3, r3
 8004960:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004964:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800496c:	2320      	movs	r3, #32
 800496e:	e003      	b.n	8004978 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	2b00      	cmp	r3, #0
 8004984:	d105      	bne.n	8004992 <HAL_ADC_ConfigChannel+0x3f2>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	0e9b      	lsrs	r3, r3, #26
 800498c:	f003 031f 	and.w	r3, r3, #31
 8004990:	e011      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x416>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800499a:	fa93 f3a3 	rbit	r3, r3
 800499e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80049a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80049a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e003      	b.n	80049b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80049ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b0:	fab3 f383 	clz	r3, r3
 80049b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d106      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2200      	movs	r2, #0
 80049c0:	2103      	movs	r1, #3
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff f968 	bl	8003c98 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7ff fad9 	bl	8003f84 <LL_ADC_IsEnabled>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f040 813d 	bne.w	8004c54 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6818      	ldr	r0, [r3, #0]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	6819      	ldr	r1, [r3, #0]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7ff fa24 	bl	8003e34 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4aa2      	ldr	r2, [pc, #648]	@ (8004c7c <HAL_ADC_ConfigChannel+0x6dc>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	f040 812e 	bne.w	8004c54 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x480>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	3301      	adds	r3, #1
 8004a10:	f003 031f 	and.w	r3, r3, #31
 8004a14:	2b09      	cmp	r3, #9
 8004a16:	bf94      	ite	ls
 8004a18:	2301      	movls	r3, #1
 8004a1a:	2300      	movhi	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e019      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x4b4>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004a2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a30:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004a32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004a3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	f003 031f 	and.w	r3, r3, #31
 8004a4a:	2b09      	cmp	r3, #9
 8004a4c:	bf94      	ite	ls
 8004a4e:	2301      	movls	r3, #1
 8004a50:	2300      	movhi	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d079      	beq.n	8004b4c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d107      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x4d4>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	069b      	lsls	r3, r3, #26
 8004a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a72:	e015      	b.n	8004aa0 <HAL_ADC_ConfigChannel+0x500>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a84:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004a8c:	2320      	movs	r3, #32
 8004a8e:	e003      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a92:	fab3 f383 	clz	r3, r3
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	069b      	lsls	r3, r3, #26
 8004a9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d109      	bne.n	8004ac0 <HAL_ADC_ConfigChannel+0x520>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	e017      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x550>
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ad8:	2320      	movs	r3, #32
 8004ada:	e003      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ade:	fab3 f383 	clz	r3, r3
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	f003 031f 	and.w	r3, r3, #31
 8004aea:	2101      	movs	r1, #1
 8004aec:	fa01 f303 	lsl.w	r3, r1, r3
 8004af0:	ea42 0103 	orr.w	r1, r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10a      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x576>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	0e9b      	lsrs	r3, r3, #26
 8004b06:	3301      	adds	r3, #1
 8004b08:	f003 021f 	and.w	r2, r3, #31
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	4413      	add	r3, r2
 8004b12:	051b      	lsls	r3, r3, #20
 8004b14:	e018      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x5a8>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1e:	fa93 f3a3 	rbit	r3, r3
 8004b22:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004b2e:	2320      	movs	r3, #32
 8004b30:	e003      	b.n	8004b3a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b34:	fab3 f383 	clz	r3, r3
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	f003 021f 	and.w	r2, r3, #31
 8004b40:	4613      	mov	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4413      	add	r3, r2
 8004b46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	e07e      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d107      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x5c8>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	3301      	adds	r3, #1
 8004b60:	069b      	lsls	r3, r3, #26
 8004b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b66:	e015      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x5f4>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b70:	fa93 f3a3 	rbit	r3, r3
 8004b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004b80:	2320      	movs	r3, #32
 8004b82:	e003      	b.n	8004b8c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	fab3 f383 	clz	r3, r3
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	069b      	lsls	r3, r3, #26
 8004b90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x614>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0e9b      	lsrs	r3, r3, #26
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f003 031f 	and.w	r3, r3, #31
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	e017      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x644>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
  return result;
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004bcc:	2320      	movs	r3, #32
 8004bce:	e003      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 031f 	and.w	r3, r3, #31
 8004bde:	2101      	movs	r1, #1
 8004be0:	fa01 f303 	lsl.w	r3, r1, r3
 8004be4:	ea42 0103 	orr.w	r1, r2, r3
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10d      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x670>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	0e9b      	lsrs	r3, r3, #26
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f003 021f 	and.w	r2, r3, #31
 8004c00:	4613      	mov	r3, r2
 8004c02:	005b      	lsls	r3, r3, #1
 8004c04:	4413      	add	r3, r2
 8004c06:	3b1e      	subs	r3, #30
 8004c08:	051b      	lsls	r3, r3, #20
 8004c0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c0e:	e01b      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x6a8>
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	fa93 f3a3 	rbit	r3, r3
 8004c1c:	613b      	str	r3, [r7, #16]
  return result;
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004c28:	2320      	movs	r3, #32
 8004c2a:	e003      	b.n	8004c34 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	fab3 f383 	clz	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	f003 021f 	and.w	r2, r3, #31
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4413      	add	r3, r2
 8004c40:	3b1e      	subs	r3, #30
 8004c42:	051b      	lsls	r3, r3, #20
 8004c44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c4e:	4619      	mov	r1, r3
 8004c50:	f7ff f8c5 	bl	8003dde <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <HAL_ADC_ConfigChannel+0x6e0>)
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f000 80be 	beq.w	8004dde <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c6a:	d004      	beq.n	8004c76 <HAL_ADC_ConfigChannel+0x6d6>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a04      	ldr	r2, [pc, #16]	@ (8004c84 <HAL_ADC_ConfigChannel+0x6e4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10a      	bne.n	8004c8c <HAL_ADC_ConfigChannel+0x6ec>
 8004c76:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <HAL_ADC_ConfigChannel+0x6e8>)
 8004c78:	e009      	b.n	8004c8e <HAL_ADC_ConfigChannel+0x6ee>
 8004c7a:	bf00      	nop
 8004c7c:	407f0000 	.word	0x407f0000
 8004c80:	80080000 	.word	0x80080000
 8004c84:	50000100 	.word	0x50000100
 8004c88:	50000300 	.word	0x50000300
 8004c8c:	4b59      	ldr	r3, [pc, #356]	@ (8004df4 <HAL_ADC_ConfigChannel+0x854>)
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe ffba 	bl	8003c08 <LL_ADC_GetCommonPathInternalCh>
 8004c94:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a56      	ldr	r2, [pc, #344]	@ (8004df8 <HAL_ADC_ConfigChannel+0x858>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_ADC_ConfigChannel+0x70c>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a55      	ldr	r2, [pc, #340]	@ (8004dfc <HAL_ADC_ConfigChannel+0x85c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d13a      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d134      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc0:	d005      	beq.n	8004cce <HAL_ADC_ConfigChannel+0x72e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e00 <HAL_ADC_ConfigChannel+0x860>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	f040 8085 	bne.w	8004dd8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cd6:	d004      	beq.n	8004ce2 <HAL_ADC_ConfigChannel+0x742>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a49      	ldr	r2, [pc, #292]	@ (8004e04 <HAL_ADC_ConfigChannel+0x864>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d101      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x746>
 8004ce2:	4a49      	ldr	r2, [pc, #292]	@ (8004e08 <HAL_ADC_ConfigChannel+0x868>)
 8004ce4:	e000      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x748>
 8004ce6:	4a43      	ldr	r2, [pc, #268]	@ (8004df4 <HAL_ADC_ConfigChannel+0x854>)
 8004ce8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe ff75 	bl	8003be2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cf8:	4b44      	ldr	r3, [pc, #272]	@ (8004e0c <HAL_ADC_ConfigChannel+0x86c>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	099b      	lsrs	r3, r3, #6
 8004cfe:	4a44      	ldr	r2, [pc, #272]	@ (8004e10 <HAL_ADC_ConfigChannel+0x870>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	099b      	lsrs	r3, r3, #6
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d12:	e002      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3b01      	subs	r3, #1
 8004d18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f9      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d20:	e05a      	b.n	8004dd8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a3b      	ldr	r2, [pc, #236]	@ (8004e14 <HAL_ADC_ConfigChannel+0x874>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d125      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d11f      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a31      	ldr	r2, [pc, #196]	@ (8004e04 <HAL_ADC_ConfigChannel+0x864>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d104      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x7ac>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a34      	ldr	r2, [pc, #208]	@ (8004e18 <HAL_ADC_ConfigChannel+0x878>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d047      	beq.n	8004ddc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d54:	d004      	beq.n	8004d60 <HAL_ADC_ConfigChannel+0x7c0>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2a      	ldr	r2, [pc, #168]	@ (8004e04 <HAL_ADC_ConfigChannel+0x864>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d101      	bne.n	8004d64 <HAL_ADC_ConfigChannel+0x7c4>
 8004d60:	4a29      	ldr	r2, [pc, #164]	@ (8004e08 <HAL_ADC_ConfigChannel+0x868>)
 8004d62:	e000      	b.n	8004d66 <HAL_ADC_ConfigChannel+0x7c6>
 8004d64:	4a23      	ldr	r2, [pc, #140]	@ (8004df4 <HAL_ADC_ConfigChannel+0x854>)
 8004d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4610      	mov	r0, r2
 8004d72:	f7fe ff36 	bl	8003be2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d76:	e031      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a27      	ldr	r2, [pc, #156]	@ (8004e1c <HAL_ADC_ConfigChannel+0x87c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d12d      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d127      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a1c      	ldr	r2, [pc, #112]	@ (8004e04 <HAL_ADC_ConfigChannel+0x864>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da0:	d004      	beq.n	8004dac <HAL_ADC_ConfigChannel+0x80c>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a17      	ldr	r2, [pc, #92]	@ (8004e04 <HAL_ADC_ConfigChannel+0x864>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d101      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x810>
 8004dac:	4a16      	ldr	r2, [pc, #88]	@ (8004e08 <HAL_ADC_ConfigChannel+0x868>)
 8004dae:	e000      	b.n	8004db2 <HAL_ADC_ConfigChannel+0x812>
 8004db0:	4a10      	ldr	r2, [pc, #64]	@ (8004df4 <HAL_ADC_ConfigChannel+0x854>)
 8004db2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004db6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe ff10 	bl	8003be2 <LL_ADC_SetCommonPathInternalCh>
 8004dc2:	e00c      	b.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004dd6:	e002      	b.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004dd8:	bf00      	nop
 8004dda:	e000      	b.n	8004dde <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ddc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004de6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	37d8      	adds	r7, #216	@ 0xd8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	50000700 	.word	0x50000700
 8004df8:	c3210000 	.word	0xc3210000
 8004dfc:	90c00010 	.word	0x90c00010
 8004e00:	50000600 	.word	0x50000600
 8004e04:	50000100 	.word	0x50000100
 8004e08:	50000300 	.word	0x50000300
 8004e0c:	20000164 	.word	0x20000164
 8004e10:	053e2d63 	.word	0x053e2d63
 8004e14:	c7520000 	.word	0xc7520000
 8004e18:	50000500 	.word	0x50000500
 8004e1c:	cb840000 	.word	0xcb840000

08004e20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7ff f8a7 	bl	8003f84 <LL_ADC_IsEnabled>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d176      	bne.n	8004f2a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	4b3c      	ldr	r3, [pc, #240]	@ (8004f34 <ADC_Enable+0x114>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e4e:	f043 0210 	orr.w	r2, r3, #16
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e5a:	f043 0201 	orr.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e062      	b.n	8004f2c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7ff f862 	bl	8003f34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e78:	d004      	beq.n	8004e84 <ADC_Enable+0x64>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8004f38 <ADC_Enable+0x118>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d101      	bne.n	8004e88 <ADC_Enable+0x68>
 8004e84:	4b2d      	ldr	r3, [pc, #180]	@ (8004f3c <ADC_Enable+0x11c>)
 8004e86:	e000      	b.n	8004e8a <ADC_Enable+0x6a>
 8004e88:	4b2d      	ldr	r3, [pc, #180]	@ (8004f40 <ADC_Enable+0x120>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fe febc 	bl	8003c08 <LL_ADC_GetCommonPathInternalCh>
 8004e90:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d013      	beq.n	8004ec2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f44 <ADC_Enable+0x124>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	099b      	lsrs	r3, r3, #6
 8004ea0:	4a29      	ldr	r2, [pc, #164]	@ (8004f48 <ADC_Enable+0x128>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	099b      	lsrs	r3, r3, #6
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	4613      	mov	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004eb4:	e002      	b.n	8004ebc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f9      	bne.n	8004eb6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ec2:	f7fe fe6f 	bl	8003ba4 <HAL_GetTick>
 8004ec6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ec8:	e028      	b.n	8004f1c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff f858 	bl	8003f84 <LL_ADC_IsEnabled>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d104      	bne.n	8004ee4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f828 	bl	8003f34 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ee4:	f7fe fe5e 	bl	8003ba4 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d914      	bls.n	8004f1c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d00d      	beq.n	8004f1c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e007      	b.n	8004f2c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d1cf      	bne.n	8004eca <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	8000003f 	.word	0x8000003f
 8004f38:	50000100 	.word	0x50000100
 8004f3c:	50000300 	.word	0x50000300
 8004f40:	50000700 	.word	0x50000700
 8004f44:	20000164 	.word	0x20000164
 8004f48:	053e2d63 	.word	0x053e2d63

08004f4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7ff f826 	bl	8003faa <LL_ADC_IsDisableOngoing>
 8004f5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7ff f80d 	bl	8003f84 <LL_ADC_IsEnabled>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d047      	beq.n	8005000 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d144      	bne.n	8005000 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 030d 	and.w	r3, r3, #13
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d10c      	bne.n	8004f9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe ffe7 	bl	8003f5c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2203      	movs	r2, #3
 8004f94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f96:	f7fe fe05 	bl	8003ba4 <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004f9c:	e029      	b.n	8004ff2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fa2:	f043 0210 	orr.w	r2, r3, #16
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fae:	f043 0201 	orr.w	r2, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e023      	b.n	8005002 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fba:	f7fe fdf3 	bl	8003ba4 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d914      	bls.n	8004ff2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00d      	beq.n	8004ff2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fda:	f043 0210 	orr.w	r2, r3, #16
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe6:	f043 0201 	orr.w	r2, r3, #1
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e007      	b.n	8005002 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1dc      	bne.n	8004fba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005016:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005020:	2b00      	cmp	r3, #0
 8005022:	d14b      	bne.n	80050bc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005028:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d021      	beq.n	8005082 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fe8c 	bl	8003d60 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d032      	beq.n	80050b4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d12b      	bne.n	80050b4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d11f      	bne.n	80050b4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005078:	f043 0201 	orr.w	r2, r3, #1
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005080:	e018      	b.n	80050b4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d111      	bne.n	80050b4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d105      	bne.n	80050b4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ac:	f043 0201 	orr.w	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff fa55 	bl	8004564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050ba:	e00e      	b.n	80050da <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f7ff fa5f 	bl	800458c <HAL_ADC_ErrorCallback>
}
 80050ce:	e004      	b.n	80050da <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
}
 80050da:	bf00      	nop
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}

080050e2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b084      	sub	sp, #16
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f7ff fa41 	bl	8004578 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050f6:	bf00      	nop
 80050f8:	3710      	adds	r7, #16
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b084      	sub	sp, #16
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005110:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511c:	f043 0204 	orr.w	r2, r3, #4
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fa31 	bl	800458c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800512a:	bf00      	nop
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <LL_ADC_IsEnabled>:
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <LL_ADC_IsEnabled+0x18>
 8005146:	2301      	movs	r3, #1
 8005148:	e000      	b.n	800514c <LL_ADC_IsEnabled+0x1a>
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_ADC_StartCalibration>:
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800516a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005174:	4313      	orrs	r3, r2
 8005176:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	609a      	str	r2, [r3, #8]
}
 800517e:	bf00      	nop
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <LL_ADC_IsCalibrationOnGoing>:
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800519a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800519e:	d101      	bne.n	80051a4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d101      	bne.n	80051ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_ADCEx_Calibration_Start+0x1c>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e04d      	b.n	8005290 <HAL_ADCEx_Calibration_Start+0xb8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fea5 	bl	8004f4c <ADC_Disable>
 8005202:	4603      	mov	r3, r0
 8005204:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d136      	bne.n	800527a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005210:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005214:	f023 0302 	bic.w	r3, r3, #2
 8005218:	f043 0202 	orr.w	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6839      	ldr	r1, [r7, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7ff ff96 	bl	8005158 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800522c:	e014      	b.n	8005258 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	3301      	adds	r3, #1
 8005232:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4a18      	ldr	r2, [pc, #96]	@ (8005298 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d90d      	bls.n	8005258 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	f023 0312 	bic.w	r3, r3, #18
 8005244:	f043 0210 	orr.w	r2, r3, #16
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e01b      	b.n	8005290 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff ff94 	bl	800518a <LL_ADC_IsCalibrationOnGoing>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e2      	bne.n	800522e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800526c:	f023 0303 	bic.w	r3, r3, #3
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005278:	e005      	b.n	8005286 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800527e:	f043 0210 	orr.w	r2, r3, #16
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	0004de01 	.word	0x0004de01

0800529c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b0a1      	sub	sp, #132	@ 0x84
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d101      	bne.n	80052ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e0e7      	b.n	800548a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80052c2:	2300      	movs	r3, #0
 80052c4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80052c6:	2300      	movs	r3, #0
 80052c8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052d2:	d102      	bne.n	80052da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	e009      	b.n	80052ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6e      	ldr	r2, [pc, #440]	@ (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d102      	bne.n	80052ea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80052e4:	4b6d      	ldr	r3, [pc, #436]	@ (800549c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80052e6:	60bb      	str	r3, [r7, #8]
 80052e8:	e001      	b.n	80052ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80052ea:	2300      	movs	r3, #0
 80052ec:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0be      	b.n	800548a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff ff4f 	bl	80051b2 <LL_ADC_REG_IsConversionOngoing>
 8005314:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ff49 	bl	80051b2 <LL_ADC_REG_IsConversionOngoing>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 80a0 	bne.w	8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005328:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 809c 	bne.w	8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005338:	d004      	beq.n	8005344 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a55      	ldr	r2, [pc, #340]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005344:	4b56      	ldr	r3, [pc, #344]	@ (80054a0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005346:	e000      	b.n	800534a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005348:	4b56      	ldr	r3, [pc, #344]	@ (80054a4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800534a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d04b      	beq.n	80053ec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	6859      	ldr	r1, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005366:	035b      	lsls	r3, r3, #13
 8005368:	430b      	orrs	r3, r1
 800536a:	431a      	orrs	r2, r3
 800536c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800536e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005378:	d004      	beq.n	8005384 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a45      	ldr	r2, [pc, #276]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d10f      	bne.n	80053a4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005384:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005388:	f7ff fed3 	bl	8005132 <LL_ADC_IsEnabled>
 800538c:	4604      	mov	r4, r0
 800538e:	4841      	ldr	r0, [pc, #260]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005390:	f7ff fecf 	bl	8005132 <LL_ADC_IsEnabled>
 8005394:	4603      	mov	r3, r0
 8005396:	4323      	orrs	r3, r4
 8005398:	2b00      	cmp	r3, #0
 800539a:	bf0c      	ite	eq
 800539c:	2301      	moveq	r3, #1
 800539e:	2300      	movne	r3, #0
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	e012      	b.n	80053ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80053a4:	483c      	ldr	r0, [pc, #240]	@ (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80053a6:	f7ff fec4 	bl	8005132 <LL_ADC_IsEnabled>
 80053aa:	4604      	mov	r4, r0
 80053ac:	483b      	ldr	r0, [pc, #236]	@ (800549c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80053ae:	f7ff fec0 	bl	8005132 <LL_ADC_IsEnabled>
 80053b2:	4603      	mov	r3, r0
 80053b4:	431c      	orrs	r4, r3
 80053b6:	483c      	ldr	r0, [pc, #240]	@ (80054a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80053b8:	f7ff febb 	bl	8005132 <LL_ADC_IsEnabled>
 80053bc:	4603      	mov	r3, r0
 80053be:	4323      	orrs	r3, r4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d056      	beq.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053d6:	f023 030f 	bic.w	r3, r3, #15
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	6811      	ldr	r1, [r2, #0]
 80053de:	683a      	ldr	r2, [r7, #0]
 80053e0:	6892      	ldr	r2, [r2, #8]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	431a      	orrs	r2, r3
 80053e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053e8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053ea:	e047      	b.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80053ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005400:	d004      	beq.n	800540c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a23      	ldr	r2, [pc, #140]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10f      	bne.n	800542c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800540c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005410:	f7ff fe8f 	bl	8005132 <LL_ADC_IsEnabled>
 8005414:	4604      	mov	r4, r0
 8005416:	481f      	ldr	r0, [pc, #124]	@ (8005494 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005418:	f7ff fe8b 	bl	8005132 <LL_ADC_IsEnabled>
 800541c:	4603      	mov	r3, r0
 800541e:	4323      	orrs	r3, r4
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e012      	b.n	8005452 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800542c:	481a      	ldr	r0, [pc, #104]	@ (8005498 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800542e:	f7ff fe80 	bl	8005132 <LL_ADC_IsEnabled>
 8005432:	4604      	mov	r4, r0
 8005434:	4819      	ldr	r0, [pc, #100]	@ (800549c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005436:	f7ff fe7c 	bl	8005132 <LL_ADC_IsEnabled>
 800543a:	4603      	mov	r3, r0
 800543c:	431c      	orrs	r4, r3
 800543e:	481a      	ldr	r0, [pc, #104]	@ (80054a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005440:	f7ff fe77 	bl	8005132 <LL_ADC_IsEnabled>
 8005444:	4603      	mov	r3, r0
 8005446:	4323      	orrs	r3, r4
 8005448:	2b00      	cmp	r3, #0
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d012      	beq.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005456:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800545e:	f023 030f 	bic.w	r3, r3, #15
 8005462:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005464:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005466:	e009      	b.n	800547c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800547a:	e000      	b.n	800547e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800547c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005486:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800548a:	4618      	mov	r0, r3
 800548c:	3784      	adds	r7, #132	@ 0x84
 800548e:	46bd      	mov	sp, r7
 8005490:	bd90      	pop	{r4, r7, pc}
 8005492:	bf00      	nop
 8005494:	50000100 	.word	0x50000100
 8005498:	50000400 	.word	0x50000400
 800549c:	50000500 	.word	0x50000500
 80054a0:	50000300 	.word	0x50000300
 80054a4:	50000700 	.word	0x50000700
 80054a8:	50000600 	.word	0x50000600

080054ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054bc:	4b0c      	ldr	r3, [pc, #48]	@ (80054f0 <__NVIC_SetPriorityGrouping+0x44>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054c8:	4013      	ands	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054de:	4a04      	ldr	r2, [pc, #16]	@ (80054f0 <__NVIC_SetPriorityGrouping+0x44>)
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	60d3      	str	r3, [r2, #12]
}
 80054e4:	bf00      	nop
 80054e6:	3714      	adds	r7, #20
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054f8:	4b04      	ldr	r3, [pc, #16]	@ (800550c <__NVIC_GetPriorityGrouping+0x18>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 0307 	and.w	r3, r3, #7
}
 8005502:	4618      	mov	r0, r3
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	e000ed00 	.word	0xe000ed00

08005510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	2b00      	cmp	r3, #0
 8005520:	db0b      	blt.n	800553a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	f003 021f 	and.w	r2, r3, #31
 8005528:	4907      	ldr	r1, [pc, #28]	@ (8005548 <__NVIC_EnableIRQ+0x38>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2001      	movs	r0, #1
 8005532:	fa00 f202 	lsl.w	r2, r0, r2
 8005536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800553a:	bf00      	nop
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	e000e100 	.word	0xe000e100

0800554c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	6039      	str	r1, [r7, #0]
 8005556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555c:	2b00      	cmp	r3, #0
 800555e:	db0a      	blt.n	8005576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	b2da      	uxtb	r2, r3
 8005564:	490c      	ldr	r1, [pc, #48]	@ (8005598 <__NVIC_SetPriority+0x4c>)
 8005566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800556a:	0112      	lsls	r2, r2, #4
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	440b      	add	r3, r1
 8005570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005574:	e00a      	b.n	800558c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	4908      	ldr	r1, [pc, #32]	@ (800559c <__NVIC_SetPriority+0x50>)
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	3b04      	subs	r3, #4
 8005584:	0112      	lsls	r2, r2, #4
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	440b      	add	r3, r1
 800558a:	761a      	strb	r2, [r3, #24]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	e000e100 	.word	0xe000e100
 800559c:	e000ed00 	.word	0xe000ed00

080055a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b089      	sub	sp, #36	@ 0x24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 0307 	and.w	r3, r3, #7
 80055b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f1c3 0307 	rsb	r3, r3, #7
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	bf28      	it	cs
 80055be:	2304      	movcs	r3, #4
 80055c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3304      	adds	r3, #4
 80055c6:	2b06      	cmp	r3, #6
 80055c8:	d902      	bls.n	80055d0 <NVIC_EncodePriority+0x30>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	3b03      	subs	r3, #3
 80055ce:	e000      	b.n	80055d2 <NVIC_EncodePriority+0x32>
 80055d0:	2300      	movs	r3, #0
 80055d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055d4:	f04f 32ff 	mov.w	r2, #4294967295
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	fa02 f303 	lsl.w	r3, r2, r3
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	401a      	ands	r2, r3
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055e8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	fa01 f303 	lsl.w	r3, r1, r3
 80055f2:	43d9      	mvns	r1, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055f8:	4313      	orrs	r3, r2
         );
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3724      	adds	r7, #36	@ 0x24
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	3b01      	subs	r3, #1
 8005614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005618:	d301      	bcc.n	800561e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800561a:	2301      	movs	r3, #1
 800561c:	e00f      	b.n	800563e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800561e:	4a0a      	ldr	r2, [pc, #40]	@ (8005648 <SysTick_Config+0x40>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3b01      	subs	r3, #1
 8005624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005626:	210f      	movs	r1, #15
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	f7ff ff8e 	bl	800554c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <SysTick_Config+0x40>)
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005636:	4b04      	ldr	r3, [pc, #16]	@ (8005648 <SysTick_Config+0x40>)
 8005638:	2207      	movs	r2, #7
 800563a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	e000e010 	.word	0xe000e010

0800564c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f7ff ff29 	bl	80054ac <__NVIC_SetPriorityGrouping>
}
 800565a:	bf00      	nop
 800565c:	3708      	adds	r7, #8
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	b086      	sub	sp, #24
 8005666:	af00      	add	r7, sp, #0
 8005668:	4603      	mov	r3, r0
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005670:	f7ff ff40 	bl	80054f4 <__NVIC_GetPriorityGrouping>
 8005674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	68b9      	ldr	r1, [r7, #8]
 800567a:	6978      	ldr	r0, [r7, #20]
 800567c:	f7ff ff90 	bl	80055a0 <NVIC_EncodePriority>
 8005680:	4602      	mov	r2, r0
 8005682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005686:	4611      	mov	r1, r2
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff ff5f 	bl	800554c <__NVIC_SetPriority>
}
 800568e:	bf00      	nop
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	4603      	mov	r3, r0
 800569e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7ff ff33 	bl	8005510 <__NVIC_EnableIRQ>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ffa4 	bl	8005608 <SysTick_Config>
 80056c0:	4603      	mov	r3, r0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e08d      	b.n	80057fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	4b47      	ldr	r3, [pc, #284]	@ (8005804 <HAL_DMA_Init+0x138>)
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d80f      	bhi.n	800570a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	4b45      	ldr	r3, [pc, #276]	@ (8005808 <HAL_DMA_Init+0x13c>)
 80056f2:	4413      	add	r3, r2
 80056f4:	4a45      	ldr	r2, [pc, #276]	@ (800580c <HAL_DMA_Init+0x140>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	009a      	lsls	r2, r3, #2
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a42      	ldr	r2, [pc, #264]	@ (8005810 <HAL_DMA_Init+0x144>)
 8005706:	641a      	str	r2, [r3, #64]	@ 0x40
 8005708:	e00e      	b.n	8005728 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	4b40      	ldr	r3, [pc, #256]	@ (8005814 <HAL_DMA_Init+0x148>)
 8005712:	4413      	add	r3, r2
 8005714:	4a3d      	ldr	r2, [pc, #244]	@ (800580c <HAL_DMA_Init+0x140>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	091b      	lsrs	r3, r3, #4
 800571c:	009a      	lsls	r2, r3, #2
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a3c      	ldr	r2, [pc, #240]	@ (8005818 <HAL_DMA_Init+0x14c>)
 8005726:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800573e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005742:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800574c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa76 	bl	8005c6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005788:	d102      	bne.n	8005790 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d010      	beq.n	80057d0 <HAL_DMA_Init+0x104>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d80c      	bhi.n	80057d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa96 	bl	8005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	e008      	b.n	80057e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40020407 	.word	0x40020407
 8005808:	bffdfff8 	.word	0xbffdfff8
 800580c:	cccccccd 	.word	0xcccccccd
 8005810:	40020000 	.word	0x40020000
 8005814:	bffdfbf8 	.word	0xbffdfbf8
 8005818:	40020400 	.word	0x40020400

0800581c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
 8005828:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_DMA_Start_IT+0x20>
 8005838:	2302      	movs	r3, #2
 800583a:	e066      	b.n	800590a <HAL_DMA_Start_IT+0xee>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d155      	bne.n	80058fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f9bb 	bl	8005bf0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 020e 	orr.w	r2, r2, #14
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e00f      	b.n	80058b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0204 	bic.w	r2, r2, #4
 80058a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f042 020a 	orr.w	r2, r2, #10
 80058b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d007      	beq.n	80058d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	e005      	b.n	8005908 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005904:	2302      	movs	r3, #2
 8005906:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005908:	7dfb      	ldrb	r3, [r7, #23]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3718      	adds	r7, #24
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d005      	beq.n	8005936 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2204      	movs	r2, #4
 800592e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e037      	b.n	80059a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 020e 	bic.w	r2, r2, #14
 8005944:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005950:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005954:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 0201 	bic.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800596a:	f003 021f 	and.w	r2, r3, #31
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	2101      	movs	r1, #1
 8005974:	fa01 f202 	lsl.w	r2, r1, r2
 8005978:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005982:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00c      	beq.n	80059a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005996:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800599a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80059a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80059b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d00d      	beq.n	80059f8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
 80059f6:	e047      	b.n	8005a88 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 020e 	bic.w	r2, r2, #14
 8005a06:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0201 	bic.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a22:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a2c:	f003 021f 	and.w	r2, r3, #31
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a34:	2101      	movs	r1, #1
 8005a36:	fa01 f202 	lsl.w	r2, r1, r2
 8005a3a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a44:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00c      	beq.n	8005a68 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005a66:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	4798      	blx	r3
    }
  }
  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}

08005a92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	409a      	lsls	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d026      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x7a>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d021      	beq.n	8005b0c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d107      	bne.n	8005ae6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aea:	f003 021f 	and.w	r2, r3, #31
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af2:	2104      	movs	r1, #4
 8005af4:	fa01 f202 	lsl.w	r2, r1, r2
 8005af8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d071      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005b0a:	e06c      	b.n	8005be6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	2202      	movs	r2, #2
 8005b16:	409a      	lsls	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d02e      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d029      	beq.n	8005b7e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f022 020a 	bic.w	r2, r2, #10
 8005b46:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b54:	f003 021f 	and.w	r2, r3, #31
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	2102      	movs	r1, #2
 8005b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b62:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d038      	beq.n	8005be6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005b7c:	e033      	b.n	8005be6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2208      	movs	r2, #8
 8005b88:	409a      	lsls	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d02a      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f003 0308 	and.w	r3, r3, #8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d025      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f022 020e 	bic.w	r2, r2, #14
 8005baa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb0:	f003 021f 	and.w	r2, r3, #31
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb8:	2101      	movs	r1, #1
 8005bba:	fa01 f202 	lsl.w	r2, r1, r2
 8005bbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
}
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005c06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d004      	beq.n	8005c1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005c18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1e:	f003 021f 	and.w	r2, r3, #31
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c26:	2101      	movs	r1, #1
 8005c28:	fa01 f202 	lsl.w	r2, r1, r2
 8005c2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d108      	bne.n	8005c50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005c4e:	e007      	b.n	8005c60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	60da      	str	r2, [r3, #12]
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b16      	ldr	r3, [pc, #88]	@ (8005cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d802      	bhi.n	8005c86 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005c80:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	e001      	b.n	8005c8a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005c86:	4b15      	ldr	r3, [pc, #84]	@ (8005cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005c88:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	3b08      	subs	r3, #8
 8005c96:	4a12      	ldr	r2, [pc, #72]	@ (8005ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca4:	089b      	lsrs	r3, r3, #2
 8005ca6:	009a      	lsls	r2, r3, #2
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8005ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005cb6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 031f 	and.w	r3, r3, #31
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	409a      	lsls	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40020407 	.word	0x40020407
 8005cd8:	40020800 	.word	0x40020800
 8005cdc:	40020820 	.word	0x40020820
 8005ce0:	cccccccd 	.word	0xcccccccd
 8005ce4:	40020880 	.word	0x40020880

08005ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	461a      	mov	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a08      	ldr	r2, [pc, #32]	@ (8005d2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005d0a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	f003 031f 	and.w	r3, r3, #31
 8005d14:	2201      	movs	r2, #1
 8005d16:	409a      	lsls	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	1000823f 	.word	0x1000823f
 8005d2c:	40020940 	.word	0x40020940

08005d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005d3e:	e15a      	b.n	8005ff6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	2101      	movs	r1, #1
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 814c 	beq.w	8005ff0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d005      	beq.n	8005d70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d130      	bne.n	8005dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	005b      	lsls	r3, r3, #1
 8005d7a:	2203      	movs	r2, #3
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4013      	ands	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005da6:	2201      	movs	r2, #1
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43db      	mvns	r3, r3
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4013      	ands	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	f003 0201 	and.w	r2, r3, #1
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f003 0303 	and.w	r3, r3, #3
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d017      	beq.n	8005e0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	005b      	lsls	r3, r3, #1
 8005de8:	2203      	movs	r2, #3
 8005dea:	fa02 f303 	lsl.w	r3, r2, r3
 8005dee:	43db      	mvns	r3, r3
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4013      	ands	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	689a      	ldr	r2, [r3, #8]
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	693a      	ldr	r2, [r7, #16]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d123      	bne.n	8005e62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	08da      	lsrs	r2, r3, #3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3208      	adds	r2, #8
 8005e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	220f      	movs	r2, #15
 8005e32:	fa02 f303 	lsl.w	r3, r2, r3
 8005e36:	43db      	mvns	r3, r3
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	691a      	ldr	r2, [r3, #16]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	08da      	lsrs	r2, r3, #3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3208      	adds	r2, #8
 8005e5c:	6939      	ldr	r1, [r7, #16]
 8005e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	2203      	movs	r2, #3
 8005e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e72:	43db      	mvns	r3, r3
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	4013      	ands	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f003 0203 	and.w	r2, r3, #3
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	005b      	lsls	r3, r3, #1
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f000 80a6 	beq.w	8005ff0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8006014 <HAL_GPIO_Init+0x2e4>)
 8005ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ea8:	4a5a      	ldr	r2, [pc, #360]	@ (8006014 <HAL_GPIO_Init+0x2e4>)
 8005eaa:	f043 0301 	orr.w	r3, r3, #1
 8005eae:	6613      	str	r3, [r2, #96]	@ 0x60
 8005eb0:	4b58      	ldr	r3, [pc, #352]	@ (8006014 <HAL_GPIO_Init+0x2e4>)
 8005eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ebc:	4a56      	ldr	r2, [pc, #344]	@ (8006018 <HAL_GPIO_Init+0x2e8>)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	089b      	lsrs	r3, r3, #2
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f003 0303 	and.w	r3, r3, #3
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	220f      	movs	r2, #15
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	43db      	mvns	r3, r3
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	4013      	ands	r3, r2
 8005ede:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005ee6:	d01f      	beq.n	8005f28 <HAL_GPIO_Init+0x1f8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a4c      	ldr	r2, [pc, #304]	@ (800601c <HAL_GPIO_Init+0x2ec>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d019      	beq.n	8005f24 <HAL_GPIO_Init+0x1f4>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a4b      	ldr	r2, [pc, #300]	@ (8006020 <HAL_GPIO_Init+0x2f0>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_GPIO_Init+0x1f0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a4a      	ldr	r2, [pc, #296]	@ (8006024 <HAL_GPIO_Init+0x2f4>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d00d      	beq.n	8005f1c <HAL_GPIO_Init+0x1ec>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a49      	ldr	r2, [pc, #292]	@ (8006028 <HAL_GPIO_Init+0x2f8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d007      	beq.n	8005f18 <HAL_GPIO_Init+0x1e8>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a48      	ldr	r2, [pc, #288]	@ (800602c <HAL_GPIO_Init+0x2fc>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d101      	bne.n	8005f14 <HAL_GPIO_Init+0x1e4>
 8005f10:	2305      	movs	r3, #5
 8005f12:	e00a      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f14:	2306      	movs	r3, #6
 8005f16:	e008      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	e006      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e004      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e002      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_GPIO_Init+0x1fa>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f002 0203 	and.w	r2, r2, #3
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	4093      	lsls	r3, r2
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f3a:	4937      	ldr	r1, [pc, #220]	@ (8006018 <HAL_GPIO_Init+0x2e8>)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	3302      	adds	r3, #2
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005f48:	4b39      	ldr	r3, [pc, #228]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4013      	ands	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005f6c:	4a30      	ldr	r2, [pc, #192]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005f72:	4b2f      	ldr	r3, [pc, #188]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005f96:	4a26      	ldr	r2, [pc, #152]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005f9c:	4b24      	ldr	r3, [pc, #144]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	43db      	mvns	r3, r3
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	43db      	mvns	r3, r3
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005fea:	4a11      	ldr	r2, [pc, #68]	@ (8006030 <HAL_GPIO_Init+0x300>)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f ae9d 	bne.w	8005d40 <HAL_GPIO_Init+0x10>
  }
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr
 8006014:	40021000 	.word	0x40021000
 8006018:	40010000 	.word	0x40010000
 800601c:	48000400 	.word	0x48000400
 8006020:	48000800 	.word	0x48000800
 8006024:	48000c00 	.word	0x48000c00
 8006028:	48001000 	.word	0x48001000
 800602c:	48001400 	.word	0x48001400
 8006030:	40010400 	.word	0x40010400

08006034 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691a      	ldr	r2, [r3, #16]
 8006044:	887b      	ldrh	r3, [r7, #2]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e001      	b.n	8006056 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006052:	2300      	movs	r3, #0
 8006054:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006056:	7bfb      	ldrb	r3, [r7, #15]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	460b      	mov	r3, r1
 800606e:	807b      	strh	r3, [r7, #2]
 8006070:	4613      	mov	r3, r2
 8006072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006074:	787b      	ldrb	r3, [r7, #1]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800607a:	887a      	ldrh	r2, [r7, #2]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006080:	e002      	b.n	8006088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006082:	887a      	ldrh	r2, [r7, #2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800609e:	4b08      	ldr	r3, [pc, #32]	@ (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d006      	beq.n	80060b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80060aa:	4a05      	ldr	r2, [pc, #20]	@ (80060c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fc fc19 	bl	80028ea <HAL_GPIO_EXTI_Callback>
  }
}
 80060b8:	bf00      	nop
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d141      	bne.n	8006156 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060de:	d131      	bne.n	8006144 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060e0:	4b47      	ldr	r3, [pc, #284]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e6:	4a46      	ldr	r2, [pc, #280]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060f0:	4b43      	ldr	r3, [pc, #268]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060f8:	4a41      	ldr	r2, [pc, #260]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006100:	4b40      	ldr	r3, [pc, #256]	@ (8006204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2232      	movs	r2, #50	@ 0x32
 8006106:	fb02 f303 	mul.w	r3, r2, r3
 800610a:	4a3f      	ldr	r2, [pc, #252]	@ (8006208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	0c9b      	lsrs	r3, r3, #18
 8006112:	3301      	adds	r3, #1
 8006114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006116:	e002      	b.n	800611e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3b01      	subs	r3, #1
 800611c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800611e:	4b38      	ldr	r3, [pc, #224]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800612a:	d102      	bne.n	8006132 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f2      	bne.n	8006118 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006132:	4b33      	ldr	r3, [pc, #204]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800613a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613e:	d158      	bne.n	80061f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e057      	b.n	80061f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006144:	4b2e      	ldr	r3, [pc, #184]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614a:	4a2d      	ldr	r2, [pc, #180]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006154:	e04d      	b.n	80061f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800615c:	d141      	bne.n	80061e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800615e:	4b28      	ldr	r3, [pc, #160]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800616a:	d131      	bne.n	80061d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800616c:	4b24      	ldr	r3, [pc, #144]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006172:	4a23      	ldr	r2, [pc, #140]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800617c:	4b20      	ldr	r3, [pc, #128]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006184:	4a1e      	ldr	r2, [pc, #120]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800618a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800618c:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2232      	movs	r2, #50	@ 0x32
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	4a1c      	ldr	r2, [pc, #112]	@ (8006208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006198:	fba2 2303 	umull	r2, r3, r2, r3
 800619c:	0c9b      	lsrs	r3, r3, #18
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061a2:	e002      	b.n	80061aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061aa:	4b15      	ldr	r3, [pc, #84]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d102      	bne.n	80061be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1f2      	bne.n	80061a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061be:	4b10      	ldr	r3, [pc, #64]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ca:	d112      	bne.n	80061f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e011      	b.n	80061f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061e0:	e007      	b.n	80061f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061e2:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061ea:	4a05      	ldr	r2, [pc, #20]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3714      	adds	r7, #20
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40007000 	.word	0x40007000
 8006204:	20000164 	.word	0x20000164
 8006208:	431bde83 	.word	0x431bde83

0800620c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006210:	4b05      	ldr	r3, [pc, #20]	@ (8006228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	4a04      	ldr	r2, [pc, #16]	@ (8006228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800621a:	6093      	str	r3, [r2, #8]
}
 800621c:	bf00      	nop
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40007000 	.word	0x40007000

0800622c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b088      	sub	sp, #32
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e2fe      	b.n	800683c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d075      	beq.n	8006336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800624a:	4b97      	ldr	r3, [pc, #604]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 030c 	and.w	r3, r3, #12
 8006252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006254:	4b94      	ldr	r3, [pc, #592]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0303 	and.w	r3, r3, #3
 800625c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	2b0c      	cmp	r3, #12
 8006262:	d102      	bne.n	800626a <HAL_RCC_OscConfig+0x3e>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	2b03      	cmp	r3, #3
 8006268:	d002      	beq.n	8006270 <HAL_RCC_OscConfig+0x44>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d10b      	bne.n	8006288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006270:	4b8d      	ldr	r3, [pc, #564]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d05b      	beq.n	8006334 <HAL_RCC_OscConfig+0x108>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d157      	bne.n	8006334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e2d9      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006290:	d106      	bne.n	80062a0 <HAL_RCC_OscConfig+0x74>
 8006292:	4b85      	ldr	r3, [pc, #532]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a84      	ldr	r2, [pc, #528]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e01d      	b.n	80062dc <HAL_RCC_OscConfig+0xb0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062a8:	d10c      	bne.n	80062c4 <HAL_RCC_OscConfig+0x98>
 80062aa:	4b7f      	ldr	r3, [pc, #508]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a7e      	ldr	r2, [pc, #504]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	4b7c      	ldr	r3, [pc, #496]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a7b      	ldr	r2, [pc, #492]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	e00b      	b.n	80062dc <HAL_RCC_OscConfig+0xb0>
 80062c4:	4b78      	ldr	r3, [pc, #480]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a77      	ldr	r2, [pc, #476]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4b75      	ldr	r3, [pc, #468]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a74      	ldr	r2, [pc, #464]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80062d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d013      	beq.n	800630c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7fd fc5e 	bl	8003ba4 <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062ec:	f7fd fc5a 	bl	8003ba4 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b64      	cmp	r3, #100	@ 0x64
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e29e      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062fe:	4b6a      	ldr	r3, [pc, #424]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0xc0>
 800630a:	e014      	b.n	8006336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630c:	f7fd fc4a 	bl	8003ba4 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006312:	e008      	b.n	8006326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006314:	f7fd fc46 	bl	8003ba4 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b64      	cmp	r3, #100	@ 0x64
 8006320:	d901      	bls.n	8006326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e28a      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006326:	4b60      	ldr	r3, [pc, #384]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1f0      	bne.n	8006314 <HAL_RCC_OscConfig+0xe8>
 8006332:	e000      	b.n	8006336 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d075      	beq.n	800642e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006342:	4b59      	ldr	r3, [pc, #356]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	f003 030c 	and.w	r3, r3, #12
 800634a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800634c:	4b56      	ldr	r3, [pc, #344]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	2b0c      	cmp	r3, #12
 800635a:	d102      	bne.n	8006362 <HAL_RCC_OscConfig+0x136>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d002      	beq.n	8006368 <HAL_RCC_OscConfig+0x13c>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	2b04      	cmp	r3, #4
 8006366:	d11f      	bne.n	80063a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006368:	4b4f      	ldr	r3, [pc, #316]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_OscConfig+0x154>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e25d      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006380:	4b49      	ldr	r3, [pc, #292]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	061b      	lsls	r3, r3, #24
 800638e:	4946      	ldr	r1, [pc, #280]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006390:	4313      	orrs	r3, r2
 8006392:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006394:	4b45      	ldr	r3, [pc, #276]	@ (80064ac <HAL_RCC_OscConfig+0x280>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7fd fbb7 	bl	8003b0c <HAL_InitTick>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d043      	beq.n	800642c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e249      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d023      	beq.n	80063f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063b0:	4b3d      	ldr	r3, [pc, #244]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a3c      	ldr	r2, [pc, #240]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fd fbf2 	bl	8003ba4 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063c4:	f7fd fbee 	bl	8003ba4 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e232      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063d6:	4b34      	ldr	r3, [pc, #208]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e2:	4b31      	ldr	r3, [pc, #196]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	061b      	lsls	r3, r3, #24
 80063f0:	492d      	ldr	r1, [pc, #180]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	604b      	str	r3, [r1, #4]
 80063f6:	e01a      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063f8:	4b2b      	ldr	r3, [pc, #172]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a2a      	ldr	r2, [pc, #168]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 80063fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fd fbce 	bl	8003ba4 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640c:	f7fd fbca 	bl	8003ba4 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e20e      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800641e:	4b22      	ldr	r3, [pc, #136]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x1e0>
 800642a:	e000      	b.n	800642e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800642c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0308 	and.w	r3, r3, #8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d041      	beq.n	80064be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01c      	beq.n	800647c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006442:	4b19      	ldr	r3, [pc, #100]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006448:	4a17      	ldr	r2, [pc, #92]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006452:	f7fd fba7 	bl	8003ba4 <HAL_GetTick>
 8006456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006458:	e008      	b.n	800646c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800645a:	f7fd fba3 	bl	8003ba4 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	2b02      	cmp	r3, #2
 8006466:	d901      	bls.n	800646c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e1e7      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800646c:	4b0e      	ldr	r3, [pc, #56]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800646e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0ef      	beq.n	800645a <HAL_RCC_OscConfig+0x22e>
 800647a:	e020      	b.n	80064be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800647c:	4b0a      	ldr	r3, [pc, #40]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 800647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006482:	4a09      	ldr	r2, [pc, #36]	@ (80064a8 <HAL_RCC_OscConfig+0x27c>)
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800648c:	f7fd fb8a 	bl	8003ba4 <HAL_GetTick>
 8006490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006492:	e00d      	b.n	80064b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006494:	f7fd fb86 	bl	8003ba4 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d906      	bls.n	80064b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e1ca      	b.n	800683c <HAL_RCC_OscConfig+0x610>
 80064a6:	bf00      	nop
 80064a8:	40021000 	.word	0x40021000
 80064ac:	20000168 	.word	0x20000168
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064b0:	4b8c      	ldr	r3, [pc, #560]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1ea      	bne.n	8006494 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0304 	and.w	r3, r3, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80a6 	beq.w	8006618 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064cc:	2300      	movs	r3, #0
 80064ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064d0:	4b84      	ldr	r3, [pc, #528]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80064d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <HAL_RCC_OscConfig+0x2b4>
 80064dc:	2301      	movs	r3, #1
 80064de:	e000      	b.n	80064e2 <HAL_RCC_OscConfig+0x2b6>
 80064e0:	2300      	movs	r3, #0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00d      	beq.n	8006502 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e6:	4b7f      	ldr	r3, [pc, #508]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80064e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ea:	4a7e      	ldr	r2, [pc, #504]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80064f2:	4b7c      	ldr	r3, [pc, #496]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064fe:	2301      	movs	r3, #1
 8006500:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006502:	4b79      	ldr	r3, [pc, #484]	@ (80066e8 <HAL_RCC_OscConfig+0x4bc>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d118      	bne.n	8006540 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800650e:	4b76      	ldr	r3, [pc, #472]	@ (80066e8 <HAL_RCC_OscConfig+0x4bc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a75      	ldr	r2, [pc, #468]	@ (80066e8 <HAL_RCC_OscConfig+0x4bc>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800651a:	f7fd fb43 	bl	8003ba4 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fd fb3f 	bl	8003ba4 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e183      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006534:	4b6c      	ldr	r3, [pc, #432]	@ (80066e8 <HAL_RCC_OscConfig+0x4bc>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d108      	bne.n	800655a <HAL_RCC_OscConfig+0x32e>
 8006548:	4b66      	ldr	r3, [pc, #408]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800654e:	4a65      	ldr	r2, [pc, #404]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f043 0301 	orr.w	r3, r3, #1
 8006554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006558:	e024      	b.n	80065a4 <HAL_RCC_OscConfig+0x378>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	2b05      	cmp	r3, #5
 8006560:	d110      	bne.n	8006584 <HAL_RCC_OscConfig+0x358>
 8006562:	4b60      	ldr	r3, [pc, #384]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006568:	4a5e      	ldr	r2, [pc, #376]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800656a:	f043 0304 	orr.w	r3, r3, #4
 800656e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006572:	4b5c      	ldr	r3, [pc, #368]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006578:	4a5a      	ldr	r2, [pc, #360]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800657a:	f043 0301 	orr.w	r3, r3, #1
 800657e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006582:	e00f      	b.n	80065a4 <HAL_RCC_OscConfig+0x378>
 8006584:	4b57      	ldr	r3, [pc, #348]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800658a:	4a56      	ldr	r2, [pc, #344]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800658c:	f023 0301 	bic.w	r3, r3, #1
 8006590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006594:	4b53      	ldr	r3, [pc, #332]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659a:	4a52      	ldr	r2, [pc, #328]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800659c:	f023 0304 	bic.w	r3, r3, #4
 80065a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d016      	beq.n	80065da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065ac:	f7fd fafa 	bl	8003ba4 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065b2:	e00a      	b.n	80065ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065b4:	f7fd faf6 	bl	8003ba4 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e138      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ca:	4b46      	ldr	r3, [pc, #280]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80065cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d0:	f003 0302 	and.w	r3, r3, #2
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0ed      	beq.n	80065b4 <HAL_RCC_OscConfig+0x388>
 80065d8:	e015      	b.n	8006606 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065da:	f7fd fae3 	bl	8003ba4 <HAL_GetTick>
 80065de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065e0:	e00a      	b.n	80065f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065e2:	f7fd fadf 	bl	8003ba4 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d901      	bls.n	80065f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e121      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065f8:	4b3a      	ldr	r3, [pc, #232]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1ed      	bne.n	80065e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800660c:	4b35      	ldr	r3, [pc, #212]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800660e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006610:	4a34      	ldr	r2, [pc, #208]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006616:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d03c      	beq.n	800669e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01c      	beq.n	8006666 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800662c:	4b2d      	ldr	r3, [pc, #180]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800662e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006632:	4a2c      	ldr	r2, [pc, #176]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006634:	f043 0301 	orr.w	r3, r3, #1
 8006638:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fd fab2 	bl	8003ba4 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006644:	f7fd faae 	bl	8003ba4 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e0f2      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006656:	4b23      	ldr	r3, [pc, #140]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d0ef      	beq.n	8006644 <HAL_RCC_OscConfig+0x418>
 8006664:	e01b      	b.n	800669e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006666:	4b1f      	ldr	r3, [pc, #124]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800666c:	4a1d      	ldr	r2, [pc, #116]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 800666e:	f023 0301 	bic.w	r3, r3, #1
 8006672:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006676:	f7fd fa95 	bl	8003ba4 <HAL_GetTick>
 800667a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800667c:	e008      	b.n	8006690 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800667e:	f7fd fa91 	bl	8003ba4 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	2b02      	cmp	r3, #2
 800668a:	d901      	bls.n	8006690 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	e0d5      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006690:	4b14      	ldr	r3, [pc, #80]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 8006692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1ef      	bne.n	800667e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80c9 	beq.w	800683a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066a8:	4b0e      	ldr	r3, [pc, #56]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f003 030c 	and.w	r3, r3, #12
 80066b0:	2b0c      	cmp	r3, #12
 80066b2:	f000 8083 	beq.w	80067bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d15e      	bne.n	800677c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066be:	4b09      	ldr	r3, [pc, #36]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a08      	ldr	r2, [pc, #32]	@ (80066e4 <HAL_RCC_OscConfig+0x4b8>)
 80066c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ca:	f7fd fa6b 	bl	8003ba4 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066d0:	e00c      	b.n	80066ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066d2:	f7fd fa67 	bl	8003ba4 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d905      	bls.n	80066ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e0ab      	b.n	800683c <HAL_RCC_OscConfig+0x610>
 80066e4:	40021000 	.word	0x40021000
 80066e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ec:	4b55      	ldr	r3, [pc, #340]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1ec      	bne.n	80066d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066f8:	4b52      	ldr	r3, [pc, #328]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80066fa:	68da      	ldr	r2, [r3, #12]
 80066fc:	4b52      	ldr	r3, [pc, #328]	@ (8006848 <HAL_RCC_OscConfig+0x61c>)
 80066fe:	4013      	ands	r3, r2
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	6a11      	ldr	r1, [r2, #32]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006708:	3a01      	subs	r2, #1
 800670a:	0112      	lsls	r2, r2, #4
 800670c:	4311      	orrs	r1, r2
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006712:	0212      	lsls	r2, r2, #8
 8006714:	4311      	orrs	r1, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800671a:	0852      	lsrs	r2, r2, #1
 800671c:	3a01      	subs	r2, #1
 800671e:	0552      	lsls	r2, r2, #21
 8006720:	4311      	orrs	r1, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006726:	0852      	lsrs	r2, r2, #1
 8006728:	3a01      	subs	r2, #1
 800672a:	0652      	lsls	r2, r2, #25
 800672c:	4311      	orrs	r1, r2
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006732:	06d2      	lsls	r2, r2, #27
 8006734:	430a      	orrs	r2, r1
 8006736:	4943      	ldr	r1, [pc, #268]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 8006738:	4313      	orrs	r3, r2
 800673a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b41      	ldr	r3, [pc, #260]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a40      	ldr	r2, [pc, #256]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 8006742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006746:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006748:	4b3e      	ldr	r3, [pc, #248]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a3d      	ldr	r2, [pc, #244]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 800674e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006754:	f7fd fa26 	bl	8003ba4 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800675c:	f7fd fa22 	bl	8003ba4 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b02      	cmp	r3, #2
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e066      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800676e:	4b35      	ldr	r3, [pc, #212]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d0f0      	beq.n	800675c <HAL_RCC_OscConfig+0x530>
 800677a:	e05e      	b.n	800683a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800677c:	4b31      	ldr	r3, [pc, #196]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a30      	ldr	r2, [pc, #192]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 8006782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006788:	f7fd fa0c 	bl	8003ba4 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006790:	f7fd fa08 	bl	8003ba4 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b02      	cmp	r3, #2
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e04c      	b.n	800683c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067a2:	4b28      	ldr	r3, [pc, #160]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067ae:	4b25      	ldr	r3, [pc, #148]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	4924      	ldr	r1, [pc, #144]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80067b4:	4b25      	ldr	r3, [pc, #148]	@ (800684c <HAL_RCC_OscConfig+0x620>)
 80067b6:	4013      	ands	r3, r2
 80067b8:	60cb      	str	r3, [r1, #12]
 80067ba:	e03e      	b.n	800683a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e039      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006844 <HAL_RCC_OscConfig+0x618>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f003 0203 	and.w	r2, r3, #3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d12c      	bne.n	8006836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	3b01      	subs	r3, #1
 80067e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d123      	bne.n	8006836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d11b      	bne.n	8006836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006808:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d113      	bne.n	8006836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	085b      	lsrs	r3, r3, #1
 800681a:	3b01      	subs	r3, #1
 800681c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800681e:	429a      	cmp	r2, r3
 8006820:	d109      	bne.n	8006836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	3b01      	subs	r3, #1
 8006830:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d001      	beq.n	800683a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3720      	adds	r7, #32
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40021000 	.word	0x40021000
 8006848:	019f800c 	.word	0x019f800c
 800684c:	feeefffc 	.word	0xfeeefffc

08006850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800685a:	2300      	movs	r3, #0
 800685c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006864:	2301      	movs	r3, #1
 8006866:	e11e      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006868:	4b91      	ldr	r3, [pc, #580]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 030f 	and.w	r3, r3, #15
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d910      	bls.n	8006898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006876:	4b8e      	ldr	r3, [pc, #568]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f023 020f 	bic.w	r2, r3, #15
 800687e:	498c      	ldr	r1, [pc, #560]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006886:	4b8a      	ldr	r3, [pc, #552]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d001      	beq.n	8006898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e106      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d073      	beq.n	800698c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d129      	bne.n	8006900 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ac:	4b81      	ldr	r3, [pc, #516]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e0f4      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80068bc:	f000 f99e 	bl	8006bfc <RCC_GetSysClockFreqFromPLLSource>
 80068c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	4a7c      	ldr	r2, [pc, #496]	@ (8006ab8 <HAL_RCC_ClockConfig+0x268>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d93f      	bls.n	800694a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068ca:	4b7a      	ldr	r3, [pc, #488]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d033      	beq.n	800694a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12f      	bne.n	800694a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068ea:	4b72      	ldr	r3, [pc, #456]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068f2:	4a70      	ldr	r2, [pc, #448]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80068f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068fa:	2380      	movs	r3, #128	@ 0x80
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e024      	b.n	800694a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d107      	bne.n	8006918 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006908:	4b6a      	ldr	r3, [pc, #424]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d109      	bne.n	8006928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0c6      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006918:	4b66      	ldr	r3, [pc, #408]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e0be      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006928:	f000 f8ce 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 800692c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4a61      	ldr	r2, [pc, #388]	@ (8006ab8 <HAL_RCC_ClockConfig+0x268>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d909      	bls.n	800694a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006936:	4b5f      	ldr	r3, [pc, #380]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006944:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006946:	2380      	movs	r3, #128	@ 0x80
 8006948:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800694a:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f023 0203 	bic.w	r2, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4957      	ldr	r1, [pc, #348]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006958:	4313      	orrs	r3, r2
 800695a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695c:	f7fd f922 	bl	8003ba4 <HAL_GetTick>
 8006960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006962:	e00a      	b.n	800697a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006964:	f7fd f91e 	bl	8003ba4 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d901      	bls.n	800697a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e095      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800697a:	4b4e      	ldr	r3, [pc, #312]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	f003 020c 	and.w	r2, r3, #12
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	429a      	cmp	r2, r3
 800698a:	d1eb      	bne.n	8006964 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0302 	and.w	r3, r3, #2
 8006994:	2b00      	cmp	r3, #0
 8006996:	d023      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0304 	and.w	r3, r3, #4
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069a4:	4b43      	ldr	r3, [pc, #268]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	4a42      	ldr	r2, [pc, #264]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80069bc:	4b3d      	ldr	r3, [pc, #244]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069c4:	4a3b      	ldr	r2, [pc, #236]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069cc:	4b39      	ldr	r3, [pc, #228]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	4936      	ldr	r1, [pc, #216]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
 80069de:	e008      	b.n	80069f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	2b80      	cmp	r3, #128	@ 0x80
 80069e4:	d105      	bne.n	80069f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069e6:	4b33      	ldr	r3, [pc, #204]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 80069ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069f2:	4b2f      	ldr	r3, [pc, #188]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 030f 	and.w	r3, r3, #15
 80069fa:	683a      	ldr	r2, [r7, #0]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d21d      	bcs.n	8006a3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a00:	4b2b      	ldr	r3, [pc, #172]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f023 020f 	bic.w	r2, r3, #15
 8006a08:	4929      	ldr	r1, [pc, #164]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a10:	f7fd f8c8 	bl	8003ba4 <HAL_GetTick>
 8006a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a16:	e00a      	b.n	8006a2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a18:	f7fd f8c4 	bl	8003ba4 <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e03b      	b.n	8006aa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a2e:	4b20      	ldr	r3, [pc, #128]	@ (8006ab0 <HAL_RCC_ClockConfig+0x260>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 030f 	and.w	r3, r3, #15
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d1ed      	bne.n	8006a18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d008      	beq.n	8006a5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a48:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	4917      	ldr	r1, [pc, #92]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0308 	and.w	r3, r3, #8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d009      	beq.n	8006a7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a66:	4b13      	ldr	r3, [pc, #76]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	490f      	ldr	r1, [pc, #60]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a7a:	f000 f825 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab4 <HAL_RCC_ClockConfig+0x264>)
 8006a82:	689b      	ldr	r3, [r3, #8]
 8006a84:	091b      	lsrs	r3, r3, #4
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	490c      	ldr	r1, [pc, #48]	@ (8006abc <HAL_RCC_ClockConfig+0x26c>)
 8006a8c:	5ccb      	ldrb	r3, [r1, r3]
 8006a8e:	f003 031f 	and.w	r3, r3, #31
 8006a92:	fa22 f303 	lsr.w	r3, r2, r3
 8006a96:	4a0a      	ldr	r2, [pc, #40]	@ (8006ac0 <HAL_RCC_ClockConfig+0x270>)
 8006a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <HAL_RCC_ClockConfig+0x274>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fd f834 	bl	8003b0c <HAL_InitTick>
 8006aa4:	4603      	mov	r3, r0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3718      	adds	r7, #24
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	40022000 	.word	0x40022000
 8006ab4:	40021000 	.word	0x40021000
 8006ab8:	04c4b400 	.word	0x04c4b400
 8006abc:	0800bcfc 	.word	0x0800bcfc
 8006ac0:	20000164 	.word	0x20000164
 8006ac4:	20000168 	.word	0x20000168

08006ac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ace:	4b2c      	ldr	r3, [pc, #176]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d102      	bne.n	8006ae0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ada:	4b2a      	ldr	r3, [pc, #168]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006adc:	613b      	str	r3, [r7, #16]
 8006ade:	e047      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006ae0:	4b27      	ldr	r3, [pc, #156]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 030c 	and.w	r3, r3, #12
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d102      	bne.n	8006af2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aec:	4b26      	ldr	r3, [pc, #152]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	e03e      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006af2:	4b23      	ldr	r3, [pc, #140]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f003 030c 	and.w	r3, r3, #12
 8006afa:	2b0c      	cmp	r3, #12
 8006afc:	d136      	bne.n	8006b6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006afe:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f003 0303 	and.w	r3, r3, #3
 8006b06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b08:	4b1d      	ldr	r3, [pc, #116]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	091b      	lsrs	r3, r3, #4
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	3301      	adds	r3, #1
 8006b14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d10c      	bne.n	8006b36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b1c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b24:	4a16      	ldr	r2, [pc, #88]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b26:	68d2      	ldr	r2, [r2, #12]
 8006b28:	0a12      	lsrs	r2, r2, #8
 8006b2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b2e:	fb02 f303 	mul.w	r3, r2, r3
 8006b32:	617b      	str	r3, [r7, #20]
      break;
 8006b34:	e00c      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b36:	4a13      	ldr	r2, [pc, #76]	@ (8006b84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3e:	4a10      	ldr	r2, [pc, #64]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b40:	68d2      	ldr	r2, [r2, #12]
 8006b42:	0a12      	lsrs	r2, r2, #8
 8006b44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b48:	fb02 f303 	mul.w	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]
      break;
 8006b4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b50:	4b0b      	ldr	r3, [pc, #44]	@ (8006b80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	0e5b      	lsrs	r3, r3, #25
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	e001      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b70:	693b      	ldr	r3, [r7, #16]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40021000 	.word	0x40021000
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	016e3600 	.word	0x016e3600

08006b8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b90:	4b03      	ldr	r3, [pc, #12]	@ (8006ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b92:	681b      	ldr	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000164 	.word	0x20000164

08006ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006ba8:	f7ff fff0 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bac:	4602      	mov	r2, r0
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	0a1b      	lsrs	r3, r3, #8
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	4904      	ldr	r1, [pc, #16]	@ (8006bcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bba:	5ccb      	ldrb	r3, [r1, r3]
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	0800bd0c 	.word	0x0800bd0c

08006bd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bd4:	f7ff ffda 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	4b06      	ldr	r3, [pc, #24]	@ (8006bf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	0adb      	lsrs	r3, r3, #11
 8006be0:	f003 0307 	and.w	r3, r3, #7
 8006be4:	4904      	ldr	r1, [pc, #16]	@ (8006bf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006be6:	5ccb      	ldrb	r3, [r1, r3]
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	40021000 	.word	0x40021000
 8006bf8:	0800bd0c 	.word	0x0800bd0c

08006bfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c02:	4b1e      	ldr	r3, [pc, #120]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	091b      	lsrs	r3, r3, #4
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	3301      	adds	r3, #1
 8006c18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d10c      	bne.n	8006c3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c20:	4a17      	ldr	r2, [pc, #92]	@ (8006c80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c28:	4a14      	ldr	r2, [pc, #80]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c2a:	68d2      	ldr	r2, [r2, #12]
 8006c2c:	0a12      	lsrs	r2, r2, #8
 8006c2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	617b      	str	r3, [r7, #20]
    break;
 8006c38:	e00c      	b.n	8006c54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c3a:	4a12      	ldr	r2, [pc, #72]	@ (8006c84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	4a0e      	ldr	r2, [pc, #56]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c44:	68d2      	ldr	r2, [r2, #12]
 8006c46:	0a12      	lsrs	r2, r2, #8
 8006c48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	617b      	str	r3, [r7, #20]
    break;
 8006c52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c54:	4b09      	ldr	r3, [pc, #36]	@ (8006c7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	0e5b      	lsrs	r3, r3, #25
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	3301      	adds	r3, #1
 8006c60:	005b      	lsls	r3, r3, #1
 8006c62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c6e:	687b      	ldr	r3, [r7, #4]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	371c      	adds	r7, #28
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	016e3600 	.word	0x016e3600
 8006c84:	00f42400 	.word	0x00f42400

08006c88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c90:	2300      	movs	r3, #0
 8006c92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c94:	2300      	movs	r3, #0
 8006c96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f000 8098 	beq.w	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006caa:	4b43      	ldr	r3, [pc, #268]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10d      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cb6:	4b40      	ldr	r3, [pc, #256]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cba:	4a3f      	ldr	r2, [pc, #252]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a39      	ldr	r2, [pc, #228]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cde:	f7fc ff61 	bl	8003ba4 <HAL_GetTick>
 8006ce2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ce4:	e009      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce6:	f7fc ff5d 	bl	8003ba4 <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d902      	bls.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	74fb      	strb	r3, [r7, #19]
        break;
 8006cf8:	e005      	b.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cfa:	4b30      	ldr	r3, [pc, #192]	@ (8006dbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0ef      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d06:	7cfb      	ldrb	r3, [r7, #19]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d159      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01e      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d019      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d28:	4b23      	ldr	r3, [pc, #140]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d34:	4b20      	ldr	r3, [pc, #128]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d44:	4b1c      	ldr	r3, [pc, #112]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d54:	4a18      	ldr	r2, [pc, #96]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d016      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d66:	f7fc ff1d 	bl	8003ba4 <HAL_GetTick>
 8006d6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d6c:	e00b      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d6e:	f7fc ff19 	bl	8003ba4 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d902      	bls.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	74fb      	strb	r3, [r7, #19]
            break;
 8006d84:	e006      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d86:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	f003 0302 	and.w	r3, r3, #2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0ec      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d94:	7cfb      	ldrb	r3, [r7, #19]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006da0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006da8:	4903      	ldr	r1, [pc, #12]	@ (8006db8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006db0:	e008      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	74bb      	strb	r3, [r7, #18]
 8006db6:	e005      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc0:	7cfb      	ldrb	r3, [r7, #19]
 8006dc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dc4:	7c7b      	ldrb	r3, [r7, #17]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d105      	bne.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dca:	4ba7      	ldr	r3, [pc, #668]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dce:	4aa6      	ldr	r2, [pc, #664]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006dd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00a      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006de2:	4ba1      	ldr	r3, [pc, #644]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de8:	f023 0203 	bic.w	r2, r3, #3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	499d      	ldr	r1, [pc, #628]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00a      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e04:	4b98      	ldr	r3, [pc, #608]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0a:	f023 020c 	bic.w	r2, r3, #12
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4995      	ldr	r1, [pc, #596]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d00a      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e26:	4b90      	ldr	r3, [pc, #576]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	498c      	ldr	r1, [pc, #560]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e48:	4b87      	ldr	r3, [pc, #540]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	4984      	ldr	r1, [pc, #528]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 0310 	and.w	r3, r3, #16
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	695b      	ldr	r3, [r3, #20]
 8006e78:	497b      	ldr	r1, [pc, #492]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0320 	and.w	r3, r3, #32
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e8c:	4b76      	ldr	r3, [pc, #472]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	4973      	ldr	r1, [pc, #460]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006eae:	4b6e      	ldr	r3, [pc, #440]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	496a      	ldr	r1, [pc, #424]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ed0:	4b65      	ldr	r3, [pc, #404]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	4962      	ldr	r1, [pc, #392]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ef2:	4b5d      	ldr	r3, [pc, #372]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	4959      	ldr	r1, [pc, #356]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f02:	4313      	orrs	r3, r2
 8006f04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00a      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f14:	4b54      	ldr	r3, [pc, #336]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006f1a:	f023 0203 	bic.w	r2, r3, #3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	4951      	ldr	r1, [pc, #324]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d00a      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f36:	4b4c      	ldr	r3, [pc, #304]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	4948      	ldr	r1, [pc, #288]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d015      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f58:	4b43      	ldr	r3, [pc, #268]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	4940      	ldr	r1, [pc, #256]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f76:	d105      	bne.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f78:	4b3b      	ldr	r3, [pc, #236]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d015      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f90:	4b35      	ldr	r3, [pc, #212]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f9e:	4932      	ldr	r1, [pc, #200]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fae:	d105      	bne.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d015      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fc8:	4b27      	ldr	r3, [pc, #156]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fd6:	4924      	ldr	r1, [pc, #144]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fe6:	d105      	bne.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fe8:	4b1f      	ldr	r3, [pc, #124]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006fee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ff2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d015      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007000:	4b19      	ldr	r3, [pc, #100]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800700e:	4916      	ldr	r1, [pc, #88]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007010:	4313      	orrs	r3, r2
 8007012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800701a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800701e:	d105      	bne.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007020:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d019      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007038:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800703e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007046:	4908      	ldr	r1, [pc, #32]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007048:	4313      	orrs	r3, r2
 800704a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007056:	d109      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007058:	4b03      	ldr	r3, [pc, #12]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	4a02      	ldr	r2, [pc, #8]	@ (8007068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800705e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007062:	60d3      	str	r3, [r2, #12]
 8007064:	e002      	b.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007066:	bf00      	nop
 8007068:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007078:	4b29      	ldr	r3, [pc, #164]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	4926      	ldr	r1, [pc, #152]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007098:	4b21      	ldr	r3, [pc, #132]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a20      	ldr	r2, [pc, #128]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800709e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80070b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070be:	4918      	ldr	r1, [pc, #96]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ce:	d105      	bne.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80070d0:	4b13      	ldr	r3, [pc, #76]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a12      	ldr	r2, [pc, #72]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d015      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80070ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f6:	490a      	ldr	r1, [pc, #40]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007106:	d105      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007108:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	4a04      	ldr	r2, [pc, #16]	@ (8007120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800710e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007114:	7cbb      	ldrb	r3, [r7, #18]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40021000 	.word	0x40021000

08007124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d101      	bne.n	8007136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	e054      	b.n	80071e0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800713c:	b2db      	uxtb	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d111      	bne.n	8007166 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 feec 	bl	8008f28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a23      	ldr	r2, [pc, #140]	@ (80071e8 <HAL_TIM_Base_Init+0xc4>)
 800715c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3304      	adds	r3, #4
 8007176:	4619      	mov	r1, r3
 8007178:	4610      	mov	r0, r2
 800717a:	f001 fa35 	bl	80085e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2201      	movs	r2, #1
 8007182:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2201      	movs	r2, #1
 80071d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	08003611 	.word	0x08003611

080071ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d001      	beq.n	8007204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007200:	2301      	movs	r3, #1
 8007202:	e04c      	b.n	800729e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a26      	ldr	r2, [pc, #152]	@ (80072ac <HAL_TIM_Base_Start+0xc0>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d022      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721e:	d01d      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a22      	ldr	r2, [pc, #136]	@ (80072b0 <HAL_TIM_Base_Start+0xc4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d018      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a21      	ldr	r2, [pc, #132]	@ (80072b4 <HAL_TIM_Base_Start+0xc8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <HAL_TIM_Base_Start+0xcc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00e      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1e      	ldr	r2, [pc, #120]	@ (80072bc <HAL_TIM_Base_Start+0xd0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d009      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1c      	ldr	r2, [pc, #112]	@ (80072c0 <HAL_TIM_Base_Start+0xd4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d004      	beq.n	800725c <HAL_TIM_Base_Start+0x70>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a1b      	ldr	r2, [pc, #108]	@ (80072c4 <HAL_TIM_Base_Start+0xd8>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d115      	bne.n	8007288 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	689a      	ldr	r2, [r3, #8]
 8007262:	4b19      	ldr	r3, [pc, #100]	@ (80072c8 <HAL_TIM_Base_Start+0xdc>)
 8007264:	4013      	ands	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b06      	cmp	r3, #6
 800726c:	d015      	beq.n	800729a <HAL_TIM_Base_Start+0xae>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007274:	d011      	beq.n	800729a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f042 0201 	orr.w	r2, r2, #1
 8007284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007286:	e008      	b.n	800729a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	e000      	b.n	800729c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800729a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3714      	adds	r7, #20
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop
 80072ac:	40012c00 	.word	0x40012c00
 80072b0:	40000400 	.word	0x40000400
 80072b4:	40000800 	.word	0x40000800
 80072b8:	40000c00 	.word	0x40000c00
 80072bc:	40013400 	.word	0x40013400
 80072c0:	40014000 	.word	0x40014000
 80072c4:	40015000 	.word	0x40015000
 80072c8:	00010007 	.word	0x00010007

080072cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d001      	beq.n	80072e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e054      	b.n	800738e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a26      	ldr	r2, [pc, #152]	@ (800739c <HAL_TIM_Base_Start_IT+0xd0>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d022      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800730e:	d01d      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a22      	ldr	r2, [pc, #136]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d018      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a21      	ldr	r2, [pc, #132]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d013      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a1f      	ldr	r2, [pc, #124]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d00e      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a1e      	ldr	r2, [pc, #120]	@ (80073ac <HAL_TIM_Base_Start_IT+0xe0>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d009      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a1c      	ldr	r2, [pc, #112]	@ (80073b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d004      	beq.n	800734c <HAL_TIM_Base_Start_IT+0x80>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1b      	ldr	r2, [pc, #108]	@ (80073b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d115      	bne.n	8007378 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	4b19      	ldr	r3, [pc, #100]	@ (80073b8 <HAL_TIM_Base_Start_IT+0xec>)
 8007354:	4013      	ands	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b06      	cmp	r3, #6
 800735c:	d015      	beq.n	800738a <HAL_TIM_Base_Start_IT+0xbe>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007364:	d011      	beq.n	800738a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007376:	e008      	b.n	800738a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f042 0201 	orr.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	e000      	b.n	800738c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800738c:	2300      	movs	r3, #0
}
 800738e:	4618      	mov	r0, r3
 8007390:	3714      	adds	r7, #20
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop
 800739c:	40012c00 	.word	0x40012c00
 80073a0:	40000400 	.word	0x40000400
 80073a4:	40000800 	.word	0x40000800
 80073a8:	40000c00 	.word	0x40000c00
 80073ac:	40013400 	.word	0x40013400
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40015000 	.word	0x40015000
 80073b8:	00010007 	.word	0x00010007

080073bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e054      	b.n	8007478 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d111      	bne.n	80073fe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f001 fda0 	bl	8008f28 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d102      	bne.n	80073f6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a23      	ldr	r2, [pc, #140]	@ (8007480 <HAL_TIM_PWM_Init+0xc4>)
 80073f4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3304      	adds	r3, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4610      	mov	r0, r2
 8007412:	f001 f8e9 	bl	80085e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2201      	movs	r2, #1
 800743a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2201      	movs	r2, #1
 800746a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	08007485 	.word	0x08007485

08007484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <HAL_TIM_PWM_Start+0x24>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	bf14      	ite	ne
 80074b4:	2301      	movne	r3, #1
 80074b6:	2300      	moveq	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	e03c      	b.n	8007536 <HAL_TIM_PWM_Start+0x9e>
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d109      	bne.n	80074d6 <HAL_TIM_PWM_Start+0x3e>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	bf14      	ite	ne
 80074ce:	2301      	movne	r3, #1
 80074d0:	2300      	moveq	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	e02f      	b.n	8007536 <HAL_TIM_PWM_Start+0x9e>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b08      	cmp	r3, #8
 80074da:	d109      	bne.n	80074f0 <HAL_TIM_PWM_Start+0x58>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	bf14      	ite	ne
 80074e8:	2301      	movne	r3, #1
 80074ea:	2300      	moveq	r3, #0
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	e022      	b.n	8007536 <HAL_TIM_PWM_Start+0x9e>
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2b0c      	cmp	r3, #12
 80074f4:	d109      	bne.n	800750a <HAL_TIM_PWM_Start+0x72>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b01      	cmp	r3, #1
 8007500:	bf14      	ite	ne
 8007502:	2301      	movne	r3, #1
 8007504:	2300      	moveq	r3, #0
 8007506:	b2db      	uxtb	r3, r3
 8007508:	e015      	b.n	8007536 <HAL_TIM_PWM_Start+0x9e>
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b10      	cmp	r3, #16
 800750e:	d109      	bne.n	8007524 <HAL_TIM_PWM_Start+0x8c>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b01      	cmp	r3, #1
 800751a:	bf14      	ite	ne
 800751c:	2301      	movne	r3, #1
 800751e:	2300      	moveq	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	e008      	b.n	8007536 <HAL_TIM_PWM_Start+0x9e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b01      	cmp	r3, #1
 800752e:	bf14      	ite	ne
 8007530:	2301      	movne	r3, #1
 8007532:	2300      	moveq	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0a6      	b.n	800768c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <HAL_TIM_PWM_Start+0xb6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800754c:	e023      	b.n	8007596 <HAL_TIM_PWM_Start+0xfe>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b04      	cmp	r3, #4
 8007552:	d104      	bne.n	800755e <HAL_TIM_PWM_Start+0xc6>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800755c:	e01b      	b.n	8007596 <HAL_TIM_PWM_Start+0xfe>
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d104      	bne.n	800756e <HAL_TIM_PWM_Start+0xd6>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800756c:	e013      	b.n	8007596 <HAL_TIM_PWM_Start+0xfe>
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b0c      	cmp	r3, #12
 8007572:	d104      	bne.n	800757e <HAL_TIM_PWM_Start+0xe6>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800757c:	e00b      	b.n	8007596 <HAL_TIM_PWM_Start+0xfe>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	2b10      	cmp	r3, #16
 8007582:	d104      	bne.n	800758e <HAL_TIM_PWM_Start+0xf6>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800758c:	e003      	b.n	8007596 <HAL_TIM_PWM_Start+0xfe>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2201      	movs	r2, #1
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f001 fc9c 	bl	8008edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a3a      	ldr	r2, [pc, #232]	@ (8007694 <HAL_TIM_PWM_Start+0x1fc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d018      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x148>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a39      	ldr	r2, [pc, #228]	@ (8007698 <HAL_TIM_PWM_Start+0x200>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x148>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a37      	ldr	r2, [pc, #220]	@ (800769c <HAL_TIM_PWM_Start+0x204>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d00e      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x148>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a36      	ldr	r2, [pc, #216]	@ (80076a0 <HAL_TIM_PWM_Start+0x208>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d009      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x148>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a34      	ldr	r2, [pc, #208]	@ (80076a4 <HAL_TIM_PWM_Start+0x20c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d004      	beq.n	80075e0 <HAL_TIM_PWM_Start+0x148>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a33      	ldr	r2, [pc, #204]	@ (80076a8 <HAL_TIM_PWM_Start+0x210>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d101      	bne.n	80075e4 <HAL_TIM_PWM_Start+0x14c>
 80075e0:	2301      	movs	r3, #1
 80075e2:	e000      	b.n	80075e6 <HAL_TIM_PWM_Start+0x14e>
 80075e4:	2300      	movs	r3, #0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d007      	beq.n	80075fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a25      	ldr	r2, [pc, #148]	@ (8007694 <HAL_TIM_PWM_Start+0x1fc>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d022      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760c:	d01d      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a26      	ldr	r2, [pc, #152]	@ (80076ac <HAL_TIM_PWM_Start+0x214>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d018      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a24      	ldr	r2, [pc, #144]	@ (80076b0 <HAL_TIM_PWM_Start+0x218>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a23      	ldr	r2, [pc, #140]	@ (80076b4 <HAL_TIM_PWM_Start+0x21c>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00e      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a19      	ldr	r2, [pc, #100]	@ (8007698 <HAL_TIM_PWM_Start+0x200>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d009      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a18      	ldr	r2, [pc, #96]	@ (800769c <HAL_TIM_PWM_Start+0x204>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d004      	beq.n	800764a <HAL_TIM_PWM_Start+0x1b2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a18      	ldr	r2, [pc, #96]	@ (80076a8 <HAL_TIM_PWM_Start+0x210>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d115      	bne.n	8007676 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	4b19      	ldr	r3, [pc, #100]	@ (80076b8 <HAL_TIM_PWM_Start+0x220>)
 8007652:	4013      	ands	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2b06      	cmp	r3, #6
 800765a:	d015      	beq.n	8007688 <HAL_TIM_PWM_Start+0x1f0>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007662:	d011      	beq.n	8007688 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007674:	e008      	b.n	8007688 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	e000      	b.n	800768a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007688:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	40012c00 	.word	0x40012c00
 8007698:	40013400 	.word	0x40013400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800
 80076a8:	40015000 	.word	0x40015000
 80076ac:	40000400 	.word	0x40000400
 80076b0:	40000800 	.word	0x40000800
 80076b4:	40000c00 	.word	0x40000c00
 80076b8:	00010007 	.word	0x00010007

080076bc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	e04c      	b.n	800776a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d111      	bne.n	8007700 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f001 fc1f 	bl	8008f28 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d102      	bne.n	80076f8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <HAL_TIM_OnePulse_Init+0xb8>)
 80076f6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2202      	movs	r2, #2
 8007704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	3304      	adds	r3, #4
 8007710:	4619      	mov	r1, r3
 8007712:	4610      	mov	r0, r2
 8007714:	f000 ff68 	bl	80085e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0208 	bic.w	r2, r2, #8
 8007726:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6819      	ldr	r1, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	08007779 	.word	0x08007779

08007778 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800779c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80077ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077b4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077b6:	7bfb      	ldrb	r3, [r7, #15]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d108      	bne.n	80077ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d105      	bne.n	80077ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077c2:	7b7b      	ldrb	r3, [r7, #13]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d102      	bne.n	80077ce <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077c8:	7b3b      	ldrb	r3, [r7, #12]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d001      	beq.n	80077d2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e059      	b.n	8007886 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2202      	movs	r2, #2
 80077e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68da      	ldr	r2, [r3, #12]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f042 0202 	orr.w	r2, r2, #2
 8007800:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f042 0204 	orr.w	r2, r2, #4
 8007810:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	2100      	movs	r1, #0
 800781a:	4618      	mov	r0, r3
 800781c:	f001 fb5e 	bl	8008edc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2201      	movs	r2, #1
 8007826:	2104      	movs	r1, #4
 8007828:	4618      	mov	r0, r3
 800782a:	f001 fb57 	bl	8008edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a15      	ldr	r2, [pc, #84]	@ (8007894 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a14      	ldr	r2, [pc, #80]	@ (8007898 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIM_OnePulse_Start_IT+0xde>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a12      	ldr	r2, [pc, #72]	@ (800789c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a11      	ldr	r2, [pc, #68]	@ (80078a0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIM_OnePulse_Start_IT+0xde>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a0f      	ldr	r2, [pc, #60]	@ (80078a4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d101      	bne.n	800786e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800786a:	2301      	movs	r3, #1
 800786c:	e000      	b.n	8007870 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800786e:	2300      	movs	r3, #0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800
 80078a4:	40015000 	.word	0x40015000

080078a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0a2      	b.n	8007a02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d111      	bne.n	80078ec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f001 fb29 	bl	8008f28 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a4a      	ldr	r2, [pc, #296]	@ (8007a0c <HAL_TIM_Encoder_Init+0x164>)
 80078e2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007902:	f023 0307 	bic.w	r3, r3, #7
 8007906:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 fe68 	bl	80085e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	697a      	ldr	r2, [r7, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007940:	f023 0303 	bic.w	r3, r3, #3
 8007944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	4313      	orrs	r3, r2
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800795e:	f023 030c 	bic.w	r3, r3, #12
 8007962:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800796a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4313      	orrs	r3, r2
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	011a      	lsls	r2, r3, #4
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	031b      	lsls	r3, r3, #12
 800798e:	4313      	orrs	r3, r2
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800799c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80079a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	4313      	orrs	r3, r2
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	080036e1 	.word	0x080036e1

08007a10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d110      	bne.n	8007a62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d102      	bne.n	8007a4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a46:	7b7b      	ldrb	r3, [r7, #13]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d001      	beq.n	8007a50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e069      	b.n	8007b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2202      	movs	r2, #2
 8007a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a60:	e031      	b.n	8007ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d110      	bne.n	8007a8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d102      	bne.n	8007a74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a6e:	7b3b      	ldrb	r3, [r7, #12]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d001      	beq.n	8007a78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e055      	b.n	8007b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a88:	e01d      	b.n	8007ac6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d108      	bne.n	8007aa2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d105      	bne.n	8007aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007a96:	7b7b      	ldrb	r3, [r7, #13]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d102      	bne.n	8007aa2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007a9c:	7b3b      	ldrb	r3, [r7, #12]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d001      	beq.n	8007aa6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e03e      	b.n	8007b24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2202      	movs	r2, #2
 8007ac2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_TIM_Encoder_Start+0xc4>
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b04      	cmp	r3, #4
 8007ad0:	d008      	beq.n	8007ae4 <HAL_TIM_Encoder_Start+0xd4>
 8007ad2:	e00f      	b.n	8007af4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f001 f9fd 	bl	8008edc <TIM_CCxChannelCmd>
      break;
 8007ae2:	e016      	b.n	8007b12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2104      	movs	r1, #4
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f9f5 	bl	8008edc <TIM_CCxChannelCmd>
      break;
 8007af2:	e00e      	b.n	8007b12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2201      	movs	r2, #1
 8007afa:	2100      	movs	r1, #0
 8007afc:	4618      	mov	r0, r3
 8007afe:	f001 f9ed 	bl	8008edc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2201      	movs	r2, #1
 8007b08:	2104      	movs	r1, #4
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f001 f9e6 	bl	8008edc <TIM_CCxChannelCmd>
      break;
 8007b10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f042 0201 	orr.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d026      	beq.n	8007b9c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d021      	beq.n	8007b9c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0202 	mvn.w	r2, #2
 8007b60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	699b      	ldr	r3, [r3, #24]
 8007b6e:	f003 0303 	and.w	r3, r3, #3
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d005      	beq.n	8007b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	4798      	blx	r3
 8007b80:	e009      	b.n	8007b96 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	f003 0304 	and.w	r3, r3, #4
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d026      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d021      	beq.n	8007bf4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f06f 0204 	mvn.w	r2, #4
 8007bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	4798      	blx	r3
 8007bd8:	e009      	b.n	8007bee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f003 0308 	and.w	r3, r3, #8
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d026      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d021      	beq.n	8007c4c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f06f 0208 	mvn.w	r2, #8
 8007c10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2204      	movs	r2, #4
 8007c16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f003 0303 	and.w	r3, r3, #3
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d005      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	4798      	blx	r3
 8007c30:	e009      	b.n	8007c46 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 0310 	and.w	r3, r3, #16
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d026      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d021      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0210 	mvn.w	r2, #16
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d005      	beq.n	8007c8a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
 8007c88:	e009      	b.n	8007c9e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00e      	beq.n	8007ccc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0201 	mvn.w	r2, #1
 8007cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00e      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d009      	beq.n	8007cfe <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00e      	beq.n	8007d4e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d009      	beq.n	8007d4e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f003 0320 	and.w	r3, r3, #32
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d00e      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d009      	beq.n	8007d76 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f06f 0220 	mvn.w	r2, #32
 8007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8007d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00e      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d009      	beq.n	8007dc6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00e      	beq.n	8007dee <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00e      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d009      	beq.n	8007e16 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e16:	bf00      	nop
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b086      	sub	sp, #24
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	e0ff      	b.n	800803e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b14      	cmp	r3, #20
 8007e4a:	f200 80f0 	bhi.w	800802e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007ea9 	.word	0x08007ea9
 8007e58:	0800802f 	.word	0x0800802f
 8007e5c:	0800802f 	.word	0x0800802f
 8007e60:	0800802f 	.word	0x0800802f
 8007e64:	08007ee9 	.word	0x08007ee9
 8007e68:	0800802f 	.word	0x0800802f
 8007e6c:	0800802f 	.word	0x0800802f
 8007e70:	0800802f 	.word	0x0800802f
 8007e74:	08007f2b 	.word	0x08007f2b
 8007e78:	0800802f 	.word	0x0800802f
 8007e7c:	0800802f 	.word	0x0800802f
 8007e80:	0800802f 	.word	0x0800802f
 8007e84:	08007f6b 	.word	0x08007f6b
 8007e88:	0800802f 	.word	0x0800802f
 8007e8c:	0800802f 	.word	0x0800802f
 8007e90:	0800802f 	.word	0x0800802f
 8007e94:	08007fad 	.word	0x08007fad
 8007e98:	0800802f 	.word	0x0800802f
 8007e9c:	0800802f 	.word	0x0800802f
 8007ea0:	0800802f 	.word	0x0800802f
 8007ea4:	08007fed 	.word	0x08007fed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fc4e 	bl	8008750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0208 	orr.w	r2, r2, #8
 8007ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0204 	bic.w	r2, r2, #4
 8007ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6999      	ldr	r1, [r3, #24]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	619a      	str	r2, [r3, #24]
      break;
 8007ee6:	e0a5      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fcc8 	bl	8008884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	699a      	ldr	r2, [r3, #24]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6999      	ldr	r1, [r3, #24]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	021a      	lsls	r2, r3, #8
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	619a      	str	r2, [r3, #24]
      break;
 8007f28:	e084      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fd3b 	bl	80089ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0208 	orr.w	r2, r2, #8
 8007f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0204 	bic.w	r2, r2, #4
 8007f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69d9      	ldr	r1, [r3, #28]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	430a      	orrs	r2, r1
 8007f66:	61da      	str	r2, [r3, #28]
      break;
 8007f68:	e064      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68b9      	ldr	r1, [r7, #8]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fdad 	bl	8008ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69d9      	ldr	r1, [r3, #28]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	021a      	lsls	r2, r3, #8
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	61da      	str	r2, [r3, #28]
      break;
 8007faa:	e043      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fe20 	bl	8008bf8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f042 0208 	orr.w	r2, r2, #8
 8007fc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0204 	bic.w	r2, r2, #4
 8007fd6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	691a      	ldr	r2, [r3, #16]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	430a      	orrs	r2, r1
 8007fe8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007fea:	e023      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68b9      	ldr	r1, [r7, #8]
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fe6a 	bl	8008ccc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008006:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008016:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	691b      	ldr	r3, [r3, #16]
 8008022:	021a      	lsls	r2, r3, #8
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800802c:	e002      	b.n	8008034 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	75fb      	strb	r3, [r7, #23]
      break;
 8008032:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800803c:	7dfb      	ldrb	r3, [r7, #23]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop

08008048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b084      	sub	sp, #16
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_TIM_ConfigClockSource+0x1c>
 8008060:	2302      	movs	r3, #2
 8008062:	e0f6      	b.n	8008252 <HAL_TIM_ConfigClockSource+0x20a>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008082:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800808e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a6f      	ldr	r2, [pc, #444]	@ (800825c <HAL_TIM_ConfigClockSource+0x214>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	f000 80c1 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080a4:	4a6d      	ldr	r2, [pc, #436]	@ (800825c <HAL_TIM_ConfigClockSource+0x214>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	f200 80c6 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080ac:	4a6c      	ldr	r2, [pc, #432]	@ (8008260 <HAL_TIM_ConfigClockSource+0x218>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	f000 80b9 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080b4:	4a6a      	ldr	r2, [pc, #424]	@ (8008260 <HAL_TIM_ConfigClockSource+0x218>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f200 80be 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080bc:	4a69      	ldr	r2, [pc, #420]	@ (8008264 <HAL_TIM_ConfigClockSource+0x21c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	f000 80b1 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080c4:	4a67      	ldr	r2, [pc, #412]	@ (8008264 <HAL_TIM_ConfigClockSource+0x21c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	f200 80b6 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080cc:	4a66      	ldr	r2, [pc, #408]	@ (8008268 <HAL_TIM_ConfigClockSource+0x220>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	f000 80a9 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080d4:	4a64      	ldr	r2, [pc, #400]	@ (8008268 <HAL_TIM_ConfigClockSource+0x220>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	f200 80ae 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080dc:	4a63      	ldr	r2, [pc, #396]	@ (800826c <HAL_TIM_ConfigClockSource+0x224>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	f000 80a1 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080e4:	4a61      	ldr	r2, [pc, #388]	@ (800826c <HAL_TIM_ConfigClockSource+0x224>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	f200 80a6 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080ec:	4a60      	ldr	r2, [pc, #384]	@ (8008270 <HAL_TIM_ConfigClockSource+0x228>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	f000 8099 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 80080f4:	4a5e      	ldr	r2, [pc, #376]	@ (8008270 <HAL_TIM_ConfigClockSource+0x228>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	f200 809e 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 80080fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008100:	f000 8091 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 8008104:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008108:	f200 8096 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 800810c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008110:	f000 8089 	beq.w	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 8008114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008118:	f200 808e 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 800811c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008120:	d03e      	beq.n	80081a0 <HAL_TIM_ConfigClockSource+0x158>
 8008122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008126:	f200 8087 	bhi.w	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 800812a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800812e:	f000 8086 	beq.w	800823e <HAL_TIM_ConfigClockSource+0x1f6>
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008136:	d87f      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008138:	2b70      	cmp	r3, #112	@ 0x70
 800813a:	d01a      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x12a>
 800813c:	2b70      	cmp	r3, #112	@ 0x70
 800813e:	d87b      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008140:	2b60      	cmp	r3, #96	@ 0x60
 8008142:	d050      	beq.n	80081e6 <HAL_TIM_ConfigClockSource+0x19e>
 8008144:	2b60      	cmp	r3, #96	@ 0x60
 8008146:	d877      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008148:	2b50      	cmp	r3, #80	@ 0x50
 800814a:	d03c      	beq.n	80081c6 <HAL_TIM_ConfigClockSource+0x17e>
 800814c:	2b50      	cmp	r3, #80	@ 0x50
 800814e:	d873      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008150:	2b40      	cmp	r3, #64	@ 0x40
 8008152:	d058      	beq.n	8008206 <HAL_TIM_ConfigClockSource+0x1be>
 8008154:	2b40      	cmp	r3, #64	@ 0x40
 8008156:	d86f      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008158:	2b30      	cmp	r3, #48	@ 0x30
 800815a:	d064      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 800815c:	2b30      	cmp	r3, #48	@ 0x30
 800815e:	d86b      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008160:	2b20      	cmp	r3, #32
 8008162:	d060      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 8008164:	2b20      	cmp	r3, #32
 8008166:	d867      	bhi.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d05c      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 800816c:	2b10      	cmp	r3, #16
 800816e:	d05a      	beq.n	8008226 <HAL_TIM_ConfigClockSource+0x1de>
 8008170:	e062      	b.n	8008238 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008182:	f000 fe8b 	bl	8008e9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	609a      	str	r2, [r3, #8]
      break;
 800819e:	e04f      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80081b0:	f000 fe74 	bl	8008e9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80081c2:	609a      	str	r2, [r3, #8]
      break;
 80081c4:	e03c      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80081d2:	461a      	mov	r2, r3
 80081d4:	f000 fde6 	bl	8008da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2150      	movs	r1, #80	@ 0x50
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fe3f 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 80081e4:	e02c      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80081f2:	461a      	mov	r2, r3
 80081f4:	f000 fe05 	bl	8008e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2160      	movs	r1, #96	@ 0x60
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fe2f 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008204:	e01c      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008212:	461a      	mov	r2, r3
 8008214:	f000 fdc6 	bl	8008da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2140      	movs	r1, #64	@ 0x40
 800821e:	4618      	mov	r0, r3
 8008220:	f000 fe1f 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008224:	e00c      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f000 fe16 	bl	8008e62 <TIM_ITRx_SetConfig>
      break;
 8008236:	e003      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
      break;
 800823c:	e000      	b.n	8008240 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800823e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008250:	7bfb      	ldrb	r3, [r7, #15]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	00100070 	.word	0x00100070
 8008260:	00100060 	.word	0x00100060
 8008264:	00100050 	.word	0x00100050
 8008268:	00100040 	.word	0x00100040
 800826c:	00100030 	.word	0x00100030
 8008270:	00100020 	.word	0x00100020

08008274 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b083      	sub	sp, #12
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082f4:	bf00      	nop
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008308:	bf00      	nop
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800831c:	bf00      	nop
 800831e:	370c      	adds	r7, #12
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	460b      	mov	r3, r1
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	e14a      	b.n	80085da <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b01      	cmp	r3, #1
 800834e:	f040 80dd 	bne.w	800850c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	2b1f      	cmp	r3, #31
 8008356:	f200 80d6 	bhi.w	8008506 <HAL_TIM_RegisterCallback+0x1de>
 800835a:	a201      	add	r2, pc, #4	@ (adr r2, 8008360 <HAL_TIM_RegisterCallback+0x38>)
 800835c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008360:	080083e1 	.word	0x080083e1
 8008364:	080083e9 	.word	0x080083e9
 8008368:	080083f1 	.word	0x080083f1
 800836c:	080083f9 	.word	0x080083f9
 8008370:	08008401 	.word	0x08008401
 8008374:	08008409 	.word	0x08008409
 8008378:	08008411 	.word	0x08008411
 800837c:	08008419 	.word	0x08008419
 8008380:	08008421 	.word	0x08008421
 8008384:	08008429 	.word	0x08008429
 8008388:	08008431 	.word	0x08008431
 800838c:	08008439 	.word	0x08008439
 8008390:	08008441 	.word	0x08008441
 8008394:	08008449 	.word	0x08008449
 8008398:	08008453 	.word	0x08008453
 800839c:	0800845d 	.word	0x0800845d
 80083a0:	08008467 	.word	0x08008467
 80083a4:	08008471 	.word	0x08008471
 80083a8:	0800847b 	.word	0x0800847b
 80083ac:	08008485 	.word	0x08008485
 80083b0:	0800848f 	.word	0x0800848f
 80083b4:	08008499 	.word	0x08008499
 80083b8:	080084a3 	.word	0x080084a3
 80083bc:	080084ad 	.word	0x080084ad
 80083c0:	080084b7 	.word	0x080084b7
 80083c4:	080084c1 	.word	0x080084c1
 80083c8:	080084cb 	.word	0x080084cb
 80083cc:	080084d5 	.word	0x080084d5
 80083d0:	080084df 	.word	0x080084df
 80083d4:	080084e9 	.word	0x080084e9
 80083d8:	080084f3 	.word	0x080084f3
 80083dc:	080084fd 	.word	0x080084fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80083e6:	e0f7      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80083ee:	e0f3      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80083f6:	e0ef      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80083fe:	e0eb      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008406:	e0e7      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800840e:	e0e3      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008416:	e0df      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800841e:	e0db      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008426:	e0d7      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800842e:	e0d3      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008436:	e0cf      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800843e:	e0cb      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008446:	e0c7      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008450:	e0c2      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800845a:	e0bd      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008464:	e0b8      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800846e:	e0b3      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008478:	e0ae      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008482:	e0a9      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800848c:	e0a4      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008496:	e09f      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80084a0:	e09a      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80084aa:	e095      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80084b4:	e090      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80084be:	e08b      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80084c8:	e086      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80084d2:	e081      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80084dc:	e07c      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80084e6:	e077      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80084f0:	e072      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80084fa:	e06d      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008504:	e068      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	75fb      	strb	r3, [r7, #23]
        break;
 800850a:	e065      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d15d      	bne.n	80085d4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	2b0d      	cmp	r3, #13
 800851c:	d857      	bhi.n	80085ce <HAL_TIM_RegisterCallback+0x2a6>
 800851e:	a201      	add	r2, pc, #4	@ (adr r2, 8008524 <HAL_TIM_RegisterCallback+0x1fc>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	0800855d 	.word	0x0800855d
 8008528:	08008565 	.word	0x08008565
 800852c:	0800856d 	.word	0x0800856d
 8008530:	08008575 	.word	0x08008575
 8008534:	0800857d 	.word	0x0800857d
 8008538:	08008585 	.word	0x08008585
 800853c:	0800858d 	.word	0x0800858d
 8008540:	08008595 	.word	0x08008595
 8008544:	0800859d 	.word	0x0800859d
 8008548:	080085a5 	.word	0x080085a5
 800854c:	080085ad 	.word	0x080085ad
 8008550:	080085b5 	.word	0x080085b5
 8008554:	080085bd 	.word	0x080085bd
 8008558:	080085c5 	.word	0x080085c5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008562:	e039      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800856a:	e035      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008572:	e031      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800857a:	e02d      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008582:	e029      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800858a:	e025      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008592:	e021      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800859a:	e01d      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80085a2:	e019      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80085aa:	e015      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80085b2:	e011      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80085ba:	e00d      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80085c2:	e009      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80085cc:	e004      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	75fb      	strb	r3, [r7, #23]
        break;
 80085d2:	e001      	b.n	80085d8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop

080085e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a4c      	ldr	r2, [pc, #304]	@ (800872c <TIM_Base_SetConfig+0x144>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d017      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008606:	d013      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	4a49      	ldr	r2, [pc, #292]	@ (8008730 <TIM_Base_SetConfig+0x148>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d00f      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4a48      	ldr	r2, [pc, #288]	@ (8008734 <TIM_Base_SetConfig+0x14c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d00b      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a47      	ldr	r2, [pc, #284]	@ (8008738 <TIM_Base_SetConfig+0x150>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d007      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a46      	ldr	r2, [pc, #280]	@ (800873c <TIM_Base_SetConfig+0x154>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d003      	beq.n	8008630 <TIM_Base_SetConfig+0x48>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a45      	ldr	r2, [pc, #276]	@ (8008740 <TIM_Base_SetConfig+0x158>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d108      	bne.n	8008642 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4313      	orrs	r3, r2
 8008640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a39      	ldr	r2, [pc, #228]	@ (800872c <TIM_Base_SetConfig+0x144>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d023      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008650:	d01f      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a36      	ldr	r2, [pc, #216]	@ (8008730 <TIM_Base_SetConfig+0x148>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d01b      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a35      	ldr	r2, [pc, #212]	@ (8008734 <TIM_Base_SetConfig+0x14c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d017      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a34      	ldr	r2, [pc, #208]	@ (8008738 <TIM_Base_SetConfig+0x150>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d013      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a33      	ldr	r2, [pc, #204]	@ (800873c <TIM_Base_SetConfig+0x154>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d00f      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a33      	ldr	r2, [pc, #204]	@ (8008744 <TIM_Base_SetConfig+0x15c>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d00b      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a32      	ldr	r2, [pc, #200]	@ (8008748 <TIM_Base_SetConfig+0x160>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d007      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a31      	ldr	r2, [pc, #196]	@ (800874c <TIM_Base_SetConfig+0x164>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d003      	beq.n	8008692 <TIM_Base_SetConfig+0xaa>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a2c      	ldr	r2, [pc, #176]	@ (8008740 <TIM_Base_SetConfig+0x158>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d108      	bne.n	80086a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68fa      	ldr	r2, [r7, #12]
 80086b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a18      	ldr	r2, [pc, #96]	@ (800872c <TIM_Base_SetConfig+0x144>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d013      	beq.n	80086f8 <TIM_Base_SetConfig+0x110>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a1a      	ldr	r2, [pc, #104]	@ (800873c <TIM_Base_SetConfig+0x154>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d00f      	beq.n	80086f8 <TIM_Base_SetConfig+0x110>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a1a      	ldr	r2, [pc, #104]	@ (8008744 <TIM_Base_SetConfig+0x15c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00b      	beq.n	80086f8 <TIM_Base_SetConfig+0x110>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a19      	ldr	r2, [pc, #100]	@ (8008748 <TIM_Base_SetConfig+0x160>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d007      	beq.n	80086f8 <TIM_Base_SetConfig+0x110>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a18      	ldr	r2, [pc, #96]	@ (800874c <TIM_Base_SetConfig+0x164>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d003      	beq.n	80086f8 <TIM_Base_SetConfig+0x110>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a13      	ldr	r2, [pc, #76]	@ (8008740 <TIM_Base_SetConfig+0x158>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d103      	bne.n	8008700 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d105      	bne.n	800871e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	611a      	str	r2, [r3, #16]
  }
}
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	40012c00 	.word	0x40012c00
 8008730:	40000400 	.word	0x40000400
 8008734:	40000800 	.word	0x40000800
 8008738:	40000c00 	.word	0x40000c00
 800873c:	40013400 	.word	0x40013400
 8008740:	40015000 	.word	0x40015000
 8008744:	40014000 	.word	0x40014000
 8008748:	40014400 	.word	0x40014400
 800874c:	40014800 	.word	0x40014800

08008750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008750:	b480      	push	{r7}
 8008752:	b087      	sub	sp, #28
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	f023 0201 	bic.w	r2, r3, #1
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800877e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0303 	bic.w	r3, r3, #3
 800878a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f023 0302 	bic.w	r3, r3, #2
 800879c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	697a      	ldr	r2, [r7, #20]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a30      	ldr	r2, [pc, #192]	@ (800886c <TIM_OC1_SetConfig+0x11c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d013      	beq.n	80087d8 <TIM_OC1_SetConfig+0x88>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a2f      	ldr	r2, [pc, #188]	@ (8008870 <TIM_OC1_SetConfig+0x120>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d00f      	beq.n	80087d8 <TIM_OC1_SetConfig+0x88>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a2e      	ldr	r2, [pc, #184]	@ (8008874 <TIM_OC1_SetConfig+0x124>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d00b      	beq.n	80087d8 <TIM_OC1_SetConfig+0x88>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a2d      	ldr	r2, [pc, #180]	@ (8008878 <TIM_OC1_SetConfig+0x128>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d007      	beq.n	80087d8 <TIM_OC1_SetConfig+0x88>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a2c      	ldr	r2, [pc, #176]	@ (800887c <TIM_OC1_SetConfig+0x12c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d003      	beq.n	80087d8 <TIM_OC1_SetConfig+0x88>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a2b      	ldr	r2, [pc, #172]	@ (8008880 <TIM_OC1_SetConfig+0x130>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d10c      	bne.n	80087f2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f023 0308 	bic.w	r3, r3, #8
 80087de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f023 0304 	bic.w	r3, r3, #4
 80087f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1d      	ldr	r2, [pc, #116]	@ (800886c <TIM_OC1_SetConfig+0x11c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_OC1_SetConfig+0xd2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1c      	ldr	r2, [pc, #112]	@ (8008870 <TIM_OC1_SetConfig+0x120>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_OC1_SetConfig+0xd2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1b      	ldr	r2, [pc, #108]	@ (8008874 <TIM_OC1_SetConfig+0x124>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_OC1_SetConfig+0xd2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a1a      	ldr	r2, [pc, #104]	@ (8008878 <TIM_OC1_SetConfig+0x128>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_OC1_SetConfig+0xd2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a19      	ldr	r2, [pc, #100]	@ (800887c <TIM_OC1_SetConfig+0x12c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_OC1_SetConfig+0xd2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a18      	ldr	r2, [pc, #96]	@ (8008880 <TIM_OC1_SetConfig+0x130>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d111      	bne.n	8008846 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008828:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008830:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	695b      	ldr	r3, [r3, #20]
 8008836:	693a      	ldr	r2, [r7, #16]
 8008838:	4313      	orrs	r3, r2
 800883a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	699b      	ldr	r3, [r3, #24]
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4313      	orrs	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68fa      	ldr	r2, [r7, #12]
 8008850:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	621a      	str	r2, [r3, #32]
}
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40012c00 	.word	0x40012c00
 8008870:	40013400 	.word	0x40013400
 8008874:	40014000 	.word	0x40014000
 8008878:	40014400 	.word	0x40014400
 800887c:	40014800 	.word	0x40014800
 8008880:	40015000 	.word	0x40015000

08008884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	f023 0210 	bic.w	r2, r3, #16
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	699b      	ldr	r3, [r3, #24]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	021b      	lsls	r3, r3, #8
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f023 0320 	bic.w	r3, r3, #32
 80088d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	011b      	lsls	r3, r3, #4
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a2c      	ldr	r2, [pc, #176]	@ (8008994 <TIM_OC2_SetConfig+0x110>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d007      	beq.n	80088f8 <TIM_OC2_SetConfig+0x74>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a2b      	ldr	r2, [pc, #172]	@ (8008998 <TIM_OC2_SetConfig+0x114>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d003      	beq.n	80088f8 <TIM_OC2_SetConfig+0x74>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a2a      	ldr	r2, [pc, #168]	@ (800899c <TIM_OC2_SetConfig+0x118>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d10d      	bne.n	8008914 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	68db      	ldr	r3, [r3, #12]
 8008904:	011b      	lsls	r3, r3, #4
 8008906:	697a      	ldr	r2, [r7, #20]
 8008908:	4313      	orrs	r3, r2
 800890a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a1f      	ldr	r2, [pc, #124]	@ (8008994 <TIM_OC2_SetConfig+0x110>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d013      	beq.n	8008944 <TIM_OC2_SetConfig+0xc0>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a1e      	ldr	r2, [pc, #120]	@ (8008998 <TIM_OC2_SetConfig+0x114>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d00f      	beq.n	8008944 <TIM_OC2_SetConfig+0xc0>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a1e      	ldr	r2, [pc, #120]	@ (80089a0 <TIM_OC2_SetConfig+0x11c>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00b      	beq.n	8008944 <TIM_OC2_SetConfig+0xc0>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a1d      	ldr	r2, [pc, #116]	@ (80089a4 <TIM_OC2_SetConfig+0x120>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d007      	beq.n	8008944 <TIM_OC2_SetConfig+0xc0>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a1c      	ldr	r2, [pc, #112]	@ (80089a8 <TIM_OC2_SetConfig+0x124>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_OC2_SetConfig+0xc0>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a17      	ldr	r2, [pc, #92]	@ (800899c <TIM_OC2_SetConfig+0x118>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d113      	bne.n	800896c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800894a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008952:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	695b      	ldr	r3, [r3, #20]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	4313      	orrs	r3, r2
 800895e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	4313      	orrs	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	693a      	ldr	r2, [r7, #16]
 8008970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68fa      	ldr	r2, [r7, #12]
 8008976:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	685a      	ldr	r2, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	621a      	str	r2, [r3, #32]
}
 8008986:	bf00      	nop
 8008988:	371c      	adds	r7, #28
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	40012c00 	.word	0x40012c00
 8008998:	40013400 	.word	0x40013400
 800899c:	40015000 	.word	0x40015000
 80089a0:	40014000 	.word	0x40014000
 80089a4:	40014400 	.word	0x40014400
 80089a8:	40014800 	.word	0x40014800

080089ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a1b      	ldr	r3, [r3, #32]
 80089c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	69db      	ldr	r3, [r3, #28]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80089da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f023 0303 	bic.w	r3, r3, #3
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	689b      	ldr	r3, [r3, #8]
 80089fe:	021b      	lsls	r3, r3, #8
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a2b      	ldr	r2, [pc, #172]	@ (8008ab8 <TIM_OC3_SetConfig+0x10c>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d007      	beq.n	8008a1e <TIM_OC3_SetConfig+0x72>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2a      	ldr	r2, [pc, #168]	@ (8008abc <TIM_OC3_SetConfig+0x110>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d003      	beq.n	8008a1e <TIM_OC3_SetConfig+0x72>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a29      	ldr	r2, [pc, #164]	@ (8008ac0 <TIM_OC3_SetConfig+0x114>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d10d      	bne.n	8008a3a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	021b      	lsls	r3, r3, #8
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab8 <TIM_OC3_SetConfig+0x10c>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d013      	beq.n	8008a6a <TIM_OC3_SetConfig+0xbe>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a1d      	ldr	r2, [pc, #116]	@ (8008abc <TIM_OC3_SetConfig+0x110>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d00f      	beq.n	8008a6a <TIM_OC3_SetConfig+0xbe>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac4 <TIM_OC3_SetConfig+0x118>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d00b      	beq.n	8008a6a <TIM_OC3_SetConfig+0xbe>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4a1c      	ldr	r2, [pc, #112]	@ (8008ac8 <TIM_OC3_SetConfig+0x11c>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d007      	beq.n	8008a6a <TIM_OC3_SetConfig+0xbe>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008acc <TIM_OC3_SetConfig+0x120>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_OC3_SetConfig+0xbe>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a16      	ldr	r2, [pc, #88]	@ (8008ac0 <TIM_OC3_SetConfig+0x114>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d113      	bne.n	8008a92 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	011b      	lsls	r3, r3, #4
 8008a80:	693a      	ldr	r2, [r7, #16]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	011b      	lsls	r3, r3, #4
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	697a      	ldr	r2, [r7, #20]
 8008aaa:	621a      	str	r2, [r3, #32]
}
 8008aac:	bf00      	nop
 8008aae:	371c      	adds	r7, #28
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	40012c00 	.word	0x40012c00
 8008abc:	40013400 	.word	0x40013400
 8008ac0:	40015000 	.word	0x40015000
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800

08008ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a1b      	ldr	r3, [r3, #32]
 8008ae4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008afe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	021b      	lsls	r3, r3, #8
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	031b      	lsls	r3, r3, #12
 8008b26:	697a      	ldr	r2, [r7, #20]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008be0 <TIM_OC4_SetConfig+0x110>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d007      	beq.n	8008b44 <TIM_OC4_SetConfig+0x74>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	4a2b      	ldr	r2, [pc, #172]	@ (8008be4 <TIM_OC4_SetConfig+0x114>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d003      	beq.n	8008b44 <TIM_OC4_SetConfig+0x74>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8008be8 <TIM_OC4_SetConfig+0x118>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d10d      	bne.n	8008b60 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	031b      	lsls	r3, r3, #12
 8008b52:	697a      	ldr	r2, [r7, #20]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a1f      	ldr	r2, [pc, #124]	@ (8008be0 <TIM_OC4_SetConfig+0x110>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d013      	beq.n	8008b90 <TIM_OC4_SetConfig+0xc0>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8008be4 <TIM_OC4_SetConfig+0x114>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00f      	beq.n	8008b90 <TIM_OC4_SetConfig+0xc0>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a1e      	ldr	r2, [pc, #120]	@ (8008bec <TIM_OC4_SetConfig+0x11c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00b      	beq.n	8008b90 <TIM_OC4_SetConfig+0xc0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf0 <TIM_OC4_SetConfig+0x120>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d007      	beq.n	8008b90 <TIM_OC4_SetConfig+0xc0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a1c      	ldr	r2, [pc, #112]	@ (8008bf4 <TIM_OC4_SetConfig+0x124>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d003      	beq.n	8008b90 <TIM_OC4_SetConfig+0xc0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a17      	ldr	r2, [pc, #92]	@ (8008be8 <TIM_OC4_SetConfig+0x118>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d113      	bne.n	8008bb8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b96:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008b9e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	019b      	lsls	r3, r3, #6
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	019b      	lsls	r3, r3, #6
 8008bb2:	693a      	ldr	r2, [r7, #16]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	621a      	str	r2, [r3, #32]
}
 8008bd2:	bf00      	nop
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40012c00 	.word	0x40012c00
 8008be4:	40013400 	.word	0x40013400
 8008be8:	40015000 	.word	0x40015000
 8008bec:	40014000 	.word	0x40014000
 8008bf0:	40014400 	.word	0x40014400
 8008bf4:	40014800 	.word	0x40014800

08008bf8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b087      	sub	sp, #28
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6a1b      	ldr	r3, [r3, #32]
 8008c0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008c3c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	041b      	lsls	r3, r3, #16
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4313      	orrs	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a19      	ldr	r2, [pc, #100]	@ (8008cb4 <TIM_OC5_SetConfig+0xbc>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d013      	beq.n	8008c7a <TIM_OC5_SetConfig+0x82>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a18      	ldr	r2, [pc, #96]	@ (8008cb8 <TIM_OC5_SetConfig+0xc0>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00f      	beq.n	8008c7a <TIM_OC5_SetConfig+0x82>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <TIM_OC5_SetConfig+0xc4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00b      	beq.n	8008c7a <TIM_OC5_SetConfig+0x82>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <TIM_OC5_SetConfig+0xc8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d007      	beq.n	8008c7a <TIM_OC5_SetConfig+0x82>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a15      	ldr	r2, [pc, #84]	@ (8008cc4 <TIM_OC5_SetConfig+0xcc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d003      	beq.n	8008c7a <TIM_OC5_SetConfig+0x82>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a14      	ldr	r2, [pc, #80]	@ (8008cc8 <TIM_OC5_SetConfig+0xd0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d109      	bne.n	8008c8e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	021b      	lsls	r3, r3, #8
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	693a      	ldr	r2, [r7, #16]
 8008ca6:	621a      	str	r2, [r3, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr
 8008cb4:	40012c00 	.word	0x40012c00
 8008cb8:	40013400 	.word	0x40013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	40014400 	.word	0x40014400
 8008cc4:	40014800 	.word	0x40014800
 8008cc8:	40015000 	.word	0x40015000

08008ccc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6a1b      	ldr	r3, [r3, #32]
 8008ce0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	021b      	lsls	r3, r3, #8
 8008d06:	68fa      	ldr	r2, [r7, #12]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	051b      	lsls	r3, r3, #20
 8008d1a:	693a      	ldr	r2, [r7, #16]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a1a      	ldr	r2, [pc, #104]	@ (8008d8c <TIM_OC6_SetConfig+0xc0>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <TIM_OC6_SetConfig+0x84>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	@ (8008d90 <TIM_OC6_SetConfig+0xc4>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00f      	beq.n	8008d50 <TIM_OC6_SetConfig+0x84>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a18      	ldr	r2, [pc, #96]	@ (8008d94 <TIM_OC6_SetConfig+0xc8>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <TIM_OC6_SetConfig+0x84>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a17      	ldr	r2, [pc, #92]	@ (8008d98 <TIM_OC6_SetConfig+0xcc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d007      	beq.n	8008d50 <TIM_OC6_SetConfig+0x84>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a16      	ldr	r2, [pc, #88]	@ (8008d9c <TIM_OC6_SetConfig+0xd0>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_OC6_SetConfig+0x84>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a15      	ldr	r2, [pc, #84]	@ (8008da0 <TIM_OC6_SetConfig+0xd4>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d109      	bne.n	8008d64 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d56:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	029b      	lsls	r3, r3, #10
 8008d5e:	697a      	ldr	r2, [r7, #20]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40012c00 	.word	0x40012c00
 8008d90:	40013400 	.word	0x40013400
 8008d94:	40014000 	.word	0x40014000
 8008d98:	40014400 	.word	0x40014400
 8008d9c:	40014800 	.word	0x40014800
 8008da0:	40015000 	.word	0x40015000

08008da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b087      	sub	sp, #28
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6a1b      	ldr	r3, [r3, #32]
 8008db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6a1b      	ldr	r3, [r3, #32]
 8008dba:	f023 0201 	bic.w	r2, r3, #1
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	011b      	lsls	r3, r3, #4
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f023 030a 	bic.w	r3, r3, #10
 8008de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	697a      	ldr	r2, [r7, #20]
 8008df4:	621a      	str	r2, [r3, #32]
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b087      	sub	sp, #28
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	60f8      	str	r0, [r7, #12]
 8008e0a:	60b9      	str	r1, [r7, #8]
 8008e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a1b      	ldr	r3, [r3, #32]
 8008e18:	f023 0210 	bic.w	r2, r3, #16
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008e2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	031b      	lsls	r3, r3, #12
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008e3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	697a      	ldr	r2, [r7, #20]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	697a      	ldr	r2, [r7, #20]
 8008e54:	621a      	str	r2, [r3, #32]
}
 8008e56:	bf00      	nop
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b085      	sub	sp, #20
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e7e:	683a      	ldr	r2, [r7, #0]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	f043 0307 	orr.w	r3, r3, #7
 8008e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	609a      	str	r2, [r3, #8]
}
 8008e90:	bf00      	nop
 8008e92:	3714      	adds	r7, #20
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr

08008e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	021a      	lsls	r2, r3, #8
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	431a      	orrs	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	609a      	str	r2, [r3, #8]
}
 8008ed0:	bf00      	nop
 8008ed2:	371c      	adds	r7, #28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr

08008edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	f003 031f 	and.w	r3, r3, #31
 8008eee:	2201      	movs	r2, #1
 8008ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	401a      	ands	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a1a      	ldr	r2, [r3, #32]
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f003 031f 	and.w	r3, r3, #31
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	fa01 f303 	lsl.w	r3, r1, r3
 8008f14:	431a      	orrs	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
	...

08008f28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a26      	ldr	r2, [pc, #152]	@ (8008fcc <TIM_ResetCallback+0xa4>)
 8008f34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a25      	ldr	r2, [pc, #148]	@ (8008fd0 <TIM_ResetCallback+0xa8>)
 8008f3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a24      	ldr	r2, [pc, #144]	@ (8008fd4 <TIM_ResetCallback+0xac>)
 8008f44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a23      	ldr	r2, [pc, #140]	@ (8008fd8 <TIM_ResetCallback+0xb0>)
 8008f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a22      	ldr	r2, [pc, #136]	@ (8008fdc <TIM_ResetCallback+0xb4>)
 8008f54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a21      	ldr	r2, [pc, #132]	@ (8008fe0 <TIM_ResetCallback+0xb8>)
 8008f5c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a20      	ldr	r2, [pc, #128]	@ (8008fe4 <TIM_ResetCallback+0xbc>)
 8008f64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe8 <TIM_ResetCallback+0xc0>)
 8008f6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a1e      	ldr	r2, [pc, #120]	@ (8008fec <TIM_ResetCallback+0xc4>)
 8008f74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <TIM_ResetCallback+0xc8>)
 8008f7c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff4 <TIM_ResetCallback+0xcc>)
 8008f84:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff8 <TIM_ResetCallback+0xd0>)
 8008f8c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1a      	ldr	r2, [pc, #104]	@ (8008ffc <TIM_ResetCallback+0xd4>)
 8008f94:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a19      	ldr	r2, [pc, #100]	@ (8009000 <TIM_ResetCallback+0xd8>)
 8008f9c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a18      	ldr	r2, [pc, #96]	@ (8009004 <TIM_ResetCallback+0xdc>)
 8008fa4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a17      	ldr	r2, [pc, #92]	@ (8009008 <TIM_ResetCallback+0xe0>)
 8008fac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a16      	ldr	r2, [pc, #88]	@ (800900c <TIM_ResetCallback+0xe4>)
 8008fb4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a15      	ldr	r2, [pc, #84]	@ (8009010 <TIM_ResetCallback+0xe8>)
 8008fbc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	08002915 	.word	0x08002915
 8008fd0:	08008275 	.word	0x08008275
 8008fd4:	080082ed 	.word	0x080082ed
 8008fd8:	08008301 	.word	0x08008301
 8008fdc:	0800829d 	.word	0x0800829d
 8008fe0:	080082b1 	.word	0x080082b1
 8008fe4:	08008289 	.word	0x08008289
 8008fe8:	080082c5 	.word	0x080082c5
 8008fec:	080082d9 	.word	0x080082d9
 8008ff0:	08008315 	.word	0x08008315
 8008ff4:	08009269 	.word	0x08009269
 8008ff8:	0800927d 	.word	0x0800927d
 8008ffc:	08009291 	.word	0x08009291
 8009000:	080092a5 	.word	0x080092a5
 8009004:	080092b9 	.word	0x080092b9
 8009008:	080092cd 	.word	0x080092cd
 800900c:	080092e1 	.word	0x080092e1
 8009010:	080092f5 	.word	0x080092f5

08009014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009028:	2302      	movs	r3, #2
 800902a:	e074      	b.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a34      	ldr	r2, [pc, #208]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d009      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a33      	ldr	r2, [pc, #204]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d004      	beq.n	800906a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a31      	ldr	r2, [pc, #196]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d108      	bne.n	800907c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009070:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	4313      	orrs	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a21      	ldr	r2, [pc, #132]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d022      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ac:	d01d      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009130 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d018      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009134 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a1c      	ldr	r2, [pc, #112]	@ (8009138 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00e      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a15      	ldr	r2, [pc, #84]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a18      	ldr	r2, [pc, #96]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a11      	ldr	r2, [pc, #68]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d10c      	bne.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40012c00 	.word	0x40012c00
 8009128:	40013400 	.word	0x40013400
 800912c:	40015000 	.word	0x40015000
 8009130:	40000400 	.word	0x40000400
 8009134:	40000800 	.word	0x40000800
 8009138:	40000c00 	.word	0x40000c00
 800913c:	40014000 	.word	0x40014000

08009140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009158:	2302      	movs	r3, #2
 800915a:	e078      	b.n	800924e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1c      	ldr	r2, [pc, #112]	@ (800925c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a1b      	ldr	r2, [pc, #108]	@ (8009260 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a19      	ldr	r2, [pc, #100]	@ (8009264 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d11c      	bne.n	800923c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800920c:	051b      	lsls	r3, r3, #20
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	4313      	orrs	r3, r2
 800921e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3714      	adds	r7, #20
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	40012c00 	.word	0x40012c00
 8009260:	40013400 	.word	0x40013400
 8009264:	40015000 	.word	0x40015000

08009268 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009268:	b480      	push	{r7}
 800926a:	b083      	sub	sp, #12
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e050      	b.n	80093bc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009320:	2b00      	cmp	r3, #0
 8009322:	d114      	bne.n	800934e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fd5b 	bl	8009de8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a21      	ldr	r2, [pc, #132]	@ (80093c4 <HAL_UART_Init+0xbc>)
 8009340:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2224      	movs	r2, #36	@ 0x24
 8009352:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936a:	2b00      	cmp	r3, #0
 800936c:	d002      	beq.n	8009374 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f001 f888 	bl	800a484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fd89 	bl	8009e8c <UART_SetConfig>
 800937a:	4603      	mov	r3, r0
 800937c:	2b01      	cmp	r3, #1
 800937e:	d101      	bne.n	8009384 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e01b      	b.n	80093bc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685a      	ldr	r2, [r3, #4]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009392:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f042 0201 	orr.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 f907 	bl	800a5c8 <UART_CheckIdleState>
 80093ba:	4603      	mov	r3, r0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	08003911 	.word	0x08003911

080093c8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	460b      	mov	r3, r1
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80093d6:	2300      	movs	r3, #0
 80093d8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d109      	bne.n	80093f4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80093f0:	2301      	movs	r3, #1
 80093f2:	e09c      	b.n	800952e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	d16c      	bne.n	80094d8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80093fe:	7afb      	ldrb	r3, [r7, #11]
 8009400:	2b0c      	cmp	r3, #12
 8009402:	d85e      	bhi.n	80094c2 <HAL_UART_RegisterCallback+0xfa>
 8009404:	a201      	add	r2, pc, #4	@ (adr r2, 800940c <HAL_UART_RegisterCallback+0x44>)
 8009406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800940a:	bf00      	nop
 800940c:	08009441 	.word	0x08009441
 8009410:	0800944b 	.word	0x0800944b
 8009414:	08009455 	.word	0x08009455
 8009418:	0800945f 	.word	0x0800945f
 800941c:	08009469 	.word	0x08009469
 8009420:	08009473 	.word	0x08009473
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009487 	.word	0x08009487
 800942c:	08009491 	.word	0x08009491
 8009430:	0800949b 	.word	0x0800949b
 8009434:	080094a5 	.word	0x080094a5
 8009438:	080094af 	.word	0x080094af
 800943c:	080094b9 	.word	0x080094b9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009448:	e070      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009452:	e06b      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800945c:	e066      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009466:	e061      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	687a      	ldr	r2, [r7, #4]
 800946c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009470:	e05c      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800947a:	e057      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009484:	e052      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800948e:	e04d      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009498:	e048      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	687a      	ldr	r2, [r7, #4]
 800949e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80094a2:	e043      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80094ac:	e03e      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80094b6:	e039      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80094c0:	e034      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094c8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	75fb      	strb	r3, [r7, #23]
        break;
 80094d6:	e029      	b.n	800952c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d11a      	bne.n	8009518 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80094e2:	7afb      	ldrb	r3, [r7, #11]
 80094e4:	2b0b      	cmp	r3, #11
 80094e6:	d002      	beq.n	80094ee <HAL_UART_RegisterCallback+0x126>
 80094e8:	2b0c      	cmp	r3, #12
 80094ea:	d005      	beq.n	80094f8 <HAL_UART_RegisterCallback+0x130>
 80094ec:	e009      	b.n	8009502 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80094f6:	e019      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009500:	e014      	b.n	800952c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009508:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	75fb      	strb	r3, [r7, #23]
        break;
 8009516:	e009      	b.n	800952c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800951e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800952c:	7dfb      	ldrb	r3, [r7, #23]
}
 800952e:	4618      	mov	r0, r3
 8009530:	371c      	adds	r7, #28
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08a      	sub	sp, #40	@ 0x28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009550:	2b20      	cmp	r3, #32
 8009552:	d137      	bne.n	80095c4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_UART_Receive_DMA+0x24>
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e030      	b.n	80095c6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a18      	ldr	r2, [pc, #96]	@ (80095d0 <HAL_UART_Receive_DMA+0x94>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d01f      	beq.n	80095b4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d018      	beq.n	80095b4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	e853 3f00 	ldrex	r3, [r3]
 800958e:	613b      	str	r3, [r7, #16]
   return(result);
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	461a      	mov	r2, r3
 800959e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a0:	623b      	str	r3, [r7, #32]
 80095a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a4:	69f9      	ldr	r1, [r7, #28]
 80095a6:	6a3a      	ldr	r2, [r7, #32]
 80095a8:	e841 2300 	strex	r3, r2, [r1]
 80095ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e6      	bne.n	8009582 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80095b4:	88fb      	ldrh	r3, [r7, #6]
 80095b6:	461a      	mov	r2, r3
 80095b8:	68b9      	ldr	r1, [r7, #8]
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f001 f91c 	bl	800a7f8 <UART_Start_Receive_DMA>
 80095c0:	4603      	mov	r3, r0
 80095c2:	e000      	b.n	80095c6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80095c4:	2302      	movs	r3, #2
  }
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3728      	adds	r7, #40	@ 0x28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	40008000 	.word	0x40008000

080095d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b0ba      	sub	sp, #232	@ 0xe8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80095fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80095fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009602:	4013      	ands	r3, r2
 8009604:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800960c:	2b00      	cmp	r3, #0
 800960e:	d11b      	bne.n	8009648 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009614:	f003 0320 	and.w	r3, r3, #32
 8009618:	2b00      	cmp	r3, #0
 800961a:	d015      	beq.n	8009648 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800961c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800962c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d009      	beq.n	8009648 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 8312 	beq.w	8009c62 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	4798      	blx	r3
      }
      return;
 8009646:	e30c      	b.n	8009c62 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 8129 	beq.w	80098a4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009652:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009656:	4b90      	ldr	r3, [pc, #576]	@ (8009898 <HAL_UART_IRQHandler+0x2c4>)
 8009658:	4013      	ands	r3, r2
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800965e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009662:	4b8e      	ldr	r3, [pc, #568]	@ (800989c <HAL_UART_IRQHandler+0x2c8>)
 8009664:	4013      	ands	r3, r2
 8009666:	2b00      	cmp	r3, #0
 8009668:	f000 811c 	beq.w	80098a4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d011      	beq.n	800969c <HAL_UART_IRQHandler+0xc8>
 8009678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800967c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00b      	beq.n	800969c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2201      	movs	r2, #1
 800968a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009692:	f043 0201 	orr.w	r2, r3, #1
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800969c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a0:	f003 0302 	and.w	r3, r3, #2
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d011      	beq.n	80096cc <HAL_UART_IRQHandler+0xf8>
 80096a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ac:	f003 0301 	and.w	r3, r3, #1
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00b      	beq.n	80096cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2202      	movs	r2, #2
 80096ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096c2:	f043 0204 	orr.w	r2, r3, #4
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80096cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d011      	beq.n	80096fc <HAL_UART_IRQHandler+0x128>
 80096d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2204      	movs	r2, #4
 80096ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f2:	f043 0202 	orr.w	r2, r3, #2
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	2b00      	cmp	r3, #0
 8009706:	d017      	beq.n	8009738 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970c:	f003 0320 	and.w	r3, r3, #32
 8009710:	2b00      	cmp	r3, #0
 8009712:	d105      	bne.n	8009720 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009714:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009718:	4b5f      	ldr	r3, [pc, #380]	@ (8009898 <HAL_UART_IRQHandler+0x2c4>)
 800971a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2208      	movs	r2, #8
 8009726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800972e:	f043 0208 	orr.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800973c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009740:	2b00      	cmp	r3, #0
 8009742:	d012      	beq.n	800976a <HAL_UART_IRQHandler+0x196>
 8009744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00c      	beq.n	800976a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009760:	f043 0220 	orr.w	r2, r3, #32
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 8278 	beq.w	8009c66 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d013      	beq.n	80097aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	d105      	bne.n	800979a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800978e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009796:	2b00      	cmp	r3, #0
 8009798:	d007      	beq.n	80097aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097be:	2b40      	cmp	r3, #64	@ 0x40
 80097c0:	d005      	beq.n	80097ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80097c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80097c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d058      	beq.n	8009880 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f001 f8f9 	bl	800a9c6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097de:	2b40      	cmp	r3, #64	@ 0x40
 80097e0:	d148      	bne.n	8009874 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	3308      	adds	r3, #8
 80097e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80097f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80097fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009800:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800980e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009812:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009816:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800981a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d1d9      	bne.n	80097e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009834:	2b00      	cmp	r3, #0
 8009836:	d017      	beq.n	8009868 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800983e:	4a18      	ldr	r2, [pc, #96]	@ (80098a0 <HAL_UART_IRQHandler+0x2cc>)
 8009840:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009848:	4618      	mov	r0, r3
 800984a:	f7fc f8bb 	bl	80059c4 <HAL_DMA_Abort_IT>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01f      	beq.n	8009894 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800985a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009862:	4610      	mov	r0, r2
 8009864:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009866:	e015      	b.n	8009894 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009872:	e00f      	b.n	8009894 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987e:	e009      	b.n	8009894 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009892:	e1e8      	b.n	8009c66 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009894:	bf00      	nop
    return;
 8009896:	e1e6      	b.n	8009c66 <HAL_UART_IRQHandler+0x692>
 8009898:	10000001 	.word	0x10000001
 800989c:	04000120 	.word	0x04000120
 80098a0:	0800ac91 	.word	0x0800ac91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	f040 8176 	bne.w	8009b9a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80098ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098b2:	f003 0310 	and.w	r3, r3, #16
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 816f 	beq.w	8009b9a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80098bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8168 	beq.w	8009b9a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2210      	movs	r2, #16
 80098d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098dc:	2b40      	cmp	r3, #64	@ 0x40
 80098de:	f040 80dc 	bne.w	8009a9a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f000 80b1 	beq.w	8009a5c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009900:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009904:	429a      	cmp	r2, r3
 8009906:	f080 80a9 	bcs.w	8009a5c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009910:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0320 	and.w	r3, r3, #32
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 8087 	bne.w	8009a36 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009930:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800993c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	461a      	mov	r2, r3
 800994e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009952:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009956:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800995e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009962:	e841 2300 	strex	r3, r2, [r1]
 8009966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800996a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1da      	bne.n	8009928 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3308      	adds	r3, #8
 8009978:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800997c:	e853 3f00 	ldrex	r3, [r3]
 8009980:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009982:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	3308      	adds	r3, #8
 8009992:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009996:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800999a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800999e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80099a2:	e841 2300 	strex	r3, r2, [r1]
 80099a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80099a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1e1      	bne.n	8009972 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	3308      	adds	r3, #8
 80099b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80099b8:	e853 3f00 	ldrex	r3, [r3]
 80099bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	3308      	adds	r3, #8
 80099ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1e3      	bne.n	80099ae <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a04:	f023 0310 	bic.w	r3, r3, #16
 8009a08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	461a      	mov	r2, r3
 8009a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009a16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a1e:	e841 2300 	strex	r3, r2, [r1]
 8009a22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d1e4      	bne.n	80099f4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fb ff6e 	bl	8005912 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009a4e:	b292      	uxth	r2, r2
 8009a50:	1a8a      	subs	r2, r1, r2
 8009a52:	b292      	uxth	r2, r2
 8009a54:	4611      	mov	r1, r2
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a5a:	e106      	b.n	8009c6a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a66:	429a      	cmp	r2, r3
 8009a68:	f040 80ff 	bne.w	8009c6a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 0320 	and.w	r3, r3, #32
 8009a7a:	2b20      	cmp	r3, #32
 8009a7c:	f040 80f5 	bne.w	8009c6a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2202      	movs	r2, #2
 8009a84:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009a92:	4611      	mov	r1, r2
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
      return;
 8009a98:	e0e7      	b.n	8009c6a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	1ad3      	subs	r3, r2, r3
 8009aaa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 80d9 	beq.w	8009c6e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009abc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f000 80d4 	beq.w	8009c6e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	e853 3f00 	ldrex	r3, [r3]
 8009ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ada:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009aea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009af0:	e841 2300 	strex	r3, r2, [r1]
 8009af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	3308      	adds	r3, #8
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	e853 3f00 	ldrex	r3, [r3]
 8009b0a:	623b      	str	r3, [r7, #32]
   return(result);
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b12:	f023 0301 	bic.w	r3, r3, #1
 8009b16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009b24:	633a      	str	r2, [r7, #48]	@ 0x30
 8009b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b2c:	e841 2300 	strex	r3, r2, [r1]
 8009b30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d1e1      	bne.n	8009afc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2220      	movs	r2, #32
 8009b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	e853 3f00 	ldrex	r3, [r3]
 8009b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f023 0310 	bic.w	r3, r3, #16
 8009b60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009b6e:	61fb      	str	r3, [r7, #28]
 8009b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b72:	69b9      	ldr	r1, [r7, #24]
 8009b74:	69fa      	ldr	r2, [r7, #28]
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e4      	bne.n	8009b4c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b8e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009b92:	4611      	mov	r1, r2
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b98:	e069      	b.n	8009c6e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x5f4>
 8009ba6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00a      	beq.n	8009bc8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009bba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bc6:	e055      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d014      	beq.n	8009bfe <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009be4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d008      	beq.n	8009bfe <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d03e      	beq.n	8009c72 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	4798      	blx	r3
    }
    return;
 8009bfc:	e039      	b.n	8009c72 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <HAL_UART_IRQHandler+0x64a>
 8009c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f001 f84e 	bl	800acb8 <UART_EndTransmit_IT>
    return;
 8009c1c:	e02a      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <HAL_UART_IRQHandler+0x66e>
 8009c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c2e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c40:	e018      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d012      	beq.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
 8009c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da0e      	bge.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c60:	e008      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c62:	bf00      	nop
 8009c64:	e006      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009c66:	bf00      	nop
 8009c68:	e004      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c6a:	bf00      	nop
 8009c6c:	e002      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
      return;
 8009c6e:	bf00      	nop
 8009c70:	e000      	b.n	8009c74 <HAL_UART_IRQHandler+0x6a0>
    return;
 8009c72:	bf00      	nop
  }
}
 8009c74:	37e8      	adds	r7, #232	@ 0xe8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop

08009c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c84:	bf00      	nop
 8009c86:	370c      	adds	r7, #12
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009c98:	bf00      	nop
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009cac:	bf00      	nop
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cc0:	bf00      	nop
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009cd4:	bf00      	nop
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009cfc:	bf00      	nop
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	460b      	mov	r3, r1
 8009d12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a09      	ldr	r2, [pc, #36]	@ (8009d54 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d009      	beq.n	8009d48 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	615a      	str	r2, [r3, #20]
  }
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	40008000 	.word	0x40008000

08009d58 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a18      	ldr	r2, [pc, #96]	@ (8009dc8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d027      	beq.n	8009dba <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d70:	2b20      	cmp	r3, #32
 8009d72:	d120      	bne.n	8009db6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d7a:	2b01      	cmp	r3, #1
 8009d7c:	d101      	bne.n	8009d82 <HAL_UART_EnableReceiverTimeout+0x2a>
 8009d7e:	2302      	movs	r3, #2
 8009d80:	e01c      	b.n	8009dbc <HAL_UART_EnableReceiverTimeout+0x64>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2224      	movs	r2, #36	@ 0x24
 8009d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	685a      	ldr	r2, [r3, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009da0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2220      	movs	r2, #32
 8009da6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	e002      	b.n	8009dbc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009db6:	2302      	movs	r3, #2
 8009db8:	e000      	b.n	8009dbc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
  }
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	40008000 	.word	0x40008000

08009dcc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
	...

08009de8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e5c <UART_InitCallbacksToDefault+0x74>)
 8009df4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a19      	ldr	r2, [pc, #100]	@ (8009e60 <UART_InitCallbacksToDefault+0x78>)
 8009dfc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a18      	ldr	r2, [pc, #96]	@ (8009e64 <UART_InitCallbacksToDefault+0x7c>)
 8009e04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a17      	ldr	r2, [pc, #92]	@ (8009e68 <UART_InitCallbacksToDefault+0x80>)
 8009e0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a16      	ldr	r2, [pc, #88]	@ (8009e6c <UART_InitCallbacksToDefault+0x84>)
 8009e14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a15      	ldr	r2, [pc, #84]	@ (8009e70 <UART_InitCallbacksToDefault+0x88>)
 8009e1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a14      	ldr	r2, [pc, #80]	@ (8009e74 <UART_InitCallbacksToDefault+0x8c>)
 8009e24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a13      	ldr	r2, [pc, #76]	@ (8009e78 <UART_InitCallbacksToDefault+0x90>)
 8009e2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a12      	ldr	r2, [pc, #72]	@ (8009e7c <UART_InitCallbacksToDefault+0x94>)
 8009e34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a11      	ldr	r2, [pc, #68]	@ (8009e80 <UART_InitCallbacksToDefault+0x98>)
 8009e3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4a10      	ldr	r2, [pc, #64]	@ (8009e84 <UART_InitCallbacksToDefault+0x9c>)
 8009e44:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8009e88 <UART_InitCallbacksToDefault+0xa0>)
 8009e4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009e50:	bf00      	nop
 8009e52:	370c      	adds	r7, #12
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	08009c91 	.word	0x08009c91
 8009e60:	08009c7d 	.word	0x08009c7d
 8009e64:	08009ca5 	.word	0x08009ca5
 8009e68:	08002901 	.word	0x08002901
 8009e6c:	08009cb9 	.word	0x08009cb9
 8009e70:	08009ccd 	.word	0x08009ccd
 8009e74:	08009ce1 	.word	0x08009ce1
 8009e78:	08009cf5 	.word	0x08009cf5
 8009e7c:	0800ad13 	.word	0x0800ad13
 8009e80:	0800ad27 	.word	0x0800ad27
 8009e84:	0800ad3b 	.word	0x0800ad3b
 8009e88:	08009d09 	.word	0x08009d09

08009e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e90:	b08c      	sub	sp, #48	@ 0x30
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4baa      	ldr	r3, [pc, #680]	@ (800a164 <UART_SetConfig+0x2d8>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a9f      	ldr	r2, [pc, #636]	@ (800a168 <UART_SetConfig+0x2dc>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009f02:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	6812      	ldr	r2, [r2, #0]
 8009f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f16:	f023 010f 	bic.w	r1, r3, #15
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	430a      	orrs	r2, r1
 8009f24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a90      	ldr	r2, [pc, #576]	@ (800a16c <UART_SetConfig+0x2e0>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d125      	bne.n	8009f7c <UART_SetConfig+0xf0>
 8009f30:	4b8f      	ldr	r3, [pc, #572]	@ (800a170 <UART_SetConfig+0x2e4>)
 8009f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f36:	f003 0303 	and.w	r3, r3, #3
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d81a      	bhi.n	8009f74 <UART_SetConfig+0xe8>
 8009f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8009f44 <UART_SetConfig+0xb8>)
 8009f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f65 	.word	0x08009f65
 8009f4c:	08009f5d 	.word	0x08009f5d
 8009f50:	08009f6d 	.word	0x08009f6d
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5a:	e116      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f62:	e112      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009f64:	2304      	movs	r3, #4
 8009f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6a:	e10e      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009f6c:	2308      	movs	r3, #8
 8009f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f72:	e10a      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009f74:	2310      	movs	r3, #16
 8009f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f7a:	e106      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a7c      	ldr	r2, [pc, #496]	@ (800a174 <UART_SetConfig+0x2e8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d138      	bne.n	8009ff8 <UART_SetConfig+0x16c>
 8009f86:	4b7a      	ldr	r3, [pc, #488]	@ (800a170 <UART_SetConfig+0x2e4>)
 8009f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f8c:	f003 030c 	and.w	r3, r3, #12
 8009f90:	2b0c      	cmp	r3, #12
 8009f92:	d82d      	bhi.n	8009ff0 <UART_SetConfig+0x164>
 8009f94:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <UART_SetConfig+0x110>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fd1 	.word	0x08009fd1
 8009fa0:	08009ff1 	.word	0x08009ff1
 8009fa4:	08009ff1 	.word	0x08009ff1
 8009fa8:	08009ff1 	.word	0x08009ff1
 8009fac:	08009fe1 	.word	0x08009fe1
 8009fb0:	08009ff1 	.word	0x08009ff1
 8009fb4:	08009ff1 	.word	0x08009ff1
 8009fb8:	08009ff1 	.word	0x08009ff1
 8009fbc:	08009fd9 	.word	0x08009fd9
 8009fc0:	08009ff1 	.word	0x08009ff1
 8009fc4:	08009ff1 	.word	0x08009ff1
 8009fc8:	08009ff1 	.word	0x08009ff1
 8009fcc:	08009fe9 	.word	0x08009fe9
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd6:	e0d8      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fde:	e0d4      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe6:	e0d0      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009fe8:	2308      	movs	r3, #8
 8009fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fee:	e0cc      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009ff0:	2310      	movs	r3, #16
 8009ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009ff6:	e0c8      	b.n	800a18a <UART_SetConfig+0x2fe>
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a5e      	ldr	r2, [pc, #376]	@ (800a178 <UART_SetConfig+0x2ec>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d125      	bne.n	800a04e <UART_SetConfig+0x1c2>
 800a002:	4b5b      	ldr	r3, [pc, #364]	@ (800a170 <UART_SetConfig+0x2e4>)
 800a004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a008:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a00c:	2b30      	cmp	r3, #48	@ 0x30
 800a00e:	d016      	beq.n	800a03e <UART_SetConfig+0x1b2>
 800a010:	2b30      	cmp	r3, #48	@ 0x30
 800a012:	d818      	bhi.n	800a046 <UART_SetConfig+0x1ba>
 800a014:	2b20      	cmp	r3, #32
 800a016:	d00a      	beq.n	800a02e <UART_SetConfig+0x1a2>
 800a018:	2b20      	cmp	r3, #32
 800a01a:	d814      	bhi.n	800a046 <UART_SetConfig+0x1ba>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <UART_SetConfig+0x19a>
 800a020:	2b10      	cmp	r3, #16
 800a022:	d008      	beq.n	800a036 <UART_SetConfig+0x1aa>
 800a024:	e00f      	b.n	800a046 <UART_SetConfig+0x1ba>
 800a026:	2300      	movs	r3, #0
 800a028:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a02c:	e0ad      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a02e:	2302      	movs	r3, #2
 800a030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a034:	e0a9      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a036:	2304      	movs	r3, #4
 800a038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a03c:	e0a5      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a03e:	2308      	movs	r3, #8
 800a040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a044:	e0a1      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a046:	2310      	movs	r3, #16
 800a048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a04c:	e09d      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a4a      	ldr	r2, [pc, #296]	@ (800a17c <UART_SetConfig+0x2f0>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d125      	bne.n	800a0a4 <UART_SetConfig+0x218>
 800a058:	4b45      	ldr	r3, [pc, #276]	@ (800a170 <UART_SetConfig+0x2e4>)
 800a05a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a05e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a062:	2bc0      	cmp	r3, #192	@ 0xc0
 800a064:	d016      	beq.n	800a094 <UART_SetConfig+0x208>
 800a066:	2bc0      	cmp	r3, #192	@ 0xc0
 800a068:	d818      	bhi.n	800a09c <UART_SetConfig+0x210>
 800a06a:	2b80      	cmp	r3, #128	@ 0x80
 800a06c:	d00a      	beq.n	800a084 <UART_SetConfig+0x1f8>
 800a06e:	2b80      	cmp	r3, #128	@ 0x80
 800a070:	d814      	bhi.n	800a09c <UART_SetConfig+0x210>
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <UART_SetConfig+0x1f0>
 800a076:	2b40      	cmp	r3, #64	@ 0x40
 800a078:	d008      	beq.n	800a08c <UART_SetConfig+0x200>
 800a07a:	e00f      	b.n	800a09c <UART_SetConfig+0x210>
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a082:	e082      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a084:	2302      	movs	r3, #2
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08a:	e07e      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a08c:	2304      	movs	r3, #4
 800a08e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a092:	e07a      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a094:	2308      	movs	r3, #8
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e076      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a09c:	2310      	movs	r3, #16
 800a09e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0a2:	e072      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a35      	ldr	r2, [pc, #212]	@ (800a180 <UART_SetConfig+0x2f4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d12a      	bne.n	800a104 <UART_SetConfig+0x278>
 800a0ae:	4b30      	ldr	r3, [pc, #192]	@ (800a170 <UART_SetConfig+0x2e4>)
 800a0b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0bc:	d01a      	beq.n	800a0f4 <UART_SetConfig+0x268>
 800a0be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0c2:	d81b      	bhi.n	800a0fc <UART_SetConfig+0x270>
 800a0c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c8:	d00c      	beq.n	800a0e4 <UART_SetConfig+0x258>
 800a0ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ce:	d815      	bhi.n	800a0fc <UART_SetConfig+0x270>
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d003      	beq.n	800a0dc <UART_SetConfig+0x250>
 800a0d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0d8:	d008      	beq.n	800a0ec <UART_SetConfig+0x260>
 800a0da:	e00f      	b.n	800a0fc <UART_SetConfig+0x270>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e2:	e052      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a0e4:	2302      	movs	r3, #2
 800a0e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ea:	e04e      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a0ec:	2304      	movs	r3, #4
 800a0ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f2:	e04a      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a0f4:	2308      	movs	r3, #8
 800a0f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0fa:	e046      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a0fc:	2310      	movs	r3, #16
 800a0fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a102:	e042      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a17      	ldr	r2, [pc, #92]	@ (800a168 <UART_SetConfig+0x2dc>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d13a      	bne.n	800a184 <UART_SetConfig+0x2f8>
 800a10e:	4b18      	ldr	r3, [pc, #96]	@ (800a170 <UART_SetConfig+0x2e4>)
 800a110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a114:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a118:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a11c:	d01a      	beq.n	800a154 <UART_SetConfig+0x2c8>
 800a11e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a122:	d81b      	bhi.n	800a15c <UART_SetConfig+0x2d0>
 800a124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a128:	d00c      	beq.n	800a144 <UART_SetConfig+0x2b8>
 800a12a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a12e:	d815      	bhi.n	800a15c <UART_SetConfig+0x2d0>
 800a130:	2b00      	cmp	r3, #0
 800a132:	d003      	beq.n	800a13c <UART_SetConfig+0x2b0>
 800a134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a138:	d008      	beq.n	800a14c <UART_SetConfig+0x2c0>
 800a13a:	e00f      	b.n	800a15c <UART_SetConfig+0x2d0>
 800a13c:	2300      	movs	r3, #0
 800a13e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a142:	e022      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a144:	2302      	movs	r3, #2
 800a146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14a:	e01e      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a14c:	2304      	movs	r3, #4
 800a14e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a152:	e01a      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a154:	2308      	movs	r3, #8
 800a156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a15a:	e016      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a15c:	2310      	movs	r3, #16
 800a15e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a162:	e012      	b.n	800a18a <UART_SetConfig+0x2fe>
 800a164:	cfff69f3 	.word	0xcfff69f3
 800a168:	40008000 	.word	0x40008000
 800a16c:	40013800 	.word	0x40013800
 800a170:	40021000 	.word	0x40021000
 800a174:	40004400 	.word	0x40004400
 800a178:	40004800 	.word	0x40004800
 800a17c:	40004c00 	.word	0x40004c00
 800a180:	40005000 	.word	0x40005000
 800a184:	2310      	movs	r3, #16
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4aae      	ldr	r2, [pc, #696]	@ (800a448 <UART_SetConfig+0x5bc>)
 800a190:	4293      	cmp	r3, r2
 800a192:	f040 8097 	bne.w	800a2c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a19a:	2b08      	cmp	r3, #8
 800a19c:	d823      	bhi.n	800a1e6 <UART_SetConfig+0x35a>
 800a19e:	a201      	add	r2, pc, #4	@ (adr r2, 800a1a4 <UART_SetConfig+0x318>)
 800a1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1a4:	0800a1c9 	.word	0x0800a1c9
 800a1a8:	0800a1e7 	.word	0x0800a1e7
 800a1ac:	0800a1d1 	.word	0x0800a1d1
 800a1b0:	0800a1e7 	.word	0x0800a1e7
 800a1b4:	0800a1d7 	.word	0x0800a1d7
 800a1b8:	0800a1e7 	.word	0x0800a1e7
 800a1bc:	0800a1e7 	.word	0x0800a1e7
 800a1c0:	0800a1e7 	.word	0x0800a1e7
 800a1c4:	0800a1df 	.word	0x0800a1df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1c8:	f7fc fcec 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 800a1cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1ce:	e010      	b.n	800a1f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1d0:	4b9e      	ldr	r3, [pc, #632]	@ (800a44c <UART_SetConfig+0x5c0>)
 800a1d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1d4:	e00d      	b.n	800a1f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1d6:	f7fc fc77 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 800a1da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1dc:	e009      	b.n	800a1f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1e4:	e005      	b.n	800a1f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a1f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 8130 	beq.w	800a45a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1fe:	4a94      	ldr	r2, [pc, #592]	@ (800a450 <UART_SetConfig+0x5c4>)
 800a200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a204:	461a      	mov	r2, r3
 800a206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a208:	fbb3 f3f2 	udiv	r3, r3, r2
 800a20c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	685a      	ldr	r2, [r3, #4]
 800a212:	4613      	mov	r3, r2
 800a214:	005b      	lsls	r3, r3, #1
 800a216:	4413      	add	r3, r2
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d305      	bcc.n	800a22a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a224:	69ba      	ldr	r2, [r7, #24]
 800a226:	429a      	cmp	r2, r3
 800a228:	d903      	bls.n	800a232 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a22a:	2301      	movs	r3, #1
 800a22c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a230:	e113      	b.n	800a45a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	2200      	movs	r2, #0
 800a236:	60bb      	str	r3, [r7, #8]
 800a238:	60fa      	str	r2, [r7, #12]
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23e:	4a84      	ldr	r2, [pc, #528]	@ (800a450 <UART_SetConfig+0x5c4>)
 800a240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a244:	b29b      	uxth	r3, r3
 800a246:	2200      	movs	r2, #0
 800a248:	603b      	str	r3, [r7, #0]
 800a24a:	607a      	str	r2, [r7, #4]
 800a24c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a250:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a254:	f7f6 fc1e 	bl	8000a94 <__aeabi_uldivmod>
 800a258:	4602      	mov	r2, r0
 800a25a:	460b      	mov	r3, r1
 800a25c:	4610      	mov	r0, r2
 800a25e:	4619      	mov	r1, r3
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	020b      	lsls	r3, r1, #8
 800a26a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a26e:	0202      	lsls	r2, r0, #8
 800a270:	6979      	ldr	r1, [r7, #20]
 800a272:	6849      	ldr	r1, [r1, #4]
 800a274:	0849      	lsrs	r1, r1, #1
 800a276:	2000      	movs	r0, #0
 800a278:	460c      	mov	r4, r1
 800a27a:	4605      	mov	r5, r0
 800a27c:	eb12 0804 	adds.w	r8, r2, r4
 800a280:	eb43 0905 	adc.w	r9, r3, r5
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	469a      	mov	sl, r3
 800a28c:	4693      	mov	fp, r2
 800a28e:	4652      	mov	r2, sl
 800a290:	465b      	mov	r3, fp
 800a292:	4640      	mov	r0, r8
 800a294:	4649      	mov	r1, r9
 800a296:	f7f6 fbfd 	bl	8000a94 <__aeabi_uldivmod>
 800a29a:	4602      	mov	r2, r0
 800a29c:	460b      	mov	r3, r1
 800a29e:	4613      	mov	r3, r2
 800a2a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a2a2:	6a3b      	ldr	r3, [r7, #32]
 800a2a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2a8:	d308      	bcc.n	800a2bc <UART_SetConfig+0x430>
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b0:	d204      	bcs.n	800a2bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	6a3a      	ldr	r2, [r7, #32]
 800a2b8:	60da      	str	r2, [r3, #12]
 800a2ba:	e0ce      	b.n	800a45a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2c2:	e0ca      	b.n	800a45a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2cc:	d166      	bne.n	800a39c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a2ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2d2:	2b08      	cmp	r3, #8
 800a2d4:	d827      	bhi.n	800a326 <UART_SetConfig+0x49a>
 800a2d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a2dc <UART_SetConfig+0x450>)
 800a2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a327 	.word	0x0800a327
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	0800a327 	.word	0x0800a327
 800a2f4:	0800a327 	.word	0x0800a327
 800a2f8:	0800a327 	.word	0x0800a327
 800a2fc:	0800a31f 	.word	0x0800a31f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a300:	f7fc fc50 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 800a304:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a306:	e014      	b.n	800a332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a308:	f7fc fc62 	bl	8006bd0 <HAL_RCC_GetPCLK2Freq>
 800a30c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a30e:	e010      	b.n	800a332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a310:	4b4e      	ldr	r3, [pc, #312]	@ (800a44c <UART_SetConfig+0x5c0>)
 800a312:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a314:	e00d      	b.n	800a332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a316:	f7fc fbd7 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 800a31a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a31c:	e009      	b.n	800a332 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a322:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a324:	e005      	b.n	800a332 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a330:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 8090 	beq.w	800a45a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33e:	4a44      	ldr	r2, [pc, #272]	@ (800a450 <UART_SetConfig+0x5c4>)
 800a340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a344:	461a      	mov	r2, r3
 800a346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a348:	fbb3 f3f2 	udiv	r3, r3, r2
 800a34c:	005a      	lsls	r2, r3, #1
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	085b      	lsrs	r3, r3, #1
 800a354:	441a      	add	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a35e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a360:	6a3b      	ldr	r3, [r7, #32]
 800a362:	2b0f      	cmp	r3, #15
 800a364:	d916      	bls.n	800a394 <UART_SetConfig+0x508>
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a36c:	d212      	bcs.n	800a394 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a36e:	6a3b      	ldr	r3, [r7, #32]
 800a370:	b29b      	uxth	r3, r3
 800a372:	f023 030f 	bic.w	r3, r3, #15
 800a376:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	085b      	lsrs	r3, r3, #1
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	b29a      	uxth	r2, r3
 800a384:	8bfb      	ldrh	r3, [r7, #30]
 800a386:	4313      	orrs	r3, r2
 800a388:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	8bfa      	ldrh	r2, [r7, #30]
 800a390:	60da      	str	r2, [r3, #12]
 800a392:	e062      	b.n	800a45a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a39a:	e05e      	b.n	800a45a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a39c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3a0:	2b08      	cmp	r3, #8
 800a3a2:	d828      	bhi.n	800a3f6 <UART_SetConfig+0x56a>
 800a3a4:	a201      	add	r2, pc, #4	@ (adr r2, 800a3ac <UART_SetConfig+0x520>)
 800a3a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3aa:	bf00      	nop
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	0800a3f7 	.word	0x0800a3f7
 800a3bc:	0800a3e7 	.word	0x0800a3e7
 800a3c0:	0800a3f7 	.word	0x0800a3f7
 800a3c4:	0800a3f7 	.word	0x0800a3f7
 800a3c8:	0800a3f7 	.word	0x0800a3f7
 800a3cc:	0800a3ef 	.word	0x0800a3ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3d0:	f7fc fbe8 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 800a3d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3d6:	e014      	b.n	800a402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3d8:	f7fc fbfa 	bl	8006bd0 <HAL_RCC_GetPCLK2Freq>
 800a3dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3de:	e010      	b.n	800a402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a44c <UART_SetConfig+0x5c0>)
 800a3e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3e4:	e00d      	b.n	800a402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3e6:	f7fc fb6f 	bl	8006ac8 <HAL_RCC_GetSysClockFreq>
 800a3ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ec:	e009      	b.n	800a402 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3f4:	e005      	b.n	800a402 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a400:	bf00      	nop
    }

    if (pclk != 0U)
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	2b00      	cmp	r3, #0
 800a406:	d028      	beq.n	800a45a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40c:	4a10      	ldr	r2, [pc, #64]	@ (800a450 <UART_SetConfig+0x5c4>)
 800a40e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a412:	461a      	mov	r2, r3
 800a414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a416:	fbb3 f2f2 	udiv	r2, r3, r2
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	085b      	lsrs	r3, r3, #1
 800a420:	441a      	add	r2, r3
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	2b0f      	cmp	r3, #15
 800a430:	d910      	bls.n	800a454 <UART_SetConfig+0x5c8>
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a438:	d20c      	bcs.n	800a454 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a43a:	6a3b      	ldr	r3, [r7, #32]
 800a43c:	b29a      	uxth	r2, r3
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	60da      	str	r2, [r3, #12]
 800a444:	e009      	b.n	800a45a <UART_SetConfig+0x5ce>
 800a446:	bf00      	nop
 800a448:	40008000 	.word	0x40008000
 800a44c:	00f42400 	.word	0x00f42400
 800a450:	0800bd14 	.word	0x0800bd14
      }
      else
      {
        ret = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	2201      	movs	r2, #1
 800a466:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2200      	movs	r2, #0
 800a46e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	2200      	movs	r2, #0
 800a474:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a476:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3730      	adds	r7, #48	@ 0x30
 800a47e:	46bd      	mov	sp, r7
 800a480:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a484:	b480      	push	{r7}
 800a486:	b083      	sub	sp, #12
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a490:	f003 0308 	and.w	r3, r3, #8
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00a      	beq.n	800a4ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b2:	f003 0301 	and.w	r3, r3, #1
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00a      	beq.n	800a4d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4d4:	f003 0302 	and.w	r3, r3, #2
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00a      	beq.n	800a4f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	430a      	orrs	r2, r1
 800a4f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	430a      	orrs	r2, r1
 800a512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a518:	f003 0310 	and.w	r3, r3, #16
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	430a      	orrs	r2, r1
 800a534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	430a      	orrs	r2, r1
 800a556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a55c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d01a      	beq.n	800a59a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a57e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a582:	d10a      	bne.n	800a59a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	430a      	orrs	r2, r1
 800a598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a59e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00a      	beq.n	800a5bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	430a      	orrs	r2, r1
 800a5ba:	605a      	str	r2, [r3, #4]
  }
}
 800a5bc:	bf00      	nop
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b098      	sub	sp, #96	@ 0x60
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5d8:	f7f9 fae4 	bl	8003ba4 <HAL_GetTick>
 800a5dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0308 	and.w	r3, r3, #8
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d12f      	bne.n	800a64c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f88e 	bl	800a71c <UART_WaitOnFlagUntilTimeout>
 800a600:	4603      	mov	r3, r0
 800a602:	2b00      	cmp	r3, #0
 800a604:	d022      	beq.n	800a64c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	e853 3f00 	ldrex	r3, [r3]
 800a612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a61a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	461a      	mov	r2, r3
 800a622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a624:	647b      	str	r3, [r7, #68]	@ 0x44
 800a626:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a62a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a62c:	e841 2300 	strex	r3, r2, [r1]
 800a630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1e6      	bne.n	800a606 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2220      	movs	r2, #32
 800a63c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a648:	2303      	movs	r3, #3
 800a64a:	e063      	b.n	800a714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b04      	cmp	r3, #4
 800a658:	d149      	bne.n	800a6ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a65a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a662:	2200      	movs	r2, #0
 800a664:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f857 	bl	800a71c <UART_WaitOnFlagUntilTimeout>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d03c      	beq.n	800a6ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	623b      	str	r3, [r7, #32]
   return(result);
 800a682:	6a3b      	ldr	r3, [r7, #32]
 800a684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a692:	633b      	str	r3, [r7, #48]	@ 0x30
 800a694:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e6      	bne.n	800a674 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	3308      	adds	r3, #8
 800a6ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	e853 3f00 	ldrex	r3, [r3]
 800a6b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f023 0301 	bic.w	r3, r3, #1
 800a6bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	3308      	adds	r3, #8
 800a6c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6c6:	61fa      	str	r2, [r7, #28]
 800a6c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ca:	69b9      	ldr	r1, [r7, #24]
 800a6cc:	69fa      	ldr	r2, [r7, #28]
 800a6ce:	e841 2300 	strex	r3, r2, [r1]
 800a6d2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1e5      	bne.n	800a6a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2220      	movs	r2, #32
 800a6de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e012      	b.n	800a714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2200      	movs	r2, #0
 800a70e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3758      	adds	r7, #88	@ 0x58
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	4613      	mov	r3, r2
 800a72a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a72c:	e04f      	b.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a734:	d04b      	beq.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a736:	f7f9 fa35 	bl	8003ba4 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	69ba      	ldr	r2, [r7, #24]
 800a742:	429a      	cmp	r2, r3
 800a744:	d302      	bcc.n	800a74c <UART_WaitOnFlagUntilTimeout+0x30>
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d101      	bne.n	800a750 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e04e      	b.n	800a7ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f003 0304 	and.w	r3, r3, #4
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d037      	beq.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b80      	cmp	r3, #128	@ 0x80
 800a762:	d034      	beq.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2b40      	cmp	r3, #64	@ 0x40
 800a768:	d031      	beq.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	69db      	ldr	r3, [r3, #28]
 800a770:	f003 0308 	and.w	r3, r3, #8
 800a774:	2b08      	cmp	r3, #8
 800a776:	d110      	bne.n	800a79a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2208      	movs	r2, #8
 800a77e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f920 	bl	800a9c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2208      	movs	r2, #8
 800a78a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e029      	b.n	800a7ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	69db      	ldr	r3, [r3, #28]
 800a7a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7a8:	d111      	bne.n	800a7ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f906 	bl	800a9c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7ca:	2303      	movs	r3, #3
 800a7cc:	e00f      	b.n	800a7ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69da      	ldr	r2, [r3, #28]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	68ba      	ldr	r2, [r7, #8]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	bf0c      	ite	eq
 800a7de:	2301      	moveq	r3, #1
 800a7e0:	2300      	movne	r3, #0
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d0a0      	beq.n	800a72e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b096      	sub	sp, #88	@ 0x58
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	4613      	mov	r3, r2
 800a804:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	68ba      	ldr	r2, [r7, #8]
 800a80a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	88fa      	ldrh	r2, [r7, #6]
 800a810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2222      	movs	r2, #34	@ 0x22
 800a820:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d02d      	beq.n	800a88a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a834:	4a40      	ldr	r2, [pc, #256]	@ (800a938 <UART_Start_Receive_DMA+0x140>)
 800a836:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a83e:	4a3f      	ldr	r2, [pc, #252]	@ (800a93c <UART_Start_Receive_DMA+0x144>)
 800a840:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a848:	4a3d      	ldr	r2, [pc, #244]	@ (800a940 <UART_Start_Receive_DMA+0x148>)
 800a84a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a852:	2200      	movs	r2, #0
 800a854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3324      	adds	r3, #36	@ 0x24
 800a862:	4619      	mov	r1, r3
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a868:	461a      	mov	r2, r3
 800a86a:	88fb      	ldrh	r3, [r7, #6]
 800a86c:	f7fa ffd6 	bl	800581c <HAL_DMA_Start_IT>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d009      	beq.n	800a88a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2210      	movs	r2, #16
 800a87a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2220      	movs	r2, #32
 800a882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e051      	b.n	800a92e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d018      	beq.n	800a8c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a89a:	e853 3f00 	ldrex	r3, [r3]
 800a89e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a8a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a8b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a8be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e6      	bne.n	800a892 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d6:	f043 0301 	orr.w	r3, r3, #1
 800a8da:	653b      	str	r3, [r7, #80]	@ 0x50
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8e4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a8e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a8ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	3308      	adds	r3, #8
 800a8fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	e853 3f00 	ldrex	r3, [r3]
 800a906:	613b      	str	r3, [r7, #16]
   return(result);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a90e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3308      	adds	r3, #8
 800a916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a918:	623a      	str	r2, [r7, #32]
 800a91a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a91c:	69f9      	ldr	r1, [r7, #28]
 800a91e:	6a3a      	ldr	r2, [r7, #32]
 800a920:	e841 2300 	strex	r3, r2, [r1]
 800a924:	61bb      	str	r3, [r7, #24]
   return(result);
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1e5      	bne.n	800a8f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3758      	adds	r7, #88	@ 0x58
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	0800aa93 	.word	0x0800aa93
 800a93c:	0800abc7 	.word	0x0800abc7
 800a940:	0800ac0d 	.word	0x0800ac0d

0800a944 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a944:	b480      	push	{r7}
 800a946:	b08f      	sub	sp, #60	@ 0x3c
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6a3b      	ldr	r3, [r7, #32]
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	61fb      	str	r3, [r7, #28]
   return(result);
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a960:	637b      	str	r3, [r7, #52]	@ 0x34
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	461a      	mov	r2, r3
 800a968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a96c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e6      	bne.n	800a94c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	3308      	adds	r3, #8
 800a984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a994:	633b      	str	r3, [r7, #48]	@ 0x30
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	3308      	adds	r3, #8
 800a99c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a99e:	61ba      	str	r2, [r7, #24]
 800a9a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a2:	6979      	ldr	r1, [r7, #20]
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	e841 2300 	strex	r3, r2, [r1]
 800a9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d1e5      	bne.n	800a97e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2220      	movs	r2, #32
 800a9b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a9ba:	bf00      	nop
 800a9bc:	373c      	adds	r7, #60	@ 0x3c
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b095      	sub	sp, #84	@ 0x54
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a9dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a9f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9f4:	e841 2300 	strex	r3, r2, [r1]
 800a9f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e6      	bne.n	800a9ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	3308      	adds	r3, #8
 800aa22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e3      	bne.n	800aa00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa3c:	2b01      	cmp	r3, #1
 800aa3e:	d118      	bne.n	800aa72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f023 0310 	bic.w	r3, r3, #16
 800aa54:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6979      	ldr	r1, [r7, #20]
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e6      	bne.n	800aa40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2200      	movs	r2, #0
 800aa84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aa86:	bf00      	nop
 800aa88:	3754      	adds	r7, #84	@ 0x54
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b09c      	sub	sp, #112	@ 0x70
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	f003 0320 	and.w	r3, r3, #32
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d171      	bne.n	800ab92 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800aaae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab0:	2200      	movs	r2, #0
 800aab2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aab6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aabe:	e853 3f00 	ldrex	r3, [r3]
 800aac2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aac4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aac6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aaca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aacc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	461a      	mov	r2, r3
 800aad2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aad4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800aad6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aada:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aadc:	e841 2300 	strex	r3, r2, [r1]
 800aae0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1e6      	bne.n	800aab6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	3308      	adds	r3, #8
 800aaee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf2:	e853 3f00 	ldrex	r3, [r3]
 800aaf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aafa:	f023 0301 	bic.w	r3, r3, #1
 800aafe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3308      	adds	r3, #8
 800ab06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab08:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab10:	e841 2300 	strex	r3, r2, [r1]
 800ab14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d1e5      	bne.n	800aae8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	3308      	adds	r3, #8
 800ab22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	e853 3f00 	ldrex	r3, [r3]
 800ab2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ab2c:	6a3b      	ldr	r3, [r7, #32]
 800ab2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	3308      	adds	r3, #8
 800ab3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab44:	e841 2300 	strex	r3, r2, [r1]
 800ab48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d1e5      	bne.n	800ab1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab52:	2220      	movs	r2, #32
 800ab54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d118      	bne.n	800ab92 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	e853 3f00 	ldrex	r3, [r3]
 800ab6c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f023 0310 	bic.w	r3, r3, #16
 800ab74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab7e:	61fb      	str	r3, [r7, #28]
 800ab80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab82:	69b9      	ldr	r1, [r7, #24]
 800ab84:	69fa      	ldr	r2, [r7, #28]
 800ab86:	e841 2300 	strex	r3, r2, [r1]
 800ab8a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1e6      	bne.n	800ab60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab94:	2200      	movs	r2, #0
 800ab96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d109      	bne.n	800abb4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800aba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aba6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800aba8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800abac:	4611      	mov	r1, r2
 800abae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abb0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abb2:	e004      	b.n	800abbe <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800abb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800abba:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abbc:	4798      	blx	r3
}
 800abbe:	bf00      	nop
 800abc0:	3770      	adds	r7, #112	@ 0x70
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2201      	movs	r2, #1
 800abd8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d10b      	bne.n	800abfa <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800abee:	0852      	lsrs	r2, r2, #1
 800abf0:	b292      	uxth	r2, r2
 800abf2:	4611      	mov	r1, r2
 800abf4:	68f8      	ldr	r0, [r7, #12]
 800abf6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abf8:	e004      	b.n	800ac04 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	4798      	blx	r3
}
 800ac04:	bf00      	nop
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b086      	sub	sp, #24
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ac28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	689b      	ldr	r3, [r3, #8]
 800ac30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac34:	2b80      	cmp	r3, #128	@ 0x80
 800ac36:	d109      	bne.n	800ac4c <UART_DMAError+0x40>
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	2b21      	cmp	r3, #33	@ 0x21
 800ac3c:	d106      	bne.n	800ac4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ac46:	6978      	ldr	r0, [r7, #20]
 800ac48:	f7ff fe7c 	bl	800a944 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac56:	2b40      	cmp	r3, #64	@ 0x40
 800ac58:	d109      	bne.n	800ac6e <UART_DMAError+0x62>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2b22      	cmp	r3, #34	@ 0x22
 800ac5e:	d106      	bne.n	800ac6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	2200      	movs	r2, #0
 800ac64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ac68:	6978      	ldr	r0, [r7, #20]
 800ac6a:	f7ff feac 	bl	800a9c6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac74:	f043 0210 	orr.w	r2, r3, #16
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ac84:	6978      	ldr	r0, [r7, #20]
 800ac86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac88:	bf00      	nop
 800ac8a:	3718      	adds	r7, #24
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acac:	68f8      	ldr	r0, [r7, #12]
 800acae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acb0:	bf00      	nop
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}

0800acb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acd4:	61fb      	str	r3, [r7, #28]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	69fb      	ldr	r3, [r7, #28]
 800acde:	61bb      	str	r3, [r7, #24]
 800ace0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6979      	ldr	r1, [r7, #20]
 800ace4:	69ba      	ldr	r2, [r7, #24]
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	613b      	str	r3, [r7, #16]
   return(result);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e6      	bne.n	800acc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2220      	movs	r2, #32
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2200      	movs	r2, #0
 800acfe:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad0a:	bf00      	nop
 800ad0c:	3720      	adds	r7, #32
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad1a:	bf00      	nop
 800ad1c:	370c      	adds	r7, #12
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b083      	sub	sp, #12
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad2e:	bf00      	nop
 800ad30:	370c      	adds	r7, #12
 800ad32:	46bd      	mov	sp, r7
 800ad34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad38:	4770      	bx	lr

0800ad3a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad3a:	b480      	push	{r7}
 800ad3c:	b083      	sub	sp, #12
 800ad3e:	af00      	add	r7, sp, #0
 800ad40:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad42:	bf00      	nop
 800ad44:	370c      	adds	r7, #12
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b085      	sub	sp, #20
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d101      	bne.n	800ad64 <HAL_UARTEx_DisableFifoMode+0x16>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e027      	b.n	800adb4 <HAL_UARTEx_DisableFifoMode+0x66>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2224      	movs	r2, #36	@ 0x24
 800ad70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0201 	bic.w	r2, r2, #1
 800ad8a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ad92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2200      	movs	r2, #0
 800adae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
 800adc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800add0:	2b01      	cmp	r3, #1
 800add2:	d101      	bne.n	800add8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800add4:	2302      	movs	r3, #2
 800add6:	e02d      	b.n	800ae34 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2224      	movs	r2, #36	@ 0x24
 800ade4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f022 0201 	bic.w	r2, r2, #1
 800adfe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	689b      	ldr	r3, [r3, #8]
 800ae06:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f84f 	bl	800aeb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ae32:	2300      	movs	r3, #0
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3710      	adds	r7, #16
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d101      	bne.n	800ae54 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ae50:	2302      	movs	r3, #2
 800ae52:	e02d      	b.n	800aeb0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2224      	movs	r2, #36	@ 0x24
 800ae60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0201 	bic.w	r2, r2, #1
 800ae7a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 f811 	bl	800aeb8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d108      	bne.n	800aeda <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aed8:	e031      	b.n	800af3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aeda:	2308      	movs	r3, #8
 800aedc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aede:	2308      	movs	r3, #8
 800aee0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	0e5b      	lsrs	r3, r3, #25
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	0f5b      	lsrs	r3, r3, #29
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	f003 0307 	and.w	r3, r3, #7
 800af00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af02:	7bbb      	ldrb	r3, [r7, #14]
 800af04:	7b3a      	ldrb	r2, [r7, #12]
 800af06:	4911      	ldr	r1, [pc, #68]	@ (800af4c <UARTEx_SetNbDataToProcess+0x94>)
 800af08:	5c8a      	ldrb	r2, [r1, r2]
 800af0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af0e:	7b3a      	ldrb	r2, [r7, #12]
 800af10:	490f      	ldr	r1, [pc, #60]	@ (800af50 <UARTEx_SetNbDataToProcess+0x98>)
 800af12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af14:	fb93 f3f2 	sdiv	r3, r3, r2
 800af18:	b29a      	uxth	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	7b7a      	ldrb	r2, [r7, #13]
 800af24:	4909      	ldr	r1, [pc, #36]	@ (800af4c <UARTEx_SetNbDataToProcess+0x94>)
 800af26:	5c8a      	ldrb	r2, [r1, r2]
 800af28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af2c:	7b7a      	ldrb	r2, [r7, #13]
 800af2e:	4908      	ldr	r1, [pc, #32]	@ (800af50 <UARTEx_SetNbDataToProcess+0x98>)
 800af30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af32:	fb93 f3f2 	sdiv	r3, r3, r2
 800af36:	b29a      	uxth	r2, r3
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800af3e:	bf00      	nop
 800af40:	3714      	adds	r7, #20
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
 800af4a:	bf00      	nop
 800af4c:	0800bd2c 	.word	0x0800bd2c
 800af50:	0800bd34 	.word	0x0800bd34

0800af54 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	60f8      	str	r0, [r7, #12]
 800af5c:	607b      	str	r3, [r7, #4]
 800af5e:	460b      	mov	r3, r1
 800af60:	817b      	strh	r3, [r7, #10]
 800af62:	4613      	mov	r3, r2
 800af64:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	897a      	ldrh	r2, [r7, #10]
 800af6a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	893a      	ldrh	r2, [r7, #8]
 800af70:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	605a      	str	r2, [r3, #4]
}
 800af78:	bf00      	nop
 800af7a:	3714      	adds	r7, #20
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <malloc>:
 800af84:	4b02      	ldr	r3, [pc, #8]	@ (800af90 <malloc+0xc>)
 800af86:	4601      	mov	r1, r0
 800af88:	6818      	ldr	r0, [r3, #0]
 800af8a:	f000 b825 	b.w	800afd8 <_malloc_r>
 800af8e:	bf00      	nop
 800af90:	20000170 	.word	0x20000170

0800af94 <sbrk_aligned>:
 800af94:	b570      	push	{r4, r5, r6, lr}
 800af96:	4e0f      	ldr	r6, [pc, #60]	@ (800afd4 <sbrk_aligned+0x40>)
 800af98:	460c      	mov	r4, r1
 800af9a:	6831      	ldr	r1, [r6, #0]
 800af9c:	4605      	mov	r5, r0
 800af9e:	b911      	cbnz	r1, 800afa6 <sbrk_aligned+0x12>
 800afa0:	f000 f8ae 	bl	800b100 <_sbrk_r>
 800afa4:	6030      	str	r0, [r6, #0]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	f000 f8a9 	bl	800b100 <_sbrk_r>
 800afae:	1c43      	adds	r3, r0, #1
 800afb0:	d103      	bne.n	800afba <sbrk_aligned+0x26>
 800afb2:	f04f 34ff 	mov.w	r4, #4294967295
 800afb6:	4620      	mov	r0, r4
 800afb8:	bd70      	pop	{r4, r5, r6, pc}
 800afba:	1cc4      	adds	r4, r0, #3
 800afbc:	f024 0403 	bic.w	r4, r4, #3
 800afc0:	42a0      	cmp	r0, r4
 800afc2:	d0f8      	beq.n	800afb6 <sbrk_aligned+0x22>
 800afc4:	1a21      	subs	r1, r4, r0
 800afc6:	4628      	mov	r0, r5
 800afc8:	f000 f89a 	bl	800b100 <_sbrk_r>
 800afcc:	3001      	adds	r0, #1
 800afce:	d1f2      	bne.n	800afb6 <sbrk_aligned+0x22>
 800afd0:	e7ef      	b.n	800afb2 <sbrk_aligned+0x1e>
 800afd2:	bf00      	nop
 800afd4:	20001acc 	.word	0x20001acc

0800afd8 <_malloc_r>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	1ccd      	adds	r5, r1, #3
 800afde:	f025 0503 	bic.w	r5, r5, #3
 800afe2:	3508      	adds	r5, #8
 800afe4:	2d0c      	cmp	r5, #12
 800afe6:	bf38      	it	cc
 800afe8:	250c      	movcc	r5, #12
 800afea:	2d00      	cmp	r5, #0
 800afec:	4606      	mov	r6, r0
 800afee:	db01      	blt.n	800aff4 <_malloc_r+0x1c>
 800aff0:	42a9      	cmp	r1, r5
 800aff2:	d904      	bls.n	800affe <_malloc_r+0x26>
 800aff4:	230c      	movs	r3, #12
 800aff6:	6033      	str	r3, [r6, #0]
 800aff8:	2000      	movs	r0, #0
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b0d4 <_malloc_r+0xfc>
 800b002:	f000 f869 	bl	800b0d8 <__malloc_lock>
 800b006:	f8d8 3000 	ldr.w	r3, [r8]
 800b00a:	461c      	mov	r4, r3
 800b00c:	bb44      	cbnz	r4, 800b060 <_malloc_r+0x88>
 800b00e:	4629      	mov	r1, r5
 800b010:	4630      	mov	r0, r6
 800b012:	f7ff ffbf 	bl	800af94 <sbrk_aligned>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	4604      	mov	r4, r0
 800b01a:	d158      	bne.n	800b0ce <_malloc_r+0xf6>
 800b01c:	f8d8 4000 	ldr.w	r4, [r8]
 800b020:	4627      	mov	r7, r4
 800b022:	2f00      	cmp	r7, #0
 800b024:	d143      	bne.n	800b0ae <_malloc_r+0xd6>
 800b026:	2c00      	cmp	r4, #0
 800b028:	d04b      	beq.n	800b0c2 <_malloc_r+0xea>
 800b02a:	6823      	ldr	r3, [r4, #0]
 800b02c:	4639      	mov	r1, r7
 800b02e:	4630      	mov	r0, r6
 800b030:	eb04 0903 	add.w	r9, r4, r3
 800b034:	f000 f864 	bl	800b100 <_sbrk_r>
 800b038:	4581      	cmp	r9, r0
 800b03a:	d142      	bne.n	800b0c2 <_malloc_r+0xea>
 800b03c:	6821      	ldr	r1, [r4, #0]
 800b03e:	1a6d      	subs	r5, r5, r1
 800b040:	4629      	mov	r1, r5
 800b042:	4630      	mov	r0, r6
 800b044:	f7ff ffa6 	bl	800af94 <sbrk_aligned>
 800b048:	3001      	adds	r0, #1
 800b04a:	d03a      	beq.n	800b0c2 <_malloc_r+0xea>
 800b04c:	6823      	ldr	r3, [r4, #0]
 800b04e:	442b      	add	r3, r5
 800b050:	6023      	str	r3, [r4, #0]
 800b052:	f8d8 3000 	ldr.w	r3, [r8]
 800b056:	685a      	ldr	r2, [r3, #4]
 800b058:	bb62      	cbnz	r2, 800b0b4 <_malloc_r+0xdc>
 800b05a:	f8c8 7000 	str.w	r7, [r8]
 800b05e:	e00f      	b.n	800b080 <_malloc_r+0xa8>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	1b52      	subs	r2, r2, r5
 800b064:	d420      	bmi.n	800b0a8 <_malloc_r+0xd0>
 800b066:	2a0b      	cmp	r2, #11
 800b068:	d917      	bls.n	800b09a <_malloc_r+0xc2>
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	6059      	strne	r1, [r3, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	bf08      	it	eq
 800b078:	f8c8 1000 	streq.w	r1, [r8]
 800b07c:	5162      	str	r2, [r4, r5]
 800b07e:	604b      	str	r3, [r1, #4]
 800b080:	4630      	mov	r0, r6
 800b082:	f000 f82f 	bl	800b0e4 <__malloc_unlock>
 800b086:	f104 000b 	add.w	r0, r4, #11
 800b08a:	1d23      	adds	r3, r4, #4
 800b08c:	f020 0007 	bic.w	r0, r0, #7
 800b090:	1ac2      	subs	r2, r0, r3
 800b092:	bf1c      	itt	ne
 800b094:	1a1b      	subne	r3, r3, r0
 800b096:	50a3      	strne	r3, [r4, r2]
 800b098:	e7af      	b.n	800affa <_malloc_r+0x22>
 800b09a:	6862      	ldr	r2, [r4, #4]
 800b09c:	42a3      	cmp	r3, r4
 800b09e:	bf0c      	ite	eq
 800b0a0:	f8c8 2000 	streq.w	r2, [r8]
 800b0a4:	605a      	strne	r2, [r3, #4]
 800b0a6:	e7eb      	b.n	800b080 <_malloc_r+0xa8>
 800b0a8:	4623      	mov	r3, r4
 800b0aa:	6864      	ldr	r4, [r4, #4]
 800b0ac:	e7ae      	b.n	800b00c <_malloc_r+0x34>
 800b0ae:	463c      	mov	r4, r7
 800b0b0:	687f      	ldr	r7, [r7, #4]
 800b0b2:	e7b6      	b.n	800b022 <_malloc_r+0x4a>
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	d1fb      	bne.n	800b0b4 <_malloc_r+0xdc>
 800b0bc:	2300      	movs	r3, #0
 800b0be:	6053      	str	r3, [r2, #4]
 800b0c0:	e7de      	b.n	800b080 <_malloc_r+0xa8>
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	6033      	str	r3, [r6, #0]
 800b0c6:	4630      	mov	r0, r6
 800b0c8:	f000 f80c 	bl	800b0e4 <__malloc_unlock>
 800b0cc:	e794      	b.n	800aff8 <_malloc_r+0x20>
 800b0ce:	6005      	str	r5, [r0, #0]
 800b0d0:	e7d6      	b.n	800b080 <_malloc_r+0xa8>
 800b0d2:	bf00      	nop
 800b0d4:	20001ad0 	.word	0x20001ad0

0800b0d8 <__malloc_lock>:
 800b0d8:	4801      	ldr	r0, [pc, #4]	@ (800b0e0 <__malloc_lock+0x8>)
 800b0da:	f000 b84b 	b.w	800b174 <__retarget_lock_acquire_recursive>
 800b0de:	bf00      	nop
 800b0e0:	20001c10 	.word	0x20001c10

0800b0e4 <__malloc_unlock>:
 800b0e4:	4801      	ldr	r0, [pc, #4]	@ (800b0ec <__malloc_unlock+0x8>)
 800b0e6:	f000 b846 	b.w	800b176 <__retarget_lock_release_recursive>
 800b0ea:	bf00      	nop
 800b0ec:	20001c10 	.word	0x20001c10

0800b0f0 <memset>:
 800b0f0:	4402      	add	r2, r0
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d100      	bne.n	800b0fa <memset+0xa>
 800b0f8:	4770      	bx	lr
 800b0fa:	f803 1b01 	strb.w	r1, [r3], #1
 800b0fe:	e7f9      	b.n	800b0f4 <memset+0x4>

0800b100 <_sbrk_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4d06      	ldr	r5, [pc, #24]	@ (800b11c <_sbrk_r+0x1c>)
 800b104:	2300      	movs	r3, #0
 800b106:	4604      	mov	r4, r0
 800b108:	4608      	mov	r0, r1
 800b10a:	602b      	str	r3, [r5, #0]
 800b10c:	f7f7 fff8 	bl	8003100 <_sbrk>
 800b110:	1c43      	adds	r3, r0, #1
 800b112:	d102      	bne.n	800b11a <_sbrk_r+0x1a>
 800b114:	682b      	ldr	r3, [r5, #0]
 800b116:	b103      	cbz	r3, 800b11a <_sbrk_r+0x1a>
 800b118:	6023      	str	r3, [r4, #0]
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	20001c0c 	.word	0x20001c0c

0800b120 <__errno>:
 800b120:	4b01      	ldr	r3, [pc, #4]	@ (800b128 <__errno+0x8>)
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20000170 	.word	0x20000170

0800b12c <__libc_init_array>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	4d0d      	ldr	r5, [pc, #52]	@ (800b164 <__libc_init_array+0x38>)
 800b130:	4c0d      	ldr	r4, [pc, #52]	@ (800b168 <__libc_init_array+0x3c>)
 800b132:	1b64      	subs	r4, r4, r5
 800b134:	10a4      	asrs	r4, r4, #2
 800b136:	2600      	movs	r6, #0
 800b138:	42a6      	cmp	r6, r4
 800b13a:	d109      	bne.n	800b150 <__libc_init_array+0x24>
 800b13c:	4d0b      	ldr	r5, [pc, #44]	@ (800b16c <__libc_init_array+0x40>)
 800b13e:	4c0c      	ldr	r4, [pc, #48]	@ (800b170 <__libc_init_array+0x44>)
 800b140:	f000 fdb0 	bl	800bca4 <_init>
 800b144:	1b64      	subs	r4, r4, r5
 800b146:	10a4      	asrs	r4, r4, #2
 800b148:	2600      	movs	r6, #0
 800b14a:	42a6      	cmp	r6, r4
 800b14c:	d105      	bne.n	800b15a <__libc_init_array+0x2e>
 800b14e:	bd70      	pop	{r4, r5, r6, pc}
 800b150:	f855 3b04 	ldr.w	r3, [r5], #4
 800b154:	4798      	blx	r3
 800b156:	3601      	adds	r6, #1
 800b158:	e7ee      	b.n	800b138 <__libc_init_array+0xc>
 800b15a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b15e:	4798      	blx	r3
 800b160:	3601      	adds	r6, #1
 800b162:	e7f2      	b.n	800b14a <__libc_init_array+0x1e>
 800b164:	0800c114 	.word	0x0800c114
 800b168:	0800c114 	.word	0x0800c114
 800b16c:	0800c114 	.word	0x0800c114
 800b170:	0800c118 	.word	0x0800c118

0800b174 <__retarget_lock_acquire_recursive>:
 800b174:	4770      	bx	lr

0800b176 <__retarget_lock_release_recursive>:
 800b176:	4770      	bx	lr

0800b178 <sqrtf>:
 800b178:	b508      	push	{r3, lr}
 800b17a:	ed2d 8b02 	vpush	{d8}
 800b17e:	eeb0 8a40 	vmov.f32	s16, s0
 800b182:	f000 f8a1 	bl	800b2c8 <__ieee754_sqrtf>
 800b186:	eeb4 8a48 	vcmp.f32	s16, s16
 800b18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b18e:	d60c      	bvs.n	800b1aa <sqrtf+0x32>
 800b190:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b1b0 <sqrtf+0x38>
 800b194:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b19c:	d505      	bpl.n	800b1aa <sqrtf+0x32>
 800b19e:	f7ff ffbf 	bl	800b120 <__errno>
 800b1a2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b1a6:	2321      	movs	r3, #33	@ 0x21
 800b1a8:	6003      	str	r3, [r0, #0]
 800b1aa:	ecbd 8b02 	vpop	{d8}
 800b1ae:	bd08      	pop	{r3, pc}
 800b1b0:	00000000 	.word	0x00000000

0800b1b4 <cosf>:
 800b1b4:	ee10 3a10 	vmov	r3, s0
 800b1b8:	b507      	push	{r0, r1, r2, lr}
 800b1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b234 <cosf+0x80>)
 800b1bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d806      	bhi.n	800b1d2 <cosf+0x1e>
 800b1c4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b238 <cosf+0x84>
 800b1c8:	b003      	add	sp, #12
 800b1ca:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ce:	f000 b87f 	b.w	800b2d0 <__kernel_cosf>
 800b1d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b1d6:	d304      	bcc.n	800b1e2 <cosf+0x2e>
 800b1d8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1dc:	b003      	add	sp, #12
 800b1de:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1e2:	4668      	mov	r0, sp
 800b1e4:	f000 f914 	bl	800b410 <__ieee754_rem_pio2f>
 800b1e8:	f000 0003 	and.w	r0, r0, #3
 800b1ec:	2801      	cmp	r0, #1
 800b1ee:	d009      	beq.n	800b204 <cosf+0x50>
 800b1f0:	2802      	cmp	r0, #2
 800b1f2:	d010      	beq.n	800b216 <cosf+0x62>
 800b1f4:	b9b0      	cbnz	r0, 800b224 <cosf+0x70>
 800b1f6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1fa:	ed9d 0a00 	vldr	s0, [sp]
 800b1fe:	f000 f867 	bl	800b2d0 <__kernel_cosf>
 800b202:	e7eb      	b.n	800b1dc <cosf+0x28>
 800b204:	eddd 0a01 	vldr	s1, [sp, #4]
 800b208:	ed9d 0a00 	vldr	s0, [sp]
 800b20c:	f000 f8b8 	bl	800b380 <__kernel_sinf>
 800b210:	eeb1 0a40 	vneg.f32	s0, s0
 800b214:	e7e2      	b.n	800b1dc <cosf+0x28>
 800b216:	eddd 0a01 	vldr	s1, [sp, #4]
 800b21a:	ed9d 0a00 	vldr	s0, [sp]
 800b21e:	f000 f857 	bl	800b2d0 <__kernel_cosf>
 800b222:	e7f5      	b.n	800b210 <cosf+0x5c>
 800b224:	eddd 0a01 	vldr	s1, [sp, #4]
 800b228:	ed9d 0a00 	vldr	s0, [sp]
 800b22c:	2001      	movs	r0, #1
 800b22e:	f000 f8a7 	bl	800b380 <__kernel_sinf>
 800b232:	e7d3      	b.n	800b1dc <cosf+0x28>
 800b234:	3f490fd8 	.word	0x3f490fd8
 800b238:	00000000 	.word	0x00000000

0800b23c <sinf>:
 800b23c:	ee10 3a10 	vmov	r3, s0
 800b240:	b507      	push	{r0, r1, r2, lr}
 800b242:	4a1f      	ldr	r2, [pc, #124]	@ (800b2c0 <sinf+0x84>)
 800b244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b248:	4293      	cmp	r3, r2
 800b24a:	d807      	bhi.n	800b25c <sinf+0x20>
 800b24c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b2c4 <sinf+0x88>
 800b250:	2000      	movs	r0, #0
 800b252:	b003      	add	sp, #12
 800b254:	f85d eb04 	ldr.w	lr, [sp], #4
 800b258:	f000 b892 	b.w	800b380 <__kernel_sinf>
 800b25c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b260:	d304      	bcc.n	800b26c <sinf+0x30>
 800b262:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b266:	b003      	add	sp, #12
 800b268:	f85d fb04 	ldr.w	pc, [sp], #4
 800b26c:	4668      	mov	r0, sp
 800b26e:	f000 f8cf 	bl	800b410 <__ieee754_rem_pio2f>
 800b272:	f000 0003 	and.w	r0, r0, #3
 800b276:	2801      	cmp	r0, #1
 800b278:	d00a      	beq.n	800b290 <sinf+0x54>
 800b27a:	2802      	cmp	r0, #2
 800b27c:	d00f      	beq.n	800b29e <sinf+0x62>
 800b27e:	b9c0      	cbnz	r0, 800b2b2 <sinf+0x76>
 800b280:	eddd 0a01 	vldr	s1, [sp, #4]
 800b284:	ed9d 0a00 	vldr	s0, [sp]
 800b288:	2001      	movs	r0, #1
 800b28a:	f000 f879 	bl	800b380 <__kernel_sinf>
 800b28e:	e7ea      	b.n	800b266 <sinf+0x2a>
 800b290:	eddd 0a01 	vldr	s1, [sp, #4]
 800b294:	ed9d 0a00 	vldr	s0, [sp]
 800b298:	f000 f81a 	bl	800b2d0 <__kernel_cosf>
 800b29c:	e7e3      	b.n	800b266 <sinf+0x2a>
 800b29e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2a2:	ed9d 0a00 	vldr	s0, [sp]
 800b2a6:	2001      	movs	r0, #1
 800b2a8:	f000 f86a 	bl	800b380 <__kernel_sinf>
 800b2ac:	eeb1 0a40 	vneg.f32	s0, s0
 800b2b0:	e7d9      	b.n	800b266 <sinf+0x2a>
 800b2b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b2b6:	ed9d 0a00 	vldr	s0, [sp]
 800b2ba:	f000 f809 	bl	800b2d0 <__kernel_cosf>
 800b2be:	e7f5      	b.n	800b2ac <sinf+0x70>
 800b2c0:	3f490fd8 	.word	0x3f490fd8
 800b2c4:	00000000 	.word	0x00000000

0800b2c8 <__ieee754_sqrtf>:
 800b2c8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b2cc:	4770      	bx	lr
	...

0800b2d0 <__kernel_cosf>:
 800b2d0:	ee10 3a10 	vmov	r3, s0
 800b2d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b2d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b2dc:	eef0 6a40 	vmov.f32	s13, s0
 800b2e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b2e4:	d204      	bcs.n	800b2f0 <__kernel_cosf+0x20>
 800b2e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b2ea:	ee17 2a90 	vmov	r2, s15
 800b2ee:	b342      	cbz	r2, 800b342 <__kernel_cosf+0x72>
 800b2f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b2f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b360 <__kernel_cosf+0x90>
 800b2f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b364 <__kernel_cosf+0x94>
 800b2fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b368 <__kernel_cosf+0x98>)
 800b2fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b302:	4293      	cmp	r3, r2
 800b304:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b36c <__kernel_cosf+0x9c>
 800b308:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b30c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b370 <__kernel_cosf+0xa0>
 800b310:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b314:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b374 <__kernel_cosf+0xa4>
 800b318:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b31c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b378 <__kernel_cosf+0xa8>
 800b320:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b324:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b328:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b32c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b330:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b338:	d804      	bhi.n	800b344 <__kernel_cosf+0x74>
 800b33a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b33e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b342:	4770      	bx	lr
 800b344:	4a0d      	ldr	r2, [pc, #52]	@ (800b37c <__kernel_cosf+0xac>)
 800b346:	4293      	cmp	r3, r2
 800b348:	bf9a      	itte	ls
 800b34a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b34e:	ee07 3a10 	vmovls	s14, r3
 800b352:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b356:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b35a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b35e:	e7ec      	b.n	800b33a <__kernel_cosf+0x6a>
 800b360:	ad47d74e 	.word	0xad47d74e
 800b364:	310f74f6 	.word	0x310f74f6
 800b368:	3e999999 	.word	0x3e999999
 800b36c:	b493f27c 	.word	0xb493f27c
 800b370:	37d00d01 	.word	0x37d00d01
 800b374:	bab60b61 	.word	0xbab60b61
 800b378:	3d2aaaab 	.word	0x3d2aaaab
 800b37c:	3f480000 	.word	0x3f480000

0800b380 <__kernel_sinf>:
 800b380:	ee10 3a10 	vmov	r3, s0
 800b384:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b388:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b38c:	d204      	bcs.n	800b398 <__kernel_sinf+0x18>
 800b38e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b392:	ee17 3a90 	vmov	r3, s15
 800b396:	b35b      	cbz	r3, 800b3f0 <__kernel_sinf+0x70>
 800b398:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b39c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b3f4 <__kernel_sinf+0x74>
 800b3a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b3f8 <__kernel_sinf+0x78>
 800b3a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b3fc <__kernel_sinf+0x7c>
 800b3ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b400 <__kernel_sinf+0x80>
 800b3b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b3b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b404 <__kernel_sinf+0x84>
 800b3bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b3c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b3c4:	b930      	cbnz	r0, 800b3d4 <__kernel_sinf+0x54>
 800b3c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b408 <__kernel_sinf+0x88>
 800b3ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b3ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b3d2:	4770      	bx	lr
 800b3d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b3d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b3dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b3e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b3e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b40c <__kernel_sinf+0x8c>
 800b3e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b3ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	2f2ec9d3 	.word	0x2f2ec9d3
 800b3f8:	b2d72f34 	.word	0xb2d72f34
 800b3fc:	3638ef1b 	.word	0x3638ef1b
 800b400:	b9500d01 	.word	0xb9500d01
 800b404:	3c088889 	.word	0x3c088889
 800b408:	be2aaaab 	.word	0xbe2aaaab
 800b40c:	3e2aaaab 	.word	0x3e2aaaab

0800b410 <__ieee754_rem_pio2f>:
 800b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b412:	ee10 6a10 	vmov	r6, s0
 800b416:	4b88      	ldr	r3, [pc, #544]	@ (800b638 <__ieee754_rem_pio2f+0x228>)
 800b418:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b41c:	429d      	cmp	r5, r3
 800b41e:	b087      	sub	sp, #28
 800b420:	4604      	mov	r4, r0
 800b422:	d805      	bhi.n	800b430 <__ieee754_rem_pio2f+0x20>
 800b424:	2300      	movs	r3, #0
 800b426:	ed80 0a00 	vstr	s0, [r0]
 800b42a:	6043      	str	r3, [r0, #4]
 800b42c:	2000      	movs	r0, #0
 800b42e:	e022      	b.n	800b476 <__ieee754_rem_pio2f+0x66>
 800b430:	4b82      	ldr	r3, [pc, #520]	@ (800b63c <__ieee754_rem_pio2f+0x22c>)
 800b432:	429d      	cmp	r5, r3
 800b434:	d83a      	bhi.n	800b4ac <__ieee754_rem_pio2f+0x9c>
 800b436:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800b640 <__ieee754_rem_pio2f+0x230>
 800b440:	4a80      	ldr	r2, [pc, #512]	@ (800b644 <__ieee754_rem_pio2f+0x234>)
 800b442:	f023 030f 	bic.w	r3, r3, #15
 800b446:	dd18      	ble.n	800b47a <__ieee754_rem_pio2f+0x6a>
 800b448:	4293      	cmp	r3, r2
 800b44a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b44e:	bf09      	itett	eq
 800b450:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800b648 <__ieee754_rem_pio2f+0x238>
 800b454:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800b64c <__ieee754_rem_pio2f+0x23c>
 800b458:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800b650 <__ieee754_rem_pio2f+0x240>
 800b45c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b460:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b464:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b468:	ed80 7a00 	vstr	s14, [r0]
 800b46c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b470:	edc0 7a01 	vstr	s15, [r0, #4]
 800b474:	2001      	movs	r0, #1
 800b476:	b007      	add	sp, #28
 800b478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b47a:	4293      	cmp	r3, r2
 800b47c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b480:	bf09      	itett	eq
 800b482:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800b648 <__ieee754_rem_pio2f+0x238>
 800b486:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800b64c <__ieee754_rem_pio2f+0x23c>
 800b48a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800b650 <__ieee754_rem_pio2f+0x240>
 800b48e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b492:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b49a:	ed80 7a00 	vstr	s14, [r0]
 800b49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a2:	edc0 7a01 	vstr	s15, [r0, #4]
 800b4a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4aa:	e7e4      	b.n	800b476 <__ieee754_rem_pio2f+0x66>
 800b4ac:	4b69      	ldr	r3, [pc, #420]	@ (800b654 <__ieee754_rem_pio2f+0x244>)
 800b4ae:	429d      	cmp	r5, r3
 800b4b0:	d873      	bhi.n	800b59a <__ieee754_rem_pio2f+0x18a>
 800b4b2:	f000 f8dd 	bl	800b670 <fabsf>
 800b4b6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800b658 <__ieee754_rem_pio2f+0x248>
 800b4ba:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b4be:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b4c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4ca:	ee17 0a90 	vmov	r0, s15
 800b4ce:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b640 <__ieee754_rem_pio2f+0x230>
 800b4d2:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b4d6:	281f      	cmp	r0, #31
 800b4d8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800b64c <__ieee754_rem_pio2f+0x23c>
 800b4dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e0:	eeb1 6a47 	vneg.f32	s12, s14
 800b4e4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b4e8:	ee16 1a90 	vmov	r1, s13
 800b4ec:	dc09      	bgt.n	800b502 <__ieee754_rem_pio2f+0xf2>
 800b4ee:	4a5b      	ldr	r2, [pc, #364]	@ (800b65c <__ieee754_rem_pio2f+0x24c>)
 800b4f0:	1e47      	subs	r7, r0, #1
 800b4f2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b4f6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800b4fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d107      	bne.n	800b512 <__ieee754_rem_pio2f+0x102>
 800b502:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800b506:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800b50a:	2a08      	cmp	r2, #8
 800b50c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b510:	dc14      	bgt.n	800b53c <__ieee754_rem_pio2f+0x12c>
 800b512:	6021      	str	r1, [r4, #0]
 800b514:	ed94 7a00 	vldr	s14, [r4]
 800b518:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b51c:	2e00      	cmp	r6, #0
 800b51e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b522:	ed84 0a01 	vstr	s0, [r4, #4]
 800b526:	daa6      	bge.n	800b476 <__ieee754_rem_pio2f+0x66>
 800b528:	eeb1 7a47 	vneg.f32	s14, s14
 800b52c:	eeb1 0a40 	vneg.f32	s0, s0
 800b530:	ed84 7a00 	vstr	s14, [r4]
 800b534:	ed84 0a01 	vstr	s0, [r4, #4]
 800b538:	4240      	negs	r0, r0
 800b53a:	e79c      	b.n	800b476 <__ieee754_rem_pio2f+0x66>
 800b53c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800b648 <__ieee754_rem_pio2f+0x238>
 800b540:	eef0 6a40 	vmov.f32	s13, s0
 800b544:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b548:	ee70 7a66 	vsub.f32	s15, s0, s13
 800b54c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b550:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b650 <__ieee754_rem_pio2f+0x240>
 800b554:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b558:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b55c:	ee15 2a90 	vmov	r2, s11
 800b560:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b564:	1a5b      	subs	r3, r3, r1
 800b566:	2b19      	cmp	r3, #25
 800b568:	dc04      	bgt.n	800b574 <__ieee754_rem_pio2f+0x164>
 800b56a:	edc4 5a00 	vstr	s11, [r4]
 800b56e:	eeb0 0a66 	vmov.f32	s0, s13
 800b572:	e7cf      	b.n	800b514 <__ieee754_rem_pio2f+0x104>
 800b574:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800b660 <__ieee754_rem_pio2f+0x250>
 800b578:	eeb0 0a66 	vmov.f32	s0, s13
 800b57c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b580:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b584:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800b664 <__ieee754_rem_pio2f+0x254>
 800b588:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b58c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b590:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b594:	ed84 7a00 	vstr	s14, [r4]
 800b598:	e7bc      	b.n	800b514 <__ieee754_rem_pio2f+0x104>
 800b59a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800b59e:	d306      	bcc.n	800b5ae <__ieee754_rem_pio2f+0x19e>
 800b5a0:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b5a4:	edc0 7a01 	vstr	s15, [r0, #4]
 800b5a8:	edc0 7a00 	vstr	s15, [r0]
 800b5ac:	e73e      	b.n	800b42c <__ieee754_rem_pio2f+0x1c>
 800b5ae:	15ea      	asrs	r2, r5, #23
 800b5b0:	3a86      	subs	r2, #134	@ 0x86
 800b5b2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5be:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800b668 <__ieee754_rem_pio2f+0x258>
 800b5c2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5ca:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b5ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5d2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5de:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b5e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5ee:	edcd 7a05 	vstr	s15, [sp, #20]
 800b5f2:	d11e      	bne.n	800b632 <__ieee754_rem_pio2f+0x222>
 800b5f4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2301      	moveq	r3, #1
 800b600:	2302      	movne	r3, #2
 800b602:	491a      	ldr	r1, [pc, #104]	@ (800b66c <__ieee754_rem_pio2f+0x25c>)
 800b604:	9101      	str	r1, [sp, #4]
 800b606:	2102      	movs	r1, #2
 800b608:	9100      	str	r1, [sp, #0]
 800b60a:	a803      	add	r0, sp, #12
 800b60c:	4621      	mov	r1, r4
 800b60e:	f000 f89d 	bl	800b74c <__kernel_rem_pio2f>
 800b612:	2e00      	cmp	r6, #0
 800b614:	f6bf af2f 	bge.w	800b476 <__ieee754_rem_pio2f+0x66>
 800b618:	edd4 7a00 	vldr	s15, [r4]
 800b61c:	eef1 7a67 	vneg.f32	s15, s15
 800b620:	edc4 7a00 	vstr	s15, [r4]
 800b624:	edd4 7a01 	vldr	s15, [r4, #4]
 800b628:	eef1 7a67 	vneg.f32	s15, s15
 800b62c:	edc4 7a01 	vstr	s15, [r4, #4]
 800b630:	e782      	b.n	800b538 <__ieee754_rem_pio2f+0x128>
 800b632:	2303      	movs	r3, #3
 800b634:	e7e5      	b.n	800b602 <__ieee754_rem_pio2f+0x1f2>
 800b636:	bf00      	nop
 800b638:	3f490fd8 	.word	0x3f490fd8
 800b63c:	4016cbe3 	.word	0x4016cbe3
 800b640:	3fc90f80 	.word	0x3fc90f80
 800b644:	3fc90fd0 	.word	0x3fc90fd0
 800b648:	37354400 	.word	0x37354400
 800b64c:	37354443 	.word	0x37354443
 800b650:	2e85a308 	.word	0x2e85a308
 800b654:	43490f80 	.word	0x43490f80
 800b658:	3f22f984 	.word	0x3f22f984
 800b65c:	0800bd3c 	.word	0x0800bd3c
 800b660:	2e85a300 	.word	0x2e85a300
 800b664:	248d3132 	.word	0x248d3132
 800b668:	43800000 	.word	0x43800000
 800b66c:	0800bdbc 	.word	0x0800bdbc

0800b670 <fabsf>:
 800b670:	ee10 3a10 	vmov	r3, s0
 800b674:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b678:	ee00 3a10 	vmov	s0, r3
 800b67c:	4770      	bx	lr
	...

0800b680 <scalbnf>:
 800b680:	ee10 3a10 	vmov	r3, s0
 800b684:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b688:	d02b      	beq.n	800b6e2 <scalbnf+0x62>
 800b68a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b68e:	d302      	bcc.n	800b696 <scalbnf+0x16>
 800b690:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b694:	4770      	bx	lr
 800b696:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b69a:	d123      	bne.n	800b6e4 <scalbnf+0x64>
 800b69c:	4b24      	ldr	r3, [pc, #144]	@ (800b730 <scalbnf+0xb0>)
 800b69e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b734 <scalbnf+0xb4>
 800b6a2:	4298      	cmp	r0, r3
 800b6a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b6a8:	db17      	blt.n	800b6da <scalbnf+0x5a>
 800b6aa:	ee10 3a10 	vmov	r3, s0
 800b6ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b6b2:	3a19      	subs	r2, #25
 800b6b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b6b8:	4288      	cmp	r0, r1
 800b6ba:	dd15      	ble.n	800b6e8 <scalbnf+0x68>
 800b6bc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b738 <scalbnf+0xb8>
 800b6c0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b73c <scalbnf+0xbc>
 800b6c4:	ee10 3a10 	vmov	r3, s0
 800b6c8:	eeb0 7a67 	vmov.f32	s14, s15
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	bfb8      	it	lt
 800b6d0:	eef0 7a66 	vmovlt.f32	s15, s13
 800b6d4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b6d8:	4770      	bx	lr
 800b6da:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b740 <scalbnf+0xc0>
 800b6de:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b6e2:	4770      	bx	lr
 800b6e4:	0dd2      	lsrs	r2, r2, #23
 800b6e6:	e7e5      	b.n	800b6b4 <scalbnf+0x34>
 800b6e8:	4410      	add	r0, r2
 800b6ea:	28fe      	cmp	r0, #254	@ 0xfe
 800b6ec:	dce6      	bgt.n	800b6bc <scalbnf+0x3c>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	dd06      	ble.n	800b700 <scalbnf+0x80>
 800b6f2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b6f6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b6fa:	ee00 3a10 	vmov	s0, r3
 800b6fe:	4770      	bx	lr
 800b700:	f110 0f16 	cmn.w	r0, #22
 800b704:	da09      	bge.n	800b71a <scalbnf+0x9a>
 800b706:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b740 <scalbnf+0xc0>
 800b70a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b744 <scalbnf+0xc4>
 800b70e:	ee10 3a10 	vmov	r3, s0
 800b712:	eeb0 7a67 	vmov.f32	s14, s15
 800b716:	2b00      	cmp	r3, #0
 800b718:	e7d9      	b.n	800b6ce <scalbnf+0x4e>
 800b71a:	3019      	adds	r0, #25
 800b71c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b720:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b724:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b748 <scalbnf+0xc8>
 800b728:	ee07 3a90 	vmov	s15, r3
 800b72c:	e7d7      	b.n	800b6de <scalbnf+0x5e>
 800b72e:	bf00      	nop
 800b730:	ffff3cb0 	.word	0xffff3cb0
 800b734:	4c000000 	.word	0x4c000000
 800b738:	7149f2ca 	.word	0x7149f2ca
 800b73c:	f149f2ca 	.word	0xf149f2ca
 800b740:	0da24260 	.word	0x0da24260
 800b744:	8da24260 	.word	0x8da24260
 800b748:	33000000 	.word	0x33000000

0800b74c <__kernel_rem_pio2f>:
 800b74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b750:	ed2d 8b04 	vpush	{d8-d9}
 800b754:	b0d9      	sub	sp, #356	@ 0x164
 800b756:	4690      	mov	r8, r2
 800b758:	9001      	str	r0, [sp, #4]
 800b75a:	4ab6      	ldr	r2, [pc, #728]	@ (800ba34 <__kernel_rem_pio2f+0x2e8>)
 800b75c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800b75e:	f118 0f04 	cmn.w	r8, #4
 800b762:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800b766:	460f      	mov	r7, r1
 800b768:	f103 3bff 	add.w	fp, r3, #4294967295
 800b76c:	db26      	blt.n	800b7bc <__kernel_rem_pio2f+0x70>
 800b76e:	f1b8 0203 	subs.w	r2, r8, #3
 800b772:	bf48      	it	mi
 800b774:	f108 0204 	addmi.w	r2, r8, #4
 800b778:	10d2      	asrs	r2, r2, #3
 800b77a:	1c55      	adds	r5, r2, #1
 800b77c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b77e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800b782:	00e8      	lsls	r0, r5, #3
 800b784:	eba2 060b 	sub.w	r6, r2, fp
 800b788:	9002      	str	r0, [sp, #8]
 800b78a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800b78e:	eb0a 0c0b 	add.w	ip, sl, fp
 800b792:	ac1c      	add	r4, sp, #112	@ 0x70
 800b794:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800b798:	2000      	movs	r0, #0
 800b79a:	4560      	cmp	r0, ip
 800b79c:	dd10      	ble.n	800b7c0 <__kernel_rem_pio2f+0x74>
 800b79e:	a91c      	add	r1, sp, #112	@ 0x70
 800b7a0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800b7a4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	4556      	cmp	r6, sl
 800b7ac:	dc24      	bgt.n	800b7f8 <__kernel_rem_pio2f+0xac>
 800b7ae:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b7b2:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800b7b6:	4684      	mov	ip, r0
 800b7b8:	2400      	movs	r4, #0
 800b7ba:	e016      	b.n	800b7ea <__kernel_rem_pio2f+0x9e>
 800b7bc:	2200      	movs	r2, #0
 800b7be:	e7dc      	b.n	800b77a <__kernel_rem_pio2f+0x2e>
 800b7c0:	42c6      	cmn	r6, r0
 800b7c2:	bf5d      	ittte	pl
 800b7c4:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800b7c8:	ee07 1a90 	vmovpl	s15, r1
 800b7cc:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b7d0:	eef0 7a47 	vmovmi.f32	s15, s14
 800b7d4:	ece4 7a01 	vstmia	r4!, {s15}
 800b7d8:	3001      	adds	r0, #1
 800b7da:	e7de      	b.n	800b79a <__kernel_rem_pio2f+0x4e>
 800b7dc:	ecfe 6a01 	vldmia	lr!, {s13}
 800b7e0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800b7e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7e8:	3401      	adds	r4, #1
 800b7ea:	455c      	cmp	r4, fp
 800b7ec:	ddf6      	ble.n	800b7dc <__kernel_rem_pio2f+0x90>
 800b7ee:	ece9 7a01 	vstmia	r9!, {s15}
 800b7f2:	3601      	adds	r6, #1
 800b7f4:	3004      	adds	r0, #4
 800b7f6:	e7d8      	b.n	800b7aa <__kernel_rem_pio2f+0x5e>
 800b7f8:	a908      	add	r1, sp, #32
 800b7fa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7fe:	9104      	str	r1, [sp, #16]
 800b800:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800b802:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ba40 <__kernel_rem_pio2f+0x2f4>
 800b806:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ba3c <__kernel_rem_pio2f+0x2f0>
 800b80a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800b80e:	9203      	str	r2, [sp, #12]
 800b810:	4654      	mov	r4, sl
 800b812:	00a2      	lsls	r2, r4, #2
 800b814:	9205      	str	r2, [sp, #20]
 800b816:	aa58      	add	r2, sp, #352	@ 0x160
 800b818:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b81c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800b820:	a944      	add	r1, sp, #272	@ 0x110
 800b822:	aa08      	add	r2, sp, #32
 800b824:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800b828:	4694      	mov	ip, r2
 800b82a:	4626      	mov	r6, r4
 800b82c:	2e00      	cmp	r6, #0
 800b82e:	dc4c      	bgt.n	800b8ca <__kernel_rem_pio2f+0x17e>
 800b830:	4628      	mov	r0, r5
 800b832:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b836:	f7ff ff23 	bl	800b680 <scalbnf>
 800b83a:	eeb0 8a40 	vmov.f32	s16, s0
 800b83e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800b842:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b846:	f000 f9e9 	bl	800bc1c <floorf>
 800b84a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800b84e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b852:	2d00      	cmp	r5, #0
 800b854:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b858:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b85c:	ee17 9a90 	vmov	r9, s15
 800b860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b864:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b868:	dd41      	ble.n	800b8ee <__kernel_rem_pio2f+0x1a2>
 800b86a:	f104 3cff 	add.w	ip, r4, #4294967295
 800b86e:	a908      	add	r1, sp, #32
 800b870:	f1c5 0e08 	rsb	lr, r5, #8
 800b874:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800b878:	fa46 f00e 	asr.w	r0, r6, lr
 800b87c:	4481      	add	r9, r0
 800b87e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b882:	1a36      	subs	r6, r6, r0
 800b884:	f1c5 0007 	rsb	r0, r5, #7
 800b888:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800b88c:	4106      	asrs	r6, r0
 800b88e:	2e00      	cmp	r6, #0
 800b890:	dd3c      	ble.n	800b90c <__kernel_rem_pio2f+0x1c0>
 800b892:	f04f 0e00 	mov.w	lr, #0
 800b896:	f109 0901 	add.w	r9, r9, #1
 800b89a:	4670      	mov	r0, lr
 800b89c:	4574      	cmp	r4, lr
 800b89e:	dc68      	bgt.n	800b972 <__kernel_rem_pio2f+0x226>
 800b8a0:	2d00      	cmp	r5, #0
 800b8a2:	dd03      	ble.n	800b8ac <__kernel_rem_pio2f+0x160>
 800b8a4:	2d01      	cmp	r5, #1
 800b8a6:	d074      	beq.n	800b992 <__kernel_rem_pio2f+0x246>
 800b8a8:	2d02      	cmp	r5, #2
 800b8aa:	d07d      	beq.n	800b9a8 <__kernel_rem_pio2f+0x25c>
 800b8ac:	2e02      	cmp	r6, #2
 800b8ae:	d12d      	bne.n	800b90c <__kernel_rem_pio2f+0x1c0>
 800b8b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b8b4:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b8b8:	b340      	cbz	r0, 800b90c <__kernel_rem_pio2f+0x1c0>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	9306      	str	r3, [sp, #24]
 800b8be:	f7ff fedf 	bl	800b680 <scalbnf>
 800b8c2:	9b06      	ldr	r3, [sp, #24]
 800b8c4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b8c8:	e020      	b.n	800b90c <__kernel_rem_pio2f+0x1c0>
 800b8ca:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b8ce:	3e01      	subs	r6, #1
 800b8d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b8d8:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b8dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b8e0:	ecac 0a01 	vstmia	ip!, {s0}
 800b8e4:	ed30 0a01 	vldmdb	r0!, {s0}
 800b8e8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8ec:	e79e      	b.n	800b82c <__kernel_rem_pio2f+0xe0>
 800b8ee:	d105      	bne.n	800b8fc <__kernel_rem_pio2f+0x1b0>
 800b8f0:	1e60      	subs	r0, r4, #1
 800b8f2:	a908      	add	r1, sp, #32
 800b8f4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800b8f8:	11f6      	asrs	r6, r6, #7
 800b8fa:	e7c8      	b.n	800b88e <__kernel_rem_pio2f+0x142>
 800b8fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b900:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b908:	da31      	bge.n	800b96e <__kernel_rem_pio2f+0x222>
 800b90a:	2600      	movs	r6, #0
 800b90c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b914:	f040 8098 	bne.w	800ba48 <__kernel_rem_pio2f+0x2fc>
 800b918:	1e60      	subs	r0, r4, #1
 800b91a:	2200      	movs	r2, #0
 800b91c:	4550      	cmp	r0, sl
 800b91e:	da4b      	bge.n	800b9b8 <__kernel_rem_pio2f+0x26c>
 800b920:	2a00      	cmp	r2, #0
 800b922:	d065      	beq.n	800b9f0 <__kernel_rem_pio2f+0x2a4>
 800b924:	3c01      	subs	r4, #1
 800b926:	ab08      	add	r3, sp, #32
 800b928:	3d08      	subs	r5, #8
 800b92a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0f8      	beq.n	800b924 <__kernel_rem_pio2f+0x1d8>
 800b932:	4628      	mov	r0, r5
 800b934:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b938:	f7ff fea2 	bl	800b680 <scalbnf>
 800b93c:	1c63      	adds	r3, r4, #1
 800b93e:	aa44      	add	r2, sp, #272	@ 0x110
 800b940:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ba40 <__kernel_rem_pio2f+0x2f4>
 800b944:	0099      	lsls	r1, r3, #2
 800b946:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b94a:	4623      	mov	r3, r4
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f280 80a9 	bge.w	800baa4 <__kernel_rem_pio2f+0x358>
 800b952:	4623      	mov	r3, r4
 800b954:	2b00      	cmp	r3, #0
 800b956:	f2c0 80c7 	blt.w	800bae8 <__kernel_rem_pio2f+0x39c>
 800b95a:	aa44      	add	r2, sp, #272	@ 0x110
 800b95c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800b960:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ba38 <__kernel_rem_pio2f+0x2ec>
 800b964:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800b968:	2000      	movs	r0, #0
 800b96a:	1ae2      	subs	r2, r4, r3
 800b96c:	e0b1      	b.n	800bad2 <__kernel_rem_pio2f+0x386>
 800b96e:	2602      	movs	r6, #2
 800b970:	e78f      	b.n	800b892 <__kernel_rem_pio2f+0x146>
 800b972:	f852 1b04 	ldr.w	r1, [r2], #4
 800b976:	b948      	cbnz	r0, 800b98c <__kernel_rem_pio2f+0x240>
 800b978:	b121      	cbz	r1, 800b984 <__kernel_rem_pio2f+0x238>
 800b97a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800b97e:	f842 1c04 	str.w	r1, [r2, #-4]
 800b982:	2101      	movs	r1, #1
 800b984:	f10e 0e01 	add.w	lr, lr, #1
 800b988:	4608      	mov	r0, r1
 800b98a:	e787      	b.n	800b89c <__kernel_rem_pio2f+0x150>
 800b98c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800b990:	e7f5      	b.n	800b97e <__kernel_rem_pio2f+0x232>
 800b992:	f104 3cff 	add.w	ip, r4, #4294967295
 800b996:	aa08      	add	r2, sp, #32
 800b998:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b99c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800b9a0:	a908      	add	r1, sp, #32
 800b9a2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800b9a6:	e781      	b.n	800b8ac <__kernel_rem_pio2f+0x160>
 800b9a8:	f104 3cff 	add.w	ip, r4, #4294967295
 800b9ac:	aa08      	add	r2, sp, #32
 800b9ae:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800b9b2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800b9b6:	e7f3      	b.n	800b9a0 <__kernel_rem_pio2f+0x254>
 800b9b8:	a908      	add	r1, sp, #32
 800b9ba:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b9be:	3801      	subs	r0, #1
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	e7ab      	b.n	800b91c <__kernel_rem_pio2f+0x1d0>
 800b9c4:	3201      	adds	r2, #1
 800b9c6:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800b9ca:	2e00      	cmp	r6, #0
 800b9cc:	d0fa      	beq.n	800b9c4 <__kernel_rem_pio2f+0x278>
 800b9ce:	9905      	ldr	r1, [sp, #20]
 800b9d0:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800b9d4:	eb0d 0001 	add.w	r0, sp, r1
 800b9d8:	18e6      	adds	r6, r4, r3
 800b9da:	a91c      	add	r1, sp, #112	@ 0x70
 800b9dc:	f104 0c01 	add.w	ip, r4, #1
 800b9e0:	384c      	subs	r0, #76	@ 0x4c
 800b9e2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800b9e6:	4422      	add	r2, r4
 800b9e8:	4562      	cmp	r2, ip
 800b9ea:	da04      	bge.n	800b9f6 <__kernel_rem_pio2f+0x2aa>
 800b9ec:	4614      	mov	r4, r2
 800b9ee:	e710      	b.n	800b812 <__kernel_rem_pio2f+0xc6>
 800b9f0:	9804      	ldr	r0, [sp, #16]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	e7e7      	b.n	800b9c6 <__kernel_rem_pio2f+0x27a>
 800b9f6:	9903      	ldr	r1, [sp, #12]
 800b9f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b9fc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ba00:	9105      	str	r1, [sp, #20]
 800ba02:	ee07 1a90 	vmov	s15, r1
 800ba06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba0a:	2400      	movs	r4, #0
 800ba0c:	ece6 7a01 	vstmia	r6!, {s15}
 800ba10:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800ba14:	46b1      	mov	r9, r6
 800ba16:	455c      	cmp	r4, fp
 800ba18:	dd04      	ble.n	800ba24 <__kernel_rem_pio2f+0x2d8>
 800ba1a:	ece0 7a01 	vstmia	r0!, {s15}
 800ba1e:	f10c 0c01 	add.w	ip, ip, #1
 800ba22:	e7e1      	b.n	800b9e8 <__kernel_rem_pio2f+0x29c>
 800ba24:	ecfe 6a01 	vldmia	lr!, {s13}
 800ba28:	ed39 7a01 	vldmdb	r9!, {s14}
 800ba2c:	3401      	adds	r4, #1
 800ba2e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba32:	e7f0      	b.n	800ba16 <__kernel_rem_pio2f+0x2ca>
 800ba34:	0800c100 	.word	0x0800c100
 800ba38:	0800c0d4 	.word	0x0800c0d4
 800ba3c:	43800000 	.word	0x43800000
 800ba40:	3b800000 	.word	0x3b800000
 800ba44:	00000000 	.word	0x00000000
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba4e:	eba3 0008 	sub.w	r0, r3, r8
 800ba52:	f7ff fe15 	bl	800b680 <scalbnf>
 800ba56:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ba3c <__kernel_rem_pio2f+0x2f0>
 800ba5a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba62:	db19      	blt.n	800ba98 <__kernel_rem_pio2f+0x34c>
 800ba64:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ba40 <__kernel_rem_pio2f+0x2f4>
 800ba68:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba6c:	aa08      	add	r2, sp, #32
 800ba6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba72:	3508      	adds	r5, #8
 800ba74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba78:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba84:	ee10 3a10 	vmov	r3, s0
 800ba88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba8c:	ee17 3a90 	vmov	r3, s15
 800ba90:	3401      	adds	r4, #1
 800ba92:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba96:	e74c      	b.n	800b932 <__kernel_rem_pio2f+0x1e6>
 800ba98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba9c:	aa08      	add	r2, sp, #32
 800ba9e:	ee10 3a10 	vmov	r3, s0
 800baa2:	e7f6      	b.n	800ba92 <__kernel_rem_pio2f+0x346>
 800baa4:	a808      	add	r0, sp, #32
 800baa6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800baaa:	9001      	str	r0, [sp, #4]
 800baac:	ee07 0a90 	vmov	s15, r0
 800bab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bab4:	3b01      	subs	r3, #1
 800bab6:	ee67 7a80 	vmul.f32	s15, s15, s0
 800baba:	ee20 0a07 	vmul.f32	s0, s0, s14
 800babe:	ed62 7a01 	vstmdb	r2!, {s15}
 800bac2:	e743      	b.n	800b94c <__kernel_rem_pio2f+0x200>
 800bac4:	ecfc 6a01 	vldmia	ip!, {s13}
 800bac8:	ecb5 7a01 	vldmia	r5!, {s14}
 800bacc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bad0:	3001      	adds	r0, #1
 800bad2:	4550      	cmp	r0, sl
 800bad4:	dc01      	bgt.n	800bada <__kernel_rem_pio2f+0x38e>
 800bad6:	4290      	cmp	r0, r2
 800bad8:	ddf4      	ble.n	800bac4 <__kernel_rem_pio2f+0x378>
 800bada:	a858      	add	r0, sp, #352	@ 0x160
 800badc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800bae0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800bae4:	3b01      	subs	r3, #1
 800bae6:	e735      	b.n	800b954 <__kernel_rem_pio2f+0x208>
 800bae8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800baea:	2b02      	cmp	r3, #2
 800baec:	dc09      	bgt.n	800bb02 <__kernel_rem_pio2f+0x3b6>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	dc27      	bgt.n	800bb42 <__kernel_rem_pio2f+0x3f6>
 800baf2:	d040      	beq.n	800bb76 <__kernel_rem_pio2f+0x42a>
 800baf4:	f009 0007 	and.w	r0, r9, #7
 800baf8:	b059      	add	sp, #356	@ 0x164
 800bafa:	ecbd 8b04 	vpop	{d8-d9}
 800bafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb02:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800bb04:	2b03      	cmp	r3, #3
 800bb06:	d1f5      	bne.n	800baf4 <__kernel_rem_pio2f+0x3a8>
 800bb08:	aa30      	add	r2, sp, #192	@ 0xc0
 800bb0a:	1f0b      	subs	r3, r1, #4
 800bb0c:	4413      	add	r3, r2
 800bb0e:	461a      	mov	r2, r3
 800bb10:	4620      	mov	r0, r4
 800bb12:	2800      	cmp	r0, #0
 800bb14:	dc50      	bgt.n	800bbb8 <__kernel_rem_pio2f+0x46c>
 800bb16:	4622      	mov	r2, r4
 800bb18:	2a01      	cmp	r2, #1
 800bb1a:	dc5d      	bgt.n	800bbd8 <__kernel_rem_pio2f+0x48c>
 800bb1c:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb1e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800bb22:	440b      	add	r3, r1
 800bb24:	2c01      	cmp	r4, #1
 800bb26:	dc67      	bgt.n	800bbf8 <__kernel_rem_pio2f+0x4ac>
 800bb28:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800bb2c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800bb30:	2e00      	cmp	r6, #0
 800bb32:	d167      	bne.n	800bc04 <__kernel_rem_pio2f+0x4b8>
 800bb34:	edc7 6a00 	vstr	s13, [r7]
 800bb38:	ed87 7a01 	vstr	s14, [r7, #4]
 800bb3c:	edc7 7a02 	vstr	s15, [r7, #8]
 800bb40:	e7d8      	b.n	800baf4 <__kernel_rem_pio2f+0x3a8>
 800bb42:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb44:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800bb48:	440b      	add	r3, r1
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	2a00      	cmp	r2, #0
 800bb4e:	da24      	bge.n	800bb9a <__kernel_rem_pio2f+0x44e>
 800bb50:	b34e      	cbz	r6, 800bba6 <__kernel_rem_pio2f+0x45a>
 800bb52:	eef1 7a47 	vneg.f32	s15, s14
 800bb56:	edc7 7a00 	vstr	s15, [r7]
 800bb5a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800bb5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb62:	aa31      	add	r2, sp, #196	@ 0xc4
 800bb64:	2301      	movs	r3, #1
 800bb66:	429c      	cmp	r4, r3
 800bb68:	da20      	bge.n	800bbac <__kernel_rem_pio2f+0x460>
 800bb6a:	b10e      	cbz	r6, 800bb70 <__kernel_rem_pio2f+0x424>
 800bb6c:	eef1 7a67 	vneg.f32	s15, s15
 800bb70:	edc7 7a01 	vstr	s15, [r7, #4]
 800bb74:	e7be      	b.n	800baf4 <__kernel_rem_pio2f+0x3a8>
 800bb76:	ab30      	add	r3, sp, #192	@ 0xc0
 800bb78:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ba44 <__kernel_rem_pio2f+0x2f8>
 800bb7c:	440b      	add	r3, r1
 800bb7e:	2c00      	cmp	r4, #0
 800bb80:	da05      	bge.n	800bb8e <__kernel_rem_pio2f+0x442>
 800bb82:	b10e      	cbz	r6, 800bb88 <__kernel_rem_pio2f+0x43c>
 800bb84:	eef1 7a67 	vneg.f32	s15, s15
 800bb88:	edc7 7a00 	vstr	s15, [r7]
 800bb8c:	e7b2      	b.n	800baf4 <__kernel_rem_pio2f+0x3a8>
 800bb8e:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb92:	3c01      	subs	r4, #1
 800bb94:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb98:	e7f1      	b.n	800bb7e <__kernel_rem_pio2f+0x432>
 800bb9a:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb9e:	3a01      	subs	r2, #1
 800bba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bba4:	e7d2      	b.n	800bb4c <__kernel_rem_pio2f+0x400>
 800bba6:	eef0 7a47 	vmov.f32	s15, s14
 800bbaa:	e7d4      	b.n	800bb56 <__kernel_rem_pio2f+0x40a>
 800bbac:	ecb2 7a01 	vldmia	r2!, {s14}
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbb6:	e7d6      	b.n	800bb66 <__kernel_rem_pio2f+0x41a>
 800bbb8:	ed72 7a01 	vldmdb	r2!, {s15}
 800bbbc:	edd2 6a01 	vldr	s13, [r2, #4]
 800bbc0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbc4:	3801      	subs	r0, #1
 800bbc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbca:	ed82 7a00 	vstr	s14, [r2]
 800bbce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbd2:	edc2 7a01 	vstr	s15, [r2, #4]
 800bbd6:	e79c      	b.n	800bb12 <__kernel_rem_pio2f+0x3c6>
 800bbd8:	ed73 7a01 	vldmdb	r3!, {s15}
 800bbdc:	edd3 6a01 	vldr	s13, [r3, #4]
 800bbe0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbe4:	3a01      	subs	r2, #1
 800bbe6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbea:	ed83 7a00 	vstr	s14, [r3]
 800bbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbf2:	edc3 7a01 	vstr	s15, [r3, #4]
 800bbf6:	e78f      	b.n	800bb18 <__kernel_rem_pio2f+0x3cc>
 800bbf8:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbfc:	3c01      	subs	r4, #1
 800bbfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc02:	e78f      	b.n	800bb24 <__kernel_rem_pio2f+0x3d8>
 800bc04:	eef1 6a66 	vneg.f32	s13, s13
 800bc08:	eeb1 7a47 	vneg.f32	s14, s14
 800bc0c:	edc7 6a00 	vstr	s13, [r7]
 800bc10:	ed87 7a01 	vstr	s14, [r7, #4]
 800bc14:	eef1 7a67 	vneg.f32	s15, s15
 800bc18:	e790      	b.n	800bb3c <__kernel_rem_pio2f+0x3f0>
 800bc1a:	bf00      	nop

0800bc1c <floorf>:
 800bc1c:	ee10 3a10 	vmov	r3, s0
 800bc20:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc24:	3a7f      	subs	r2, #127	@ 0x7f
 800bc26:	2a16      	cmp	r2, #22
 800bc28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bc2c:	dc2b      	bgt.n	800bc86 <floorf+0x6a>
 800bc2e:	2a00      	cmp	r2, #0
 800bc30:	da12      	bge.n	800bc58 <floorf+0x3c>
 800bc32:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bc98 <floorf+0x7c>
 800bc36:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc42:	dd06      	ble.n	800bc52 <floorf+0x36>
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da24      	bge.n	800bc92 <floorf+0x76>
 800bc48:	2900      	cmp	r1, #0
 800bc4a:	4b14      	ldr	r3, [pc, #80]	@ (800bc9c <floorf+0x80>)
 800bc4c:	bf08      	it	eq
 800bc4e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bc52:	ee00 3a10 	vmov	s0, r3
 800bc56:	4770      	bx	lr
 800bc58:	4911      	ldr	r1, [pc, #68]	@ (800bca0 <floorf+0x84>)
 800bc5a:	4111      	asrs	r1, r2
 800bc5c:	420b      	tst	r3, r1
 800bc5e:	d0fa      	beq.n	800bc56 <floorf+0x3a>
 800bc60:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bc98 <floorf+0x7c>
 800bc64:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bc68:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bc6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc70:	ddef      	ble.n	800bc52 <floorf+0x36>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfbe      	ittt	lt
 800bc76:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bc7a:	fa40 f202 	asrlt.w	r2, r0, r2
 800bc7e:	189b      	addlt	r3, r3, r2
 800bc80:	ea23 0301 	bic.w	r3, r3, r1
 800bc84:	e7e5      	b.n	800bc52 <floorf+0x36>
 800bc86:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bc8a:	d3e4      	bcc.n	800bc56 <floorf+0x3a>
 800bc8c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc90:	4770      	bx	lr
 800bc92:	2300      	movs	r3, #0
 800bc94:	e7dd      	b.n	800bc52 <floorf+0x36>
 800bc96:	bf00      	nop
 800bc98:	7149f2ca 	.word	0x7149f2ca
 800bc9c:	bf800000 	.word	0xbf800000
 800bca0:	007fffff 	.word	0x007fffff

0800bca4 <_init>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	bf00      	nop
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr

0800bcb0 <_fini>:
 800bcb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcb2:	bf00      	nop
 800bcb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcb6:	bc08      	pop	{r3}
 800bcb8:	469e      	mov	lr, r3
 800bcba:	4770      	bx	lr
