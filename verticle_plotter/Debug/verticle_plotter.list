
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010518  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080106f0  080106f0  000116f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010d00  08010d00  00012150  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010d00  08010d00  00011d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010d08  08010d08  00012150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010d08  08010d08  00011d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010d0c  08010d0c  00011d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  08010d10  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e8  20000150  08010e60  00012150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002238  08010e60  00012238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b97f  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053a3  00000000  00000000  0003daff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c20  00000000  00000000  00042ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015cf  00000000  00000000  00044ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d6c9  00000000  00000000  00046097  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f5c  00000000  00000000  00073760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119c0b  00000000  00000000  0009d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b72c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd8  00000000  00000000  001b730c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001bf2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000150 	.word	0x20000150
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080106d8 	.word	0x080106d8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000154 	.word	0x20000154
 8000214:	080106d8 	.word	0x080106d8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f007 fc5c 	bl	800889c <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f006 fd45 	bl	8007a80 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fd4e 	bl	8001bdc <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f001 ff2f 	bl	80031c4 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 f829 	bl	8003410 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 f820 	bl	8003410 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 f80c 	bl	8003410 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 f803 	bl	8003410 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fff1 	bl	8003410 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f001 ffe4 	bl	8003410 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f008 f950 	bl	8009728 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f001 ffbb 	bl	8003410 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f008 f933 	bl	8009728 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 ff9e 	bl	8003410 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f008 f918 	bl	8009728 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f001 ff7f 	bl	8003410 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 facc 	bl	8001bdc <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qdd, float s){
 800167c:	b5b0      	push	{r4, r5, r7, lr}
 800167e:	ed2d 8b02 	vpush	{d8}
 8001682:	b08a      	sub	sp, #40	@ 0x28
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001690:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * s;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	ed93 7a01 	vldr	s14, [r3, #4]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff18 	bl	80004e0 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7fe ff13 	bl	80004e0 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f00d f9ad 	bl	800ea20 <sin>
 80016c6:	ec53 2b10 	vmov	r2, r3, d0
 80016ca:	4620      	mov	r0, r4
 80016cc:	4629      	mov	r1, r5
 80016ce:	f7fe ff5f 	bl	8000590 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	6838      	ldr	r0, [r7, #0]
 80016dc:	f7fe ff00 	bl	80004e0 <__aeabi_f2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff52 	bl	8000590 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff fa2e 	bl	8000b54 <__aeabi_d2f>
 80016f8:	4603      	mov	r3, r0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
    float gravity_compensate_rail = motor->En->plotter_mass * motor->En->g * sin(q) * motor->En->c;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	ed93 7a01 	vldr	s14, [r3, #4]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	ee17 0a90 	vmov	r0, s15
 8001714:	f7fe fee4 	bl	80004e0 <__aeabi_f2d>
 8001718:	4604      	mov	r4, r0
 800171a:	460d      	mov	r5, r1
 800171c:	68b8      	ldr	r0, [r7, #8]
 800171e:	f7fe fedf 	bl	80004e0 <__aeabi_f2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	ec43 2b10 	vmov	d0, r2, r3
 800172a:	f00d f979 	bl	800ea20 <sin>
 800172e:	ec53 2b10 	vmov	r2, r3, d0
 8001732:	4620      	mov	r0, r4
 8001734:	4629      	mov	r1, r5
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fec9 	bl	80004e0 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4620      	mov	r0, r4
 8001754:	4629      	mov	r1, r5
 8001756:	f7fe ff1b 	bl	8000590 <__aeabi_dmul>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7ff f9f7 	bl	8000b54 <__aeabi_d2f>
 8001766:	4603      	mov	r3, r0
 8001768:	623b      	str	r3, [r7, #32]
    float mass_torque = motor->En->plotter_mass * s*s * qdd;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001772:	edd7 7a00 	vldr	s15, [r7]
 8001776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177a:	edd7 7a00 	vldr	s15, [r7]
 800177e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001782:	ed97 7a01 	vldr	s14, [r7, #4]
 8001786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178a:	edc7 7a07 	vstr	s15, [r7, #28]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800179e:	f7ff f821 	bl	80007e4 <__aeabi_ddiv>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f7ff f9d3 	bl	8000b54 <__aeabi_d2f>
 80017ae:	4603      	mov	r3, r0
 80017b0:	61bb      	str	r3, [r7, #24]

    float v = (gravity_compensate_plotter + gravity_compensate_rail + 0) * transfer_function;
 80017b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80017ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017be:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001854 <REVOLUTE_MOTOR_DFD_Compute+0x1d8>
 80017c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80017ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ce:	edc7 7a05 	vstr	s15, [r7, #20]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9b9 	bl	8000b54 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	ee07 3a90 	vmov	s15, r3
 80017e8:	eeb1 8a67 	vneg.f32	s16, s15
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017f4:	4610      	mov	r0, r2
 80017f6:	4619      	mov	r1, r3
 80017f8:	f7ff f9ac 	bl	8000b54 <__aeabi_d2f>
 80017fc:	4604      	mov	r4, r0
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001806:	4610      	mov	r0, r2
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff f9a3 	bl	8000b54 <__aeabi_d2f>
 800180e:	4603      	mov	r3, r0
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef1 8a67 	vneg.f32	s17, s15
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001820:	4610      	mov	r0, r2
 8001822:	4619      	mov	r1, r3
 8001824:	f7ff f996 	bl	8000b54 <__aeabi_d2f>
 8001828:	4603      	mov	r3, r0
 800182a:	ee02 3a10 	vmov	s4, r3
 800182e:	eef0 1a68 	vmov.f32	s3, s17
 8001832:	ee01 4a10 	vmov	s2, r4
 8001836:	eef0 0a48 	vmov.f32	s1, s16
 800183a:	ed97 0a05 	vldr	s0, [r7, #20]
 800183e:	f000 f9cd 	bl	8001bdc <mapf>
 8001842:	eef0 7a40 	vmov.f32	s15, s0
}
 8001846:	eeb0 0a67 	vmov.f32	s0, s15
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	ecbd 8b02 	vpop	{d8}
 8001852:	bdb0      	pop	{r4, r5, r7, pc}
 8001854:	00000000 	.word	0x00000000

08001858 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001874:	b5b0      	push	{r4, r5, r7, lr}
 8001876:	ed2d 8b02 	vpush	{d8}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001894:	f7fe fe7c 	bl	8000590 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018b0:	f7fe fe6e 	bl	8000590 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4620      	mov	r0, r4
 80018ba:	4629      	mov	r1, r5
 80018bc:	f7fe fcb2 	bl	8000224 <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe ff88 	bl	80007e4 <__aeabi_ddiv>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f93a 	bl	8000b54 <__aeabi_d2f>
 80018e0:	4603      	mov	r3, r0
 80018e2:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018e4:	ed97 7a00 	vldr	s14, [r7]
 80018e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	ee07 3a90 	vmov	s15, r3
 800190a:	eeb1 8a67 	vneg.f32	s16, s15
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff f91b 	bl	8000b54 <__aeabi_d2f>
 800191e:	4604      	mov	r4, r0
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f7ff f912 	bl	8000b54 <__aeabi_d2f>
 8001930:	4603      	mov	r3, r0
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef1 8a67 	vneg.f32	s17, s15
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f905 	bl	8000b54 <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	ee02 3a10 	vmov	s4, r3
 8001950:	eef0 1a68 	vmov.f32	s3, s17
 8001954:	ee01 4a10 	vmov	s2, r4
 8001958:	eef0 0a48 	vmov.f32	s1, s16
 800195c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001960:	f000 f93c 	bl	8001bdc <mapf>
 8001964:	eef0 7a40 	vmov.f32	s15, s0
}
 8001968:	eeb0 0a67 	vmov.f32	s0, s15
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	ecbd 8b02 	vpop	{d8}
 8001974:	bdb0      	pop	{r4, r5, r7, pc}

08001976 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001976:	b480      	push	{r7}
 8001978:	b085      	sub	sp, #20
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	605a      	str	r2, [r3, #4]
}
 800198e:	bf00      	nop
 8001990:	3714      	adds	r7, #20
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 800199c:	b580      	push	{r7, lr}
 800199e:	ed2d 8b02 	vpush	{d8}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	460b      	mov	r3, r1
 80019aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80019ae:	edc7 0a00 	vstr	s1, [r7]
 80019b2:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80019b4:	897b      	ldrh	r3, [r7, #10]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d102      	bne.n	80019c6 <FIR_init+0x2a>
        numTaps += 1;
 80019c0:	897b      	ldrh	r3, [r7, #10]
 80019c2:	3301      	adds	r3, #1
 80019c4:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	897a      	ldrh	r2, [r7, #10]
 80019ca:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80019d2:	897b      	ldrh	r3, [r7, #10]
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f00c ff18 	bl	800e80c <malloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80019e4:	897b      	ldrh	r3, [r7, #10]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00c ff0f 	bl	800e80c <malloc>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80e0 	beq.w	8001bc0 <FIR_init+0x224>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80db 	beq.w	8001bc0 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a0e:	e00a      	b.n	8001a26 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	f04f 0200 	mov.w	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001a20:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a22:	3301      	adds	r3, #1
 8001a24:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001a26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001a28:	897b      	ldrh	r3, [r7, #10]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d3f0      	bcc.n	8001a10 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001a2e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a32:	ed97 7a00 	vldr	s14, [r7]
 8001a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3a:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001a3e:	897b      	ldrh	r3, [r7, #10]
 8001a40:	085b      	lsrs	r3, r3, #1
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a4a:	e077      	b.n	8001b3c <FIR_init+0x1a0>
            if (i == half_taps) {
 8001a4c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001a50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d10c      	bne.n	8001a72 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a6c:	edc3 7a00 	vstr	s15, [r3]
 8001a70:	e02c      	b.n	8001acc <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001a72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a74:	8afb      	ldrh	r3, [r7, #22]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001a7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a80:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001bcc <FIR_init+0x230>
 8001a84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	eeb0 0a67 	vmov.f32	s0, s15
 8001a9c:	f00d f896 	bl	800ebcc <sinf>
 8001aa0:	eef0 6a40 	vmov.f32	s13, s0
 8001aa4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001bd0 <FIR_init+0x234>
 8001ab4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	ed93 8a00 	vldr	s16, [r3]
 8001adc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001bcc <FIR_init+0x230>
 8001aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001af0:	897b      	ldrh	r3, [r7, #10]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	ee07 3a90 	vmov	s15, r3
 8001af8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001afc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b00:	eeb0 0a66 	vmov.f32	s0, s13
 8001b04:	f00d f81e 	bl	800eb44 <cosf>
 8001b08:	eef0 7a40 	vmov.f32	s15, s0
 8001b0c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001bd4 <FIR_init+0x238>
 8001b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b14:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001bd8 <FIR_init+0x23c>
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001b30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b3c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001b40:	897b      	ldrh	r3, [r7, #10]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	db82      	blt.n	8001a4c <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	83fb      	strh	r3, [r7, #30]
 8001b50:	e00f      	b.n	8001b72 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	8bfb      	ldrh	r3, [r7, #30]
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b68:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b6c:	8bfb      	ldrh	r3, [r7, #30]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	83fb      	strh	r3, [r7, #30]
 8001b72:	8bfa      	ldrh	r2, [r7, #30]
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3eb      	bcc.n	8001b52 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001b7a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d01b      	beq.n	8001bc0 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001b88:	2300      	movs	r3, #0
 8001b8a:	83bb      	strh	r3, [r7, #28]
 8001b8c:	e014      	b.n	8001bb8 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	8bbb      	ldrh	r3, [r7, #28]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	edd3 6a00 	vldr	s13, [r3]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	8bbb      	ldrh	r3, [r7, #28]
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bae:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001bb2:	8bbb      	ldrh	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	83bb      	strh	r3, [r7, #28]
 8001bb8:	8bba      	ldrh	r2, [r7, #28]
 8001bba:	897b      	ldrh	r3, [r7, #10]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d3e6      	bcc.n	8001b8e <FIR_init+0x1f2>
            }
        }
    }
}
 8001bc0:	bf00      	nop
 8001bc2:	3728      	adds	r7, #40	@ 0x28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	ecbd 8b02 	vpop	{d8}
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40c90fdb 	.word	0x40c90fdb
 8001bd0:	40490fdb 	.word	0x40490fdb
 8001bd4:	3eeb851f 	.word	0x3eeb851f
 8001bd8:	3f0a3d71 	.word	0x3f0a3d71

08001bdc <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	@ 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a05 	vstr	s0, [r7, #20]
 8001be6:	edc7 0a04 	vstr	s1, [r7, #16]
 8001bea:	ed87 1a03 	vstr	s2, [r7, #12]
 8001bee:	edc7 1a02 	vstr	s3, [r7, #8]
 8001bf2:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001bf6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bfe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c02:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c06:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c12:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001c16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c22:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c32:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	ee07 3a90 	vmov	s15, r3
}
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	3724      	adds	r7, #36	@ 0x24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001c50:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <modbus_1t5_Timeout+0x3c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <modbus_1t5_Timeout+0x3c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <modbus_1t5_Timeout+0x3c>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <modbus_1t5_Timeout+0x3c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0201 	orr.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2000016c 	.word	0x2000016c

08001c8c <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <modbus_3t5_Timeout+0x1c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	755a      	strb	r2, [r3, #21]

}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	2000016c 	.word	0x2000016c

08001cac <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f00b fbe1 	bl	800d47c <HAL_UART_GetError>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b20      	cmp	r3, #32
 8001cbe:	d101      	bne.n	8001cc4 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001cc0:	f7ff ffc4 	bl	8001c4c <modbus_1t5_Timeout>

	}
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	60f8      	str	r0, [r7, #12]
 8001cd4:	60b9      	str	r1, [r7, #8]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001cda:	4a2d      	ldr	r2, [pc, #180]	@ (8001d90 <Modbus_init+0xc4>)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8001d90 <Modbus_init+0xc4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001ce8:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <Modbus_init+0xc4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001cf0:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <Modbus_init+0xc4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <Modbus_init+0xc4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	7e3a      	ldrb	r2, [r7, #24]
 8001cfe:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001d00:	4b23      	ldr	r3, [pc, #140]	@ (8001d90 <Modbus_init+0xc4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <Modbus_init+0xc8>)
 8001d0e:	210e      	movs	r1, #14
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 fe61 	bl	800b9d8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00b fb57 	bl	800d3d0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00b fb6e 	bl	800d408 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <Modbus_init+0xcc>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a fe9f 	bl	800ca78 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <Modbus_init+0xc4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <Modbus_init+0xc4>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <Modbus_init+0xc4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001d4c:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001d50:	4413      	add	r3, r2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f00a ff47 	bl	800cbec <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d90 <Modbus_init+0xc4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d10c      	bne.n	8001d88 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001d6e:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <Modbus_init+0xc4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f008 fe0b 	bl	800a990 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001d7a:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <Modbus_init+0xc4>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	691b      	ldr	r3, [r3, #16]
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f009 f85a 	bl	800ae3c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	2000016c 	.word	0x2000016c
 8001d94:	08001c8d 	.word	0x08001c8d
 8001d98:	08001cad 	.word	0x08001cad

08001d9c <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6278      	str	r0, [r7, #36]	@ 0x24
 8001da4:	ed87 0a08 	vstr	s0, [r7, #32]
 8001da8:	edc7 0a07 	vstr	s1, [r7, #28]
 8001dac:	ed87 1a06 	vstr	s2, [r7, #24]
 8001db0:	edc7 1a05 	vstr	s3, [r7, #20]
 8001db4:	ed87 2a04 	vstr	s4, [r7, #16]
 8001db8:	edc7 2a03 	vstr	s5, [r7, #12]
 8001dbc:	ed87 3a02 	vstr	s6, [r7, #8]
 8001dc0:	edc7 3a01 	vstr	s7, [r7, #4]
 8001dc4:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	6a3a      	ldr	r2, [r7, #32]
 8001dcc:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	69fa      	ldr	r2, [r7, #28]
 8001dd4:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	2210      	movs	r2, #16
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00c fdb6 	bl	800e978 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0e:	3310      	adds	r3, #16
 8001e10:	2240      	movs	r2, #64	@ 0x40
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00c fdaf 	bl	800e978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e1e:	e00c      	b.n	8001e3a <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e2a:	3304      	adds	r3, #4
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a79      	ldr	r2, [pc, #484]	@ (8002018 <MotorKalman_Init+0x27c>)
 8001e32:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e36:	3301      	adds	r3, #1
 8001e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	ddef      	ble.n	8001e20 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001e46:	2240      	movs	r2, #64	@ 0x40
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f00c fd94 	bl	800e978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e54:	e00d      	b.n	8001e72 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e60:	33be      	adds	r3, #190	@ 0xbe
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e6a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6e:	3301      	adds	r3, #1
 8001e70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	ddee      	ble.n	8001e56 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7a:	33f0      	adds	r3, #240	@ 0xf0
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f00c fd79 	bl	800e978 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e8c:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001e96:	2210      	movs	r2, #16
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00c fd6c 	bl	800e978 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ea6:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001eaa:	ed97 0a01 	vldr	s0, [r7, #4]
 8001eae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eb0:	f000 f922 	bl	80020f8 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001eb4:	ed97 0a00 	vldr	s0, [r7]
 8001eb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eba:	f000 f94d 	bl	8002158 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	2104      	movs	r1, #4
 8001eca:	f00c fbd6 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed0:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	3310      	adds	r3, #16
 8001ed8:	2204      	movs	r2, #4
 8001eda:	2104      	movs	r1, #4
 8001edc:	f00c fbcd 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee2:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001eec:	2204      	movs	r2, #4
 8001eee:	2104      	movs	r1, #4
 8001ef0:	f00c fbc3 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001f00:	2201      	movs	r2, #1
 8001f02:	2101      	movs	r1, #1
 8001f04:	f00c fbb9 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001f14:	2201      	movs	r2, #1
 8001f16:	2101      	movs	r1, #1
 8001f18:	f00c fbaf 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	f00c fba5 	bl	800e67a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f32:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	2104      	movs	r1, #4
 8001f40:	f00c fb9b 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4c:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001f50:	2201      	movs	r2, #1
 8001f52:	2104      	movs	r1, #4
 8001f54:	f00c fb91 	bl	800e67a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5a:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f64:	2201      	movs	r2, #1
 8001f66:	2104      	movs	r1, #4
 8001f68:	f00c fb87 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8001f78:	2204      	movs	r2, #4
 8001f7a:	2104      	movs	r1, #4
 8001f7c:	f00c fb7d 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	2101      	movs	r1, #1
 8001f90:	f00c fb73 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	f00c fb69 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2104      	movs	r1, #4
 8001fb8:	f00c fb5f 	bl	800e67a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8001fbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fbe:	f000 f82d 	bl	800201c <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3390      	adds	r3, #144	@ 0x90
 8001fcc:	2204      	movs	r2, #4
 8001fce:	2104      	movs	r1, #4
 8001fd0:	f00c fb53 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	33e0      	adds	r3, #224	@ 0xe0
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	f00c fb4a 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe8:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	2104      	movs	r1, #4
 8001ff6:	f00c fb40 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8002006:	2201      	movs	r2, #1
 8002008:	2104      	movs	r1, #4
 800200a:	f00c fb36 	bl	800e67a <arm_mat_init_f32>
}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	42c80000 	.word	0x42c80000

0800201c <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	eeb0 3a64 	vmov.f32	s6, s9
 8002060:	eef0 2a45 	vmov.f32	s5, s10
 8002064:	eeb0 2a65 	vmov.f32	s4, s11
 8002068:	eef0 1a46 	vmov.f32	s3, s12
 800206c:	eeb0 1a66 	vmov.f32	s2, s13
 8002070:	eef0 0a47 	vmov.f32	s1, s14
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	f001 f83c 	bl	80030f4 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002082:	2240      	movs	r2, #64	@ 0x40
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f00c fc76 	bl	800e978 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002092:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80020f0 <MotorKalman_DiscretizeModel+0xd4>
 8002096:	ee27 7a87 	vmul.f32	s14, s15, s14
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80020a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80020b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80020c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80020f4 <MotorKalman_DiscretizeModel+0xd8>
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80020da:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80020f0 <MotorKalman_DiscretizeModel+0xd4>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80020e8:	bf00      	nop
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	3c23d70a 	.word	0x3c23d70a
 80020f4:	3dcccccd 	.word	0x3dcccccd

080020f8 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800210a:	2240      	movs	r2, #64	@ 0x40
 800210c:	2100      	movs	r1, #0
 800210e:	4618      	mov	r0, r3
 8002110:	f00c fc32 	bl	800e978 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002114:	edd7 7a00 	vldr	s15, [r7]
 8002118:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002130:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	d107      	bne.n	800214a <MotorKalman_SetProcessNoise+0x52>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d002      	beq.n	8002150 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff66 	bl	800201c <MotorKalman_DiscretizeModel>
    }
}
 8002150:	bf00      	nop
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002164:	ed97 0a00 	vldr	s0, [r7]
 8002168:	f00c fcce 	bl	800eb08 <sqrtf>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002186:	b580      	push	{r7, lr}
 8002188:	b0b2      	sub	sp, #200	@ 0xc8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800219a:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80021ae:	e041      	b.n	8002234 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80021b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	33c8      	adds	r3, #200	@ 0xc8
 80021b8:	443b      	add	r3, r7
 80021ba:	3b3c      	subs	r3, #60	@ 0x3c
 80021bc:	f04f 0200 	mov.w	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021c8:	e02b      	b.n	8002222 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 80021ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	33c8      	adds	r3, #200	@ 0xc8
 80021d2:	443b      	add	r3, r7
 80021d4:	3b3c      	subs	r3, #60	@ 0x3c
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021de:	009a      	lsls	r2, r3, #2
 80021e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021e4:	4413      	add	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	3324      	adds	r3, #36	@ 0x24
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	edd3 6a00 	vldr	s13, [r3]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	33c8      	adds	r3, #200	@ 0xc8
 8002210:	443b      	add	r3, r7
 8002212:	3b3c      	subs	r3, #60	@ 0x3c
 8002214:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002218:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800221c:	3301      	adds	r3, #1
 800221e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002226:	2b03      	cmp	r3, #3
 8002228:	ddcf      	ble.n	80021ca <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800222a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800222e:	3301      	adds	r3, #1
 8002230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002234:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002238:	2b03      	cmp	r3, #3
 800223a:	ddb9      	ble.n	80021b0 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800223c:	2300      	movs	r3, #0
 800223e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002242:	e021      	b.n	8002288 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002244:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	33c8      	adds	r3, #200	@ 0xc8
 800224c:	443b      	add	r3, r7
 800224e:	3b3c      	subs	r3, #60	@ 0x3c
 8002250:	ed93 7a00 	vldr	s14, [r3]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800225a:	3338      	adds	r3, #56	@ 0x38
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	edd3 6a00 	vldr	s13, [r3]
 8002264:	edd7 7a00 	vldr	s15, [r7]
 8002268:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800227e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002282:	3301      	adds	r3, #1
 8002284:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228c:	2b03      	cmp	r3, #3
 800228e:	ddd9      	ble.n	8002244 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002290:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002294:	2240      	movs	r2, #64	@ 0x40
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f00c fb6d 	bl	800e978 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800229e:	f107 030c 	add.w	r3, r7, #12
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00c fb66 	bl	800e978 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022b2:	e05f      	b.n	8002374 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80022b4:	2300      	movs	r3, #0
 80022b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ba:	e052      	b.n	8002362 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80022bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022c0:	009a      	lsls	r2, r3, #2
 80022c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	33c8      	adds	r3, #200	@ 0xc8
 80022cc:	443b      	add	r3, r7
 80022ce:	3b7c      	subs	r3, #124	@ 0x7c
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022dc:	e038      	b.n	8002350 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80022de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022e2:	009a      	lsls	r2, r3, #2
 80022e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	33c8      	adds	r3, #200	@ 0xc8
 80022ee:	443b      	add	r3, r7
 80022f0:	3b7c      	subs	r3, #124	@ 0x7c
 80022f2:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 80022f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002300:	4413      	add	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	3324      	adds	r3, #36	@ 0x24
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	edd3 6a00 	vldr	s13, [r3]
 800230e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002312:	009a      	lsls	r2, r3, #2
 8002314:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002318:	4413      	add	r3, r2
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4413      	add	r3, r2
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800232a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800232e:	009a      	lsls	r2, r3, #2
 8002330:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002334:	4413      	add	r3, r2
 8002336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	33c8      	adds	r3, #200	@ 0xc8
 800233e:	443b      	add	r3, r7
 8002340:	3b7c      	subs	r3, #124	@ 0x7c
 8002342:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002346:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800234a:	3301      	adds	r3, #1
 800234c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002350:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002354:	2b03      	cmp	r3, #3
 8002356:	ddc2      	ble.n	80022de <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002358:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800235c:	3301      	adds	r3, #1
 800235e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002362:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002366:	2b03      	cmp	r3, #3
 8002368:	dda8      	ble.n	80022bc <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800236a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800236e:	3301      	adds	r3, #1
 8002370:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002374:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002378:	2b03      	cmp	r3, #3
 800237a:	dd9b      	ble.n	80022b4 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800237c:	2300      	movs	r3, #0
 800237e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002382:	e05f      	b.n	8002444 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800238a:	e052      	b.n	8002432 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 800238c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002390:	009a      	lsls	r2, r3, #2
 8002392:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	33c8      	adds	r3, #200	@ 0xc8
 800239c:	443b      	add	r3, r7
 800239e:	3bbc      	subs	r3, #188	@ 0xbc
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80023ac:	e038      	b.n	8002420 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80023ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023b2:	009a      	lsls	r2, r3, #2
 80023b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	33c8      	adds	r3, #200	@ 0xc8
 80023be:	443b      	add	r3, r7
 80023c0:	3bbc      	subs	r3, #188	@ 0xbc
 80023c2:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 80023c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ca:	009a      	lsls	r2, r3, #2
 80023cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	33c8      	adds	r3, #200	@ 0xc8
 80023d6:	443b      	add	r3, r7
 80023d8:	3b7c      	subs	r3, #124	@ 0x7c
 80023da:	edd3 6a00 	vldr	s13, [r3]
 80023de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80023e2:	009a      	lsls	r2, r3, #2
 80023e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023e8:	4413      	add	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	3324      	adds	r3, #36	@ 0x24
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80023fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023fe:	009a      	lsls	r2, r3, #2
 8002400:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002404:	4413      	add	r3, r2
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	33c8      	adds	r3, #200	@ 0xc8
 800240e:	443b      	add	r3, r7
 8002410:	3bbc      	subs	r3, #188	@ 0xbc
 8002412:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002416:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800241a:	3301      	adds	r3, #1
 800241c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002420:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002424:	2b03      	cmp	r3, #3
 8002426:	ddc2      	ble.n	80023ae <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002428:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800242c:	3301      	adds	r3, #1
 800242e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002436:	2b03      	cmp	r3, #3
 8002438:	dda8      	ble.n	800238c <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800243a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800243e:	3301      	adds	r3, #1
 8002440:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002448:	2b03      	cmp	r3, #3
 800244a:	dd9b      	ble.n	8002384 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002452:	e037      	b.n	80024c4 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800245a:	e02a      	b.n	80024b2 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 800245c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002460:	009a      	lsls	r2, r3, #2
 8002462:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002466:	4413      	add	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	33c8      	adds	r3, #200	@ 0xc8
 800246c:	443b      	add	r3, r7
 800246e:	3bbc      	subs	r3, #188	@ 0xbc
 8002470:	ed93 7a00 	vldr	s14, [r3]
 8002474:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002478:	009a      	lsls	r2, r3, #2
 800247a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800247e:	4413      	add	r3, r2
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	3354      	adds	r3, #84	@ 0x54
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 800248c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002490:	009a      	lsls	r2, r3, #2
 8002492:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002496:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	3304      	adds	r3, #4
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024ac:	3301      	adds	r3, #1
 80024ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80024b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	ddd0      	ble.n	800245c <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024be:	3301      	adds	r3, #1
 80024c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80024c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80024c8:	2b03      	cmp	r3, #3
 80024ca:	ddc3      	ble.n	8002454 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	2104      	movs	r1, #4
 8002500:	f00c f8bb 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3310      	adds	r3, #16
 800250e:	2204      	movs	r2, #4
 8002510:	2104      	movs	r1, #4
 8002512:	f00c f8b2 	bl	800e67a <arm_mat_init_f32>
}
 8002516:	bf00      	nop
 8002518:	37c8      	adds	r7, #200	@ 0xc8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b0d0      	sub	sp, #320	@ 0x140
 8002524:	af00      	add	r7, sp, #0
 8002526:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800252a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800252e:	6018      	str	r0, [r3, #0]
 8002530:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002534:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002538:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 800253c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002540:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800254a:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002554:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002558:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002562:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002566:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002574:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002578:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002582:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002586:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002594:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002598:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800259c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80025a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80025b8:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80025bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 80025ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80025d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80025dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e0:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 80025e4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80025e8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025ec:	ed93 7a00 	vldr	s14, [r3]
 80025f0:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 80025f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f8:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 80025fc:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800260a:	2300      	movs	r3, #0
 800260c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002610:	e04d      	b.n	80026ae <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002612:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800261c:	443b      	add	r3, r7
 800261e:	3b58      	subs	r3, #88	@ 0x58
 8002620:	f04f 0200 	mov.w	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002626:	2300      	movs	r3, #0
 8002628:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800262c:	e036      	b.n	800269c <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 800262e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002638:	443b      	add	r3, r7
 800263a:	3b58      	subs	r3, #88	@ 0x58
 800263c:	ed93 7a00 	vldr	s14, [r3]
 8002640:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002644:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800264e:	333c      	adds	r3, #60	@ 0x3c
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	edd3 6a00 	vldr	s13, [r3]
 8002658:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800265c:	009a      	lsls	r2, r3, #2
 800265e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002662:	4413      	add	r3, r2
 8002664:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002668:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	3304      	adds	r3, #4
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	edd3 7a00 	vldr	s15, [r3]
 8002678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800268a:	443b      	add	r3, r7
 800268c:	3b58      	subs	r3, #88	@ 0x58
 800268e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002692:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002696:	3301      	adds	r3, #1
 8002698:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800269c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	ddc4      	ble.n	800262e <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026a8:	3301      	adds	r3, #1
 80026aa:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80026ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	ddad      	ble.n	8002612 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80026c4:	e021      	b.n	800270a <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80026c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80026d0:	443b      	add	r3, r7
 80026d2:	3b58      	subs	r3, #88	@ 0x58
 80026d4:	ed93 7a00 	vldr	s14, [r3]
 80026d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80026dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80026e6:	333c      	adds	r3, #60	@ 0x3c
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80026f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026fc:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002700:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002704:	3301      	adds	r3, #1
 8002706:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800270a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800270e:	2b03      	cmp	r3, #3
 8002710:	ddd9      	ble.n	80026c6 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002712:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002716:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002720:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002728:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 800272c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800273a:	2300      	movs	r3, #0
 800273c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002740:	e04d      	b.n	80027de <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002742:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800274c:	443b      	add	r3, r7
 800274e:	3b68      	subs	r3, #104	@ 0x68
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800275c:	e036      	b.n	80027cc <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 800275e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002768:	443b      	add	r3, r7
 800276a:	3b68      	subs	r3, #104	@ 0x68
 800276c:	ed93 7a00 	vldr	s14, [r3]
 8002770:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002774:	009a      	lsls	r2, r3, #2
 8002776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800277a:	4413      	add	r3, r2
 800277c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002780:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	3304      	adds	r3, #4
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	edd3 6a00 	vldr	s13, [r3]
 8002790:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002794:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800279e:	333c      	adds	r3, #60	@ 0x3c
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027ba:	443b      	add	r3, r7
 80027bc:	3b68      	subs	r3, #104	@ 0x68
 80027be:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80027c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027c6:	3301      	adds	r3, #1
 80027c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80027cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	ddc4      	ble.n	800275e <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027d8:	3301      	adds	r3, #1
 80027da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80027de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	ddad      	ble.n	8002742 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 80027e6:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80027f4:	2300      	movs	r3, #0
 80027f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80027fa:	e01a      	b.n	8002832 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 80027fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002806:	443b      	add	r3, r7
 8002808:	3b68      	subs	r3, #104	@ 0x68
 800280a:	edd3 6a00 	vldr	s13, [r3]
 800280e:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002816:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002820:	443b      	add	r3, r7
 8002822:	3b78      	subs	r3, #120	@ 0x78
 8002824:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002828:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800282c:	3301      	adds	r3, #1
 800282e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002832:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002836:	2b03      	cmp	r3, #3
 8002838:	dde0      	ble.n	80027fc <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800283a:	2300      	movs	r3, #0
 800283c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002840:	e029      	b.n	8002896 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002842:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002846:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	ed93 7a00 	vldr	s14, [r3]
 8002858:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002862:	443b      	add	r3, r7
 8002864:	3b78      	subs	r3, #120	@ 0x78
 8002866:	edd3 6a00 	vldr	s13, [r3]
 800286a:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800286e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002876:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800287a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800288c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002890:	3301      	adds	r3, #1
 8002892:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002896:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800289a:	2b03      	cmp	r3, #3
 800289c:	ddd1      	ble.n	8002842 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800289e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80028a2:	2240      	movs	r2, #64	@ 0x40
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f00c f866 	bl	800e978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028ac:	2300      	movs	r3, #0
 80028ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80028b2:	e035      	b.n	8002920 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80028ba:	e028      	b.n	800290e <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 80028bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028c6:	443b      	add	r3, r7
 80028c8:	3b78      	subs	r3, #120	@ 0x78
 80028ca:	ed93 7a00 	vldr	s14, [r3]
 80028ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80028dc:	333c      	adds	r3, #60	@ 0x3c
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ea:	009a      	lsls	r2, r3, #2
 80028ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80028f0:	4413      	add	r3, r2
 80028f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028fc:	443b      	add	r3, r7
 80028fe:	3bb8      	subs	r3, #184	@ 0xb8
 8002900:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002904:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002908:	3301      	adds	r3, #1
 800290a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800290e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002912:	2b03      	cmp	r3, #3
 8002914:	ddd2      	ble.n	80028bc <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800291a:	3301      	adds	r3, #1
 800291c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002920:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002924:	2b03      	cmp	r3, #3
 8002926:	ddc5      	ble.n	80028b4 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002928:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800292c:	2240      	movs	r2, #64	@ 0x40
 800292e:	2100      	movs	r1, #0
 8002930:	4618      	mov	r0, r3
 8002932:	f00c f821 	bl	800e978 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002936:	2300      	movs	r3, #0
 8002938:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800293c:	e038      	b.n	80029b0 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002944:	e02b      	b.n	800299e <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002946:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800294a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800294e:	429a      	cmp	r2, r3
 8002950:	d102      	bne.n	8002958 <MotorKalman_Update+0x438>
 8002952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002956:	e001      	b.n	800295c <MotorKalman_Update+0x43c>
 8002958:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002b74 <MotorKalman_Update+0x654>
 800295c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002960:	009a      	lsls	r2, r3, #2
 8002962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800296e:	443b      	add	r3, r7
 8002970:	3bb8      	subs	r3, #184	@ 0xb8
 8002972:	edd3 7a00 	vldr	s15, [r3]
 8002976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002980:	4413      	add	r3, r2
 8002982:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800298c:	443b      	add	r3, r7
 800298e:	3bf8      	subs	r3, #248	@ 0xf8
 8002990:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002994:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002998:	3301      	adds	r3, #1
 800299a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800299e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	ddcf      	ble.n	8002946 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029aa:	3301      	adds	r3, #1
 80029ac:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80029b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	ddc2      	ble.n	800293e <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 80029b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029bc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f103 0110 	add.w	r1, r3, #16
 80029c6:	f107 0308 	add.w	r3, r7, #8
 80029ca:	2240      	movs	r2, #64	@ 0x40
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00c f817 	bl	800ea00 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80029d8:	e06e      	b.n	8002ab8 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80029e0:	e061      	b.n	8002aa6 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80029e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80029e6:	009a      	lsls	r2, r3, #2
 80029e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80029ec:	4413      	add	r3, r2
 80029ee:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80029f2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	3304      	adds	r3, #4
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a0a:	e043      	b.n	8002a94 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a10:	009a      	lsls	r2, r3, #2
 8002a12:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a16:	4413      	add	r3, r2
 8002a18:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002a1c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	3304      	adds	r3, #4
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a30:	009a      	lsls	r2, r3, #2
 8002a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a3e:	443b      	add	r3, r7
 8002a40:	3bf8      	subs	r3, #248	@ 0xf8
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a4a:	009a      	lsls	r2, r3, #2
 8002a4c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a50:	4413      	add	r3, r2
 8002a52:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002a56:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002a6a:	009a      	lsls	r2, r3, #2
 8002a6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002a70:	4413      	add	r3, r2
 8002a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a76:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002a7a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	3304      	adds	r3, #4
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	ddb7      	ble.n	8002a0c <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002aa6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	dd99      	ble.n	80029e2 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	dd8c      	ble.n	80029da <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002ac0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ac4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ad0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002ada:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ade:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002aea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002af4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002af8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b04:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002b0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b12:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b1e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002b28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b2c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002b36:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b3a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	2104      	movs	r1, #4
 8002b44:	f00b fd99 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002b48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002b56:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b5a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3310      	adds	r3, #16
 8002b62:	2204      	movs	r2, #4
 8002b64:	2104      	movs	r1, #4
 8002b66:	f00b fd88 	bl	800e67a <arm_mat_init_f32>
}
 8002b6a:	bf00      	nop
 8002b6c:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	00000000 	.word	0x00000000

08002b78 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b84:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002b88:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f7ff fafa 	bl	8002186 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002b92:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff fcc2 	bl	8002520 <MotorKalman_Update>

    return filter->velocity;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002ba2:	ee07 3a90 	vmov	s15, r3
}
 8002ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002bb0:	b480      	push	{r7}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	e00c      	b.n	8002bdc <matrix_copy+0x2c>
        dst[i] = src[i];
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	441a      	add	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	68b9      	ldr	r1, [r7, #8]
 8002bd0:	440b      	add	r3, r1
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbee      	blt.n	8002bc2 <matrix_copy+0x12>
    }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	371c      	adds	r7, #28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002c00:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002c04:	6020      	str	r0, [r4, #0]
 8002c06:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002c0a:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002c0e:	6001      	str	r1, [r0, #0]
 8002c10:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002c14:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002c18:	ed81 0a00 	vstr	s0, [r1]
 8002c1c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002c20:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002c24:	600a      	str	r2, [r1, #0]
 8002c26:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002c2a:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002c2e:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002c30:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c34:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002c38:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	2104      	movs	r1, #4
 8002c42:	f00b fd1a 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002c46:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c4a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002c4e:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2204      	movs	r2, #4
 8002c56:	2104      	movs	r1, #4
 8002c58:	f00b fd0f 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002c5c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c60:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002c64:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	2104      	movs	r1, #4
 8002c6e:	f00b fd04 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002c72:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c76:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c7a:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	f00b fcf9 	bl	800e67a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002c88:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002c8c:	2240      	movs	r2, #64	@ 0x40
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00b fe71 	bl	800e978 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002c96:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002c9a:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	2104      	movs	r1, #4
 8002ca2:	f00b fcea 	bl	800e67a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002cac:	e011      	b.n	8002cd2 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002cae:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002cbe:	443b      	add	r3, r7
 8002cc0:	3b6c      	subs	r3, #108	@ 0x6c
 8002cc2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cc6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002cc8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002cd2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	dde9      	ble.n	8002cae <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002cda:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002cde:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	2104      	movs	r1, #4
 8002ce6:	f00b fcc8 	bl	800e67a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002cea:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002cee:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002cf2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002cf6:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002cfa:	ed93 0a00 	vldr	s0, [r3]
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f00b fd4d 	bl	800e79e <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002d04:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d08:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d0c:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002d10:	2210      	movs	r2, #16
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	f7ff ff4c 	bl	8002bb0 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002d18:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002d1c:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002d20:	2204      	movs	r2, #4
 8002d22:	2104      	movs	r1, #4
 8002d24:	f00b fca9 	bl	800e67a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002d28:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002d2c:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002d30:	2204      	movs	r2, #4
 8002d32:	2104      	movs	r1, #4
 8002d34:	f00b fca1 	bl	800e67a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002d38:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002d3c:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002d40:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002d44:	4618      	mov	r0, r3
 8002d46:	f00b fc5d 	bl	800e604 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002d4a:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002d4e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002d52:	2210      	movs	r2, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff2b 	bl	8002bb0 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002d5a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d5e:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002d62:	2302      	movs	r3, #2
 8002d64:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002d68:	e03a      	b.n	8002de0 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002d6a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d76:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7e:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002d82:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002d86:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002d8a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00b fc8b 	bl	800e6aa <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002d94:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002d98:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff06 	bl	8002bb0 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002da4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002da8:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db0:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002db4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002db8:	4611      	mov	r1, r2
 8002dba:	eeb0 0a47 	vmov.f32	s0, s14
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f00b fced 	bl	800e79e <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002dc4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002dc8:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8002dcc:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f00b fc17 	bl	800e604 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002dd6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002dda:	3301      	adds	r3, #1
 8002ddc:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002de0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002de4:	2b0a      	cmp	r3, #10
 8002de6:	ddc0      	ble.n	8002d6a <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8002de8:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8002dec:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002df0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002df4:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8002df8:	ed93 0a00 	vldr	s0, [r3]
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	f00b fcce 	bl	800e79e <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8002e02:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e06:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	6013      	str	r3, [r2, #0]
 8002e10:	6053      	str	r3, [r2, #4]
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002e16:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002e1a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8002e1e:	2201      	movs	r2, #1
 8002e20:	2104      	movs	r1, #4
 8002e22:	f00b fc2a 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002e26:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8002e2a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002e2e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002e32:	4618      	mov	r0, r3
 8002e34:	f00b fc39 	bl	800e6aa <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002e38:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002e3c:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002e40:	2201      	movs	r2, #1
 8002e42:	2104      	movs	r1, #4
 8002e44:	f00b fc19 	bl	800e67a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002e48:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e4c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002e58:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002e5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e60:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002e64:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002e68:	4611      	mov	r1, r2
 8002e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f00b fc95 	bl	800e79e <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002e74:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002e78:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002e7c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00b fbbf 	bl	800e604 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002e86:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e8a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e8e:	4618      	mov	r0, r3
 8002e90:	2340      	movs	r3, #64	@ 0x40
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	f00b fd6f 	bl	800e978 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8002e9a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8002e9e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002ea2:	2204      	movs	r2, #4
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	f00b fbe8 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8002eaa:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002eae:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002eb2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f00b fbf7 	bl	800e6aa <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8002ebc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ec0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	6053      	str	r3, [r2, #4]
 8002ecc:	6093      	str	r3, [r2, #8]
 8002ece:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8002ed0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002ed4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2104      	movs	r1, #4
 8002edc:	f00b fbcd 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8002ee0:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8002ee4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002ee8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002eec:	4618      	mov	r0, r3
 8002eee:	f00b fbdc 	bl	800e6aa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8002ef2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ef6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002efa:	edd3 7a00 	vldr	s15, [r3]
 8002efe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002f02:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f06:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f12:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002f16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f1a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002f1e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002f22:	4611      	mov	r1, r2
 8002f24:	eeb0 0a47 	vmov.f32	s0, s14
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f00b fc38 	bl	800e79e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002f2e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002f32:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002f36:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00b fb62 	bl	800e604 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002f40:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f44:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002f48:	4618      	mov	r0, r3
 8002f4a:	2340      	movs	r3, #64	@ 0x40
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2100      	movs	r1, #0
 8002f50:	f00b fd12 	bl	800e978 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002f54:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f58:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	2104      	movs	r1, #4
 8002f60:	f00b fb8b 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002f64:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002f68:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002f6c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002f70:	4618      	mov	r0, r3
 8002f72:	f00b fb9a 	bl	800e6aa <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002f76:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f7a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	6053      	str	r3, [r2, #4]
 8002f86:	6093      	str	r3, [r2, #8]
 8002f88:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8002f8a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f8e:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002f92:	2201      	movs	r2, #1
 8002f94:	2104      	movs	r1, #4
 8002f96:	f00b fb70 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8002f9a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8002f9e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002fa2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00b fb7f 	bl	800e6aa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8002fac:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fb0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fb4:	edd3 7a00 	vldr	s15, [r3]
 8002fb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002fbc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fc0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fcc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002fd0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002fd4:	edd3 7a00 	vldr	s15, [r3]
 8002fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fdc:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002fe0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fe4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002fe8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002fec:	4611      	mov	r1, r2
 8002fee:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00b fbd3 	bl	800e79e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002ff8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002ffc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003000:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003004:	4618      	mov	r0, r3
 8003006:	f00b fafd 	bl	800e604 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800300a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800300e:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003012:	4618      	mov	r0, r3
 8003014:	2340      	movs	r3, #64	@ 0x40
 8003016:	461a      	mov	r2, r3
 8003018:	2100      	movs	r1, #0
 800301a:	f00b fcad 	bl	800e978 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 800301e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003022:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8003026:	2204      	movs	r2, #4
 8003028:	2104      	movs	r1, #4
 800302a:	f00b fb26 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 800302e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003032:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003036:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800303a:	4618      	mov	r0, r3
 800303c:	f00b fb35 	bl	800e6aa <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003040:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003044:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003048:	461a      	mov	r2, r3
 800304a:	2300      	movs	r3, #0
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	6053      	str	r3, [r2, #4]
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003054:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003058:	f107 001c 	add.w	r0, r7, #28
 800305c:	2201      	movs	r2, #1
 800305e:	2104      	movs	r1, #4
 8003060:	f00b fb0b 	bl	800e67a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003064:	f107 021c 	add.w	r2, r7, #28
 8003068:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800306c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003070:	4618      	mov	r0, r3
 8003072:	f00b fb1a 	bl	800e6aa <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003076:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800307a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003086:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800308a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800308e:	edd3 7a00 	vldr	s15, [r3]
 8003092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003096:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800309a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800309e:	edd3 7a00 	vldr	s15, [r3]
 80030a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030aa:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80030f0 <discretize_system_with_arm+0x4fc>
 80030ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030be:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030c2:	f107 031c 	add.w	r3, r7, #28
 80030c6:	4611      	mov	r1, r2
 80030c8:	eeb0 0a47 	vmov.f32	s0, s14
 80030cc:	4618      	mov	r0, r3
 80030ce:	f00b fb66 	bl	800e79e <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030d2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030d6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030da:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030de:	4618      	mov	r0, r3
 80030e0:	f00b fa90 	bl	800e604 <arm_mat_add_f32>
}
 80030e4:	bf00      	nop
 80030e6:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd90      	pop	{r4, r7, pc}
 80030ee:	bf00      	nop
 80030f0:	42f00000 	.word	0x42f00000

080030f4 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b09e      	sub	sp, #120	@ 0x78
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80030fe:	edc7 0a08 	vstr	s1, [r7, #32]
 8003102:	ed87 1a07 	vstr	s2, [r7, #28]
 8003106:	edc7 1a06 	vstr	s3, [r7, #24]
 800310a:	ed87 2a05 	vstr	s4, [r7, #20]
 800310e:	edc7 2a04 	vstr	s5, [r7, #16]
 8003112:	ed87 3a03 	vstr	s6, [r7, #12]
 8003116:	60b8      	str	r0, [r7, #8]
 8003118:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800311a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800311e:	2240      	movs	r2, #64	@ 0x40
 8003120:	2100      	movs	r1, #0
 8003122:	4618      	mov	r0, r3
 8003124:	f00b fc28 	bl	800e978 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8003128:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8003136:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 800313c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003140:	eef1 6a67 	vneg.f32	s13, s15
 8003144:	ed97 7a07 	vldr	s14, [r7, #28]
 8003148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800314c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003150:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003154:	ed97 7a07 	vldr	s14, [r7, #28]
 8003158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003160:	edd7 6a04 	vldr	s13, [r7, #16]
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800316c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8003170:	edd7 7a05 	vldr	s15, [r7, #20]
 8003174:	eef1 6a67 	vneg.f32	s13, s15
 8003178:	ed97 7a08 	vldr	s14, [r7, #32]
 800317c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003180:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003184:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003188:	eef1 6a67 	vneg.f32	s13, s15
 800318c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003194:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003198:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800319c:	ed97 7a08 	vldr	s14, [r7, #32]
 80031a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80031a8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80031ac:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68ba      	ldr	r2, [r7, #8]
 80031b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80031b8:	f7ff fd1c 	bl	8002bf4 <discretize_system_with_arm>
}
 80031bc:	bf00      	nop
 80031be:	3778      	adds	r7, #120	@ 0x78
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <PWM_init+0x40>)
 80031d6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80031ea:	68b8      	ldr	r0, [r7, #8]
 80031ec:	f007 fb60 	bl	800a8b0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80031f0:	88fb      	ldrh	r3, [r7, #6]
 80031f2:	4619      	mov	r1, r3
 80031f4:	68b8      	ldr	r0, [r7, #8]
 80031f6:	f007 fca7 	bl	800ab48 <HAL_TIM_PWM_Start>
}
 80031fa:	bf00      	nop
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	0a21fe80 	.word	0x0a21fe80

08003208 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	ed87 0a02 	vstr	s0, [r7, #8]
 8003214:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003218:	edd7 7a02 	vldr	s15, [r7, #8]
 800321c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d137      	bne.n	8003296 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <PWM_write_duty+0x32>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2200      	movs	r2, #0
 8003236:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003238:	e0e1      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	889b      	ldrh	r3, [r3, #4]
 800323e:	2b04      	cmp	r3, #4
 8003240:	d105      	bne.n	800324e <PWM_write_duty+0x46>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	2300      	movs	r3, #0
 800324a:	6393      	str	r3, [r2, #56]	@ 0x38
 800324c:	e0d7      	b.n	80033fe <PWM_write_duty+0x1f6>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	889b      	ldrh	r3, [r3, #4]
 8003252:	2b08      	cmp	r3, #8
 8003254:	d105      	bne.n	8003262 <PWM_write_duty+0x5a>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003260:	e0cd      	b.n	80033fe <PWM_write_duty+0x1f6>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	889b      	ldrh	r3, [r3, #4]
 8003266:	2b0c      	cmp	r3, #12
 8003268:	d105      	bne.n	8003276 <PWM_write_duty+0x6e>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2300      	movs	r3, #0
 8003272:	6413      	str	r3, [r2, #64]	@ 0x40
 8003274:	e0c3      	b.n	80033fe <PWM_write_duty+0x1f6>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	889b      	ldrh	r3, [r3, #4]
 800327a:	2b10      	cmp	r3, #16
 800327c:	d105      	bne.n	800328a <PWM_write_duty+0x82>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2300      	movs	r3, #0
 8003286:	6493      	str	r3, [r2, #72]	@ 0x48
 8003288:	e0b9      	b.n	80033fe <PWM_write_duty+0x1f6>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2300      	movs	r3, #0
 8003292:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003294:	e0b3      	b.n	80033fe <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ae:	ee17 2a90 	vmov	r2, s15
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80032be:	33fe      	adds	r3, #254	@ 0xfe
 80032c0:	4a51      	ldr	r2, [pc, #324]	@ (8003408 <PWM_write_duty+0x200>)
 80032c2:	fba2 2303 	umull	r2, r3, r2, r3
 80032c6:	0bdb      	lsrs	r3, r3, #15
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	899b      	ldrh	r3, [r3, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	ee07 3a90 	vmov	s15, r3
 80032e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032f0:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003300:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003304:	ee17 3a90 	vmov	r3, s15
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	89db      	ldrh	r3, [r3, #14]
 8003312:	4618      	mov	r0, r3
 8003314:	f7fd f8d2 	bl	80004bc <__aeabi_i2d>
 8003318:	4604      	mov	r4, r0
 800331a:	460d      	mov	r5, r1
 800331c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003320:	eef0 7ae7 	vabs.f32	s15, s15
 8003324:	ee17 0a90 	vmov	r0, s15
 8003328:	f7fd f8da 	bl	80004e0 <__aeabi_f2d>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4620      	mov	r0, r4
 8003332:	4629      	mov	r1, r5
 8003334:	f7fd f92c 	bl	8000590 <__aeabi_dmul>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	4b31      	ldr	r3, [pc, #196]	@ (800340c <PWM_write_duty+0x204>)
 8003346:	f7fd fa4d 	bl	80007e4 <__aeabi_ddiv>
 800334a:	4602      	mov	r2, r0
 800334c:	460b      	mov	r3, r1
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f7fd fbdf 	bl	8000b14 <__aeabi_d2uiz>
 8003356:	4603      	mov	r3, r0
 8003358:	b29b      	uxth	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	899a      	ldrh	r2, [r3, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	89da      	ldrh	r2, [r3, #14]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	89da      	ldrh	r2, [r3, #14]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	889b      	ldrh	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <PWM_write_duty+0x190>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6952      	ldr	r2, [r2, #20]
 8003394:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003396:	e032      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	889b      	ldrh	r3, [r3, #4]
 800339c:	2b04      	cmp	r3, #4
 800339e:	d106      	bne.n	80033ae <PWM_write_duty+0x1a6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80033ac:	e027      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	889b      	ldrh	r3, [r3, #4]
 80033b2:	2b08      	cmp	r3, #8
 80033b4:	d106      	bne.n	80033c4 <PWM_write_duty+0x1bc>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80033c2:	e01c      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	889b      	ldrh	r3, [r3, #4]
 80033c8:	2b0c      	cmp	r3, #12
 80033ca:	d106      	bne.n	80033da <PWM_write_duty+0x1d2>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80033d8:	e011      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	889b      	ldrh	r3, [r3, #4]
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d106      	bne.n	80033f0 <PWM_write_duty+0x1e8>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80033ee:	e006      	b.n	80033fe <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80033fc:	e7ff      	b.n	80033fe <PWM_write_duty+0x1f6>
 80033fe:	bf00      	nop
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	bf00      	nop
 8003408:	80008001 	.word	0x80008001
 800340c:	40590000 	.word	0x40590000

08003410 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	ed87 0a02 	vstr	s0, [r7, #8]
 800341c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003420:	edd7 7a02 	vldr	s15, [r7, #8]
 8003424:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	d137      	bne.n	800349e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	889b      	ldrh	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d105      	bne.n	8003442 <PWM_write_range+0x32>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003440:	e0e1      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	889b      	ldrh	r3, [r3, #4]
 8003446:	2b04      	cmp	r3, #4
 8003448:	d105      	bne.n	8003456 <PWM_write_range+0x46>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	6393      	str	r3, [r2, #56]	@ 0x38
 8003454:	e0d7      	b.n	8003606 <PWM_write_range+0x1f6>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	889b      	ldrh	r3, [r3, #4]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d105      	bne.n	800346a <PWM_write_range+0x5a>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003468:	e0cd      	b.n	8003606 <PWM_write_range+0x1f6>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	889b      	ldrh	r3, [r3, #4]
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d105      	bne.n	800347e <PWM_write_range+0x6e>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2300      	movs	r3, #0
 800347a:	6413      	str	r3, [r2, #64]	@ 0x40
 800347c:	e0c3      	b.n	8003606 <PWM_write_range+0x1f6>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	889b      	ldrh	r3, [r3, #4]
 8003482:	2b10      	cmp	r3, #16
 8003484:	d105      	bne.n	8003492 <PWM_write_range+0x82>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	2300      	movs	r3, #0
 800348e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003490:	e0b9      	b.n	8003606 <PWM_write_range+0x1f6>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2300      	movs	r3, #0
 800349a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800349c:	e0b3      	b.n	8003606 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80034ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034b6:	ee17 2a90 	vmov	r2, s15
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80034c6:	33fe      	adds	r3, #254	@ 0xfe
 80034c8:	4a53      	ldr	r2, [pc, #332]	@ (8003618 <PWM_write_range+0x208>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0bdb      	lsrs	r3, r3, #15
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	899b      	ldrh	r3, [r3, #12]
 80034ea:	3301      	adds	r3, #1
 80034ec:	ee07 3a90 	vmov	s15, r3
 80034f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80034f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80034fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003500:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800350c:	ee17 3a90 	vmov	r3, s15
 8003510:	b29a      	uxth	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	89db      	ldrh	r3, [r3, #14]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fc ffce 	bl	80004bc <__aeabi_i2d>
 8003520:	4604      	mov	r4, r0
 8003522:	460d      	mov	r5, r1
 8003524:	edd7 7a01 	vldr	s15, [r7, #4]
 8003528:	eef0 7ae7 	vabs.f32	s15, s15
 800352c:	ee17 0a90 	vmov	r0, s15
 8003530:	f7fc ffd6 	bl	80004e0 <__aeabi_f2d>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4620      	mov	r0, r4
 800353a:	4629      	mov	r1, r5
 800353c:	f7fd f828 	bl	8000590 <__aeabi_dmul>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4610      	mov	r0, r2
 8003546:	4619      	mov	r1, r3
 8003548:	a331      	add	r3, pc, #196	@ (adr r3, 8003610 <PWM_write_range+0x200>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fd f949 	bl	80007e4 <__aeabi_ddiv>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	f7fd fadb 	bl	8000b14 <__aeabi_d2uiz>
 800355e:	4603      	mov	r3, r0
 8003560:	b29b      	uxth	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	899a      	ldrh	r2, [r3, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	89da      	ldrh	r2, [r3, #14]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	89da      	ldrh	r2, [r3, #14]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	889b      	ldrh	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <PWM_write_range+0x190>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	6952      	ldr	r2, [r2, #20]
 800359c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800359e:	e032      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	889b      	ldrh	r3, [r3, #4]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d106      	bne.n	80035b6 <PWM_write_range+0x1a6>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035b4:	e027      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	889b      	ldrh	r3, [r3, #4]
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d106      	bne.n	80035cc <PWM_write_range+0x1bc>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80035ca:	e01c      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	889b      	ldrh	r3, [r3, #4]
 80035d0:	2b0c      	cmp	r3, #12
 80035d2:	d106      	bne.n	80035e2 <PWM_write_range+0x1d2>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80035e0:	e011      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	889b      	ldrh	r3, [r3, #4]
 80035e6:	2b10      	cmp	r3, #16
 80035e8:	d106      	bne.n	80035f8 <PWM_write_range+0x1e8>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80035f6:	e006      	b.n	8003606 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003604:	e7ff      	b.n	8003606 <PWM_write_range+0x1f6>
 8003606:	bf00      	nop
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bdb0      	pop	{r4, r5, r7, pc}
 800360e:	bf00      	nop
 8003610:	00000000 	.word	0x00000000
 8003614:	40efffe0 	.word	0x40efffe0
 8003618:	80008001 	.word	0x80008001

0800361c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6178      	str	r0, [r7, #20]
 8003624:	6139      	str	r1, [r7, #16]
 8003626:	60fa      	str	r2, [r7, #12]
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	ed87 0a01 	vstr	s0, [r7, #4]
 800362e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2200      	movs	r2, #0
 800365a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800367c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	fb93 f2f2 	sdiv	r2, r3, r2
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	fb01 f202 	mul.w	r2, r1, r2
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80036ea:	213c      	movs	r1, #60	@ 0x3c
 80036ec:	6938      	ldr	r0, [r7, #16]
 80036ee:	f007 fce7 	bl	800b0c0 <HAL_TIM_Encoder_Start>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	0000      	movs	r0, r0
 80036fc:	0000      	movs	r0, r0
	...

08003700 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003700:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	0fda      	lsrs	r2, r3, #31
 8003728:	4413      	add	r3, r2
 800372a:	105b      	asrs	r3, r3, #1
 800372c:	461a      	mov	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4293      	cmp	r3, r2
 8003732:	dd05      	ble.n	8003740 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	60fb      	str	r3, [r7, #12]
 800373e:	e00e      	b.n	800375e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	0fda      	lsrs	r2, r3, #31
 8003746:	4413      	add	r3, r2
 8003748:	105b      	asrs	r3, r3, #1
 800374a:	425b      	negs	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4293      	cmp	r3, r2
 8003752:	da04      	bge.n	800375e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	441a      	add	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003790:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800379a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800379e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe97 	bl	80004e0 <__aeabi_f2d>
 80037b2:	4604      	mov	r4, r0
 80037b4:	460d      	mov	r5, r1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037d6:	ee17 0a90 	vmov	r0, s15
 80037da:	f7fc fe81 	bl	80004e0 <__aeabi_f2d>
 80037de:	a33c      	add	r3, pc, #240	@ (adr r3, 80038d0 <QEI_get_diff_count+0x1d0>)
 80037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e4:	f7fc fed4 	bl	8000590 <__aeabi_dmul>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4690      	mov	r8, r2
 80037ee:	4699      	mov	r9, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fc fe73 	bl	80004e0 <__aeabi_f2d>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4640      	mov	r0, r8
 8003800:	4649      	mov	r1, r9
 8003802:	f7fc fec5 	bl	8000590 <__aeabi_dmul>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4620      	mov	r0, r4
 800380c:	4629      	mov	r1, r5
 800380e:	f7fc fd09 	bl	8000224 <__adddf3>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f7fd f99b 	bl	8000b54 <__aeabi_d2f>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003828:	4618      	mov	r0, r3
 800382a:	f7fc fe59 	bl	80004e0 <__aeabi_f2d>
 800382e:	4604      	mov	r4, r0
 8003830:	460d      	mov	r5, r1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	ee07 3a90 	vmov	s15, r3
 800383a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	ee07 3a90 	vmov	s15, r3
 8003846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800384a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800384e:	ee16 0a90 	vmov	r0, s13
 8003852:	f7fc fe45 	bl	80004e0 <__aeabi_f2d>
 8003856:	a31e      	add	r3, pc, #120	@ (adr r3, 80038d0 <QEI_get_diff_count+0x1d0>)
 8003858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385c:	f7fc fe98 	bl	8000590 <__aeabi_dmul>
 8003860:	4602      	mov	r2, r0
 8003862:	460b      	mov	r3, r1
 8003864:	4690      	mov	r8, r2
 8003866:	4699      	mov	r9, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386c:	4618      	mov	r0, r3
 800386e:	f7fc fe37 	bl	80004e0 <__aeabi_f2d>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4640      	mov	r0, r8
 8003878:	4649      	mov	r1, r9
 800387a:	f7fc fe89 	bl	8000590 <__aeabi_dmul>
 800387e:	4602      	mov	r2, r0
 8003880:	460b      	mov	r3, r1
 8003882:	4690      	mov	r8, r2
 8003884:	4699      	mov	r9, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388a:	4618      	mov	r0, r3
 800388c:	f7fc fe28 	bl	80004e0 <__aeabi_f2d>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4640      	mov	r0, r8
 8003896:	4649      	mov	r1, r9
 8003898:	f7fc fe7a 	bl	8000590 <__aeabi_dmul>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4620      	mov	r0, r4
 80038a2:	4629      	mov	r1, r5
 80038a4:	f7fc fcbe 	bl	8000224 <__adddf3>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4610      	mov	r0, r2
 80038ae:	4619      	mov	r1, r3
 80038b0:	f7fd f950 	bl	8000b54 <__aeabi_d2f>
 80038b4:	4602      	mov	r2, r0
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	605a      	str	r2, [r3, #4]
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038cc:	f3af 8000 	nop.w
 80038d0:	54442d18 	.word	0x54442d18
 80038d4:	400921fb 	.word	0x400921fb

080038d8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80038d8:	b5b0      	push	{r4, r5, r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	ee07 3a90 	vmov	s15, r3
 80038f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fdee 	bl	80004e0 <__aeabi_f2d>
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	4b83      	ldr	r3, [pc, #524]	@ (8003b18 <QEI_compute_data+0x240>)
 800390a:	f7fc fe41 	bl	8000590 <__aeabi_dmul>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4614      	mov	r4, r2
 8003914:	461d      	mov	r5, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003922:	ee17 0a90 	vmov	r0, s15
 8003926:	f7fc fddb 	bl	80004e0 <__aeabi_f2d>
 800392a:	4602      	mov	r2, r0
 800392c:	460b      	mov	r3, r1
 800392e:	4620      	mov	r0, r4
 8003930:	4629      	mov	r1, r5
 8003932:	f7fc ff57 	bl	80007e4 <__aeabi_ddiv>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4614      	mov	r4, r2
 800393c:	461d      	mov	r5, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	4618      	mov	r0, r3
 8003944:	f7fc fdcc 	bl	80004e0 <__aeabi_f2d>
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4620      	mov	r0, r4
 800394e:	4629      	mov	r1, r5
 8003950:	f7fc fe1e 	bl	8000590 <__aeabi_dmul>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	f7fd f8fa 	bl	8000b54 <__aeabi_d2f>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800396c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003970:	ee17 0a90 	vmov	r0, s15
 8003974:	f7fc fdb4 	bl	80004e0 <__aeabi_f2d>
 8003978:	a365      	add	r3, pc, #404	@ (adr r3, 8003b10 <QEI_compute_data+0x238>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f7fc fe07 	bl	8000590 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4614      	mov	r4, r2
 8003988:	461d      	mov	r5, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003996:	ee17 0a90 	vmov	r0, s15
 800399a:	f7fc fda1 	bl	80004e0 <__aeabi_f2d>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7fc ff1d 	bl	80007e4 <__aeabi_ddiv>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4614      	mov	r4, r2
 80039b0:	461d      	mov	r5, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fd92 	bl	80004e0 <__aeabi_f2d>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4620      	mov	r0, r4
 80039c2:	4629      	mov	r1, r5
 80039c4:	f7fc fde4 	bl	8000590 <__aeabi_dmul>
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	f7fd f8c0 	bl	8000b54 <__aeabi_d2f>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fc fd7e 	bl	80004e0 <__aeabi_f2d>
 80039e4:	a34a      	add	r3, pc, #296	@ (adr r3, 8003b10 <QEI_compute_data+0x238>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	f7fc fdd1 	bl	8000590 <__aeabi_dmul>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4614      	mov	r4, r2
 80039f4:	461d      	mov	r5, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fc fd70 	bl	80004e0 <__aeabi_f2d>
 8003a00:	4602      	mov	r2, r0
 8003a02:	460b      	mov	r3, r1
 8003a04:	4620      	mov	r0, r4
 8003a06:	4629      	mov	r1, r5
 8003a08:	f7fc fdc2 	bl	8000590 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	ee17 0a90 	vmov	r0, s15
 8003a24:	f7fc fd5c 	bl	80004e0 <__aeabi_f2d>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4620      	mov	r0, r4
 8003a2e:	4629      	mov	r1, r5
 8003a30:	f7fc fed8 	bl	80007e4 <__aeabi_ddiv>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4614      	mov	r4, r2
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fc fd4d 	bl	80004e0 <__aeabi_f2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4620      	mov	r0, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	f7fc fd9f 	bl	8000590 <__aeabi_dmul>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fd f87b 	bl	8000b54 <__aeabi_d2f>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	ed93 7a02 	vldr	s14, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a84:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003a88:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a8c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a94:	d00a      	beq.n	8003aac <QEI_compute_data+0x1d4>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aa2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	e001      	b.n	8003ab0 <QEI_compute_data+0x1d8>
 8003aac:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003b1c <QEI_compute_data+0x244>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	ed93 7a04 	vldr	s14, [r3, #16]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	edd3 7a05 	vldr	s15, [r3, #20]
 8003ac2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ac6:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003aca:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ace:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad6:	d00a      	beq.n	8003aee <QEI_compute_data+0x216>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	ee07 3a90 	vmov	s15, r3
 8003ae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aec:	e001      	b.n	8003af2 <QEI_compute_data+0x21a>
 8003aee:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003b1c <QEI_compute_data+0x244>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	615a      	str	r2, [r3, #20]
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b10:	54442d18 	.word	0x54442d18
 8003b14:	400921fb 	.word	0x400921fb
 8003b18:	404e0000 	.word	0x404e0000
 8003b1c:	00000000 	.word	0x00000000

08003b20 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
    // Reset hardware counter
    __HAL_TIM_SET_COUNTER(qei->htimx, 0);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset counter history
    qei->c[NOW] = 0;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pps = 0;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->rpm = 0;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = 0;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->pulses = 0;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->mmps = 0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->radpss = 0;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	651a      	str	r2, [r3, #80]	@ 0x50

    // Reset velocity history
    qei->r[NOW] = 0;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	615a      	str	r2, [r3, #20]
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b08e      	sub	sp, #56	@ 0x38
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6178      	str	r0, [r7, #20]
 8003bc6:	ed87 0a04 	vstr	s0, [r7, #16]
 8003bca:	edc7 0a03 	vstr	s1, [r7, #12]
 8003bce:	ed87 1a02 	vstr	s2, [r7, #8]
 8003bd2:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003bfc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c00:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c08:	eef0 7ae7 	vabs.f32	s15, s15
 8003c0c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003c10:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c14:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d503      	bpl.n	8003c2e <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	22ff      	movs	r2, #255	@ 0xff
 8003c2a:	741a      	strb	r2, [r3, #16]
 8003c2c:	e002      	b.n	8003c34 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2201      	movs	r2, #1
 8003c32:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003c34:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003c38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	d006      	beq.n	8003c50 <Trapezoidal_Generator+0x92>
 8003c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d104      	bne.n	8003c5a <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	60da      	str	r2, [r3, #12]
        return;
 8003c58:	e06f      	b.n	8003d3a <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003c5a:	edd7 6a02 	vldr	s13, [r7, #8]
 8003c5e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c66:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003c72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c76:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003c8e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003c92:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003c9e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ca2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cae:	db27      	blt.n	8003d00 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003cb0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003cb4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8003cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ccc:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cd4:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003cd6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003cda:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003ce8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003cec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	edc3 7a02 	vstr	s15, [r3, #8]
 8003cfe:	e018      	b.n	8003d32 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003d00:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d0c:	eeb0 0a66 	vmov.f32	s0, s13
 8003d10:	f00a fefa 	bl	800eb08 <sqrtf>
 8003d14:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	6a3a      	ldr	r2, [r7, #32]
 8003d1c:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003d24:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	60da      	str	r2, [r3, #12]
}
 8003d3a:	3738      	adds	r7, #56	@ 0x38
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003d40:	b480      	push	{r7}
 8003d42:	b08d      	sub	sp, #52	@ 0x34
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6178      	str	r0, [r7, #20]
 8003d48:	6139      	str	r1, [r7, #16]
 8003d4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d52:	ed87 1a01 	vstr	s2, [r7, #4]
 8003d56:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d60:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003fe4 <Trapezoidal_Evaluated+0x2a4>
 8003d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	ed93 7a03 	vldr	s14, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d82:	f200 811b 	bhi.w	8003fbc <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	7c1b      	ldrb	r3, [r3, #16]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9a:	ed97 7a00 	vldr	s14, [r7]
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	ed93 7a00 	vldr	s14, [r3]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	edd3 7a01 	vldr	s15, [r3, #4]
 8003db2:	eeb4 7a67 	vcmp.f32	s14, s15
 8003db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dba:	d109      	bne.n	8003dd0 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dca:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003dce:	e00c      	b.n	8003dea <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	7c1b      	ldrb	r3, [r3, #16]
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dde:	ed97 7a01 	vldr	s14, [r7, #4]
 8003de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	ed93 7a03 	vldr	s14, [r3, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	d824      	bhi.n	8003e4a <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8003e00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e04:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e46:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003e48:	e0c6      	b.n	8003fd8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	d830      	bhi.n	8003ec2 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003e60:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	edd3 7a00 	vldr	s15, [r3]
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e88:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e9c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ea4:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003eb6:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	609a      	str	r2, [r3, #8]
}
 8003ec0:	e08a      	b.n	8003fd8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed6:	d900      	bls.n	8003eda <Trapezoidal_Evaluated+0x19a>
}
 8003ed8:	e07e      	b.n	8003fd8 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003eda:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ede:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ee2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	edd3 7a00 	vldr	s15, [r3]
 8003eec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003efa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003efe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f02:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	dd11      	ble.n	8003f44 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	edd3 7a00 	vldr	s15, [r3]
 8003f2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f38:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f40:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f54:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8003f58:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f6c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f70:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003f74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003f78:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f7c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003f80:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8003f92:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003f96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003fac:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003fb0:	eef1 7a67 	vneg.f32	s15, s15
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003fba:	e00d      	b.n	8003fd8 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	609a      	str	r2, [r3, #8]
}
 8003fd8:	bf00      	nop
 8003fda:	3734      	adds	r7, #52	@ 0x34
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	3a83126f 	.word	0x3a83126f

08003fe8 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	ed87 0a01 	vstr	s0, [r7, #4]
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	2b1a      	cmp	r3, #26
 8003ffa:	d018      	beq.n	800402e <temperature_to_base+0x46>
 8003ffc:	2b1a      	cmp	r3, #26
 8003ffe:	dc1d      	bgt.n	800403c <temperature_to_base+0x54>
 8004000:	2b18      	cmp	r3, #24
 8004002:	d002      	beq.n	800400a <temperature_to_base+0x22>
 8004004:	2b19      	cmp	r3, #25
 8004006:	d003      	beq.n	8004010 <temperature_to_base+0x28>
 8004008:	e018      	b.n	800403c <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800400a:	edd7 7a01 	vldr	s15, [r7, #4]
 800400e:	e017      	b.n	8004040 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004010:	edd7 7a01 	vldr	s15, [r7, #4]
 8004014:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004050 <temperature_to_base+0x68>
 8004018:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800401c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004024:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004028:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800402c:	e008      	b.n	8004040 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 800402e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004032:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004054 <temperature_to_base+0x6c>
 8004036:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800403a:	e001      	b.n	8004040 <temperature_to_base+0x58>
        default:
            return value;
 800403c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004040:	eeb0 0a67 	vmov.f32	s0, s15
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	42000000 	.word	0x42000000
 8004054:	43889333 	.word	0x43889333

08004058 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004062:	4603      	mov	r3, r0
 8004064:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004066:	78fb      	ldrb	r3, [r7, #3]
 8004068:	2b1a      	cmp	r3, #26
 800406a:	d018      	beq.n	800409e <temperature_from_base+0x46>
 800406c:	2b1a      	cmp	r3, #26
 800406e:	dc1d      	bgt.n	80040ac <temperature_from_base+0x54>
 8004070:	2b18      	cmp	r3, #24
 8004072:	d002      	beq.n	800407a <temperature_from_base+0x22>
 8004074:	2b19      	cmp	r3, #25
 8004076:	d003      	beq.n	8004080 <temperature_from_base+0x28>
 8004078:	e018      	b.n	80040ac <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800407a:	edd7 7a01 	vldr	s15, [r7, #4]
 800407e:	e017      	b.n	80040b0 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004080:	edd7 7a01 	vldr	s15, [r7, #4]
 8004084:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004088:	ee27 7a87 	vmul.f32	s14, s15, s14
 800408c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004094:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80040c0 <temperature_from_base+0x68>
 8004098:	ee77 7a87 	vadd.f32	s15, s15, s14
 800409c:	e008      	b.n	80040b0 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800409e:	edd7 7a01 	vldr	s15, [r7, #4]
 80040a2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80040c4 <temperature_from_base+0x6c>
 80040a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040aa:	e001      	b.n	80040b0 <temperature_from_base+0x58>
        default:
            return value;
 80040ac:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	370c      	adds	r7, #12
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	42000000 	.word	0x42000000
 80040c4:	43889333 	.word	0x43889333

080040c8 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	e00a      	b.n	80040f8 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	3304      	adds	r3, #4
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	3301      	adds	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2b1a      	cmp	r3, #26
 80040fc:	ddf1      	ble.n	80040e2 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a11      	ldr	r2, [pc, #68]	@ (8004148 <init_length_converter+0x80>)
 8004102:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a11      	ldr	r2, [pc, #68]	@ (800414c <init_length_converter+0x84>)
 8004108:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004110:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a0e      	ldr	r2, [pc, #56]	@ (8004150 <init_length_converter+0x88>)
 8004116:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <init_length_converter+0x8c>)
 800411c:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a0d      	ldr	r2, [pc, #52]	@ (8004158 <init_length_converter+0x90>)
 8004122:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <init_length_converter+0x94>)
 8004128:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a0c      	ldr	r2, [pc, #48]	@ (8004160 <init_length_converter+0x98>)
 800412e:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr
 8004148:	3a83126f 	.word	0x3a83126f
 800414c:	3c23d70a 	.word	0x3c23d70a
 8004150:	447a0000 	.word	0x447a0000
 8004154:	3cd013a9 	.word	0x3cd013a9
 8004158:	3e9c0ebf 	.word	0x3e9c0ebf
 800415c:	3f6a161e 	.word	0x3f6a161e
 8004160:	44c92b02 	.word	0x44c92b02

08004164 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	220a      	movs	r2, #10
 8004176:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	e00a      	b.n	8004194 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	3304      	adds	r3, #4
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b1a      	cmp	r3, #26
 8004198:	ddf1      	ble.n	800417e <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a0e      	ldr	r2, [pc, #56]	@ (80041d8 <init_mass_converter+0x74>)
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a0e      	ldr	r2, [pc, #56]	@ (80041dc <init_mass_converter+0x78>)
 80041a4:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80041ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a0b      	ldr	r2, [pc, #44]	@ (80041e0 <init_mass_converter+0x7c>)
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0b      	ldr	r2, [pc, #44]	@ (80041e4 <init_mass_converter+0x80>)
 80041b8:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <init_mass_converter+0x84>)
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	358637bd 	.word	0x358637bd
 80041dc:	3a83126f 	.word	0x3a83126f
 80041e0:	447a0000 	.word	0x447a0000
 80041e4:	3ce83d36 	.word	0x3ce83d36
 80041e8:	3ee83d36 	.word	0x3ee83d36

080041ec <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	220f      	movs	r2, #15
 80041fe:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004200:	2300      	movs	r3, #0
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	e00a      	b.n	800421c <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2b1a      	cmp	r3, #26
 8004220:	ddf1      	ble.n	8004206 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a0a      	ldr	r2, [pc, #40]	@ (8004250 <init_angle_converter+0x64>)
 8004226:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a08      	ldr	r2, [pc, #32]	@ (8004254 <init_angle_converter+0x68>)
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004242:	bf00      	nop
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	3c8efa35 	.word	0x3c8efa35
 8004254:	3c80adfd 	.word	0x3c80adfd

08004258 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2203      	movs	r2, #3
 8004264:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2214      	movs	r2, #20
 800426a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e00a      	b.n	8004288 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	3301      	adds	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b1a      	cmp	r3, #26
 800428c:	ddf1      	ble.n	8004272 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <init_time_converter+0x7c>)
 8004292:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <init_time_converter+0x80>)
 8004298:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0f      	ldr	r2, [pc, #60]	@ (80042dc <init_time_converter+0x84>)
 800429e:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80042a6:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <init_time_converter+0x88>)
 80042ac:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <init_time_converter+0x8c>)
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a0c      	ldr	r2, [pc, #48]	@ (80042e8 <init_time_converter+0x90>)
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	3089705f 	.word	0x3089705f
 80042d8:	358637bd 	.word	0x358637bd
 80042dc:	3a83126f 	.word	0x3a83126f
 80042e0:	42700000 	.word	0x42700000
 80042e4:	45610000 	.word	0x45610000
 80042e8:	47a8c000 	.word	0x47a8c000

080042ec <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2218      	movs	r2, #24
 80042fe:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	e00a      	b.n	800431c <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b1a      	cmp	r3, #26
 8004320:	ddf1      	ble.n	8004306 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a05      	ldr	r2, [pc, #20]	@ (800433c <init_temperature_converter+0x50>)
 8004326:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a05      	ldr	r2, [pc, #20]	@ (8004340 <init_temperature_converter+0x54>)
 800432c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	08003fe9 	.word	0x08003fe9
 8004340:	08004059 	.word	0x08004059

08004344 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff feba 	bl	80040c8 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3378      	adds	r3, #120	@ 0x78
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff ff03 	bl	8004164 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	33f0      	adds	r3, #240	@ 0xf0
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff ff42 	bl	80041ec <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff72 	bl	8004258 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff ffb6 	bl	80042ec <init_temperature_converter>
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004392:	79fb      	ldrb	r3, [r7, #7]
 8004394:	2b1a      	cmp	r3, #26
 8004396:	d803      	bhi.n	80043a0 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	4a05      	ldr	r2, [pc, #20]	@ (80043b0 <UnitConverter_get_unit_type+0x28>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
 800439e:	e000      	b.n	80043a2 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200000d4 	.word	0x200000d4

080043b4 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b088      	sub	sp, #32
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80043c0:	460b      	mov	r3, r1
 80043c2:	71fb      	strb	r3, [r7, #7]
 80043c4:	4613      	mov	r3, r2
 80043c6:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80043c8:	79fb      	ldrb	r3, [r7, #7]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff ffdc 	bl	8004388 <UnitConverter_get_unit_type>
 80043d0:	4603      	mov	r3, r0
 80043d2:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80043d4:	79bb      	ldrb	r3, [r7, #6]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ffd6 	bl	8004388 <UnitConverter_get_unit_type>
 80043dc:	4603      	mov	r3, r0
 80043de:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80043e0:	7efa      	ldrb	r2, [r7, #27]
 80043e2:	7ebb      	ldrb	r3, [r7, #26]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d002      	beq.n	80043ee <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80043e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ec:	e03b      	b.n	8004466 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80043ee:	7efa      	ldrb	r2, [r7, #27]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	79fa      	ldrb	r2, [r7, #7]
 800440c:	4610      	mov	r0, r2
 800440e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004412:	4798      	blx	r3
 8004414:	ed87 0a07 	vstr	s0, [r7, #28]
 8004418:	e00c      	b.n	8004434 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	3304      	adds	r3, #4
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	ed97 7a02 	vldr	s14, [r7, #8]
 800442c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004430:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004440:	79ba      	ldrb	r2, [r7, #6]
 8004442:	4610      	mov	r0, r2
 8004444:	ed97 0a07 	vldr	s0, [r7, #28]
 8004448:	4798      	blx	r3
 800444a:	eef0 7a40 	vmov.f32	s15, s0
 800444e:	e00a      	b.n	8004466 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004450:	79bb      	ldrb	r3, [r7, #6]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	ed93 7a00 	vldr	s14, [r3]
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	3720      	adds	r7, #32
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	ed87 0a02 	vstr	s0, [r7, #8]
 800447c:	460b      	mov	r3, r1
 800447e:	71fb      	strb	r3, [r7, #7]
 8004480:	4613      	mov	r3, r2
 8004482:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff ff7e 	bl	8004388 <UnitConverter_get_unit_type>
 800448c:	4603      	mov	r3, r0
 800448e:	2b02      	cmp	r3, #2
 8004490:	d111      	bne.n	80044b6 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004492:	79bb      	ldrb	r3, [r7, #6]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff77 	bl	8004388 <UnitConverter_get_unit_type>
 800449a:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 800449c:	2b02      	cmp	r3, #2
 800449e:	d10a      	bne.n	80044b6 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80044a0:	79ba      	ldrb	r2, [r7, #6]
 80044a2:	79fb      	ldrb	r3, [r7, #7]
 80044a4:	4619      	mov	r1, r3
 80044a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f7ff ff82 	bl	80043b4 <UnitConverter_convert>
 80044b0:	eef0 7a40 	vmov.f32	s15, s0
 80044b4:	e001      	b.n	80044ba <UnitConverter_angle+0x4a>
    }
    return value;
 80044b6:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80044ba:	eeb0 0a67 	vmov.f32	s0, s15
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08c      	sub	sp, #48	@ 0x30
 80044c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80044ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	605a      	str	r2, [r3, #4]
 80044d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80044d6:	1d3b      	adds	r3, r7, #4
 80044d8:	2220      	movs	r2, #32
 80044da:	2100      	movs	r1, #0
 80044dc:	4618      	mov	r0, r3
 80044de:	f00a fa4b 	bl	800e978 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80044e2:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <MX_ADC1_Init+0x104>)
 80044e4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80044e8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80044ea:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <MX_ADC1_Init+0x104>)
 80044ec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80044f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80044f2:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <MX_ADC1_Init+0x104>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80044f8:	4b33      	ldr	r3, [pc, #204]	@ (80045c8 <MX_ADC1_Init+0x104>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80044fe:	4b32      	ldr	r3, [pc, #200]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004500:	2200      	movs	r2, #0
 8004502:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004504:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004506:	2201      	movs	r2, #1
 8004508:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800450a:	4b2f      	ldr	r3, [pc, #188]	@ (80045c8 <MX_ADC1_Init+0x104>)
 800450c:	2204      	movs	r2, #4
 800450e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004510:	4b2d      	ldr	r3, [pc, #180]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004512:	2200      	movs	r2, #0
 8004514:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004516:	4b2c      	ldr	r3, [pc, #176]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004518:	2201      	movs	r2, #1
 800451a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800451c:	4b2a      	ldr	r3, [pc, #168]	@ (80045c8 <MX_ADC1_Init+0x104>)
 800451e:	2202      	movs	r2, #2
 8004520:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004522:	4b29      	ldr	r3, [pc, #164]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800452a:	4b27      	ldr	r3, [pc, #156]	@ (80045c8 <MX_ADC1_Init+0x104>)
 800452c:	2200      	movs	r2, #0
 800452e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004530:	4b25      	ldr	r3, [pc, #148]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004532:	2200      	movs	r2, #0
 8004534:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004536:	4b24      	ldr	r3, [pc, #144]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800453e:	4b22      	ldr	r3, [pc, #136]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004540:	2200      	movs	r2, #0
 8004542:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004544:	4b20      	ldr	r3, [pc, #128]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800454c:	481e      	ldr	r0, [pc, #120]	@ (80045c8 <MX_ADC1_Init+0x104>)
 800454e:	f003 f8db 	bl	8007708 <HAL_ADC_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004558:	f001 f938 	bl	80057cc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800455c:	2300      	movs	r3, #0
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004564:	4619      	mov	r1, r3
 8004566:	4818      	ldr	r0, [pc, #96]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004568:	f004 f9fa 	bl	8008960 <HAL_ADCEx_MultiModeConfigChannel>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004572:	f001 f92b 	bl	80057cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004576:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <MX_ADC1_Init+0x108>)
 8004578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800457a:	2306      	movs	r3, #6
 800457c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800457e:	2307      	movs	r3, #7
 8004580:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004582:	237f      	movs	r3, #127	@ 0x7f
 8004584:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004586:	2304      	movs	r3, #4
 8004588:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800458e:	1d3b      	adds	r3, r7, #4
 8004590:	4619      	mov	r1, r3
 8004592:	480d      	ldr	r0, [pc, #52]	@ (80045c8 <MX_ADC1_Init+0x104>)
 8004594:	f003 fb66 	bl	8007c64 <HAL_ADC_ConfigChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800459e:	f001 f915 	bl	80057cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80045a2:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <MX_ADC1_Init+0x10c>)
 80045a4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80045a6:	230c      	movs	r3, #12
 80045a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	4619      	mov	r1, r3
 80045ae:	4806      	ldr	r0, [pc, #24]	@ (80045c8 <MX_ADC1_Init+0x104>)
 80045b0:	f003 fb58 	bl	8007c64 <HAL_ADC_ConfigChannel>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80045ba:	f001 f907 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80045be:	bf00      	nop
 80045c0:	3730      	adds	r7, #48	@ 0x30
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000170 	.word	0x20000170
 80045cc:	19200040 	.word	0x19200040
 80045d0:	1d500080 	.word	0x1d500080

080045d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b09e      	sub	sp, #120	@ 0x78
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	60da      	str	r2, [r3, #12]
 80045ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80045ec:	f107 0310 	add.w	r3, r7, #16
 80045f0:	2254      	movs	r2, #84	@ 0x54
 80045f2:	2100      	movs	r1, #0
 80045f4:	4618      	mov	r0, r3
 80045f6:	f00a f9bf 	bl	800e978 <memset>
  if(adcHandle->Instance==ADC1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004602:	d15e      	bne.n	80046c2 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004604:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004608:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800460a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800460e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	4618      	mov	r0, r3
 8004616:	f005 fe99 	bl	800a34c <HAL_RCCEx_PeriphCLKConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004620:	f001 f8d4 	bl	80057cc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004624:	4b29      	ldr	r3, [pc, #164]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 8004626:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004628:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 800462a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800462e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004630:	4b26      	ldr	r3, [pc, #152]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 8004632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800463c:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 800463e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004640:	4a22      	ldr	r2, [pc, #136]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 8004642:	f043 0304 	orr.w	r3, r3, #4
 8004646:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004648:	4b20      	ldr	r3, [pc, #128]	@ (80046cc <HAL_ADC_MspInit+0xf8>)
 800464a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004654:	2303      	movs	r3, #3
 8004656:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004658:	2303      	movs	r3, #3
 800465a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800465c:	2300      	movs	r3, #0
 800465e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004660:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004664:	4619      	mov	r1, r3
 8004666:	481a      	ldr	r0, [pc, #104]	@ (80046d0 <HAL_ADC_MspInit+0xfc>)
 8004668:	f004 fec4 	bl	80093f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800466c:	4b19      	ldr	r3, [pc, #100]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 800466e:	4a1a      	ldr	r2, [pc, #104]	@ (80046d8 <HAL_ADC_MspInit+0x104>)
 8004670:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004672:	4b18      	ldr	r3, [pc, #96]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 8004674:	2205      	movs	r2, #5
 8004676:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004678:	4b16      	ldr	r3, [pc, #88]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 8004680:	2200      	movs	r2, #0
 8004682:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004684:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 8004686:	2280      	movs	r2, #128	@ 0x80
 8004688:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800468a:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 800468c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004690:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004692:	4b10      	ldr	r3, [pc, #64]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 8004694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004698:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800469a:	4b0e      	ldr	r3, [pc, #56]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 800469c:	2220      	movs	r2, #32
 800469e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80046a0:	4b0c      	ldr	r3, [pc, #48]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80046a6:	480b      	ldr	r0, [pc, #44]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 80046a8:	f004 fb72 	bl	8008d90 <HAL_DMA_Init>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80046b2:	f001 f88b 	bl	80057cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a06      	ldr	r2, [pc, #24]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 80046ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80046bc:	4a05      	ldr	r2, [pc, #20]	@ (80046d4 <HAL_ADC_MspInit+0x100>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80046c2:	bf00      	nop
 80046c4:	3778      	adds	r7, #120	@ 0x78
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	48000800 	.word	0x48000800
 80046d4:	200001dc 	.word	0x200001dc
 80046d8:	40020008 	.word	0x40020008

080046dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <MX_DMA_Init+0x90>)
 80046e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046e6:	4a21      	ldr	r2, [pc, #132]	@ (800476c <MX_DMA_Init+0x90>)
 80046e8:	f043 0304 	orr.w	r3, r3, #4
 80046ec:	6493      	str	r3, [r2, #72]	@ 0x48
 80046ee:	4b1f      	ldr	r3, [pc, #124]	@ (800476c <MX_DMA_Init+0x90>)
 80046f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046fa:	4b1c      	ldr	r3, [pc, #112]	@ (800476c <MX_DMA_Init+0x90>)
 80046fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046fe:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <MX_DMA_Init+0x90>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	6493      	str	r3, [r2, #72]	@ 0x48
 8004706:	4b19      	ldr	r3, [pc, #100]	@ (800476c <MX_DMA_Init+0x90>)
 8004708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	603b      	str	r3, [r7, #0]
 8004710:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004712:	2200      	movs	r2, #0
 8004714:	2100      	movs	r1, #0
 8004716:	200b      	movs	r0, #11
 8004718:	f004 fb05 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800471c:	200b      	movs	r0, #11
 800471e:	f004 fb1c 	bl	8008d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004722:	2200      	movs	r2, #0
 8004724:	2100      	movs	r1, #0
 8004726:	200c      	movs	r0, #12
 8004728:	f004 fafd 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800472c:	200c      	movs	r0, #12
 800472e:	f004 fb14 	bl	8008d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004732:	2200      	movs	r2, #0
 8004734:	2100      	movs	r1, #0
 8004736:	200d      	movs	r0, #13
 8004738:	f004 faf5 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800473c:	200d      	movs	r0, #13
 800473e:	f004 fb0c 	bl	8008d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	200e      	movs	r0, #14
 8004748:	f004 faed 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800474c:	200e      	movs	r0, #14
 800474e:	f004 fb04 	bl	8008d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004752:	2200      	movs	r2, #0
 8004754:	2100      	movs	r1, #0
 8004756:	200f      	movs	r0, #15
 8004758:	f004 fae5 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800475c:	200f      	movs	r0, #15
 800475e:	f004 fafc 	bl	8008d5a <HAL_NVIC_EnableIRQ>

}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000

08004770 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08a      	sub	sp, #40	@ 0x28
 8004774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004776:	f107 0314 	add.w	r3, r7, #20
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	609a      	str	r2, [r3, #8]
 8004782:	60da      	str	r2, [r3, #12]
 8004784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004786:	4b55      	ldr	r3, [pc, #340]	@ (80048dc <MX_GPIO_Init+0x16c>)
 8004788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478a:	4a54      	ldr	r2, [pc, #336]	@ (80048dc <MX_GPIO_Init+0x16c>)
 800478c:	f043 0304 	orr.w	r3, r3, #4
 8004790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004792:	4b52      	ldr	r3, [pc, #328]	@ (80048dc <MX_GPIO_Init+0x16c>)
 8004794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800479e:	4b4f      	ldr	r3, [pc, #316]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047a2:	4a4e      	ldr	r2, [pc, #312]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047a4:	f043 0320 	orr.w	r3, r3, #32
 80047a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047aa:	4b4c      	ldr	r3, [pc, #304]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ae:	f003 0320 	and.w	r3, r3, #32
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b6:	4b49      	ldr	r3, [pc, #292]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047ba:	4a48      	ldr	r2, [pc, #288]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047c2:	4b46      	ldr	r3, [pc, #280]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ce:	4b43      	ldr	r3, [pc, #268]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	4a42      	ldr	r2, [pc, #264]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047d4:	f043 0302 	orr.w	r3, r3, #2
 80047d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80047da:	4b40      	ldr	r3, [pc, #256]	@ (80048dc <MX_GPIO_Init+0x16c>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	607b      	str	r3, [r7, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80047e6:	2200      	movs	r2, #0
 80047e8:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80047ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80047f0:	f004 ff9a 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80047f4:	2200      	movs	r2, #0
 80047f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80047fa:	4839      	ldr	r0, [pc, #228]	@ (80048e0 <MX_GPIO_Init+0x170>)
 80047fc:	f004 ff94 	bl	8009728 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004806:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800480a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4619      	mov	r1, r3
 8004816:	4832      	ldr	r0, [pc, #200]	@ (80048e0 <MX_GPIO_Init+0x170>)
 8004818:	f004 fdec 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 800481c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004822:	2301      	movs	r3, #1
 8004824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800482a:	2300      	movs	r3, #0
 800482c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	4619      	mov	r1, r3
 8004834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004838:	f004 fddc 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 800483c:	2306      	movs	r3, #6
 800483e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004840:	2300      	movs	r3, #0
 8004842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004844:	2302      	movs	r3, #2
 8004846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004848:	f107 0314 	add.w	r3, r7, #20
 800484c:	4619      	mov	r1, r3
 800484e:	4825      	ldr	r0, [pc, #148]	@ (80048e4 <MX_GPIO_Init+0x174>)
 8004850:	f004 fdd0 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_PHOTO_Pin EMER_Pin PROX_Pin J1_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin|EMER_Pin|PROX_Pin|J1_Pin;
 8004854:	f241 03b0 	movw	r3, #4272	@ 0x10b0
 8004858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800485a:	2300      	movs	r3, #0
 800485c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485e:	2300      	movs	r3, #0
 8004860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	4619      	mov	r1, r3
 8004868:	481e      	ldr	r0, [pc, #120]	@ (80048e4 <MX_GPIO_Init+0x174>)
 800486a:	f004 fdc3 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800486e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004874:	2301      	movs	r3, #1
 8004876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800487c:	2300      	movs	r3, #0
 800487e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004880:	f107 0314 	add.w	r3, r7, #20
 8004884:	4619      	mov	r1, r3
 8004886:	4816      	ldr	r0, [pc, #88]	@ (80048e0 <MX_GPIO_Init+0x170>)
 8004888:	f004 fdb4 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UPPER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin;
 800488c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UPPER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	4619      	mov	r1, r3
 80048a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048a4:	f004 fda6 	bl	80093f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin J2_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin|J2_Pin;
 80048a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80048ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ae:	2300      	movs	r3, #0
 80048b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	4619      	mov	r1, r3
 80048bc:	4808      	ldr	r0, [pc, #32]	@ (80048e0 <MX_GPIO_Init+0x170>)
 80048be:	f004 fd99 	bl	80093f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	2028      	movs	r0, #40	@ 0x28
 80048c8:	f004 fa2d 	bl	8008d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80048cc:	2028      	movs	r0, #40	@ 0x28
 80048ce:	f004 fa44 	bl	8008d5a <HAL_NVIC_EnableIRQ>

}
 80048d2:	bf00      	nop
 80048d4:	3728      	adds	r7, #40	@ 0x28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	48000800 	.word	0x48000800
 80048e4:	48000400 	.word	0x48000400

080048e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048ec:	f3bf 8f4f 	dsb	sy
}
 80048f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80048f2:	4b06      	ldr	r3, [pc, #24]	@ (800490c <__NVIC_SystemReset+0x24>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80048fa:	4904      	ldr	r1, [pc, #16]	@ (800490c <__NVIC_SystemReset+0x24>)
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <__NVIC_SystemReset+0x28>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004902:	f3bf 8f4f 	dsb	sy
}
 8004906:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <__NVIC_SystemReset+0x20>
 800490c:	e000ed00 	.word	0xe000ed00
 8004910:	05fa0004 	.word	0x05fa0004

08004914 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004918:	f002 fc41 	bl	800719e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800491c:	f000 f874 	bl	8004a08 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004920:	f7ff ff26 	bl	8004770 <MX_GPIO_Init>
	MX_DMA_Init();
 8004924:	f7ff feda 	bl	80046dc <MX_DMA_Init>
	MX_ADC1_Init();
 8004928:	f7ff fdcc 	bl	80044c4 <MX_ADC1_Init>
	MX_TIM2_Init();
 800492c:	f001 fe4c 	bl	80065c8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004930:	f001 fe98 	bl	8006664 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004934:	f001 feec 	bl	8006710 <MX_TIM4_Init>
	MX_TIM5_Init();
 8004938:	f001 ff40 	bl	80067bc <MX_TIM5_Init>
	MX_TIM8_Init();
 800493c:	f001 ff94 	bl	8006868 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004940:	f002 fa56 	bl	8006df0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004944:	f002 f84e 	bl	80069e4 <MX_TIM16_Init>
	MX_TIM1_Init();
 8004948:	f001 fdaa 	bl	80064a0 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800494c:	f002 fa06 	bl	8006d5c <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004950:	f000 ff42 	bl	80057d8 <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (b1 && !button_pressed_previous && !revtrajectoryActive
 8004954:	4b23      	ldr	r3, [pc, #140]	@ (80049e4 <main+0xd0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d032      	beq.n	80049c2 <main+0xae>
 800495c:	4b22      	ldr	r3, [pc, #136]	@ (80049e8 <main+0xd4>)
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d12e      	bne.n	80049c2 <main+0xae>
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <main+0xd8>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	f083 0301 	eor.w	r3, r3, #1
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d027      	beq.n	80049c2 <main+0xae>
				&& !pristrajectoryActive) {
 8004972:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <main+0xdc>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	f083 0301 	eor.w	r3, r3, #1
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d020      	beq.n	80049c2 <main+0xae>
			start_combined_trajectory(
 8004980:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <main+0xe0>)
 8004982:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8004984:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <main+0xe4>)
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 800498e:	4b19      	ldr	r3, [pc, #100]	@ (80049f4 <main+0xe0>)
 8004990:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8004992:	4a1a      	ldr	r2, [pc, #104]	@ (80049fc <main+0xe8>)
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 800499c:	eef0 0a47 	vmov.f32	s1, s14
 80049a0:	eeb0 0a67 	vmov.f32	s0, s15
 80049a4:	f000 f87c 	bl	8004aa0 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 80049a8:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <main+0xe0>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	3301      	adds	r3, #1
 80049ae:	425a      	negs	r2, r3
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	f002 0203 	and.w	r2, r2, #3
 80049b8:	bf58      	it	pl
 80049ba:	4253      	negpl	r3, r2
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	4b0d      	ldr	r3, [pc, #52]	@ (80049f4 <main+0xe0>)
 80049c0:	701a      	strb	r2, [r3, #0]
		}

		button_pressed_previous = b1;
 80049c2:	4b08      	ldr	r3, [pc, #32]	@ (80049e4 <main+0xd0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	4b07      	ldr	r3, [pc, #28]	@ (80049e8 <main+0xd4>)
 80049ca:	701a      	strb	r2, [r3, #0]
		if (b2) {
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <main+0xec>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <main+0xc4>
			start_homing();
 80049d4:	f000 fa0a 	bl	8004dec <start_homing>

//		if (b3) {
//			home = 99;
//		}

		if (b4) {
 80049d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004a04 <main+0xf0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0b9      	beq.n	8004954 <main+0x40>
			NVIC_SystemReset();
 80049e0:	f7ff ff82 	bl	80048e8 <__NVIC_SystemReset>
 80049e4:	2000182c 	.word	0x2000182c
 80049e8:	200002fd 	.word	0x200002fd
 80049ec:	200002b8 	.word	0x200002b8
 80049f0:	20000264 	.word	0x20000264
 80049f4:	200002fc 	.word	0x200002fc
 80049f8:	080106f0 	.word	0x080106f0
 80049fc:	08010700 	.word	0x08010700
 8004a00:	20001830 	.word	0x20001830
 8004a04:	20001838 	.word	0x20001838

08004a08 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b094      	sub	sp, #80	@ 0x50
 8004a0c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004a0e:	f107 0318 	add.w	r3, r7, #24
 8004a12:	2238      	movs	r2, #56	@ 0x38
 8004a14:	2100      	movs	r1, #0
 8004a16:	4618      	mov	r0, r3
 8004a18:	f009 ffae 	bl	800e978 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004a1c:	1d3b      	adds	r3, r7, #4
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	609a      	str	r2, [r3, #8]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f004 feac 	bl	8009788 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a30:	2302      	movs	r3, #2
 8004a32:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a38:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a3a:	2340      	movs	r3, #64	@ 0x40
 8004a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a42:	2302      	movs	r3, #2
 8004a44:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004a46:	2304      	movs	r3, #4
 8004a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8004a4a:	2355      	movs	r3, #85	@ 0x55
 8004a4c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004a52:	2302      	movs	r3, #2
 8004a54:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a56:	2302      	movs	r3, #2
 8004a58:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004a5a:	f107 0318 	add.w	r3, r7, #24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f004 ff46 	bl	80098f0 <HAL_RCC_OscConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <SystemClock_Config+0x66>
		Error_Handler();
 8004a6a:	f000 feaf 	bl	80057cc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004a6e:	230f      	movs	r3, #15
 8004a70:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a72:	2303      	movs	r3, #3
 8004a74:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004a82:	1d3b      	adds	r3, r7, #4
 8004a84:	2104      	movs	r1, #4
 8004a86:	4618      	mov	r0, r3
 8004a88:	f005 fa44 	bl	8009f14 <HAL_RCC_ClockConfig>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <SystemClock_Config+0x8e>
		Error_Handler();
 8004a92:	f000 fe9b 	bl	80057cc <Error_Handler>
	}
}
 8004a96:	bf00      	nop
 8004a98:	3750      	adds	r7, #80	@ 0x50
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
	...

08004aa0 <start_combined_trajectory>:

/* USER CODE BEGIN 4 */
void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	ed2d 8b02 	vpush	{d8}
 8004aa6:	b08d      	sub	sp, #52	@ 0x34
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8004aae:	edc7 0a00 	vstr	s1, [r7]
	// Get current positions
	float pris_current = prismatic_encoder.mm;
 8004ab2:	4bba      	ldr	r3, [pc, #744]	@ (8004d9c <start_combined_trajectory+0x2fc>)
 8004ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
	float rev_current = revolute_encoder.rads;
 8004ab8:	4bb9      	ldr	r3, [pc, #740]	@ (8004da0 <start_combined_trajectory+0x300>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	623b      	str	r3, [r7, #32]

	// Reset trajectory evaluation structs
	prisEva.t = 0.0f;
 8004abe:	4bb9      	ldr	r3, [pc, #740]	@ (8004da4 <start_combined_trajectory+0x304>)
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8004ac6:	4bb7      	ldr	r3, [pc, #732]	@ (8004da4 <start_combined_trajectory+0x304>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004acc:	4bb6      	ldr	r3, [pc, #728]	@ (8004da8 <start_combined_trajectory+0x308>)
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004ad4:	4bb4      	ldr	r3, [pc, #720]	@ (8004da8 <start_combined_trajectory+0x308>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	741a      	strb	r2, [r3, #16]

	// Save initial positions
	pris_initial_p = pris_current;
 8004ada:	4ab4      	ldr	r2, [pc, #720]	@ (8004dac <start_combined_trajectory+0x30c>)
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	6013      	str	r3, [r2, #0]
	rev_initial_p = rev_current;
 8004ae0:	4ab3      	ldr	r2, [pc, #716]	@ (8004db0 <start_combined_trajectory+0x310>)
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	6013      	str	r3, [r2, #0]

	// For prismatic axis - direct target
	pris_target_p = prismatic_target_mm;
 8004ae6:	4ab3      	ldr	r2, [pc, #716]	@ (8004db4 <start_combined_trajectory+0x314>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6013      	str	r3, [r2, #0]

	// For revolute axis - handle path planning
	// Normalize current position to [0, 2π]
	float normalized_current = fmodf(rev_current, 2 * PI);
 8004aec:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8004db8 <start_combined_trajectory+0x318>
 8004af0:	ed97 0a08 	vldr	s0, [r7, #32]
 8004af4:	f009 ffe8 	bl	800eac8 <fmodf>
 8004af8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	if (normalized_current < 0) {
 8004afc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b08:	d507      	bpl.n	8004b1a <start_combined_trajectory+0x7a>
		normalized_current += 2 * PI;
 8004b0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b0e:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8004db8 <start_combined_trajectory+0x318>
 8004b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b16:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	}

	// Convert target to radians
	float target_radians = UnitConverter_angle(&converter_system,
 8004b1a:	220f      	movs	r2, #15
 8004b1c:	210e      	movs	r1, #14
 8004b1e:	ed97 0a00 	vldr	s0, [r7]
 8004b22:	48a6      	ldr	r0, [pc, #664]	@ (8004dbc <start_combined_trajectory+0x31c>)
 8004b24:	f7ff fca4 	bl	8004470 <UnitConverter_angle>
 8004b28:	ed87 0a07 	vstr	s0, [r7, #28]
			revolute_target_deg, UNIT_DEGREE, UNIT_RADIAN);

	// Normalize target to [0, 2π]
	float normalized_target = fmodf(target_radians, 2 * PI);
 8004b2c:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8004db8 <start_combined_trajectory+0x318>
 8004b30:	ed97 0a07 	vldr	s0, [r7, #28]
 8004b34:	f009 ffc8 	bl	800eac8 <fmodf>
 8004b38:	ed87 0a06 	vstr	s0, [r7, #24]
	if (normalized_target < 0) {
 8004b3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d507      	bpl.n	8004b5a <start_combined_trajectory+0xba>
		normalized_target += 2 * PI;
 8004b4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b4e:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8004db8 <start_combined_trajectory+0x318>
 8004b52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b56:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// Convert to degrees for easier logic
	float current_deg = normalized_current * 180.0f / PI;
 8004b5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004b5e:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004b62:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004b66:	eddf 6a97 	vldr	s13, [pc, #604]	@ 8004dc4 <start_combined_trajectory+0x324>
 8004b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b6e:	edc7 7a05 	vstr	s15, [r7, #20]
	float target_deg = revolute_target_deg;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	613b      	str	r3, [r7, #16]

	// Define explicit rules for movements
	float movement_deg = 0.0f;
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

	// If both angles are on the same side of 180°
	if ((current_deg < 180 && target_deg < 180)
 8004b7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b80:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	d508      	bpl.n	8004ba0 <start_combined_trajectory+0x100>
 8004b8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b92:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b9e:	d411      	bmi.n	8004bc4 <start_combined_trajectory+0x124>
			|| (current_deg >= 180 && target_deg >= 180)) {
 8004ba0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ba4:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	db33      	blt.n	8004c1a <start_combined_trajectory+0x17a>
 8004bb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004bb6:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004bba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bc2:	db2a      	blt.n	8004c1a <start_combined_trajectory+0x17a>

		// Simple case - take shortest path
		movement_deg = target_deg - current_deg;
 8004bc4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Ensure shortest path
		if (movement_deg > 180)
 8004bd4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004bd8:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	dd07      	ble.n	8004bf6 <start_combined_trajectory+0x156>
			movement_deg -= 360;
 8004be6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004bea:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bf2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (movement_deg < -180)
 8004bf6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004bfa:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8004dcc <start_combined_trajectory+0x32c>
 8004bfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c06:	d562      	bpl.n	8004cce <start_combined_trajectory+0x22e>
			movement_deg += 360;
 8004c08:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004c0c:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004c10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c14:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (movement_deg < -180)
 8004c18:	e059      	b.n	8004cce <start_combined_trajectory+0x22e>
	}
	// If we need to cross the 180° boundary
	else {
		// Explicitly determine direction to avoid crossing 180°
		if (current_deg < 180) {
 8004c1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c1e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004c22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c2a:	d52a      	bpl.n	8004c82 <start_combined_trajectory+0x1e2>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180) {
 8004c2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c30:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004c34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c38:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c44:	d50e      	bpl.n	8004c64 <start_combined_trajectory+0x1c4>
				movement_deg = -(current_deg + (360 - target_deg)); // Negative = clockwise
 8004c46:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004c4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c5a:	eef1 7a67 	vneg.f32	s15, s15
 8004c5e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004c62:	e034      	b.n	8004cce <start_combined_trajectory+0x22e>
			} else {
				movement_deg = -(current_deg - target_deg + 360); // Negative = clockwise
 8004c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c68:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c70:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c78:	eef1 7a67 	vneg.f32	s15, s15
 8004c7c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004c80:	e025      	b.n	8004cce <start_combined_trajectory+0x22e>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180) {
 8004c82:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c86:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9a:	d50c      	bpl.n	8004cb6 <start_combined_trajectory+0x216>
				movement_deg = 360 - current_deg + target_deg; // Positive = counterclockwise
 8004c9c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004ca0:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca8:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
 8004cb4:	e00b      	b.n	8004cce <start_combined_trajectory+0x22e>
			} else {
				movement_deg = target_deg - current_deg + 360; // Positive = counterclockwise
 8004cb6:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cc2:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8004dc8 <start_combined_trajectory+0x328>
 8004cc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004cca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
			}
		}
	}

	// Convert to radians and apply to absolute position
	float movement_rad = movement_deg * PI / 180.0f;
 8004cce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004cd2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8004dc4 <start_combined_trajectory+0x324>
 8004cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cda:	eddf 6a39 	vldr	s13, [pc, #228]	@ 8004dc0 <start_combined_trajectory+0x320>
 8004cde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ce2:	edc7 7a03 	vstr	s15, [r7, #12]
	rev_target_p = rev_initial_p + movement_rad;
 8004ce6:	4b32      	ldr	r3, [pc, #200]	@ (8004db0 <start_combined_trajectory+0x310>)
 8004ce8:	ed93 7a00 	vldr	s14, [r3]
 8004cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf4:	4b36      	ldr	r3, [pc, #216]	@ (8004dd0 <start_combined_trajectory+0x330>)
 8004cf6:	edc3 7a00 	vstr	s15, [r3]

	// Generate trajectories
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8004dac <start_combined_trajectory+0x30c>)
 8004cfc:	ed93 8a00 	vldr	s16, [r3]
 8004d00:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <start_combined_trajectory+0x314>)
 8004d02:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 8004d06:	4b33      	ldr	r3, [pc, #204]	@ (8004dd4 <start_combined_trajectory+0x334>)
 8004d08:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4619      	mov	r1, r3
 8004d10:	f7fb ff20 	bl	8000b54 <__aeabi_d2f>
 8004d14:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 8004d16:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <start_combined_trajectory+0x334>)
 8004d18:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004d1c:	4610      	mov	r0, r2
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7fb ff18 	bl	8000b54 <__aeabi_d2f>
 8004d24:	4603      	mov	r3, r0
 8004d26:	ee01 3a90 	vmov	s3, r3
 8004d2a:	ee01 4a10 	vmov	s2, r4
 8004d2e:	eef0 0a68 	vmov.f32	s1, s17
 8004d32:	eeb0 0a48 	vmov.f32	s0, s16
 8004d36:	4828      	ldr	r0, [pc, #160]	@ (8004dd8 <start_combined_trajectory+0x338>)
 8004d38:	f7fe ff41 	bl	8003bbe <Trapezoidal_Generator>

	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004db0 <start_combined_trajectory+0x310>)
 8004d3e:	ed93 8a00 	vldr	s16, [r3]
 8004d42:	4b23      	ldr	r3, [pc, #140]	@ (8004dd0 <start_combined_trajectory+0x330>)
 8004d44:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 8004d48:	4b24      	ldr	r3, [pc, #144]	@ (8004ddc <start_combined_trajectory+0x33c>)
 8004d4a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4619      	mov	r1, r3
 8004d52:	f7fb feff 	bl	8000b54 <__aeabi_d2f>
 8004d56:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <start_combined_trajectory+0x33c>)
 8004d5a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	f7fb fef7 	bl	8000b54 <__aeabi_d2f>
 8004d66:	4603      	mov	r3, r0
 8004d68:	ee01 3a90 	vmov	s3, r3
 8004d6c:	ee01 4a10 	vmov	s2, r4
 8004d70:	eef0 0a68 	vmov.f32	s1, s17
 8004d74:	eeb0 0a48 	vmov.f32	s0, s16
 8004d78:	4819      	ldr	r0, [pc, #100]	@ (8004de0 <start_combined_trajectory+0x340>)
 8004d7a:	f7fe ff20 	bl	8003bbe <Trapezoidal_Generator>

	plotter_pen_up();
 8004d7e:	f001 f99f 	bl	80060c0 <plotter_pen_up>

	pristrajectoryActive = true;
 8004d82:	4b18      	ldr	r3, [pc, #96]	@ (8004de4 <start_combined_trajectory+0x344>)
 8004d84:	2201      	movs	r2, #1
 8004d86:	701a      	strb	r2, [r3, #0]
	revtrajectoryActive = true;
 8004d88:	4b17      	ldr	r3, [pc, #92]	@ (8004de8 <start_combined_trajectory+0x348>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	701a      	strb	r2, [r3, #0]
}
 8004d8e:	bf00      	nop
 8004d90:	3734      	adds	r7, #52	@ 0x34
 8004d92:	46bd      	mov	sp, r7
 8004d94:	ecbd 8b02 	vpop	{d8}
 8004d98:	bd90      	pop	{r4, r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	200003b0 	.word	0x200003b0
 8004da0:	2000040c 	.word	0x2000040c
 8004da4:	20000250 	.word	0x20000250
 8004da8:	200002a4 	.word	0x200002a4
 8004dac:	20000268 	.word	0x20000268
 8004db0:	200002bc 	.word	0x200002bc
 8004db4:	2000026c 	.word	0x2000026c
 8004db8:	40c90fdb 	.word	0x40c90fdb
 8004dbc:	2000077c 	.word	0x2000077c
 8004dc0:	43340000 	.word	0x43340000
 8004dc4:	40490fdb 	.word	0x40490fdb
 8004dc8:	43b40000 	.word	0x43b40000
 8004dcc:	c3340000 	.word	0xc3340000
 8004dd0:	200002c0 	.word	0x200002c0
 8004dd4:	20000060 	.word	0x20000060
 8004dd8:	2000023c 	.word	0x2000023c
 8004ddc:	20000000 	.word	0x20000000
 8004de0:	20000290 	.word	0x20000290
 8004de4:	20000264 	.word	0x20000264
 8004de8:	200002b8 	.word	0x200002b8

08004dec <start_homing>:

void start_homing() {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
	// Initialize homing state
	homing_in_progress = true;
 8004df0:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <start_homing+0x24>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	701a      	strb	r2, [r3, #0]
	prismatic_homed = false;
 8004df6:	4b07      	ldr	r3, [pc, #28]	@ (8004e14 <start_homing+0x28>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
	revolute_homed = false;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <start_homing+0x2c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]

	// First ensure pen is up
	plotter_pen_up();
 8004e02:	f001 f95d 	bl	80060c0 <plotter_pen_up>

	// Enter homing state
	home = 1; // This triggers your existing homing sequence in the timer callback
 8004e06:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <start_homing+0x30>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	200002f4 	.word	0x200002f4
 8004e14:	200002f5 	.word	0x200002f5
 8004e18:	200002f6 	.word	0x200002f6
 8004e1c:	200002f8 	.word	0x200002f8

08004e20 <update_control_loops>:

void update_control_loops() {
 8004e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e24:	ed2d 8b02 	vpush	{d8}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
	// Normalize revolute position
	cur_pos = fmodf(revolute_encoder.rads, 2 * PI);
 8004e2c:	4ba5      	ldr	r3, [pc, #660]	@ (80050c4 <update_control_loops+0x2a4>)
 8004e2e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004e32:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 80050c8 <update_control_loops+0x2a8>
 8004e36:	eeb0 0a67 	vmov.f32	s0, s15
 8004e3a:	f009 fe45 	bl	800eac8 <fmodf>
 8004e3e:	eef0 7a40 	vmov.f32	s15, s0
 8004e42:	4ba2      	ldr	r3, [pc, #648]	@ (80050cc <update_control_loops+0x2ac>)
 8004e44:	edc3 7a00 	vstr	s15, [r3]
	if (cur_pos < 0) {
 8004e48:	4ba0      	ldr	r3, [pc, #640]	@ (80050cc <update_control_loops+0x2ac>)
 8004e4a:	edd3 7a00 	vldr	s15, [r3]
 8004e4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e56:	d509      	bpl.n	8004e6c <update_control_loops+0x4c>
		cur_pos += 2 * PI;
 8004e58:	4b9c      	ldr	r3, [pc, #624]	@ (80050cc <update_control_loops+0x2ac>)
 8004e5a:	edd3 7a00 	vldr	s15, [r3]
 8004e5e:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 80050c8 <update_control_loops+0x2a8>
 8004e62:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e66:	4b99      	ldr	r3, [pc, #612]	@ (80050cc <update_control_loops+0x2ac>)
 8004e68:	edc3 7a00 	vstr	s15, [r3]
	}

	// Calculate angle in degrees for display/debugging
	deg = UnitConverter_angle(&converter_system, cur_pos, UNIT_RADIAN,
 8004e6c:	4b97      	ldr	r3, [pc, #604]	@ (80050cc <update_control_loops+0x2ac>)
 8004e6e:	edd3 7a00 	vldr	s15, [r3]
 8004e72:	220e      	movs	r2, #14
 8004e74:	210f      	movs	r1, #15
 8004e76:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7a:	4895      	ldr	r0, [pc, #596]	@ (80050d0 <update_control_loops+0x2b0>)
 8004e7c:	f7ff faf8 	bl	8004470 <UnitConverter_angle>
 8004e80:	eef0 7a40 	vmov.f32	s15, s0
 8004e84:	4b93      	ldr	r3, [pc, #588]	@ (80050d4 <update_control_loops+0x2b4>)
 8004e86:	edc3 7a00 	vstr	s15, [r3]
			UNIT_DEGREE);

	// Update prismatic trajectory if active
	if (pristrajectoryActive && !prisEva.isFinised) {
 8004e8a:	4b93      	ldr	r3, [pc, #588]	@ (80050d8 <update_control_loops+0x2b8>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d047      	beq.n	8004f22 <update_control_loops+0x102>
 8004e92:	4b92      	ldr	r3, [pc, #584]	@ (80050dc <update_control_loops+0x2bc>)
 8004e94:	7c1b      	ldrb	r3, [r3, #16]
 8004e96:	f083 0301 	eor.w	r3, r3, #1
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d040      	beq.n	8004f22 <update_control_loops+0x102>
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004ea0:	4b8f      	ldr	r3, [pc, #572]	@ (80050e0 <update_control_loops+0x2c0>)
 8004ea2:	ed93 8a00 	vldr	s16, [r3]
 8004ea6:	4b8f      	ldr	r3, [pc, #572]	@ (80050e4 <update_control_loops+0x2c4>)
 8004ea8:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_400RPM_Constant.sd_max,
 8004eac:	4b8e      	ldr	r3, [pc, #568]	@ (80050e8 <update_control_loops+0x2c8>)
 8004eae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f7fb fe4d 	bl	8000b54 <__aeabi_d2f>
 8004eba:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8004ebc:	4b8a      	ldr	r3, [pc, #552]	@ (80050e8 <update_control_loops+0x2c8>)
 8004ebe:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f7fb fe45 	bl	8000b54 <__aeabi_d2f>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	ee01 3a90 	vmov	s3, r3
 8004ed0:	ee01 4a10 	vmov	s2, r4
 8004ed4:	eef0 0a68 	vmov.f32	s1, s17
 8004ed8:	eeb0 0a48 	vmov.f32	s0, s16
 8004edc:	497f      	ldr	r1, [pc, #508]	@ (80050dc <update_control_loops+0x2bc>)
 8004ede:	4883      	ldr	r0, [pc, #524]	@ (80050ec <update_control_loops+0x2cc>)
 8004ee0:	f7fe ff2e 	bl	8003d40 <Trapezoidal_Evaluated>

		prismatic_pos = prisEva.setposition;
 8004ee4:	4b7d      	ldr	r3, [pc, #500]	@ (80050dc <update_control_loops+0x2bc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a81      	ldr	r2, [pc, #516]	@ (80050f0 <update_control_loops+0x2d0>)
 8004eea:	6013      	str	r3, [r2, #0]
		prismatic_vel = prisEva.setvelocity;
 8004eec:	4b7b      	ldr	r3, [pc, #492]	@ (80050dc <update_control_loops+0x2bc>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4a80      	ldr	r2, [pc, #512]	@ (80050f4 <update_control_loops+0x2d4>)
 8004ef2:	6013      	str	r3, [r2, #0]

		if (prisEva.isFinised) {
 8004ef4:	4b79      	ldr	r3, [pc, #484]	@ (80050dc <update_control_loops+0x2bc>)
 8004ef6:	7c1b      	ldrb	r3, [r3, #16]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <update_control_loops+0x102>
			pristrajectoryActive = false;
 8004efc:	4a76      	ldr	r2, [pc, #472]	@ (80050d8 <update_control_loops+0x2b8>)
 8004efe:	2300      	movs	r3, #0
 8004f00:	7013      	strb	r3, [r2, #0]
			prismatic_pos = prisEva.setposition;
 8004f02:	4b76      	ldr	r3, [pc, #472]	@ (80050dc <update_control_loops+0x2bc>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a7a      	ldr	r2, [pc, #488]	@ (80050f0 <update_control_loops+0x2d0>)
 8004f08:	6013      	str	r3, [r2, #0]
			prismatic_vel = 0.0f;
 8004f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80050f4 <update_control_loops+0x2d4>)
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	601a      	str	r2, [r3, #0]
			pris_dfd = 0.0;
 8004f12:	4b79      	ldr	r3, [pc, #484]	@ (80050f8 <update_control_loops+0x2d8>)
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]
			pris_ffd = 0.0;
 8004f1a:	4b78      	ldr	r3, [pc, #480]	@ (80050fc <update_control_loops+0x2dc>)
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
		}
	}

	// Update revolute trajectory if active
	if (revtrajectoryActive && !revEva.isFinised) {
 8004f22:	4b77      	ldr	r3, [pc, #476]	@ (8005100 <update_control_loops+0x2e0>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d047      	beq.n	8004fba <update_control_loops+0x19a>
 8004f2a:	4b76      	ldr	r3, [pc, #472]	@ (8005104 <update_control_loops+0x2e4>)
 8004f2c:	7c1b      	ldrb	r3, [r3, #16]
 8004f2e:	f083 0301 	eor.w	r3, r3, #1
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d040      	beq.n	8004fba <update_control_loops+0x19a>
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004f38:	4b73      	ldr	r3, [pc, #460]	@ (8005108 <update_control_loops+0x2e8>)
 8004f3a:	ed93 8a00 	vldr	s16, [r3]
 8004f3e:	4b73      	ldr	r3, [pc, #460]	@ (800510c <update_control_loops+0x2ec>)
 8004f40:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_150RPM_Constant.qd_max,
 8004f44:	4b72      	ldr	r3, [pc, #456]	@ (8005110 <update_control_loops+0x2f0>)
 8004f46:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f7fb fe01 	bl	8000b54 <__aeabi_d2f>
 8004f52:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 8004f54:	4b6e      	ldr	r3, [pc, #440]	@ (8005110 <update_control_loops+0x2f0>)
 8004f56:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	f7fb fdf9 	bl	8000b54 <__aeabi_d2f>
 8004f62:	4603      	mov	r3, r0
 8004f64:	ee01 3a90 	vmov	s3, r3
 8004f68:	ee01 4a10 	vmov	s2, r4
 8004f6c:	eef0 0a68 	vmov.f32	s1, s17
 8004f70:	eeb0 0a48 	vmov.f32	s0, s16
 8004f74:	4963      	ldr	r1, [pc, #396]	@ (8005104 <update_control_loops+0x2e4>)
 8004f76:	4867      	ldr	r0, [pc, #412]	@ (8005114 <update_control_loops+0x2f4>)
 8004f78:	f7fe fee2 	bl	8003d40 <Trapezoidal_Evaluated>

		revolute_pos = revEva.setposition;
 8004f7c:	4b61      	ldr	r3, [pc, #388]	@ (8005104 <update_control_loops+0x2e4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a65      	ldr	r2, [pc, #404]	@ (8005118 <update_control_loops+0x2f8>)
 8004f82:	6013      	str	r3, [r2, #0]
		revolute_vel = revEva.setvelocity;
 8004f84:	4b5f      	ldr	r3, [pc, #380]	@ (8005104 <update_control_loops+0x2e4>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	4a64      	ldr	r2, [pc, #400]	@ (800511c <update_control_loops+0x2fc>)
 8004f8a:	6013      	str	r3, [r2, #0]

		if (revEva.isFinised) {
 8004f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005104 <update_control_loops+0x2e4>)
 8004f8e:	7c1b      	ldrb	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d012      	beq.n	8004fba <update_control_loops+0x19a>
			revtrajectoryActive = false;
 8004f94:	4a5a      	ldr	r2, [pc, #360]	@ (8005100 <update_control_loops+0x2e0>)
 8004f96:	2300      	movs	r3, #0
 8004f98:	7013      	strb	r3, [r2, #0]
			revolute_pos = revEva.setposition;
 8004f9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005104 <update_control_loops+0x2e4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005118 <update_control_loops+0x2f8>)
 8004fa0:	6013      	str	r3, [r2, #0]
			revolute_vel = 0.0f;
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800511c <update_control_loops+0x2fc>)
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
			rev_dfd = 0.0;
 8004faa:	4b5d      	ldr	r3, [pc, #372]	@ (8005120 <update_control_loops+0x300>)
 8004fac:	f04f 0200 	mov.w	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
			rev_ffd = 0.0;
 8004fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8005124 <update_control_loops+0x304>)
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
		}
	}

	// Calculate control signals for prismatic axis
	pris_vin = mapf(pris_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 8004fba:	4b5b      	ldr	r3, [pc, #364]	@ (8005128 <update_control_loops+0x308>)
 8004fbc:	edd3 7a00 	vldr	s15, [r3]
 8004fc0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8004fc4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8004fc8:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 800512c <update_control_loops+0x30c>
 8004fcc:	eddf 0a58 	vldr	s1, [pc, #352]	@ 8005130 <update_control_loops+0x310>
 8004fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004fd4:	f7fc fe02 	bl	8001bdc <mapf>
 8004fd8:	eef0 7a40 	vmov.f32	s15, s0
 8004fdc:	4b55      	ldr	r3, [pc, #340]	@ (8005134 <update_control_loops+0x314>)
 8004fde:	edc3 7a00 	vstr	s15, [r3]

	pris_kal_filt = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8004fe2:	4b54      	ldr	r3, [pc, #336]	@ (8005134 <update_control_loops+0x314>)
 8004fe4:	edd3 7a00 	vldr	s15, [r3]
 8004fe8:	4b53      	ldr	r3, [pc, #332]	@ (8005138 <update_control_loops+0x318>)
 8004fea:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004fee:	eef0 0a47 	vmov.f32	s1, s14
 8004ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff6:	4851      	ldr	r0, [pc, #324]	@ (800513c <update_control_loops+0x31c>)
 8004ff8:	f7fd fdbe 	bl	8002b78 <MotorKalman_Estimate>
 8004ffc:	eeb0 7a40 	vmov.f32	s14, s0
			prismatic_encoder.rads)
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8005000:	4b4f      	ldr	r3, [pc, #316]	@ (8005140 <update_control_loops+0x320>)
 8005002:	edd3 7a04 	vldr	s15, [r3, #16]
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8005144 <update_control_loops+0x324>
 800500e:	ee67 7a87 	vmul.f32	s15, s15, s14
	pris_kal_filt = MotorKalman_Estimate(&prismatic_kalman, pris_vin,
 8005012:	4b4d      	ldr	r3, [pc, #308]	@ (8005148 <update_control_loops+0x328>)
 8005014:	edc3 7a00 	vstr	s15, [r3]

	if (isnan(pris_kal_filt)) {
 8005018:	4b4b      	ldr	r3, [pc, #300]	@ (8005148 <update_control_loops+0x328>)
 800501a:	edd3 7a00 	vldr	s15, [r3]
 800501e:	eef4 7a67 	vcmp.f32	s15, s15
 8005022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005026:	d703      	bvc.n	8005030 <update_control_loops+0x210>
		pris_kal_filt = 0.0f;
 8005028:	4b47      	ldr	r3, [pc, #284]	@ (8005148 <update_control_loops+0x328>)
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
	}

	pris_pos_error = prismatic_pos - prismatic_encoder.mm;
 8005030:	4b2f      	ldr	r3, [pc, #188]	@ (80050f0 <update_control_loops+0x2d0>)
 8005032:	ed93 7a00 	vldr	s14, [r3]
 8005036:	4b40      	ldr	r3, [pc, #256]	@ (8005138 <update_control_loops+0x318>)
 8005038:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800503c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005040:	4b42      	ldr	r3, [pc, #264]	@ (800514c <update_control_loops+0x32c>)
 8005042:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_vx = PWM_Satuation(
 8005046:	4b41      	ldr	r3, [pc, #260]	@ (800514c <update_control_loops+0x32c>)
 8005048:	edd3 7a00 	vldr	s15, [r3]
 800504c:	eeb0 0a67 	vmov.f32	s0, s15
 8005050:	483f      	ldr	r0, [pc, #252]	@ (8005150 <update_control_loops+0x330>)
 8005052:	f7fc f8e1 	bl	8001218 <PID_CONTROLLER_Compute>
 8005056:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid, pris_pos_error),
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 800505a:	4b23      	ldr	r3, [pc, #140]	@ (80050e8 <update_control_loops+0x2c8>)
 800505c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	pris_cmd_vx = PWM_Satuation(
 8005060:	4610      	mov	r0, r2
 8005062:	4619      	mov	r1, r3
 8005064:	f7fb fd2e 	bl	8000ac4 <__aeabi_d2iz>
 8005068:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 800506a:	4b1f      	ldr	r3, [pc, #124]	@ (80050e8 <update_control_loops+0x2c8>)
 800506c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8005070:	4690      	mov	r8, r2
 8005072:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	pris_cmd_vx = PWM_Satuation(
 8005076:	4640      	mov	r0, r8
 8005078:	4649      	mov	r1, r9
 800507a:	f7fb fd23 	bl	8000ac4 <__aeabi_d2iz>
 800507e:	4603      	mov	r3, r0
 8005080:	4619      	mov	r1, r3
 8005082:	4620      	mov	r0, r4
 8005084:	eeb0 0a48 	vmov.f32	s0, s16
 8005088:	f7fc f864 	bl	8001154 <PWM_Satuation>
 800508c:	ee07 0a90 	vmov	s15, r0
 8005090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005094:	4b2f      	ldr	r3, [pc, #188]	@ (8005154 <update_control_loops+0x334>)
 8005096:	edc3 7a00 	vstr	s15, [r3]

	// Add velocity feedforward for trajectory
	if (pristrajectoryActive) {
 800509a:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <update_control_loops+0x2b8>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d05c      	beq.n	800515c <update_control_loops+0x33c>
		pris_vel_error = pris_cmd_vx + prismatic_vel - pris_kal_filt;
 80050a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005154 <update_control_loops+0x334>)
 80050a4:	ed93 7a00 	vldr	s14, [r3]
 80050a8:	4b12      	ldr	r3, [pc, #72]	@ (80050f4 <update_control_loops+0x2d4>)
 80050aa:	edd3 7a00 	vldr	s15, [r3]
 80050ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050b2:	4b25      	ldr	r3, [pc, #148]	@ (8005148 <update_control_loops+0x328>)
 80050b4:	edd3 7a00 	vldr	s15, [r3]
 80050b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <update_control_loops+0x338>)
 80050be:	edc3 7a00 	vstr	s15, [r3]
 80050c2:	e056      	b.n	8005172 <update_control_loops+0x352>
 80050c4:	2000040c 	.word	0x2000040c
 80050c8:	40c90fdb 	.word	0x40c90fdb
 80050cc:	20000300 	.word	0x20000300
 80050d0:	2000077c 	.word	0x2000077c
 80050d4:	20000304 	.word	0x20000304
 80050d8:	20000264 	.word	0x20000264
 80050dc:	20000250 	.word	0x20000250
 80050e0:	20000268 	.word	0x20000268
 80050e4:	2000026c 	.word	0x2000026c
 80050e8:	20000060 	.word	0x20000060
 80050ec:	2000023c 	.word	0x2000023c
 80050f0:	20000270 	.word	0x20000270
 80050f4:	20000274 	.word	0x20000274
 80050f8:	200002ec 	.word	0x200002ec
 80050fc:	200002f0 	.word	0x200002f0
 8005100:	200002b8 	.word	0x200002b8
 8005104:	200002a4 	.word	0x200002a4
 8005108:	200002bc 	.word	0x200002bc
 800510c:	200002c0 	.word	0x200002c0
 8005110:	20000000 	.word	0x20000000
 8005114:	20000290 	.word	0x20000290
 8005118:	200002c4 	.word	0x200002c4
 800511c:	200002c8 	.word	0x200002c8
 8005120:	200002e4 	.word	0x200002e4
 8005124:	200002e8 	.word	0x200002e8
 8005128:	20000288 	.word	0x20000288
 800512c:	477fff00 	.word	0x477fff00
 8005130:	c77fff00 	.word	0xc77fff00
 8005134:	20000284 	.word	0x20000284
 8005138:	200003b0 	.word	0x200003b0
 800513c:	20000a04 	.word	0x20000a04
 8005140:	200000c0 	.word	0x200000c0
 8005144:	447a0000 	.word	0x447a0000
 8005148:	20000280 	.word	0x20000280
 800514c:	20000278 	.word	0x20000278
 8005150:	20000468 	.word	0x20000468
 8005154:	2000028c 	.word	0x2000028c
 8005158:	2000027c 	.word	0x2000027c
	} else {
		pris_vel_error = pris_cmd_vx - pris_kal_filt;
 800515c:	4b6d      	ldr	r3, [pc, #436]	@ (8005314 <update_control_loops+0x4f4>)
 800515e:	ed93 7a00 	vldr	s14, [r3]
 8005162:	4b6d      	ldr	r3, [pc, #436]	@ (8005318 <update_control_loops+0x4f8>)
 8005164:	edd3 7a00 	vldr	s15, [r3]
 8005168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800516c:	4b6b      	ldr	r3, [pc, #428]	@ (800531c <update_control_loops+0x4fc>)
 800516e:	edc3 7a00 	vstr	s15, [r3]
	}

	pris_cmd_ux = PWM_Satuation(
 8005172:	4b6a      	ldr	r3, [pc, #424]	@ (800531c <update_control_loops+0x4fc>)
 8005174:	edd3 7a00 	vldr	s15, [r3]
 8005178:	eeb0 0a67 	vmov.f32	s0, s15
 800517c:	4868      	ldr	r0, [pc, #416]	@ (8005320 <update_control_loops+0x500>)
 800517e:	f7fc f84b 	bl	8001218 <PID_CONTROLLER_Compute>
 8005182:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid, pris_vel_error),
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005186:	4b67      	ldr	r3, [pc, #412]	@ (8005324 <update_control_loops+0x504>)
 8005188:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	pris_cmd_ux = PWM_Satuation(
 800518c:	4610      	mov	r0, r2
 800518e:	4619      	mov	r1, r3
 8005190:	f7fb fc98 	bl	8000ac4 <__aeabi_d2iz>
 8005194:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8005196:	4b63      	ldr	r3, [pc, #396]	@ (8005324 <update_control_loops+0x504>)
 8005198:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800519c:	613a      	str	r2, [r7, #16]
 800519e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80051a2:	617b      	str	r3, [r7, #20]
	pris_cmd_ux = PWM_Satuation(
 80051a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051a8:	f7fb fc8c 	bl	8000ac4 <__aeabi_d2iz>
 80051ac:	4603      	mov	r3, r0
 80051ae:	4619      	mov	r1, r3
 80051b0:	4620      	mov	r0, r4
 80051b2:	eeb0 0a48 	vmov.f32	s0, s16
 80051b6:	f7fb ffcd 	bl	8001154 <PWM_Satuation>
 80051ba:	ee07 0a90 	vmov	s15, r0
 80051be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80051c2:	4b59      	ldr	r3, [pc, #356]	@ (8005328 <update_control_loops+0x508>)
 80051c4:	edc3 7a00 	vstr	s15, [r3]

	// Calculate control signals for revolute axis
	rev_vin = mapf(rev_cmd_ux, -65535.0, 65535.0, -12.0, 12.0);
 80051c8:	4b58      	ldr	r3, [pc, #352]	@ (800532c <update_control_loops+0x50c>)
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80051d2:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80051d6:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8005330 <update_control_loops+0x510>
 80051da:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8005334 <update_control_loops+0x514>
 80051de:	eeb0 0a67 	vmov.f32	s0, s15
 80051e2:	f7fc fcfb 	bl	8001bdc <mapf>
 80051e6:	eef0 7a40 	vmov.f32	s15, s0
 80051ea:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <update_control_loops+0x518>)
 80051ec:	edc3 7a00 	vstr	s15, [r3]

	rev_kal_filt = MotorKalman_Estimate(&revolute_kalman, rev_vin,
 80051f0:	4b51      	ldr	r3, [pc, #324]	@ (8005338 <update_control_loops+0x518>)
 80051f2:	edd3 7a00 	vldr	s15, [r3]
 80051f6:	4b51      	ldr	r3, [pc, #324]	@ (800533c <update_control_loops+0x51c>)
 80051f8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80051fc:	eef0 0a47 	vmov.f32	s1, s14
 8005200:	eeb0 0a67 	vmov.f32	s0, s15
 8005204:	484e      	ldr	r0, [pc, #312]	@ (8005340 <update_control_loops+0x520>)
 8005206:	f7fd fcb7 	bl	8002b78 <MotorKalman_Estimate>
 800520a:	eef0 7a40 	vmov.f32	s15, s0
 800520e:	4b4d      	ldr	r3, [pc, #308]	@ (8005344 <update_control_loops+0x524>)
 8005210:	edc3 7a00 	vstr	s15, [r3]
			revolute_encoder.rads);

	if (isnan(rev_kal_filt)) {
 8005214:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <update_control_loops+0x524>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	eef4 7a67 	vcmp.f32	s15, s15
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	d703      	bvc.n	800522c <update_control_loops+0x40c>
		rev_kal_filt = 0.0f;
 8005224:	4b47      	ldr	r3, [pc, #284]	@ (8005344 <update_control_loops+0x524>)
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
	}

	rev_pos_error = revolute_pos - cur_pos;
 800522c:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <update_control_loops+0x528>)
 800522e:	ed93 7a00 	vldr	s14, [r3]
 8005232:	4b46      	ldr	r3, [pc, #280]	@ (800534c <update_control_loops+0x52c>)
 8005234:	edd3 7a00 	vldr	s15, [r3]
 8005238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800523c:	4b44      	ldr	r3, [pc, #272]	@ (8005350 <update_control_loops+0x530>)
 800523e:	edc3 7a00 	vstr	s15, [r3]

	// Ensure error uses the shortest path for control
	if (rev_pos_error > PI) {
 8005242:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <update_control_loops+0x530>)
 8005244:	edd3 7a00 	vldr	s15, [r3]
 8005248:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005354 <update_control_loops+0x534>
 800524c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005254:	dd09      	ble.n	800526a <update_control_loops+0x44a>
		rev_pos_error -= 2 * PI;
 8005256:	4b3e      	ldr	r3, [pc, #248]	@ (8005350 <update_control_loops+0x530>)
 8005258:	edd3 7a00 	vldr	s15, [r3]
 800525c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8005358 <update_control_loops+0x538>
 8005260:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005264:	4b3a      	ldr	r3, [pc, #232]	@ (8005350 <update_control_loops+0x530>)
 8005266:	edc3 7a00 	vstr	s15, [r3]
	}
	if (rev_pos_error < -PI) {
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <update_control_loops+0x530>)
 800526c:	edd3 7a00 	vldr	s15, [r3]
 8005270:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800535c <update_control_loops+0x53c>
 8005274:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527c:	d509      	bpl.n	8005292 <update_control_loops+0x472>
		rev_pos_error += 2 * PI;
 800527e:	4b34      	ldr	r3, [pc, #208]	@ (8005350 <update_control_loops+0x530>)
 8005280:	edd3 7a00 	vldr	s15, [r3]
 8005284:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005358 <update_control_loops+0x538>
 8005288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800528c:	4b30      	ldr	r3, [pc, #192]	@ (8005350 <update_control_loops+0x530>)
 800528e:	edc3 7a00 	vstr	s15, [r3]
	}

	rev_cmd_vx = PWM_Satuation(
 8005292:	4b2f      	ldr	r3, [pc, #188]	@ (8005350 <update_control_loops+0x530>)
 8005294:	edd3 7a00 	vldr	s15, [r3]
 8005298:	eeb0 0a67 	vmov.f32	s0, s15
 800529c:	4830      	ldr	r0, [pc, #192]	@ (8005360 <update_control_loops+0x540>)
 800529e:	f7fb ffbb 	bl	8001218 <PID_CONTROLLER_Compute>
 80052a2:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid, rev_pos_error),
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80052a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005364 <update_control_loops+0x544>)
 80052a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	rev_cmd_vx = PWM_Satuation(
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	f7fb fc08 	bl	8000ac4 <__aeabi_d2iz>
 80052b4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80052b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005364 <update_control_loops+0x544>)
 80052b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80052bc:	60ba      	str	r2, [r7, #8]
 80052be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80052c2:	60fb      	str	r3, [r7, #12]
	rev_cmd_vx = PWM_Satuation(
 80052c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052c8:	f7fb fbfc 	bl	8000ac4 <__aeabi_d2iz>
 80052cc:	4603      	mov	r3, r0
 80052ce:	4619      	mov	r1, r3
 80052d0:	4620      	mov	r0, r4
 80052d2:	eeb0 0a48 	vmov.f32	s0, s16
 80052d6:	f7fb ff3d 	bl	8001154 <PWM_Satuation>
 80052da:	ee07 0a90 	vmov	s15, r0
 80052de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052e2:	4b21      	ldr	r3, [pc, #132]	@ (8005368 <update_control_loops+0x548>)
 80052e4:	edc3 7a00 	vstr	s15, [r3]

	// Add velocity feedforward for trajectory
	if (revtrajectoryActive) {
 80052e8:	4b20      	ldr	r3, [pc, #128]	@ (800536c <update_control_loops+0x54c>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d043      	beq.n	8005378 <update_control_loops+0x558>
		rev_vel_error = rev_cmd_vx + revolute_vel - rev_kal_filt;
 80052f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005368 <update_control_loops+0x548>)
 80052f2:	ed93 7a00 	vldr	s14, [r3]
 80052f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005370 <update_control_loops+0x550>)
 80052f8:	edd3 7a00 	vldr	s15, [r3]
 80052fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005300:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <update_control_loops+0x524>)
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530a:	4b1a      	ldr	r3, [pc, #104]	@ (8005374 <update_control_loops+0x554>)
 800530c:	edc3 7a00 	vstr	s15, [r3]
 8005310:	e03d      	b.n	800538e <update_control_loops+0x56e>
 8005312:	bf00      	nop
 8005314:	2000028c 	.word	0x2000028c
 8005318:	20000280 	.word	0x20000280
 800531c:	2000027c 	.word	0x2000027c
 8005320:	20000490 	.word	0x20000490
 8005324:	20000060 	.word	0x20000060
 8005328:	20000288 	.word	0x20000288
 800532c:	200002dc 	.word	0x200002dc
 8005330:	477fff00 	.word	0x477fff00
 8005334:	c77fff00 	.word	0xc77fff00
 8005338:	200002d8 	.word	0x200002d8
 800533c:	2000040c 	.word	0x2000040c
 8005340:	20000d70 	.word	0x20000d70
 8005344:	200002d4 	.word	0x200002d4
 8005348:	200002c4 	.word	0x200002c4
 800534c:	20000300 	.word	0x20000300
 8005350:	200002cc 	.word	0x200002cc
 8005354:	40490fdb 	.word	0x40490fdb
 8005358:	40c90fdb 	.word	0x40c90fdb
 800535c:	c0490fdb 	.word	0xc0490fdb
 8005360:	200004b8 	.word	0x200004b8
 8005364:	20000000 	.word	0x20000000
 8005368:	200002e0 	.word	0x200002e0
 800536c:	200002b8 	.word	0x200002b8
 8005370:	200002c8 	.word	0x200002c8
 8005374:	200002d0 	.word	0x200002d0
	} else {
		rev_vel_error = rev_cmd_vx - rev_kal_filt;
 8005378:	4b7e      	ldr	r3, [pc, #504]	@ (8005574 <update_control_loops+0x754>)
 800537a:	ed93 7a00 	vldr	s14, [r3]
 800537e:	4b7e      	ldr	r3, [pc, #504]	@ (8005578 <update_control_loops+0x758>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005388:	4b7c      	ldr	r3, [pc, #496]	@ (800557c <update_control_loops+0x75c>)
 800538a:	edc3 7a00 	vstr	s15, [r3]
	}

	rev_cmd_ux = PWM_Satuation(
 800538e:	4b7b      	ldr	r3, [pc, #492]	@ (800557c <update_control_loops+0x75c>)
 8005390:	edd3 7a00 	vldr	s15, [r3]
 8005394:	eeb0 0a67 	vmov.f32	s0, s15
 8005398:	4879      	ldr	r0, [pc, #484]	@ (8005580 <update_control_loops+0x760>)
 800539a:	f7fb ff3d 	bl	8001218 <PID_CONTROLLER_Compute>
 800539e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, rev_vel_error),
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80053a2:	4b78      	ldr	r3, [pc, #480]	@ (8005584 <update_control_loops+0x764>)
 80053a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	rev_cmd_ux = PWM_Satuation(
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	f7fb fb8a 	bl	8000ac4 <__aeabi_d2iz>
 80053b0:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80053b2:	4b74      	ldr	r3, [pc, #464]	@ (8005584 <update_control_loops+0x764>)
 80053b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80053b8:	603a      	str	r2, [r7, #0]
 80053ba:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80053be:	607b      	str	r3, [r7, #4]
	rev_cmd_ux = PWM_Satuation(
 80053c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053c4:	f7fb fb7e 	bl	8000ac4 <__aeabi_d2iz>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4619      	mov	r1, r3
 80053cc:	4620      	mov	r0, r4
 80053ce:	eeb0 0a48 	vmov.f32	s0, s16
 80053d2:	f7fb febf 	bl	8001154 <PWM_Satuation>
 80053d6:	ee07 0a90 	vmov	s15, r0
 80053da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053de:	4b6a      	ldr	r3, [pc, #424]	@ (8005588 <update_control_loops+0x768>)
 80053e0:	edc3 7a00 	vstr	s15, [r3]

	// Add feed-forward compensation
	pris_ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
			prismatic_vel / 1000.0);
 80053e4:	4b69      	ldr	r3, [pc, #420]	@ (800558c <update_control_loops+0x76c>)
 80053e6:	edd3 7a00 	vldr	s15, [r3]
	pris_ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80053ea:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8005590 <update_control_loops+0x770>
 80053ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80053f2:	eeb0 0a47 	vmov.f32	s0, s14
 80053f6:	4867      	ldr	r0, [pc, #412]	@ (8005594 <update_control_loops+0x774>)
 80053f8:	f7fc fa3c 	bl	8001874 <PRISMATIC_MOTOR_FFD_Compute>
 80053fc:	eef0 7a40 	vmov.f32	s15, s0
 8005400:	4b65      	ldr	r3, [pc, #404]	@ (8005598 <update_control_loops+0x778>)
 8005402:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_ux = pris_cmd_ux + pris_ffd;
 8005406:	4b65      	ldr	r3, [pc, #404]	@ (800559c <update_control_loops+0x77c>)
 8005408:	ed93 7a00 	vldr	s14, [r3]
 800540c:	4b62      	ldr	r3, [pc, #392]	@ (8005598 <update_control_loops+0x778>)
 800540e:	edd3 7a00 	vldr	s15, [r3]
 8005412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005416:	4b61      	ldr	r3, [pc, #388]	@ (800559c <update_control_loops+0x77c>)
 8005418:	edc3 7a00 	vstr	s15, [r3]

	rev_dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, cur_pos, 0.0,
 800541c:	4b60      	ldr	r3, [pc, #384]	@ (80055a0 <update_control_loops+0x780>)
 800541e:	ed93 7a00 	vldr	s14, [r3]
			prismatic_encoder.mm / 1000.0);
 8005422:	4b60      	ldr	r3, [pc, #384]	@ (80055a4 <update_control_loops+0x784>)
 8005424:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	rev_dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd, cur_pos, 0.0,
 8005428:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8005590 <update_control_loops+0x770>
 800542c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005430:	eeb0 1a66 	vmov.f32	s2, s13
 8005434:	eddf 0a5c 	vldr	s1, [pc, #368]	@ 80055a8 <update_control_loops+0x788>
 8005438:	eeb0 0a47 	vmov.f32	s0, s14
 800543c:	485b      	ldr	r0, [pc, #364]	@ (80055ac <update_control_loops+0x78c>)
 800543e:	f7fc f91d 	bl	800167c <REVOLUTE_MOTOR_DFD_Compute>
 8005442:	eef0 7a40 	vmov.f32	s15, s0
 8005446:	4b5a      	ldr	r3, [pc, #360]	@ (80055b0 <update_control_loops+0x790>)
 8005448:	edc3 7a00 	vstr	s15, [r3]
	rev_ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, revolute_vel);
 800544c:	4b59      	ldr	r3, [pc, #356]	@ (80055b4 <update_control_loops+0x794>)
 800544e:	edd3 7a00 	vldr	s15, [r3]
 8005452:	eeb0 0a67 	vmov.f32	s0, s15
 8005456:	4858      	ldr	r0, [pc, #352]	@ (80055b8 <update_control_loops+0x798>)
 8005458:	f7fc f87c 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800545c:	eef0 7a40 	vmov.f32	s15, s0
 8005460:	4b56      	ldr	r3, [pc, #344]	@ (80055bc <update_control_loops+0x79c>)
 8005462:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_ux = rev_cmd_ux + rev_dfd + rev_ffd;
 8005466:	4b48      	ldr	r3, [pc, #288]	@ (8005588 <update_control_loops+0x768>)
 8005468:	ed93 7a00 	vldr	s14, [r3]
 800546c:	4b50      	ldr	r3, [pc, #320]	@ (80055b0 <update_control_loops+0x790>)
 800546e:	edd3 7a00 	vldr	s15, [r3]
 8005472:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005476:	4b51      	ldr	r3, [pc, #324]	@ (80055bc <update_control_loops+0x79c>)
 8005478:	edd3 7a00 	vldr	s15, [r3]
 800547c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005480:	4b41      	ldr	r3, [pc, #260]	@ (8005588 <update_control_loops+0x768>)
 8005482:	edc3 7a00 	vstr	s15, [r3]

	// Final saturation
	pris_cmd_ux = PWM_Satuation(pris_cmd_ux, ZGX45RGG_400RPM_Constant.U_max,
 8005486:	4b45      	ldr	r3, [pc, #276]	@ (800559c <update_control_loops+0x77c>)
 8005488:	ed93 8a00 	vldr	s16, [r3]
 800548c:	4b4c      	ldr	r3, [pc, #304]	@ (80055c0 <update_control_loops+0x7a0>)
 800548e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	f7fb fb15 	bl	8000ac4 <__aeabi_d2iz>
 800549a:	4604      	mov	r4, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800549c:	4b48      	ldr	r3, [pc, #288]	@ (80055c0 <update_control_loops+0x7a0>)
 800549e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80054a2:	4615      	mov	r5, r2
 80054a4:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
	pris_cmd_ux = PWM_Satuation(pris_cmd_ux, ZGX45RGG_400RPM_Constant.U_max,
 80054a8:	4628      	mov	r0, r5
 80054aa:	4631      	mov	r1, r6
 80054ac:	f7fb fb0a 	bl	8000ac4 <__aeabi_d2iz>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4619      	mov	r1, r3
 80054b4:	4620      	mov	r0, r4
 80054b6:	eeb0 0a48 	vmov.f32	s0, s16
 80054ba:	f7fb fe4b 	bl	8001154 <PWM_Satuation>
 80054be:	ee07 0a90 	vmov	s15, r0
 80054c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80054c6:	4b35      	ldr	r3, [pc, #212]	@ (800559c <update_control_loops+0x77c>)
 80054c8:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 80054cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005588 <update_control_loops+0x768>)
 80054ce:	ed93 8a00 	vldr	s16, [r3]
 80054d2:	4b2c      	ldr	r3, [pc, #176]	@ (8005584 <update_control_loops+0x764>)
 80054d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80054d8:	4610      	mov	r0, r2
 80054da:	4619      	mov	r1, r3
 80054dc:	f7fb faf2 	bl	8000ac4 <__aeabi_d2iz>
 80054e0:	4604      	mov	r4, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80054e2:	4b28      	ldr	r3, [pc, #160]	@ (8005584 <update_control_loops+0x764>)
 80054e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80054e8:	4692      	mov	sl, r2
 80054ea:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	rev_cmd_ux = PWM_Satuation(rev_cmd_ux, ZGX45RGG_150RPM_Constant.U_max,
 80054ee:	4650      	mov	r0, sl
 80054f0:	4659      	mov	r1, fp
 80054f2:	f7fb fae7 	bl	8000ac4 <__aeabi_d2iz>
 80054f6:	4603      	mov	r3, r0
 80054f8:	4619      	mov	r1, r3
 80054fa:	4620      	mov	r0, r4
 80054fc:	eeb0 0a48 	vmov.f32	s0, s16
 8005500:	f7fb fe28 	bl	8001154 <PWM_Satuation>
 8005504:	ee07 0a90 	vmov	s15, r0
 8005508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800550c:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <update_control_loops+0x768>)
 800550e:	edc3 7a00 	vstr	s15, [r3]

	// Apply commands to motors
	MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
 8005512:	4b22      	ldr	r3, [pc, #136]	@ (800559c <update_control_loops+0x77c>)
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	eef0 0a67 	vmov.f32	s1, s15
 800551c:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80055c4 <update_control_loops+0x7a4>
 8005520:	4829      	ldr	r0, [pc, #164]	@ (80055c8 <update_control_loops+0x7a8>)
 8005522:	f7fb ff2f 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 8005526:	4b18      	ldr	r3, [pc, #96]	@ (8005588 <update_control_loops+0x768>)
 8005528:	edd3 7a00 	vldr	s15, [r3]
 800552c:	eef0 0a67 	vmov.f32	s1, s15
 8005530:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80055c4 <update_control_loops+0x7a4>
 8005534:	4825      	ldr	r0, [pc, #148]	@ (80055cc <update_control_loops+0x7ac>)
 8005536:	f7fb ff25 	bl	8001384 <MDXX_set_range>

	if (revEva.isFinised && prisEva.isFinised) {
 800553a:	4b25      	ldr	r3, [pc, #148]	@ (80055d0 <update_control_loops+0x7b0>)
 800553c:	7c1b      	ldrb	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d011      	beq.n	8005566 <update_control_loops+0x746>
 8005542:	4b24      	ldr	r3, [pc, #144]	@ (80055d4 <update_control_loops+0x7b4>)
 8005544:	7c1b      	ldrb	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <update_control_loops+0x746>
		static uint32_t timer_count = 0;
		timer_count++;
 800554a:	4b23      	ldr	r3, [pc, #140]	@ (80055d8 <update_control_loops+0x7b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3301      	adds	r3, #1
 8005550:	4a21      	ldr	r2, [pc, #132]	@ (80055d8 <update_control_loops+0x7b8>)
 8005552:	6013      	str	r3, [r2, #0]

		if (timer_count > 250) {
 8005554:	4b20      	ldr	r3, [pc, #128]	@ (80055d8 <update_control_loops+0x7b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2bfa      	cmp	r3, #250	@ 0xfa
 800555a:	d904      	bls.n	8005566 <update_control_loops+0x746>
			plotter_pen_down();
 800555c:	f000 fdc0 	bl	80060e0 <plotter_pen_down>
			timer_count = 0;
 8005560:	4b1d      	ldr	r3, [pc, #116]	@ (80055d8 <update_control_loops+0x7b8>)
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
		}
	}
}
 8005566:	bf00      	nop
 8005568:	371c      	adds	r7, #28
 800556a:	46bd      	mov	sp, r7
 800556c:	ecbd 8b02 	vpop	{d8}
 8005570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005574:	200002e0 	.word	0x200002e0
 8005578:	200002d4 	.word	0x200002d4
 800557c:	200002d0 	.word	0x200002d0
 8005580:	200004e0 	.word	0x200004e0
 8005584:	20000000 	.word	0x20000000
 8005588:	200002dc 	.word	0x200002dc
 800558c:	20000274 	.word	0x20000274
 8005590:	447a0000 	.word	0x447a0000
 8005594:	20000508 	.word	0x20000508
 8005598:	200002f0 	.word	0x200002f0
 800559c:	20000288 	.word	0x20000288
 80055a0:	20000300 	.word	0x20000300
 80055a4:	200003b0 	.word	0x200003b0
 80055a8:	00000000 	.word	0x00000000
 80055ac:	20000518 	.word	0x20000518
 80055b0:	200002e4 	.word	0x200002e4
 80055b4:	200002c8 	.word	0x200002c8
 80055b8:	20000514 	.word	0x20000514
 80055bc:	200002e8 	.word	0x200002e8
 80055c0:	20000060 	.word	0x20000060
 80055c4:	44fa0000 	.word	0x44fa0000
 80055c8:	20000318 	.word	0x20000318
 80055cc:	20000364 	.word	0x20000364
 80055d0:	200002a4 	.word	0x200002a4
 80055d4:	20000250 	.word	0x20000250
 80055d8:	20000308 	.word	0x20000308

080055dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d105      	bne.n	80055f8 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 80055ec:	4b05      	ldr	r3, [pc, #20]	@ (8005604 <HAL_GPIO_EXTI_Callback+0x28>)
 80055ee:	2205      	movs	r2, #5
 80055f0:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 80055f2:	4b05      	ldr	r3, [pc, #20]	@ (8005608 <HAL_GPIO_EXTI_Callback+0x2c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
	}
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	200000ef 	.word	0x200000ef
 8005608:	200000f2 	.word	0x200000f2

0800560c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a56      	ldr	r2, [pc, #344]	@ (8005784 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800562c:	4293      	cmp	r3, r2
 800562e:	f040 80a5 	bne.w	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
		plotter_update_sensors();
 8005632:	f000 fc67 	bl	8005f04 <plotter_update_sensors>

		QEI_get_diff_count(&prismatic_encoder);
 8005636:	4854      	ldr	r0, [pc, #336]	@ (8005788 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8005638:	f7fe f862 	bl	8003700 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 800563c:	4852      	ldr	r0, [pc, #328]	@ (8005788 <HAL_TIM_PeriodElapsedCallback+0x168>)
 800563e:	f7fe f94b 	bl	80038d8 <QEI_compute_data>

		QEI_get_diff_count(&revolute_encoder);
 8005642:	4852      	ldr	r0, [pc, #328]	@ (800578c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8005644:	f7fe f85c 	bl	8003700 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8005648:	4850      	ldr	r0, [pc, #320]	@ (800578c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800564a:	f7fe f945 	bl	80038d8 <QEI_compute_data>

		// Process homing sequence
		if (home > 0) {
 800564e:	4b50      	ldr	r3, [pc, #320]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f340 8090 	ble.w	8005778 <HAL_TIM_PeriodElapsedCallback+0x158>
			homing_in_progress = true;
 8005658:	4b4e      	ldr	r3, [pc, #312]	@ (8005794 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]

			if (home == 1) {
 800565e:	4b4c      	ldr	r3, [pc, #304]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d115      	bne.n	8005692 <HAL_TIM_PeriodElapsedCallback+0x72>
				// Move prismatic motor down to lower limit
				MDXX_set_range(&prismatic_motor, 2000, 10000);
 8005666:	eddf 0a4c 	vldr	s1, [pc, #304]	@ 8005798 <HAL_TIM_PeriodElapsedCallback+0x178>
 800566a:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 800566e:	484c      	ldr	r0, [pc, #304]	@ (80057a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005670:	f7fb fe88 	bl	8001384 <MDXX_set_range>

				if (low_photo) {
 8005674:	4b4b      	ldr	r3, [pc, #300]	@ (80057a4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d07f      	beq.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
					home = 2;
 800567c:	4b44      	ldr	r3, [pc, #272]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800567e:	2202      	movs	r2, #2
 8005680:	601a      	str	r2, [r3, #0]
					MDXX_set_range(&prismatic_motor, 2000, 0);
 8005682:	eddf 0a49 	vldr	s1, [pc, #292]	@ 80057a8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8005686:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 800568a:	4845      	ldr	r0, [pc, #276]	@ (80057a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800568c:	f7fb fe7a 	bl	8001384 <MDXX_set_range>
			}
		} else {
			update_control_loops();
		}
	}
}
 8005690:	e074      	b.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 2) {
 8005692:	4b3f      	ldr	r3, [pc, #252]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d147      	bne.n	800572a <HAL_TIM_PeriodElapsedCallback+0x10a>
				if (!initialized) {
 800569a:	4b44      	ldr	r3, [pc, #272]	@ (80057ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00e      	beq.n	80056c6 <HAL_TIM_PeriodElapsedCallback+0xa6>
					prox_previous = prox;
 80056a8:	4b41      	ldr	r3, [pc, #260]	@ (80057b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	4b3f      	ldr	r3, [pc, #252]	@ (80057b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80056b8:	701a      	strb	r2, [r3, #0]
					prox_count = 0;
 80056ba:	4b3f      	ldr	r3, [pc, #252]	@ (80057b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
					initialized = true;
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	701a      	strb	r2, [r3, #0]
				MDXX_set_range(&revolute_motor, 2000, 12000);
 80056c6:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 80057bc <HAL_TIM_PeriodElapsedCallback+0x19c>
 80056ca:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 80056ce:	483c      	ldr	r0, [pc, #240]	@ (80057c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80056d0:	f7fb fe58 	bl	8001384 <MDXX_set_range>
				if (prox && !prox_previous) {
 80056d4:	4b36      	ldr	r3, [pc, #216]	@ (80057b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00b      	beq.n	80056f4 <HAL_TIM_PeriodElapsedCallback+0xd4>
 80056dc:	4b35      	ldr	r3, [pc, #212]	@ (80057b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	f083 0301 	eor.w	r3, r3, #1
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <HAL_TIM_PeriodElapsedCallback+0xd4>
					prox_count++;
 80056ea:	4b33      	ldr	r3, [pc, #204]	@ (80057b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3301      	adds	r3, #1
 80056f0:	4a31      	ldr	r2, [pc, #196]	@ (80057b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80056f2:	6013      	str	r3, [r2, #0]
				prox_previous = prox;
 80056f4:	4b2e      	ldr	r3, [pc, #184]	@ (80057b0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2da      	uxtb	r2, r3
 8005702:	4b2c      	ldr	r3, [pc, #176]	@ (80057b4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8005704:	701a      	strb	r2, [r3, #0]
				if (prox_count >= 1) {
 8005706:	4b2c      	ldr	r3, [pc, #176]	@ (80057b8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	dd36      	ble.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
					MDXX_set_range(&revolute_motor, 2000, 0);
 800570e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 80057a8 <HAL_TIM_PeriodElapsedCallback+0x188>
 8005712:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005716:	482a      	ldr	r0, [pc, #168]	@ (80057c0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8005718:	f7fb fe34 	bl	8001384 <MDXX_set_range>
					initialized = false;  // Reset for next time
 800571c:	4b23      	ldr	r3, [pc, #140]	@ (80057ac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800571e:	2200      	movs	r2, #0
 8005720:	701a      	strb	r2, [r3, #0]
					home = 3;
 8005722:	4b1b      	ldr	r3, [pc, #108]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005724:	2203      	movs	r2, #3
 8005726:	601a      	str	r2, [r3, #0]
}
 8005728:	e028      	b.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 3) {
 800572a:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b03      	cmp	r3, #3
 8005730:	d115      	bne.n	800575e <HAL_TIM_PeriodElapsedCallback+0x13e>
				MDXX_set_range(&prismatic_motor, 2000, -10000);
 8005732:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80057c4 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8005736:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 800573a:	4819      	ldr	r0, [pc, #100]	@ (80057a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800573c:	f7fb fe22 	bl	8001384 <MDXX_set_range>
				if (up_photo) {
 8005740:	4b21      	ldr	r3, [pc, #132]	@ (80057c8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d019      	beq.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
					MDXX_set_range(&prismatic_motor, 2000, 0);
 8005748:	eddf 0a17 	vldr	s1, [pc, #92]	@ 80057a8 <HAL_TIM_PeriodElapsedCallback+0x188>
 800574c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800579c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8005750:	4813      	ldr	r0, [pc, #76]	@ (80057a0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8005752:	f7fb fe17 	bl	8001384 <MDXX_set_range>
					home = 4;
 8005756:	4b0e      	ldr	r3, [pc, #56]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005758:	2204      	movs	r2, #4
 800575a:	601a      	str	r2, [r3, #0]
}
 800575c:	e00e      	b.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
			} else if (home == 4) {
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d10a      	bne.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
				plotter_reset();
 8005766:	f000 fbbf 	bl	8005ee8 <plotter_reset>
				home = 0;
 800576a:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
				homing_in_progress = false;
 8005770:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
}
 8005776:	e001      	b.n	800577c <HAL_TIM_PeriodElapsedCallback+0x15c>
			update_control_loops();
 8005778:	f7ff fb52 	bl	8004e20 <update_control_loops>
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	2000190c 	.word	0x2000190c
 8005788:	200003b0 	.word	0x200003b0
 800578c:	2000040c 	.word	0x2000040c
 8005790:	200002f8 	.word	0x200002f8
 8005794:	200002f4 	.word	0x200002f4
 8005798:	461c4000 	.word	0x461c4000
 800579c:	44fa0000 	.word	0x44fa0000
 80057a0:	20000318 	.word	0x20000318
 80057a4:	20001820 	.word	0x20001820
 80057a8:	00000000 	.word	0x00000000
 80057ac:	2000030c 	.word	0x2000030c
 80057b0:	20001814 	.word	0x20001814
 80057b4:	2000030d 	.word	0x2000030d
 80057b8:	20000310 	.word	0x20000310
 80057bc:	463b8000 	.word	0x463b8000
 80057c0:	20000364 	.word	0x20000364
 80057c4:	c61c4000 	.word	0xc61c4000
 80057c8:	2000181c 	.word	0x2000181c

080057cc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80057d0:	b672      	cpsid	i
}
 80057d2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80057d4:	bf00      	nop
 80057d6:	e7fd      	b.n	80057d4 <Error_Handler+0x8>

080057d8 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int prox, emer, up_photo, low_photo, up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80057d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057dc:	ed2d 8b02 	vpush	{d8}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80057e4:	4bc8      	ldr	r3, [pc, #800]	@ (8005b08 <plotter_begin+0x330>)
 80057e6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80057ea:	4bc8      	ldr	r3, [pc, #800]	@ (8005b0c <plotter_begin+0x334>)
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa fe76 	bl	80004e0 <__aeabi_f2d>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4620      	mov	r0, r4
 80057fa:	4629      	mov	r1, r5
 80057fc:	f7fa fec8 	bl	8000590 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f04f 0200 	mov.w	r2, #0
 800580c:	4bc0      	ldr	r3, [pc, #768]	@ (8005b10 <plotter_begin+0x338>)
 800580e:	f7fa febf 	bl	8000590 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005816:	49bc      	ldr	r1, [pc, #752]	@ (8005b08 <plotter_begin+0x330>)
 8005818:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 800581c:	4bba      	ldr	r3, [pc, #744]	@ (8005b08 <plotter_begin+0x330>)
 800581e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	4bbb      	ldr	r3, [pc, #748]	@ (8005b14 <plotter_begin+0x33c>)
 8005828:	f7fa feb2 	bl	8000590 <__aeabi_dmul>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	49b5      	ldr	r1, [pc, #724]	@ (8005b08 <plotter_begin+0x330>)
 8005832:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max * (24.0 /36.0) * 0.3;
 8005836:	4bb8      	ldr	r3, [pc, #736]	@ (8005b18 <plotter_begin+0x340>)
 8005838:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800583c:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005af0 <plotter_begin+0x318>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fea5 	bl	8000590 <__aeabi_dmul>
 8005846:	4602      	mov	r2, r0
 8005848:	460b      	mov	r3, r1
 800584a:	4610      	mov	r0, r2
 800584c:	4619      	mov	r1, r3
 800584e:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005af8 <plotter_begin+0x320>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fa fe9c 	bl	8000590 <__aeabi_dmul>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	49ae      	ldr	r1, [pc, #696]	@ (8005b18 <plotter_begin+0x340>)
 800585e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	ZGX45RGG_150RPM_Constant.qdd_max = ZGX45RGG_150RPM_Constant.qd_max * 0.4;
 8005862:	4bad      	ldr	r3, [pc, #692]	@ (8005b18 <plotter_begin+0x340>)
 8005864:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8005868:	a3a5      	add	r3, pc, #660	@ (adr r3, 8005b00 <plotter_begin+0x328>)
 800586a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586e:	f7fa fe8f 	bl	8000590 <__aeabi_dmul>
 8005872:	4602      	mov	r2, r0
 8005874:	460b      	mov	r3, r1
 8005876:	49a8      	ldr	r1, [pc, #672]	@ (8005b18 <plotter_begin+0x340>)
 8005878:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800587c:	2100      	movs	r1, #0
 800587e:	48a7      	ldr	r0, [pc, #668]	@ (8005b1c <plotter_begin+0x344>)
 8005880:	f000 fc3e 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005884:	eddf 2aa6 	vldr	s5, [pc, #664]	@ 8005b20 <plotter_begin+0x348>
 8005888:	ed9f 2aa6 	vldr	s4, [pc, #664]	@ 8005b24 <plotter_begin+0x34c>
 800588c:	eddf 1ab3 	vldr	s3, [pc, #716]	@ 8005b5c <plotter_begin+0x384>
 8005890:	ed9f 1ab2 	vldr	s2, [pc, #712]	@ 8005b5c <plotter_begin+0x384>
 8005894:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8005b28 <plotter_begin+0x350>
 8005898:	ed9f 0aa1 	vldr	s0, [pc, #644]	@ 8005b20 <plotter_begin+0x348>
 800589c:	489f      	ldr	r0, [pc, #636]	@ (8005b1c <plotter_begin+0x344>)
 800589e:	f000 fc8d 	bl	80061bc <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80058a2:	2102      	movs	r1, #2
 80058a4:	48a1      	ldr	r0, [pc, #644]	@ (8005b2c <plotter_begin+0x354>)
 80058a6:	f000 fc2b 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80058aa:	ed9f 3a9d 	vldr	s6, [pc, #628]	@ 8005b20 <plotter_begin+0x348>
 80058ae:	eddf 2a9d 	vldr	s5, [pc, #628]	@ 8005b24 <plotter_begin+0x34c>
 80058b2:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8005b5c <plotter_begin+0x384>
 80058b6:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8005b5c <plotter_begin+0x384>
 80058ba:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80058be:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8005b28 <plotter_begin+0x350>
 80058c2:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8005b20 <plotter_begin+0x348>
 80058c6:	4899      	ldr	r0, [pc, #612]	@ (8005b2c <plotter_begin+0x354>)
 80058c8:	f000 fca3 	bl	8006212 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80058cc:	2100      	movs	r1, #0
 80058ce:	4898      	ldr	r0, [pc, #608]	@ (8005b30 <plotter_begin+0x358>)
 80058d0:	f000 fc16 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80058d4:	eddf 2a97 	vldr	s5, [pc, #604]	@ 8005b34 <plotter_begin+0x35c>
 80058d8:	ed9f 2a97 	vldr	s4, [pc, #604]	@ 8005b38 <plotter_begin+0x360>
 80058dc:	eddf 1a9f 	vldr	s3, [pc, #636]	@ 8005b5c <plotter_begin+0x384>
 80058e0:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8005b5c <plotter_begin+0x384>
 80058e4:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8005b28 <plotter_begin+0x350>
 80058e8:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 8005b34 <plotter_begin+0x35c>
 80058ec:	4890      	ldr	r0, [pc, #576]	@ (8005b30 <plotter_begin+0x358>)
 80058ee:	f000 fc65 	bl	80061bc <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80058f2:	2102      	movs	r1, #2
 80058f4:	4891      	ldr	r0, [pc, #580]	@ (8005b3c <plotter_begin+0x364>)
 80058f6:	f000 fc03 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80058fa:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80058fe:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8005902:	ed9f 2a96 	vldr	s4, [pc, #600]	@ 8005b5c <plotter_begin+0x384>
 8005906:	eddf 1a95 	vldr	s3, [pc, #596]	@ 8005b5c <plotter_begin+0x384>
 800590a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800590e:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8005b28 <plotter_begin+0x350>
 8005912:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005916:	4889      	ldr	r0, [pc, #548]	@ (8005b3c <plotter_begin+0x364>)
 8005918:	f000 fc7b 	bl	8006212 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 800591c:	2100      	movs	r1, #0
 800591e:	4888      	ldr	r0, [pc, #544]	@ (8005b40 <plotter_begin+0x368>)
 8005920:	f000 fbee 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005924:	4b78      	ldr	r3, [pc, #480]	@ (8005b08 <plotter_begin+0x330>)
 8005926:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	f7fb f911 	bl	8000b54 <__aeabi_d2f>
 8005932:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005934:	4b74      	ldr	r3, [pc, #464]	@ (8005b08 <plotter_begin+0x330>)
 8005936:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f7fb f909 	bl	8000b54 <__aeabi_d2f>
 8005942:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800594c:	4b6e      	ldr	r3, [pc, #440]	@ (8005b08 <plotter_begin+0x330>)
 800594e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005952:	4610      	mov	r0, r2
 8005954:	4619      	mov	r1, r3
 8005956:	f7fb f8fd 	bl	8000b54 <__aeabi_d2f>
 800595a:	4603      	mov	r3, r0
 800595c:	ee02 3a90 	vmov	s5, r3
 8005960:	eeb0 2a48 	vmov.f32	s4, s16
 8005964:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8005b5c <plotter_begin+0x384>
 8005968:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 8005b5c <plotter_begin+0x384>
 800596c:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8005b28 <plotter_begin+0x350>
 8005970:	ee00 4a10 	vmov	s0, r4
 8005974:	4872      	ldr	r0, [pc, #456]	@ (8005b40 <plotter_begin+0x368>)
 8005976:	f000 fc21 	bl	80061bc <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800597a:	2102      	movs	r1, #2
 800597c:	4871      	ldr	r0, [pc, #452]	@ (8005b44 <plotter_begin+0x36c>)
 800597e:	f000 fbbf 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005982:	4b61      	ldr	r3, [pc, #388]	@ (8005b08 <plotter_begin+0x330>)
 8005984:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005988:	4610      	mov	r0, r2
 800598a:	4619      	mov	r1, r3
 800598c:	f7fb f8e2 	bl	8000b54 <__aeabi_d2f>
 8005990:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005992:	4b5d      	ldr	r3, [pc, #372]	@ (8005b08 <plotter_begin+0x330>)
 8005994:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005998:	4610      	mov	r0, r2
 800599a:	4619      	mov	r1, r3
 800599c:	f7fb f8da 	bl	8000b54 <__aeabi_d2f>
 80059a0:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80059a2:	ee07 3a90 	vmov	s15, r3
 80059a6:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80059aa:	4b57      	ldr	r3, [pc, #348]	@ (8005b08 <plotter_begin+0x330>)
 80059ac:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80059b0:	4610      	mov	r0, r2
 80059b2:	4619      	mov	r1, r3
 80059b4:	f7fb f8ce 	bl	8000b54 <__aeabi_d2f>
 80059b8:	4603      	mov	r3, r0
 80059ba:	ee03 3a10 	vmov	s6, r3
 80059be:	eef0 2a48 	vmov.f32	s5, s16
 80059c2:	ed9f 2a66 	vldr	s4, [pc, #408]	@ 8005b5c <plotter_begin+0x384>
 80059c6:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8005b5c <plotter_begin+0x384>
 80059ca:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80059ce:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8005b28 <plotter_begin+0x350>
 80059d2:	ee00 4a10 	vmov	s0, r4
 80059d6:	485b      	ldr	r0, [pc, #364]	@ (8005b44 <plotter_begin+0x36c>)
 80059d8:	f000 fc1b 	bl	8006212 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80059dc:	2100      	movs	r1, #0
 80059de:	485a      	ldr	r0, [pc, #360]	@ (8005b48 <plotter_begin+0x370>)
 80059e0:	f000 fb8e 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80059e4:	4b4c      	ldr	r3, [pc, #304]	@ (8005b18 <plotter_begin+0x340>)
 80059e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	f7fb f8b1 	bl	8000b54 <__aeabi_d2f>
 80059f2:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80059f4:	4b48      	ldr	r3, [pc, #288]	@ (8005b18 <plotter_begin+0x340>)
 80059f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80059fa:	4610      	mov	r0, r2
 80059fc:	4619      	mov	r1, r3
 80059fe:	f7fb f8a9 	bl	8000b54 <__aeabi_d2f>
 8005a02:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005a04:	ee07 3a90 	vmov	s15, r3
 8005a08:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8005a0c:	4b42      	ldr	r3, [pc, #264]	@ (8005b18 <plotter_begin+0x340>)
 8005a0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	f7fb f89d 	bl	8000b54 <__aeabi_d2f>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	ee02 3a90 	vmov	s5, r3
 8005a20:	eeb0 2a48 	vmov.f32	s4, s16
 8005a24:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8005b5c <plotter_begin+0x384>
 8005a28:	ed9f 1a4c 	vldr	s2, [pc, #304]	@ 8005b5c <plotter_begin+0x384>
 8005a2c:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8005b28 <plotter_begin+0x350>
 8005a30:	ee00 4a10 	vmov	s0, r4
 8005a34:	4844      	ldr	r0, [pc, #272]	@ (8005b48 <plotter_begin+0x370>)
 8005a36:	f000 fbc1 	bl	80061bc <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	4843      	ldr	r0, [pc, #268]	@ (8005b4c <plotter_begin+0x374>)
 8005a3e:	f000 fb5f 	bl	8006100 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005a42:	4b35      	ldr	r3, [pc, #212]	@ (8005b18 <plotter_begin+0x340>)
 8005a44:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005a48:	4610      	mov	r0, r2
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f7fb f882 	bl	8000b54 <__aeabi_d2f>
 8005a50:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005a52:	4b31      	ldr	r3, [pc, #196]	@ (8005b18 <plotter_begin+0x340>)
 8005a54:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7fb f87a 	bl	8000b54 <__aeabi_d2f>
 8005a60:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b18 <plotter_begin+0x340>)
 8005a6c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005a70:	4610      	mov	r0, r2
 8005a72:	4619      	mov	r1, r3
 8005a74:	f7fb f86e 	bl	8000b54 <__aeabi_d2f>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	ee03 3a10 	vmov	s6, r3
 8005a7e:	eef0 2a48 	vmov.f32	s5, s16
 8005a82:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8005b5c <plotter_begin+0x384>
 8005a86:	eddf 1a35 	vldr	s3, [pc, #212]	@ 8005b5c <plotter_begin+0x384>
 8005a8a:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005a8e:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8005b28 <plotter_begin+0x350>
 8005a92:	ee00 4a10 	vmov	s0, r4
 8005a96:	482d      	ldr	r0, [pc, #180]	@ (8005b4c <plotter_begin+0x374>)
 8005a98:	f000 fbbb 	bl	8006212 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8005a9c:	482c      	ldr	r0, [pc, #176]	@ (8005b50 <plotter_begin+0x378>)
 8005a9e:	f7fe fc51 	bl	8004344 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8005aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b0c <plotter_begin+0x334>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fa fd1a 	bl	80004e0 <__aeabi_f2d>
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	f7fa fbb8 	bl	8000224 <__adddf3>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	460b      	mov	r3, r1
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	4b13      	ldr	r3, [pc, #76]	@ (8005b10 <plotter_begin+0x338>)
 8005ac2:	f7fa fd65 	bl	8000590 <__aeabi_dmul>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8005aca:	4610      	mov	r0, r2
 8005acc:	4619      	mov	r1, r3
 8005ace:	f7fb f841 	bl	8000b54 <__aeabi_d2f>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	ee00 3a90 	vmov	s1, r3
 8005ad8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005adc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ae4:	491b      	ldr	r1, [pc, #108]	@ (8005b54 <plotter_begin+0x37c>)
 8005ae6:	481c      	ldr	r0, [pc, #112]	@ (8005b58 <plotter_begin+0x380>)
 8005ae8:	f7fd fd98 	bl	800361c <QEI_init>
 8005aec:	e038      	b.n	8005b60 <plotter_begin+0x388>
 8005aee:	bf00      	nop
 8005af0:	55555555 	.word	0x55555555
 8005af4:	3fe55555 	.word	0x3fe55555
 8005af8:	33333333 	.word	0x33333333
 8005afc:	3fd33333 	.word	0x3fd33333
 8005b00:	9999999a 	.word	0x9999999a
 8005b04:	3fd99999 	.word	0x3fd99999
 8005b08:	20000060 	.word	0x20000060
 8005b0c:	200000c0 	.word	0x200000c0
 8005b10:	408f4000 	.word	0x408f4000
 8005b14:	3fe00000 	.word	0x3fe00000
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	2000055c 	.word	0x2000055c
 8005b20:	477fff00 	.word	0x477fff00
 8005b24:	c77fff00 	.word	0xc77fff00
 8005b28:	3dcccccd 	.word	0x3dcccccd
 8005b2c:	200005a0 	.word	0x200005a0
 8005b30:	200005e4 	.word	0x200005e4
 8005b34:	4083d70a 	.word	0x4083d70a
 8005b38:	c083d70a 	.word	0xc083d70a
 8005b3c:	20000628 	.word	0x20000628
 8005b40:	2000066c 	.word	0x2000066c
 8005b44:	200006b0 	.word	0x200006b0
 8005b48:	200006f4 	.word	0x200006f4
 8005b4c:	20000738 	.word	0x20000738
 8005b50:	2000077c 	.word	0x2000077c
 8005b54:	20001b70 	.word	0x20001b70
 8005b58:	200003b0 	.word	0x200003b0
 8005b5c:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8005b60:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8005b5c <plotter_begin+0x384>
 8005b64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b70:	49ae      	ldr	r1, [pc, #696]	@ (8005e2c <plotter_begin+0x654>)
 8005b72:	48af      	ldr	r0, [pc, #700]	@ (8005e30 <plotter_begin+0x658>)
 8005b74:	f7fd fd52 	bl	800361c <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8005b78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b82:	2204      	movs	r2, #4
 8005b84:	49ab      	ldr	r1, [pc, #684]	@ (8005e34 <plotter_begin+0x65c>)
 8005b86:	48ac      	ldr	r0, [pc, #688]	@ (8005e38 <plotter_begin+0x660>)
 8005b88:	f7fb fbd8 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8005b8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	4baa      	ldr	r3, [pc, #680]	@ (8005e3c <plotter_begin+0x664>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	49a7      	ldr	r1, [pc, #668]	@ (8005e34 <plotter_begin+0x65c>)
 8005b98:	48a9      	ldr	r0, [pc, #676]	@ (8005e40 <plotter_begin+0x668>)
 8005b9a:	f7fb fbcf 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8005b9e:	220c      	movs	r2, #12
 8005ba0:	49a8      	ldr	r1, [pc, #672]	@ (8005e44 <plotter_begin+0x66c>)
 8005ba2:	48a9      	ldr	r0, [pc, #676]	@ (8005e48 <plotter_begin+0x670>)
 8005ba4:	f7fd fb0e 	bl	80031c4 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005ba8:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8005e4c <plotter_begin+0x674>
 8005bac:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8005e50 <plotter_begin+0x678>
 8005bb0:	48a1      	ldr	r0, [pc, #644]	@ (8005e38 <plotter_begin+0x660>)
 8005bb2:	f7fb fbe7 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005bb6:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8005e4c <plotter_begin+0x674>
 8005bba:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8005e50 <plotter_begin+0x678>
 8005bbe:	48a0      	ldr	r0, [pc, #640]	@ (8005e40 <plotter_begin+0x668>)
 8005bc0:	f7fb fbe0 	bl	8001384 <MDXX_set_range>
	plotter_pen_up();
 8005bc4:	f000 fa7c 	bl	80060c0 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
			ZGX45RGG_400RPM_Constant.sd_max);
 8005bc8:	4ba2      	ldr	r3, [pc, #648]	@ (8005e54 <plotter_begin+0x67c>)
 8005bca:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 75,
 8005bce:	4610      	mov	r0, r2
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	f7fa ffbf 	bl	8000b54 <__aeabi_d2f>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	ee01 3a90 	vmov	s3, r3
 8005bdc:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8005e58 <plotter_begin+0x680>
 8005be0:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8005e5c <plotter_begin+0x684>
 8005be4:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 8005e58 <plotter_begin+0x680>
 8005be8:	489d      	ldr	r0, [pc, #628]	@ (8005e60 <plotter_begin+0x688>)
 8005bea:	f7fb fae2 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8005bee:	4b99      	ldr	r3, [pc, #612]	@ (8005e54 <plotter_begin+0x67c>)
 8005bf0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f7fa ffac 	bl	8000b54 <__aeabi_d2f>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	ee01 3a90 	vmov	s3, r3
 8005c02:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 8005e4c <plotter_begin+0x674>
 8005c06:	eddf 0a97 	vldr	s1, [pc, #604]	@ 8005e64 <plotter_begin+0x68c>
 8005c0a:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8005e68 <plotter_begin+0x690>
 8005c0e:	4897      	ldr	r0, [pc, #604]	@ (8005e6c <plotter_begin+0x694>)
 8005c10:	f7fb facf 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
			ZGX45RGG_150RPM_Constant.qd_max);
 8005c14:	4b96      	ldr	r3, [pc, #600]	@ (8005e70 <plotter_begin+0x698>)
 8005c16:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-2, 25,
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f7fa ff99 	bl	8000b54 <__aeabi_d2f>
 8005c22:	4603      	mov	r3, r0
 8005c24:	ee01 3a90 	vmov	s3, r3
 8005c28:	eeb3 1a09 	vmov.f32	s2, #57	@ 0x41c80000  25.0
 8005c2c:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8005e74 <plotter_begin+0x69c>
 8005c30:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005c34:	4890      	ldr	r0, [pc, #576]	@ (8005e78 <plotter_begin+0x6a0>)
 8005c36:	f7fb fabc 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8005c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005e70 <plotter_begin+0x698>)
 8005c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 3000, 200, 0,
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa ff86 	bl	8000b54 <__aeabi_d2f>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	ee01 3a90 	vmov	s3, r3
 8005c4e:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 8005e4c <plotter_begin+0x674>
 8005c52:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8005e7c <plotter_begin+0x6a4>
 8005c56:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8005e80 <plotter_begin+0x6a8>
 8005c5a:	488a      	ldr	r0, [pc, #552]	@ (8005e84 <plotter_begin+0x6ac>)
 8005c5c:	f7fb faa9 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8005c60:	4983      	ldr	r1, [pc, #524]	@ (8005e70 <plotter_begin+0x698>)
 8005c62:	4889      	ldr	r0, [pc, #548]	@ (8005e88 <plotter_begin+0x6b0>)
 8005c64:	f7fb fc68 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8005c68:	497a      	ldr	r1, [pc, #488]	@ (8005e54 <plotter_begin+0x67c>)
 8005c6a:	4888      	ldr	r0, [pc, #544]	@ (8005e8c <plotter_begin+0x6b4>)
 8005c6c:	f7fb fdf4 	bl	8001858 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8005c70:	4a87      	ldr	r2, [pc, #540]	@ (8005e90 <plotter_begin+0x6b8>)
 8005c72:	497f      	ldr	r1, [pc, #508]	@ (8005e70 <plotter_begin+0x698>)
 8005c74:	4887      	ldr	r0, [pc, #540]	@ (8005e94 <plotter_begin+0x6bc>)
 8005c76:	f7fb fcee 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8005c7a:	4a85      	ldr	r2, [pc, #532]	@ (8005e90 <plotter_begin+0x6b8>)
 8005c7c:	4975      	ldr	r1, [pc, #468]	@ (8005e54 <plotter_begin+0x67c>)
 8005c7e:	4886      	ldr	r0, [pc, #536]	@ (8005e98 <plotter_begin+0x6c0>)
 8005c80:	f7fb fe79 	bl	8001976 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8005c84:	2302      	movs	r3, #2
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8005e9c <plotter_begin+0x6c4>
 8005c8c:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8005ea0 <plotter_begin+0x6c8>
 8005c90:	2364      	movs	r3, #100	@ 0x64
 8005c92:	4a84      	ldr	r2, [pc, #528]	@ (8005ea4 <plotter_begin+0x6cc>)
 8005c94:	4984      	ldr	r1, [pc, #528]	@ (8005ea8 <plotter_begin+0x6d0>)
 8005c96:	4885      	ldr	r0, [pc, #532]	@ (8005eac <plotter_begin+0x6d4>)
 8005c98:	f7fb f942 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8005c9c:	2105      	movs	r1, #5
 8005c9e:	ed9f 0a84 	vldr	s0, [pc, #528]	@ 8005eb0 <plotter_begin+0x6d8>
 8005ca2:	4882      	ldr	r0, [pc, #520]	@ (8005eac <plotter_begin+0x6d4>)
 8005ca4:	f7fb f9ee 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8005ca8:	4880      	ldr	r0, [pc, #512]	@ (8005eac <plotter_begin+0x6d4>)
 8005caa:	f7fb f991 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005cae:	eddf 0a81 	vldr	s1, [pc, #516]	@ 8005eb4 <plotter_begin+0x6dc>
 8005cb2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005cb6:	211f      	movs	r1, #31
 8005cb8:	487f      	ldr	r0, [pc, #508]	@ (8005eb8 <plotter_begin+0x6e0>)
 8005cba:	f7fb fe6f 	bl	800199c <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005cbe:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8005eb4 <plotter_begin+0x6dc>
 8005cc2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005cc6:	211f      	movs	r1, #31
 8005cc8:	487c      	ldr	r0, [pc, #496]	@ (8005ebc <plotter_begin+0x6e4>)
 8005cca:	f7fb fe67 	bl	800199c <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005cce:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005eb4 <plotter_begin+0x6dc>
 8005cd2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005cd6:	211f      	movs	r1, #31
 8005cd8:	4879      	ldr	r0, [pc, #484]	@ (8005ec0 <plotter_begin+0x6e8>)
 8005cda:	f7fb fe5f 	bl	800199c <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005cde:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8005eb4 <plotter_begin+0x6dc>
 8005ce2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005ce6:	211f      	movs	r1, #31
 8005ce8:	4876      	ldr	r0, [pc, #472]	@ (8005ec4 <plotter_begin+0x6ec>)
 8005cea:	f7fb fe57 	bl	800199c <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005cee:	4b59      	ldr	r3, [pc, #356]	@ (8005e54 <plotter_begin+0x67c>)
 8005cf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	f7fa ff2c 	bl	8000b54 <__aeabi_d2f>
 8005cfc:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8005cfe:	4b55      	ldr	r3, [pc, #340]	@ (8005e54 <plotter_begin+0x67c>)
 8005d00:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005d04:	4610      	mov	r0, r2
 8005d06:	4619      	mov	r1, r3
 8005d08:	f7fa ff24 	bl	8000b54 <__aeabi_d2f>
 8005d0c:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8005d0e:	4b51      	ldr	r3, [pc, #324]	@ (8005e54 <plotter_begin+0x67c>)
 8005d10:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005d14:	4610      	mov	r0, r2
 8005d16:	4619      	mov	r1, r3
 8005d18:	f7fa ff1c 	bl	8000b54 <__aeabi_d2f>
 8005d1c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8005d1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005e54 <plotter_begin+0x67c>)
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	f7fa ff14 	bl	8000b54 <__aeabi_d2f>
 8005d2c:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8005d2e:	4b49      	ldr	r3, [pc, #292]	@ (8005e54 <plotter_begin+0x67c>)
 8005d30:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005d34:	4610      	mov	r0, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	f7fa ff0c 	bl	8000b54 <__aeabi_d2f>
 8005d3c:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8005d3e:	4b45      	ldr	r3, [pc, #276]	@ (8005e54 <plotter_begin+0x67c>)
 8005d40:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8005d44:	4610      	mov	r0, r2
 8005d46:	4619      	mov	r1, r3
 8005d48:	f7fa ff04 	bl	8000b54 <__aeabi_d2f>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8005d52:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005d56:	ee03 3a10 	vmov	s6, r3
 8005d5a:	ee02 9a90 	vmov	s5, r9
 8005d5e:	ee02 8a10 	vmov	s4, r8
 8005d62:	ee01 6a90 	vmov	s3, r6
 8005d66:	ee01 5a10 	vmov	s2, r5
 8005d6a:	ee00 4a90 	vmov	s1, r4
 8005d6e:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8005ec8 <plotter_begin+0x6f0>
 8005d72:	4856      	ldr	r0, [pc, #344]	@ (8005ecc <plotter_begin+0x6f4>)
 8005d74:	f7fc f812 	bl	8001d9c <MotorKalman_Init>

	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005d78:	4b3d      	ldr	r3, [pc, #244]	@ (8005e70 <plotter_begin+0x698>)
 8005d7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d7e:	4610      	mov	r0, r2
 8005d80:	4619      	mov	r1, r3
 8005d82:	f7fa fee7 	bl	8000b54 <__aeabi_d2f>
 8005d86:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8005d88:	4b39      	ldr	r3, [pc, #228]	@ (8005e70 <plotter_begin+0x698>)
 8005d8a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	f7fa fedf 	bl	8000b54 <__aeabi_d2f>
 8005d96:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8005d98:	4b35      	ldr	r3, [pc, #212]	@ (8005e70 <plotter_begin+0x698>)
 8005d9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	f7fa fed7 	bl	8000b54 <__aeabi_d2f>
 8005da6:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8005da8:	4b31      	ldr	r3, [pc, #196]	@ (8005e70 <plotter_begin+0x698>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	f7fa fecf 	bl	8000b54 <__aeabi_d2f>
 8005db6:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8005db8:	4b2d      	ldr	r3, [pc, #180]	@ (8005e70 <plotter_begin+0x698>)
 8005dba:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	f7fa fec7 	bl	8000b54 <__aeabi_d2f>
 8005dc6:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 1.0);
 8005dc8:	4b29      	ldr	r3, [pc, #164]	@ (8005e70 <plotter_begin+0x698>)
 8005dca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&revolute_kalman, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8005dce:	4610      	mov	r0, r2
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	f7fa febf 	bl	8000b54 <__aeabi_d2f>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8005ddc:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8005de0:	ee03 3a10 	vmov	s6, r3
 8005de4:	ee02 9a90 	vmov	s5, r9
 8005de8:	ee02 8a10 	vmov	s4, r8
 8005dec:	ee01 6a90 	vmov	s3, r6
 8005df0:	ee01 5a10 	vmov	s2, r5
 8005df4:	ee00 4a90 	vmov	s1, r4
 8005df8:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8005ec8 <plotter_begin+0x6f0>
 8005dfc:	4834      	ldr	r0, [pc, #208]	@ (8005ed0 <plotter_begin+0x6f8>)
 8005dfe:	f7fb ffcd 	bl	8001d9c <MotorKalman_Init>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8005e02:	23c8      	movs	r3, #200	@ 0xc8
 8005e04:	9301      	str	r3, [sp, #4]
 8005e06:	2315      	movs	r3, #21
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	4b32      	ldr	r3, [pc, #200]	@ (8005ed4 <plotter_begin+0x6fc>)
 8005e0c:	4a32      	ldr	r2, [pc, #200]	@ (8005ed8 <plotter_begin+0x700>)
 8005e0e:	4933      	ldr	r1, [pc, #204]	@ (8005edc <plotter_begin+0x704>)
 8005e10:	4833      	ldr	r0, [pc, #204]	@ (8005ee0 <plotter_begin+0x708>)
 8005e12:	f7fb ff5b 	bl	8001ccc <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8005e16:	4833      	ldr	r0, [pc, #204]	@ (8005ee4 <plotter_begin+0x70c>)
 8005e18:	f004 fdba 	bl	800a990 <HAL_TIM_Base_Start_IT>
}
 8005e1c:	bf00      	nop
 8005e1e:	3704      	adds	r7, #4
 8005e20:	46bd      	mov	sp, r7
 8005e22:	ecbd 8b02 	vpop	{d8}
 8005e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20001aa4 	.word	0x20001aa4
 8005e30:	2000040c 	.word	0x2000040c
 8005e34:	20001c3c 	.word	0x20001c3c
 8005e38:	20000318 	.word	0x20000318
 8005e3c:	48000800 	.word	0x48000800
 8005e40:	20000364 	.word	0x20000364
 8005e44:	20001840 	.word	0x20001840
 8005e48:	20000520 	.word	0x20000520
 8005e4c:	00000000 	.word	0x00000000
 8005e50:	44fa0000 	.word	0x44fa0000
 8005e54:	20000060 	.word	0x20000060
 8005e58:	42960000 	.word	0x42960000
 8005e5c:	2edbe6ff 	.word	0x2edbe6ff
 8005e60:	20000468 	.word	0x20000468
 8005e64:	3727c5ac 	.word	0x3727c5ac
 8005e68:	43160000 	.word	0x43160000
 8005e6c:	20000490 	.word	0x20000490
 8005e70:	20000000 	.word	0x20000000
 8005e74:	3c23d70a 	.word	0x3c23d70a
 8005e78:	200004b8 	.word	0x200004b8
 8005e7c:	43480000 	.word	0x43480000
 8005e80:	453b8000 	.word	0x453b8000
 8005e84:	200004e0 	.word	0x200004e0
 8005e88:	20000514 	.word	0x20000514
 8005e8c:	20000508 	.word	0x20000508
 8005e90:	200000c0 	.word	0x200000c0
 8005e94:	20000518 	.word	0x20000518
 8005e98:	2000050c 	.word	0x2000050c
 8005e9c:	457ff000 	.word	0x457ff000
 8005ea0:	40533333 	.word	0x40533333
 8005ea4:	200010dc 	.word	0x200010dc
 8005ea8:	20000170 	.word	0x20000170
 8005eac:	20000538 	.word	0x20000538
 8005eb0:	45000000 	.word	0x45000000
 8005eb4:	447a0000 	.word	0x447a0000
 8005eb8:	200009e0 	.word	0x200009e0
 8005ebc:	200009d4 	.word	0x200009d4
 8005ec0:	200009f8 	.word	0x200009f8
 8005ec4:	200009ec 	.word	0x200009ec
 8005ec8:	3a83126f 	.word	0x3a83126f
 8005ecc:	20000a04 	.word	0x20000a04
 8005ed0:	20000d70 	.word	0x20000d70
 8005ed4:	2000167c 	.word	0x2000167c
 8005ed8:	20001d08 	.word	0x20001d08
 8005edc:	20001ea0 	.word	0x20001ea0
 8005ee0:	200011a4 	.word	0x200011a4
 8005ee4:	2000190c 	.word	0x2000190c

08005ee8 <plotter_reset>:

void plotter_reset() {
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8005eec:	4803      	ldr	r0, [pc, #12]	@ (8005efc <plotter_reset+0x14>)
 8005eee:	f7fd fe17 	bl	8003b20 <QEI_reset>
	QEI_reset(&revolute_encoder);
 8005ef2:	4803      	ldr	r0, [pc, #12]	@ (8005f00 <plotter_reset+0x18>)
 8005ef4:	f7fd fe14 	bl	8003b20 <QEI_reset>
}
 8005ef8:	bf00      	nop
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	200003b0 	.word	0x200003b0
 8005f00:	2000040c 	.word	0x2000040c

08005f04 <plotter_update_sensors>:

void plotter_update_sensors() {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8005f08:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8006070 <plotter_update_sensors+0x16c>
 8005f0c:	ed9f 0a59 	vldr	s0, [pc, #356]	@ 8006074 <plotter_update_sensors+0x170>
 8005f10:	2106      	movs	r1, #6
 8005f12:	4859      	ldr	r0, [pc, #356]	@ (8006078 <plotter_update_sensors+0x174>)
 8005f14:	f7fb f8e0 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8005f18:	eef0 7a40 	vmov.f32	s15, s0
 8005f1c:	4b57      	ldr	r3, [pc, #348]	@ (800607c <plotter_update_sensors+0x178>)
 8005f1e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8005f22:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8006070 <plotter_update_sensors+0x16c>
 8005f26:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8006074 <plotter_update_sensors+0x170>
 8005f2a:	2107      	movs	r1, #7
 8005f2c:	4852      	ldr	r0, [pc, #328]	@ (8006078 <plotter_update_sensors+0x174>)
 8005f2e:	f7fb f8d3 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8005f32:	eef0 7a40 	vmov.f32	s15, s0
 8005f36:	4b52      	ldr	r3, [pc, #328]	@ (8006080 <plotter_update_sensors+0x17c>)
 8005f38:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8005f3c:	2180      	movs	r1, #128	@ 0x80
 8005f3e:	4851      	ldr	r0, [pc, #324]	@ (8006084 <plotter_update_sensors+0x180>)
 8005f40:	f003 fbda 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	4b4d      	ldr	r3, [pc, #308]	@ (8006088 <plotter_update_sensors+0x184>)
 8005f54:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8005f56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f5a:	484c      	ldr	r0, [pc, #304]	@ (800608c <plotter_update_sensors+0x188>)
 8005f5c:	f003 fbcc 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	4b48      	ldr	r3, [pc, #288]	@ (8006090 <plotter_update_sensors+0x18c>)
 8005f70:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8005f72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f76:	4845      	ldr	r0, [pc, #276]	@ (800608c <plotter_update_sensors+0x188>)
 8005f78:	f003 fbbe 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bf0c      	ite	eq
 8005f82:	2301      	moveq	r3, #1
 8005f84:	2300      	movne	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	4b42      	ldr	r3, [pc, #264]	@ (8006094 <plotter_update_sensors+0x190>)
 8005f8c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8005f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005f92:	483e      	ldr	r0, [pc, #248]	@ (800608c <plotter_update_sensors+0x188>)
 8005f94:	f003 fbb0 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2301      	moveq	r3, #1
 8005fa0:	2300      	movne	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	4b3c      	ldr	r3, [pc, #240]	@ (8006098 <plotter_update_sensors+0x194>)
 8005fa8:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005faa:	2120      	movs	r1, #32
 8005fac:	4835      	ldr	r0, [pc, #212]	@ (8006084 <plotter_update_sensors+0x180>)
 8005fae:	f003 fba3 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b39      	ldr	r3, [pc, #228]	@ (800609c <plotter_update_sensors+0x198>)
 8005fb8:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8005fba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005fbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fc2:	f003 fb99 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b35      	ldr	r3, [pc, #212]	@ (80060a0 <plotter_update_sensors+0x19c>)
 8005fcc:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8005fce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005fd2:	482c      	ldr	r0, [pc, #176]	@ (8006084 <plotter_update_sensors+0x180>)
 8005fd4:	f003 fb90 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	461a      	mov	r2, r3
 8005fdc:	4b31      	ldr	r3, [pc, #196]	@ (80060a4 <plotter_update_sensors+0x1a0>)
 8005fde:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8005fe0:	2104      	movs	r1, #4
 8005fe2:	4828      	ldr	r0, [pc, #160]	@ (8006084 <plotter_update_sensors+0x180>)
 8005fe4:	f003 fb88 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	461a      	mov	r2, r3
 8005fec:	4b2e      	ldr	r3, [pc, #184]	@ (80060a8 <plotter_update_sensors+0x1a4>)
 8005fee:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8005ff0:	2102      	movs	r1, #2
 8005ff2:	4824      	ldr	r0, [pc, #144]	@ (8006084 <plotter_update_sensors+0x180>)
 8005ff4:	f003 fb80 	bl	80096f8 <HAL_GPIO_ReadPin>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80060ac <plotter_update_sensors+0x1a8>)
 8005ffe:	601a      	str	r2, [r3, #0]

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006000:	2110      	movs	r1, #16
 8006002:	4820      	ldr	r0, [pc, #128]	@ (8006084 <plotter_update_sensors+0x180>)
 8006004:	f003 fb78 	bl	80096f8 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	bf0c      	ite	eq
 800600e:	2301      	moveq	r3, #1
 8006010:	2300      	movne	r3, #0
 8006012:	b2db      	uxtb	r3, r3
 8006014:	461a      	mov	r2, r3
 8006016:	4b26      	ldr	r3, [pc, #152]	@ (80060b0 <plotter_update_sensors+0x1ac>)
 8006018:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <plotter_update_sensors+0x1a4>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <plotter_update_sensors+0x126>
		servo_state = PEN_UP;
 8006022:	4b24      	ldr	r3, [pc, #144]	@ (80060b4 <plotter_update_sensors+0x1b0>)
 8006024:	2202      	movs	r2, #2
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e00a      	b.n	8006040 <plotter_update_sensors+0x13c>
	} else if (low_lim) {
 800602a:	4b20      	ldr	r3, [pc, #128]	@ (80060ac <plotter_update_sensors+0x1a8>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <plotter_update_sensors+0x136>
		servo_state = PEN_DOWN;
 8006032:	4b20      	ldr	r3, [pc, #128]	@ (80060b4 <plotter_update_sensors+0x1b0>)
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
 8006038:	e002      	b.n	8006040 <plotter_update_sensors+0x13c>
	} else {
		servo_state = PEN_IDLE;
 800603a:	4b1e      	ldr	r3, [pc, #120]	@ (80060b4 <plotter_update_sensors+0x1b0>)
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 8006040:	4b17      	ldr	r3, [pc, #92]	@ (80060a0 <plotter_update_sensors+0x19c>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <plotter_update_sensors+0x14c>
		prismatic_state = PP_AT_TOP_END_POSITION;
 8006048:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <plotter_update_sensors+0x1b4>)
 800604a:	2200      	movs	r2, #0
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e006      	b.n	800605e <plotter_update_sensors+0x15a>
	} else if (low_photo) {
 8006050:	4b14      	ldr	r3, [pc, #80]	@ (80060a4 <plotter_update_sensors+0x1a0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <plotter_update_sensors+0x15a>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 8006058:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <plotter_update_sensors+0x1b4>)
 800605a:	2202      	movs	r2, #2
 800605c:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 800605e:	4b0f      	ldr	r3, [pc, #60]	@ (800609c <plotter_update_sensors+0x198>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <plotter_update_sensors+0x168>
		revolute_state = RP_AT_HOME_POSITION;
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <plotter_update_sensors+0x1b8>)
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
	}
}
 800606c:	bf00      	nop
 800606e:	bd80      	pop	{r7, pc}
 8006070:	42480000 	.word	0x42480000
 8006074:	c2480000 	.word	0xc2480000
 8006078:	20000538 	.word	0x20000538
 800607c:	2000180c 	.word	0x2000180c
 8006080:	20001810 	.word	0x20001810
 8006084:	48000400 	.word	0x48000400
 8006088:	2000182c 	.word	0x2000182c
 800608c:	48000800 	.word	0x48000800
 8006090:	20001830 	.word	0x20001830
 8006094:	20001834 	.word	0x20001834
 8006098:	20001838 	.word	0x20001838
 800609c:	20001814 	.word	0x20001814
 80060a0:	2000181c 	.word	0x2000181c
 80060a4:	20001820 	.word	0x20001820
 80060a8:	20001824 	.word	0x20001824
 80060ac:	20001828 	.word	0x20001828
 80060b0:	20001818 	.word	0x20001818
 80060b4:	20000314 	.word	0x20000314
 80060b8:	200000f0 	.word	0x200000f0
 80060bc:	200000f1 	.word	0x200000f1

080060c0 <plotter_pen_up>:

void plotter_pen_up() {
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80060c4:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80060c8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80060d8 <plotter_pen_up+0x18>
 80060cc:	4803      	ldr	r0, [pc, #12]	@ (80060dc <plotter_pen_up+0x1c>)
 80060ce:	f7fd f89b 	bl	8003208 <PWM_write_duty>
}
 80060d2:	bf00      	nop
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	42480000 	.word	0x42480000
 80060dc:	20000520 	.word	0x20000520

080060e0 <plotter_pen_down>:

void plotter_pen_down() {
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 80060e4:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80060e8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80060f8 <plotter_pen_down+0x18>
 80060ec:	4803      	ldr	r0, [pc, #12]	@ (80060fc <plotter_pen_down+0x1c>)
 80060ee:	f7fd f88b 	bl	8003208 <PWM_write_duty>
}
 80060f2:	bf00      	nop
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	42480000 	.word	0x42480000
 80060fc:	20000520 	.word	0x20000520

08006100 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	78fa      	ldrb	r2, [r7, #3]
 8006110:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006118:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006120:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f04f 0200 	mov.w	r2, #0
 8006140:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1b      	ldr	r2, [pc, #108]	@ (80061b4 <SIGNAL_init+0xb4>)
 8006146:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800614e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d828      	bhi.n	80061a8 <SIGNAL_init+0xa8>
 8006156:	a201      	add	r2, pc, #4	@ (adr r2, 800615c <SIGNAL_init+0x5c>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	080061a7 	.word	0x080061a7
 8006160:	0800616d 	.word	0x0800616d
 8006164:	0800618b 	.word	0x0800618b
 8006168:	08006195 	.word	0x08006195
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006178:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a0e      	ldr	r2, [pc, #56]	@ (80061b8 <SIGNAL_init+0xb8>)
 800617e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006186:	621a      	str	r2, [r3, #32]
            break;
 8006188:	e00e      	b.n	80061a8 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8006190:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8006192:	e009      	b.n	80061a8 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80061a2:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80061a4:	e000      	b.n	80061a8 <SIGNAL_init+0xa8>
            break;
 80061a6:	bf00      	nop
    }
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr
 80061b4:	bf800000 	.word	0xbf800000
 80061b8:	41200000 	.word	0x41200000

080061bc <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80061bc:	b480      	push	{r7}
 80061be:	b089      	sub	sp, #36	@ 0x24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	61f8      	str	r0, [r7, #28]
 80061c4:	ed87 0a06 	vstr	s0, [r7, #24]
 80061c8:	edc7 0a05 	vstr	s1, [r7, #20]
 80061cc:	ed87 1a04 	vstr	s2, [r7, #16]
 80061d0:	edc7 1a03 	vstr	s3, [r7, #12]
 80061d4:	ed87 2a02 	vstr	s4, [r7, #8]
 80061d8:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	2200      	movs	r2, #0
 80061e0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006206:	bf00      	nop
 8006208:	3724      	adds	r7, #36	@ 0x24
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8006212:	b480      	push	{r7}
 8006214:	b089      	sub	sp, #36	@ 0x24
 8006216:	af00      	add	r7, sp, #0
 8006218:	61f8      	str	r0, [r7, #28]
 800621a:	ed87 0a06 	vstr	s0, [r7, #24]
 800621e:	edc7 0a05 	vstr	s1, [r7, #20]
 8006222:	ed87 1a04 	vstr	s2, [r7, #16]
 8006226:	edc7 1a03 	vstr	s3, [r7, #12]
 800622a:	ed87 2a02 	vstr	s4, [r7, #8]
 800622e:	edc7 2a01 	vstr	s5, [r7, #4]
 8006232:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	2202      	movs	r2, #2
 800623a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006266:	bf00      	nop
 8006268:	3724      	adds	r7, #36	@ 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
	...

08006274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800627a:	4b0f      	ldr	r3, [pc, #60]	@ (80062b8 <HAL_MspInit+0x44>)
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	4a0e      	ldr	r2, [pc, #56]	@ (80062b8 <HAL_MspInit+0x44>)
 8006280:	f043 0301 	orr.w	r3, r3, #1
 8006284:	6613      	str	r3, [r2, #96]	@ 0x60
 8006286:	4b0c      	ldr	r3, [pc, #48]	@ (80062b8 <HAL_MspInit+0x44>)
 8006288:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	607b      	str	r3, [r7, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	4b09      	ldr	r3, [pc, #36]	@ (80062b8 <HAL_MspInit+0x44>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006296:	4a08      	ldr	r2, [pc, #32]	@ (80062b8 <HAL_MspInit+0x44>)
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800629c:	6593      	str	r3, [r2, #88]	@ 0x58
 800629e:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <HAL_MspInit+0x44>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062a6:	603b      	str	r3, [r7, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80062aa:	f003 fb11 	bl	80098d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062ae:	bf00      	nop
 80062b0:	3708      	adds	r7, #8
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000

080062bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80062c0:	bf00      	nop
 80062c2:	e7fd      	b.n	80062c0 <NMI_Handler+0x4>

080062c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <HardFault_Handler+0x4>

080062cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062d0:	bf00      	nop
 80062d2:	e7fd      	b.n	80062d0 <MemManage_Handler+0x4>

080062d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <BusFault_Handler+0x4>

080062dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <UsageFault_Handler+0x4>

080062e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062f2:	b480      	push	{r7}
 80062f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006312:	f000 ff97 	bl	8007244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006316:	bf00      	nop
 8006318:	bd80      	pop	{r7, pc}
	...

0800631c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006320:	4802      	ldr	r0, [pc, #8]	@ (800632c <DMA1_Channel1_IRQHandler+0x10>)
 8006322:	f002 ff18 	bl	8009156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006326:	bf00      	nop
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200001dc 	.word	0x200001dc

08006330 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006334:	4802      	ldr	r0, [pc, #8]	@ (8006340 <DMA1_Channel2_IRQHandler+0x10>)
 8006336:	f002 ff0e 	bl	8009156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	2000202c 	.word	0x2000202c

08006344 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006348:	4802      	ldr	r0, [pc, #8]	@ (8006354 <DMA1_Channel3_IRQHandler+0x10>)
 800634a:	f002 ff04 	bl	8009156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000208c 	.word	0x2000208c

08006358 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800635c:	4802      	ldr	r0, [pc, #8]	@ (8006368 <DMA1_Channel4_IRQHandler+0x10>)
 800635e:	f002 fefa 	bl	8009156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20001f6c 	.word	0x20001f6c

0800636c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8006370:	4802      	ldr	r0, [pc, #8]	@ (800637c <DMA1_Channel5_IRQHandler+0x10>)
 8006372:	f002 fef0 	bl	8009156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20001fcc 	.word	0x20001fcc

08006380 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006384:	4803      	ldr	r0, [pc, #12]	@ (8006394 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8006386:	f004 ff29 	bl	800b1dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800638a:	4803      	ldr	r0, [pc, #12]	@ (8006398 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800638c:	f004 ff26 	bl	800b1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006390:	bf00      	nop
 8006392:	bd80      	pop	{r7, pc}
 8006394:	20001840 	.word	0x20001840
 8006398:	20001d08 	.word	0x20001d08

0800639c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80063a0:	4802      	ldr	r0, [pc, #8]	@ (80063ac <TIM2_IRQHandler+0x10>)
 80063a2:	f004 ff1b 	bl	800b1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	2000190c 	.word	0x2000190c

080063b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80063b4:	4802      	ldr	r0, [pc, #8]	@ (80063c0 <TIM3_IRQHandler+0x10>)
 80063b6:	f004 ff11 	bl	800b1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	200019d8 	.word	0x200019d8

080063c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80063c8:	4802      	ldr	r0, [pc, #8]	@ (80063d4 <TIM4_IRQHandler+0x10>)
 80063ca:	f004 ff07 	bl	800b1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80063ce:	bf00      	nop
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20001aa4 	.word	0x20001aa4

080063d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063dc:	4802      	ldr	r0, [pc, #8]	@ (80063e8 <USART2_IRQHandler+0x10>)
 80063de:	f006 fc51 	bl	800cc84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063e2:	bf00      	nop
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20001ea0 	.word	0x20001ea0

080063ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80063f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80063f4:	f003 f9b0 	bl	8009758 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80063f8:	bf00      	nop
 80063fa:	bd80      	pop	{r7, pc}

080063fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006400:	4802      	ldr	r0, [pc, #8]	@ (800640c <LPUART1_IRQHandler+0x10>)
 8006402:	f006 fc3f 	bl	800cc84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20001dd4 	.word	0x20001dd4

08006410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006418:	4a14      	ldr	r2, [pc, #80]	@ (800646c <_sbrk+0x5c>)
 800641a:	4b15      	ldr	r3, [pc, #84]	@ (8006470 <_sbrk+0x60>)
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006424:	4b13      	ldr	r3, [pc, #76]	@ (8006474 <_sbrk+0x64>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d102      	bne.n	8006432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800642c:	4b11      	ldr	r3, [pc, #68]	@ (8006474 <_sbrk+0x64>)
 800642e:	4a12      	ldr	r2, [pc, #72]	@ (8006478 <_sbrk+0x68>)
 8006430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006432:	4b10      	ldr	r3, [pc, #64]	@ (8006474 <_sbrk+0x64>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4413      	add	r3, r2
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	429a      	cmp	r2, r3
 800643e:	d207      	bcs.n	8006450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006440:	f008 fab2 	bl	800e9a8 <__errno>
 8006444:	4603      	mov	r3, r0
 8006446:	220c      	movs	r2, #12
 8006448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800644a:	f04f 33ff 	mov.w	r3, #4294967295
 800644e:	e009      	b.n	8006464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006450:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <_sbrk+0x64>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006456:	4b07      	ldr	r3, [pc, #28]	@ (8006474 <_sbrk+0x64>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4413      	add	r3, r2
 800645e:	4a05      	ldr	r2, [pc, #20]	@ (8006474 <_sbrk+0x64>)
 8006460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006462:	68fb      	ldr	r3, [r7, #12]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	20020000 	.word	0x20020000
 8006470:	00000400 	.word	0x00000400
 8006474:	2000183c 	.word	0x2000183c
 8006478:	20002238 	.word	0x20002238

0800647c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006480:	4b06      	ldr	r3, [pc, #24]	@ (800649c <SystemInit+0x20>)
 8006482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006486:	4a05      	ldr	r2, [pc, #20]	@ (800649c <SystemInit+0x20>)
 8006488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800648c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006490:	bf00      	nop
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	e000ed00 	.word	0xe000ed00

080064a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b098      	sub	sp, #96	@ 0x60
 80064a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	605a      	str	r2, [r3, #4]
 80064b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064b6:	2200      	movs	r2, #0
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	605a      	str	r2, [r3, #4]
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	60da      	str	r2, [r3, #12]
 80064c0:	611a      	str	r2, [r3, #16]
 80064c2:	615a      	str	r2, [r3, #20]
 80064c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80064c6:	1d3b      	adds	r3, r7, #4
 80064c8:	2234      	movs	r2, #52	@ 0x34
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f008 fa53 	bl	800e978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064d2:	4b3b      	ldr	r3, [pc, #236]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064d4:	4a3b      	ldr	r2, [pc, #236]	@ (80065c4 <MX_TIM1_Init+0x124>)
 80064d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064d8:	4b39      	ldr	r3, [pc, #228]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064da:	2200      	movs	r2, #0
 80064dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064de:	4b38      	ldr	r3, [pc, #224]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064e4:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064ec:	4b34      	ldr	r3, [pc, #208]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064f2:	4b33      	ldr	r3, [pc, #204]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064f8:	4b31      	ldr	r3, [pc, #196]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064fe:	4830      	ldr	r0, [pc, #192]	@ (80065c0 <MX_TIM1_Init+0x120>)
 8006500:	f004 fabe 	bl	800aa80 <HAL_TIM_PWM_Init>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800650a:	f7ff f95f 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800650e:	2300      	movs	r3, #0
 8006510:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006512:	2300      	movs	r3, #0
 8006514:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006516:	2300      	movs	r3, #0
 8006518:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800651a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800651e:	4619      	mov	r1, r3
 8006520:	4827      	ldr	r0, [pc, #156]	@ (80065c0 <MX_TIM1_Init+0x120>)
 8006522:	f006 f8cf 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d001      	beq.n	8006530 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800652c:	f7ff f94e 	bl	80057cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006530:	2360      	movs	r3, #96	@ 0x60
 8006532:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006538:	2300      	movs	r3, #0
 800653a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800653c:	2300      	movs	r3, #0
 800653e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006540:	2300      	movs	r3, #0
 8006542:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006544:	2300      	movs	r3, #0
 8006546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006548:	2300      	movs	r3, #0
 800654a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800654c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006550:	220c      	movs	r2, #12
 8006552:	4619      	mov	r1, r3
 8006554:	481a      	ldr	r0, [pc, #104]	@ (80065c0 <MX_TIM1_Init+0x120>)
 8006556:	f004 ffbb 	bl	800b4d0 <HAL_TIM_PWM_ConfigChannel>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8006560:	f7ff f934 	bl	80057cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006564:	2300      	movs	r3, #0
 8006566:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006568:	2300      	movs	r3, #0
 800656a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800657c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800657e:	2300      	movs	r3, #0
 8006580:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006582:	2300      	movs	r3, #0
 8006584:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006586:	2300      	movs	r3, #0
 8006588:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800658a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800658e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006594:	2300      	movs	r3, #0
 8006596:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006598:	2300      	movs	r3, #0
 800659a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800659c:	1d3b      	adds	r3, r7, #4
 800659e:	4619      	mov	r1, r3
 80065a0:	4807      	ldr	r0, [pc, #28]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80065a2:	f006 f925 	bl	800c7f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80065ac:	f7ff f90e 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80065b0:	4803      	ldr	r0, [pc, #12]	@ (80065c0 <MX_TIM1_Init+0x120>)
 80065b2:	f000 fb77 	bl	8006ca4 <HAL_TIM_MspPostInit>

}
 80065b6:	bf00      	nop
 80065b8:	3760      	adds	r7, #96	@ 0x60
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20001840 	.word	0x20001840
 80065c4:	40012c00 	.word	0x40012c00

080065c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b088      	sub	sp, #32
 80065cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065ce:	f107 0310 	add.w	r3, r7, #16
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]
 80065d6:	605a      	str	r2, [r3, #4]
 80065d8:	609a      	str	r2, [r3, #8]
 80065da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065dc:	1d3b      	adds	r3, r7, #4
 80065de:	2200      	movs	r2, #0
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	605a      	str	r2, [r3, #4]
 80065e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80065e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006660 <MX_TIM2_Init+0x98>)
 80065e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80065ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006660 <MX_TIM2_Init+0x98>)
 80065f0:	22a9      	movs	r2, #169	@ 0xa9
 80065f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006660 <MX_TIM2_Init+0x98>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80065fa:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <MX_TIM2_Init+0x98>)
 80065fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006600:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006602:	4b17      	ldr	r3, [pc, #92]	@ (8006660 <MX_TIM2_Init+0x98>)
 8006604:	2200      	movs	r2, #0
 8006606:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006608:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <MX_TIM2_Init+0x98>)
 800660a:	2200      	movs	r2, #0
 800660c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800660e:	4814      	ldr	r0, [pc, #80]	@ (8006660 <MX_TIM2_Init+0x98>)
 8006610:	f004 f8ea 	bl	800a7e8 <HAL_TIM_Base_Init>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d001      	beq.n	800661e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800661a:	f7ff f8d7 	bl	80057cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800661e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006622:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006624:	f107 0310 	add.w	r3, r7, #16
 8006628:	4619      	mov	r1, r3
 800662a:	480d      	ldr	r0, [pc, #52]	@ (8006660 <MX_TIM2_Init+0x98>)
 800662c:	f005 f864 	bl	800b6f8 <HAL_TIM_ConfigClockSource>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006636:	f7ff f8c9 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800663a:	2300      	movs	r3, #0
 800663c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800663e:	2300      	movs	r3, #0
 8006640:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006642:	1d3b      	adds	r3, r7, #4
 8006644:	4619      	mov	r1, r3
 8006646:	4806      	ldr	r0, [pc, #24]	@ (8006660 <MX_TIM2_Init+0x98>)
 8006648:	f006 f83c 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006652:	f7ff f8bb 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006656:	bf00      	nop
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	2000190c 	.word	0x2000190c

08006664 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08c      	sub	sp, #48	@ 0x30
 8006668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	2224      	movs	r2, #36	@ 0x24
 8006670:	2100      	movs	r1, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f008 f980 	bl	800e978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006678:	463b      	mov	r3, r7
 800667a:	2200      	movs	r2, #0
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
 8006680:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006682:	4b21      	ldr	r3, [pc, #132]	@ (8006708 <MX_TIM3_Init+0xa4>)
 8006684:	4a21      	ldr	r2, [pc, #132]	@ (800670c <MX_TIM3_Init+0xa8>)
 8006686:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006688:	4b1f      	ldr	r3, [pc, #124]	@ (8006708 <MX_TIM3_Init+0xa4>)
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800668e:	4b1e      	ldr	r3, [pc, #120]	@ (8006708 <MX_TIM3_Init+0xa4>)
 8006690:	2200      	movs	r2, #0
 8006692:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006694:	4b1c      	ldr	r3, [pc, #112]	@ (8006708 <MX_TIM3_Init+0xa4>)
 8006696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800669a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800669c:	4b1a      	ldr	r3, [pc, #104]	@ (8006708 <MX_TIM3_Init+0xa4>)
 800669e:	2200      	movs	r2, #0
 80066a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066a2:	4b19      	ldr	r3, [pc, #100]	@ (8006708 <MX_TIM3_Init+0xa4>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80066a8:	2303      	movs	r3, #3
 80066aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80066b4:	2300      	movs	r3, #0
 80066b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80066bc:	2300      	movs	r3, #0
 80066be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80066c0:	2301      	movs	r3, #1
 80066c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80066c4:	2300      	movs	r3, #0
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80066cc:	f107 030c 	add.w	r3, r7, #12
 80066d0:	4619      	mov	r1, r3
 80066d2:	480d      	ldr	r0, [pc, #52]	@ (8006708 <MX_TIM3_Init+0xa4>)
 80066d4:	f004 fc40 	bl	800af58 <HAL_TIM_Encoder_Init>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80066de:	f7ff f875 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066e2:	2300      	movs	r3, #0
 80066e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80066ea:	463b      	mov	r3, r7
 80066ec:	4619      	mov	r1, r3
 80066ee:	4806      	ldr	r0, [pc, #24]	@ (8006708 <MX_TIM3_Init+0xa4>)
 80066f0:	f005 ffe8 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80066fa:	f7ff f867 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80066fe:	bf00      	nop
 8006700:	3730      	adds	r7, #48	@ 0x30
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200019d8 	.word	0x200019d8
 800670c:	40000400 	.word	0x40000400

08006710 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	@ 0x30
 8006714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006716:	f107 030c 	add.w	r3, r7, #12
 800671a:	2224      	movs	r2, #36	@ 0x24
 800671c:	2100      	movs	r1, #0
 800671e:	4618      	mov	r0, r3
 8006720:	f008 f92a 	bl	800e978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006724:	463b      	mov	r3, r7
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	605a      	str	r2, [r3, #4]
 800672c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800672e:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 8006730:	4a21      	ldr	r2, [pc, #132]	@ (80067b8 <MX_TIM4_Init+0xa8>)
 8006732:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006734:	4b1f      	ldr	r3, [pc, #124]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 8006736:	2200      	movs	r2, #0
 8006738:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800673a:	4b1e      	ldr	r3, [pc, #120]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 800673c:	2200      	movs	r2, #0
 800673e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8006740:	4b1c      	ldr	r3, [pc, #112]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 8006742:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006746:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006748:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 800674a:	2200      	movs	r2, #0
 800674c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800674e:	4b19      	ldr	r3, [pc, #100]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 8006750:	2200      	movs	r2, #0
 8006752:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006754:	2303      	movs	r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800675c:	2301      	movs	r3, #1
 800675e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006768:	2300      	movs	r3, #0
 800676a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800676c:	2301      	movs	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006770:	2300      	movs	r3, #0
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006774:	2300      	movs	r3, #0
 8006776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	4619      	mov	r1, r3
 800677e:	480d      	ldr	r0, [pc, #52]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 8006780:	f004 fbea 	bl	800af58 <HAL_TIM_Encoder_Init>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800678a:	f7ff f81f 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800678e:	2300      	movs	r3, #0
 8006790:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006796:	463b      	mov	r3, r7
 8006798:	4619      	mov	r1, r3
 800679a:	4806      	ldr	r0, [pc, #24]	@ (80067b4 <MX_TIM4_Init+0xa4>)
 800679c:	f005 ff92 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d001      	beq.n	80067aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80067a6:	f7ff f811 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80067aa:	bf00      	nop
 80067ac:	3730      	adds	r7, #48	@ 0x30
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	20001aa4 	.word	0x20001aa4
 80067b8:	40000800 	.word	0x40000800

080067bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	@ 0x30
 80067c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80067c2:	f107 030c 	add.w	r3, r7, #12
 80067c6:	2224      	movs	r2, #36	@ 0x24
 80067c8:	2100      	movs	r1, #0
 80067ca:	4618      	mov	r0, r3
 80067cc:	f008 f8d4 	bl	800e978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067d0:	463b      	mov	r3, r7
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
 80067d6:	605a      	str	r2, [r3, #4]
 80067d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80067da:	4b21      	ldr	r3, [pc, #132]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067dc:	4a21      	ldr	r2, [pc, #132]	@ (8006864 <MX_TIM5_Init+0xa8>)
 80067de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80067e0:	4b1f      	ldr	r3, [pc, #124]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80067ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067fa:	4b19      	ldr	r3, [pc, #100]	@ (8006860 <MX_TIM5_Init+0xa4>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006800:	2303      	movs	r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006804:	2300      	movs	r3, #0
 8006806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006808:	2301      	movs	r3, #1
 800680a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800680c:	2300      	movs	r3, #0
 800680e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006818:	2301      	movs	r3, #1
 800681a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800681c:	2300      	movs	r3, #0
 800681e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	4619      	mov	r1, r3
 800682a:	480d      	ldr	r0, [pc, #52]	@ (8006860 <MX_TIM5_Init+0xa4>)
 800682c:	f004 fb94 	bl	800af58 <HAL_TIM_Encoder_Init>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8006836:	f7fe ffc9 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800683a:	2300      	movs	r3, #0
 800683c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800683e:	2300      	movs	r3, #0
 8006840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006842:	463b      	mov	r3, r7
 8006844:	4619      	mov	r1, r3
 8006846:	4806      	ldr	r0, [pc, #24]	@ (8006860 <MX_TIM5_Init+0xa4>)
 8006848:	f005 ff3c 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8006852:	f7fe ffbb 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8006856:	bf00      	nop
 8006858:	3730      	adds	r7, #48	@ 0x30
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20001b70 	.word	0x20001b70
 8006864:	40000c00 	.word	0x40000c00

08006868 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b09c      	sub	sp, #112	@ 0x70
 800686c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800686e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006872:	2200      	movs	r2, #0
 8006874:	601a      	str	r2, [r3, #0]
 8006876:	605a      	str	r2, [r3, #4]
 8006878:	609a      	str	r2, [r3, #8]
 800687a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800687c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006888:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	605a      	str	r2, [r3, #4]
 8006892:	609a      	str	r2, [r3, #8]
 8006894:	60da      	str	r2, [r3, #12]
 8006896:	611a      	str	r2, [r3, #16]
 8006898:	615a      	str	r2, [r3, #20]
 800689a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800689c:	1d3b      	adds	r3, r7, #4
 800689e:	2234      	movs	r2, #52	@ 0x34
 80068a0:	2100      	movs	r1, #0
 80068a2:	4618      	mov	r0, r3
 80068a4:	f008 f868 	bl	800e978 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80068a8:	4b4c      	ldr	r3, [pc, #304]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068aa:	4a4d      	ldr	r2, [pc, #308]	@ (80069e0 <MX_TIM8_Init+0x178>)
 80068ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80068ae:	4b4b      	ldr	r3, [pc, #300]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068b4:	4b49      	ldr	r3, [pc, #292]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80068ba:	4b48      	ldr	r3, [pc, #288]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80068c2:	4b46      	ldr	r3, [pc, #280]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80068ca:	4b44      	ldr	r3, [pc, #272]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068d0:	4b42      	ldr	r3, [pc, #264]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80068d6:	4841      	ldr	r0, [pc, #260]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068d8:	f003 ff86 	bl	800a7e8 <HAL_TIM_Base_Init>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 80068e2:	f7fe ff73 	bl	80057cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068ea:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80068ec:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80068f0:	4619      	mov	r1, r3
 80068f2:	483a      	ldr	r0, [pc, #232]	@ (80069dc <MX_TIM8_Init+0x174>)
 80068f4:	f004 ff00 	bl	800b6f8 <HAL_TIM_ConfigClockSource>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80068fe:	f7fe ff65 	bl	80057cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006902:	4836      	ldr	r0, [pc, #216]	@ (80069dc <MX_TIM8_Init+0x174>)
 8006904:	f004 f8bc 	bl	800aa80 <HAL_TIM_PWM_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800690e:	f7fe ff5d 	bl	80057cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006912:	2300      	movs	r3, #0
 8006914:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800691a:	2300      	movs	r3, #0
 800691c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800691e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006922:	4619      	mov	r1, r3
 8006924:	482d      	ldr	r0, [pc, #180]	@ (80069dc <MX_TIM8_Init+0x174>)
 8006926:	f005 fecd 	bl	800c6c4 <HAL_TIMEx_MasterConfigSynchronization>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8006930:	f7fe ff4c 	bl	80057cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006934:	2360      	movs	r3, #96	@ 0x60
 8006936:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006938:	2300      	movs	r3, #0
 800693a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800693c:	2300      	movs	r3, #0
 800693e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006940:	2300      	movs	r3, #0
 8006942:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006944:	2300      	movs	r3, #0
 8006946:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006948:	2300      	movs	r3, #0
 800694a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800694c:	2300      	movs	r3, #0
 800694e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006950:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006954:	2200      	movs	r2, #0
 8006956:	4619      	mov	r1, r3
 8006958:	4820      	ldr	r0, [pc, #128]	@ (80069dc <MX_TIM8_Init+0x174>)
 800695a:	f004 fdb9 	bl	800b4d0 <HAL_TIM_PWM_ConfigChannel>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8006964:	f7fe ff32 	bl	80057cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006968:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800696c:	2204      	movs	r2, #4
 800696e:	4619      	mov	r1, r3
 8006970:	481a      	ldr	r0, [pc, #104]	@ (80069dc <MX_TIM8_Init+0x174>)
 8006972:	f004 fdad 	bl	800b4d0 <HAL_TIM_PWM_ConfigChannel>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800697c:	f7fe ff26 	bl	80057cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006980:	2300      	movs	r3, #0
 8006982:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006984:	2300      	movs	r3, #0
 8006986:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006994:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006998:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800699e:	2300      	movs	r3, #0
 80069a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80069a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80069aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80069ac:	2300      	movs	r3, #0
 80069ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80069b0:	2300      	movs	r3, #0
 80069b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80069b8:	1d3b      	adds	r3, r7, #4
 80069ba:	4619      	mov	r1, r3
 80069bc:	4807      	ldr	r0, [pc, #28]	@ (80069dc <MX_TIM8_Init+0x174>)
 80069be:	f005 ff17 	bl	800c7f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d001      	beq.n	80069cc <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 80069c8:	f7fe ff00 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80069cc:	4803      	ldr	r0, [pc, #12]	@ (80069dc <MX_TIM8_Init+0x174>)
 80069ce:	f000 f969 	bl	8006ca4 <HAL_TIM_MspPostInit>

}
 80069d2:	bf00      	nop
 80069d4:	3770      	adds	r7, #112	@ 0x70
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	20001c3c 	.word	0x20001c3c
 80069e0:	40013400 	.word	0x40013400

080069e4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80069e8:	4b14      	ldr	r3, [pc, #80]	@ (8006a3c <MX_TIM16_Init+0x58>)
 80069ea:	4a15      	ldr	r2, [pc, #84]	@ (8006a40 <MX_TIM16_Init+0x5c>)
 80069ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80069ee:	4b13      	ldr	r3, [pc, #76]	@ (8006a3c <MX_TIM16_Init+0x58>)
 80069f0:	22a9      	movs	r2, #169	@ 0xa9
 80069f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069f4:	4b11      	ldr	r3, [pc, #68]	@ (8006a3c <MX_TIM16_Init+0x58>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80069fa:	4b10      	ldr	r3, [pc, #64]	@ (8006a3c <MX_TIM16_Init+0x58>)
 80069fc:	f240 4279 	movw	r2, #1145	@ 0x479
 8006a00:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a02:	4b0e      	ldr	r3, [pc, #56]	@ (8006a3c <MX_TIM16_Init+0x58>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006a08:	4b0c      	ldr	r3, [pc, #48]	@ (8006a3c <MX_TIM16_Init+0x58>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <MX_TIM16_Init+0x58>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006a14:	4809      	ldr	r0, [pc, #36]	@ (8006a3c <MX_TIM16_Init+0x58>)
 8006a16:	f003 fee7 	bl	800a7e8 <HAL_TIM_Base_Init>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d001      	beq.n	8006a24 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006a20:	f7fe fed4 	bl	80057cc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8006a24:	2108      	movs	r1, #8
 8006a26:	4805      	ldr	r0, [pc, #20]	@ (8006a3c <MX_TIM16_Init+0x58>)
 8006a28:	f004 f9a0 	bl	800ad6c <HAL_TIM_OnePulse_Init>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8006a32:	f7fe fecb 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20001d08 	.word	0x20001d08
 8006a40:	40014400 	.word	0x40014400

08006a44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a0d      	ldr	r2, [pc, #52]	@ (8006a88 <HAL_TIM_PWM_MspInit+0x44>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d113      	bne.n	8006a7e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <HAL_TIM_PWM_MspInit+0x48>)
 8006a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006a8c <HAL_TIM_PWM_MspInit+0x48>)
 8006a5c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006a60:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a62:	4b0a      	ldr	r3, [pc, #40]	@ (8006a8c <HAL_TIM_PWM_MspInit+0x48>)
 8006a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	2019      	movs	r0, #25
 8006a74:	f002 f957 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006a78:	2019      	movs	r0, #25
 8006a7a:	f002 f96e 	bl	8008d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40012c00 	.word	0x40012c00
 8006a8c:	40021000 	.word	0x40021000

08006a90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa0:	d114      	bne.n	8006acc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006aa2:	4b22      	ldr	r3, [pc, #136]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa6:	4a21      	ldr	r2, [pc, #132]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006aa8:	f043 0301 	orr.w	r3, r3, #1
 8006aac:	6593      	str	r3, [r2, #88]	@ 0x58
 8006aae:	4b1f      	ldr	r3, [pc, #124]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	201c      	movs	r0, #28
 8006ac0:	f002 f931 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006ac4:	201c      	movs	r0, #28
 8006ac6:	f002 f948 	bl	8008d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006aca:	e02a      	b.n	8006b22 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a17      	ldr	r2, [pc, #92]	@ (8006b30 <HAL_TIM_Base_MspInit+0xa0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d10c      	bne.n	8006af0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ad6:	4b15      	ldr	r3, [pc, #84]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006ad8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ada:	4a14      	ldr	r2, [pc, #80]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006adc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ae0:	6613      	str	r3, [r2, #96]	@ 0x60
 8006ae2:	4b12      	ldr	r3, [pc, #72]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	693b      	ldr	r3, [r7, #16]
}
 8006aee:	e018      	b.n	8006b22 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b34 <HAL_TIM_Base_MspInit+0xa4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d113      	bne.n	8006b22 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006afa:	4b0c      	ldr	r3, [pc, #48]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006afc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006afe:	4a0b      	ldr	r2, [pc, #44]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b04:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b06:	4b09      	ldr	r3, [pc, #36]	@ (8006b2c <HAL_TIM_Base_MspInit+0x9c>)
 8006b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	2019      	movs	r0, #25
 8006b18:	f002 f905 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006b1c:	2019      	movs	r0, #25
 8006b1e:	f002 f91c 	bl	8008d5a <HAL_NVIC_EnableIRQ>
}
 8006b22:	bf00      	nop
 8006b24:	3718      	adds	r7, #24
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	40021000 	.word	0x40021000
 8006b30:	40013400 	.word	0x40013400
 8006b34:	40014400 	.word	0x40014400

08006b38 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08e      	sub	sp, #56	@ 0x38
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b44:	2200      	movs	r2, #0
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
 8006b4c:	60da      	str	r2, [r3, #12]
 8006b4e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a4f      	ldr	r2, [pc, #316]	@ (8006c94 <HAL_TIM_Encoder_MspInit+0x15c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d131      	bne.n	8006bbe <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5e:	4a4e      	ldr	r2, [pc, #312]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b60:	f043 0302 	orr.w	r3, r3, #2
 8006b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b66:	4b4c      	ldr	r3, [pc, #304]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	623b      	str	r3, [r7, #32]
 8006b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b72:	4b49      	ldr	r3, [pc, #292]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b76:	4a48      	ldr	r2, [pc, #288]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b7e:	4b46      	ldr	r3, [pc, #280]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b8a:	23c0      	movs	r3, #192	@ 0xc0
 8006b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b8e:	2302      	movs	r3, #2
 8006b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b96:	2300      	movs	r3, #0
 8006b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ba8:	f002 fc24 	bl	80093f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006bac:	2200      	movs	r2, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	201d      	movs	r0, #29
 8006bb2:	f002 f8b8 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006bb6:	201d      	movs	r0, #29
 8006bb8:	f002 f8cf 	bl	8008d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8006bbc:	e065      	b.n	8006c8a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a36      	ldr	r2, [pc, #216]	@ (8006c9c <HAL_TIM_Encoder_MspInit+0x164>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d132      	bne.n	8006c2e <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006bc8:	4b33      	ldr	r3, [pc, #204]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bcc:	4a32      	ldr	r2, [pc, #200]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006bce:	f043 0304 	orr.w	r3, r3, #4
 8006bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bd4:	4b30      	ldr	r3, [pc, #192]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be4:	4a2c      	ldr	r2, [pc, #176]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006be6:	f043 0301 	orr.w	r3, r3, #1
 8006bea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bec:	4b2a      	ldr	r3, [pc, #168]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	617b      	str	r3, [r7, #20]
 8006bf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006bf8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bfe:	2302      	movs	r3, #2
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c06:	2300      	movs	r3, #0
 8006c08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8006c0a:	230a      	movs	r3, #10
 8006c0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c12:	4619      	mov	r1, r3
 8006c14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c18:	f002 fbec 	bl	80093f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2100      	movs	r1, #0
 8006c20:	201e      	movs	r0, #30
 8006c22:	f002 f880 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006c26:	201e      	movs	r0, #30
 8006c28:	f002 f897 	bl	8008d5a <HAL_NVIC_EnableIRQ>
}
 8006c2c:	e02d      	b.n	8006c8a <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca0 <HAL_TIM_Encoder_MspInit+0x168>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d128      	bne.n	8006c8a <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c38:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3c:	4a16      	ldr	r2, [pc, #88]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c3e:	f043 0308 	orr.w	r3, r3, #8
 8006c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c44:	4b14      	ldr	r3, [pc, #80]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	613b      	str	r3, [r7, #16]
 8006c4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c50:	4b11      	ldr	r3, [pc, #68]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c54:	4a10      	ldr	r2, [pc, #64]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c98 <HAL_TIM_Encoder_MspInit+0x160>)
 8006c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c74:	2300      	movs	r3, #0
 8006c76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006c78:	2302      	movs	r3, #2
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c80:	4619      	mov	r1, r3
 8006c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c86:	f002 fbb5 	bl	80093f4 <HAL_GPIO_Init>
}
 8006c8a:	bf00      	nop
 8006c8c:	3738      	adds	r7, #56	@ 0x38
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	40000400 	.word	0x40000400
 8006c98:	40021000 	.word	0x40021000
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00

08006ca4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	@ 0x28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cac:	f107 0314 	add.w	r3, r7, #20
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	605a      	str	r2, [r3, #4]
 8006cb6:	609a      	str	r2, [r3, #8]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a22      	ldr	r2, [pc, #136]	@ (8006d4c <HAL_TIM_MspPostInit+0xa8>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d11c      	bne.n	8006d00 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cc6:	4b22      	ldr	r3, [pc, #136]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	4a21      	ldr	r2, [pc, #132]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006ccc:	f043 0304 	orr.w	r3, r3, #4
 8006cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cd6:	f003 0304 	and.w	r3, r3, #4
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006cde:	2308      	movs	r3, #8
 8006ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006cee:	2302      	movs	r3, #2
 8006cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cf2:	f107 0314 	add.w	r3, r7, #20
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4816      	ldr	r0, [pc, #88]	@ (8006d54 <HAL_TIM_MspPostInit+0xb0>)
 8006cfa:	f002 fb7b 	bl	80093f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006cfe:	e020      	b.n	8006d42 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a14      	ldr	r2, [pc, #80]	@ (8006d58 <HAL_TIM_MspPostInit+0xb4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d11b      	bne.n	8006d42 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d0a:	4b11      	ldr	r3, [pc, #68]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0e:	4a10      	ldr	r2, [pc, #64]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006d10:	f043 0304 	orr.w	r3, r3, #4
 8006d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d16:	4b0e      	ldr	r3, [pc, #56]	@ (8006d50 <HAL_TIM_MspPostInit+0xac>)
 8006d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d22:	23c0      	movs	r3, #192	@ 0xc0
 8006d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d26:	2302      	movs	r3, #2
 8006d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006d32:	2304      	movs	r3, #4
 8006d34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4805      	ldr	r0, [pc, #20]	@ (8006d54 <HAL_TIM_MspPostInit+0xb0>)
 8006d3e:	f002 fb59 	bl	80093f4 <HAL_GPIO_Init>
}
 8006d42:	bf00      	nop
 8006d44:	3728      	adds	r7, #40	@ 0x28
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40012c00 	.word	0x40012c00
 8006d50:	40021000 	.word	0x40021000
 8006d54:	48000800 	.word	0x48000800
 8006d58:	40013400 	.word	0x40013400

08006d5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006d60:	4b20      	ldr	r3, [pc, #128]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d62:	4a21      	ldr	r2, [pc, #132]	@ (8006de8 <MX_LPUART1_UART_Init+0x8c>)
 8006d64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8006d66:	4b1f      	ldr	r3, [pc, #124]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d68:	4a20      	ldr	r2, [pc, #128]	@ (8006dec <MX_LPUART1_UART_Init+0x90>)
 8006d6a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d6e:	2200      	movs	r2, #0
 8006d70:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006d72:	4b1c      	ldr	r3, [pc, #112]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d74:	2200      	movs	r2, #0
 8006d76:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006d78:	4b1a      	ldr	r3, [pc, #104]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006d7e:	4b19      	ldr	r3, [pc, #100]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d80:	220c      	movs	r2, #12
 8006d82:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d84:	4b17      	ldr	r3, [pc, #92]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d86:	2200      	movs	r2, #0
 8006d88:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006d8a:	4b16      	ldr	r3, [pc, #88]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006d90:	4b14      	ldr	r3, [pc, #80]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006d96:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006d9c:	4811      	ldr	r0, [pc, #68]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006d9e:	f005 fe0b 	bl	800c9b8 <HAL_UART_Init>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d001      	beq.n	8006dac <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8006da8:	f7fe fd10 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006dac:	2100      	movs	r1, #0
 8006dae:	480d      	ldr	r0, [pc, #52]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006db0:	f007 fb5e 	bl	800e470 <HAL_UARTEx_SetTxFifoThreshold>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8006dba:	f7fe fd07 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4808      	ldr	r0, [pc, #32]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006dc2:	f007 fb93 	bl	800e4ec <HAL_UARTEx_SetRxFifoThreshold>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8006dcc:	f7fe fcfe 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006dd0:	4804      	ldr	r0, [pc, #16]	@ (8006de4 <MX_LPUART1_UART_Init+0x88>)
 8006dd2:	f007 fb14 	bl	800e3fe <HAL_UARTEx_DisableFifoMode>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8006ddc:	f7fe fcf6 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006de0:	bf00      	nop
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20001dd4 	.word	0x20001dd4
 8006de8:	40008000 	.word	0x40008000
 8006dec:	001e8480 	.word	0x001e8480

08006df0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006df4:	4b23      	ldr	r3, [pc, #140]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006df6:	4a24      	ldr	r2, [pc, #144]	@ (8006e88 <MX_USART2_UART_Init+0x98>)
 8006df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8006dfa:	4b22      	ldr	r3, [pc, #136]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006dfc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8006e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8006e02:	4b20      	ldr	r3, [pc, #128]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e08:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8006e10:	4b1c      	ldr	r3, [pc, #112]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006e18:	4b1a      	ldr	r3, [pc, #104]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e1a:	220c      	movs	r2, #12
 8006e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e1e:	4b19      	ldr	r3, [pc, #100]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e24:	4b17      	ldr	r3, [pc, #92]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e2a:	4b16      	ldr	r3, [pc, #88]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e30:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e36:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006e3c:	4811      	ldr	r0, [pc, #68]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e3e:	f005 fdbb 	bl	800c9b8 <HAL_UART_Init>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006e48:	f7fe fcc0 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	480d      	ldr	r0, [pc, #52]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e50:	f007 fb0e 	bl	800e470 <HAL_UARTEx_SetTxFifoThreshold>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006e5a:	f7fe fcb7 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006e5e:	2100      	movs	r1, #0
 8006e60:	4808      	ldr	r0, [pc, #32]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e62:	f007 fb43 	bl	800e4ec <HAL_UARTEx_SetRxFifoThreshold>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006e6c:	f7fe fcae 	bl	80057cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006e70:	4804      	ldr	r0, [pc, #16]	@ (8006e84 <MX_USART2_UART_Init+0x94>)
 8006e72:	f007 fac4 	bl	800e3fe <HAL_UARTEx_DisableFifoMode>
 8006e76:	4603      	mov	r3, r0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d001      	beq.n	8006e80 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006e7c:	f7fe fca6 	bl	80057cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006e80:	bf00      	nop
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20001ea0 	.word	0x20001ea0
 8006e88:	40004400 	.word	0x40004400

08006e8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b0a0      	sub	sp, #128	@ 0x80
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]
 8006e9c:	605a      	str	r2, [r3, #4]
 8006e9e:	609a      	str	r2, [r3, #8]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	2254      	movs	r2, #84	@ 0x54
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f007 fd63 	bl	800e978 <memset>
  if(uartHandle->Instance==LPUART1)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a99      	ldr	r2, [pc, #612]	@ (800711c <HAL_UART_MspInit+0x290>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	f040 8093 	bne.w	8006fe4 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006ebe:	2320      	movs	r3, #32
 8006ec0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ec6:	f107 0318 	add.w	r3, r7, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f003 fa3e 	bl	800a34c <HAL_RCCEx_PeriphCLKConfig>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006ed6:	f7fe fc79 	bl	80057cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006eda:	4b91      	ldr	r3, [pc, #580]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ede:	4a90      	ldr	r2, [pc, #576]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8006ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ef6:	4a8a      	ldr	r2, [pc, #552]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006ef8:	f043 0302 	orr.w	r3, r3, #2
 8006efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006efe:	4b88      	ldr	r3, [pc, #544]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f0a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f10:	2302      	movs	r3, #2
 8006f12:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006f1c:	2308      	movs	r3, #8
 8006f1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f20:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006f24:	4619      	mov	r1, r3
 8006f26:	487f      	ldr	r0, [pc, #508]	@ (8007124 <HAL_UART_MspInit+0x298>)
 8006f28:	f002 fa64 	bl	80093f4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8006f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f2e:	4a7f      	ldr	r2, [pc, #508]	@ (800712c <HAL_UART_MspInit+0x2a0>)
 8006f30:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8006f32:	4b7d      	ldr	r3, [pc, #500]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f34:	2222      	movs	r2, #34	@ 0x22
 8006f36:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f38:	4b7b      	ldr	r3, [pc, #492]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f44:	4b78      	ldr	r3, [pc, #480]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f4a:	4b77      	ldr	r3, [pc, #476]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f50:	4b75      	ldr	r3, [pc, #468]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8006f56:	4b74      	ldr	r3, [pc, #464]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006f5c:	4b72      	ldr	r3, [pc, #456]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006f62:	4871      	ldr	r0, [pc, #452]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f64:	f001 ff14 	bl	8008d90 <HAL_DMA_Init>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8006f6e:	f7fe fc2d 	bl	80057cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a6c      	ldr	r2, [pc, #432]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8007128 <HAL_UART_MspInit+0x29c>)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8006f80:	4b6b      	ldr	r3, [pc, #428]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006f82:	4a6c      	ldr	r2, [pc, #432]	@ (8007134 <HAL_UART_MspInit+0x2a8>)
 8006f84:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8006f86:	4b6a      	ldr	r3, [pc, #424]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006f88:	2223      	movs	r2, #35	@ 0x23
 8006f8a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f8c:	4b68      	ldr	r3, [pc, #416]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006f8e:	2210      	movs	r2, #16
 8006f90:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f92:	4b67      	ldr	r3, [pc, #412]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006f98:	4b65      	ldr	r3, [pc, #404]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006f9a:	2280      	movs	r2, #128	@ 0x80
 8006f9c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f9e:	4b64      	ldr	r3, [pc, #400]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fa4:	4b62      	ldr	r3, [pc, #392]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8006faa:	4b61      	ldr	r3, [pc, #388]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fb0:	4b5f      	ldr	r3, [pc, #380]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8006fb6:	485e      	ldr	r0, [pc, #376]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fb8:	f001 feea 	bl	8008d90 <HAL_DMA_Init>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d001      	beq.n	8006fc6 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006fc2:	f7fe fc03 	bl	80057cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a59      	ldr	r2, [pc, #356]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fca:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006fcc:	4a58      	ldr	r2, [pc, #352]	@ (8007130 <HAL_UART_MspInit+0x2a4>)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2100      	movs	r1, #0
 8006fd6:	205b      	movs	r0, #91	@ 0x5b
 8006fd8:	f001 fea5 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006fdc:	205b      	movs	r0, #91	@ 0x5b
 8006fde:	f001 febc 	bl	8008d5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006fe2:	e097      	b.n	8007114 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a53      	ldr	r2, [pc, #332]	@ (8007138 <HAL_UART_MspInit+0x2ac>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	f040 8092 	bne.w	8007114 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ff8:	f107 0318 	add.w	r3, r7, #24
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f003 f9a5 	bl	800a34c <HAL_RCCEx_PeriphCLKConfig>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007008:	f7fe fbe0 	bl	80057cc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800700c:	4b44      	ldr	r3, [pc, #272]	@ (8007120 <HAL_UART_MspInit+0x294>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007010:	4a43      	ldr	r2, [pc, #268]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007016:	6593      	str	r3, [r2, #88]	@ 0x58
 8007018:	4b41      	ldr	r3, [pc, #260]	@ (8007120 <HAL_UART_MspInit+0x294>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007024:	4b3e      	ldr	r3, [pc, #248]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8007026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007028:	4a3d      	ldr	r2, [pc, #244]	@ (8007120 <HAL_UART_MspInit+0x294>)
 800702a:	f043 0301 	orr.w	r3, r3, #1
 800702e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007030:	4b3b      	ldr	r3, [pc, #236]	@ (8007120 <HAL_UART_MspInit+0x294>)
 8007032:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007034:	f003 0301 	and.w	r3, r3, #1
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800703c:	230c      	movs	r3, #12
 800703e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007040:	2302      	movs	r3, #2
 8007042:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007044:	2300      	movs	r3, #0
 8007046:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007048:	2300      	movs	r3, #0
 800704a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800704c:	2307      	movs	r3, #7
 800704e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007050:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007054:	4619      	mov	r1, r3
 8007056:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800705a:	f002 f9cb 	bl	80093f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800705e:	4b37      	ldr	r3, [pc, #220]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007060:	4a37      	ldr	r2, [pc, #220]	@ (8007140 <HAL_UART_MspInit+0x2b4>)
 8007062:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8007064:	4b35      	ldr	r3, [pc, #212]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007066:	221a      	movs	r2, #26
 8007068:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800706a:	4b34      	ldr	r3, [pc, #208]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 800706c:	2200      	movs	r2, #0
 800706e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007070:	4b32      	ldr	r3, [pc, #200]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007072:	2200      	movs	r2, #0
 8007074:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007076:	4b31      	ldr	r3, [pc, #196]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007078:	2280      	movs	r2, #128	@ 0x80
 800707a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800707c:	4b2f      	ldr	r3, [pc, #188]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 800707e:	2200      	movs	r2, #0
 8007080:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007082:	4b2e      	ldr	r3, [pc, #184]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007084:	2200      	movs	r2, #0
 8007086:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8007088:	4b2c      	ldr	r3, [pc, #176]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 800708a:	2200      	movs	r2, #0
 800708c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800708e:	4b2b      	ldr	r3, [pc, #172]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007090:	2200      	movs	r2, #0
 8007092:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007094:	4829      	ldr	r0, [pc, #164]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 8007096:	f001 fe7b 	bl	8008d90 <HAL_DMA_Init>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80070a0:	f7fe fb94 	bl	80057cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a25      	ldr	r2, [pc, #148]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 80070a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80070ac:	4a23      	ldr	r2, [pc, #140]	@ (800713c <HAL_UART_MspInit+0x2b0>)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80070b2:	4b24      	ldr	r3, [pc, #144]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070b4:	4a24      	ldr	r2, [pc, #144]	@ (8007148 <HAL_UART_MspInit+0x2bc>)
 80070b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80070b8:	4b22      	ldr	r3, [pc, #136]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070ba:	221b      	movs	r2, #27
 80070bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070be:	4b21      	ldr	r3, [pc, #132]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070c0:	2210      	movs	r2, #16
 80070c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070c4:	4b1f      	ldr	r3, [pc, #124]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070cc:	2280      	movs	r2, #128	@ 0x80
 80070ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070d6:	4b1b      	ldr	r3, [pc, #108]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070d8:	2200      	movs	r2, #0
 80070da:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80070dc:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070de:	2200      	movs	r2, #0
 80070e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80070e2:	4b18      	ldr	r3, [pc, #96]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80070e8:	4816      	ldr	r0, [pc, #88]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070ea:	f001 fe51 	bl	8008d90 <HAL_DMA_Init>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80070f4:	f7fe fb6a 	bl	80057cc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a12      	ldr	r2, [pc, #72]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 80070fc:	67da      	str	r2, [r3, #124]	@ 0x7c
 80070fe:	4a11      	ldr	r2, [pc, #68]	@ (8007144 <HAL_UART_MspInit+0x2b8>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	2026      	movs	r0, #38	@ 0x26
 800710a:	f001 fe0c 	bl	8008d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800710e:	2026      	movs	r0, #38	@ 0x26
 8007110:	f001 fe23 	bl	8008d5a <HAL_NVIC_EnableIRQ>
}
 8007114:	bf00      	nop
 8007116:	3780      	adds	r7, #128	@ 0x80
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}
 800711c:	40008000 	.word	0x40008000
 8007120:	40021000 	.word	0x40021000
 8007124:	48000400 	.word	0x48000400
 8007128:	20001f6c 	.word	0x20001f6c
 800712c:	40020044 	.word	0x40020044
 8007130:	20001fcc 	.word	0x20001fcc
 8007134:	40020058 	.word	0x40020058
 8007138:	40004400 	.word	0x40004400
 800713c:	2000202c 	.word	0x2000202c
 8007140:	4002001c 	.word	0x4002001c
 8007144:	2000208c 	.word	0x2000208c
 8007148:	40020030 	.word	0x40020030

0800714c <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800714c:	480d      	ldr	r0, [pc, #52]	@ (8007184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800714e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007150:	f7ff f994 	bl	800647c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007154:	480c      	ldr	r0, [pc, #48]	@ (8007188 <LoopForever+0x6>)
  ldr r1, =_edata
 8007156:	490d      	ldr	r1, [pc, #52]	@ (800718c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007158:	4a0d      	ldr	r2, [pc, #52]	@ (8007190 <LoopForever+0xe>)
  movs r3, #0
 800715a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800715c:	e002      	b.n	8007164 <LoopCopyDataInit>

0800715e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800715e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007162:	3304      	adds	r3, #4

08007164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007168:	d3f9      	bcc.n	800715e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800716a:	4a0a      	ldr	r2, [pc, #40]	@ (8007194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800716c:	4c0a      	ldr	r4, [pc, #40]	@ (8007198 <LoopForever+0x16>)
  movs r3, #0
 800716e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007170:	e001      	b.n	8007176 <LoopFillZerobss>

08007172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007174:	3204      	adds	r2, #4

08007176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007178:	d3fb      	bcc.n	8007172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800717a:	f007 fc1b 	bl	800e9b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800717e:	f7fd fbc9 	bl	8004914 <main>

08007182 <LoopForever>:

LoopForever:
    b LoopForever
 8007182:	e7fe      	b.n	8007182 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8007184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800718c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8007190:	08010d10 	.word	0x08010d10
  ldr r2, =_sbss
 8007194:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8007198:	20002238 	.word	0x20002238

0800719c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800719c:	e7fe      	b.n	800719c <ADC1_2_IRQHandler>

0800719e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071a8:	2003      	movs	r0, #3
 80071aa:	f001 fdb1 	bl	8008d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80071ae:	2000      	movs	r0, #0
 80071b0:	f000 f80e 	bl	80071d0 <HAL_InitTick>
 80071b4:	4603      	mov	r3, r0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	71fb      	strb	r3, [r7, #7]
 80071be:	e001      	b.n	80071c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80071c0:	f7ff f858 	bl	8006274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80071c4:	79fb      	ldrb	r3, [r7, #7]

}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
	...

080071d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80071dc:	4b16      	ldr	r3, [pc, #88]	@ (8007238 <HAL_InitTick+0x68>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d022      	beq.n	800722a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80071e4:	4b15      	ldr	r3, [pc, #84]	@ (800723c <HAL_InitTick+0x6c>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b13      	ldr	r3, [pc, #76]	@ (8007238 <HAL_InitTick+0x68>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80071f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80071f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fdbc 	bl	8008d76 <HAL_SYSTICK_Config>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10f      	bne.n	8007224 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d809      	bhi.n	800721e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800720a:	2200      	movs	r2, #0
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295
 8007212:	f001 fd88 	bl	8008d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007216:	4a0a      	ldr	r2, [pc, #40]	@ (8007240 <HAL_InitTick+0x70>)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6013      	str	r3, [r2, #0]
 800721c:	e007      	b.n	800722e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	73fb      	strb	r3, [r7, #15]
 8007222:	e004      	b.n	800722e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
 8007228:	e001      	b.n	800722e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800722e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3710      	adds	r7, #16
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200000fc 	.word	0x200000fc
 800723c:	200000f4 	.word	0x200000f4
 8007240:	200000f8 	.word	0x200000f8

08007244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007248:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <HAL_IncTick+0x1c>)
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	4b05      	ldr	r3, [pc, #20]	@ (8007264 <HAL_IncTick+0x20>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4413      	add	r3, r2
 8007252:	4a03      	ldr	r2, [pc, #12]	@ (8007260 <HAL_IncTick+0x1c>)
 8007254:	6013      	str	r3, [r2, #0]
}
 8007256:	bf00      	nop
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr
 8007260:	200020ec 	.word	0x200020ec
 8007264:	200000fc 	.word	0x200000fc

08007268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  return uwTick;
 800726c:	4b03      	ldr	r3, [pc, #12]	@ (800727c <HAL_GetTick+0x14>)
 800726e:	681b      	ldr	r3, [r3, #0]
}
 8007270:	4618      	mov	r0, r3
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	200020ec 	.word	0x200020ec

08007280 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	431a      	orrs	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	609a      	str	r2, [r3, #8]
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	609a      	str	r2, [r3, #8]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80072dc:	4618      	mov	r0, r3
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3360      	adds	r3, #96	@ 0x60
 80072fa:	461a      	mov	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	4b08      	ldr	r3, [pc, #32]	@ (800732c <LL_ADC_SetOffset+0x44>)
 800730a:	4013      	ands	r3, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	4313      	orrs	r3, r2
 8007318:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	03fff000 	.word	0x03fff000

08007330 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3360      	adds	r3, #96	@ 0x60
 800733e:	461a      	mov	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3360      	adds	r3, #96	@ 0x60
 800736c:	461a      	mov	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	431a      	orrs	r2, r3
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007392:	b480      	push	{r7}
 8007394:	b087      	sub	sp, #28
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	60b9      	str	r1, [r7, #8]
 800739c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3360      	adds	r3, #96	@ 0x60
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80073bc:	bf00      	nop
 80073be:	371c      	adds	r7, #28
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b087      	sub	sp, #28
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	3360      	adds	r3, #96	@ 0x60
 80073d8:	461a      	mov	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	431a      	orrs	r2, r3
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	695b      	ldr	r3, [r3, #20]
 800740c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	615a      	str	r2, [r3, #20]
}
 8007418:	bf00      	nop
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007438:	2301      	movs	r3, #1
 800743a:	e000      	b.n	800743e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800744a:	b480      	push	{r7}
 800744c:	b087      	sub	sp, #28
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3330      	adds	r3, #48	@ 0x30
 800745a:	461a      	mov	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	f003 030c 	and.w	r3, r3, #12
 8007466:	4413      	add	r3, r2
 8007468:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	211f      	movs	r1, #31
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	43db      	mvns	r3, r3
 800747c:	401a      	ands	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	0e9b      	lsrs	r3, r3, #26
 8007482:	f003 011f 	and.w	r1, r3, #31
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa01 f303 	lsl.w	r3, r1, r3
 8007490:	431a      	orrs	r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b087      	sub	sp, #28
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3314      	adds	r3, #20
 80074b2:	461a      	mov	r2, r3
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	0e5b      	lsrs	r3, r3, #25
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	f003 0304 	and.w	r3, r3, #4
 80074be:	4413      	add	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	0d1b      	lsrs	r3, r3, #20
 80074ca:	f003 031f 	and.w	r3, r3, #31
 80074ce:	2107      	movs	r1, #7
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	43db      	mvns	r3, r3
 80074d6:	401a      	ands	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	0d1b      	lsrs	r3, r3, #20
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	fa01 f303 	lsl.w	r3, r1, r3
 80074e6:	431a      	orrs	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80074ec:	bf00      	nop
 80074ee:	371c      	adds	r7, #28
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007510:	43db      	mvns	r3, r3
 8007512:	401a      	ands	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0318 	and.w	r3, r3, #24
 800751a:	4908      	ldr	r1, [pc, #32]	@ (800753c <LL_ADC_SetChannelSingleDiff+0x44>)
 800751c:	40d9      	lsrs	r1, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	400b      	ands	r3, r1
 8007522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007526:	431a      	orrs	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	0007ffff 	.word	0x0007ffff

08007540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f003 031f 	and.w	r3, r3, #31
}
 8007550:	4618      	mov	r0, r3
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800756c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6093      	str	r3, [r2, #8]
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007594:	d101      	bne.n	800759a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80075b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80075bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075e4:	d101      	bne.n	80075ea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800760c:	f043 0201 	orr.w	r2, r3, #1
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007630:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007634:	f043 0202 	orr.w	r2, r3, #2
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <LL_ADC_IsEnabled+0x18>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <LL_ADC_IsEnabled+0x1a>
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b02      	cmp	r3, #2
 8007680:	d101      	bne.n	8007686 <LL_ADC_IsDisableOngoing+0x18>
 8007682:	2301      	movs	r3, #1
 8007684:	e000      	b.n	8007688 <LL_ADC_IsDisableOngoing+0x1a>
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076a8:	f043 0204 	orr.w	r2, r3, #4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d101      	bne.n	80076d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80076d0:	2301      	movs	r3, #1
 80076d2:	e000      	b.n	80076d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	370c      	adds	r7, #12
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b083      	sub	sp, #12
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d101      	bne.n	80076fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007708:	b590      	push	{r4, r7, lr}
 800770a:	b089      	sub	sp, #36	@ 0x24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007710:	2300      	movs	r3, #0
 8007712:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007714:	2300      	movs	r3, #0
 8007716:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e1a9      	b.n	8007a76 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7fc ff4f 	bl	80045d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff ff19 	bl	8007580 <LL_ADC_IsDeepPowerDownEnabled>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f7ff feff 	bl	800755c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff ff34 	bl	80075d0 <LL_ADC_IsInternalRegulatorEnabled>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d115      	bne.n	800779a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ff18 	bl	80075a8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007778:	4b9c      	ldr	r3, [pc, #624]	@ (80079ec <HAL_ADC_Init+0x2e4>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	099b      	lsrs	r3, r3, #6
 800777e:	4a9c      	ldr	r2, [pc, #624]	@ (80079f0 <HAL_ADC_Init+0x2e8>)
 8007780:	fba2 2303 	umull	r2, r3, r2, r3
 8007784:	099b      	lsrs	r3, r3, #6
 8007786:	3301      	adds	r3, #1
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800778c:	e002      	b.n	8007794 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	3b01      	subs	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f9      	bne.n	800778e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f7ff ff16 	bl	80075d0 <LL_ADC_IsInternalRegulatorEnabled>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10d      	bne.n	80077c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ae:	f043 0210 	orr.w	r2, r3, #16
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ba:	f043 0201 	orr.w	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7ff ff76 	bl	80076bc <LL_ADC_REG_IsConversionOngoing>
 80077d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d6:	f003 0310 	and.w	r3, r3, #16
 80077da:	2b00      	cmp	r3, #0
 80077dc:	f040 8142 	bne.w	8007a64 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 813e 	bne.w	8007a64 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077ec:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80077f0:	f043 0202 	orr.w	r2, r3, #2
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff ff23 	bl	8007648 <LL_ADC_IsEnabled>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d141      	bne.n	800788c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007810:	d004      	beq.n	800781c <HAL_ADC_Init+0x114>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a77      	ldr	r2, [pc, #476]	@ (80079f4 <HAL_ADC_Init+0x2ec>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d10f      	bne.n	800783c <HAL_ADC_Init+0x134>
 800781c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007820:	f7ff ff12 	bl	8007648 <LL_ADC_IsEnabled>
 8007824:	4604      	mov	r4, r0
 8007826:	4873      	ldr	r0, [pc, #460]	@ (80079f4 <HAL_ADC_Init+0x2ec>)
 8007828:	f7ff ff0e 	bl	8007648 <LL_ADC_IsEnabled>
 800782c:	4603      	mov	r3, r0
 800782e:	4323      	orrs	r3, r4
 8007830:	2b00      	cmp	r3, #0
 8007832:	bf0c      	ite	eq
 8007834:	2301      	moveq	r3, #1
 8007836:	2300      	movne	r3, #0
 8007838:	b2db      	uxtb	r3, r3
 800783a:	e012      	b.n	8007862 <HAL_ADC_Init+0x15a>
 800783c:	486e      	ldr	r0, [pc, #440]	@ (80079f8 <HAL_ADC_Init+0x2f0>)
 800783e:	f7ff ff03 	bl	8007648 <LL_ADC_IsEnabled>
 8007842:	4604      	mov	r4, r0
 8007844:	486d      	ldr	r0, [pc, #436]	@ (80079fc <HAL_ADC_Init+0x2f4>)
 8007846:	f7ff feff 	bl	8007648 <LL_ADC_IsEnabled>
 800784a:	4603      	mov	r3, r0
 800784c:	431c      	orrs	r4, r3
 800784e:	486c      	ldr	r0, [pc, #432]	@ (8007a00 <HAL_ADC_Init+0x2f8>)
 8007850:	f7ff fefa 	bl	8007648 <LL_ADC_IsEnabled>
 8007854:	4603      	mov	r3, r0
 8007856:	4323      	orrs	r3, r4
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d012      	beq.n	800788c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800786e:	d004      	beq.n	800787a <HAL_ADC_Init+0x172>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a5f      	ldr	r2, [pc, #380]	@ (80079f4 <HAL_ADC_Init+0x2ec>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d101      	bne.n	800787e <HAL_ADC_Init+0x176>
 800787a:	4a62      	ldr	r2, [pc, #392]	@ (8007a04 <HAL_ADC_Init+0x2fc>)
 800787c:	e000      	b.n	8007880 <HAL_ADC_Init+0x178>
 800787e:	4a62      	ldr	r2, [pc, #392]	@ (8007a08 <HAL_ADC_Init+0x300>)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4619      	mov	r1, r3
 8007886:	4610      	mov	r0, r2
 8007888:	f7ff fcfa 	bl	8007280 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7f5b      	ldrb	r3, [r3, #29]
 8007890:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007896:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800789c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80078a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80078ac:	4313      	orrs	r3, r2
 80078ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d106      	bne.n	80078c8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078be:	3b01      	subs	r3, #1
 80078c0:	045b      	lsls	r3, r3, #17
 80078c2:	69ba      	ldr	r2, [r7, #24]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d009      	beq.n	80078e4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	4b48      	ldr	r3, [pc, #288]	@ (8007a0c <HAL_ADC_Init+0x304>)
 80078ec:	4013      	ands	r3, r2
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	430b      	orrs	r3, r1
 80078f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	430a      	orrs	r2, r1
 800790c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff fee5 	bl	80076e2 <LL_ADC_INJ_IsConversionOngoing>
 8007918:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d17f      	bne.n	8007a20 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d17c      	bne.n	8007a20 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800792a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007932:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007934:	4313      	orrs	r3, r2
 8007936:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007942:	f023 0302 	bic.w	r3, r3, #2
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	69b9      	ldr	r1, [r7, #24]
 800794c:	430b      	orrs	r3, r1
 800794e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d017      	beq.n	8007988 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007966:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007970:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6911      	ldr	r1, [r2, #16]
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	6812      	ldr	r2, [r2, #0]
 8007980:	430b      	orrs	r3, r1
 8007982:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8007986:	e013      	b.n	80079b0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	691a      	ldr	r2, [r3, #16]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007996:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80079a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80079ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d12a      	bne.n	8007a10 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80079c4:	f023 0304 	bic.w	r3, r3, #4
 80079c8:	687a      	ldr	r2, [r7, #4]
 80079ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80079d0:	4311      	orrs	r1, r2
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80079d6:	4311      	orrs	r1, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80079dc:	430a      	orrs	r2, r1
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f042 0201 	orr.w	r2, r2, #1
 80079e8:	611a      	str	r2, [r3, #16]
 80079ea:	e019      	b.n	8007a20 <HAL_ADC_Init+0x318>
 80079ec:	200000f4 	.word	0x200000f4
 80079f0:	053e2d63 	.word	0x053e2d63
 80079f4:	50000100 	.word	0x50000100
 80079f8:	50000400 	.word	0x50000400
 80079fc:	50000500 	.word	0x50000500
 8007a00:	50000600 	.word	0x50000600
 8007a04:	50000300 	.word	0x50000300
 8007a08:	50000700 	.word	0x50000700
 8007a0c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0201 	bic.w	r2, r2, #1
 8007a1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d10c      	bne.n	8007a42 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a2e:	f023 010f 	bic.w	r1, r3, #15
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	1e5a      	subs	r2, r3, #1
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a40:	e007      	b.n	8007a52 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 020f 	bic.w	r2, r2, #15
 8007a50:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a56:	f023 0303 	bic.w	r3, r3, #3
 8007a5a:	f043 0201 	orr.w	r2, r3, #1
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a62:	e007      	b.n	8007a74 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a68:	f043 0210 	orr.w	r2, r3, #16
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007a74:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3724      	adds	r7, #36	@ 0x24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd90      	pop	{r4, r7, pc}
 8007a7e:	bf00      	nop

08007a80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a94:	d004      	beq.n	8007aa0 <HAL_ADC_Start_DMA+0x20>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a5a      	ldr	r2, [pc, #360]	@ (8007c04 <HAL_ADC_Start_DMA+0x184>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d101      	bne.n	8007aa4 <HAL_ADC_Start_DMA+0x24>
 8007aa0:	4b59      	ldr	r3, [pc, #356]	@ (8007c08 <HAL_ADC_Start_DMA+0x188>)
 8007aa2:	e000      	b.n	8007aa6 <HAL_ADC_Start_DMA+0x26>
 8007aa4:	4b59      	ldr	r3, [pc, #356]	@ (8007c0c <HAL_ADC_Start_DMA+0x18c>)
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff fd4a 	bl	8007540 <LL_ADC_GetMultimode>
 8007aac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f7ff fe02 	bl	80076bc <LL_ADC_REG_IsConversionOngoing>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f040 809b 	bne.w	8007bf6 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_ADC_Start_DMA+0x4e>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e096      	b.n	8007bfc <HAL_ADC_Start_DMA+0x17c>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a4d      	ldr	r2, [pc, #308]	@ (8007c10 <HAL_ADC_Start_DMA+0x190>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d008      	beq.n	8007af2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	d002      	beq.n	8007af2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d17a      	bne.n	8007be8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 fcf6 	bl	80084e4 <ADC_Enable>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d16d      	bne.n	8007bde <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b0a:	f023 0301 	bic.w	r3, r3, #1
 8007b0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3a      	ldr	r2, [pc, #232]	@ (8007c04 <HAL_ADC_Start_DMA+0x184>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d009      	beq.n	8007b34 <HAL_ADC_Start_DMA+0xb4>
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <HAL_ADC_Start_DMA+0x194>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d002      	beq.n	8007b30 <HAL_ADC_Start_DMA+0xb0>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	e003      	b.n	8007b38 <HAL_ADC_Start_DMA+0xb8>
 8007b30:	4b39      	ldr	r3, [pc, #228]	@ (8007c18 <HAL_ADC_Start_DMA+0x198>)
 8007b32:	e001      	b.n	8007b38 <HAL_ADC_Start_DMA+0xb8>
 8007b34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	6812      	ldr	r2, [r2, #0]
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d002      	beq.n	8007b46 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b4a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d006      	beq.n	8007b6c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b62:	f023 0206 	bic.w	r2, r3, #6
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	661a      	str	r2, [r3, #96]	@ 0x60
 8007b6a:	e002      	b.n	8007b72 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b76:	4a29      	ldr	r2, [pc, #164]	@ (8007c1c <HAL_ADC_Start_DMA+0x19c>)
 8007b78:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b7e:	4a28      	ldr	r2, [pc, #160]	@ (8007c20 <HAL_ADC_Start_DMA+0x1a0>)
 8007b80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b86:	4a27      	ldr	r2, [pc, #156]	@ (8007c24 <HAL_ADC_Start_DMA+0x1a4>)
 8007b88:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	221c      	movs	r2, #28
 8007b90:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685a      	ldr	r2, [r3, #4]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f042 0210 	orr.w	r2, r2, #16
 8007ba8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68da      	ldr	r2, [r3, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f042 0201 	orr.w	r2, r2, #1
 8007bb8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	3340      	adds	r3, #64	@ 0x40
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f001 f989 	bl	8008ee0 <HAL_DMA_Start_IT>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fd5c 	bl	8007694 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007bdc:	e00d      	b.n	8007bfa <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007be6:	e008      	b.n	8007bfa <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007bf4:	e001      	b.n	8007bfa <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007bf6:	2302      	movs	r3, #2
 8007bf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3718      	adds	r7, #24
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	50000100 	.word	0x50000100
 8007c08:	50000300 	.word	0x50000300
 8007c0c:	50000700 	.word	0x50000700
 8007c10:	50000600 	.word	0x50000600
 8007c14:	50000500 	.word	0x50000500
 8007c18:	50000400 	.word	0x50000400
 8007c1c:	080086cf 	.word	0x080086cf
 8007c20:	080087a7 	.word	0x080087a7
 8007c24:	080087c3 	.word	0x080087c3

08007c28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007c30:	bf00      	nop
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b0b6      	sub	sp, #216	@ 0xd8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d102      	bne.n	8007c88 <HAL_ADC_ConfigChannel+0x24>
 8007c82:	2302      	movs	r3, #2
 8007c84:	f000 bc13 	b.w	80084ae <HAL_ADC_ConfigChannel+0x84a>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fd11 	bl	80076bc <LL_ADC_REG_IsConversionOngoing>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 83f3 	bne.w	8008488 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	6859      	ldr	r1, [r3, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f7ff fbcb 	bl	800744a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff fcff 	bl	80076bc <LL_ADC_REG_IsConversionOngoing>
 8007cbe:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fd0b 	bl	80076e2 <LL_ADC_INJ_IsConversionOngoing>
 8007ccc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cd0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f040 81d9 	bne.w	800808c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 81d4 	bne.w	800808c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cec:	d10f      	bne.n	8007d0e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	f7ff fbd2 	bl	80074a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7ff fb79 	bl	80073fe <LL_ADC_SetSamplingTimeCommonConfig>
 8007d0c:	e00e      	b.n	8007d2c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6819      	ldr	r1, [r3, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	f7ff fbc1 	bl	80074a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff fb69 	bl	80073fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	695a      	ldr	r2, [r3, #20]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	08db      	lsrs	r3, r3, #3
 8007d38:	f003 0303 	and.w	r3, r3, #3
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	d022      	beq.n	8007d94 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6818      	ldr	r0, [r3, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6919      	ldr	r1, [r3, #16]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007d5e:	f7ff fac3 	bl	80072e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6818      	ldr	r0, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	6919      	ldr	r1, [r3, #16]
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	461a      	mov	r2, r3
 8007d70:	f7ff fb0f 	bl	8007392 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6818      	ldr	r0, [r3, #0]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d102      	bne.n	8007d8a <HAL_ADC_ConfigChannel+0x126>
 8007d84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d88:	e000      	b.n	8007d8c <HAL_ADC_ConfigChannel+0x128>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	f7ff fb1b 	bl	80073c8 <LL_ADC_SetOffsetSaturation>
 8007d92:	e17b      	b.n	800808c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff fac8 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d10a      	bne.n	8007dc0 <HAL_ADC_ConfigChannel+0x15c>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	2100      	movs	r1, #0
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fabd 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007db6:	4603      	mov	r3, r0
 8007db8:	0e9b      	lsrs	r3, r3, #26
 8007dba:	f003 021f 	and.w	r2, r3, #31
 8007dbe:	e01e      	b.n	8007dfe <HAL_ADC_ConfigChannel+0x19a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff fab2 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007dd6:	fa93 f3a3 	rbit	r3, r3
 8007dda:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007dde:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007de2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007dee:	2320      	movs	r3, #32
 8007df0:	e004      	b.n	8007dfc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007df2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007df6:	fab3 f383 	clz	r3, r3
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d105      	bne.n	8007e16 <HAL_ADC_ConfigChannel+0x1b2>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	0e9b      	lsrs	r3, r3, #26
 8007e10:	f003 031f 	and.w	r3, r3, #31
 8007e14:	e018      	b.n	8007e48 <HAL_ADC_ConfigChannel+0x1e4>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007e22:	fa93 f3a3 	rbit	r3, r3
 8007e26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007e2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007e32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007e3a:	2320      	movs	r3, #32
 8007e3c:	e004      	b.n	8007e48 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007e3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007e42:	fab3 f383 	clz	r3, r3
 8007e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d106      	bne.n	8007e5a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2200      	movs	r2, #0
 8007e52:	2100      	movs	r1, #0
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fa81 	bl	800735c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2101      	movs	r1, #1
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7ff fa65 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007e66:	4603      	mov	r3, r0
 8007e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <HAL_ADC_ConfigChannel+0x222>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2101      	movs	r1, #1
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff fa5a 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	0e9b      	lsrs	r3, r3, #26
 8007e80:	f003 021f 	and.w	r2, r3, #31
 8007e84:	e01e      	b.n	8007ec4 <HAL_ADC_ConfigChannel+0x260>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7ff fa4f 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e9c:	fa93 f3a3 	rbit	r3, r3
 8007ea0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007ea4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ea8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007eac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007eb4:	2320      	movs	r3, #32
 8007eb6:	e004      	b.n	8007ec2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007ebc:	fab3 f383 	clz	r3, r3
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <HAL_ADC_ConfigChannel+0x278>
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	0e9b      	lsrs	r3, r3, #26
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	e018      	b.n	8007f0e <HAL_ADC_ConfigChannel+0x2aa>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007ee8:	fa93 f3a3 	rbit	r3, r3
 8007eec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007ef0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007ef4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8007f00:	2320      	movs	r3, #32
 8007f02:	e004      	b.n	8007f0e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8007f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f08:	fab3 f383 	clz	r3, r3
 8007f0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d106      	bne.n	8007f20 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff fa1e 	bl	800735c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2102      	movs	r1, #2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fa02 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d10a      	bne.n	8007f4c <HAL_ADC_ConfigChannel+0x2e8>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff f9f7 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007f42:	4603      	mov	r3, r0
 8007f44:	0e9b      	lsrs	r3, r3, #26
 8007f46:	f003 021f 	and.w	r2, r3, #31
 8007f4a:	e01e      	b.n	8007f8a <HAL_ADC_ConfigChannel+0x326>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2102      	movs	r1, #2
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7ff f9ec 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f62:	fa93 f3a3 	rbit	r3, r3
 8007f66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007f6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d101      	bne.n	8007f7e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007f7a:	2320      	movs	r3, #32
 8007f7c:	e004      	b.n	8007f88 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007f7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f82:	fab3 f383 	clz	r3, r3
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d105      	bne.n	8007fa2 <HAL_ADC_ConfigChannel+0x33e>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	0e9b      	lsrs	r3, r3, #26
 8007f9c:	f003 031f 	and.w	r3, r3, #31
 8007fa0:	e016      	b.n	8007fd0 <HAL_ADC_ConfigChannel+0x36c>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007faa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007fae:	fa93 f3a3 	rbit	r3, r3
 8007fb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007fb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007fb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007fba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007fc2:	2320      	movs	r3, #32
 8007fc4:	e004      	b.n	8007fd0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007fc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007fca:	fab3 f383 	clz	r3, r3
 8007fce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d106      	bne.n	8007fe2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff f9bd 	bl	800735c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2103      	movs	r1, #3
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f7ff f9a1 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <HAL_ADC_ConfigChannel+0x3aa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2103      	movs	r1, #3
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7ff f996 	bl	8007330 <LL_ADC_GetOffsetChannel>
 8008004:	4603      	mov	r3, r0
 8008006:	0e9b      	lsrs	r3, r3, #26
 8008008:	f003 021f 	and.w	r2, r3, #31
 800800c:	e017      	b.n	800803e <HAL_ADC_ConfigChannel+0x3da>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2103      	movs	r1, #3
 8008014:	4618      	mov	r0, r3
 8008016:	f7ff f98b 	bl	8007330 <LL_ADC_GetOffsetChannel>
 800801a:	4603      	mov	r3, r0
 800801c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800801e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008020:	fa93 f3a3 	rbit	r3, r3
 8008024:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008026:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008028:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800802a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008030:	2320      	movs	r3, #32
 8008032:	e003      	b.n	800803c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008036:	fab3 f383 	clz	r3, r3
 800803a:	b2db      	uxtb	r3, r3
 800803c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <HAL_ADC_ConfigChannel+0x3f2>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	0e9b      	lsrs	r3, r3, #26
 8008050:	f003 031f 	and.w	r3, r3, #31
 8008054:	e011      	b.n	800807a <HAL_ADC_ConfigChannel+0x416>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800805c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800805e:	fa93 f3a3 	rbit	r3, r3
 8008062:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800806e:	2320      	movs	r3, #32
 8008070:	e003      	b.n	800807a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8008072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008074:	fab3 f383 	clz	r3, r3
 8008078:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800807a:	429a      	cmp	r2, r3
 800807c:	d106      	bne.n	800808c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2200      	movs	r2, #0
 8008084:	2103      	movs	r1, #3
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff f968 	bl	800735c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fad9 	bl	8007648 <LL_ADC_IsEnabled>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f040 813d 	bne.w	8008318 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6819      	ldr	r1, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f7ff fa24 	bl	80074f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	4aa2      	ldr	r2, [pc, #648]	@ (8008340 <HAL_ADC_ConfigChannel+0x6dc>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	f040 812e 	bne.w	8008318 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d10b      	bne.n	80080e4 <HAL_ADC_ConfigChannel+0x480>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	0e9b      	lsrs	r3, r3, #26
 80080d2:	3301      	adds	r3, #1
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b09      	cmp	r3, #9
 80080da:	bf94      	ite	ls
 80080dc:	2301      	movls	r3, #1
 80080de:	2300      	movhi	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	e019      	b.n	8008118 <HAL_ADC_ConfigChannel+0x4b4>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080ec:	fa93 f3a3 	rbit	r3, r3
 80080f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80080f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080f4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80080f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80080fc:	2320      	movs	r3, #32
 80080fe:	e003      	b.n	8008108 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008100:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008102:	fab3 f383 	clz	r3, r3
 8008106:	b2db      	uxtb	r3, r3
 8008108:	3301      	adds	r3, #1
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2b09      	cmp	r3, #9
 8008110:	bf94      	ite	ls
 8008112:	2301      	movls	r3, #1
 8008114:	2300      	movhi	r3, #0
 8008116:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008118:	2b00      	cmp	r3, #0
 800811a:	d079      	beq.n	8008210 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008124:	2b00      	cmp	r3, #0
 8008126:	d107      	bne.n	8008138 <HAL_ADC_ConfigChannel+0x4d4>
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	0e9b      	lsrs	r3, r3, #26
 800812e:	3301      	adds	r3, #1
 8008130:	069b      	lsls	r3, r3, #26
 8008132:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008136:	e015      	b.n	8008164 <HAL_ADC_ConfigChannel+0x500>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800813e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008140:	fa93 f3a3 	rbit	r3, r3
 8008144:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008148:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800814a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8008150:	2320      	movs	r3, #32
 8008152:	e003      	b.n	800815c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8008154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008156:	fab3 f383 	clz	r3, r3
 800815a:	b2db      	uxtb	r3, r3
 800815c:	3301      	adds	r3, #1
 800815e:	069b      	lsls	r3, r3, #26
 8008160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816c:	2b00      	cmp	r3, #0
 800816e:	d109      	bne.n	8008184 <HAL_ADC_ConfigChannel+0x520>
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	0e9b      	lsrs	r3, r3, #26
 8008176:	3301      	adds	r3, #1
 8008178:	f003 031f 	and.w	r3, r3, #31
 800817c:	2101      	movs	r1, #1
 800817e:	fa01 f303 	lsl.w	r3, r1, r3
 8008182:	e017      	b.n	80081b4 <HAL_ADC_ConfigChannel+0x550>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800818c:	fa93 f3a3 	rbit	r3, r3
 8008190:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8008192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008194:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800819c:	2320      	movs	r3, #32
 800819e:	e003      	b.n	80081a8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80081a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a2:	fab3 f383 	clz	r3, r3
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	3301      	adds	r3, #1
 80081aa:	f003 031f 	and.w	r3, r3, #31
 80081ae:	2101      	movs	r1, #1
 80081b0:	fa01 f303 	lsl.w	r3, r1, r3
 80081b4:	ea42 0103 	orr.w	r1, r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d10a      	bne.n	80081da <HAL_ADC_ConfigChannel+0x576>
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	0e9b      	lsrs	r3, r3, #26
 80081ca:	3301      	adds	r3, #1
 80081cc:	f003 021f 	and.w	r2, r3, #31
 80081d0:	4613      	mov	r3, r2
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	4413      	add	r3, r2
 80081d6:	051b      	lsls	r3, r3, #20
 80081d8:	e018      	b.n	800820c <HAL_ADC_ConfigChannel+0x5a8>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e2:	fa93 f3a3 	rbit	r3, r3
 80081e6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80081e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80081ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80081f2:	2320      	movs	r3, #32
 80081f4:	e003      	b.n	80081fe <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80081f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	3301      	adds	r3, #1
 8008200:	f003 021f 	and.w	r2, r3, #31
 8008204:	4613      	mov	r3, r2
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4413      	add	r3, r2
 800820a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800820c:	430b      	orrs	r3, r1
 800820e:	e07e      	b.n	800830e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008218:	2b00      	cmp	r3, #0
 800821a:	d107      	bne.n	800822c <HAL_ADC_ConfigChannel+0x5c8>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	0e9b      	lsrs	r3, r3, #26
 8008222:	3301      	adds	r3, #1
 8008224:	069b      	lsls	r3, r3, #26
 8008226:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800822a:	e015      	b.n	8008258 <HAL_ADC_ConfigChannel+0x5f4>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008234:	fa93 f3a3 	rbit	r3, r3
 8008238:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800823a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8008244:	2320      	movs	r3, #32
 8008246:	e003      	b.n	8008250 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8008248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824a:	fab3 f383 	clz	r3, r3
 800824e:	b2db      	uxtb	r3, r3
 8008250:	3301      	adds	r3, #1
 8008252:	069b      	lsls	r3, r3, #26
 8008254:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008260:	2b00      	cmp	r3, #0
 8008262:	d109      	bne.n	8008278 <HAL_ADC_ConfigChannel+0x614>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	0e9b      	lsrs	r3, r3, #26
 800826a:	3301      	adds	r3, #1
 800826c:	f003 031f 	and.w	r3, r3, #31
 8008270:	2101      	movs	r1, #1
 8008272:	fa01 f303 	lsl.w	r3, r1, r3
 8008276:	e017      	b.n	80082a8 <HAL_ADC_ConfigChannel+0x644>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	fa93 f3a3 	rbit	r3, r3
 8008284:	61fb      	str	r3, [r7, #28]
  return result;
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800828a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8008290:	2320      	movs	r3, #32
 8008292:	e003      	b.n	800829c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	fab3 f383 	clz	r3, r3
 800829a:	b2db      	uxtb	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2101      	movs	r1, #1
 80082a4:	fa01 f303 	lsl.w	r3, r1, r3
 80082a8:	ea42 0103 	orr.w	r1, r2, r3
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10d      	bne.n	80082d4 <HAL_ADC_ConfigChannel+0x670>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	0e9b      	lsrs	r3, r3, #26
 80082be:	3301      	adds	r3, #1
 80082c0:	f003 021f 	and.w	r2, r3, #31
 80082c4:	4613      	mov	r3, r2
 80082c6:	005b      	lsls	r3, r3, #1
 80082c8:	4413      	add	r3, r2
 80082ca:	3b1e      	subs	r3, #30
 80082cc:	051b      	lsls	r3, r3, #20
 80082ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80082d2:	e01b      	b.n	800830c <HAL_ADC_ConfigChannel+0x6a8>
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	fa93 f3a3 	rbit	r3, r3
 80082e0:	613b      	str	r3, [r7, #16]
  return result;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80082ec:	2320      	movs	r3, #32
 80082ee:	e003      	b.n	80082f8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	fab3 f383 	clz	r3, r3
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	3301      	adds	r3, #1
 80082fa:	f003 021f 	and.w	r2, r3, #31
 80082fe:	4613      	mov	r3, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	4413      	add	r3, r2
 8008304:	3b1e      	subs	r3, #30
 8008306:	051b      	lsls	r3, r3, #20
 8008308:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800830c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008312:	4619      	mov	r1, r3
 8008314:	f7ff f8c5 	bl	80074a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b09      	ldr	r3, [pc, #36]	@ (8008344 <HAL_ADC_ConfigChannel+0x6e0>)
 800831e:	4013      	ands	r3, r2
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 80be 	beq.w	80084a2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800832e:	d004      	beq.n	800833a <HAL_ADC_ConfigChannel+0x6d6>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a04      	ldr	r2, [pc, #16]	@ (8008348 <HAL_ADC_ConfigChannel+0x6e4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d10a      	bne.n	8008350 <HAL_ADC_ConfigChannel+0x6ec>
 800833a:	4b04      	ldr	r3, [pc, #16]	@ (800834c <HAL_ADC_ConfigChannel+0x6e8>)
 800833c:	e009      	b.n	8008352 <HAL_ADC_ConfigChannel+0x6ee>
 800833e:	bf00      	nop
 8008340:	407f0000 	.word	0x407f0000
 8008344:	80080000 	.word	0x80080000
 8008348:	50000100 	.word	0x50000100
 800834c:	50000300 	.word	0x50000300
 8008350:	4b59      	ldr	r3, [pc, #356]	@ (80084b8 <HAL_ADC_ConfigChannel+0x854>)
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe ffba 	bl	80072cc <LL_ADC_GetCommonPathInternalCh>
 8008358:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a56      	ldr	r2, [pc, #344]	@ (80084bc <HAL_ADC_ConfigChannel+0x858>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_ADC_ConfigChannel+0x70c>
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a55      	ldr	r2, [pc, #340]	@ (80084c0 <HAL_ADC_ConfigChannel+0x85c>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d13a      	bne.n	80083e6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008374:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008378:	2b00      	cmp	r3, #0
 800837a:	d134      	bne.n	80083e6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008384:	d005      	beq.n	8008392 <HAL_ADC_ConfigChannel+0x72e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a4e      	ldr	r2, [pc, #312]	@ (80084c4 <HAL_ADC_ConfigChannel+0x860>)
 800838c:	4293      	cmp	r3, r2
 800838e:	f040 8085 	bne.w	800849c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800839a:	d004      	beq.n	80083a6 <HAL_ADC_ConfigChannel+0x742>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a49      	ldr	r2, [pc, #292]	@ (80084c8 <HAL_ADC_ConfigChannel+0x864>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d101      	bne.n	80083aa <HAL_ADC_ConfigChannel+0x746>
 80083a6:	4a49      	ldr	r2, [pc, #292]	@ (80084cc <HAL_ADC_ConfigChannel+0x868>)
 80083a8:	e000      	b.n	80083ac <HAL_ADC_ConfigChannel+0x748>
 80083aa:	4a43      	ldr	r2, [pc, #268]	@ (80084b8 <HAL_ADC_ConfigChannel+0x854>)
 80083ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083b0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f7fe ff75 	bl	80072a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083bc:	4b44      	ldr	r3, [pc, #272]	@ (80084d0 <HAL_ADC_ConfigChannel+0x86c>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	099b      	lsrs	r3, r3, #6
 80083c2:	4a44      	ldr	r2, [pc, #272]	@ (80084d4 <HAL_ADC_ConfigChannel+0x870>)
 80083c4:	fba2 2303 	umull	r2, r3, r2, r3
 80083c8:	099b      	lsrs	r3, r3, #6
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	4613      	mov	r3, r2
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083d6:	e002      	b.n	80083de <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	3b01      	subs	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f9      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083e4:	e05a      	b.n	800849c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a3b      	ldr	r2, [pc, #236]	@ (80084d8 <HAL_ADC_ConfigChannel+0x874>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d125      	bne.n	800843c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80083f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80083f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d11f      	bne.n	800843c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a31      	ldr	r2, [pc, #196]	@ (80084c8 <HAL_ADC_ConfigChannel+0x864>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d104      	bne.n	8008410 <HAL_ADC_ConfigChannel+0x7ac>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a34      	ldr	r2, [pc, #208]	@ (80084dc <HAL_ADC_ConfigChannel+0x878>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d047      	beq.n	80084a0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008418:	d004      	beq.n	8008424 <HAL_ADC_ConfigChannel+0x7c0>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a2a      	ldr	r2, [pc, #168]	@ (80084c8 <HAL_ADC_ConfigChannel+0x864>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d101      	bne.n	8008428 <HAL_ADC_ConfigChannel+0x7c4>
 8008424:	4a29      	ldr	r2, [pc, #164]	@ (80084cc <HAL_ADC_ConfigChannel+0x868>)
 8008426:	e000      	b.n	800842a <HAL_ADC_ConfigChannel+0x7c6>
 8008428:	4a23      	ldr	r2, [pc, #140]	@ (80084b8 <HAL_ADC_ConfigChannel+0x854>)
 800842a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800842e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008432:	4619      	mov	r1, r3
 8008434:	4610      	mov	r0, r2
 8008436:	f7fe ff36 	bl	80072a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800843a:	e031      	b.n	80084a0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a27      	ldr	r2, [pc, #156]	@ (80084e0 <HAL_ADC_ConfigChannel+0x87c>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d12d      	bne.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800844a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d127      	bne.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1c      	ldr	r2, [pc, #112]	@ (80084c8 <HAL_ADC_ConfigChannel+0x864>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d022      	beq.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008464:	d004      	beq.n	8008470 <HAL_ADC_ConfigChannel+0x80c>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a17      	ldr	r2, [pc, #92]	@ (80084c8 <HAL_ADC_ConfigChannel+0x864>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d101      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x810>
 8008470:	4a16      	ldr	r2, [pc, #88]	@ (80084cc <HAL_ADC_ConfigChannel+0x868>)
 8008472:	e000      	b.n	8008476 <HAL_ADC_ConfigChannel+0x812>
 8008474:	4a10      	ldr	r2, [pc, #64]	@ (80084b8 <HAL_ADC_ConfigChannel+0x854>)
 8008476:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800847a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800847e:	4619      	mov	r1, r3
 8008480:	4610      	mov	r0, r2
 8008482:	f7fe ff10 	bl	80072a6 <LL_ADC_SetCommonPathInternalCh>
 8008486:	e00c      	b.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800848c:	f043 0220 	orr.w	r2, r3, #32
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800849a:	e002      	b.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800849c:	bf00      	nop
 800849e:	e000      	b.n	80084a2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80084a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80084aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	37d8      	adds	r7, #216	@ 0xd8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	50000700 	.word	0x50000700
 80084bc:	c3210000 	.word	0xc3210000
 80084c0:	90c00010 	.word	0x90c00010
 80084c4:	50000600 	.word	0x50000600
 80084c8:	50000100 	.word	0x50000100
 80084cc:	50000300 	.word	0x50000300
 80084d0:	200000f4 	.word	0x200000f4
 80084d4:	053e2d63 	.word	0x053e2d63
 80084d8:	c7520000 	.word	0xc7520000
 80084dc:	50000500 	.word	0x50000500
 80084e0:	cb840000 	.word	0xcb840000

080084e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80084ec:	2300      	movs	r3, #0
 80084ee:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7ff f8a7 	bl	8007648 <LL_ADC_IsEnabled>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d176      	bne.n	80085ee <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	4b3c      	ldr	r3, [pc, #240]	@ (80085f8 <ADC_Enable+0x114>)
 8008508:	4013      	ands	r3, r2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00d      	beq.n	800852a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	f043 0210 	orr.w	r2, r3, #16
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800851e:	f043 0201 	orr.w	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e062      	b.n	80085f0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4618      	mov	r0, r3
 8008530:	f7ff f862 	bl	80075f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800853c:	d004      	beq.n	8008548 <ADC_Enable+0x64>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a2e      	ldr	r2, [pc, #184]	@ (80085fc <ADC_Enable+0x118>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d101      	bne.n	800854c <ADC_Enable+0x68>
 8008548:	4b2d      	ldr	r3, [pc, #180]	@ (8008600 <ADC_Enable+0x11c>)
 800854a:	e000      	b.n	800854e <ADC_Enable+0x6a>
 800854c:	4b2d      	ldr	r3, [pc, #180]	@ (8008604 <ADC_Enable+0x120>)
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe febc 	bl	80072cc <LL_ADC_GetCommonPathInternalCh>
 8008554:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800855a:	2b00      	cmp	r3, #0
 800855c:	d013      	beq.n	8008586 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800855e:	4b2a      	ldr	r3, [pc, #168]	@ (8008608 <ADC_Enable+0x124>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	099b      	lsrs	r3, r3, #6
 8008564:	4a29      	ldr	r2, [pc, #164]	@ (800860c <ADC_Enable+0x128>)
 8008566:	fba2 2303 	umull	r2, r3, r2, r3
 800856a:	099b      	lsrs	r3, r3, #6
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	4613      	mov	r3, r2
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008578:	e002      	b.n	8008580 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	3b01      	subs	r3, #1
 800857e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f9      	bne.n	800857a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008586:	f7fe fe6f 	bl	8007268 <HAL_GetTick>
 800858a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800858c:	e028      	b.n	80085e0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff f858 	bl	8007648 <LL_ADC_IsEnabled>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7ff f828 	bl	80075f8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80085a8:	f7fe fe5e 	bl	8007268 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d914      	bls.n	80085e0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0301 	and.w	r3, r3, #1
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d00d      	beq.n	80085e0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c8:	f043 0210 	orr.w	r2, r3, #16
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085d4:	f043 0201 	orr.w	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	e007      	b.n	80085f0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d1cf      	bne.n	800858e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80085ee:	2300      	movs	r3, #0
}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	8000003f 	.word	0x8000003f
 80085fc:	50000100 	.word	0x50000100
 8008600:	50000300 	.word	0x50000300
 8008604:	50000700 	.word	0x50000700
 8008608:	200000f4 	.word	0x200000f4
 800860c:	053e2d63 	.word	0x053e2d63

08008610 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff f826 	bl	800766e <LL_ADC_IsDisableOngoing>
 8008622:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4618      	mov	r0, r3
 800862a:	f7ff f80d 	bl	8007648 <LL_ADC_IsEnabled>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d047      	beq.n	80086c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d144      	bne.n	80086c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f003 030d 	and.w	r3, r3, #13
 8008644:	2b01      	cmp	r3, #1
 8008646:	d10c      	bne.n	8008662 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe ffe7 	bl	8007620 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2203      	movs	r2, #3
 8008658:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800865a:	f7fe fe05 	bl	8007268 <HAL_GetTick>
 800865e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008660:	e029      	b.n	80086b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008666:	f043 0210 	orr.w	r2, r3, #16
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008672:	f043 0201 	orr.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e023      	b.n	80086c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800867e:	f7fe fdf3 	bl	8007268 <HAL_GetTick>
 8008682:	4602      	mov	r2, r0
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	1ad3      	subs	r3, r2, r3
 8008688:	2b02      	cmp	r3, #2
 800868a:	d914      	bls.n	80086b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00d      	beq.n	80086b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800869e:	f043 0210 	orr.w	r2, r3, #16
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086aa:	f043 0201 	orr.w	r2, r3, #1
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e007      	b.n	80086c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0301 	and.w	r3, r3, #1
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1dc      	bne.n	800867e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086da:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d14b      	bne.n	8008780 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d021      	beq.n	8008746 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f7fe fe8c 	bl	8007424 <LL_ADC_REG_IsTriggerSourceSWStart>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d032      	beq.n	8008778 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d12b      	bne.n	8008778 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d11f      	bne.n	8008778 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800873c:	f043 0201 	orr.w	r2, r3, #1
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008744:	e018      	b.n	8008778 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d111      	bne.n	8008778 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008758:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008764:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008770:	f043 0201 	orr.w	r2, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff fa55 	bl	8007c28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800877e:	e00e      	b.n	800879e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008784:	f003 0310 	and.w	r3, r3, #16
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f7ff fa5f 	bl	8007c50 <HAL_ADC_ErrorCallback>
}
 8008792:	e004      	b.n	800879e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	4798      	blx	r3
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80087b4:	68f8      	ldr	r0, [r7, #12]
 80087b6:	f7ff fa41 	bl	8007c3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087ba:	bf00      	nop
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b084      	sub	sp, #16
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087e0:	f043 0204 	orr.w	r2, r3, #4
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fa31 	bl	8007c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <LL_ADC_IsEnabled>:
{
 80087f6:	b480      	push	{r7}
 80087f8:	b083      	sub	sp, #12
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b01      	cmp	r3, #1
 8008808:	d101      	bne.n	800880e <LL_ADC_IsEnabled+0x18>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <LL_ADC_IsEnabled+0x1a>
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	370c      	adds	r7, #12
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <LL_ADC_StartCalibration>:
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800882e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008838:	4313      	orrs	r3, r2
 800883a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	609a      	str	r2, [r3, #8]
}
 8008842:	bf00      	nop
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <LL_ADC_IsCalibrationOnGoing>:
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800885e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008862:	d101      	bne.n	8008868 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8008864:	2301      	movs	r3, #1
 8008866:	e000      	b.n	800886a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <LL_ADC_REG_IsConversionOngoing>:
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f003 0304 	and.w	r3, r3, #4
 8008886:	2b04      	cmp	r3, #4
 8008888:	d101      	bne.n	800888e <LL_ADC_REG_IsConversionOngoing+0x18>
 800888a:	2301      	movs	r3, #1
 800888c:	e000      	b.n	8008890 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d101      	bne.n	80088b8 <HAL_ADCEx_Calibration_Start+0x1c>
 80088b4:	2302      	movs	r3, #2
 80088b6:	e04d      	b.n	8008954 <HAL_ADCEx_Calibration_Start+0xb8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f7ff fea5 	bl	8008610 <ADC_Disable>
 80088c6:	4603      	mov	r3, r0
 80088c8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80088ca:	7bfb      	ldrb	r3, [r7, #15]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d136      	bne.n	800893e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80088d8:	f023 0302 	bic.w	r3, r3, #2
 80088dc:	f043 0202 	orr.w	r2, r3, #2
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff ff96 	bl	800881c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80088f0:	e014      	b.n	800891c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	4a18      	ldr	r2, [pc, #96]	@ (800895c <HAL_ADCEx_Calibration_Start+0xc0>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d90d      	bls.n	800891c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008904:	f023 0312 	bic.w	r3, r3, #18
 8008908:	f043 0210 	orr.w	r2, r3, #16
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e01b      	b.n	8008954 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff94 	bl	800884e <LL_ADC_IsCalibrationOnGoing>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d1e2      	bne.n	80088f2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008930:	f023 0303 	bic.w	r3, r3, #3
 8008934:	f043 0201 	orr.w	r2, r3, #1
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800893c:	e005      	b.n	800894a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008942:	f043 0210 	orr.w	r2, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008952:	7bfb      	ldrb	r3, [r7, #15]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}
 800895c:	0004de01 	.word	0x0004de01

08008960 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008960:	b590      	push	{r4, r7, lr}
 8008962:	b0a1      	sub	sp, #132	@ 0x84
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800896a:	2300      	movs	r3, #0
 800896c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008976:	2b01      	cmp	r3, #1
 8008978:	d101      	bne.n	800897e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800897a:	2302      	movs	r3, #2
 800897c:	e0e7      	b.n	8008b4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008986:	2300      	movs	r3, #0
 8008988:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800898a:	2300      	movs	r3, #0
 800898c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008996:	d102      	bne.n	800899e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008998:	4b6f      	ldr	r3, [pc, #444]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800899a:	60bb      	str	r3, [r7, #8]
 800899c:	e009      	b.n	80089b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a6e      	ldr	r2, [pc, #440]	@ (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d102      	bne.n	80089ae <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80089a8:	4b6d      	ldr	r3, [pc, #436]	@ (8008b60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80089aa:	60bb      	str	r3, [r7, #8]
 80089ac:	e001      	b.n	80089b2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80089ae:	2300      	movs	r3, #0
 80089b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d10b      	bne.n	80089d0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089bc:	f043 0220 	orr.w	r2, r3, #32
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e0be      	b.n	8008b4e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7ff ff4f 	bl	8008876 <LL_ADC_REG_IsConversionOngoing>
 80089d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff49 	bl	8008876 <LL_ADC_REG_IsConversionOngoing>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	f040 80a0 	bne.w	8008b2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80089ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f040 809c 	bne.w	8008b2c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089fc:	d004      	beq.n	8008a08 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a55      	ldr	r2, [pc, #340]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d101      	bne.n	8008a0c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008a08:	4b56      	ldr	r3, [pc, #344]	@ (8008b64 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008a0a:	e000      	b.n	8008a0e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008a0c:	4b56      	ldr	r3, [pc, #344]	@ (8008b68 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008a0e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d04b      	beq.n	8008ab0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008a18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	6859      	ldr	r1, [r3, #4]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008a2a:	035b      	lsls	r3, r3, #13
 8008a2c:	430b      	orrs	r3, r1
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a32:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a3c:	d004      	beq.n	8008a48 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a45      	ldr	r2, [pc, #276]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10f      	bne.n	8008a68 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008a48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008a4c:	f7ff fed3 	bl	80087f6 <LL_ADC_IsEnabled>
 8008a50:	4604      	mov	r4, r0
 8008a52:	4841      	ldr	r0, [pc, #260]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008a54:	f7ff fecf 	bl	80087f6 <LL_ADC_IsEnabled>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	4323      	orrs	r3, r4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	bf0c      	ite	eq
 8008a60:	2301      	moveq	r3, #1
 8008a62:	2300      	movne	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	e012      	b.n	8008a8e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008a68:	483c      	ldr	r0, [pc, #240]	@ (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008a6a:	f7ff fec4 	bl	80087f6 <LL_ADC_IsEnabled>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	483b      	ldr	r0, [pc, #236]	@ (8008b60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008a72:	f7ff fec0 	bl	80087f6 <LL_ADC_IsEnabled>
 8008a76:	4603      	mov	r3, r0
 8008a78:	431c      	orrs	r4, r3
 8008a7a:	483c      	ldr	r0, [pc, #240]	@ (8008b6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008a7c:	f7ff febb 	bl	80087f6 <LL_ADC_IsEnabled>
 8008a80:	4603      	mov	r3, r0
 8008a82:	4323      	orrs	r3, r4
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d056      	beq.n	8008b40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008a92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008a9a:	f023 030f 	bic.w	r3, r3, #15
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	6892      	ldr	r2, [r2, #8]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008aac:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008aae:	e047      	b.n	8008b40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008aba:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ac4:	d004      	beq.n	8008ad0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a23      	ldr	r2, [pc, #140]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d10f      	bne.n	8008af0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008ad0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008ad4:	f7ff fe8f 	bl	80087f6 <LL_ADC_IsEnabled>
 8008ad8:	4604      	mov	r4, r0
 8008ada:	481f      	ldr	r0, [pc, #124]	@ (8008b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008adc:	f7ff fe8b 	bl	80087f6 <LL_ADC_IsEnabled>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	4323      	orrs	r3, r4
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	e012      	b.n	8008b16 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008af0:	481a      	ldr	r0, [pc, #104]	@ (8008b5c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008af2:	f7ff fe80 	bl	80087f6 <LL_ADC_IsEnabled>
 8008af6:	4604      	mov	r4, r0
 8008af8:	4819      	ldr	r0, [pc, #100]	@ (8008b60 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008afa:	f7ff fe7c 	bl	80087f6 <LL_ADC_IsEnabled>
 8008afe:	4603      	mov	r3, r0
 8008b00:	431c      	orrs	r4, r3
 8008b02:	481a      	ldr	r0, [pc, #104]	@ (8008b6c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008b04:	f7ff fe77 	bl	80087f6 <LL_ADC_IsEnabled>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	4323      	orrs	r3, r4
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bf0c      	ite	eq
 8008b10:	2301      	moveq	r3, #1
 8008b12:	2300      	movne	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d012      	beq.n	8008b40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008b1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008b22:	f023 030f 	bic.w	r3, r3, #15
 8008b26:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008b28:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008b2a:	e009      	b.n	8008b40 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b30:	f043 0220 	orr.w	r2, r3, #32
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008b3e:	e000      	b.n	8008b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008b40:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008b4a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3784      	adds	r7, #132	@ 0x84
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd90      	pop	{r4, r7, pc}
 8008b56:	bf00      	nop
 8008b58:	50000100 	.word	0x50000100
 8008b5c:	50000400 	.word	0x50000400
 8008b60:	50000500 	.word	0x50000500
 8008b64:	50000300 	.word	0x50000300
 8008b68:	50000700 	.word	0x50000700
 8008b6c:	50000600 	.word	0x50000600

08008b70 <__NVIC_SetPriorityGrouping>:
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b80:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ba2:	4a04      	ldr	r2, [pc, #16]	@ (8008bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	60d3      	str	r3, [r2, #12]
}
 8008ba8:	bf00      	nop
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr
 8008bb4:	e000ed00 	.word	0xe000ed00

08008bb8 <__NVIC_GetPriorityGrouping>:
{
 8008bb8:	b480      	push	{r7}
 8008bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008bbc:	4b04      	ldr	r3, [pc, #16]	@ (8008bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	0a1b      	lsrs	r3, r3, #8
 8008bc2:	f003 0307 	and.w	r3, r3, #7
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	e000ed00 	.word	0xe000ed00

08008bd4 <__NVIC_EnableIRQ>:
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	db0b      	blt.n	8008bfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	f003 021f 	and.w	r2, r3, #31
 8008bec:	4907      	ldr	r1, [pc, #28]	@ (8008c0c <__NVIC_EnableIRQ+0x38>)
 8008bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bf2:	095b      	lsrs	r3, r3, #5
 8008bf4:	2001      	movs	r0, #1
 8008bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8008bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008bfe:	bf00      	nop
 8008c00:	370c      	adds	r7, #12
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	e000e100 	.word	0xe000e100

08008c10 <__NVIC_SetPriority>:
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	6039      	str	r1, [r7, #0]
 8008c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	db0a      	blt.n	8008c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	490c      	ldr	r1, [pc, #48]	@ (8008c5c <__NVIC_SetPriority+0x4c>)
 8008c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c2e:	0112      	lsls	r2, r2, #4
 8008c30:	b2d2      	uxtb	r2, r2
 8008c32:	440b      	add	r3, r1
 8008c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008c38:	e00a      	b.n	8008c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	4908      	ldr	r1, [pc, #32]	@ (8008c60 <__NVIC_SetPriority+0x50>)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	3b04      	subs	r3, #4
 8008c48:	0112      	lsls	r2, r2, #4
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	440b      	add	r3, r1
 8008c4e:	761a      	strb	r2, [r3, #24]
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	e000e100 	.word	0xe000e100
 8008c60:	e000ed00 	.word	0xe000ed00

08008c64 <NVIC_EncodePriority>:
{
 8008c64:	b480      	push	{r7}
 8008c66:	b089      	sub	sp, #36	@ 0x24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	f1c3 0307 	rsb	r3, r3, #7
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	bf28      	it	cs
 8008c82:	2304      	movcs	r3, #4
 8008c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	2b06      	cmp	r3, #6
 8008c8c:	d902      	bls.n	8008c94 <NVIC_EncodePriority+0x30>
 8008c8e:	69fb      	ldr	r3, [r7, #28]
 8008c90:	3b03      	subs	r3, #3
 8008c92:	e000      	b.n	8008c96 <NVIC_EncodePriority+0x32>
 8008c94:	2300      	movs	r3, #0
 8008c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c98:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	43da      	mvns	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	401a      	ands	r2, r3
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008cac:	f04f 31ff 	mov.w	r1, #4294967295
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cb6:	43d9      	mvns	r1, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008cbc:	4313      	orrs	r3, r2
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3724      	adds	r7, #36	@ 0x24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008cdc:	d301      	bcc.n	8008ce2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008cde:	2301      	movs	r3, #1
 8008ce0:	e00f      	b.n	8008d02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8008d0c <SysTick_Config+0x40>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008cea:	210f      	movs	r1, #15
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	f7ff ff8e 	bl	8008c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008cf4:	4b05      	ldr	r3, [pc, #20]	@ (8008d0c <SysTick_Config+0x40>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008cfa:	4b04      	ldr	r3, [pc, #16]	@ (8008d0c <SysTick_Config+0x40>)
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	e000e010 	.word	0xe000e010

08008d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7ff ff29 	bl	8008b70 <__NVIC_SetPriorityGrouping>
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b086      	sub	sp, #24
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	60b9      	str	r1, [r7, #8]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008d34:	f7ff ff40 	bl	8008bb8 <__NVIC_GetPriorityGrouping>
 8008d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	68b9      	ldr	r1, [r7, #8]
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f7ff ff90 	bl	8008c64 <NVIC_EncodePriority>
 8008d44:	4602      	mov	r2, r0
 8008d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d4a:	4611      	mov	r1, r2
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff ff5f 	bl	8008c10 <__NVIC_SetPriority>
}
 8008d52:	bf00      	nop
 8008d54:	3718      	adds	r7, #24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	4603      	mov	r3, r0
 8008d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7ff ff33 	bl	8008bd4 <__NVIC_EnableIRQ>
}
 8008d6e:	bf00      	nop
 8008d70:	3708      	adds	r7, #8
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff ffa4 	bl	8008ccc <SysTick_Config>
 8008d84:	4603      	mov	r3, r0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d101      	bne.n	8008da2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e08d      	b.n	8008ebe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	461a      	mov	r2, r3
 8008da8:	4b47      	ldr	r3, [pc, #284]	@ (8008ec8 <HAL_DMA_Init+0x138>)
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d80f      	bhi.n	8008dce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	4b45      	ldr	r3, [pc, #276]	@ (8008ecc <HAL_DMA_Init+0x13c>)
 8008db6:	4413      	add	r3, r2
 8008db8:	4a45      	ldr	r2, [pc, #276]	@ (8008ed0 <HAL_DMA_Init+0x140>)
 8008dba:	fba2 2303 	umull	r2, r3, r2, r3
 8008dbe:	091b      	lsrs	r3, r3, #4
 8008dc0:	009a      	lsls	r2, r3, #2
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a42      	ldr	r2, [pc, #264]	@ (8008ed4 <HAL_DMA_Init+0x144>)
 8008dca:	641a      	str	r2, [r3, #64]	@ 0x40
 8008dcc:	e00e      	b.n	8008dec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	4b40      	ldr	r3, [pc, #256]	@ (8008ed8 <HAL_DMA_Init+0x148>)
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8008ed0 <HAL_DMA_Init+0x140>)
 8008dda:	fba2 2303 	umull	r2, r3, r2, r3
 8008dde:	091b      	lsrs	r3, r3, #4
 8008de0:	009a      	lsls	r2, r3, #2
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a3c      	ldr	r2, [pc, #240]	@ (8008edc <HAL_DMA_Init+0x14c>)
 8008dea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa76 	bl	8009330 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e4c:	d102      	bne.n	8008e54 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e5c:	b2d2      	uxtb	r2, r2
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e68:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d010      	beq.n	8008e94 <HAL_DMA_Init+0x104>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b04      	cmp	r3, #4
 8008e78:	d80c      	bhi.n	8008e94 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fa96 	bl	80093ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e84:	2200      	movs	r2, #0
 8008e86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008e90:	605a      	str	r2, [r3, #4]
 8008e92:	e008      	b.n	8008ea6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40020407 	.word	0x40020407
 8008ecc:	bffdfff8 	.word	0xbffdfff8
 8008ed0:	cccccccd 	.word	0xcccccccd
 8008ed4:	40020000 	.word	0x40020000
 8008ed8:	bffdfbf8 	.word	0xbffdfbf8
 8008edc:	40020400 	.word	0x40020400

08008ee0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b086      	sub	sp, #24
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	607a      	str	r2, [r7, #4]
 8008eec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d101      	bne.n	8008f00 <HAL_DMA_Start_IT+0x20>
 8008efc:	2302      	movs	r3, #2
 8008efe:	e066      	b.n	8008fce <HAL_DMA_Start_IT+0xee>
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d155      	bne.n	8008fc0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 0201 	bic.w	r2, r2, #1
 8008f30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f9bb 	bl	80092b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f042 020e 	orr.w	r2, r2, #14
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e00f      	b.n	8008f78 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0204 	bic.w	r2, r2, #4
 8008f66:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 020a 	orr.w	r2, r2, #10
 8008f76:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d007      	beq.n	8008f96 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f94:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d007      	beq.n	8008fae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008fac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f042 0201 	orr.w	r2, r2, #1
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	e005      	b.n	8008fcc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008fc8:	2302      	movs	r3, #2
 8008fca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3718      	adds	r7, #24
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008fd6:	b480      	push	{r7}
 8008fd8:	b085      	sub	sp, #20
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b02      	cmp	r3, #2
 8008fec:	d005      	beq.n	8008ffa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2204      	movs	r2, #4
 8008ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
 8008ff8:	e037      	b.n	800906a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 020e 	bic.w	r2, r2, #14
 8009008:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009018:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800902e:	f003 021f 	and.w	r2, r3, #31
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009036:	2101      	movs	r1, #1
 8009038:	fa01 f202 	lsl.w	r2, r1, r2
 800903c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009046:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00c      	beq.n	800906a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800905a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800905e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009068:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800907a:	7bfb      	ldrb	r3, [r7, #15]
}
 800907c:	4618      	mov	r0, r3
 800907e:	3714      	adds	r7, #20
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d00d      	beq.n	80090bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2204      	movs	r2, #4
 80090a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	73fb      	strb	r3, [r7, #15]
 80090ba:	e047      	b.n	800914c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 020e 	bic.w	r2, r2, #14
 80090ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090f0:	f003 021f 	and.w	r2, r3, #31
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f202 	lsl.w	r2, r1, r2
 80090fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009108:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00c      	beq.n	800912c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009120:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800912a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2201      	movs	r2, #1
 8009130:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009140:	2b00      	cmp	r3, #0
 8009142:	d003      	beq.n	800914c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	4798      	blx	r3
    }
  }
  return status;
 800914c:	7bfb      	ldrb	r3, [r7, #15]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009172:	f003 031f 	and.w	r3, r3, #31
 8009176:	2204      	movs	r2, #4
 8009178:	409a      	lsls	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	4013      	ands	r3, r2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d026      	beq.n	80091d0 <HAL_DMA_IRQHandler+0x7a>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	f003 0304 	and.w	r3, r3, #4
 8009188:	2b00      	cmp	r3, #0
 800918a:	d021      	beq.n	80091d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d107      	bne.n	80091aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0204 	bic.w	r2, r2, #4
 80091a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ae:	f003 021f 	and.w	r2, r3, #31
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091b6:	2104      	movs	r1, #4
 80091b8:	fa01 f202 	lsl.w	r2, r1, r2
 80091bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d071      	beq.n	80092aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80091ce:	e06c      	b.n	80092aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2202      	movs	r2, #2
 80091da:	409a      	lsls	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4013      	ands	r3, r2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d02e      	beq.n	8009242 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	f003 0302 	and.w	r3, r3, #2
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d029      	beq.n	8009242 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10b      	bne.n	8009214 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 020a 	bic.w	r2, r2, #10
 800920a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009218:	f003 021f 	and.w	r2, r3, #31
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009220:	2102      	movs	r1, #2
 8009222:	fa01 f202 	lsl.w	r2, r1, r2
 8009226:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d038      	beq.n	80092aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009240:	e033      	b.n	80092aa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009246:	f003 031f 	and.w	r3, r3, #31
 800924a:	2208      	movs	r2, #8
 800924c:	409a      	lsls	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	4013      	ands	r3, r2
 8009252:	2b00      	cmp	r3, #0
 8009254:	d02a      	beq.n	80092ac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b00      	cmp	r3, #0
 800925e:	d025      	beq.n	80092ac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 020e 	bic.w	r2, r2, #14
 800926e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009274:	f003 021f 	and.w	r2, r3, #31
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	2101      	movs	r1, #1
 800927e:	fa01 f202 	lsl.w	r2, r1, r2
 8009282:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d004      	beq.n	80092ac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80092aa:	bf00      	nop
 80092ac:	bf00      	nop
}
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80092ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d004      	beq.n	80092de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80092dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e2:	f003 021f 	and.w	r2, r3, #31
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ea:	2101      	movs	r1, #1
 80092ec:	fa01 f202 	lsl.w	r2, r1, r2
 80092f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	2b10      	cmp	r3, #16
 8009300:	d108      	bne.n	8009314 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009312:	e007      	b.n	8009324 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	60da      	str	r2, [r3, #12]
}
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr

08009330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009330:	b480      	push	{r7}
 8009332:	b087      	sub	sp, #28
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	461a      	mov	r2, r3
 800933e:	4b16      	ldr	r3, [pc, #88]	@ (8009398 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009340:	429a      	cmp	r2, r3
 8009342:	d802      	bhi.n	800934a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009344:	4b15      	ldr	r3, [pc, #84]	@ (800939c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009346:	617b      	str	r3, [r7, #20]
 8009348:	e001      	b.n	800934e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800934a:	4b15      	ldr	r3, [pc, #84]	@ (80093a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800934c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	3b08      	subs	r3, #8
 800935a:	4a12      	ldr	r2, [pc, #72]	@ (80093a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009368:	089b      	lsrs	r3, r3, #2
 800936a:	009a      	lsls	r2, r3, #2
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a0b      	ldr	r2, [pc, #44]	@ (80093a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800937a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	2201      	movs	r2, #1
 8009384:	409a      	lsls	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800938a:	bf00      	nop
 800938c:	371c      	adds	r7, #28
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	40020407 	.word	0x40020407
 800939c:	40020800 	.word	0x40020800
 80093a0:	40020820 	.word	0x40020820
 80093a4:	cccccccd 	.word	0xcccccccd
 80093a8:	40020880 	.word	0x40020880

080093ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4b0b      	ldr	r3, [pc, #44]	@ (80093ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80093c0:	4413      	add	r3, r2
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	461a      	mov	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a08      	ldr	r2, [pc, #32]	@ (80093f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80093ce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	f003 031f 	and.w	r3, r3, #31
 80093d8:	2201      	movs	r2, #1
 80093da:	409a      	lsls	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80093e0:	bf00      	nop
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	1000823f 	.word	0x1000823f
 80093f0:	40020940 	.word	0x40020940

080093f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80093fe:	2300      	movs	r3, #0
 8009400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009402:	e15a      	b.n	80096ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	2101      	movs	r1, #1
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	fa01 f303 	lsl.w	r3, r1, r3
 8009410:	4013      	ands	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f000 814c 	beq.w	80096b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f003 0303 	and.w	r3, r3, #3
 8009424:	2b01      	cmp	r3, #1
 8009426:	d005      	beq.n	8009434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009430:	2b02      	cmp	r3, #2
 8009432:	d130      	bne.n	8009496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	005b      	lsls	r3, r3, #1
 800943e:	2203      	movs	r2, #3
 8009440:	fa02 f303 	lsl.w	r3, r2, r3
 8009444:	43db      	mvns	r3, r3
 8009446:	693a      	ldr	r2, [r7, #16]
 8009448:	4013      	ands	r3, r2
 800944a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	68da      	ldr	r2, [r3, #12]
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	fa02 f303 	lsl.w	r3, r2, r3
 8009458:	693a      	ldr	r2, [r7, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	693a      	ldr	r2, [r7, #16]
 8009462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800946a:	2201      	movs	r2, #1
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	fa02 f303 	lsl.w	r3, r2, r3
 8009472:	43db      	mvns	r3, r3
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4013      	ands	r3, r2
 8009478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	091b      	lsrs	r3, r3, #4
 8009480:	f003 0201 	and.w	r2, r3, #1
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	fa02 f303 	lsl.w	r3, r2, r3
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	2b03      	cmp	r3, #3
 80094a0:	d017      	beq.n	80094d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	005b      	lsls	r3, r3, #1
 80094ac:	2203      	movs	r2, #3
 80094ae:	fa02 f303 	lsl.w	r3, r2, r3
 80094b2:	43db      	mvns	r3, r3
 80094b4:	693a      	ldr	r2, [r7, #16]
 80094b6:	4013      	ands	r3, r2
 80094b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	689a      	ldr	r2, [r3, #8]
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	fa02 f303 	lsl.w	r3, r2, r3
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	f003 0303 	and.w	r3, r3, #3
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d123      	bne.n	8009526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	08da      	lsrs	r2, r3, #3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3208      	adds	r2, #8
 80094e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	f003 0307 	and.w	r3, r3, #7
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	220f      	movs	r2, #15
 80094f6:	fa02 f303 	lsl.w	r3, r2, r3
 80094fa:	43db      	mvns	r3, r3
 80094fc:	693a      	ldr	r2, [r7, #16]
 80094fe:	4013      	ands	r3, r2
 8009500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	691a      	ldr	r2, [r3, #16]
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	f003 0307 	and.w	r3, r3, #7
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	fa02 f303 	lsl.w	r3, r2, r3
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	4313      	orrs	r3, r2
 8009516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	08da      	lsrs	r2, r3, #3
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3208      	adds	r2, #8
 8009520:	6939      	ldr	r1, [r7, #16]
 8009522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	2203      	movs	r2, #3
 8009532:	fa02 f303 	lsl.w	r3, r2, r3
 8009536:	43db      	mvns	r3, r3
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4013      	ands	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	f003 0203 	and.w	r2, r3, #3
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	fa02 f303 	lsl.w	r3, r2, r3
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	4313      	orrs	r3, r2
 8009552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80a6 	beq.w	80096b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009568:	4b5b      	ldr	r3, [pc, #364]	@ (80096d8 <HAL_GPIO_Init+0x2e4>)
 800956a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800956c:	4a5a      	ldr	r2, [pc, #360]	@ (80096d8 <HAL_GPIO_Init+0x2e4>)
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	6613      	str	r3, [r2, #96]	@ 0x60
 8009574:	4b58      	ldr	r3, [pc, #352]	@ (80096d8 <HAL_GPIO_Init+0x2e4>)
 8009576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	60bb      	str	r3, [r7, #8]
 800957e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009580:	4a56      	ldr	r2, [pc, #344]	@ (80096dc <HAL_GPIO_Init+0x2e8>)
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	089b      	lsrs	r3, r3, #2
 8009586:	3302      	adds	r3, #2
 8009588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f003 0303 	and.w	r3, r3, #3
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	220f      	movs	r2, #15
 8009598:	fa02 f303 	lsl.w	r3, r2, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	4013      	ands	r3, r2
 80095a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80095aa:	d01f      	beq.n	80095ec <HAL_GPIO_Init+0x1f8>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a4c      	ldr	r2, [pc, #304]	@ (80096e0 <HAL_GPIO_Init+0x2ec>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d019      	beq.n	80095e8 <HAL_GPIO_Init+0x1f4>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a4b      	ldr	r2, [pc, #300]	@ (80096e4 <HAL_GPIO_Init+0x2f0>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_GPIO_Init+0x1f0>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	4a4a      	ldr	r2, [pc, #296]	@ (80096e8 <HAL_GPIO_Init+0x2f4>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d00d      	beq.n	80095e0 <HAL_GPIO_Init+0x1ec>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a49      	ldr	r2, [pc, #292]	@ (80096ec <HAL_GPIO_Init+0x2f8>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d007      	beq.n	80095dc <HAL_GPIO_Init+0x1e8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a48      	ldr	r2, [pc, #288]	@ (80096f0 <HAL_GPIO_Init+0x2fc>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d101      	bne.n	80095d8 <HAL_GPIO_Init+0x1e4>
 80095d4:	2305      	movs	r3, #5
 80095d6:	e00a      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095d8:	2306      	movs	r3, #6
 80095da:	e008      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095dc:	2304      	movs	r3, #4
 80095de:	e006      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e0:	2303      	movs	r3, #3
 80095e2:	e004      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e4:	2302      	movs	r3, #2
 80095e6:	e002      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095e8:	2301      	movs	r3, #1
 80095ea:	e000      	b.n	80095ee <HAL_GPIO_Init+0x1fa>
 80095ec:	2300      	movs	r3, #0
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	f002 0203 	and.w	r2, r2, #3
 80095f4:	0092      	lsls	r2, r2, #2
 80095f6:	4093      	lsls	r3, r2
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80095fe:	4937      	ldr	r1, [pc, #220]	@ (80096dc <HAL_GPIO_Init+0x2e8>)
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	089b      	lsrs	r3, r3, #2
 8009604:	3302      	adds	r3, #2
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800960c:	4b39      	ldr	r3, [pc, #228]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	43db      	mvns	r3, r3
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4013      	ands	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d003      	beq.n	8009630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009628:	693a      	ldr	r2, [r7, #16]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4313      	orrs	r3, r2
 800962e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009630:	4a30      	ldr	r2, [pc, #192]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009636:	4b2f      	ldr	r3, [pc, #188]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 8009638:	68db      	ldr	r3, [r3, #12]
 800963a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	43db      	mvns	r3, r3
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	4013      	ands	r3, r2
 8009644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	4313      	orrs	r3, r2
 8009658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800965a:	4a26      	ldr	r2, [pc, #152]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009660:	4b24      	ldr	r3, [pc, #144]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	43db      	mvns	r3, r3
 800966a:	693a      	ldr	r2, [r7, #16]
 800966c:	4013      	ands	r3, r2
 800966e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800967c:	693a      	ldr	r2, [r7, #16]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	4313      	orrs	r3, r2
 8009682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009684:	4a1b      	ldr	r2, [pc, #108]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800968a:	4b1a      	ldr	r3, [pc, #104]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	43db      	mvns	r3, r3
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4013      	ands	r3, r2
 8009698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d003      	beq.n	80096ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80096ae:	4a11      	ldr	r2, [pc, #68]	@ (80096f4 <HAL_GPIO_Init+0x300>)
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	3301      	adds	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	fa22 f303 	lsr.w	r3, r2, r3
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	f47f ae9d 	bne.w	8009404 <HAL_GPIO_Init+0x10>
  }
}
 80096ca:	bf00      	nop
 80096cc:	bf00      	nop
 80096ce:	371c      	adds	r7, #28
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	40021000 	.word	0x40021000
 80096dc:	40010000 	.word	0x40010000
 80096e0:	48000400 	.word	0x48000400
 80096e4:	48000800 	.word	0x48000800
 80096e8:	48000c00 	.word	0x48000c00
 80096ec:	48001000 	.word	0x48001000
 80096f0:	48001400 	.word	0x48001400
 80096f4:	40010400 	.word	0x40010400

080096f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	460b      	mov	r3, r1
 8009702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	691a      	ldr	r2, [r3, #16]
 8009708:	887b      	ldrh	r3, [r7, #2]
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d002      	beq.n	8009716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
 8009714:	e001      	b.n	800971a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800971a:	7bfb      	ldrb	r3, [r7, #15]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	460b      	mov	r3, r1
 8009732:	807b      	strh	r3, [r7, #2]
 8009734:	4613      	mov	r3, r2
 8009736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009738:	787b      	ldrb	r3, [r7, #1]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800973e:	887a      	ldrh	r2, [r7, #2]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009744:	e002      	b.n	800974c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009746:	887a      	ldrh	r2, [r7, #2]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	4603      	mov	r3, r0
 8009760:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8009762:	4b08      	ldr	r3, [pc, #32]	@ (8009784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009764:	695a      	ldr	r2, [r3, #20]
 8009766:	88fb      	ldrh	r3, [r7, #6]
 8009768:	4013      	ands	r3, r2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800976e:	4a05      	ldr	r2, [pc, #20]	@ (8009784 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009770:	88fb      	ldrh	r3, [r7, #6]
 8009772:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009774:	88fb      	ldrh	r3, [r7, #6]
 8009776:	4618      	mov	r0, r3
 8009778:	f7fb ff30 	bl	80055dc <HAL_GPIO_EXTI_Callback>
  }
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40010400 	.word	0x40010400

08009788 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009788:	b480      	push	{r7}
 800978a:	b085      	sub	sp, #20
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d141      	bne.n	800981a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009796:	4b4b      	ldr	r3, [pc, #300]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800979e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097a2:	d131      	bne.n	8009808 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80097a4:	4b47      	ldr	r3, [pc, #284]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097aa:	4a46      	ldr	r2, [pc, #280]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80097b4:	4b43      	ldr	r3, [pc, #268]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80097bc:	4a41      	ldr	r2, [pc, #260]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80097c4:	4b40      	ldr	r3, [pc, #256]	@ (80098c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2232      	movs	r2, #50	@ 0x32
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	4a3f      	ldr	r2, [pc, #252]	@ (80098cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80097d0:	fba2 2303 	umull	r2, r3, r2, r3
 80097d4:	0c9b      	lsrs	r3, r3, #18
 80097d6:	3301      	adds	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097da:	e002      	b.n	80097e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	3b01      	subs	r3, #1
 80097e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80097e2:	4b38      	ldr	r3, [pc, #224]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097ee:	d102      	bne.n	80097f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1f2      	bne.n	80097dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80097f6:	4b33      	ldr	r3, [pc, #204]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80097f8:	695b      	ldr	r3, [r3, #20]
 80097fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80097fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009802:	d158      	bne.n	80098b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	e057      	b.n	80098b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009808:	4b2e      	ldr	r3, [pc, #184]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800980a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800980e:	4a2d      	ldr	r2, [pc, #180]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009814:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009818:	e04d      	b.n	80098b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009820:	d141      	bne.n	80098a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009822:	4b28      	ldr	r3, [pc, #160]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800982a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800982e:	d131      	bne.n	8009894 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009830:	4b24      	ldr	r3, [pc, #144]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009832:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009836:	4a23      	ldr	r2, [pc, #140]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800983c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009840:	4b20      	ldr	r3, [pc, #128]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009848:	4a1e      	ldr	r2, [pc, #120]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800984a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800984e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009850:	4b1d      	ldr	r3, [pc, #116]	@ (80098c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2232      	movs	r2, #50	@ 0x32
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	4a1c      	ldr	r2, [pc, #112]	@ (80098cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800985c:	fba2 2303 	umull	r2, r3, r2, r3
 8009860:	0c9b      	lsrs	r3, r3, #18
 8009862:	3301      	adds	r3, #1
 8009864:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009866:	e002      	b.n	800986e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3b01      	subs	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800986e:	4b15      	ldr	r3, [pc, #84]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009870:	695b      	ldr	r3, [r3, #20]
 8009872:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009876:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800987a:	d102      	bne.n	8009882 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1f2      	bne.n	8009868 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009882:	4b10      	ldr	r3, [pc, #64]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009884:	695b      	ldr	r3, [r3, #20]
 8009886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800988a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800988e:	d112      	bne.n	80098b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	e011      	b.n	80098b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009894:	4b0b      	ldr	r3, [pc, #44]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800989a:	4a0a      	ldr	r2, [pc, #40]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800989c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80098a4:	e007      	b.n	80098b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80098a6:	4b07      	ldr	r3, [pc, #28]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80098ae:	4a05      	ldr	r2, [pc, #20]	@ (80098c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098b0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80098b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr
 80098c4:	40007000 	.word	0x40007000
 80098c8:	200000f4 	.word	0x200000f4
 80098cc:	431bde83 	.word	0x431bde83

080098d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80098d0:	b480      	push	{r7}
 80098d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80098d4:	4b05      	ldr	r3, [pc, #20]	@ (80098ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	4a04      	ldr	r2, [pc, #16]	@ (80098ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80098da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098de:	6093      	str	r3, [r2, #8]
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	40007000 	.word	0x40007000

080098f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d101      	bne.n	8009902 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e2fe      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f003 0301 	and.w	r3, r3, #1
 800990a:	2b00      	cmp	r3, #0
 800990c:	d075      	beq.n	80099fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800990e:	4b97      	ldr	r3, [pc, #604]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	f003 030c 	and.w	r3, r3, #12
 8009916:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009918:	4b94      	ldr	r3, [pc, #592]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	f003 0303 	and.w	r3, r3, #3
 8009920:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b0c      	cmp	r3, #12
 8009926:	d102      	bne.n	800992e <HAL_RCC_OscConfig+0x3e>
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b03      	cmp	r3, #3
 800992c:	d002      	beq.n	8009934 <HAL_RCC_OscConfig+0x44>
 800992e:	69bb      	ldr	r3, [r7, #24]
 8009930:	2b08      	cmp	r3, #8
 8009932:	d10b      	bne.n	800994c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009934:	4b8d      	ldr	r3, [pc, #564]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d05b      	beq.n	80099f8 <HAL_RCC_OscConfig+0x108>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d157      	bne.n	80099f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	e2d9      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009954:	d106      	bne.n	8009964 <HAL_RCC_OscConfig+0x74>
 8009956:	4b85      	ldr	r3, [pc, #532]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a84      	ldr	r2, [pc, #528]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800995c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009960:	6013      	str	r3, [r2, #0]
 8009962:	e01d      	b.n	80099a0 <HAL_RCC_OscConfig+0xb0>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800996c:	d10c      	bne.n	8009988 <HAL_RCC_OscConfig+0x98>
 800996e:	4b7f      	ldr	r3, [pc, #508]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a7e      	ldr	r2, [pc, #504]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009974:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009978:	6013      	str	r3, [r2, #0]
 800997a:	4b7c      	ldr	r3, [pc, #496]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a7b      	ldr	r2, [pc, #492]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	e00b      	b.n	80099a0 <HAL_RCC_OscConfig+0xb0>
 8009988:	4b78      	ldr	r3, [pc, #480]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a77      	ldr	r2, [pc, #476]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800998e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009992:	6013      	str	r3, [r2, #0]
 8009994:	4b75      	ldr	r3, [pc, #468]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a74      	ldr	r2, [pc, #464]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 800999a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800999e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d013      	beq.n	80099d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a8:	f7fd fc5e 	bl	8007268 <HAL_GetTick>
 80099ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099ae:	e008      	b.n	80099c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099b0:	f7fd fc5a 	bl	8007268 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b64      	cmp	r3, #100	@ 0x64
 80099bc:	d901      	bls.n	80099c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e29e      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099c2:	4b6a      	ldr	r3, [pc, #424]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d0f0      	beq.n	80099b0 <HAL_RCC_OscConfig+0xc0>
 80099ce:	e014      	b.n	80099fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d0:	f7fd fc4a 	bl	8007268 <HAL_GetTick>
 80099d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099d6:	e008      	b.n	80099ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099d8:	f7fd fc46 	bl	8007268 <HAL_GetTick>
 80099dc:	4602      	mov	r2, r0
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	1ad3      	subs	r3, r2, r3
 80099e2:	2b64      	cmp	r3, #100	@ 0x64
 80099e4:	d901      	bls.n	80099ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80099e6:	2303      	movs	r3, #3
 80099e8:	e28a      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80099ea:	4b60      	ldr	r3, [pc, #384]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1f0      	bne.n	80099d8 <HAL_RCC_OscConfig+0xe8>
 80099f6:	e000      	b.n	80099fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0302 	and.w	r3, r3, #2
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d075      	beq.n	8009af2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a06:	4b59      	ldr	r3, [pc, #356]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f003 030c 	and.w	r3, r3, #12
 8009a0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a10:	4b56      	ldr	r3, [pc, #344]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	f003 0303 	and.w	r3, r3, #3
 8009a18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	2b0c      	cmp	r3, #12
 8009a1e:	d102      	bne.n	8009a26 <HAL_RCC_OscConfig+0x136>
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d002      	beq.n	8009a2c <HAL_RCC_OscConfig+0x13c>
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b04      	cmp	r3, #4
 8009a2a:	d11f      	bne.n	8009a6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <HAL_RCC_OscConfig+0x154>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68db      	ldr	r3, [r3, #12]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e25d      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a44:	4b49      	ldr	r3, [pc, #292]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	061b      	lsls	r3, r3, #24
 8009a52:	4946      	ldr	r1, [pc, #280]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a54:	4313      	orrs	r3, r2
 8009a56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009a58:	4b45      	ldr	r3, [pc, #276]	@ (8009b70 <HAL_RCC_OscConfig+0x280>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f7fd fbb7 	bl	80071d0 <HAL_InitTick>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d043      	beq.n	8009af0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e249      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d023      	beq.n	8009abc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a74:	4b3d      	ldr	r3, [pc, #244]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a3c      	ldr	r2, [pc, #240]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a80:	f7fd fbf2 	bl	8007268 <HAL_GetTick>
 8009a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a86:	e008      	b.n	8009a9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a88:	f7fd fbee 	bl	8007268 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d901      	bls.n	8009a9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e232      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a9a:	4b34      	ldr	r3, [pc, #208]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0f0      	beq.n	8009a88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aa6:	4b31      	ldr	r3, [pc, #196]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	061b      	lsls	r3, r3, #24
 8009ab4:	492d      	ldr	r1, [pc, #180]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	604b      	str	r3, [r1, #4]
 8009aba:	e01a      	b.n	8009af2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009abc:	4b2b      	ldr	r3, [pc, #172]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009ac2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac8:	f7fd fbce 	bl	8007268 <HAL_GetTick>
 8009acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ace:	e008      	b.n	8009ae2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ad0:	f7fd fbca 	bl	8007268 <HAL_GetTick>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d901      	bls.n	8009ae2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e20e      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009ae2:	4b22      	ldr	r3, [pc, #136]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d1f0      	bne.n	8009ad0 <HAL_RCC_OscConfig+0x1e0>
 8009aee:	e000      	b.n	8009af2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009af0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 0308 	and.w	r3, r3, #8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d041      	beq.n	8009b82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d01c      	beq.n	8009b40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b06:	4b19      	ldr	r3, [pc, #100]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b0c:	4a17      	ldr	r2, [pc, #92]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009b0e:	f043 0301 	orr.w	r3, r3, #1
 8009b12:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b16:	f7fd fba7 	bl	8007268 <HAL_GetTick>
 8009b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b1c:	e008      	b.n	8009b30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b1e:	f7fd fba3 	bl	8007268 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	2b02      	cmp	r3, #2
 8009b2a:	d901      	bls.n	8009b30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e1e7      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009b30:	4b0e      	ldr	r3, [pc, #56]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b36:	f003 0302 	and.w	r3, r3, #2
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0ef      	beq.n	8009b1e <HAL_RCC_OscConfig+0x22e>
 8009b3e:	e020      	b.n	8009b82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b40:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b46:	4a09      	ldr	r2, [pc, #36]	@ (8009b6c <HAL_RCC_OscConfig+0x27c>)
 8009b48:	f023 0301 	bic.w	r3, r3, #1
 8009b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b50:	f7fd fb8a 	bl	8007268 <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b56:	e00d      	b.n	8009b74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b58:	f7fd fb86 	bl	8007268 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d906      	bls.n	8009b74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e1ca      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
 8009b6a:	bf00      	nop
 8009b6c:	40021000 	.word	0x40021000
 8009b70:	200000f8 	.word	0x200000f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009b74:	4b8c      	ldr	r3, [pc, #560]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009b7a:	f003 0302 	and.w	r3, r3, #2
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1ea      	bne.n	8009b58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 80a6 	beq.w	8009cdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b90:	2300      	movs	r3, #0
 8009b92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b94:	4b84      	ldr	r3, [pc, #528]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x2b4>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCC_OscConfig+0x2b6>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00d      	beq.n	8009bc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009baa:	4b7f      	ldr	r3, [pc, #508]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bae:	4a7e      	ldr	r2, [pc, #504]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8009bb6:	4b7c      	ldr	r3, [pc, #496]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bc6:	4b79      	ldr	r3, [pc, #484]	@ (8009dac <HAL_RCC_OscConfig+0x4bc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d118      	bne.n	8009c04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009bd2:	4b76      	ldr	r3, [pc, #472]	@ (8009dac <HAL_RCC_OscConfig+0x4bc>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a75      	ldr	r2, [pc, #468]	@ (8009dac <HAL_RCC_OscConfig+0x4bc>)
 8009bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bde:	f7fd fb43 	bl	8007268 <HAL_GetTick>
 8009be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009be4:	e008      	b.n	8009bf8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009be6:	f7fd fb3f 	bl	8007268 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e183      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009bf8:	4b6c      	ldr	r3, [pc, #432]	@ (8009dac <HAL_RCC_OscConfig+0x4bc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0f0      	beq.n	8009be6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d108      	bne.n	8009c1e <HAL_RCC_OscConfig+0x32e>
 8009c0c:	4b66      	ldr	r3, [pc, #408]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c12:	4a65      	ldr	r2, [pc, #404]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c14:	f043 0301 	orr.w	r3, r3, #1
 8009c18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c1c:	e024      	b.n	8009c68 <HAL_RCC_OscConfig+0x378>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	2b05      	cmp	r3, #5
 8009c24:	d110      	bne.n	8009c48 <HAL_RCC_OscConfig+0x358>
 8009c26:	4b60      	ldr	r3, [pc, #384]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c2c:	4a5e      	ldr	r2, [pc, #376]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c2e:	f043 0304 	orr.w	r3, r3, #4
 8009c32:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c36:	4b5c      	ldr	r3, [pc, #368]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c46:	e00f      	b.n	8009c68 <HAL_RCC_OscConfig+0x378>
 8009c48:	4b57      	ldr	r3, [pc, #348]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c4e:	4a56      	ldr	r2, [pc, #344]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c50:	f023 0301 	bic.w	r3, r3, #1
 8009c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009c58:	4b53      	ldr	r3, [pc, #332]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c5e:	4a52      	ldr	r2, [pc, #328]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c60:	f023 0304 	bic.w	r3, r3, #4
 8009c64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d016      	beq.n	8009c9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c70:	f7fd fafa 	bl	8007268 <HAL_GetTick>
 8009c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c76:	e00a      	b.n	8009c8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c78:	f7fd faf6 	bl	8007268 <HAL_GetTick>
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	1ad3      	subs	r3, r2, r3
 8009c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d901      	bls.n	8009c8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e138      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c8e:	4b46      	ldr	r3, [pc, #280]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d0ed      	beq.n	8009c78 <HAL_RCC_OscConfig+0x388>
 8009c9c:	e015      	b.n	8009cca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c9e:	f7fd fae3 	bl	8007268 <HAL_GetTick>
 8009ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009ca4:	e00a      	b.n	8009cbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ca6:	f7fd fadf 	bl	8007268 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d901      	bls.n	8009cbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e121      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc2:	f003 0302 	and.w	r3, r3, #2
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1ed      	bne.n	8009ca6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009cca:	7ffb      	ldrb	r3, [r7, #31]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d105      	bne.n	8009cdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cd0:	4b35      	ldr	r3, [pc, #212]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cd4:	4a34      	ldr	r2, [pc, #208]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009cd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009cda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 0320 	and.w	r3, r3, #32
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d03c      	beq.n	8009d62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	699b      	ldr	r3, [r3, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d01c      	beq.n	8009d2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009cf8:	f043 0301 	orr.w	r3, r3, #1
 8009cfc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d00:	f7fd fab2 	bl	8007268 <HAL_GetTick>
 8009d04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009d06:	e008      	b.n	8009d1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d08:	f7fd faae 	bl	8007268 <HAL_GetTick>
 8009d0c:	4602      	mov	r2, r0
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	1ad3      	subs	r3, r2, r3
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d901      	bls.n	8009d1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e0f2      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009d1a:	4b23      	ldr	r3, [pc, #140]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d0ef      	beq.n	8009d08 <HAL_RCC_OscConfig+0x418>
 8009d28:	e01b      	b.n	8009d62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d30:	4a1d      	ldr	r2, [pc, #116]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d32:	f023 0301 	bic.w	r3, r3, #1
 8009d36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d3a:	f7fd fa95 	bl	8007268 <HAL_GetTick>
 8009d3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009d40:	e008      	b.n	8009d54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d42:	f7fd fa91 	bl	8007268 <HAL_GetTick>
 8009d46:	4602      	mov	r2, r0
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	1ad3      	subs	r3, r2, r3
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d901      	bls.n	8009d54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e0d5      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009d54:	4b14      	ldr	r3, [pc, #80]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d5a:	f003 0302 	and.w	r3, r3, #2
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1ef      	bne.n	8009d42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f000 80c9 	beq.w	8009efe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f003 030c 	and.w	r3, r3, #12
 8009d74:	2b0c      	cmp	r3, #12
 8009d76:	f000 8083 	beq.w	8009e80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	69db      	ldr	r3, [r3, #28]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	d15e      	bne.n	8009e40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d82:	4b09      	ldr	r3, [pc, #36]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a08      	ldr	r2, [pc, #32]	@ (8009da8 <HAL_RCC_OscConfig+0x4b8>)
 8009d88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d8e:	f7fd fa6b 	bl	8007268 <HAL_GetTick>
 8009d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d94:	e00c      	b.n	8009db0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d96:	f7fd fa67 	bl	8007268 <HAL_GetTick>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1ad3      	subs	r3, r2, r3
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d905      	bls.n	8009db0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e0ab      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
 8009da8:	40021000 	.word	0x40021000
 8009dac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009db0:	4b55      	ldr	r3, [pc, #340]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1ec      	bne.n	8009d96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009dbc:	4b52      	ldr	r3, [pc, #328]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009dbe:	68da      	ldr	r2, [r3, #12]
 8009dc0:	4b52      	ldr	r3, [pc, #328]	@ (8009f0c <HAL_RCC_OscConfig+0x61c>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6a11      	ldr	r1, [r2, #32]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009dcc:	3a01      	subs	r2, #1
 8009dce:	0112      	lsls	r2, r2, #4
 8009dd0:	4311      	orrs	r1, r2
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009dd6:	0212      	lsls	r2, r2, #8
 8009dd8:	4311      	orrs	r1, r2
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009dde:	0852      	lsrs	r2, r2, #1
 8009de0:	3a01      	subs	r2, #1
 8009de2:	0552      	lsls	r2, r2, #21
 8009de4:	4311      	orrs	r1, r2
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009dea:	0852      	lsrs	r2, r2, #1
 8009dec:	3a01      	subs	r2, #1
 8009dee:	0652      	lsls	r2, r2, #25
 8009df0:	4311      	orrs	r1, r2
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009df6:	06d2      	lsls	r2, r2, #27
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	4943      	ldr	r1, [pc, #268]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e00:	4b41      	ldr	r3, [pc, #260]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a40      	ldr	r2, [pc, #256]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	4a3d      	ldr	r2, [pc, #244]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009e16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e18:	f7fd fa26 	bl	8007268 <HAL_GetTick>
 8009e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e1e:	e008      	b.n	8009e32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e20:	f7fd fa22 	bl	8007268 <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d901      	bls.n	8009e32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	e066      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e32:	4b35      	ldr	r3, [pc, #212]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d0f0      	beq.n	8009e20 <HAL_RCC_OscConfig+0x530>
 8009e3e:	e05e      	b.n	8009efe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e40:	4b31      	ldr	r3, [pc, #196]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a30      	ldr	r2, [pc, #192]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e4c:	f7fd fa0c 	bl	8007268 <HAL_GetTick>
 8009e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e52:	e008      	b.n	8009e66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e54:	f7fd fa08 	bl	8007268 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e04c      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e66:	4b28      	ldr	r3, [pc, #160]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f0      	bne.n	8009e54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009e72:	4b25      	ldr	r3, [pc, #148]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	4924      	ldr	r1, [pc, #144]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e78:	4b25      	ldr	r3, [pc, #148]	@ (8009f10 <HAL_RCC_OscConfig+0x620>)
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	60cb      	str	r3, [r1, #12]
 8009e7e:	e03e      	b.n	8009efe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e039      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009e8c:	4b1e      	ldr	r3, [pc, #120]	@ (8009f08 <HAL_RCC_OscConfig+0x618>)
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	f003 0203 	and.w	r2, r3, #3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d12c      	bne.n	8009efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d123      	bne.n	8009efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ebc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d11b      	bne.n	8009efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ecc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d113      	bne.n	8009efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009edc:	085b      	lsrs	r3, r3, #1
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d109      	bne.n	8009efa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ef0:	085b      	lsrs	r3, r3, #1
 8009ef2:	3b01      	subs	r3, #1
 8009ef4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d001      	beq.n	8009efe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	e000      	b.n	8009f00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3720      	adds	r7, #32
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	019f800c 	.word	0x019f800c
 8009f10:	feeefffc 	.word	0xfeeefffc

08009f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d101      	bne.n	8009f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e11e      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f2c:	4b91      	ldr	r3, [pc, #580]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 030f 	and.w	r3, r3, #15
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d910      	bls.n	8009f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f3a:	4b8e      	ldr	r3, [pc, #568]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f023 020f 	bic.w	r2, r3, #15
 8009f42:	498c      	ldr	r1, [pc, #560]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f4a:	4b8a      	ldr	r3, [pc, #552]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	683a      	ldr	r2, [r7, #0]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d001      	beq.n	8009f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e106      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d073      	beq.n	800a050 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d129      	bne.n	8009fc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f70:	4b81      	ldr	r3, [pc, #516]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e0f4      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009f80:	f000 f99e 	bl	800a2c0 <RCC_GetSysClockFreqFromPLLSource>
 8009f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	4a7c      	ldr	r2, [pc, #496]	@ (800a17c <HAL_RCC_ClockConfig+0x268>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d93f      	bls.n	800a00e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009f8e:	4b7a      	ldr	r3, [pc, #488]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d009      	beq.n	8009fae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d033      	beq.n	800a00e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d12f      	bne.n	800a00e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009fae:	4b72      	ldr	r3, [pc, #456]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009fb6:	4a70      	ldr	r2, [pc, #448]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009fbe:	2380      	movs	r3, #128	@ 0x80
 8009fc0:	617b      	str	r3, [r7, #20]
 8009fc2:	e024      	b.n	800a00e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b02      	cmp	r3, #2
 8009fca:	d107      	bne.n	8009fdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009fcc:	4b6a      	ldr	r3, [pc, #424]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d109      	bne.n	8009fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e0c6      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009fdc:	4b66      	ldr	r3, [pc, #408]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e0be      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009fec:	f000 f8ce 	bl	800a18c <HAL_RCC_GetSysClockFreq>
 8009ff0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	4a61      	ldr	r2, [pc, #388]	@ (800a17c <HAL_RCC_ClockConfig+0x268>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d909      	bls.n	800a00e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009ffa:	4b5f      	ldr	r3, [pc, #380]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a002:	4a5d      	ldr	r2, [pc, #372]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a008:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a00a:	2380      	movs	r3, #128	@ 0x80
 800a00c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a00e:	4b5a      	ldr	r3, [pc, #360]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	f023 0203 	bic.w	r2, r3, #3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	4957      	ldr	r1, [pc, #348]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a01c:	4313      	orrs	r3, r2
 800a01e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a020:	f7fd f922 	bl	8007268 <HAL_GetTick>
 800a024:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a026:	e00a      	b.n	800a03e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a028:	f7fd f91e 	bl	8007268 <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a036:	4293      	cmp	r3, r2
 800a038:	d901      	bls.n	800a03e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e095      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a03e:	4b4e      	ldr	r3, [pc, #312]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 020c 	and.w	r2, r3, #12
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d1eb      	bne.n	800a028 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d023      	beq.n	800a0a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b00      	cmp	r3, #0
 800a066:	d005      	beq.n	800a074 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a068:	4b43      	ldr	r3, [pc, #268]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	4a42      	ldr	r2, [pc, #264]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a06e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a072:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0308 	and.w	r3, r3, #8
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d007      	beq.n	800a090 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a080:	4b3d      	ldr	r3, [pc, #244]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a088:	4a3b      	ldr	r2, [pc, #236]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a08a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a08e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a090:	4b39      	ldr	r3, [pc, #228]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	4936      	ldr	r1, [pc, #216]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	608b      	str	r3, [r1, #8]
 800a0a2:	e008      	b.n	800a0b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	2b80      	cmp	r3, #128	@ 0x80
 800a0a8:	d105      	bne.n	800a0b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a0aa:	4b33      	ldr	r3, [pc, #204]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	4a32      	ldr	r2, [pc, #200]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a0b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a0b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 030f 	and.w	r3, r3, #15
 800a0be:	683a      	ldr	r2, [r7, #0]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d21d      	bcs.n	800a100 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a0c4:	4b2b      	ldr	r3, [pc, #172]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f023 020f 	bic.w	r2, r3, #15
 800a0cc:	4929      	ldr	r1, [pc, #164]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a0d4:	f7fd f8c8 	bl	8007268 <HAL_GetTick>
 800a0d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0da:	e00a      	b.n	800a0f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0dc:	f7fd f8c4 	bl	8007268 <HAL_GetTick>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d901      	bls.n	800a0f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	e03b      	b.n	800a16a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0f2:	4b20      	ldr	r3, [pc, #128]	@ (800a174 <HAL_RCC_ClockConfig+0x260>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f003 030f 	and.w	r3, r3, #15
 800a0fa:	683a      	ldr	r2, [r7, #0]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d1ed      	bne.n	800a0dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0304 	and.w	r3, r3, #4
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d008      	beq.n	800a11e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a10c:	4b1a      	ldr	r3, [pc, #104]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	4917      	ldr	r1, [pc, #92]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a11a:	4313      	orrs	r3, r2
 800a11c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0308 	and.w	r3, r3, #8
 800a126:	2b00      	cmp	r3, #0
 800a128:	d009      	beq.n	800a13e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a12a:	4b13      	ldr	r3, [pc, #76]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	490f      	ldr	r1, [pc, #60]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a13e:	f000 f825 	bl	800a18c <HAL_RCC_GetSysClockFreq>
 800a142:	4602      	mov	r2, r0
 800a144:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <HAL_RCC_ClockConfig+0x264>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	091b      	lsrs	r3, r3, #4
 800a14a:	f003 030f 	and.w	r3, r3, #15
 800a14e:	490c      	ldr	r1, [pc, #48]	@ (800a180 <HAL_RCC_ClockConfig+0x26c>)
 800a150:	5ccb      	ldrb	r3, [r1, r3]
 800a152:	f003 031f 	and.w	r3, r3, #31
 800a156:	fa22 f303 	lsr.w	r3, r2, r3
 800a15a:	4a0a      	ldr	r2, [pc, #40]	@ (800a184 <HAL_RCC_ClockConfig+0x270>)
 800a15c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a15e:	4b0a      	ldr	r3, [pc, #40]	@ (800a188 <HAL_RCC_ClockConfig+0x274>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f7fd f834 	bl	80071d0 <HAL_InitTick>
 800a168:	4603      	mov	r3, r0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3718      	adds	r7, #24
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}
 800a172:	bf00      	nop
 800a174:	40022000 	.word	0x40022000
 800a178:	40021000 	.word	0x40021000
 800a17c:	04c4b400 	.word	0x04c4b400
 800a180:	08010710 	.word	0x08010710
 800a184:	200000f4 	.word	0x200000f4
 800a188:	200000f8 	.word	0x200000f8

0800a18c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a192:	4b2c      	ldr	r3, [pc, #176]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f003 030c 	and.w	r3, r3, #12
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d102      	bne.n	800a1a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a19e:	4b2a      	ldr	r3, [pc, #168]	@ (800a248 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a1a0:	613b      	str	r3, [r7, #16]
 800a1a2:	e047      	b.n	800a234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a1a4:	4b27      	ldr	r3, [pc, #156]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	f003 030c 	and.w	r3, r3, #12
 800a1ac:	2b08      	cmp	r3, #8
 800a1ae:	d102      	bne.n	800a1b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a1b0:	4b26      	ldr	r3, [pc, #152]	@ (800a24c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1b2:	613b      	str	r3, [r7, #16]
 800a1b4:	e03e      	b.n	800a234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a1b6:	4b23      	ldr	r3, [pc, #140]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 030c 	and.w	r3, r3, #12
 800a1be:	2b0c      	cmp	r3, #12
 800a1c0:	d136      	bne.n	800a230 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a1c2:	4b20      	ldr	r3, [pc, #128]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0303 	and.w	r3, r3, #3
 800a1ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a1cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	091b      	lsrs	r3, r3, #4
 800a1d2:	f003 030f 	and.w	r3, r3, #15
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d10c      	bne.n	800a1fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1e0:	4a1a      	ldr	r2, [pc, #104]	@ (800a24c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1e8:	4a16      	ldr	r2, [pc, #88]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a1ea:	68d2      	ldr	r2, [r2, #12]
 800a1ec:	0a12      	lsrs	r2, r2, #8
 800a1ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a1f2:	fb02 f303 	mul.w	r3, r2, r3
 800a1f6:	617b      	str	r3, [r7, #20]
      break;
 800a1f8:	e00c      	b.n	800a214 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a1fa:	4a13      	ldr	r2, [pc, #76]	@ (800a248 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a202:	4a10      	ldr	r2, [pc, #64]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a204:	68d2      	ldr	r2, [r2, #12]
 800a206:	0a12      	lsrs	r2, r2, #8
 800a208:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a20c:	fb02 f303 	mul.w	r3, r2, r3
 800a210:	617b      	str	r3, [r7, #20]
      break;
 800a212:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a214:	4b0b      	ldr	r3, [pc, #44]	@ (800a244 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a216:	68db      	ldr	r3, [r3, #12]
 800a218:	0e5b      	lsrs	r3, r3, #25
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	3301      	adds	r3, #1
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	fbb2 f3f3 	udiv	r3, r2, r3
 800a22c:	613b      	str	r3, [r7, #16]
 800a22e:	e001      	b.n	800a234 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a230:	2300      	movs	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a234:	693b      	ldr	r3, [r7, #16]
}
 800a236:	4618      	mov	r0, r3
 800a238:	371c      	adds	r7, #28
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	40021000 	.word	0x40021000
 800a248:	00f42400 	.word	0x00f42400
 800a24c:	016e3600 	.word	0x016e3600

0800a250 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a254:	4b03      	ldr	r3, [pc, #12]	@ (800a264 <HAL_RCC_GetHCLKFreq+0x14>)
 800a256:	681b      	ldr	r3, [r3, #0]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	200000f4 	.word	0x200000f4

0800a268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a26c:	f7ff fff0 	bl	800a250 <HAL_RCC_GetHCLKFreq>
 800a270:	4602      	mov	r2, r0
 800a272:	4b06      	ldr	r3, [pc, #24]	@ (800a28c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	0a1b      	lsrs	r3, r3, #8
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	4904      	ldr	r1, [pc, #16]	@ (800a290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a27e:	5ccb      	ldrb	r3, [r1, r3]
 800a280:	f003 031f 	and.w	r3, r3, #31
 800a284:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a288:	4618      	mov	r0, r3
 800a28a:	bd80      	pop	{r7, pc}
 800a28c:	40021000 	.word	0x40021000
 800a290:	08010720 	.word	0x08010720

0800a294 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a298:	f7ff ffda 	bl	800a250 <HAL_RCC_GetHCLKFreq>
 800a29c:	4602      	mov	r2, r0
 800a29e:	4b06      	ldr	r3, [pc, #24]	@ (800a2b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	0adb      	lsrs	r3, r3, #11
 800a2a4:	f003 0307 	and.w	r3, r3, #7
 800a2a8:	4904      	ldr	r1, [pc, #16]	@ (800a2bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a2aa:	5ccb      	ldrb	r3, [r1, r3]
 800a2ac:	f003 031f 	and.w	r3, r3, #31
 800a2b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	bd80      	pop	{r7, pc}
 800a2b8:	40021000 	.word	0x40021000
 800a2bc:	08010720 	.word	0x08010720

0800a2c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b087      	sub	sp, #28
 800a2c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a2c6:	4b1e      	ldr	r3, [pc, #120]	@ (800a340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f003 0303 	and.w	r3, r3, #3
 800a2ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a2d0:	4b1b      	ldr	r3, [pc, #108]	@ (800a340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	091b      	lsrs	r3, r3, #4
 800a2d6:	f003 030f 	and.w	r3, r3, #15
 800a2da:	3301      	adds	r3, #1
 800a2dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d10c      	bne.n	800a2fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2e4:	4a17      	ldr	r2, [pc, #92]	@ (800a344 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ec:	4a14      	ldr	r2, [pc, #80]	@ (800a340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a2ee:	68d2      	ldr	r2, [r2, #12]
 800a2f0:	0a12      	lsrs	r2, r2, #8
 800a2f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a2f6:	fb02 f303 	mul.w	r3, r2, r3
 800a2fa:	617b      	str	r3, [r7, #20]
    break;
 800a2fc:	e00c      	b.n	800a318 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a2fe:	4a12      	ldr	r2, [pc, #72]	@ (800a348 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	fbb2 f3f3 	udiv	r3, r2, r3
 800a306:	4a0e      	ldr	r2, [pc, #56]	@ (800a340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a308:	68d2      	ldr	r2, [r2, #12]
 800a30a:	0a12      	lsrs	r2, r2, #8
 800a30c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a310:	fb02 f303 	mul.w	r3, r2, r3
 800a314:	617b      	str	r3, [r7, #20]
    break;
 800a316:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a318:	4b09      	ldr	r3, [pc, #36]	@ (800a340 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	0e5b      	lsrs	r3, r3, #25
 800a31e:	f003 0303 	and.w	r3, r3, #3
 800a322:	3301      	adds	r3, #1
 800a324:	005b      	lsls	r3, r3, #1
 800a326:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a328:	697a      	ldr	r2, [r7, #20]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a330:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a332:	687b      	ldr	r3, [r7, #4]
}
 800a334:	4618      	mov	r0, r3
 800a336:	371c      	adds	r7, #28
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	40021000 	.word	0x40021000
 800a344:	016e3600 	.word	0x016e3600
 800a348:	00f42400 	.word	0x00f42400

0800a34c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a354:	2300      	movs	r3, #0
 800a356:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a358:	2300      	movs	r3, #0
 800a35a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 8098 	beq.w	800a49a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a36a:	2300      	movs	r3, #0
 800a36c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a36e:	4b43      	ldr	r3, [pc, #268]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a376:	2b00      	cmp	r3, #0
 800a378:	d10d      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a37a:	4b40      	ldr	r3, [pc, #256]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a37c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a37e:	4a3f      	ldr	r2, [pc, #252]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a384:	6593      	str	r3, [r2, #88]	@ 0x58
 800a386:	4b3d      	ldr	r3, [pc, #244]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a38a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a38e:	60bb      	str	r3, [r7, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a392:	2301      	movs	r3, #1
 800a394:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a396:	4b3a      	ldr	r3, [pc, #232]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a39      	ldr	r2, [pc, #228]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a39c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3a2:	f7fc ff61 	bl	8007268 <HAL_GetTick>
 800a3a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3a8:	e009      	b.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3aa:	f7fc ff5d 	bl	8007268 <HAL_GetTick>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d902      	bls.n	800a3be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	74fb      	strb	r3, [r7, #19]
        break;
 800a3bc:	e005      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3be:	4b30      	ldr	r3, [pc, #192]	@ (800a480 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0ef      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a3ca:	7cfb      	ldrb	r3, [r7, #19]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d159      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a3d0:	4b2a      	ldr	r3, [pc, #168]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d01e      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d019      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a3ec:	4b23      	ldr	r3, [pc, #140]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3f8:	4b20      	ldr	r3, [pc, #128]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a3fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a404:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a408:	4b1c      	ldr	r3, [pc, #112]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a40a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a40e:	4a1b      	ldr	r2, [pc, #108]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a410:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a418:	4a18      	ldr	r2, [pc, #96]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d016      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a42a:	f7fc ff1d 	bl	8007268 <HAL_GetTick>
 800a42e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a430:	e00b      	b.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a432:	f7fc ff19 	bl	8007268 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a440:	4293      	cmp	r3, r2
 800a442:	d902      	bls.n	800a44a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	74fb      	strb	r3, [r7, #19]
            break;
 800a448:	e006      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a44a:	4b0c      	ldr	r3, [pc, #48]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a44c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0ec      	beq.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a458:	7cfb      	ldrb	r3, [r7, #19]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10b      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a45e:	4b07      	ldr	r3, [pc, #28]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a46c:	4903      	ldr	r1, [pc, #12]	@ (800a47c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a474:	e008      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a476:	7cfb      	ldrb	r3, [r7, #19]
 800a478:	74bb      	strb	r3, [r7, #18]
 800a47a:	e005      	b.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a47c:	40021000 	.word	0x40021000
 800a480:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a484:	7cfb      	ldrb	r3, [r7, #19]
 800a486:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a488:	7c7b      	ldrb	r3, [r7, #17]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d105      	bne.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a48e:	4ba7      	ldr	r3, [pc, #668]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a492:	4aa6      	ldr	r2, [pc, #664]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a494:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a498:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00a      	beq.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4a6:	4ba1      	ldr	r3, [pc, #644]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ac:	f023 0203 	bic.w	r2, r3, #3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	499d      	ldr	r1, [pc, #628]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00a      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4c8:	4b98      	ldr	r3, [pc, #608]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ce:	f023 020c 	bic.w	r2, r3, #12
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	4995      	ldr	r1, [pc, #596]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0304 	and.w	r3, r3, #4
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d00a      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a4ea:	4b90      	ldr	r3, [pc, #576]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	498c      	ldr	r1, [pc, #560]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00a      	beq.n	800a522 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a50c:	4b87      	ldr	r3, [pc, #540]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a512:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	4984      	ldr	r1, [pc, #528]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0310 	and.w	r3, r3, #16
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00a      	beq.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a52e:	4b7f      	ldr	r3, [pc, #508]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a534:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	497b      	ldr	r1, [pc, #492]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a53e:	4313      	orrs	r3, r2
 800a540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d00a      	beq.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a550:	4b76      	ldr	r3, [pc, #472]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a556:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	4973      	ldr	r1, [pc, #460]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a560:	4313      	orrs	r3, r2
 800a562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a572:	4b6e      	ldr	r3, [pc, #440]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	496a      	ldr	r1, [pc, #424]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a582:	4313      	orrs	r3, r2
 800a584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00a      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a594:	4b65      	ldr	r3, [pc, #404]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a59a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a1b      	ldr	r3, [r3, #32]
 800a5a2:	4962      	ldr	r1, [pc, #392]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d00a      	beq.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5b6:	4b5d      	ldr	r3, [pc, #372]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c4:	4959      	ldr	r1, [pc, #356]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00a      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5d8:	4b54      	ldr	r3, [pc, #336]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a5de:	f023 0203 	bic.w	r2, r3, #3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5e6:	4951      	ldr	r1, [pc, #324]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5fa:	4b4c      	ldr	r3, [pc, #304]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a600:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a608:	4948      	ldr	r1, [pc, #288]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d015      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a61c:	4b43      	ldr	r3, [pc, #268]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a61e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a622:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a62a:	4940      	ldr	r1, [pc, #256]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a636:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a63a:	d105      	bne.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a63c:	4b3b      	ldr	r3, [pc, #236]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	4a3a      	ldr	r2, [pc, #232]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a646:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a650:	2b00      	cmp	r3, #0
 800a652:	d015      	beq.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a654:	4b35      	ldr	r3, [pc, #212]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a65a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a662:	4932      	ldr	r1, [pc, #200]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a664:	4313      	orrs	r3, r2
 800a666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a672:	d105      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a674:	4b2d      	ldr	r3, [pc, #180]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	4a2c      	ldr	r2, [pc, #176]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a67a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a67e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d015      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a68c:	4b27      	ldr	r3, [pc, #156]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a68e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a692:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69a:	4924      	ldr	r1, [pc, #144]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6aa:	d105      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6ac:	4b1f      	ldr	r3, [pc, #124]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	4a1e      	ldr	r2, [pc, #120]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d015      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6c4:	4b19      	ldr	r3, [pc, #100]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6d2:	4916      	ldr	r1, [pc, #88]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e2:	d105      	bne.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a6e4:	4b11      	ldr	r3, [pc, #68]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e6:	68db      	ldr	r3, [r3, #12]
 800a6e8:	4a10      	ldr	r2, [pc, #64]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d019      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70a:	4908      	ldr	r1, [pc, #32]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a70c:	4313      	orrs	r3, r2
 800a70e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a71a:	d109      	bne.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a71c:	4b03      	ldr	r3, [pc, #12]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	4a02      	ldr	r2, [pc, #8]	@ (800a72c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a726:	60d3      	str	r3, [r2, #12]
 800a728:	e002      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a72a:	bf00      	nop
 800a72c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d015      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a73c:	4b29      	ldr	r3, [pc, #164]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a73e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a742:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a74a:	4926      	ldr	r1, [pc, #152]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a74c:	4313      	orrs	r3, r2
 800a74e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a756:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a75a:	d105      	bne.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a75c:	4b21      	ldr	r3, [pc, #132]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a75e:	68db      	ldr	r3, [r3, #12]
 800a760:	4a20      	ldr	r2, [pc, #128]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a762:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a766:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d015      	beq.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a774:	4b1b      	ldr	r3, [pc, #108]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a782:	4918      	ldr	r1, [pc, #96]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a784:	4313      	orrs	r3, r2
 800a786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a792:	d105      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a794:	4b13      	ldr	r3, [pc, #76]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	4a12      	ldr	r2, [pc, #72]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a79a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a79e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d015      	beq.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a7ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ba:	490a      	ldr	r1, [pc, #40]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7ca:	d105      	bne.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7cc:	4b05      	ldr	r3, [pc, #20]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	4a04      	ldr	r2, [pc, #16]	@ (800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a7d8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3718      	adds	r7, #24
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	40021000 	.word	0x40021000

0800a7e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e054      	b.n	800a8a4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a800:	b2db      	uxtb	r3, r3
 800a802:	2b00      	cmp	r3, #0
 800a804:	d111      	bne.n	800a82a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fee2 	bl	800c5d8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a23      	ldr	r2, [pc, #140]	@ (800a8ac <HAL_TIM_Base_Init+0xc4>)
 800a820:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2202      	movs	r2, #2
 800a82e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	3304      	adds	r3, #4
 800a83a:	4619      	mov	r1, r3
 800a83c:	4610      	mov	r0, r2
 800a83e:	f001 fa2b 	bl	800bc98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	08006a91 	.word	0x08006a91

0800a8b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d001      	beq.n	800a8c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e04c      	b.n	800a962 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2202      	movs	r2, #2
 800a8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a26      	ldr	r2, [pc, #152]	@ (800a970 <HAL_TIM_Base_Start+0xc0>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d022      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8e2:	d01d      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a22      	ldr	r2, [pc, #136]	@ (800a974 <HAL_TIM_Base_Start+0xc4>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d018      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4a21      	ldr	r2, [pc, #132]	@ (800a978 <HAL_TIM_Base_Start+0xc8>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <HAL_TIM_Base_Start+0xcc>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d00e      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a1e      	ldr	r2, [pc, #120]	@ (800a980 <HAL_TIM_Base_Start+0xd0>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d009      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a1c      	ldr	r2, [pc, #112]	@ (800a984 <HAL_TIM_Base_Start+0xd4>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d004      	beq.n	800a920 <HAL_TIM_Base_Start+0x70>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a1b      	ldr	r2, [pc, #108]	@ (800a988 <HAL_TIM_Base_Start+0xd8>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d115      	bne.n	800a94c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689a      	ldr	r2, [r3, #8]
 800a926:	4b19      	ldr	r3, [pc, #100]	@ (800a98c <HAL_TIM_Base_Start+0xdc>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b06      	cmp	r3, #6
 800a930:	d015      	beq.n	800a95e <HAL_TIM_Base_Start+0xae>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a938:	d011      	beq.n	800a95e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	681a      	ldr	r2, [r3, #0]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f042 0201 	orr.w	r2, r2, #1
 800a948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a94a:	e008      	b.n	800a95e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f042 0201 	orr.w	r2, r2, #1
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	e000      	b.n	800a960 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a95e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3714      	adds	r7, #20
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	40012c00 	.word	0x40012c00
 800a974:	40000400 	.word	0x40000400
 800a978:	40000800 	.word	0x40000800
 800a97c:	40000c00 	.word	0x40000c00
 800a980:	40013400 	.word	0x40013400
 800a984:	40014000 	.word	0x40014000
 800a988:	40015000 	.word	0x40015000
 800a98c:	00010007 	.word	0x00010007

0800a990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d001      	beq.n	800a9a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e054      	b.n	800aa52 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2202      	movs	r2, #2
 800a9ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68da      	ldr	r2, [r3, #12]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f042 0201 	orr.w	r2, r2, #1
 800a9be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a26      	ldr	r2, [pc, #152]	@ (800aa60 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d022      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9d2:	d01d      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a22      	ldr	r2, [pc, #136]	@ (800aa64 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d018      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a21      	ldr	r2, [pc, #132]	@ (800aa68 <HAL_TIM_Base_Start_IT+0xd8>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d013      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a1f      	ldr	r2, [pc, #124]	@ (800aa6c <HAL_TIM_Base_Start_IT+0xdc>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d00e      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a1e      	ldr	r2, [pc, #120]	@ (800aa70 <HAL_TIM_Base_Start_IT+0xe0>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d009      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a1c      	ldr	r2, [pc, #112]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d004      	beq.n	800aa10 <HAL_TIM_Base_Start_IT+0x80>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a1b      	ldr	r2, [pc, #108]	@ (800aa78 <HAL_TIM_Base_Start_IT+0xe8>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d115      	bne.n	800aa3c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	689a      	ldr	r2, [r3, #8]
 800aa16:	4b19      	ldr	r3, [pc, #100]	@ (800aa7c <HAL_TIM_Base_Start_IT+0xec>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b06      	cmp	r3, #6
 800aa20:	d015      	beq.n	800aa4e <HAL_TIM_Base_Start_IT+0xbe>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa28:	d011      	beq.n	800aa4e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 0201 	orr.w	r2, r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa3a:	e008      	b.n	800aa4e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f042 0201 	orr.w	r2, r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]
 800aa4c:	e000      	b.n	800aa50 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3714      	adds	r7, #20
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr
 800aa5e:	bf00      	nop
 800aa60:	40012c00 	.word	0x40012c00
 800aa64:	40000400 	.word	0x40000400
 800aa68:	40000800 	.word	0x40000800
 800aa6c:	40000c00 	.word	0x40000c00
 800aa70:	40013400 	.word	0x40013400
 800aa74:	40014000 	.word	0x40014000
 800aa78:	40015000 	.word	0x40015000
 800aa7c:	00010007 	.word	0x00010007

0800aa80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d101      	bne.n	800aa92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e054      	b.n	800ab3c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d111      	bne.n	800aac2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f001 fd96 	bl	800c5d8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d102      	bne.n	800aaba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	4a23      	ldr	r2, [pc, #140]	@ (800ab44 <HAL_TIM_PWM_Init+0xc4>)
 800aab8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2202      	movs	r2, #2
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4619      	mov	r1, r3
 800aad4:	4610      	mov	r0, r2
 800aad6:	f001 f8df 	bl	800bc98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2201      	movs	r2, #1
 800ab0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2201      	movs	r2, #1
 800ab16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	08006a45 	.word	0x08006a45

0800ab48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d109      	bne.n	800ab6c <HAL_TIM_PWM_Start+0x24>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	bf14      	ite	ne
 800ab64:	2301      	movne	r3, #1
 800ab66:	2300      	moveq	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	e03c      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d109      	bne.n	800ab86 <HAL_TIM_PWM_Start+0x3e>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	bf14      	ite	ne
 800ab7e:	2301      	movne	r3, #1
 800ab80:	2300      	moveq	r3, #0
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	e02f      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	2b08      	cmp	r3, #8
 800ab8a:	d109      	bne.n	800aba0 <HAL_TIM_PWM_Start+0x58>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	bf14      	ite	ne
 800ab98:	2301      	movne	r3, #1
 800ab9a:	2300      	moveq	r3, #0
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	e022      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	2b0c      	cmp	r3, #12
 800aba4:	d109      	bne.n	800abba <HAL_TIM_PWM_Start+0x72>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b01      	cmp	r3, #1
 800abb0:	bf14      	ite	ne
 800abb2:	2301      	movne	r3, #1
 800abb4:	2300      	moveq	r3, #0
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	e015      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	2b10      	cmp	r3, #16
 800abbe:	d109      	bne.n	800abd4 <HAL_TIM_PWM_Start+0x8c>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	2b01      	cmp	r3, #1
 800abca:	bf14      	ite	ne
 800abcc:	2301      	movne	r3, #1
 800abce:	2300      	moveq	r3, #0
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	e008      	b.n	800abe6 <HAL_TIM_PWM_Start+0x9e>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	2b01      	cmp	r3, #1
 800abde:	bf14      	ite	ne
 800abe0:	2301      	movne	r3, #1
 800abe2:	2300      	moveq	r3, #0
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d001      	beq.n	800abee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e0a6      	b.n	800ad3c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_PWM_Start+0xb6>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2202      	movs	r2, #2
 800abf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abfc:	e023      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	2b04      	cmp	r3, #4
 800ac02:	d104      	bne.n	800ac0e <HAL_TIM_PWM_Start+0xc6>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2202      	movs	r2, #2
 800ac08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac0c:	e01b      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b08      	cmp	r3, #8
 800ac12:	d104      	bne.n	800ac1e <HAL_TIM_PWM_Start+0xd6>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac1c:	e013      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b0c      	cmp	r3, #12
 800ac22:	d104      	bne.n	800ac2e <HAL_TIM_PWM_Start+0xe6>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2202      	movs	r2, #2
 800ac28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac2c:	e00b      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	2b10      	cmp	r3, #16
 800ac32:	d104      	bne.n	800ac3e <HAL_TIM_PWM_Start+0xf6>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2202      	movs	r2, #2
 800ac38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac3c:	e003      	b.n	800ac46 <HAL_TIM_PWM_Start+0xfe>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2202      	movs	r2, #2
 800ac42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	6839      	ldr	r1, [r7, #0]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 fc9c 	bl	800c58c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a3a      	ldr	r2, [pc, #232]	@ (800ad44 <HAL_TIM_PWM_Start+0x1fc>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d018      	beq.n	800ac90 <HAL_TIM_PWM_Start+0x148>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a39      	ldr	r2, [pc, #228]	@ (800ad48 <HAL_TIM_PWM_Start+0x200>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d013      	beq.n	800ac90 <HAL_TIM_PWM_Start+0x148>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a37      	ldr	r2, [pc, #220]	@ (800ad4c <HAL_TIM_PWM_Start+0x204>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d00e      	beq.n	800ac90 <HAL_TIM_PWM_Start+0x148>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a36      	ldr	r2, [pc, #216]	@ (800ad50 <HAL_TIM_PWM_Start+0x208>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d009      	beq.n	800ac90 <HAL_TIM_PWM_Start+0x148>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a34      	ldr	r2, [pc, #208]	@ (800ad54 <HAL_TIM_PWM_Start+0x20c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d004      	beq.n	800ac90 <HAL_TIM_PWM_Start+0x148>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a33      	ldr	r2, [pc, #204]	@ (800ad58 <HAL_TIM_PWM_Start+0x210>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d101      	bne.n	800ac94 <HAL_TIM_PWM_Start+0x14c>
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <HAL_TIM_PWM_Start+0x14e>
 800ac94:	2300      	movs	r3, #0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d007      	beq.n	800acaa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aca8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a25      	ldr	r2, [pc, #148]	@ (800ad44 <HAL_TIM_PWM_Start+0x1fc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d022      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800acbc:	d01d      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a26      	ldr	r2, [pc, #152]	@ (800ad5c <HAL_TIM_PWM_Start+0x214>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d018      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a24      	ldr	r2, [pc, #144]	@ (800ad60 <HAL_TIM_PWM_Start+0x218>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a23      	ldr	r2, [pc, #140]	@ (800ad64 <HAL_TIM_PWM_Start+0x21c>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00e      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a19      	ldr	r2, [pc, #100]	@ (800ad48 <HAL_TIM_PWM_Start+0x200>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d009      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a18      	ldr	r2, [pc, #96]	@ (800ad4c <HAL_TIM_PWM_Start+0x204>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d004      	beq.n	800acfa <HAL_TIM_PWM_Start+0x1b2>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a18      	ldr	r2, [pc, #96]	@ (800ad58 <HAL_TIM_PWM_Start+0x210>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d115      	bne.n	800ad26 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	689a      	ldr	r2, [r3, #8]
 800ad00:	4b19      	ldr	r3, [pc, #100]	@ (800ad68 <HAL_TIM_PWM_Start+0x220>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b06      	cmp	r3, #6
 800ad0a:	d015      	beq.n	800ad38 <HAL_TIM_PWM_Start+0x1f0>
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad12:	d011      	beq.n	800ad38 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f042 0201 	orr.w	r2, r2, #1
 800ad22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad24:	e008      	b.n	800ad38 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f042 0201 	orr.w	r2, r2, #1
 800ad34:	601a      	str	r2, [r3, #0]
 800ad36:	e000      	b.n	800ad3a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3710      	adds	r7, #16
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}
 800ad44:	40012c00 	.word	0x40012c00
 800ad48:	40013400 	.word	0x40013400
 800ad4c:	40014000 	.word	0x40014000
 800ad50:	40014400 	.word	0x40014400
 800ad54:	40014800 	.word	0x40014800
 800ad58:	40015000 	.word	0x40015000
 800ad5c:	40000400 	.word	0x40000400
 800ad60:	40000800 	.word	0x40000800
 800ad64:	40000c00 	.word	0x40000c00
 800ad68:	00010007 	.word	0x00010007

0800ad6c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	e04c      	b.n	800ae1a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d111      	bne.n	800adb0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f001 fc1f 	bl	800c5d8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a1f      	ldr	r2, [pc, #124]	@ (800ae24 <HAL_TIM_OnePulse_Init+0xb8>)
 800ada6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2202      	movs	r2, #2
 800adb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3304      	adds	r3, #4
 800adc0:	4619      	mov	r1, r3
 800adc2:	4610      	mov	r0, r2
 800adc4:	f000 ff68 	bl	800bc98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0208 	bic.w	r2, r2, #8
 800add6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6819      	ldr	r1, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
 800ae22:	bf00      	nop
 800ae24:	0800ae29 	.word	0x0800ae29

0800ae28 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b083      	sub	sp, #12
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr

0800ae3c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ae54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae64:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae66:	7bfb      	ldrb	r3, [r7, #15]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d108      	bne.n	800ae7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d105      	bne.n	800ae7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ae72:	7b7b      	ldrb	r3, [r7, #13]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d102      	bne.n	800ae7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ae78:	7b3b      	ldrb	r3, [r7, #12]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d001      	beq.n	800ae82 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e059      	b.n	800af36 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2202      	movs	r2, #2
 800ae86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2202      	movs	r2, #2
 800ae8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2202      	movs	r2, #2
 800ae96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2202      	movs	r2, #2
 800ae9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	68da      	ldr	r2, [r3, #12]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f042 0202 	orr.w	r2, r2, #2
 800aeb0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f042 0204 	orr.w	r2, r2, #4
 800aec0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	2201      	movs	r2, #1
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f001 fb5e 	bl	800c58c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2201      	movs	r2, #1
 800aed6:	2104      	movs	r1, #4
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 fb57 	bl	800c58c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a17      	ldr	r2, [pc, #92]	@ (800af40 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d018      	beq.n	800af1a <HAL_TIM_OnePulse_Start_IT+0xde>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a15      	ldr	r2, [pc, #84]	@ (800af44 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d013      	beq.n	800af1a <HAL_TIM_OnePulse_Start_IT+0xde>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a14      	ldr	r2, [pc, #80]	@ (800af48 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d00e      	beq.n	800af1a <HAL_TIM_OnePulse_Start_IT+0xde>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a12      	ldr	r2, [pc, #72]	@ (800af4c <HAL_TIM_OnePulse_Start_IT+0x110>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d009      	beq.n	800af1a <HAL_TIM_OnePulse_Start_IT+0xde>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a11      	ldr	r2, [pc, #68]	@ (800af50 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d004      	beq.n	800af1a <HAL_TIM_OnePulse_Start_IT+0xde>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a0f      	ldr	r2, [pc, #60]	@ (800af54 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d101      	bne.n	800af1e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800af1e:	2300      	movs	r3, #0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d007      	beq.n	800af34 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3710      	adds	r7, #16
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd80      	pop	{r7, pc}
 800af3e:	bf00      	nop
 800af40:	40012c00 	.word	0x40012c00
 800af44:	40013400 	.word	0x40013400
 800af48:	40014000 	.word	0x40014000
 800af4c:	40014400 	.word	0x40014400
 800af50:	40014800 	.word	0x40014800
 800af54:	40015000 	.word	0x40015000

0800af58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e0a2      	b.n	800b0b2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af72:	b2db      	uxtb	r3, r3
 800af74:	2b00      	cmp	r3, #0
 800af76:	d111      	bne.n	800af9c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 fb29 	bl	800c5d8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d102      	bne.n	800af94 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a4a      	ldr	r2, [pc, #296]	@ (800b0bc <HAL_TIM_Encoder_Init+0x164>)
 800af92:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	6812      	ldr	r2, [r2, #0]
 800afae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800afb2:	f023 0307 	bic.w	r3, r3, #7
 800afb6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	4619      	mov	r1, r3
 800afc2:	4610      	mov	r0, r2
 800afc4:	f000 fe68 	bl	800bc98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6a1b      	ldr	r3, [r3, #32]
 800afde:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	697a      	ldr	r2, [r7, #20]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aff0:	f023 0303 	bic.w	r3, r3, #3
 800aff4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	689a      	ldr	r2, [r3, #8]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	4313      	orrs	r3, r2
 800b002:	693a      	ldr	r2, [r7, #16]
 800b004:	4313      	orrs	r3, r2
 800b006:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b00e:	f023 030c 	bic.w	r3, r3, #12
 800b012:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b01a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	68da      	ldr	r2, [r3, #12]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	69db      	ldr	r3, [r3, #28]
 800b028:	021b      	lsls	r3, r3, #8
 800b02a:	4313      	orrs	r3, r2
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	4313      	orrs	r3, r2
 800b030:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	011a      	lsls	r2, r3, #4
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	6a1b      	ldr	r3, [r3, #32]
 800b03c:	031b      	lsls	r3, r3, #12
 800b03e:	4313      	orrs	r3, r2
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	4313      	orrs	r3, r2
 800b044:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b04c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b054:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	685a      	ldr	r2, [r3, #4]
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	011b      	lsls	r3, r3, #4
 800b060:	4313      	orrs	r3, r2
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	4313      	orrs	r3, r2
 800b066:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	697a      	ldr	r2, [r7, #20]
 800b06e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0b0:	2300      	movs	r3, #0
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3718      	adds	r7, #24
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	08006b39 	.word	0x08006b39

0800b0c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b084      	sub	sp, #16
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d110      	bne.n	800b112 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b0f0:	7bfb      	ldrb	r3, [r7, #15]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d102      	bne.n	800b0fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b0f6:	7b7b      	ldrb	r3, [r7, #13]
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d001      	beq.n	800b100 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e069      	b.n	800b1d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2202      	movs	r2, #2
 800b10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b110:	e031      	b.n	800b176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b04      	cmp	r3, #4
 800b116:	d110      	bne.n	800b13a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b118:	7bbb      	ldrb	r3, [r7, #14]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d102      	bne.n	800b124 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b11e:	7b3b      	ldrb	r3, [r7, #12]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d001      	beq.n	800b128 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e055      	b.n	800b1d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2202      	movs	r2, #2
 800b134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b138:	e01d      	b.n	800b176 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d108      	bne.n	800b152 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2b01      	cmp	r3, #1
 800b144:	d105      	bne.n	800b152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b146:	7b7b      	ldrb	r3, [r7, #13]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d102      	bne.n	800b152 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b14c:	7b3b      	ldrb	r3, [r7, #12]
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d001      	beq.n	800b156 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b152:	2301      	movs	r3, #1
 800b154:	e03e      	b.n	800b1d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2202      	movs	r2, #2
 800b15a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d003      	beq.n	800b184 <HAL_TIM_Encoder_Start+0xc4>
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d008      	beq.n	800b194 <HAL_TIM_Encoder_Start+0xd4>
 800b182:	e00f      	b.n	800b1a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2201      	movs	r2, #1
 800b18a:	2100      	movs	r1, #0
 800b18c:	4618      	mov	r0, r3
 800b18e:	f001 f9fd 	bl	800c58c <TIM_CCxChannelCmd>
      break;
 800b192:	e016      	b.n	800b1c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2201      	movs	r2, #1
 800b19a:	2104      	movs	r1, #4
 800b19c:	4618      	mov	r0, r3
 800b19e:	f001 f9f5 	bl	800c58c <TIM_CCxChannelCmd>
      break;
 800b1a2:	e00e      	b.n	800b1c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f001 f9ed 	bl	800c58c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	2104      	movs	r1, #4
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 f9e6 	bl	800c58c <TIM_CCxChannelCmd>
      break;
 800b1c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f042 0201 	orr.w	r2, r2, #1
 800b1d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	68db      	ldr	r3, [r3, #12]
 800b1ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f003 0302 	and.w	r3, r3, #2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d026      	beq.n	800b24c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d021      	beq.n	800b24c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f06f 0202 	mvn.w	r2, #2
 800b210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	f003 0303 	and.w	r3, r3, #3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d005      	beq.n	800b232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	4798      	blx	r3
 800b230:	e009      	b.n	800b246 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	f003 0304 	and.w	r3, r3, #4
 800b252:	2b00      	cmp	r3, #0
 800b254:	d026      	beq.n	800b2a4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	f003 0304 	and.w	r3, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d021      	beq.n	800b2a4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f06f 0204 	mvn.w	r2, #4
 800b268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2202      	movs	r2, #2
 800b26e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d005      	beq.n	800b28a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	4798      	blx	r3
 800b288:	e009      	b.n	800b29e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f003 0308 	and.w	r3, r3, #8
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d026      	beq.n	800b2fc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f003 0308 	and.w	r3, r3, #8
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d021      	beq.n	800b2fc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f06f 0208 	mvn.w	r2, #8
 800b2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2204      	movs	r2, #4
 800b2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f003 0303 	and.w	r3, r3, #3
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d005      	beq.n	800b2e2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	4798      	blx	r3
 800b2e0:	e009      	b.n	800b2f6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	f003 0310 	and.w	r3, r3, #16
 800b302:	2b00      	cmp	r3, #0
 800b304:	d026      	beq.n	800b354 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f003 0310 	and.w	r3, r3, #16
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d021      	beq.n	800b354 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f06f 0210 	mvn.w	r2, #16
 800b318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2208      	movs	r2, #8
 800b31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	69db      	ldr	r3, [r3, #28]
 800b326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d005      	beq.n	800b33a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	4798      	blx	r3
 800b338:	e009      	b.n	800b34e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2200      	movs	r2, #0
 800b352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f003 0301 	and.w	r3, r3, #1
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00e      	beq.n	800b37c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f003 0301 	and.w	r3, r3, #1
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f06f 0201 	mvn.w	r2, #1
 800b370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b382:	2b00      	cmp	r3, #0
 800b384:	d104      	bne.n	800b390 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00e      	beq.n	800b3ae <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b396:	2b00      	cmp	r3, #0
 800b398:	d009      	beq.n	800b3ae <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b3a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00e      	beq.n	800b3d6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00e      	beq.n	800b3fe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d009      	beq.n	800b3fe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b3f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00e      	beq.n	800b426 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f003 0320 	and.w	r3, r3, #32
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f06f 0220 	mvn.w	r2, #32
 800b41a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d00e      	beq.n	800b44e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d009      	beq.n	800b44e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00e      	beq.n	800b476 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d009      	beq.n	800b476 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00e      	beq.n	800b49e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b486:	2b00      	cmp	r3, #0
 800b488:	d009      	beq.n	800b49e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b492:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00e      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d009      	beq.n	800b4c6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b4ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b4c6:	bf00      	nop
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
	...

0800b4d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d101      	bne.n	800b4ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b4ea:	2302      	movs	r3, #2
 800b4ec:	e0ff      	b.n	800b6ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2b14      	cmp	r3, #20
 800b4fa:	f200 80f0 	bhi.w	800b6de <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b504 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b504:	0800b559 	.word	0x0800b559
 800b508:	0800b6df 	.word	0x0800b6df
 800b50c:	0800b6df 	.word	0x0800b6df
 800b510:	0800b6df 	.word	0x0800b6df
 800b514:	0800b599 	.word	0x0800b599
 800b518:	0800b6df 	.word	0x0800b6df
 800b51c:	0800b6df 	.word	0x0800b6df
 800b520:	0800b6df 	.word	0x0800b6df
 800b524:	0800b5db 	.word	0x0800b5db
 800b528:	0800b6df 	.word	0x0800b6df
 800b52c:	0800b6df 	.word	0x0800b6df
 800b530:	0800b6df 	.word	0x0800b6df
 800b534:	0800b61b 	.word	0x0800b61b
 800b538:	0800b6df 	.word	0x0800b6df
 800b53c:	0800b6df 	.word	0x0800b6df
 800b540:	0800b6df 	.word	0x0800b6df
 800b544:	0800b65d 	.word	0x0800b65d
 800b548:	0800b6df 	.word	0x0800b6df
 800b54c:	0800b6df 	.word	0x0800b6df
 800b550:	0800b6df 	.word	0x0800b6df
 800b554:	0800b69d 	.word	0x0800b69d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	68b9      	ldr	r1, [r7, #8]
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fc4e 	bl	800be00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	699a      	ldr	r2, [r3, #24]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f042 0208 	orr.w	r2, r2, #8
 800b572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	699a      	ldr	r2, [r3, #24]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0204 	bic.w	r2, r2, #4
 800b582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6999      	ldr	r1, [r3, #24]
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	691a      	ldr	r2, [r3, #16]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	619a      	str	r2, [r3, #24]
      break;
 800b596:	e0a5      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fcc8 	bl	800bf34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	699a      	ldr	r2, [r3, #24]
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	699a      	ldr	r2, [r3, #24]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b5c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6999      	ldr	r1, [r3, #24]
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	021a      	lsls	r2, r3, #8
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	430a      	orrs	r2, r1
 800b5d6:	619a      	str	r2, [r3, #24]
      break;
 800b5d8:	e084      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f000 fd3b 	bl	800c05c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69da      	ldr	r2, [r3, #28]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f042 0208 	orr.w	r2, r2, #8
 800b5f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	69da      	ldr	r2, [r3, #28]
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0204 	bic.w	r2, r2, #4
 800b604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	69d9      	ldr	r1, [r3, #28]
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	691a      	ldr	r2, [r3, #16]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	430a      	orrs	r2, r1
 800b616:	61da      	str	r2, [r3, #28]
      break;
 800b618:	e064      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	4618      	mov	r0, r3
 800b622:	f000 fdad 	bl	800c180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69da      	ldr	r2, [r3, #28]
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	69da      	ldr	r2, [r3, #28]
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	69d9      	ldr	r1, [r3, #28]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	021a      	lsls	r2, r3, #8
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	61da      	str	r2, [r3, #28]
      break;
 800b65a:	e043      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 fe20 	bl	800c2a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f042 0208 	orr.w	r2, r2, #8
 800b676:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f022 0204 	bic.w	r2, r2, #4
 800b686:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	691a      	ldr	r2, [r3, #16]
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b69a:	e023      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	68b9      	ldr	r1, [r7, #8]
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 fe6a 	bl	800c37c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	021a      	lsls	r2, r3, #8
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	430a      	orrs	r2, r1
 800b6da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b6dc:	e002      	b.n	800b6e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	75fb      	strb	r3, [r7, #23]
      break;
 800b6e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop

0800b6f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d101      	bne.n	800b714 <HAL_TIM_ConfigClockSource+0x1c>
 800b710:	2302      	movs	r3, #2
 800b712:	e0f6      	b.n	800b902 <HAL_TIM_ConfigClockSource+0x20a>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2202      	movs	r2, #2
 800b720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b732:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b73e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a6f      	ldr	r2, [pc, #444]	@ (800b90c <HAL_TIM_ConfigClockSource+0x214>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	f000 80c1 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b754:	4a6d      	ldr	r2, [pc, #436]	@ (800b90c <HAL_TIM_ConfigClockSource+0x214>)
 800b756:	4293      	cmp	r3, r2
 800b758:	f200 80c6 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b75c:	4a6c      	ldr	r2, [pc, #432]	@ (800b910 <HAL_TIM_ConfigClockSource+0x218>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	f000 80b9 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b764:	4a6a      	ldr	r2, [pc, #424]	@ (800b910 <HAL_TIM_ConfigClockSource+0x218>)
 800b766:	4293      	cmp	r3, r2
 800b768:	f200 80be 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b76c:	4a69      	ldr	r2, [pc, #420]	@ (800b914 <HAL_TIM_ConfigClockSource+0x21c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	f000 80b1 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b774:	4a67      	ldr	r2, [pc, #412]	@ (800b914 <HAL_TIM_ConfigClockSource+0x21c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	f200 80b6 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b77c:	4a66      	ldr	r2, [pc, #408]	@ (800b918 <HAL_TIM_ConfigClockSource+0x220>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	f000 80a9 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b784:	4a64      	ldr	r2, [pc, #400]	@ (800b918 <HAL_TIM_ConfigClockSource+0x220>)
 800b786:	4293      	cmp	r3, r2
 800b788:	f200 80ae 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b78c:	4a63      	ldr	r2, [pc, #396]	@ (800b91c <HAL_TIM_ConfigClockSource+0x224>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	f000 80a1 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b794:	4a61      	ldr	r2, [pc, #388]	@ (800b91c <HAL_TIM_ConfigClockSource+0x224>)
 800b796:	4293      	cmp	r3, r2
 800b798:	f200 80a6 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b79c:	4a60      	ldr	r2, [pc, #384]	@ (800b920 <HAL_TIM_ConfigClockSource+0x228>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	f000 8099 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b7a4:	4a5e      	ldr	r2, [pc, #376]	@ (800b920 <HAL_TIM_ConfigClockSource+0x228>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	f200 809e 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b7b0:	f000 8091 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b7b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b7b8:	f200 8096 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7c0:	f000 8089 	beq.w	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b7c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7c8:	f200 808e 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7d0:	d03e      	beq.n	800b850 <HAL_TIM_ConfigClockSource+0x158>
 800b7d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b7d6:	f200 8087 	bhi.w	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7de:	f000 8086 	beq.w	800b8ee <HAL_TIM_ConfigClockSource+0x1f6>
 800b7e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7e6:	d87f      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7e8:	2b70      	cmp	r3, #112	@ 0x70
 800b7ea:	d01a      	beq.n	800b822 <HAL_TIM_ConfigClockSource+0x12a>
 800b7ec:	2b70      	cmp	r3, #112	@ 0x70
 800b7ee:	d87b      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7f0:	2b60      	cmp	r3, #96	@ 0x60
 800b7f2:	d050      	beq.n	800b896 <HAL_TIM_ConfigClockSource+0x19e>
 800b7f4:	2b60      	cmp	r3, #96	@ 0x60
 800b7f6:	d877      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b7f8:	2b50      	cmp	r3, #80	@ 0x50
 800b7fa:	d03c      	beq.n	800b876 <HAL_TIM_ConfigClockSource+0x17e>
 800b7fc:	2b50      	cmp	r3, #80	@ 0x50
 800b7fe:	d873      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b800:	2b40      	cmp	r3, #64	@ 0x40
 800b802:	d058      	beq.n	800b8b6 <HAL_TIM_ConfigClockSource+0x1be>
 800b804:	2b40      	cmp	r3, #64	@ 0x40
 800b806:	d86f      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b808:	2b30      	cmp	r3, #48	@ 0x30
 800b80a:	d064      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b80c:	2b30      	cmp	r3, #48	@ 0x30
 800b80e:	d86b      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b810:	2b20      	cmp	r3, #32
 800b812:	d060      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b814:	2b20      	cmp	r3, #32
 800b816:	d867      	bhi.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d05c      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b81c:	2b10      	cmp	r3, #16
 800b81e:	d05a      	beq.n	800b8d6 <HAL_TIM_ConfigClockSource+0x1de>
 800b820:	e062      	b.n	800b8e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b832:	f000 fe8b 	bl	800c54c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	689b      	ldr	r3, [r3, #8]
 800b83c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	609a      	str	r2, [r3, #8]
      break;
 800b84e:	e04f      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b860:	f000 fe74 	bl	800c54c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b872:	609a      	str	r2, [r3, #8]
      break;
 800b874:	e03c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b882:	461a      	mov	r2, r3
 800b884:	f000 fde6 	bl	800c454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	2150      	movs	r1, #80	@ 0x50
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 fe3f 	bl	800c512 <TIM_ITRx_SetConfig>
      break;
 800b894:	e02c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f000 fe05 	bl	800c4b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2160      	movs	r1, #96	@ 0x60
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fe2f 	bl	800c512 <TIM_ITRx_SetConfig>
      break;
 800b8b4:	e01c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f000 fdc6 	bl	800c454 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2140      	movs	r1, #64	@ 0x40
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 fe1f 	bl	800c512 <TIM_ITRx_SetConfig>
      break;
 800b8d4:	e00c      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	4610      	mov	r0, r2
 800b8e2:	f000 fe16 	bl	800c512 <TIM_ITRx_SetConfig>
      break;
 800b8e6:	e003      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ec:	e000      	b.n	800b8f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800b8ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	00100070 	.word	0x00100070
 800b910:	00100060 	.word	0x00100060
 800b914:	00100050 	.word	0x00100050
 800b918:	00100040 	.word	0x00100040
 800b91c:	00100030 	.word	0x00100030
 800b920:	00100020 	.word	0x00100020

0800b924 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b92c:	bf00      	nop
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b083      	sub	sp, #12
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b9cc:	bf00      	nop
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr

0800b9d8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	60f8      	str	r0, [r7, #12]
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e14a      	b.n	800bc8a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	f040 80dd 	bne.w	800bbbc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	2b1f      	cmp	r3, #31
 800ba06:	f200 80d6 	bhi.w	800bbb6 <HAL_TIM_RegisterCallback+0x1de>
 800ba0a:	a201      	add	r2, pc, #4	@ (adr r2, 800ba10 <HAL_TIM_RegisterCallback+0x38>)
 800ba0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba10:	0800ba91 	.word	0x0800ba91
 800ba14:	0800ba99 	.word	0x0800ba99
 800ba18:	0800baa1 	.word	0x0800baa1
 800ba1c:	0800baa9 	.word	0x0800baa9
 800ba20:	0800bab1 	.word	0x0800bab1
 800ba24:	0800bab9 	.word	0x0800bab9
 800ba28:	0800bac1 	.word	0x0800bac1
 800ba2c:	0800bac9 	.word	0x0800bac9
 800ba30:	0800bad1 	.word	0x0800bad1
 800ba34:	0800bad9 	.word	0x0800bad9
 800ba38:	0800bae1 	.word	0x0800bae1
 800ba3c:	0800bae9 	.word	0x0800bae9
 800ba40:	0800baf1 	.word	0x0800baf1
 800ba44:	0800baf9 	.word	0x0800baf9
 800ba48:	0800bb03 	.word	0x0800bb03
 800ba4c:	0800bb0d 	.word	0x0800bb0d
 800ba50:	0800bb17 	.word	0x0800bb17
 800ba54:	0800bb21 	.word	0x0800bb21
 800ba58:	0800bb2b 	.word	0x0800bb2b
 800ba5c:	0800bb35 	.word	0x0800bb35
 800ba60:	0800bb3f 	.word	0x0800bb3f
 800ba64:	0800bb49 	.word	0x0800bb49
 800ba68:	0800bb53 	.word	0x0800bb53
 800ba6c:	0800bb5d 	.word	0x0800bb5d
 800ba70:	0800bb67 	.word	0x0800bb67
 800ba74:	0800bb71 	.word	0x0800bb71
 800ba78:	0800bb7b 	.word	0x0800bb7b
 800ba7c:	0800bb85 	.word	0x0800bb85
 800ba80:	0800bb8f 	.word	0x0800bb8f
 800ba84:	0800bb99 	.word	0x0800bb99
 800ba88:	0800bba3 	.word	0x0800bba3
 800ba8c:	0800bbad 	.word	0x0800bbad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ba96:	e0f7      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ba9e:	e0f3      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800baa6:	e0ef      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800baae:	e0eb      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bab6:	e0e7      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800babe:	e0e3      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	687a      	ldr	r2, [r7, #4]
 800bac4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bac6:	e0df      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bace:	e0db      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bad6:	e0d7      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bade:	e0d3      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bae6:	e0cf      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800baee:	e0cb      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800baf6:	e0c7      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bb00:	e0c2      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800bb0a:	e0bd      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800bb14:	e0b8      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800bb1e:	e0b3      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800bb28:	e0ae      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bb32:	e0a9      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bb3c:	e0a4      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bb46:	e09f      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bb50:	e09a      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bb5a:	e095      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bb64:	e090      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bb6e:	e08b      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bb78:	e086      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bb82:	e081      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bb8c:	e07c      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bb96:	e077      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800bba0:	e072      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bbaa:	e06d      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bbb4:	e068      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	75fb      	strb	r3, [r7, #23]
        break;
 800bbba:	e065      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d15d      	bne.n	800bc84 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800bbc8:	7afb      	ldrb	r3, [r7, #11]
 800bbca:	2b0d      	cmp	r3, #13
 800bbcc:	d857      	bhi.n	800bc7e <HAL_TIM_RegisterCallback+0x2a6>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <HAL_TIM_RegisterCallback+0x1fc>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bc0d 	.word	0x0800bc0d
 800bbd8:	0800bc15 	.word	0x0800bc15
 800bbdc:	0800bc1d 	.word	0x0800bc1d
 800bbe0:	0800bc25 	.word	0x0800bc25
 800bbe4:	0800bc2d 	.word	0x0800bc2d
 800bbe8:	0800bc35 	.word	0x0800bc35
 800bbec:	0800bc3d 	.word	0x0800bc3d
 800bbf0:	0800bc45 	.word	0x0800bc45
 800bbf4:	0800bc4d 	.word	0x0800bc4d
 800bbf8:	0800bc55 	.word	0x0800bc55
 800bbfc:	0800bc5d 	.word	0x0800bc5d
 800bc00:	0800bc65 	.word	0x0800bc65
 800bc04:	0800bc6d 	.word	0x0800bc6d
 800bc08:	0800bc75 	.word	0x0800bc75
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bc12:	e039      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bc1a:	e035      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bc22:	e031      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bc2a:	e02d      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bc32:	e029      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bc3a:	e025      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bc42:	e021      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bc4a:	e01d      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	687a      	ldr	r2, [r7, #4]
 800bc50:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bc52:	e019      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bc5a:	e015      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bc62:	e011      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	687a      	ldr	r2, [r7, #4]
 800bc68:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bc6a:	e00d      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bc72:	e009      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	687a      	ldr	r2, [r7, #4]
 800bc78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bc7c:	e004      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	75fb      	strb	r3, [r7, #23]
        break;
 800bc82:	e001      	b.n	800bc88 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bc88:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	371c      	adds	r7, #28
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop

0800bc98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a4c      	ldr	r2, [pc, #304]	@ (800bddc <TIM_Base_SetConfig+0x144>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d017      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcb6:	d013      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a49      	ldr	r2, [pc, #292]	@ (800bde0 <TIM_Base_SetConfig+0x148>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d00f      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a48      	ldr	r2, [pc, #288]	@ (800bde4 <TIM_Base_SetConfig+0x14c>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a47      	ldr	r2, [pc, #284]	@ (800bde8 <TIM_Base_SetConfig+0x150>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d007      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a46      	ldr	r2, [pc, #280]	@ (800bdec <TIM_Base_SetConfig+0x154>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_Base_SetConfig+0x48>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a45      	ldr	r2, [pc, #276]	@ (800bdf0 <TIM_Base_SetConfig+0x158>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d108      	bne.n	800bcf2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a39      	ldr	r2, [pc, #228]	@ (800bddc <TIM_Base_SetConfig+0x144>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d023      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd00:	d01f      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a36      	ldr	r2, [pc, #216]	@ (800bde0 <TIM_Base_SetConfig+0x148>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d01b      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a35      	ldr	r2, [pc, #212]	@ (800bde4 <TIM_Base_SetConfig+0x14c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d017      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a34      	ldr	r2, [pc, #208]	@ (800bde8 <TIM_Base_SetConfig+0x150>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d013      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a33      	ldr	r2, [pc, #204]	@ (800bdec <TIM_Base_SetConfig+0x154>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d00f      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a33      	ldr	r2, [pc, #204]	@ (800bdf4 <TIM_Base_SetConfig+0x15c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d00b      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a32      	ldr	r2, [pc, #200]	@ (800bdf8 <TIM_Base_SetConfig+0x160>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d007      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a31      	ldr	r2, [pc, #196]	@ (800bdfc <TIM_Base_SetConfig+0x164>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d003      	beq.n	800bd42 <TIM_Base_SetConfig+0xaa>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a2c      	ldr	r2, [pc, #176]	@ (800bdf0 <TIM_Base_SetConfig+0x158>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d108      	bne.n	800bd54 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	4313      	orrs	r3, r2
 800bd52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	695b      	ldr	r3, [r3, #20]
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	68fa      	ldr	r2, [r7, #12]
 800bd66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	689a      	ldr	r2, [r3, #8]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	681a      	ldr	r2, [r3, #0]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	4a18      	ldr	r2, [pc, #96]	@ (800bddc <TIM_Base_SetConfig+0x144>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d013      	beq.n	800bda8 <TIM_Base_SetConfig+0x110>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	4a1a      	ldr	r2, [pc, #104]	@ (800bdec <TIM_Base_SetConfig+0x154>)
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d00f      	beq.n	800bda8 <TIM_Base_SetConfig+0x110>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a1a      	ldr	r2, [pc, #104]	@ (800bdf4 <TIM_Base_SetConfig+0x15c>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00b      	beq.n	800bda8 <TIM_Base_SetConfig+0x110>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a19      	ldr	r2, [pc, #100]	@ (800bdf8 <TIM_Base_SetConfig+0x160>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_Base_SetConfig+0x110>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a18      	ldr	r2, [pc, #96]	@ (800bdfc <TIM_Base_SetConfig+0x164>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_Base_SetConfig+0x110>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a13      	ldr	r2, [pc, #76]	@ (800bdf0 <TIM_Base_SetConfig+0x158>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d103      	bne.n	800bdb0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f003 0301 	and.w	r3, r3, #1
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d105      	bne.n	800bdce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	f023 0201 	bic.w	r2, r3, #1
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	611a      	str	r2, [r3, #16]
  }
}
 800bdce:	bf00      	nop
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	40012c00 	.word	0x40012c00
 800bde0:	40000400 	.word	0x40000400
 800bde4:	40000800 	.word	0x40000800
 800bde8:	40000c00 	.word	0x40000c00
 800bdec:	40013400 	.word	0x40013400
 800bdf0:	40015000 	.word	0x40015000
 800bdf4:	40014000 	.word	0x40014000
 800bdf8:	40014400 	.word	0x40014400
 800bdfc:	40014800 	.word	0x40014800

0800be00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a1b      	ldr	r3, [r3, #32]
 800be0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6a1b      	ldr	r3, [r3, #32]
 800be14:	f023 0201 	bic.w	r2, r3, #1
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	699b      	ldr	r3, [r3, #24]
 800be26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0303 	bic.w	r3, r3, #3
 800be3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f023 0302 	bic.w	r3, r3, #2
 800be4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	689b      	ldr	r3, [r3, #8]
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	4313      	orrs	r3, r2
 800be56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a30      	ldr	r2, [pc, #192]	@ (800bf1c <TIM_OC1_SetConfig+0x11c>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d013      	beq.n	800be88 <TIM_OC1_SetConfig+0x88>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a2f      	ldr	r2, [pc, #188]	@ (800bf20 <TIM_OC1_SetConfig+0x120>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d00f      	beq.n	800be88 <TIM_OC1_SetConfig+0x88>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a2e      	ldr	r2, [pc, #184]	@ (800bf24 <TIM_OC1_SetConfig+0x124>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00b      	beq.n	800be88 <TIM_OC1_SetConfig+0x88>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a2d      	ldr	r2, [pc, #180]	@ (800bf28 <TIM_OC1_SetConfig+0x128>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d007      	beq.n	800be88 <TIM_OC1_SetConfig+0x88>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a2c      	ldr	r2, [pc, #176]	@ (800bf2c <TIM_OC1_SetConfig+0x12c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d003      	beq.n	800be88 <TIM_OC1_SetConfig+0x88>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a2b      	ldr	r2, [pc, #172]	@ (800bf30 <TIM_OC1_SetConfig+0x130>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d10c      	bne.n	800bea2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f023 0308 	bic.w	r3, r3, #8
 800be8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	4313      	orrs	r3, r2
 800be98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f023 0304 	bic.w	r3, r3, #4
 800bea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf1c <TIM_OC1_SetConfig+0x11c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d013      	beq.n	800bed2 <TIM_OC1_SetConfig+0xd2>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a1c      	ldr	r2, [pc, #112]	@ (800bf20 <TIM_OC1_SetConfig+0x120>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d00f      	beq.n	800bed2 <TIM_OC1_SetConfig+0xd2>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a1b      	ldr	r2, [pc, #108]	@ (800bf24 <TIM_OC1_SetConfig+0x124>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d00b      	beq.n	800bed2 <TIM_OC1_SetConfig+0xd2>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a1a      	ldr	r2, [pc, #104]	@ (800bf28 <TIM_OC1_SetConfig+0x128>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d007      	beq.n	800bed2 <TIM_OC1_SetConfig+0xd2>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a19      	ldr	r2, [pc, #100]	@ (800bf2c <TIM_OC1_SetConfig+0x12c>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d003      	beq.n	800bed2 <TIM_OC1_SetConfig+0xd2>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a18      	ldr	r2, [pc, #96]	@ (800bf30 <TIM_OC1_SetConfig+0x130>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d111      	bne.n	800bef6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	695b      	ldr	r3, [r3, #20]
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	4313      	orrs	r3, r2
 800beea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	699b      	ldr	r3, [r3, #24]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	685a      	ldr	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	621a      	str	r2, [r3, #32]
}
 800bf10:	bf00      	nop
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr
 800bf1c:	40012c00 	.word	0x40012c00
 800bf20:	40013400 	.word	0x40013400
 800bf24:	40014000 	.word	0x40014000
 800bf28:	40014400 	.word	0x40014400
 800bf2c:	40014800 	.word	0x40014800
 800bf30:	40015000 	.word	0x40015000

0800bf34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6a1b      	ldr	r3, [r3, #32]
 800bf48:	f023 0210 	bic.w	r2, r3, #16
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bf62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	021b      	lsls	r3, r3, #8
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	f023 0320 	bic.w	r3, r3, #32
 800bf82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	011b      	lsls	r3, r3, #4
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a2c      	ldr	r2, [pc, #176]	@ (800c044 <TIM_OC2_SetConfig+0x110>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d007      	beq.n	800bfa8 <TIM_OC2_SetConfig+0x74>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a2b      	ldr	r2, [pc, #172]	@ (800c048 <TIM_OC2_SetConfig+0x114>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d003      	beq.n	800bfa8 <TIM_OC2_SetConfig+0x74>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	4a2a      	ldr	r2, [pc, #168]	@ (800c04c <TIM_OC2_SetConfig+0x118>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d10d      	bne.n	800bfc4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bfae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a1f      	ldr	r2, [pc, #124]	@ (800c044 <TIM_OC2_SetConfig+0x110>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d013      	beq.n	800bff4 <TIM_OC2_SetConfig+0xc0>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1e      	ldr	r2, [pc, #120]	@ (800c048 <TIM_OC2_SetConfig+0x114>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d00f      	beq.n	800bff4 <TIM_OC2_SetConfig+0xc0>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	4a1e      	ldr	r2, [pc, #120]	@ (800c050 <TIM_OC2_SetConfig+0x11c>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00b      	beq.n	800bff4 <TIM_OC2_SetConfig+0xc0>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	4a1d      	ldr	r2, [pc, #116]	@ (800c054 <TIM_OC2_SetConfig+0x120>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d007      	beq.n	800bff4 <TIM_OC2_SetConfig+0xc0>
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4a1c      	ldr	r2, [pc, #112]	@ (800c058 <TIM_OC2_SetConfig+0x124>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d003      	beq.n	800bff4 <TIM_OC2_SetConfig+0xc0>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4a17      	ldr	r2, [pc, #92]	@ (800c04c <TIM_OC2_SetConfig+0x118>)
 800bff0:	4293      	cmp	r3, r2
 800bff2:	d113      	bne.n	800c01c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	695b      	ldr	r3, [r3, #20]
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	693a      	ldr	r2, [r7, #16]
 800c018:	4313      	orrs	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	68fa      	ldr	r2, [r7, #12]
 800c026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	621a      	str	r2, [r3, #32]
}
 800c036:	bf00      	nop
 800c038:	371c      	adds	r7, #28
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	40012c00 	.word	0x40012c00
 800c048:	40013400 	.word	0x40013400
 800c04c:	40015000 	.word	0x40015000
 800c050:	40014000 	.word	0x40014000
 800c054:	40014400 	.word	0x40014400
 800c058:	40014800 	.word	0x40014800

0800c05c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	69db      	ldr	r3, [r3, #28]
 800c082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c08a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c08e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	f023 0303 	bic.w	r3, r3, #3
 800c096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	021b      	lsls	r3, r3, #8
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a2b      	ldr	r2, [pc, #172]	@ (800c168 <TIM_OC3_SetConfig+0x10c>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d007      	beq.n	800c0ce <TIM_OC3_SetConfig+0x72>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a2a      	ldr	r2, [pc, #168]	@ (800c16c <TIM_OC3_SetConfig+0x110>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d003      	beq.n	800c0ce <TIM_OC3_SetConfig+0x72>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a29      	ldr	r2, [pc, #164]	@ (800c170 <TIM_OC3_SetConfig+0x114>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d10d      	bne.n	800c0ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0ce:	697b      	ldr	r3, [r7, #20]
 800c0d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	021b      	lsls	r3, r3, #8
 800c0dc:	697a      	ldr	r2, [r7, #20]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4a1e      	ldr	r2, [pc, #120]	@ (800c168 <TIM_OC3_SetConfig+0x10c>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d013      	beq.n	800c11a <TIM_OC3_SetConfig+0xbe>
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4a1d      	ldr	r2, [pc, #116]	@ (800c16c <TIM_OC3_SetConfig+0x110>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d00f      	beq.n	800c11a <TIM_OC3_SetConfig+0xbe>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c174 <TIM_OC3_SetConfig+0x118>)
 800c0fe:	4293      	cmp	r3, r2
 800c100:	d00b      	beq.n	800c11a <TIM_OC3_SetConfig+0xbe>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	4a1c      	ldr	r2, [pc, #112]	@ (800c178 <TIM_OC3_SetConfig+0x11c>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d007      	beq.n	800c11a <TIM_OC3_SetConfig+0xbe>
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	4a1b      	ldr	r2, [pc, #108]	@ (800c17c <TIM_OC3_SetConfig+0x120>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d003      	beq.n	800c11a <TIM_OC3_SetConfig+0xbe>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a16      	ldr	r2, [pc, #88]	@ (800c170 <TIM_OC3_SetConfig+0x114>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d113      	bne.n	800c142 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	011b      	lsls	r3, r3, #4
 800c130:	693a      	ldr	r2, [r7, #16]
 800c132:	4313      	orrs	r3, r2
 800c134:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	4313      	orrs	r3, r2
 800c140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	685a      	ldr	r2, [r3, #4]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	697a      	ldr	r2, [r7, #20]
 800c15a:	621a      	str	r2, [r3, #32]
}
 800c15c:	bf00      	nop
 800c15e:	371c      	adds	r7, #28
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	40012c00 	.word	0x40012c00
 800c16c:	40013400 	.word	0x40013400
 800c170:	40015000 	.word	0x40015000
 800c174:	40014000 	.word	0x40014000
 800c178:	40014400 	.word	0x40014400
 800c17c:	40014800 	.word	0x40014800

0800c180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c180:	b480      	push	{r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6a1b      	ldr	r3, [r3, #32]
 800c194:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	69db      	ldr	r3, [r3, #28]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c1ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c1ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	021b      	lsls	r3, r3, #8
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c1ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	689b      	ldr	r3, [r3, #8]
 800c1d4:	031b      	lsls	r3, r3, #12
 800c1d6:	697a      	ldr	r2, [r7, #20]
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a2c      	ldr	r2, [pc, #176]	@ (800c290 <TIM_OC4_SetConfig+0x110>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d007      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x74>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a2b      	ldr	r2, [pc, #172]	@ (800c294 <TIM_OC4_SetConfig+0x114>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d003      	beq.n	800c1f4 <TIM_OC4_SetConfig+0x74>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a2a      	ldr	r2, [pc, #168]	@ (800c298 <TIM_OC4_SetConfig+0x118>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d10d      	bne.n	800c210 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	031b      	lsls	r3, r3, #12
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	4313      	orrs	r3, r2
 800c206:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c20e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	4a1f      	ldr	r2, [pc, #124]	@ (800c290 <TIM_OC4_SetConfig+0x110>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d013      	beq.n	800c240 <TIM_OC4_SetConfig+0xc0>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a1e      	ldr	r2, [pc, #120]	@ (800c294 <TIM_OC4_SetConfig+0x114>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00f      	beq.n	800c240 <TIM_OC4_SetConfig+0xc0>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a1e      	ldr	r2, [pc, #120]	@ (800c29c <TIM_OC4_SetConfig+0x11c>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d00b      	beq.n	800c240 <TIM_OC4_SetConfig+0xc0>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a1d      	ldr	r2, [pc, #116]	@ (800c2a0 <TIM_OC4_SetConfig+0x120>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d007      	beq.n	800c240 <TIM_OC4_SetConfig+0xc0>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a1c      	ldr	r2, [pc, #112]	@ (800c2a4 <TIM_OC4_SetConfig+0x124>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d003      	beq.n	800c240 <TIM_OC4_SetConfig+0xc0>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a17      	ldr	r2, [pc, #92]	@ (800c298 <TIM_OC4_SetConfig+0x118>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d113      	bne.n	800c268 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c246:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c24e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	695b      	ldr	r3, [r3, #20]
 800c254:	019b      	lsls	r3, r3, #6
 800c256:	693a      	ldr	r2, [r7, #16]
 800c258:	4313      	orrs	r3, r2
 800c25a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	699b      	ldr	r3, [r3, #24]
 800c260:	019b      	lsls	r3, r3, #6
 800c262:	693a      	ldr	r2, [r7, #16]
 800c264:	4313      	orrs	r3, r2
 800c266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	693a      	ldr	r2, [r7, #16]
 800c26c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	685a      	ldr	r2, [r3, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	621a      	str	r2, [r3, #32]
}
 800c282:	bf00      	nop
 800c284:	371c      	adds	r7, #28
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	40012c00 	.word	0x40012c00
 800c294:	40013400 	.word	0x40013400
 800c298:	40015000 	.word	0x40015000
 800c29c:	40014000 	.word	0x40014000
 800c2a0:	40014400 	.word	0x40014400
 800c2a4:	40014800 	.word	0x40014800

0800c2a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b087      	sub	sp, #28
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6a1b      	ldr	r3, [r3, #32]
 800c2b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a1b      	ldr	r3, [r3, #32]
 800c2bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c2ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	041b      	lsls	r3, r3, #16
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4a19      	ldr	r2, [pc, #100]	@ (800c364 <TIM_OC5_SetConfig+0xbc>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d013      	beq.n	800c32a <TIM_OC5_SetConfig+0x82>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a18      	ldr	r2, [pc, #96]	@ (800c368 <TIM_OC5_SetConfig+0xc0>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d00f      	beq.n	800c32a <TIM_OC5_SetConfig+0x82>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a17      	ldr	r2, [pc, #92]	@ (800c36c <TIM_OC5_SetConfig+0xc4>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d00b      	beq.n	800c32a <TIM_OC5_SetConfig+0x82>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a16      	ldr	r2, [pc, #88]	@ (800c370 <TIM_OC5_SetConfig+0xc8>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d007      	beq.n	800c32a <TIM_OC5_SetConfig+0x82>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a15      	ldr	r2, [pc, #84]	@ (800c374 <TIM_OC5_SetConfig+0xcc>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d003      	beq.n	800c32a <TIM_OC5_SetConfig+0x82>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a14      	ldr	r2, [pc, #80]	@ (800c378 <TIM_OC5_SetConfig+0xd0>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d109      	bne.n	800c33e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c330:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c332:	683b      	ldr	r3, [r7, #0]
 800c334:	695b      	ldr	r3, [r3, #20]
 800c336:	021b      	lsls	r3, r3, #8
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	697a      	ldr	r2, [r7, #20]
 800c342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	621a      	str	r2, [r3, #32]
}
 800c358:	bf00      	nop
 800c35a:	371c      	adds	r7, #28
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr
 800c364:	40012c00 	.word	0x40012c00
 800c368:	40013400 	.word	0x40013400
 800c36c:	40014000 	.word	0x40014000
 800c370:	40014400 	.word	0x40014400
 800c374:	40014800 	.word	0x40014800
 800c378:	40015000 	.word	0x40015000

0800c37c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b087      	sub	sp, #28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6a1b      	ldr	r3, [r3, #32]
 800c38a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a1b      	ldr	r3, [r3, #32]
 800c390:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	021b      	lsls	r3, r3, #8
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3bc:	693b      	ldr	r3, [r7, #16]
 800c3be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c3c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	051b      	lsls	r3, r3, #20
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a1a      	ldr	r2, [pc, #104]	@ (800c43c <TIM_OC6_SetConfig+0xc0>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d013      	beq.n	800c400 <TIM_OC6_SetConfig+0x84>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a19      	ldr	r2, [pc, #100]	@ (800c440 <TIM_OC6_SetConfig+0xc4>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d00f      	beq.n	800c400 <TIM_OC6_SetConfig+0x84>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	4a18      	ldr	r2, [pc, #96]	@ (800c444 <TIM_OC6_SetConfig+0xc8>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	d00b      	beq.n	800c400 <TIM_OC6_SetConfig+0x84>
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a17      	ldr	r2, [pc, #92]	@ (800c448 <TIM_OC6_SetConfig+0xcc>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d007      	beq.n	800c400 <TIM_OC6_SetConfig+0x84>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a16      	ldr	r2, [pc, #88]	@ (800c44c <TIM_OC6_SetConfig+0xd0>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d003      	beq.n	800c400 <TIM_OC6_SetConfig+0x84>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4a15      	ldr	r2, [pc, #84]	@ (800c450 <TIM_OC6_SetConfig+0xd4>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	d109      	bne.n	800c414 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	695b      	ldr	r3, [r3, #20]
 800c40c:	029b      	lsls	r3, r3, #10
 800c40e:	697a      	ldr	r2, [r7, #20]
 800c410:	4313      	orrs	r3, r2
 800c412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	697a      	ldr	r2, [r7, #20]
 800c418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68fa      	ldr	r2, [r7, #12]
 800c41e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	685a      	ldr	r2, [r3, #4]
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	693a      	ldr	r2, [r7, #16]
 800c42c:	621a      	str	r2, [r3, #32]
}
 800c42e:	bf00      	nop
 800c430:	371c      	adds	r7, #28
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	40012c00 	.word	0x40012c00
 800c440:	40013400 	.word	0x40013400
 800c444:	40014000 	.word	0x40014000
 800c448:	40014400 	.word	0x40014400
 800c44c:	40014800 	.word	0x40014800
 800c450:	40015000 	.word	0x40015000

0800c454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	6a1b      	ldr	r3, [r3, #32]
 800c464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6a1b      	ldr	r3, [r3, #32]
 800c46a:	f023 0201 	bic.w	r2, r3, #1
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	011b      	lsls	r3, r3, #4
 800c484:	693a      	ldr	r2, [r7, #16]
 800c486:	4313      	orrs	r3, r2
 800c488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f023 030a 	bic.w	r3, r3, #10
 800c490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c492:	697a      	ldr	r2, [r7, #20]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	4313      	orrs	r3, r2
 800c498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	621a      	str	r2, [r3, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr

0800c4b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b087      	sub	sp, #28
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	60f8      	str	r0, [r7, #12]
 800c4ba:	60b9      	str	r1, [r7, #8]
 800c4bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	f023 0210 	bic.w	r2, r3, #16
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	699b      	ldr	r3, [r3, #24]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c4dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	031b      	lsls	r3, r3, #12
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c4ee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	011b      	lsls	r3, r3, #4
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	693a      	ldr	r2, [r7, #16]
 800c4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	697a      	ldr	r2, [r7, #20]
 800c504:	621a      	str	r2, [r3, #32]
}
 800c506:	bf00      	nop
 800c508:	371c      	adds	r7, #28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr

0800c512 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c512:	b480      	push	{r7}
 800c514:	b085      	sub	sp, #20
 800c516:	af00      	add	r7, sp, #0
 800c518:	6078      	str	r0, [r7, #4]
 800c51a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	4313      	orrs	r3, r2
 800c534:	f043 0307 	orr.w	r3, r3, #7
 800c538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	68fa      	ldr	r2, [r7, #12]
 800c53e:	609a      	str	r2, [r3, #8]
}
 800c540:	bf00      	nop
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b087      	sub	sp, #28
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	021a      	lsls	r2, r3, #8
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	431a      	orrs	r2, r3
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	4313      	orrs	r3, r2
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	609a      	str	r2, [r3, #8]
}
 800c580:	bf00      	nop
 800c582:	371c      	adds	r7, #28
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b087      	sub	sp, #28
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f003 031f 	and.w	r3, r3, #31
 800c59e:	2201      	movs	r2, #1
 800c5a0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6a1a      	ldr	r2, [r3, #32]
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	43db      	mvns	r3, r3
 800c5ae:	401a      	ands	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6a1a      	ldr	r2, [r3, #32]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f003 031f 	and.w	r3, r3, #31
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c4:	431a      	orrs	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	621a      	str	r2, [r3, #32]
}
 800c5ca:	bf00      	nop
 800c5cc:	371c      	adds	r7, #28
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d4:	4770      	bx	lr
	...

0800c5d8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c5d8:	b480      	push	{r7}
 800c5da:	b083      	sub	sp, #12
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a26      	ldr	r2, [pc, #152]	@ (800c67c <TIM_ResetCallback+0xa4>)
 800c5e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	4a25      	ldr	r2, [pc, #148]	@ (800c680 <TIM_ResetCallback+0xa8>)
 800c5ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a24      	ldr	r2, [pc, #144]	@ (800c684 <TIM_ResetCallback+0xac>)
 800c5f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a23      	ldr	r2, [pc, #140]	@ (800c688 <TIM_ResetCallback+0xb0>)
 800c5fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a22      	ldr	r2, [pc, #136]	@ (800c68c <TIM_ResetCallback+0xb4>)
 800c604:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a21      	ldr	r2, [pc, #132]	@ (800c690 <TIM_ResetCallback+0xb8>)
 800c60c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	4a20      	ldr	r2, [pc, #128]	@ (800c694 <TIM_ResetCallback+0xbc>)
 800c614:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	4a1f      	ldr	r2, [pc, #124]	@ (800c698 <TIM_ResetCallback+0xc0>)
 800c61c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4a1e      	ldr	r2, [pc, #120]	@ (800c69c <TIM_ResetCallback+0xc4>)
 800c624:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a0 <TIM_ResetCallback+0xc8>)
 800c62c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a4 <TIM_ResetCallback+0xcc>)
 800c634:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a8 <TIM_ResetCallback+0xd0>)
 800c63c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a1a      	ldr	r2, [pc, #104]	@ (800c6ac <TIM_ResetCallback+0xd4>)
 800c644:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a19      	ldr	r2, [pc, #100]	@ (800c6b0 <TIM_ResetCallback+0xd8>)
 800c64c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a18      	ldr	r2, [pc, #96]	@ (800c6b4 <TIM_ResetCallback+0xdc>)
 800c654:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a17      	ldr	r2, [pc, #92]	@ (800c6b8 <TIM_ResetCallback+0xe0>)
 800c65c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a16      	ldr	r2, [pc, #88]	@ (800c6bc <TIM_ResetCallback+0xe4>)
 800c664:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a15      	ldr	r2, [pc, #84]	@ (800c6c0 <TIM_ResetCallback+0xe8>)
 800c66c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c670:	bf00      	nop
 800c672:	370c      	adds	r7, #12
 800c674:	46bd      	mov	sp, r7
 800c676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67a:	4770      	bx	lr
 800c67c:	08005621 	.word	0x08005621
 800c680:	0800b925 	.word	0x0800b925
 800c684:	0800b99d 	.word	0x0800b99d
 800c688:	0800b9b1 	.word	0x0800b9b1
 800c68c:	0800b94d 	.word	0x0800b94d
 800c690:	0800b961 	.word	0x0800b961
 800c694:	0800b939 	.word	0x0800b939
 800c698:	0800b975 	.word	0x0800b975
 800c69c:	0800b989 	.word	0x0800b989
 800c6a0:	0800b9c5 	.word	0x0800b9c5
 800c6a4:	0800c919 	.word	0x0800c919
 800c6a8:	0800c92d 	.word	0x0800c92d
 800c6ac:	0800c941 	.word	0x0800c941
 800c6b0:	0800c955 	.word	0x0800c955
 800c6b4:	0800c969 	.word	0x0800c969
 800c6b8:	0800c97d 	.word	0x0800c97d
 800c6bc:	0800c991 	.word	0x0800c991
 800c6c0:	0800c9a5 	.word	0x0800c9a5

0800c6c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d101      	bne.n	800c6dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6d8:	2302      	movs	r3, #2
 800c6da:	e074      	b.n	800c7c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2201      	movs	r2, #1
 800c6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	689b      	ldr	r3, [r3, #8]
 800c6fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a34      	ldr	r2, [pc, #208]	@ (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d009      	beq.n	800c71a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4a33      	ldr	r2, [pc, #204]	@ (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c70c:	4293      	cmp	r3, r2
 800c70e:	d004      	beq.n	800c71a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a31      	ldr	r2, [pc, #196]	@ (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d108      	bne.n	800c72c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c720:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a21      	ldr	r2, [pc, #132]	@ (800c7d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d022      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c75c:	d01d      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1f      	ldr	r2, [pc, #124]	@ (800c7e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d018      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a1d      	ldr	r2, [pc, #116]	@ (800c7e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d013      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a1c      	ldr	r2, [pc, #112]	@ (800c7e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d00e      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a15      	ldr	r2, [pc, #84]	@ (800c7d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d009      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d004      	beq.n	800c79a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4a11      	ldr	r2, [pc, #68]	@ (800c7dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d10c      	bne.n	800c7b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c7a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	68ba      	ldr	r2, [r7, #8]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	68ba      	ldr	r2, [r7, #8]
 800c7b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3714      	adds	r7, #20
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	40012c00 	.word	0x40012c00
 800c7d8:	40013400 	.word	0x40013400
 800c7dc:	40015000 	.word	0x40015000
 800c7e0:	40000400 	.word	0x40000400
 800c7e4:	40000800 	.word	0x40000800
 800c7e8:	40000c00 	.word	0x40000c00
 800c7ec:	40014000 	.word	0x40014000

0800c7f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c804:	2b01      	cmp	r3, #1
 800c806:	d101      	bne.n	800c80c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c808:	2302      	movs	r3, #2
 800c80a:	e078      	b.n	800c8fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4313      	orrs	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	4313      	orrs	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	695b      	ldr	r3, [r3, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c872:	4313      	orrs	r3, r2
 800c874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	041b      	lsls	r3, r3, #16
 800c882:	4313      	orrs	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	69db      	ldr	r3, [r3, #28]
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a1c      	ldr	r2, [pc, #112]	@ (800c90c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d009      	beq.n	800c8b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c910 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d004      	beq.n	800c8b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a19      	ldr	r2, [pc, #100]	@ (800c914 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d11c      	bne.n	800c8ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8bc:	051b      	lsls	r3, r3, #20
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	6a1b      	ldr	r3, [r3, #32]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3714      	adds	r7, #20
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	40012c00 	.word	0x40012c00
 800c910:	40013400 	.word	0x40013400
 800c914:	40015000 	.word	0x40015000

0800c918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c990:	b480      	push	{r7}
 800c992:	b083      	sub	sp, #12
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c998:	bf00      	nop
 800c99a:	370c      	adds	r7, #12
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr

0800c9a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d101      	bne.n	800c9ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e050      	b.n	800ca6c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d114      	bne.n	800c9fe <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fd5b 	bl	800d498 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d103      	bne.n	800c9f4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	4a21      	ldr	r2, [pc, #132]	@ (800ca74 <HAL_UART_Init+0xbc>)
 800c9f0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2224      	movs	r2, #36	@ 0x24
 800ca02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f022 0201 	bic.w	r2, r2, #1
 800ca14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d002      	beq.n	800ca24 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f888 	bl	800db34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f000 fd89 	bl	800d53c <UART_SetConfig>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d101      	bne.n	800ca34 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800ca30:	2301      	movs	r3, #1
 800ca32:	e01b      	b.n	800ca6c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	685a      	ldr	r2, [r3, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f042 0201 	orr.w	r2, r2, #1
 800ca62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 f907 	bl	800dc78 <UART_CheckIdleState>
 800ca6a:	4603      	mov	r3, r0
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	08006e8d 	.word	0x08006e8d

0800ca78 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	460b      	mov	r3, r1
 800ca82:	607a      	str	r2, [r7, #4]
 800ca84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d109      	bne.n	800caa4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ca96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800caa0:	2301      	movs	r3, #1
 800caa2:	e09c      	b.n	800cbde <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caaa:	2b20      	cmp	r3, #32
 800caac:	d16c      	bne.n	800cb88 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	2b0c      	cmp	r3, #12
 800cab2:	d85e      	bhi.n	800cb72 <HAL_UART_RegisterCallback+0xfa>
 800cab4:	a201      	add	r2, pc, #4	@ (adr r2, 800cabc <HAL_UART_RegisterCallback+0x44>)
 800cab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caba:	bf00      	nop
 800cabc:	0800caf1 	.word	0x0800caf1
 800cac0:	0800cafb 	.word	0x0800cafb
 800cac4:	0800cb05 	.word	0x0800cb05
 800cac8:	0800cb0f 	.word	0x0800cb0f
 800cacc:	0800cb19 	.word	0x0800cb19
 800cad0:	0800cb23 	.word	0x0800cb23
 800cad4:	0800cb2d 	.word	0x0800cb2d
 800cad8:	0800cb37 	.word	0x0800cb37
 800cadc:	0800cb41 	.word	0x0800cb41
 800cae0:	0800cb4b 	.word	0x0800cb4b
 800cae4:	0800cb55 	.word	0x0800cb55
 800cae8:	0800cb5f 	.word	0x0800cb5f
 800caec:	0800cb69 	.word	0x0800cb69
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800caf8:	e070      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800cb02:	e06b      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	687a      	ldr	r2, [r7, #4]
 800cb08:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800cb0c:	e066      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	687a      	ldr	r2, [r7, #4]
 800cb12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800cb16:	e061      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800cb20:	e05c      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800cb2a:	e057      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800cb34:	e052      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800cb3e:	e04d      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800cb48:	e048      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800cb52:	e043      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800cb5c:	e03e      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cb66:	e039      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cb70:	e034      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cb82:	2301      	movs	r3, #1
 800cb84:	75fb      	strb	r3, [r7, #23]
        break;
 800cb86:	e029      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d11a      	bne.n	800cbc8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800cb92:	7afb      	ldrb	r3, [r7, #11]
 800cb94:	2b0b      	cmp	r3, #11
 800cb96:	d002      	beq.n	800cb9e <HAL_UART_RegisterCallback+0x126>
 800cb98:	2b0c      	cmp	r3, #12
 800cb9a:	d005      	beq.n	800cba8 <HAL_UART_RegisterCallback+0x130>
 800cb9c:	e009      	b.n	800cbb2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cba6:	e019      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cbb0:	e014      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbb8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	75fb      	strb	r3, [r7, #23]
        break;
 800cbc6:	e009      	b.n	800cbdc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	371c      	adds	r7, #28
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop

0800cbec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b08a      	sub	sp, #40	@ 0x28
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cc00:	2b20      	cmp	r3, #32
 800cc02:	d137      	bne.n	800cc74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d002      	beq.n	800cc10 <HAL_UART_Receive_DMA+0x24>
 800cc0a:	88fb      	ldrh	r3, [r7, #6]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e030      	b.n	800cc76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a18      	ldr	r2, [pc, #96]	@ (800cc80 <HAL_UART_Receive_DMA+0x94>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d01f      	beq.n	800cc64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d018      	beq.n	800cc64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc50:	623b      	str	r3, [r7, #32]
 800cc52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	69f9      	ldr	r1, [r7, #28]
 800cc56:	6a3a      	ldr	r2, [r7, #32]
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e6      	bne.n	800cc32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	461a      	mov	r2, r3
 800cc68:	68b9      	ldr	r1, [r7, #8]
 800cc6a:	68f8      	ldr	r0, [r7, #12]
 800cc6c:	f001 f91c 	bl	800dea8 <UART_Start_Receive_DMA>
 800cc70:	4603      	mov	r3, r0
 800cc72:	e000      	b.n	800cc76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800cc74:	2302      	movs	r3, #2
  }
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3728      	adds	r7, #40	@ 0x28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	40008000 	.word	0x40008000

0800cc84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b0ba      	sub	sp, #232	@ 0xe8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	69db      	ldr	r3, [r3, #28]
 800cc92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ccaa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ccae:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ccb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d11b      	bne.n	800ccf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d015      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccd0:	f003 0320 	and.w	r3, r3, #32
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d009      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 8312 	beq.w	800d312 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	4798      	blx	r3
      }
      return;
 800ccf6:	e30c      	b.n	800d312 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ccf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	f000 8129 	beq.w	800cf54 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cd02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cd06:	4b90      	ldr	r3, [pc, #576]	@ (800cf48 <HAL_UART_IRQHandler+0x2c4>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d106      	bne.n	800cd1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cd0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cd12:	4b8e      	ldr	r3, [pc, #568]	@ (800cf4c <HAL_UART_IRQHandler+0x2c8>)
 800cd14:	4013      	ands	r3, r2
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f000 811c 	beq.w	800cf54 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cd1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd20:	f003 0301 	and.w	r3, r3, #1
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d011      	beq.n	800cd4c <HAL_UART_IRQHandler+0xc8>
 800cd28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00b      	beq.n	800cd4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	2201      	movs	r2, #1
 800cd3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd42:	f043 0201 	orr.w	r2, r3, #1
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd50:	f003 0302 	and.w	r3, r3, #2
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d011      	beq.n	800cd7c <HAL_UART_IRQHandler+0xf8>
 800cd58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	2202      	movs	r2, #2
 800cd6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd72:	f043 0204 	orr.w	r2, r3, #4
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cd7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd80:	f003 0304 	and.w	r3, r3, #4
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d011      	beq.n	800cdac <HAL_UART_IRQHandler+0x128>
 800cd88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd8c:	f003 0301 	and.w	r3, r3, #1
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d00b      	beq.n	800cdac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2204      	movs	r2, #4
 800cd9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cda2:	f043 0202 	orr.w	r2, r3, #2
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdb0:	f003 0308 	and.w	r3, r3, #8
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d017      	beq.n	800cde8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cdc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cdc8:	4b5f      	ldr	r3, [pc, #380]	@ (800cf48 <HAL_UART_IRQHandler+0x2c4>)
 800cdca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00b      	beq.n	800cde8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	2208      	movs	r2, #8
 800cdd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdde:	f043 0208 	orr.w	r2, r3, #8
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cde8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d012      	beq.n	800ce1a <HAL_UART_IRQHandler+0x196>
 800cdf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00c      	beq.n	800ce1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce10:	f043 0220 	orr.w	r2, r3, #32
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f000 8278 	beq.w	800d316 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce2a:	f003 0320 	and.w	r3, r3, #32
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d013      	beq.n	800ce5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ce32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce36:	f003 0320 	and.w	r3, r3, #32
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d105      	bne.n	800ce4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ce3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d007      	beq.n	800ce5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d003      	beq.n	800ce5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce6e:	2b40      	cmp	r3, #64	@ 0x40
 800ce70:	d005      	beq.n	800ce7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ce72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ce76:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d058      	beq.n	800cf30 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 f8f9 	bl	800e076 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	689b      	ldr	r3, [r3, #8]
 800ce8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce8e:	2b40      	cmp	r3, #64	@ 0x40
 800ce90:	d148      	bne.n	800cf24 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	3308      	adds	r3, #8
 800ce98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cea0:	e853 3f00 	ldrex	r3, [r3]
 800cea4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ceac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ceb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3308      	adds	r3, #8
 800ceba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cebe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ceca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cece:	e841 2300 	strex	r3, r2, [r1]
 800ced2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ced6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1d9      	bne.n	800ce92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d017      	beq.n	800cf18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ceee:	4a18      	ldr	r2, [pc, #96]	@ (800cf50 <HAL_UART_IRQHandler+0x2cc>)
 800cef0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fc f8c5 	bl	8009088 <HAL_DMA_Abort_IT>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d01f      	beq.n	800cf44 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800cf12:	4610      	mov	r0, r2
 800cf14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf16:	e015      	b.n	800cf44 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf22:	e00f      	b.n	800cf44 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf2e:	e009      	b.n	800cf44 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800cf42:	e1e8      	b.n	800d316 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf44:	bf00      	nop
    return;
 800cf46:	e1e6      	b.n	800d316 <HAL_UART_IRQHandler+0x692>
 800cf48:	10000001 	.word	0x10000001
 800cf4c:	04000120 	.word	0x04000120
 800cf50:	0800e341 	.word	0x0800e341

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	f040 8176 	bne.w	800d24a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cf5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf62:	f003 0310 	and.w	r3, r3, #16
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	f000 816f 	beq.w	800d24a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf70:	f003 0310 	and.w	r3, r3, #16
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f000 8168 	beq.w	800d24a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2210      	movs	r2, #16
 800cf80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf8c:	2b40      	cmp	r3, #64	@ 0x40
 800cf8e:	f040 80dc 	bne.w	800d14a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cfa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f000 80b1 	beq.w	800d10c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cfb0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	f080 80a9 	bcs.w	800d10c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfc0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0320 	and.w	r3, r3, #32
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	f040 8087 	bne.w	800d0e6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfe0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cfe4:	e853 3f00 	ldrex	r3, [r3]
 800cfe8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cfec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cff0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cff4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	461a      	mov	r2, r3
 800cffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d002:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d006:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d00a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d00e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d012:	e841 2300 	strex	r3, r2, [r1]
 800d016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d01a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1da      	bne.n	800cfd8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	3308      	adds	r3, #8
 800d028:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d02a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d02c:	e853 3f00 	ldrex	r3, [r3]
 800d030:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d032:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d034:	f023 0301 	bic.w	r3, r3, #1
 800d038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	3308      	adds	r3, #8
 800d042:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d046:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d04a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d04c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d04e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d052:	e841 2300 	strex	r3, r2, [r1]
 800d056:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d1e1      	bne.n	800d022 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3308      	adds	r3, #8
 800d064:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d066:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d068:	e853 3f00 	ldrex	r3, [r3]
 800d06c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d06e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d074:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3308      	adds	r3, #8
 800d07e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d082:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d084:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d088:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d08a:	e841 2300 	strex	r3, r2, [r1]
 800d08e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d090:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1e3      	bne.n	800d05e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2220      	movs	r2, #32
 800d09a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ac:	e853 3f00 	ldrex	r3, [r3]
 800d0b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0b4:	f023 0310 	bic.w	r3, r3, #16
 800d0b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d0c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0ce:	e841 2300 	strex	r3, r2, [r1]
 800d0d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d1e4      	bne.n	800d0a4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fb ff78 	bl	8008fd6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2202      	movs	r2, #2
 800d0ea:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d0f2:	687a      	ldr	r2, [r7, #4]
 800d0f4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800d0fe:	b292      	uxth	r2, r2
 800d100:	1a8a      	subs	r2, r1, r2
 800d102:	b292      	uxth	r2, r2
 800d104:	4611      	mov	r1, r2
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d10a:	e106      	b.n	800d31a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d112:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d116:	429a      	cmp	r2, r3
 800d118:	f040 80ff 	bne.w	800d31a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f003 0320 	and.w	r3, r3, #32
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	f040 80f5 	bne.w	800d31a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2202      	movs	r2, #2
 800d134:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d142:	4611      	mov	r1, r2
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	4798      	blx	r3
      return;
 800d148:	e0e7      	b.n	800d31a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d156:	b29b      	uxth	r3, r3
 800d158:	1ad3      	subs	r3, r2, r3
 800d15a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d164:	b29b      	uxth	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 80d9 	beq.w	800d31e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800d16c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d170:	2b00      	cmp	r3, #0
 800d172:	f000 80d4 	beq.w	800d31e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d186:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d18a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	461a      	mov	r2, r3
 800d194:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d198:	647b      	str	r3, [r7, #68]	@ 0x44
 800d19a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d19e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1a0:	e841 2300 	strex	r3, r2, [r1]
 800d1a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d1a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e4      	bne.n	800d176 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	3308      	adds	r3, #8
 800d1b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b6:	e853 3f00 	ldrex	r3, [r3]
 800d1ba:	623b      	str	r3, [r7, #32]
   return(result);
 800d1bc:	6a3b      	ldr	r3, [r7, #32]
 800d1be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d1c2:	f023 0301 	bic.w	r3, r3, #1
 800d1c6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	3308      	adds	r3, #8
 800d1d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d1d4:	633a      	str	r2, [r7, #48]	@ 0x30
 800d1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d1da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1dc:	e841 2300 	strex	r3, r2, [r1]
 800d1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d1e1      	bne.n	800d1ac <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2220      	movs	r2, #32
 800d1ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	e853 3f00 	ldrex	r3, [r3]
 800d208:	60fb      	str	r3, [r7, #12]
   return(result);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f023 0310 	bic.w	r3, r3, #16
 800d210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	461a      	mov	r2, r3
 800d21a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d21e:	61fb      	str	r3, [r7, #28]
 800d220:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d222:	69b9      	ldr	r1, [r7, #24]
 800d224:	69fa      	ldr	r2, [r7, #28]
 800d226:	e841 2300 	strex	r3, r2, [r1]
 800d22a:	617b      	str	r3, [r7, #20]
   return(result);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d1e4      	bne.n	800d1fc <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2202      	movs	r2, #2
 800d236:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d23e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d242:	4611      	mov	r1, r2
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d248:	e069      	b.n	800d31e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d24e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d252:	2b00      	cmp	r3, #0
 800d254:	d010      	beq.n	800d278 <HAL_UART_IRQHandler+0x5f4>
 800d256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d25a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d00a      	beq.n	800d278 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d26a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d276:	e055      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d27c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d280:	2b00      	cmp	r3, #0
 800d282:	d014      	beq.n	800d2ae <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d105      	bne.n	800d29c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d294:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d008      	beq.n	800d2ae <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d03e      	beq.n	800d322 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	4798      	blx	r3
    }
    return;
 800d2ac:	e039      	b.n	800d322 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d2ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d009      	beq.n	800d2ce <HAL_UART_IRQHandler+0x64a>
 800d2ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d003      	beq.n	800d2ce <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f001 f84e 	bl	800e368 <UART_EndTransmit_IT>
    return;
 800d2cc:	e02a      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d2ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d00b      	beq.n	800d2f2 <HAL_UART_IRQHandler+0x66e>
 800d2da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2de:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d2f0:	e018      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d012      	beq.n	800d324 <HAL_UART_IRQHandler+0x6a0>
 800d2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d302:	2b00      	cmp	r3, #0
 800d304:	da0e      	bge.n	800d324 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d310:	e008      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d312:	bf00      	nop
 800d314:	e006      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d316:	bf00      	nop
 800d318:	e004      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d31a:	bf00      	nop
 800d31c:	e002      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d31e:	bf00      	nop
 800d320:	e000      	b.n	800d324 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d322:	bf00      	nop
  }
}
 800d324:	37e8      	adds	r7, #232	@ 0xe8
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop

0800d32c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d334:	bf00      	nop
 800d336:	370c      	adds	r7, #12
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr

0800d340 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d340:	b480      	push	{r7}
 800d342:	b083      	sub	sp, #12
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d348:	bf00      	nop
 800d34a:	370c      	adds	r7, #12
 800d34c:	46bd      	mov	sp, r7
 800d34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d352:	4770      	bx	lr

0800d354 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d354:	b480      	push	{r7}
 800d356:	b083      	sub	sp, #12
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d35c:	bf00      	nop
 800d35e:	370c      	adds	r7, #12
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr

0800d368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d3ac:	bf00      	nop
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d3c4:	bf00      	nop
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800d3d0:	b480      	push	{r7}
 800d3d2:	b083      	sub	sp, #12
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a09      	ldr	r2, [pc, #36]	@ (800d404 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d009      	beq.n	800d3f8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	683a      	ldr	r2, [r7, #0]
 800d3f4:	430a      	orrs	r2, r1
 800d3f6:	615a      	str	r2, [r3, #20]
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	370c      	adds	r7, #12
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr
 800d404:	40008000 	.word	0x40008000

0800d408 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4a18      	ldr	r2, [pc, #96]	@ (800d478 <HAL_UART_EnableReceiverTimeout+0x70>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d027      	beq.n	800d46a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d420:	2b20      	cmp	r3, #32
 800d422:	d120      	bne.n	800d466 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d42a:	2b01      	cmp	r3, #1
 800d42c:	d101      	bne.n	800d432 <HAL_UART_EnableReceiverTimeout+0x2a>
 800d42e:	2302      	movs	r3, #2
 800d430:	e01c      	b.n	800d46c <HAL_UART_EnableReceiverTimeout+0x64>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2201      	movs	r2, #1
 800d436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2224      	movs	r2, #36	@ 0x24
 800d43e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	685a      	ldr	r2, [r3, #4]
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800d450:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2220      	movs	r2, #32
 800d456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2200      	movs	r2, #0
 800d45e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	e002      	b.n	800d46c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800d466:	2302      	movs	r3, #2
 800d468:	e000      	b.n	800d46c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
  }
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	40008000 	.word	0x40008000

0800d47c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr
	...

0800d498 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	4a1a      	ldr	r2, [pc, #104]	@ (800d50c <UART_InitCallbacksToDefault+0x74>)
 800d4a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a19      	ldr	r2, [pc, #100]	@ (800d510 <UART_InitCallbacksToDefault+0x78>)
 800d4ac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a18      	ldr	r2, [pc, #96]	@ (800d514 <UART_InitCallbacksToDefault+0x7c>)
 800d4b4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a17      	ldr	r2, [pc, #92]	@ (800d518 <UART_InitCallbacksToDefault+0x80>)
 800d4bc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a16      	ldr	r2, [pc, #88]	@ (800d51c <UART_InitCallbacksToDefault+0x84>)
 800d4c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4a15      	ldr	r2, [pc, #84]	@ (800d520 <UART_InitCallbacksToDefault+0x88>)
 800d4cc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4a14      	ldr	r2, [pc, #80]	@ (800d524 <UART_InitCallbacksToDefault+0x8c>)
 800d4d4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	4a13      	ldr	r2, [pc, #76]	@ (800d528 <UART_InitCallbacksToDefault+0x90>)
 800d4dc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	4a12      	ldr	r2, [pc, #72]	@ (800d52c <UART_InitCallbacksToDefault+0x94>)
 800d4e4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	4a11      	ldr	r2, [pc, #68]	@ (800d530 <UART_InitCallbacksToDefault+0x98>)
 800d4ec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a10      	ldr	r2, [pc, #64]	@ (800d534 <UART_InitCallbacksToDefault+0x9c>)
 800d4f4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	4a0f      	ldr	r2, [pc, #60]	@ (800d538 <UART_InitCallbacksToDefault+0xa0>)
 800d4fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d500:	bf00      	nop
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr
 800d50c:	0800d341 	.word	0x0800d341
 800d510:	0800d32d 	.word	0x0800d32d
 800d514:	0800d355 	.word	0x0800d355
 800d518:	0800560d 	.word	0x0800560d
 800d51c:	0800d369 	.word	0x0800d369
 800d520:	0800d37d 	.word	0x0800d37d
 800d524:	0800d391 	.word	0x0800d391
 800d528:	0800d3a5 	.word	0x0800d3a5
 800d52c:	0800e3c3 	.word	0x0800e3c3
 800d530:	0800e3d7 	.word	0x0800e3d7
 800d534:	0800e3eb 	.word	0x0800e3eb
 800d538:	0800d3b9 	.word	0x0800d3b9

0800d53c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d53c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d540:	b08c      	sub	sp, #48	@ 0x30
 800d542:	af00      	add	r7, sp, #0
 800d544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d546:	2300      	movs	r3, #0
 800d548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	689a      	ldr	r2, [r3, #8]
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	691b      	ldr	r3, [r3, #16]
 800d554:	431a      	orrs	r2, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	431a      	orrs	r2, r3
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	69db      	ldr	r3, [r3, #28]
 800d560:	4313      	orrs	r3, r2
 800d562:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	4baa      	ldr	r3, [pc, #680]	@ (800d814 <UART_SetConfig+0x2d8>)
 800d56c:	4013      	ands	r3, r2
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	6812      	ldr	r2, [r2, #0]
 800d572:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d574:	430b      	orrs	r3, r1
 800d576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	430a      	orrs	r2, r1
 800d58c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a9f      	ldr	r2, [pc, #636]	@ (800d818 <UART_SetConfig+0x2dc>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d004      	beq.n	800d5a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	6a1b      	ldr	r3, [r3, #32]
 800d5a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d5b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	6812      	ldr	r2, [r2, #0]
 800d5ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5c6:	f023 010f 	bic.w	r1, r3, #15
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	430a      	orrs	r2, r1
 800d5d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4a90      	ldr	r2, [pc, #576]	@ (800d81c <UART_SetConfig+0x2e0>)
 800d5dc:	4293      	cmp	r3, r2
 800d5de:	d125      	bne.n	800d62c <UART_SetConfig+0xf0>
 800d5e0:	4b8f      	ldr	r3, [pc, #572]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d5e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d5e6:	f003 0303 	and.w	r3, r3, #3
 800d5ea:	2b03      	cmp	r3, #3
 800d5ec:	d81a      	bhi.n	800d624 <UART_SetConfig+0xe8>
 800d5ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f4 <UART_SetConfig+0xb8>)
 800d5f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f4:	0800d605 	.word	0x0800d605
 800d5f8:	0800d615 	.word	0x0800d615
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	2301      	movs	r3, #1
 800d606:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d60a:	e116      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d60c:	2302      	movs	r3, #2
 800d60e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d612:	e112      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d614:	2304      	movs	r3, #4
 800d616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d61a:	e10e      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d61c:	2308      	movs	r3, #8
 800d61e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d622:	e10a      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d624:	2310      	movs	r3, #16
 800d626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d62a:	e106      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4a7c      	ldr	r2, [pc, #496]	@ (800d824 <UART_SetConfig+0x2e8>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d138      	bne.n	800d6a8 <UART_SetConfig+0x16c>
 800d636:	4b7a      	ldr	r3, [pc, #488]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d63c:	f003 030c 	and.w	r3, r3, #12
 800d640:	2b0c      	cmp	r3, #12
 800d642:	d82d      	bhi.n	800d6a0 <UART_SetConfig+0x164>
 800d644:	a201      	add	r2, pc, #4	@ (adr r2, 800d64c <UART_SetConfig+0x110>)
 800d646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d64a:	bf00      	nop
 800d64c:	0800d681 	.word	0x0800d681
 800d650:	0800d6a1 	.word	0x0800d6a1
 800d654:	0800d6a1 	.word	0x0800d6a1
 800d658:	0800d6a1 	.word	0x0800d6a1
 800d65c:	0800d691 	.word	0x0800d691
 800d660:	0800d6a1 	.word	0x0800d6a1
 800d664:	0800d6a1 	.word	0x0800d6a1
 800d668:	0800d6a1 	.word	0x0800d6a1
 800d66c:	0800d689 	.word	0x0800d689
 800d670:	0800d6a1 	.word	0x0800d6a1
 800d674:	0800d6a1 	.word	0x0800d6a1
 800d678:	0800d6a1 	.word	0x0800d6a1
 800d67c:	0800d699 	.word	0x0800d699
 800d680:	2300      	movs	r3, #0
 800d682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d686:	e0d8      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d688:	2302      	movs	r3, #2
 800d68a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d68e:	e0d4      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d690:	2304      	movs	r3, #4
 800d692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d696:	e0d0      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d698:	2308      	movs	r3, #8
 800d69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d69e:	e0cc      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6a0:	2310      	movs	r3, #16
 800d6a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6a6:	e0c8      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4a5e      	ldr	r2, [pc, #376]	@ (800d828 <UART_SetConfig+0x2ec>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d125      	bne.n	800d6fe <UART_SetConfig+0x1c2>
 800d6b2:	4b5b      	ldr	r3, [pc, #364]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d6b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d6bc:	2b30      	cmp	r3, #48	@ 0x30
 800d6be:	d016      	beq.n	800d6ee <UART_SetConfig+0x1b2>
 800d6c0:	2b30      	cmp	r3, #48	@ 0x30
 800d6c2:	d818      	bhi.n	800d6f6 <UART_SetConfig+0x1ba>
 800d6c4:	2b20      	cmp	r3, #32
 800d6c6:	d00a      	beq.n	800d6de <UART_SetConfig+0x1a2>
 800d6c8:	2b20      	cmp	r3, #32
 800d6ca:	d814      	bhi.n	800d6f6 <UART_SetConfig+0x1ba>
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d002      	beq.n	800d6d6 <UART_SetConfig+0x19a>
 800d6d0:	2b10      	cmp	r3, #16
 800d6d2:	d008      	beq.n	800d6e6 <UART_SetConfig+0x1aa>
 800d6d4:	e00f      	b.n	800d6f6 <UART_SetConfig+0x1ba>
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6dc:	e0ad      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6de:	2302      	movs	r3, #2
 800d6e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6e4:	e0a9      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6e6:	2304      	movs	r3, #4
 800d6e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6ec:	e0a5      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6ee:	2308      	movs	r3, #8
 800d6f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6f4:	e0a1      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6f6:	2310      	movs	r3, #16
 800d6f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d6fc:	e09d      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a4a      	ldr	r2, [pc, #296]	@ (800d82c <UART_SetConfig+0x2f0>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d125      	bne.n	800d754 <UART_SetConfig+0x218>
 800d708:	4b45      	ldr	r3, [pc, #276]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d70e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d712:	2bc0      	cmp	r3, #192	@ 0xc0
 800d714:	d016      	beq.n	800d744 <UART_SetConfig+0x208>
 800d716:	2bc0      	cmp	r3, #192	@ 0xc0
 800d718:	d818      	bhi.n	800d74c <UART_SetConfig+0x210>
 800d71a:	2b80      	cmp	r3, #128	@ 0x80
 800d71c:	d00a      	beq.n	800d734 <UART_SetConfig+0x1f8>
 800d71e:	2b80      	cmp	r3, #128	@ 0x80
 800d720:	d814      	bhi.n	800d74c <UART_SetConfig+0x210>
 800d722:	2b00      	cmp	r3, #0
 800d724:	d002      	beq.n	800d72c <UART_SetConfig+0x1f0>
 800d726:	2b40      	cmp	r3, #64	@ 0x40
 800d728:	d008      	beq.n	800d73c <UART_SetConfig+0x200>
 800d72a:	e00f      	b.n	800d74c <UART_SetConfig+0x210>
 800d72c:	2300      	movs	r3, #0
 800d72e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d732:	e082      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d734:	2302      	movs	r3, #2
 800d736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d73a:	e07e      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d73c:	2304      	movs	r3, #4
 800d73e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d742:	e07a      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d744:	2308      	movs	r3, #8
 800d746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d74a:	e076      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d74c:	2310      	movs	r3, #16
 800d74e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d752:	e072      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a35      	ldr	r2, [pc, #212]	@ (800d830 <UART_SetConfig+0x2f4>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d12a      	bne.n	800d7b4 <UART_SetConfig+0x278>
 800d75e:	4b30      	ldr	r3, [pc, #192]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d764:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d76c:	d01a      	beq.n	800d7a4 <UART_SetConfig+0x268>
 800d76e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d772:	d81b      	bhi.n	800d7ac <UART_SetConfig+0x270>
 800d774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d778:	d00c      	beq.n	800d794 <UART_SetConfig+0x258>
 800d77a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d77e:	d815      	bhi.n	800d7ac <UART_SetConfig+0x270>
 800d780:	2b00      	cmp	r3, #0
 800d782:	d003      	beq.n	800d78c <UART_SetConfig+0x250>
 800d784:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d788:	d008      	beq.n	800d79c <UART_SetConfig+0x260>
 800d78a:	e00f      	b.n	800d7ac <UART_SetConfig+0x270>
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d792:	e052      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d794:	2302      	movs	r3, #2
 800d796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d79a:	e04e      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d79c:	2304      	movs	r3, #4
 800d79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7a2:	e04a      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d7a4:	2308      	movs	r3, #8
 800d7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7aa:	e046      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d7ac:	2310      	movs	r3, #16
 800d7ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7b2:	e042      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a17      	ldr	r2, [pc, #92]	@ (800d818 <UART_SetConfig+0x2dc>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d13a      	bne.n	800d834 <UART_SetConfig+0x2f8>
 800d7be:	4b18      	ldr	r3, [pc, #96]	@ (800d820 <UART_SetConfig+0x2e4>)
 800d7c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d7c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d7cc:	d01a      	beq.n	800d804 <UART_SetConfig+0x2c8>
 800d7ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d7d2:	d81b      	bhi.n	800d80c <UART_SetConfig+0x2d0>
 800d7d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7d8:	d00c      	beq.n	800d7f4 <UART_SetConfig+0x2b8>
 800d7da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7de:	d815      	bhi.n	800d80c <UART_SetConfig+0x2d0>
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d003      	beq.n	800d7ec <UART_SetConfig+0x2b0>
 800d7e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7e8:	d008      	beq.n	800d7fc <UART_SetConfig+0x2c0>
 800d7ea:	e00f      	b.n	800d80c <UART_SetConfig+0x2d0>
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7f2:	e022      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d7f4:	2302      	movs	r3, #2
 800d7f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7fa:	e01e      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d7fc:	2304      	movs	r3, #4
 800d7fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d802:	e01a      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d804:	2308      	movs	r3, #8
 800d806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d80a:	e016      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d80c:	2310      	movs	r3, #16
 800d80e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d812:	e012      	b.n	800d83a <UART_SetConfig+0x2fe>
 800d814:	cfff69f3 	.word	0xcfff69f3
 800d818:	40008000 	.word	0x40008000
 800d81c:	40013800 	.word	0x40013800
 800d820:	40021000 	.word	0x40021000
 800d824:	40004400 	.word	0x40004400
 800d828:	40004800 	.word	0x40004800
 800d82c:	40004c00 	.word	0x40004c00
 800d830:	40005000 	.word	0x40005000
 800d834:	2310      	movs	r3, #16
 800d836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4aae      	ldr	r2, [pc, #696]	@ (800daf8 <UART_SetConfig+0x5bc>)
 800d840:	4293      	cmp	r3, r2
 800d842:	f040 8097 	bne.w	800d974 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d846:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d84a:	2b08      	cmp	r3, #8
 800d84c:	d823      	bhi.n	800d896 <UART_SetConfig+0x35a>
 800d84e:	a201      	add	r2, pc, #4	@ (adr r2, 800d854 <UART_SetConfig+0x318>)
 800d850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d854:	0800d879 	.word	0x0800d879
 800d858:	0800d897 	.word	0x0800d897
 800d85c:	0800d881 	.word	0x0800d881
 800d860:	0800d897 	.word	0x0800d897
 800d864:	0800d887 	.word	0x0800d887
 800d868:	0800d897 	.word	0x0800d897
 800d86c:	0800d897 	.word	0x0800d897
 800d870:	0800d897 	.word	0x0800d897
 800d874:	0800d88f 	.word	0x0800d88f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d878:	f7fc fcf6 	bl	800a268 <HAL_RCC_GetPCLK1Freq>
 800d87c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d87e:	e010      	b.n	800d8a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d880:	4b9e      	ldr	r3, [pc, #632]	@ (800dafc <UART_SetConfig+0x5c0>)
 800d882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d884:	e00d      	b.n	800d8a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d886:	f7fc fc81 	bl	800a18c <HAL_RCC_GetSysClockFreq>
 800d88a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d88c:	e009      	b.n	800d8a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d88e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d892:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d894:	e005      	b.n	800d8a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800d896:	2300      	movs	r3, #0
 800d898:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d89a:	2301      	movs	r3, #1
 800d89c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d8a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f000 8130 	beq.w	800db0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d8aa:	697b      	ldr	r3, [r7, #20]
 800d8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ae:	4a94      	ldr	r2, [pc, #592]	@ (800db00 <UART_SetConfig+0x5c4>)
 800d8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d8bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	4613      	mov	r3, r2
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	4413      	add	r3, r2
 800d8c8:	69ba      	ldr	r2, [r7, #24]
 800d8ca:	429a      	cmp	r2, r3
 800d8cc:	d305      	bcc.n	800d8da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d8d4:	69ba      	ldr	r2, [r7, #24]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d903      	bls.n	800d8e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d8e0:	e113      	b.n	800db0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	60bb      	str	r3, [r7, #8]
 800d8e8:	60fa      	str	r2, [r7, #12]
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ee:	4a84      	ldr	r2, [pc, #528]	@ (800db00 <UART_SetConfig+0x5c4>)
 800d8f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	603b      	str	r3, [r7, #0]
 800d8fa:	607a      	str	r2, [r7, #4]
 800d8fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d900:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d904:	f7f3 f976 	bl	8000bf4 <__aeabi_uldivmod>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4610      	mov	r0, r2
 800d90e:	4619      	mov	r1, r3
 800d910:	f04f 0200 	mov.w	r2, #0
 800d914:	f04f 0300 	mov.w	r3, #0
 800d918:	020b      	lsls	r3, r1, #8
 800d91a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d91e:	0202      	lsls	r2, r0, #8
 800d920:	6979      	ldr	r1, [r7, #20]
 800d922:	6849      	ldr	r1, [r1, #4]
 800d924:	0849      	lsrs	r1, r1, #1
 800d926:	2000      	movs	r0, #0
 800d928:	460c      	mov	r4, r1
 800d92a:	4605      	mov	r5, r0
 800d92c:	eb12 0804 	adds.w	r8, r2, r4
 800d930:	eb43 0905 	adc.w	r9, r3, r5
 800d934:	697b      	ldr	r3, [r7, #20]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	2200      	movs	r2, #0
 800d93a:	469a      	mov	sl, r3
 800d93c:	4693      	mov	fp, r2
 800d93e:	4652      	mov	r2, sl
 800d940:	465b      	mov	r3, fp
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	f7f3 f955 	bl	8000bf4 <__aeabi_uldivmod>
 800d94a:	4602      	mov	r2, r0
 800d94c:	460b      	mov	r3, r1
 800d94e:	4613      	mov	r3, r2
 800d950:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d952:	6a3b      	ldr	r3, [r7, #32]
 800d954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d958:	d308      	bcc.n	800d96c <UART_SetConfig+0x430>
 800d95a:	6a3b      	ldr	r3, [r7, #32]
 800d95c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d960:	d204      	bcs.n	800d96c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	6a3a      	ldr	r2, [r7, #32]
 800d968:	60da      	str	r2, [r3, #12]
 800d96a:	e0ce      	b.n	800db0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d96c:	2301      	movs	r3, #1
 800d96e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d972:	e0ca      	b.n	800db0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d974:	697b      	ldr	r3, [r7, #20]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d97c:	d166      	bne.n	800da4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d97e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d982:	2b08      	cmp	r3, #8
 800d984:	d827      	bhi.n	800d9d6 <UART_SetConfig+0x49a>
 800d986:	a201      	add	r2, pc, #4	@ (adr r2, 800d98c <UART_SetConfig+0x450>)
 800d988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d98c:	0800d9b1 	.word	0x0800d9b1
 800d990:	0800d9b9 	.word	0x0800d9b9
 800d994:	0800d9c1 	.word	0x0800d9c1
 800d998:	0800d9d7 	.word	0x0800d9d7
 800d99c:	0800d9c7 	.word	0x0800d9c7
 800d9a0:	0800d9d7 	.word	0x0800d9d7
 800d9a4:	0800d9d7 	.word	0x0800d9d7
 800d9a8:	0800d9d7 	.word	0x0800d9d7
 800d9ac:	0800d9cf 	.word	0x0800d9cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d9b0:	f7fc fc5a 	bl	800a268 <HAL_RCC_GetPCLK1Freq>
 800d9b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d9b6:	e014      	b.n	800d9e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d9b8:	f7fc fc6c 	bl	800a294 <HAL_RCC_GetPCLK2Freq>
 800d9bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d9be:	e010      	b.n	800d9e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d9c0:	4b4e      	ldr	r3, [pc, #312]	@ (800dafc <UART_SetConfig+0x5c0>)
 800d9c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d9c4:	e00d      	b.n	800d9e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d9c6:	f7fc fbe1 	bl	800a18c <HAL_RCC_GetSysClockFreq>
 800d9ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d9cc:	e009      	b.n	800d9e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d9ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d9d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d9d4:	e005      	b.n	800d9e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d9e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f000 8090 	beq.w	800db0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9ea:	697b      	ldr	r3, [r7, #20]
 800d9ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ee:	4a44      	ldr	r2, [pc, #272]	@ (800db00 <UART_SetConfig+0x5c4>)
 800d9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9fc:	005a      	lsls	r2, r3, #1
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	085b      	lsrs	r3, r3, #1
 800da04:	441a      	add	r2, r3
 800da06:	697b      	ldr	r3, [r7, #20]
 800da08:	685b      	ldr	r3, [r3, #4]
 800da0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da10:	6a3b      	ldr	r3, [r7, #32]
 800da12:	2b0f      	cmp	r3, #15
 800da14:	d916      	bls.n	800da44 <UART_SetConfig+0x508>
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da1c:	d212      	bcs.n	800da44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800da1e:	6a3b      	ldr	r3, [r7, #32]
 800da20:	b29b      	uxth	r3, r3
 800da22:	f023 030f 	bic.w	r3, r3, #15
 800da26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800da28:	6a3b      	ldr	r3, [r7, #32]
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	b29b      	uxth	r3, r3
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	b29a      	uxth	r2, r3
 800da34:	8bfb      	ldrh	r3, [r7, #30]
 800da36:	4313      	orrs	r3, r2
 800da38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	8bfa      	ldrh	r2, [r7, #30]
 800da40:	60da      	str	r2, [r3, #12]
 800da42:	e062      	b.n	800db0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800da4a:	e05e      	b.n	800db0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800da50:	2b08      	cmp	r3, #8
 800da52:	d828      	bhi.n	800daa6 <UART_SetConfig+0x56a>
 800da54:	a201      	add	r2, pc, #4	@ (adr r2, 800da5c <UART_SetConfig+0x520>)
 800da56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da5a:	bf00      	nop
 800da5c:	0800da81 	.word	0x0800da81
 800da60:	0800da89 	.word	0x0800da89
 800da64:	0800da91 	.word	0x0800da91
 800da68:	0800daa7 	.word	0x0800daa7
 800da6c:	0800da97 	.word	0x0800da97
 800da70:	0800daa7 	.word	0x0800daa7
 800da74:	0800daa7 	.word	0x0800daa7
 800da78:	0800daa7 	.word	0x0800daa7
 800da7c:	0800da9f 	.word	0x0800da9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da80:	f7fc fbf2 	bl	800a268 <HAL_RCC_GetPCLK1Freq>
 800da84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da86:	e014      	b.n	800dab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da88:	f7fc fc04 	bl	800a294 <HAL_RCC_GetPCLK2Freq>
 800da8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da8e:	e010      	b.n	800dab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da90:	4b1a      	ldr	r3, [pc, #104]	@ (800dafc <UART_SetConfig+0x5c0>)
 800da92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800da94:	e00d      	b.n	800dab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da96:	f7fc fb79 	bl	800a18c <HAL_RCC_GetSysClockFreq>
 800da9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da9c:	e009      	b.n	800dab2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800daa4:	e005      	b.n	800dab2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800daa6:	2300      	movs	r3, #0
 800daa8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dab0:	bf00      	nop
    }

    if (pclk != 0U)
 800dab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d028      	beq.n	800db0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dabc:	4a10      	ldr	r2, [pc, #64]	@ (800db00 <UART_SetConfig+0x5c4>)
 800dabe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dac2:	461a      	mov	r2, r3
 800dac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac6:	fbb3 f2f2 	udiv	r2, r3, r2
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	085b      	lsrs	r3, r3, #1
 800dad0:	441a      	add	r2, r3
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dada:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dadc:	6a3b      	ldr	r3, [r7, #32]
 800dade:	2b0f      	cmp	r3, #15
 800dae0:	d910      	bls.n	800db04 <UART_SetConfig+0x5c8>
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dae8:	d20c      	bcs.n	800db04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800daea:	6a3b      	ldr	r3, [r7, #32]
 800daec:	b29a      	uxth	r2, r3
 800daee:	697b      	ldr	r3, [r7, #20]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	60da      	str	r2, [r3, #12]
 800daf4:	e009      	b.n	800db0a <UART_SetConfig+0x5ce>
 800daf6:	bf00      	nop
 800daf8:	40008000 	.word	0x40008000
 800dafc:	00f42400 	.word	0x00f42400
 800db00:	08010728 	.word	0x08010728
      }
      else
      {
        ret = HAL_ERROR;
 800db04:	2301      	movs	r3, #1
 800db06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800db12:	697b      	ldr	r3, [r7, #20]
 800db14:	2201      	movs	r2, #1
 800db16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	2200      	movs	r2, #0
 800db1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	2200      	movs	r2, #0
 800db24:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800db26:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3730      	adds	r7, #48	@ 0x30
 800db2e:	46bd      	mov	sp, r7
 800db30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db40:	f003 0308 	and.w	r3, r3, #8
 800db44:	2b00      	cmp	r3, #0
 800db46:	d00a      	beq.n	800db5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	430a      	orrs	r2, r1
 800db5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d00a      	beq.n	800db80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	430a      	orrs	r2, r1
 800db7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db84:	f003 0302 	and.w	r3, r3, #2
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d00a      	beq.n	800dba2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	430a      	orrs	r2, r1
 800dba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba6:	f003 0304 	and.w	r3, r3, #4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	430a      	orrs	r2, r1
 800dbc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbea:	f003 0320 	and.w	r3, r3, #32
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00a      	beq.n	800dc08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	430a      	orrs	r2, r1
 800dc06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d01a      	beq.n	800dc4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	430a      	orrs	r2, r1
 800dc28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc32:	d10a      	bne.n	800dc4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	430a      	orrs	r2, r1
 800dc48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d00a      	beq.n	800dc6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	685b      	ldr	r3, [r3, #4]
 800dc5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	430a      	orrs	r2, r1
 800dc6a:	605a      	str	r2, [r3, #4]
  }
}
 800dc6c:	bf00      	nop
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b098      	sub	sp, #96	@ 0x60
 800dc7c:	af02      	add	r7, sp, #8
 800dc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2200      	movs	r2, #0
 800dc84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc88:	f7f9 faee 	bl	8007268 <HAL_GetTick>
 800dc8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 0308 	and.w	r3, r3, #8
 800dc98:	2b08      	cmp	r3, #8
 800dc9a:	d12f      	bne.n	800dcfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dca0:	9300      	str	r3, [sp, #0]
 800dca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dca4:	2200      	movs	r2, #0
 800dca6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f000 f88e 	bl	800ddcc <UART_WaitOnFlagUntilTimeout>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d022      	beq.n	800dcfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcbe:	e853 3f00 	ldrex	r3, [r3]
 800dcc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dcc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dcc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dcca:	653b      	str	r3, [r7, #80]	@ 0x50
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dcd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dcd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dcda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dcdc:	e841 2300 	strex	r3, r2, [r1]
 800dce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e6      	bne.n	800dcb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2220      	movs	r2, #32
 800dcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dcf8:	2303      	movs	r3, #3
 800dcfa:	e063      	b.n	800ddc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	f003 0304 	and.w	r3, r3, #4
 800dd06:	2b04      	cmp	r3, #4
 800dd08:	d149      	bne.n	800dd9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd12:	2200      	movs	r2, #0
 800dd14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f857 	bl	800ddcc <UART_WaitOnFlagUntilTimeout>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d03c      	beq.n	800dd9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2c:	e853 3f00 	ldrex	r3, [r3]
 800dd30:	623b      	str	r3, [r7, #32]
   return(result);
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dd38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	461a      	mov	r2, r3
 800dd40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd42:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd4a:	e841 2300 	strex	r3, r2, [r1]
 800dd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d1e6      	bne.n	800dd24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	e853 3f00 	ldrex	r3, [r3]
 800dd64:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f023 0301 	bic.w	r3, r3, #1
 800dd6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	3308      	adds	r3, #8
 800dd74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd76:	61fa      	str	r2, [r7, #28]
 800dd78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd7a:	69b9      	ldr	r1, [r7, #24]
 800dd7c:	69fa      	ldr	r2, [r7, #28]
 800dd7e:	e841 2300 	strex	r3, r2, [r1]
 800dd82:	617b      	str	r3, [r7, #20]
   return(result);
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d1e5      	bne.n	800dd56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2220      	movs	r2, #32
 800dd8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd9a:	2303      	movs	r3, #3
 800dd9c:	e012      	b.n	800ddc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2220      	movs	r2, #32
 800dda2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2220      	movs	r2, #32
 800ddaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3758      	adds	r7, #88	@ 0x58
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b084      	sub	sp, #16
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	4613      	mov	r3, r2
 800ddda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dddc:	e04f      	b.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dde4:	d04b      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dde6:	f7f9 fa3f 	bl	8007268 <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	69ba      	ldr	r2, [r7, #24]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d302      	bcc.n	800ddfc <UART_WaitOnFlagUntilTimeout+0x30>
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ddfc:	2303      	movs	r3, #3
 800ddfe:	e04e      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f003 0304 	and.w	r3, r3, #4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d037      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	2b80      	cmp	r3, #128	@ 0x80
 800de12:	d034      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b40      	cmp	r3, #64	@ 0x40
 800de18:	d031      	beq.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	69db      	ldr	r3, [r3, #28]
 800de20:	f003 0308 	and.w	r3, r3, #8
 800de24:	2b08      	cmp	r3, #8
 800de26:	d110      	bne.n	800de4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2208      	movs	r2, #8
 800de2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f000 f920 	bl	800e076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2208      	movs	r2, #8
 800de3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e029      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69db      	ldr	r3, [r3, #28]
 800de50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800de54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de58:	d111      	bne.n	800de7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f000 f906 	bl	800e076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2220      	movs	r2, #32
 800de6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800de7a:	2303      	movs	r3, #3
 800de7c:	e00f      	b.n	800de9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	69da      	ldr	r2, [r3, #28]
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	4013      	ands	r3, r2
 800de88:	68ba      	ldr	r2, [r7, #8]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	bf0c      	ite	eq
 800de8e:	2301      	moveq	r3, #1
 800de90:	2300      	movne	r3, #0
 800de92:	b2db      	uxtb	r3, r3
 800de94:	461a      	mov	r2, r3
 800de96:	79fb      	ldrb	r3, [r7, #7]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d0a0      	beq.n	800ddde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
	...

0800dea8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b096      	sub	sp, #88	@ 0x58
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4613      	mov	r3, r2
 800deb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	68ba      	ldr	r2, [r7, #8]
 800deba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	88fa      	ldrh	r2, [r7, #6]
 800dec0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2222      	movs	r2, #34	@ 0x22
 800ded0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d02d      	beq.n	800df3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dee4:	4a40      	ldr	r2, [pc, #256]	@ (800dfe8 <UART_Start_Receive_DMA+0x140>)
 800dee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800deee:	4a3f      	ldr	r2, [pc, #252]	@ (800dfec <UART_Start_Receive_DMA+0x144>)
 800def0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800def8:	4a3d      	ldr	r2, [pc, #244]	@ (800dff0 <UART_Start_Receive_DMA+0x148>)
 800defa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800df02:	2200      	movs	r2, #0
 800df04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3324      	adds	r3, #36	@ 0x24
 800df12:	4619      	mov	r1, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800df18:	461a      	mov	r2, r3
 800df1a:	88fb      	ldrh	r3, [r7, #6]
 800df1c:	f7fa ffe0 	bl	8008ee0 <HAL_DMA_Start_IT>
 800df20:	4603      	mov	r3, r0
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2210      	movs	r2, #16
 800df2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2220      	movs	r2, #32
 800df32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800df36:	2301      	movs	r3, #1
 800df38:	e051      	b.n	800dfde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d018      	beq.n	800df74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df4a:	e853 3f00 	ldrex	r3, [r3]
 800df4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800df56:	657b      	str	r3, [r7, #84]	@ 0x54
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	461a      	mov	r2, r3
 800df5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800df66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df68:	e841 2300 	strex	r3, r2, [r1]
 800df6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800df6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1e6      	bne.n	800df42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	3308      	adds	r3, #8
 800df7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df7e:	e853 3f00 	ldrex	r3, [r3]
 800df82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800df84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df86:	f043 0301 	orr.w	r3, r3, #1
 800df8a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3308      	adds	r3, #8
 800df92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800df94:	637a      	str	r2, [r7, #52]	@ 0x34
 800df96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df9c:	e841 2300 	strex	r3, r2, [r1]
 800dfa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800dfa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e5      	bne.n	800df74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3308      	adds	r3, #8
 800dfae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	e853 3f00 	ldrex	r3, [r3]
 800dfb6:	613b      	str	r3, [r7, #16]
   return(result);
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dfbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	3308      	adds	r3, #8
 800dfc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfc8:	623a      	str	r2, [r7, #32]
 800dfca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfcc:	69f9      	ldr	r1, [r7, #28]
 800dfce:	6a3a      	ldr	r2, [r7, #32]
 800dfd0:	e841 2300 	strex	r3, r2, [r1]
 800dfd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d1e5      	bne.n	800dfa8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3758      	adds	r7, #88	@ 0x58
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	0800e143 	.word	0x0800e143
 800dfec:	0800e277 	.word	0x0800e277
 800dff0:	0800e2bd 	.word	0x0800e2bd

0800dff4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b08f      	sub	sp, #60	@ 0x3c
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	e853 3f00 	ldrex	r3, [r3]
 800e008:	61fb      	str	r3, [r7, #28]
   return(result);
 800e00a:	69fb      	ldr	r3, [r7, #28]
 800e00c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e010:	637b      	str	r3, [r7, #52]	@ 0x34
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	461a      	mov	r2, r3
 800e018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e01c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e022:	e841 2300 	strex	r3, r2, [r1]
 800e026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1e6      	bne.n	800dffc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	3308      	adds	r3, #8
 800e034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	e853 3f00 	ldrex	r3, [r3]
 800e03c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e044:	633b      	str	r3, [r7, #48]	@ 0x30
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	3308      	adds	r3, #8
 800e04c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e04e:	61ba      	str	r2, [r7, #24]
 800e050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e052:	6979      	ldr	r1, [r7, #20]
 800e054:	69ba      	ldr	r2, [r7, #24]
 800e056:	e841 2300 	strex	r3, r2, [r1]
 800e05a:	613b      	str	r3, [r7, #16]
   return(result);
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d1e5      	bne.n	800e02e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2220      	movs	r2, #32
 800e066:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e06a:	bf00      	nop
 800e06c:	373c      	adds	r7, #60	@ 0x3c
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr

0800e076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e076:	b480      	push	{r7}
 800e078:	b095      	sub	sp, #84	@ 0x54
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e086:	e853 3f00 	ldrex	r3, [r3]
 800e08a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e08e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e092:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	461a      	mov	r2, r3
 800e09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e09c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e09e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e0a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e0a4:	e841 2300 	strex	r3, r2, [r1]
 800e0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e0aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1e6      	bne.n	800e07e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3308      	adds	r3, #8
 800e0b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0b8:	6a3b      	ldr	r3, [r7, #32]
 800e0ba:	e853 3f00 	ldrex	r3, [r3]
 800e0be:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e0c6:	f023 0301 	bic.w	r3, r3, #1
 800e0ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	3308      	adds	r3, #8
 800e0d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0dc:	e841 2300 	strex	r3, r2, [r1]
 800e0e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1e3      	bne.n	800e0b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d118      	bne.n	800e122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	e853 3f00 	ldrex	r3, [r3]
 800e0fc:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0fe:	68bb      	ldr	r3, [r7, #8]
 800e100:	f023 0310 	bic.w	r3, r3, #16
 800e104:	647b      	str	r3, [r7, #68]	@ 0x44
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e10e:	61bb      	str	r3, [r7, #24]
 800e110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e112:	6979      	ldr	r1, [r7, #20]
 800e114:	69ba      	ldr	r2, [r7, #24]
 800e116:	e841 2300 	strex	r3, r2, [r1]
 800e11a:	613b      	str	r3, [r7, #16]
   return(result);
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1e6      	bne.n	800e0f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2220      	movs	r2, #32
 800e126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	2200      	movs	r2, #0
 800e12e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e136:	bf00      	nop
 800e138:	3754      	adds	r7, #84	@ 0x54
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e142:	b580      	push	{r7, lr}
 800e144:	b09c      	sub	sp, #112	@ 0x70
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e14e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f003 0320 	and.w	r3, r3, #32
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d171      	bne.n	800e242 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e15e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e160:	2200      	movs	r2, #0
 800e162:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e166:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e16e:	e853 3f00 	ldrex	r3, [r3]
 800e172:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e176:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e17a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e17c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	461a      	mov	r2, r3
 800e182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e184:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e186:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e188:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e18a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e18c:	e841 2300 	strex	r3, r2, [r1]
 800e190:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e192:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e194:	2b00      	cmp	r3, #0
 800e196:	d1e6      	bne.n	800e166 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	3308      	adds	r3, #8
 800e19e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a2:	e853 3f00 	ldrex	r3, [r3]
 800e1a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1aa:	f023 0301 	bic.w	r3, r3, #1
 800e1ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800e1b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	3308      	adds	r3, #8
 800e1b6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e1b8:	647a      	str	r2, [r7, #68]	@ 0x44
 800e1ba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e1be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1c0:	e841 2300 	strex	r3, r2, [r1]
 800e1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e1c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d1e5      	bne.n	800e198 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3308      	adds	r3, #8
 800e1d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1d6:	e853 3f00 	ldrex	r3, [r3]
 800e1da:	623b      	str	r3, [r7, #32]
   return(result);
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1e2:	663b      	str	r3, [r7, #96]	@ 0x60
 800e1e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	3308      	adds	r3, #8
 800e1ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e1ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800e1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e1f4:	e841 2300 	strex	r3, r2, [r1]
 800e1f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d1e5      	bne.n	800e1cc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e202:	2220      	movs	r2, #32
 800e204:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e20a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d118      	bne.n	800e242 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	e853 3f00 	ldrex	r3, [r3]
 800e21c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f023 0310 	bic.w	r3, r3, #16
 800e224:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	461a      	mov	r2, r3
 800e22c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e22e:	61fb      	str	r3, [r7, #28]
 800e230:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e232:	69b9      	ldr	r1, [r7, #24]
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	e841 2300 	strex	r3, r2, [r1]
 800e23a:	617b      	str	r3, [r7, #20]
   return(result);
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d1e6      	bne.n	800e210 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e244:	2200      	movs	r2, #0
 800e246:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e24a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d109      	bne.n	800e264 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e252:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e256:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e258:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e25c:	4611      	mov	r1, r2
 800e25e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e260:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e262:	e004      	b.n	800e26e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800e264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e266:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e26a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e26c:	4798      	blx	r3
}
 800e26e:	bf00      	nop
 800e270:	3770      	adds	r7, #112	@ 0x70
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e282:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2201      	movs	r2, #1
 800e288:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d10b      	bne.n	800e2aa <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e29e:	0852      	lsrs	r2, r2, #1
 800e2a0:	b292      	uxth	r2, r2
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e2a8:	e004      	b.n	800e2b4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e2b0:	68f8      	ldr	r0, [r7, #12]
 800e2b2:	4798      	blx	r3
}
 800e2b4:	bf00      	nop
 800e2b6:	3710      	adds	r7, #16
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b086      	sub	sp, #24
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2c8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2d0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e2d8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	689b      	ldr	r3, [r3, #8]
 800e2e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e2e4:	2b80      	cmp	r3, #128	@ 0x80
 800e2e6:	d109      	bne.n	800e2fc <UART_DMAError+0x40>
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	2b21      	cmp	r3, #33	@ 0x21
 800e2ec:	d106      	bne.n	800e2fc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e2f6:	6978      	ldr	r0, [r7, #20]
 800e2f8:	f7ff fe7c 	bl	800dff4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	689b      	ldr	r3, [r3, #8]
 800e302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e306:	2b40      	cmp	r3, #64	@ 0x40
 800e308:	d109      	bne.n	800e31e <UART_DMAError+0x62>
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2b22      	cmp	r3, #34	@ 0x22
 800e30e:	d106      	bne.n	800e31e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2200      	movs	r2, #0
 800e314:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e318:	6978      	ldr	r0, [r7, #20]
 800e31a:	f7ff feac 	bl	800e076 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e324:	f043 0210 	orr.w	r2, r3, #16
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e334:	6978      	ldr	r0, [r7, #20]
 800e336:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e338:	bf00      	nop
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e34c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e360:	bf00      	nop
 800e362:	3710      	adds	r7, #16
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e368:	b580      	push	{r7, lr}
 800e36a:	b088      	sub	sp, #32
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	e853 3f00 	ldrex	r3, [r3]
 800e37c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e384:	61fb      	str	r3, [r7, #28]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	461a      	mov	r2, r3
 800e38c:	69fb      	ldr	r3, [r7, #28]
 800e38e:	61bb      	str	r3, [r7, #24]
 800e390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e392:	6979      	ldr	r1, [r7, #20]
 800e394:	69ba      	ldr	r2, [r7, #24]
 800e396:	e841 2300 	strex	r3, r2, [r1]
 800e39a:	613b      	str	r3, [r7, #16]
   return(result);
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1e6      	bne.n	800e370 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2220      	movs	r2, #32
 800e3a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e3ba:	bf00      	nop
 800e3bc:	3720      	adds	r7, #32
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}

0800e3c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	b083      	sub	sp, #12
 800e3c6:	af00      	add	r7, sp, #0
 800e3c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e3ca:	bf00      	nop
 800e3cc:	370c      	adds	r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d4:	4770      	bx	lr

0800e3d6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e3d6:	b480      	push	{r7}
 800e3d8:	b083      	sub	sp, #12
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e3de:	bf00      	nop
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e3f2:	bf00      	nop
 800e3f4:	370c      	adds	r7, #12
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fc:	4770      	bx	lr

0800e3fe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e3fe:	b480      	push	{r7}
 800e400:	b085      	sub	sp, #20
 800e402:	af00      	add	r7, sp, #0
 800e404:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d101      	bne.n	800e414 <HAL_UARTEx_DisableFifoMode+0x16>
 800e410:	2302      	movs	r3, #2
 800e412:	e027      	b.n	800e464 <HAL_UARTEx_DisableFifoMode+0x66>
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2201      	movs	r2, #1
 800e418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2224      	movs	r2, #36	@ 0x24
 800e420:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f022 0201 	bic.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e442:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	68fa      	ldr	r2, [r7, #12]
 800e450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2220      	movs	r2, #32
 800e456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3714      	adds	r7, #20
 800e468:	46bd      	mov	sp, r7
 800e46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46e:	4770      	bx	lr

0800e470 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b084      	sub	sp, #16
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e480:	2b01      	cmp	r3, #1
 800e482:	d101      	bne.n	800e488 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e484:	2302      	movs	r3, #2
 800e486:	e02d      	b.n	800e4e4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2201      	movs	r2, #1
 800e48c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2224      	movs	r2, #36	@ 0x24
 800e494:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f022 0201 	bic.w	r2, r2, #1
 800e4ae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	689b      	ldr	r3, [r3, #8]
 800e4b6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	430a      	orrs	r2, r1
 800e4c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f000 f84f 	bl	800e568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	68fa      	ldr	r2, [r7, #12]
 800e4d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d101      	bne.n	800e504 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e500:	2302      	movs	r3, #2
 800e502:	e02d      	b.n	800e560 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2224      	movs	r2, #36	@ 0x24
 800e510:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	681a      	ldr	r2, [r3, #0]
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	f022 0201 	bic.w	r2, r2, #1
 800e52a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	689b      	ldr	r3, [r3, #8]
 800e532:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	430a      	orrs	r2, r1
 800e53e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 f811 	bl	800e568 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	68fa      	ldr	r2, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2220      	movs	r2, #32
 800e552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	4618      	mov	r0, r3
 800e562:	3710      	adds	r7, #16
 800e564:	46bd      	mov	sp, r7
 800e566:	bd80      	pop	{r7, pc}

0800e568 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e574:	2b00      	cmp	r3, #0
 800e576:	d108      	bne.n	800e58a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2201      	movs	r2, #1
 800e57c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e588:	e031      	b.n	800e5ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e58a:	2308      	movs	r3, #8
 800e58c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e58e:	2308      	movs	r3, #8
 800e590:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	0e5b      	lsrs	r3, r3, #25
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	f003 0307 	and.w	r3, r3, #7
 800e5a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	689b      	ldr	r3, [r3, #8]
 800e5a8:	0f5b      	lsrs	r3, r3, #29
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	f003 0307 	and.w	r3, r3, #7
 800e5b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5b2:	7bbb      	ldrb	r3, [r7, #14]
 800e5b4:	7b3a      	ldrb	r2, [r7, #12]
 800e5b6:	4911      	ldr	r1, [pc, #68]	@ (800e5fc <UARTEx_SetNbDataToProcess+0x94>)
 800e5b8:	5c8a      	ldrb	r2, [r1, r2]
 800e5ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e5be:	7b3a      	ldrb	r2, [r7, #12]
 800e5c0:	490f      	ldr	r1, [pc, #60]	@ (800e600 <UARTEx_SetNbDataToProcess+0x98>)
 800e5c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e5c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
 800e5d2:	7b7a      	ldrb	r2, [r7, #13]
 800e5d4:	4909      	ldr	r1, [pc, #36]	@ (800e5fc <UARTEx_SetNbDataToProcess+0x94>)
 800e5d6:	5c8a      	ldrb	r2, [r1, r2]
 800e5d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e5dc:	7b7a      	ldrb	r2, [r7, #13]
 800e5de:	4908      	ldr	r1, [pc, #32]	@ (800e600 <UARTEx_SetNbDataToProcess+0x98>)
 800e5e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e5e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e5ee:	bf00      	nop
 800e5f0:	3714      	adds	r7, #20
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	08010740 	.word	0x08010740
 800e600:	08010748 	.word	0x08010748

0800e604 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e604:	b480      	push	{r7}
 800e606:	b08b      	sub	sp, #44	@ 0x2c
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	881b      	ldrh	r3, [r3, #0]
 800e626:	461a      	mov	r2, r3
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	885b      	ldrh	r3, [r3, #2]
 800e62c:	fb02 f303 	mul.w	r3, r2, r3
 800e630:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e636:	e013      	b.n	800e660 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800e638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e63a:	1d1a      	adds	r2, r3, #4
 800e63c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e63e:	ed93 7a00 	vldr	s14, [r3]
 800e642:	6a3b      	ldr	r3, [r7, #32]
 800e644:	1d1a      	adds	r2, r3, #4
 800e646:	623a      	str	r2, [r7, #32]
 800e648:	edd3 7a00 	vldr	s15, [r3]
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	1d1a      	adds	r2, r3, #4
 800e650:	61fa      	str	r2, [r7, #28]
 800e652:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e656:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e660:	69bb      	ldr	r3, [r7, #24]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1e8      	bne.n	800e638 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e666:	2300      	movs	r3, #0
 800e668:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e66a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	372c      	adds	r7, #44	@ 0x2c
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b085      	sub	sp, #20
 800e67e:	af00      	add	r7, sp, #0
 800e680:	60f8      	str	r0, [r7, #12]
 800e682:	607b      	str	r3, [r7, #4]
 800e684:	460b      	mov	r3, r1
 800e686:	817b      	strh	r3, [r7, #10]
 800e688:	4613      	mov	r3, r2
 800e68a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	897a      	ldrh	r2, [r7, #10]
 800e690:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	893a      	ldrh	r2, [r7, #8]
 800e696:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	605a      	str	r2, [r3, #4]
}
 800e69e:	bf00      	nop
 800e6a0:	3714      	adds	r7, #20
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e6aa:	b480      	push	{r7}
 800e6ac:	b093      	sub	sp, #76	@ 0x4c
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800e6bc:	68bb      	ldr	r3, [r7, #8]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	685b      	ldr	r3, [r3, #4]
 800e6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	685b      	ldr	r3, [r3, #4]
 800e6cc:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	685b      	ldr	r3, [r3, #4]
 800e6d2:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	881b      	ldrh	r3, [r3, #0]
 800e6d8:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	885b      	ldrh	r3, [r3, #2]
 800e6de:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	885b      	ldrh	r3, [r3, #2]
 800e6e4:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e6ea:	8b7b      	ldrh	r3, [r7, #26]
 800e6ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800e6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6f0:	009b      	lsls	r3, r3, #2
 800e6f2:	69fa      	ldr	r2, [r7, #28]
 800e6f4:	4413      	add	r3, r2
 800e6f6:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800e6f8:	8b3b      	ldrh	r3, [r7, #24]
 800e6fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800e702:	f04f 0300 	mov.w	r3, #0
 800e706:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800e708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e70a:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800e70c:	8afb      	ldrh	r3, [r7, #22]
 800e70e:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800e710:	e017      	b.n	800e742 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800e712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e714:	1d1a      	adds	r2, r3, #4
 800e716:	647a      	str	r2, [r7, #68]	@ 0x44
 800e718:	ed93 7a00 	vldr	s14, [r3]
 800e71c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e71e:	edd3 7a00 	vldr	s15, [r3]
 800e722:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e726:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800e72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e72e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800e732:	8b3b      	ldrh	r3, [r7, #24]
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e738:	4413      	add	r3, r2
 800e73a:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e73e:	3b01      	subs	r3, #1
 800e740:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800e742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	d1e4      	bne.n	800e712 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800e748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74a:	1d1a      	adds	r2, r3, #4
 800e74c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e74e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e750:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800e752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e754:	3b01      	subs	r3, #1
 800e756:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800e758:	8b3a      	ldrh	r2, [r7, #24]
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	1ad3      	subs	r3, r2, r3
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	6a3a      	ldr	r2, [r7, #32]
 800e762:	4413      	add	r3, r2
 800e764:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1ca      	bne.n	800e702 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800e76c:	8b3b      	ldrh	r3, [r7, #24]
 800e76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e770:	4413      	add	r3, r2
 800e772:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800e774:	8afb      	ldrh	r3, [r7, #22]
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e77a:	4413      	add	r3, r2
 800e77c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800e77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e780:	3b01      	subs	r3, #1
 800e782:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800e784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e786:	2b00      	cmp	r3, #0
 800e788:	d1b1      	bne.n	800e6ee <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e78a:	2300      	movs	r3, #0
 800e78c:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800e78e:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e792:	4618      	mov	r0, r3
 800e794:	374c      	adds	r7, #76	@ 0x4c
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b08b      	sub	sp, #44	@ 0x2c
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	60f8      	str	r0, [r7, #12]
 800e7a6:	ed87 0a02 	vstr	s0, [r7, #8]
 800e7aa:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	685b      	ldr	r3, [r3, #4]
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	881b      	ldrh	r3, [r3, #0]
 800e7bc:	461a      	mov	r2, r3
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	885b      	ldrh	r3, [r3, #2]
 800e7c2:	fb02 f303 	mul.w	r3, r2, r3
 800e7c6:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e7c8:	69bb      	ldr	r3, [r7, #24]
 800e7ca:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e7cc:	e010      	b.n	800e7f0 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800e7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7d0:	1d1a      	adds	r2, r3, #4
 800e7d2:	627a      	str	r2, [r7, #36]	@ 0x24
 800e7d4:	ed93 7a00 	vldr	s14, [r3]
 800e7d8:	6a3b      	ldr	r3, [r7, #32]
 800e7da:	1d1a      	adds	r2, r3, #4
 800e7dc:	623a      	str	r2, [r7, #32]
 800e7de:	edd7 7a02 	vldr	s15, [r7, #8]
 800e7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7e6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	3b01      	subs	r3, #1
 800e7ee:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1eb      	bne.n	800e7ce <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800e7fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	372c      	adds	r7, #44	@ 0x2c
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr
	...

0800e80c <malloc>:
 800e80c:	4b02      	ldr	r3, [pc, #8]	@ (800e818 <malloc+0xc>)
 800e80e:	4601      	mov	r1, r0
 800e810:	6818      	ldr	r0, [r3, #0]
 800e812:	f000 b825 	b.w	800e860 <_malloc_r>
 800e816:	bf00      	nop
 800e818:	20000100 	.word	0x20000100

0800e81c <sbrk_aligned>:
 800e81c:	b570      	push	{r4, r5, r6, lr}
 800e81e:	4e0f      	ldr	r6, [pc, #60]	@ (800e85c <sbrk_aligned+0x40>)
 800e820:	460c      	mov	r4, r1
 800e822:	6831      	ldr	r1, [r6, #0]
 800e824:	4605      	mov	r5, r0
 800e826:	b911      	cbnz	r1, 800e82e <sbrk_aligned+0x12>
 800e828:	f000 f8ae 	bl	800e988 <_sbrk_r>
 800e82c:	6030      	str	r0, [r6, #0]
 800e82e:	4621      	mov	r1, r4
 800e830:	4628      	mov	r0, r5
 800e832:	f000 f8a9 	bl	800e988 <_sbrk_r>
 800e836:	1c43      	adds	r3, r0, #1
 800e838:	d103      	bne.n	800e842 <sbrk_aligned+0x26>
 800e83a:	f04f 34ff 	mov.w	r4, #4294967295
 800e83e:	4620      	mov	r0, r4
 800e840:	bd70      	pop	{r4, r5, r6, pc}
 800e842:	1cc4      	adds	r4, r0, #3
 800e844:	f024 0403 	bic.w	r4, r4, #3
 800e848:	42a0      	cmp	r0, r4
 800e84a:	d0f8      	beq.n	800e83e <sbrk_aligned+0x22>
 800e84c:	1a21      	subs	r1, r4, r0
 800e84e:	4628      	mov	r0, r5
 800e850:	f000 f89a 	bl	800e988 <_sbrk_r>
 800e854:	3001      	adds	r0, #1
 800e856:	d1f2      	bne.n	800e83e <sbrk_aligned+0x22>
 800e858:	e7ef      	b.n	800e83a <sbrk_aligned+0x1e>
 800e85a:	bf00      	nop
 800e85c:	200020f0 	.word	0x200020f0

0800e860 <_malloc_r>:
 800e860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e864:	1ccd      	adds	r5, r1, #3
 800e866:	f025 0503 	bic.w	r5, r5, #3
 800e86a:	3508      	adds	r5, #8
 800e86c:	2d0c      	cmp	r5, #12
 800e86e:	bf38      	it	cc
 800e870:	250c      	movcc	r5, #12
 800e872:	2d00      	cmp	r5, #0
 800e874:	4606      	mov	r6, r0
 800e876:	db01      	blt.n	800e87c <_malloc_r+0x1c>
 800e878:	42a9      	cmp	r1, r5
 800e87a:	d904      	bls.n	800e886 <_malloc_r+0x26>
 800e87c:	230c      	movs	r3, #12
 800e87e:	6033      	str	r3, [r6, #0]
 800e880:	2000      	movs	r0, #0
 800e882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e95c <_malloc_r+0xfc>
 800e88a:	f000 f869 	bl	800e960 <__malloc_lock>
 800e88e:	f8d8 3000 	ldr.w	r3, [r8]
 800e892:	461c      	mov	r4, r3
 800e894:	bb44      	cbnz	r4, 800e8e8 <_malloc_r+0x88>
 800e896:	4629      	mov	r1, r5
 800e898:	4630      	mov	r0, r6
 800e89a:	f7ff ffbf 	bl	800e81c <sbrk_aligned>
 800e89e:	1c43      	adds	r3, r0, #1
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	d158      	bne.n	800e956 <_malloc_r+0xf6>
 800e8a4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8a8:	4627      	mov	r7, r4
 800e8aa:	2f00      	cmp	r7, #0
 800e8ac:	d143      	bne.n	800e936 <_malloc_r+0xd6>
 800e8ae:	2c00      	cmp	r4, #0
 800e8b0:	d04b      	beq.n	800e94a <_malloc_r+0xea>
 800e8b2:	6823      	ldr	r3, [r4, #0]
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	eb04 0903 	add.w	r9, r4, r3
 800e8bc:	f000 f864 	bl	800e988 <_sbrk_r>
 800e8c0:	4581      	cmp	r9, r0
 800e8c2:	d142      	bne.n	800e94a <_malloc_r+0xea>
 800e8c4:	6821      	ldr	r1, [r4, #0]
 800e8c6:	1a6d      	subs	r5, r5, r1
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4630      	mov	r0, r6
 800e8cc:	f7ff ffa6 	bl	800e81c <sbrk_aligned>
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	d03a      	beq.n	800e94a <_malloc_r+0xea>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	442b      	add	r3, r5
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	f8d8 3000 	ldr.w	r3, [r8]
 800e8de:	685a      	ldr	r2, [r3, #4]
 800e8e0:	bb62      	cbnz	r2, 800e93c <_malloc_r+0xdc>
 800e8e2:	f8c8 7000 	str.w	r7, [r8]
 800e8e6:	e00f      	b.n	800e908 <_malloc_r+0xa8>
 800e8e8:	6822      	ldr	r2, [r4, #0]
 800e8ea:	1b52      	subs	r2, r2, r5
 800e8ec:	d420      	bmi.n	800e930 <_malloc_r+0xd0>
 800e8ee:	2a0b      	cmp	r2, #11
 800e8f0:	d917      	bls.n	800e922 <_malloc_r+0xc2>
 800e8f2:	1961      	adds	r1, r4, r5
 800e8f4:	42a3      	cmp	r3, r4
 800e8f6:	6025      	str	r5, [r4, #0]
 800e8f8:	bf18      	it	ne
 800e8fa:	6059      	strne	r1, [r3, #4]
 800e8fc:	6863      	ldr	r3, [r4, #4]
 800e8fe:	bf08      	it	eq
 800e900:	f8c8 1000 	streq.w	r1, [r8]
 800e904:	5162      	str	r2, [r4, r5]
 800e906:	604b      	str	r3, [r1, #4]
 800e908:	4630      	mov	r0, r6
 800e90a:	f000 f82f 	bl	800e96c <__malloc_unlock>
 800e90e:	f104 000b 	add.w	r0, r4, #11
 800e912:	1d23      	adds	r3, r4, #4
 800e914:	f020 0007 	bic.w	r0, r0, #7
 800e918:	1ac2      	subs	r2, r0, r3
 800e91a:	bf1c      	itt	ne
 800e91c:	1a1b      	subne	r3, r3, r0
 800e91e:	50a3      	strne	r3, [r4, r2]
 800e920:	e7af      	b.n	800e882 <_malloc_r+0x22>
 800e922:	6862      	ldr	r2, [r4, #4]
 800e924:	42a3      	cmp	r3, r4
 800e926:	bf0c      	ite	eq
 800e928:	f8c8 2000 	streq.w	r2, [r8]
 800e92c:	605a      	strne	r2, [r3, #4]
 800e92e:	e7eb      	b.n	800e908 <_malloc_r+0xa8>
 800e930:	4623      	mov	r3, r4
 800e932:	6864      	ldr	r4, [r4, #4]
 800e934:	e7ae      	b.n	800e894 <_malloc_r+0x34>
 800e936:	463c      	mov	r4, r7
 800e938:	687f      	ldr	r7, [r7, #4]
 800e93a:	e7b6      	b.n	800e8aa <_malloc_r+0x4a>
 800e93c:	461a      	mov	r2, r3
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	42a3      	cmp	r3, r4
 800e942:	d1fb      	bne.n	800e93c <_malloc_r+0xdc>
 800e944:	2300      	movs	r3, #0
 800e946:	6053      	str	r3, [r2, #4]
 800e948:	e7de      	b.n	800e908 <_malloc_r+0xa8>
 800e94a:	230c      	movs	r3, #12
 800e94c:	6033      	str	r3, [r6, #0]
 800e94e:	4630      	mov	r0, r6
 800e950:	f000 f80c 	bl	800e96c <__malloc_unlock>
 800e954:	e794      	b.n	800e880 <_malloc_r+0x20>
 800e956:	6005      	str	r5, [r0, #0]
 800e958:	e7d6      	b.n	800e908 <_malloc_r+0xa8>
 800e95a:	bf00      	nop
 800e95c:	200020f4 	.word	0x200020f4

0800e960 <__malloc_lock>:
 800e960:	4801      	ldr	r0, [pc, #4]	@ (800e968 <__malloc_lock+0x8>)
 800e962:	f000 b84b 	b.w	800e9fc <__retarget_lock_acquire_recursive>
 800e966:	bf00      	nop
 800e968:	20002234 	.word	0x20002234

0800e96c <__malloc_unlock>:
 800e96c:	4801      	ldr	r0, [pc, #4]	@ (800e974 <__malloc_unlock+0x8>)
 800e96e:	f000 b846 	b.w	800e9fe <__retarget_lock_release_recursive>
 800e972:	bf00      	nop
 800e974:	20002234 	.word	0x20002234

0800e978 <memset>:
 800e978:	4402      	add	r2, r0
 800e97a:	4603      	mov	r3, r0
 800e97c:	4293      	cmp	r3, r2
 800e97e:	d100      	bne.n	800e982 <memset+0xa>
 800e980:	4770      	bx	lr
 800e982:	f803 1b01 	strb.w	r1, [r3], #1
 800e986:	e7f9      	b.n	800e97c <memset+0x4>

0800e988 <_sbrk_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4d06      	ldr	r5, [pc, #24]	@ (800e9a4 <_sbrk_r+0x1c>)
 800e98c:	2300      	movs	r3, #0
 800e98e:	4604      	mov	r4, r0
 800e990:	4608      	mov	r0, r1
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	f7f7 fd3c 	bl	8006410 <_sbrk>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d102      	bne.n	800e9a2 <_sbrk_r+0x1a>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	b103      	cbz	r3, 800e9a2 <_sbrk_r+0x1a>
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	20002230 	.word	0x20002230

0800e9a8 <__errno>:
 800e9a8:	4b01      	ldr	r3, [pc, #4]	@ (800e9b0 <__errno+0x8>)
 800e9aa:	6818      	ldr	r0, [r3, #0]
 800e9ac:	4770      	bx	lr
 800e9ae:	bf00      	nop
 800e9b0:	20000100 	.word	0x20000100

0800e9b4 <__libc_init_array>:
 800e9b4:	b570      	push	{r4, r5, r6, lr}
 800e9b6:	4d0d      	ldr	r5, [pc, #52]	@ (800e9ec <__libc_init_array+0x38>)
 800e9b8:	4c0d      	ldr	r4, [pc, #52]	@ (800e9f0 <__libc_init_array+0x3c>)
 800e9ba:	1b64      	subs	r4, r4, r5
 800e9bc:	10a4      	asrs	r4, r4, #2
 800e9be:	2600      	movs	r6, #0
 800e9c0:	42a6      	cmp	r6, r4
 800e9c2:	d109      	bne.n	800e9d8 <__libc_init_array+0x24>
 800e9c4:	4d0b      	ldr	r5, [pc, #44]	@ (800e9f4 <__libc_init_array+0x40>)
 800e9c6:	4c0c      	ldr	r4, [pc, #48]	@ (800e9f8 <__libc_init_array+0x44>)
 800e9c8:	f001 fe86 	bl	80106d8 <_init>
 800e9cc:	1b64      	subs	r4, r4, r5
 800e9ce:	10a4      	asrs	r4, r4, #2
 800e9d0:	2600      	movs	r6, #0
 800e9d2:	42a6      	cmp	r6, r4
 800e9d4:	d105      	bne.n	800e9e2 <__libc_init_array+0x2e>
 800e9d6:	bd70      	pop	{r4, r5, r6, pc}
 800e9d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9dc:	4798      	blx	r3
 800e9de:	3601      	adds	r6, #1
 800e9e0:	e7ee      	b.n	800e9c0 <__libc_init_array+0xc>
 800e9e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9e6:	4798      	blx	r3
 800e9e8:	3601      	adds	r6, #1
 800e9ea:	e7f2      	b.n	800e9d2 <__libc_init_array+0x1e>
 800e9ec:	08010d08 	.word	0x08010d08
 800e9f0:	08010d08 	.word	0x08010d08
 800e9f4:	08010d08 	.word	0x08010d08
 800e9f8:	08010d0c 	.word	0x08010d0c

0800e9fc <__retarget_lock_acquire_recursive>:
 800e9fc:	4770      	bx	lr

0800e9fe <__retarget_lock_release_recursive>:
 800e9fe:	4770      	bx	lr

0800ea00 <memcpy>:
 800ea00:	440a      	add	r2, r1
 800ea02:	4291      	cmp	r1, r2
 800ea04:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea08:	d100      	bne.n	800ea0c <memcpy+0xc>
 800ea0a:	4770      	bx	lr
 800ea0c:	b510      	push	{r4, lr}
 800ea0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea12:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea16:	4291      	cmp	r1, r2
 800ea18:	d1f9      	bne.n	800ea0e <memcpy+0xe>
 800ea1a:	bd10      	pop	{r4, pc}
 800ea1c:	0000      	movs	r0, r0
	...

0800ea20 <sin>:
 800ea20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea22:	ec53 2b10 	vmov	r2, r3, d0
 800ea26:	4826      	ldr	r0, [pc, #152]	@ (800eac0 <sin+0xa0>)
 800ea28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ea2c:	4281      	cmp	r1, r0
 800ea2e:	d807      	bhi.n	800ea40 <sin+0x20>
 800ea30:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800eab8 <sin+0x98>
 800ea34:	2000      	movs	r0, #0
 800ea36:	b005      	add	sp, #20
 800ea38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea3c:	f000 b9d8 	b.w	800edf0 <__kernel_sin>
 800ea40:	4820      	ldr	r0, [pc, #128]	@ (800eac4 <sin+0xa4>)
 800ea42:	4281      	cmp	r1, r0
 800ea44:	d908      	bls.n	800ea58 <sin+0x38>
 800ea46:	4610      	mov	r0, r2
 800ea48:	4619      	mov	r1, r3
 800ea4a:	f7f1 fbe9 	bl	8000220 <__aeabi_dsub>
 800ea4e:	ec41 0b10 	vmov	d0, r0, r1
 800ea52:	b005      	add	sp, #20
 800ea54:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea58:	4668      	mov	r0, sp
 800ea5a:	f000 fa85 	bl	800ef68 <__ieee754_rem_pio2>
 800ea5e:	f000 0003 	and.w	r0, r0, #3
 800ea62:	2801      	cmp	r0, #1
 800ea64:	d00c      	beq.n	800ea80 <sin+0x60>
 800ea66:	2802      	cmp	r0, #2
 800ea68:	d011      	beq.n	800ea8e <sin+0x6e>
 800ea6a:	b9e8      	cbnz	r0, 800eaa8 <sin+0x88>
 800ea6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea70:	ed9d 0b00 	vldr	d0, [sp]
 800ea74:	2001      	movs	r0, #1
 800ea76:	f000 f9bb 	bl	800edf0 <__kernel_sin>
 800ea7a:	ec51 0b10 	vmov	r0, r1, d0
 800ea7e:	e7e6      	b.n	800ea4e <sin+0x2e>
 800ea80:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea84:	ed9d 0b00 	vldr	d0, [sp]
 800ea88:	f000 f8ea 	bl	800ec60 <__kernel_cos>
 800ea8c:	e7f5      	b.n	800ea7a <sin+0x5a>
 800ea8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ea92:	ed9d 0b00 	vldr	d0, [sp]
 800ea96:	2001      	movs	r0, #1
 800ea98:	f000 f9aa 	bl	800edf0 <__kernel_sin>
 800ea9c:	ec53 2b10 	vmov	r2, r3, d0
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eaa6:	e7d2      	b.n	800ea4e <sin+0x2e>
 800eaa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800eaac:	ed9d 0b00 	vldr	d0, [sp]
 800eab0:	f000 f8d6 	bl	800ec60 <__kernel_cos>
 800eab4:	e7f2      	b.n	800ea9c <sin+0x7c>
 800eab6:	bf00      	nop
	...
 800eac0:	3fe921fb 	.word	0x3fe921fb
 800eac4:	7fefffff 	.word	0x7fefffff

0800eac8 <fmodf>:
 800eac8:	b508      	push	{r3, lr}
 800eaca:	ed2d 8b02 	vpush	{d8}
 800eace:	eef0 8a40 	vmov.f32	s17, s0
 800ead2:	eeb0 8a60 	vmov.f32	s16, s1
 800ead6:	f000 fceb 	bl	800f4b0 <__ieee754_fmodf>
 800eada:	eef4 8a48 	vcmp.f32	s17, s16
 800eade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae2:	d60c      	bvs.n	800eafe <fmodf+0x36>
 800eae4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800eb04 <fmodf+0x3c>
 800eae8:	eeb4 8a68 	vcmp.f32	s16, s17
 800eaec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf0:	d105      	bne.n	800eafe <fmodf+0x36>
 800eaf2:	f7ff ff59 	bl	800e9a8 <__errno>
 800eaf6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eafa:	2321      	movs	r3, #33	@ 0x21
 800eafc:	6003      	str	r3, [r0, #0]
 800eafe:	ecbd 8b02 	vpop	{d8}
 800eb02:	bd08      	pop	{r3, pc}
 800eb04:	00000000 	.word	0x00000000

0800eb08 <sqrtf>:
 800eb08:	b508      	push	{r3, lr}
 800eb0a:	ed2d 8b02 	vpush	{d8}
 800eb0e:	eeb0 8a40 	vmov.f32	s16, s0
 800eb12:	f000 f8a1 	bl	800ec58 <__ieee754_sqrtf>
 800eb16:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb1e:	d60c      	bvs.n	800eb3a <sqrtf+0x32>
 800eb20:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800eb40 <sqrtf+0x38>
 800eb24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2c:	d505      	bpl.n	800eb3a <sqrtf+0x32>
 800eb2e:	f7ff ff3b 	bl	800e9a8 <__errno>
 800eb32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eb36:	2321      	movs	r3, #33	@ 0x21
 800eb38:	6003      	str	r3, [r0, #0]
 800eb3a:	ecbd 8b02 	vpop	{d8}
 800eb3e:	bd08      	pop	{r3, pc}
 800eb40:	00000000 	.word	0x00000000

0800eb44 <cosf>:
 800eb44:	ee10 3a10 	vmov	r3, s0
 800eb48:	b507      	push	{r0, r1, r2, lr}
 800eb4a:	4a1e      	ldr	r2, [pc, #120]	@ (800ebc4 <cosf+0x80>)
 800eb4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d806      	bhi.n	800eb62 <cosf+0x1e>
 800eb54:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800ebc8 <cosf+0x84>
 800eb58:	b003      	add	sp, #12
 800eb5a:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb5e:	f000 bc07 	b.w	800f370 <__kernel_cosf>
 800eb62:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800eb66:	d304      	bcc.n	800eb72 <cosf+0x2e>
 800eb68:	ee30 0a40 	vsub.f32	s0, s0, s0
 800eb6c:	b003      	add	sp, #12
 800eb6e:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb72:	4668      	mov	r0, sp
 800eb74:	f000 fd1e 	bl	800f5b4 <__ieee754_rem_pio2f>
 800eb78:	f000 0003 	and.w	r0, r0, #3
 800eb7c:	2801      	cmp	r0, #1
 800eb7e:	d009      	beq.n	800eb94 <cosf+0x50>
 800eb80:	2802      	cmp	r0, #2
 800eb82:	d010      	beq.n	800eba6 <cosf+0x62>
 800eb84:	b9b0      	cbnz	r0, 800ebb4 <cosf+0x70>
 800eb86:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb8a:	ed9d 0a00 	vldr	s0, [sp]
 800eb8e:	f000 fbef 	bl	800f370 <__kernel_cosf>
 800eb92:	e7eb      	b.n	800eb6c <cosf+0x28>
 800eb94:	eddd 0a01 	vldr	s1, [sp, #4]
 800eb98:	ed9d 0a00 	vldr	s0, [sp]
 800eb9c:	f000 fc40 	bl	800f420 <__kernel_sinf>
 800eba0:	eeb1 0a40 	vneg.f32	s0, s0
 800eba4:	e7e2      	b.n	800eb6c <cosf+0x28>
 800eba6:	eddd 0a01 	vldr	s1, [sp, #4]
 800ebaa:	ed9d 0a00 	vldr	s0, [sp]
 800ebae:	f000 fbdf 	bl	800f370 <__kernel_cosf>
 800ebb2:	e7f5      	b.n	800eba0 <cosf+0x5c>
 800ebb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800ebb8:	ed9d 0a00 	vldr	s0, [sp]
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	f000 fc2f 	bl	800f420 <__kernel_sinf>
 800ebc2:	e7d3      	b.n	800eb6c <cosf+0x28>
 800ebc4:	3f490fd8 	.word	0x3f490fd8
 800ebc8:	00000000 	.word	0x00000000

0800ebcc <sinf>:
 800ebcc:	ee10 3a10 	vmov	r3, s0
 800ebd0:	b507      	push	{r0, r1, r2, lr}
 800ebd2:	4a1f      	ldr	r2, [pc, #124]	@ (800ec50 <sinf+0x84>)
 800ebd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d807      	bhi.n	800ebec <sinf+0x20>
 800ebdc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800ec54 <sinf+0x88>
 800ebe0:	2000      	movs	r0, #0
 800ebe2:	b003      	add	sp, #12
 800ebe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebe8:	f000 bc1a 	b.w	800f420 <__kernel_sinf>
 800ebec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ebf0:	d304      	bcc.n	800ebfc <sinf+0x30>
 800ebf2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ebf6:	b003      	add	sp, #12
 800ebf8:	f85d fb04 	ldr.w	pc, [sp], #4
 800ebfc:	4668      	mov	r0, sp
 800ebfe:	f000 fcd9 	bl	800f5b4 <__ieee754_rem_pio2f>
 800ec02:	f000 0003 	and.w	r0, r0, #3
 800ec06:	2801      	cmp	r0, #1
 800ec08:	d00a      	beq.n	800ec20 <sinf+0x54>
 800ec0a:	2802      	cmp	r0, #2
 800ec0c:	d00f      	beq.n	800ec2e <sinf+0x62>
 800ec0e:	b9c0      	cbnz	r0, 800ec42 <sinf+0x76>
 800ec10:	eddd 0a01 	vldr	s1, [sp, #4]
 800ec14:	ed9d 0a00 	vldr	s0, [sp]
 800ec18:	2001      	movs	r0, #1
 800ec1a:	f000 fc01 	bl	800f420 <__kernel_sinf>
 800ec1e:	e7ea      	b.n	800ebf6 <sinf+0x2a>
 800ec20:	eddd 0a01 	vldr	s1, [sp, #4]
 800ec24:	ed9d 0a00 	vldr	s0, [sp]
 800ec28:	f000 fba2 	bl	800f370 <__kernel_cosf>
 800ec2c:	e7e3      	b.n	800ebf6 <sinf+0x2a>
 800ec2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ec32:	ed9d 0a00 	vldr	s0, [sp]
 800ec36:	2001      	movs	r0, #1
 800ec38:	f000 fbf2 	bl	800f420 <__kernel_sinf>
 800ec3c:	eeb1 0a40 	vneg.f32	s0, s0
 800ec40:	e7d9      	b.n	800ebf6 <sinf+0x2a>
 800ec42:	eddd 0a01 	vldr	s1, [sp, #4]
 800ec46:	ed9d 0a00 	vldr	s0, [sp]
 800ec4a:	f000 fb91 	bl	800f370 <__kernel_cosf>
 800ec4e:	e7f5      	b.n	800ec3c <sinf+0x70>
 800ec50:	3f490fd8 	.word	0x3f490fd8
 800ec54:	00000000 	.word	0x00000000

0800ec58 <__ieee754_sqrtf>:
 800ec58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ec5c:	4770      	bx	lr
	...

0800ec60 <__kernel_cos>:
 800ec60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	ec57 6b10 	vmov	r6, r7, d0
 800ec68:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ec6c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800ec70:	ed8d 1b00 	vstr	d1, [sp]
 800ec74:	d206      	bcs.n	800ec84 <__kernel_cos+0x24>
 800ec76:	4630      	mov	r0, r6
 800ec78:	4639      	mov	r1, r7
 800ec7a:	f7f1 ff23 	bl	8000ac4 <__aeabi_d2iz>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f000 8088 	beq.w	800ed94 <__kernel_cos+0x134>
 800ec84:	4632      	mov	r2, r6
 800ec86:	463b      	mov	r3, r7
 800ec88:	4630      	mov	r0, r6
 800ec8a:	4639      	mov	r1, r7
 800ec8c:	f7f1 fc80 	bl	8000590 <__aeabi_dmul>
 800ec90:	4b51      	ldr	r3, [pc, #324]	@ (800edd8 <__kernel_cos+0x178>)
 800ec92:	2200      	movs	r2, #0
 800ec94:	4604      	mov	r4, r0
 800ec96:	460d      	mov	r5, r1
 800ec98:	f7f1 fc7a 	bl	8000590 <__aeabi_dmul>
 800ec9c:	a340      	add	r3, pc, #256	@ (adr r3, 800eda0 <__kernel_cos+0x140>)
 800ec9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca2:	4682      	mov	sl, r0
 800eca4:	468b      	mov	fp, r1
 800eca6:	4620      	mov	r0, r4
 800eca8:	4629      	mov	r1, r5
 800ecaa:	f7f1 fc71 	bl	8000590 <__aeabi_dmul>
 800ecae:	a33e      	add	r3, pc, #248	@ (adr r3, 800eda8 <__kernel_cos+0x148>)
 800ecb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb4:	f7f1 fab6 	bl	8000224 <__adddf3>
 800ecb8:	4622      	mov	r2, r4
 800ecba:	462b      	mov	r3, r5
 800ecbc:	f7f1 fc68 	bl	8000590 <__aeabi_dmul>
 800ecc0:	a33b      	add	r3, pc, #236	@ (adr r3, 800edb0 <__kernel_cos+0x150>)
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	f7f1 faab 	bl	8000220 <__aeabi_dsub>
 800ecca:	4622      	mov	r2, r4
 800eccc:	462b      	mov	r3, r5
 800ecce:	f7f1 fc5f 	bl	8000590 <__aeabi_dmul>
 800ecd2:	a339      	add	r3, pc, #228	@ (adr r3, 800edb8 <__kernel_cos+0x158>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	f7f1 faa4 	bl	8000224 <__adddf3>
 800ecdc:	4622      	mov	r2, r4
 800ecde:	462b      	mov	r3, r5
 800ece0:	f7f1 fc56 	bl	8000590 <__aeabi_dmul>
 800ece4:	a336      	add	r3, pc, #216	@ (adr r3, 800edc0 <__kernel_cos+0x160>)
 800ece6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecea:	f7f1 fa99 	bl	8000220 <__aeabi_dsub>
 800ecee:	4622      	mov	r2, r4
 800ecf0:	462b      	mov	r3, r5
 800ecf2:	f7f1 fc4d 	bl	8000590 <__aeabi_dmul>
 800ecf6:	a334      	add	r3, pc, #208	@ (adr r3, 800edc8 <__kernel_cos+0x168>)
 800ecf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecfc:	f7f1 fa92 	bl	8000224 <__adddf3>
 800ed00:	4622      	mov	r2, r4
 800ed02:	462b      	mov	r3, r5
 800ed04:	f7f1 fc44 	bl	8000590 <__aeabi_dmul>
 800ed08:	4622      	mov	r2, r4
 800ed0a:	462b      	mov	r3, r5
 800ed0c:	f7f1 fc40 	bl	8000590 <__aeabi_dmul>
 800ed10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed14:	4604      	mov	r4, r0
 800ed16:	460d      	mov	r5, r1
 800ed18:	4630      	mov	r0, r6
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	f7f1 fc38 	bl	8000590 <__aeabi_dmul>
 800ed20:	460b      	mov	r3, r1
 800ed22:	4602      	mov	r2, r0
 800ed24:	4629      	mov	r1, r5
 800ed26:	4620      	mov	r0, r4
 800ed28:	f7f1 fa7a 	bl	8000220 <__aeabi_dsub>
 800ed2c:	4b2b      	ldr	r3, [pc, #172]	@ (800eddc <__kernel_cos+0x17c>)
 800ed2e:	4598      	cmp	r8, r3
 800ed30:	4606      	mov	r6, r0
 800ed32:	460f      	mov	r7, r1
 800ed34:	d810      	bhi.n	800ed58 <__kernel_cos+0xf8>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
 800ed3a:	4650      	mov	r0, sl
 800ed3c:	4659      	mov	r1, fp
 800ed3e:	f7f1 fa6f 	bl	8000220 <__aeabi_dsub>
 800ed42:	460b      	mov	r3, r1
 800ed44:	4926      	ldr	r1, [pc, #152]	@ (800ede0 <__kernel_cos+0x180>)
 800ed46:	4602      	mov	r2, r0
 800ed48:	2000      	movs	r0, #0
 800ed4a:	f7f1 fa69 	bl	8000220 <__aeabi_dsub>
 800ed4e:	ec41 0b10 	vmov	d0, r0, r1
 800ed52:	b003      	add	sp, #12
 800ed54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed58:	4b22      	ldr	r3, [pc, #136]	@ (800ede4 <__kernel_cos+0x184>)
 800ed5a:	4921      	ldr	r1, [pc, #132]	@ (800ede0 <__kernel_cos+0x180>)
 800ed5c:	4598      	cmp	r8, r3
 800ed5e:	bf8c      	ite	hi
 800ed60:	4d21      	ldrhi	r5, [pc, #132]	@ (800ede8 <__kernel_cos+0x188>)
 800ed62:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800ed66:	2400      	movs	r4, #0
 800ed68:	4622      	mov	r2, r4
 800ed6a:	462b      	mov	r3, r5
 800ed6c:	2000      	movs	r0, #0
 800ed6e:	f7f1 fa57 	bl	8000220 <__aeabi_dsub>
 800ed72:	4622      	mov	r2, r4
 800ed74:	4680      	mov	r8, r0
 800ed76:	4689      	mov	r9, r1
 800ed78:	462b      	mov	r3, r5
 800ed7a:	4650      	mov	r0, sl
 800ed7c:	4659      	mov	r1, fp
 800ed7e:	f7f1 fa4f 	bl	8000220 <__aeabi_dsub>
 800ed82:	4632      	mov	r2, r6
 800ed84:	463b      	mov	r3, r7
 800ed86:	f7f1 fa4b 	bl	8000220 <__aeabi_dsub>
 800ed8a:	4602      	mov	r2, r0
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4640      	mov	r0, r8
 800ed90:	4649      	mov	r1, r9
 800ed92:	e7da      	b.n	800ed4a <__kernel_cos+0xea>
 800ed94:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800edd0 <__kernel_cos+0x170>
 800ed98:	e7db      	b.n	800ed52 <__kernel_cos+0xf2>
 800ed9a:	bf00      	nop
 800ed9c:	f3af 8000 	nop.w
 800eda0:	be8838d4 	.word	0xbe8838d4
 800eda4:	bda8fae9 	.word	0xbda8fae9
 800eda8:	bdb4b1c4 	.word	0xbdb4b1c4
 800edac:	3e21ee9e 	.word	0x3e21ee9e
 800edb0:	809c52ad 	.word	0x809c52ad
 800edb4:	3e927e4f 	.word	0x3e927e4f
 800edb8:	19cb1590 	.word	0x19cb1590
 800edbc:	3efa01a0 	.word	0x3efa01a0
 800edc0:	16c15177 	.word	0x16c15177
 800edc4:	3f56c16c 	.word	0x3f56c16c
 800edc8:	5555554c 	.word	0x5555554c
 800edcc:	3fa55555 	.word	0x3fa55555
 800edd0:	00000000 	.word	0x00000000
 800edd4:	3ff00000 	.word	0x3ff00000
 800edd8:	3fe00000 	.word	0x3fe00000
 800eddc:	3fd33332 	.word	0x3fd33332
 800ede0:	3ff00000 	.word	0x3ff00000
 800ede4:	3fe90000 	.word	0x3fe90000
 800ede8:	3fd20000 	.word	0x3fd20000
 800edec:	00000000 	.word	0x00000000

0800edf0 <__kernel_sin>:
 800edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	ec55 4b10 	vmov	r4, r5, d0
 800edf8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800edfc:	b085      	sub	sp, #20
 800edfe:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800ee02:	ed8d 1b02 	vstr	d1, [sp, #8]
 800ee06:	4680      	mov	r8, r0
 800ee08:	d205      	bcs.n	800ee16 <__kernel_sin+0x26>
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	f7f1 fe59 	bl	8000ac4 <__aeabi_d2iz>
 800ee12:	2800      	cmp	r0, #0
 800ee14:	d052      	beq.n	800eebc <__kernel_sin+0xcc>
 800ee16:	4622      	mov	r2, r4
 800ee18:	462b      	mov	r3, r5
 800ee1a:	4620      	mov	r0, r4
 800ee1c:	4629      	mov	r1, r5
 800ee1e:	f7f1 fbb7 	bl	8000590 <__aeabi_dmul>
 800ee22:	4682      	mov	sl, r0
 800ee24:	468b      	mov	fp, r1
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	f7f1 fbaf 	bl	8000590 <__aeabi_dmul>
 800ee32:	a342      	add	r3, pc, #264	@ (adr r3, 800ef3c <__kernel_sin+0x14c>)
 800ee34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee38:	e9cd 0100 	strd	r0, r1, [sp]
 800ee3c:	4650      	mov	r0, sl
 800ee3e:	4659      	mov	r1, fp
 800ee40:	f7f1 fba6 	bl	8000590 <__aeabi_dmul>
 800ee44:	a33f      	add	r3, pc, #252	@ (adr r3, 800ef44 <__kernel_sin+0x154>)
 800ee46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee4a:	f7f1 f9e9 	bl	8000220 <__aeabi_dsub>
 800ee4e:	4652      	mov	r2, sl
 800ee50:	465b      	mov	r3, fp
 800ee52:	f7f1 fb9d 	bl	8000590 <__aeabi_dmul>
 800ee56:	a33d      	add	r3, pc, #244	@ (adr r3, 800ef4c <__kernel_sin+0x15c>)
 800ee58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee5c:	f7f1 f9e2 	bl	8000224 <__adddf3>
 800ee60:	4652      	mov	r2, sl
 800ee62:	465b      	mov	r3, fp
 800ee64:	f7f1 fb94 	bl	8000590 <__aeabi_dmul>
 800ee68:	a33a      	add	r3, pc, #232	@ (adr r3, 800ef54 <__kernel_sin+0x164>)
 800ee6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6e:	f7f1 f9d7 	bl	8000220 <__aeabi_dsub>
 800ee72:	4652      	mov	r2, sl
 800ee74:	465b      	mov	r3, fp
 800ee76:	f7f1 fb8b 	bl	8000590 <__aeabi_dmul>
 800ee7a:	a338      	add	r3, pc, #224	@ (adr r3, 800ef5c <__kernel_sin+0x16c>)
 800ee7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee80:	f7f1 f9d0 	bl	8000224 <__adddf3>
 800ee84:	4606      	mov	r6, r0
 800ee86:	460f      	mov	r7, r1
 800ee88:	f1b8 0f00 	cmp.w	r8, #0
 800ee8c:	d11b      	bne.n	800eec6 <__kernel_sin+0xd6>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
 800ee92:	4650      	mov	r0, sl
 800ee94:	4659      	mov	r1, fp
 800ee96:	f7f1 fb7b 	bl	8000590 <__aeabi_dmul>
 800ee9a:	a325      	add	r3, pc, #148	@ (adr r3, 800ef30 <__kernel_sin+0x140>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	f7f1 f9be 	bl	8000220 <__aeabi_dsub>
 800eea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eea8:	f7f1 fb72 	bl	8000590 <__aeabi_dmul>
 800eeac:	4602      	mov	r2, r0
 800eeae:	460b      	mov	r3, r1
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	4629      	mov	r1, r5
 800eeb4:	f7f1 f9b6 	bl	8000224 <__adddf3>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	460d      	mov	r5, r1
 800eebc:	ec45 4b10 	vmov	d0, r4, r5
 800eec0:	b005      	add	sp, #20
 800eec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eeca:	4b1b      	ldr	r3, [pc, #108]	@ (800ef38 <__kernel_sin+0x148>)
 800eecc:	2200      	movs	r2, #0
 800eece:	f7f1 fb5f 	bl	8000590 <__aeabi_dmul>
 800eed2:	4632      	mov	r2, r6
 800eed4:	4680      	mov	r8, r0
 800eed6:	4689      	mov	r9, r1
 800eed8:	463b      	mov	r3, r7
 800eeda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eede:	f7f1 fb57 	bl	8000590 <__aeabi_dmul>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4640      	mov	r0, r8
 800eee8:	4649      	mov	r1, r9
 800eeea:	f7f1 f999 	bl	8000220 <__aeabi_dsub>
 800eeee:	4652      	mov	r2, sl
 800eef0:	465b      	mov	r3, fp
 800eef2:	f7f1 fb4d 	bl	8000590 <__aeabi_dmul>
 800eef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eefa:	f7f1 f991 	bl	8000220 <__aeabi_dsub>
 800eefe:	a30c      	add	r3, pc, #48	@ (adr r3, 800ef30 <__kernel_sin+0x140>)
 800ef00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef04:	4606      	mov	r6, r0
 800ef06:	460f      	mov	r7, r1
 800ef08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef0c:	f7f1 fb40 	bl	8000590 <__aeabi_dmul>
 800ef10:	4602      	mov	r2, r0
 800ef12:	460b      	mov	r3, r1
 800ef14:	4630      	mov	r0, r6
 800ef16:	4639      	mov	r1, r7
 800ef18:	f7f1 f984 	bl	8000224 <__adddf3>
 800ef1c:	4602      	mov	r2, r0
 800ef1e:	460b      	mov	r3, r1
 800ef20:	4620      	mov	r0, r4
 800ef22:	4629      	mov	r1, r5
 800ef24:	f7f1 f97c 	bl	8000220 <__aeabi_dsub>
 800ef28:	e7c6      	b.n	800eeb8 <__kernel_sin+0xc8>
 800ef2a:	bf00      	nop
 800ef2c:	f3af 8000 	nop.w
 800ef30:	55555549 	.word	0x55555549
 800ef34:	3fc55555 	.word	0x3fc55555
 800ef38:	3fe00000 	.word	0x3fe00000
 800ef3c:	5acfd57c 	.word	0x5acfd57c
 800ef40:	3de5d93a 	.word	0x3de5d93a
 800ef44:	8a2b9ceb 	.word	0x8a2b9ceb
 800ef48:	3e5ae5e6 	.word	0x3e5ae5e6
 800ef4c:	57b1fe7d 	.word	0x57b1fe7d
 800ef50:	3ec71de3 	.word	0x3ec71de3
 800ef54:	19c161d5 	.word	0x19c161d5
 800ef58:	3f2a01a0 	.word	0x3f2a01a0
 800ef5c:	1110f8a6 	.word	0x1110f8a6
 800ef60:	3f811111 	.word	0x3f811111
 800ef64:	00000000 	.word	0x00000000

0800ef68 <__ieee754_rem_pio2>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	ec57 6b10 	vmov	r6, r7, d0
 800ef70:	4bc5      	ldr	r3, [pc, #788]	@ (800f288 <__ieee754_rem_pio2+0x320>)
 800ef72:	b08d      	sub	sp, #52	@ 0x34
 800ef74:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ef78:	4598      	cmp	r8, r3
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	9704      	str	r7, [sp, #16]
 800ef7e:	d807      	bhi.n	800ef90 <__ieee754_rem_pio2+0x28>
 800ef80:	2200      	movs	r2, #0
 800ef82:	2300      	movs	r3, #0
 800ef84:	ed80 0b00 	vstr	d0, [r0]
 800ef88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ef8c:	2500      	movs	r5, #0
 800ef8e:	e028      	b.n	800efe2 <__ieee754_rem_pio2+0x7a>
 800ef90:	4bbe      	ldr	r3, [pc, #760]	@ (800f28c <__ieee754_rem_pio2+0x324>)
 800ef92:	4598      	cmp	r8, r3
 800ef94:	d878      	bhi.n	800f088 <__ieee754_rem_pio2+0x120>
 800ef96:	9b04      	ldr	r3, [sp, #16]
 800ef98:	4dbd      	ldr	r5, [pc, #756]	@ (800f290 <__ieee754_rem_pio2+0x328>)
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800f250 <__ieee754_rem_pio2+0x2e8>)
 800efa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa4:	4639      	mov	r1, r7
 800efa6:	dd38      	ble.n	800f01a <__ieee754_rem_pio2+0xb2>
 800efa8:	f7f1 f93a 	bl	8000220 <__aeabi_dsub>
 800efac:	45a8      	cmp	r8, r5
 800efae:	4606      	mov	r6, r0
 800efb0:	460f      	mov	r7, r1
 800efb2:	d01a      	beq.n	800efea <__ieee754_rem_pio2+0x82>
 800efb4:	a3a8      	add	r3, pc, #672	@ (adr r3, 800f258 <__ieee754_rem_pio2+0x2f0>)
 800efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efba:	f7f1 f931 	bl	8000220 <__aeabi_dsub>
 800efbe:	4602      	mov	r2, r0
 800efc0:	460b      	mov	r3, r1
 800efc2:	4680      	mov	r8, r0
 800efc4:	4689      	mov	r9, r1
 800efc6:	4630      	mov	r0, r6
 800efc8:	4639      	mov	r1, r7
 800efca:	f7f1 f929 	bl	8000220 <__aeabi_dsub>
 800efce:	a3a2      	add	r3, pc, #648	@ (adr r3, 800f258 <__ieee754_rem_pio2+0x2f0>)
 800efd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd4:	f7f1 f924 	bl	8000220 <__aeabi_dsub>
 800efd8:	e9c4 8900 	strd	r8, r9, [r4]
 800efdc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800efe0:	2501      	movs	r5, #1
 800efe2:	4628      	mov	r0, r5
 800efe4:	b00d      	add	sp, #52	@ 0x34
 800efe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efea:	a39d      	add	r3, pc, #628	@ (adr r3, 800f260 <__ieee754_rem_pio2+0x2f8>)
 800efec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff0:	f7f1 f916 	bl	8000220 <__aeabi_dsub>
 800eff4:	a39c      	add	r3, pc, #624	@ (adr r3, 800f268 <__ieee754_rem_pio2+0x300>)
 800eff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800effa:	4606      	mov	r6, r0
 800effc:	460f      	mov	r7, r1
 800effe:	f7f1 f90f 	bl	8000220 <__aeabi_dsub>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4680      	mov	r8, r0
 800f008:	4689      	mov	r9, r1
 800f00a:	4630      	mov	r0, r6
 800f00c:	4639      	mov	r1, r7
 800f00e:	f7f1 f907 	bl	8000220 <__aeabi_dsub>
 800f012:	a395      	add	r3, pc, #596	@ (adr r3, 800f268 <__ieee754_rem_pio2+0x300>)
 800f014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f018:	e7dc      	b.n	800efd4 <__ieee754_rem_pio2+0x6c>
 800f01a:	f7f1 f903 	bl	8000224 <__adddf3>
 800f01e:	45a8      	cmp	r8, r5
 800f020:	4606      	mov	r6, r0
 800f022:	460f      	mov	r7, r1
 800f024:	d018      	beq.n	800f058 <__ieee754_rem_pio2+0xf0>
 800f026:	a38c      	add	r3, pc, #560	@ (adr r3, 800f258 <__ieee754_rem_pio2+0x2f0>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f8fa 	bl	8000224 <__adddf3>
 800f030:	4602      	mov	r2, r0
 800f032:	460b      	mov	r3, r1
 800f034:	4680      	mov	r8, r0
 800f036:	4689      	mov	r9, r1
 800f038:	4630      	mov	r0, r6
 800f03a:	4639      	mov	r1, r7
 800f03c:	f7f1 f8f0 	bl	8000220 <__aeabi_dsub>
 800f040:	a385      	add	r3, pc, #532	@ (adr r3, 800f258 <__ieee754_rem_pio2+0x2f0>)
 800f042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f046:	f7f1 f8ed 	bl	8000224 <__adddf3>
 800f04a:	f04f 35ff 	mov.w	r5, #4294967295
 800f04e:	e9c4 8900 	strd	r8, r9, [r4]
 800f052:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f056:	e7c4      	b.n	800efe2 <__ieee754_rem_pio2+0x7a>
 800f058:	a381      	add	r3, pc, #516	@ (adr r3, 800f260 <__ieee754_rem_pio2+0x2f8>)
 800f05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05e:	f7f1 f8e1 	bl	8000224 <__adddf3>
 800f062:	a381      	add	r3, pc, #516	@ (adr r3, 800f268 <__ieee754_rem_pio2+0x300>)
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	4606      	mov	r6, r0
 800f06a:	460f      	mov	r7, r1
 800f06c:	f7f1 f8da 	bl	8000224 <__adddf3>
 800f070:	4602      	mov	r2, r0
 800f072:	460b      	mov	r3, r1
 800f074:	4680      	mov	r8, r0
 800f076:	4689      	mov	r9, r1
 800f078:	4630      	mov	r0, r6
 800f07a:	4639      	mov	r1, r7
 800f07c:	f7f1 f8d0 	bl	8000220 <__aeabi_dsub>
 800f080:	a379      	add	r3, pc, #484	@ (adr r3, 800f268 <__ieee754_rem_pio2+0x300>)
 800f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f086:	e7de      	b.n	800f046 <__ieee754_rem_pio2+0xde>
 800f088:	4b82      	ldr	r3, [pc, #520]	@ (800f294 <__ieee754_rem_pio2+0x32c>)
 800f08a:	4598      	cmp	r8, r3
 800f08c:	f200 80d1 	bhi.w	800f232 <__ieee754_rem_pio2+0x2ca>
 800f090:	f000 f966 	bl	800f360 <fabs>
 800f094:	ec57 6b10 	vmov	r6, r7, d0
 800f098:	a375      	add	r3, pc, #468	@ (adr r3, 800f270 <__ieee754_rem_pio2+0x308>)
 800f09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f09e:	4630      	mov	r0, r6
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f7f1 fa75 	bl	8000590 <__aeabi_dmul>
 800f0a6:	4b7c      	ldr	r3, [pc, #496]	@ (800f298 <__ieee754_rem_pio2+0x330>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	f7f1 f8bb 	bl	8000224 <__adddf3>
 800f0ae:	f7f1 fd09 	bl	8000ac4 <__aeabi_d2iz>
 800f0b2:	4605      	mov	r5, r0
 800f0b4:	f7f1 fa02 	bl	80004bc <__aeabi_i2d>
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	460b      	mov	r3, r1
 800f0bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f0c0:	a363      	add	r3, pc, #396	@ (adr r3, 800f250 <__ieee754_rem_pio2+0x2e8>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 fa63 	bl	8000590 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	f7f1 f8a5 	bl	8000220 <__aeabi_dsub>
 800f0d6:	a360      	add	r3, pc, #384	@ (adr r3, 800f258 <__ieee754_rem_pio2+0x2f0>)
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	4682      	mov	sl, r0
 800f0de:	468b      	mov	fp, r1
 800f0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0e4:	f7f1 fa54 	bl	8000590 <__aeabi_dmul>
 800f0e8:	2d1f      	cmp	r5, #31
 800f0ea:	4606      	mov	r6, r0
 800f0ec:	460f      	mov	r7, r1
 800f0ee:	dc0c      	bgt.n	800f10a <__ieee754_rem_pio2+0x1a2>
 800f0f0:	4b6a      	ldr	r3, [pc, #424]	@ (800f29c <__ieee754_rem_pio2+0x334>)
 800f0f2:	1e6a      	subs	r2, r5, #1
 800f0f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f8:	4543      	cmp	r3, r8
 800f0fa:	d006      	beq.n	800f10a <__ieee754_rem_pio2+0x1a2>
 800f0fc:	4632      	mov	r2, r6
 800f0fe:	463b      	mov	r3, r7
 800f100:	4650      	mov	r0, sl
 800f102:	4659      	mov	r1, fp
 800f104:	f7f1 f88c 	bl	8000220 <__aeabi_dsub>
 800f108:	e00e      	b.n	800f128 <__ieee754_rem_pio2+0x1c0>
 800f10a:	463b      	mov	r3, r7
 800f10c:	4632      	mov	r2, r6
 800f10e:	4650      	mov	r0, sl
 800f110:	4659      	mov	r1, fp
 800f112:	f7f1 f885 	bl	8000220 <__aeabi_dsub>
 800f116:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f11a:	9305      	str	r3, [sp, #20]
 800f11c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f120:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800f124:	2b10      	cmp	r3, #16
 800f126:	dc02      	bgt.n	800f12e <__ieee754_rem_pio2+0x1c6>
 800f128:	e9c4 0100 	strd	r0, r1, [r4]
 800f12c:	e039      	b.n	800f1a2 <__ieee754_rem_pio2+0x23a>
 800f12e:	a34c      	add	r3, pc, #304	@ (adr r3, 800f260 <__ieee754_rem_pio2+0x2f8>)
 800f130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f138:	f7f1 fa2a 	bl	8000590 <__aeabi_dmul>
 800f13c:	4606      	mov	r6, r0
 800f13e:	460f      	mov	r7, r1
 800f140:	4602      	mov	r2, r0
 800f142:	460b      	mov	r3, r1
 800f144:	4650      	mov	r0, sl
 800f146:	4659      	mov	r1, fp
 800f148:	f7f1 f86a 	bl	8000220 <__aeabi_dsub>
 800f14c:	4602      	mov	r2, r0
 800f14e:	460b      	mov	r3, r1
 800f150:	4680      	mov	r8, r0
 800f152:	4689      	mov	r9, r1
 800f154:	4650      	mov	r0, sl
 800f156:	4659      	mov	r1, fp
 800f158:	f7f1 f862 	bl	8000220 <__aeabi_dsub>
 800f15c:	4632      	mov	r2, r6
 800f15e:	463b      	mov	r3, r7
 800f160:	f7f1 f85e 	bl	8000220 <__aeabi_dsub>
 800f164:	a340      	add	r3, pc, #256	@ (adr r3, 800f268 <__ieee754_rem_pio2+0x300>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	4606      	mov	r6, r0
 800f16c:	460f      	mov	r7, r1
 800f16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f172:	f7f1 fa0d 	bl	8000590 <__aeabi_dmul>
 800f176:	4632      	mov	r2, r6
 800f178:	463b      	mov	r3, r7
 800f17a:	f7f1 f851 	bl	8000220 <__aeabi_dsub>
 800f17e:	4602      	mov	r2, r0
 800f180:	460b      	mov	r3, r1
 800f182:	4606      	mov	r6, r0
 800f184:	460f      	mov	r7, r1
 800f186:	4640      	mov	r0, r8
 800f188:	4649      	mov	r1, r9
 800f18a:	f7f1 f849 	bl	8000220 <__aeabi_dsub>
 800f18e:	9a05      	ldr	r2, [sp, #20]
 800f190:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f194:	1ad3      	subs	r3, r2, r3
 800f196:	2b31      	cmp	r3, #49	@ 0x31
 800f198:	dc20      	bgt.n	800f1dc <__ieee754_rem_pio2+0x274>
 800f19a:	e9c4 0100 	strd	r0, r1, [r4]
 800f19e:	46c2      	mov	sl, r8
 800f1a0:	46cb      	mov	fp, r9
 800f1a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f1a6:	4650      	mov	r0, sl
 800f1a8:	4642      	mov	r2, r8
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	4659      	mov	r1, fp
 800f1ae:	f7f1 f837 	bl	8000220 <__aeabi_dsub>
 800f1b2:	463b      	mov	r3, r7
 800f1b4:	4632      	mov	r2, r6
 800f1b6:	f7f1 f833 	bl	8000220 <__aeabi_dsub>
 800f1ba:	9b04      	ldr	r3, [sp, #16]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f1c2:	f6bf af0e 	bge.w	800efe2 <__ieee754_rem_pio2+0x7a>
 800f1c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800f1ca:	6063      	str	r3, [r4, #4]
 800f1cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f1d0:	f8c4 8000 	str.w	r8, [r4]
 800f1d4:	60a0      	str	r0, [r4, #8]
 800f1d6:	60e3      	str	r3, [r4, #12]
 800f1d8:	426d      	negs	r5, r5
 800f1da:	e702      	b.n	800efe2 <__ieee754_rem_pio2+0x7a>
 800f1dc:	a326      	add	r3, pc, #152	@ (adr r3, 800f278 <__ieee754_rem_pio2+0x310>)
 800f1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f1e6:	f7f1 f9d3 	bl	8000590 <__aeabi_dmul>
 800f1ea:	4606      	mov	r6, r0
 800f1ec:	460f      	mov	r7, r1
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4640      	mov	r0, r8
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	f7f1 f813 	bl	8000220 <__aeabi_dsub>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4682      	mov	sl, r0
 800f200:	468b      	mov	fp, r1
 800f202:	4640      	mov	r0, r8
 800f204:	4649      	mov	r1, r9
 800f206:	f7f1 f80b 	bl	8000220 <__aeabi_dsub>
 800f20a:	4632      	mov	r2, r6
 800f20c:	463b      	mov	r3, r7
 800f20e:	f7f1 f807 	bl	8000220 <__aeabi_dsub>
 800f212:	a31b      	add	r3, pc, #108	@ (adr r3, 800f280 <__ieee754_rem_pio2+0x318>)
 800f214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f218:	4606      	mov	r6, r0
 800f21a:	460f      	mov	r7, r1
 800f21c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f220:	f7f1 f9b6 	bl	8000590 <__aeabi_dmul>
 800f224:	4632      	mov	r2, r6
 800f226:	463b      	mov	r3, r7
 800f228:	f7f0 fffa 	bl	8000220 <__aeabi_dsub>
 800f22c:	4606      	mov	r6, r0
 800f22e:	460f      	mov	r7, r1
 800f230:	e764      	b.n	800f0fc <__ieee754_rem_pio2+0x194>
 800f232:	4b1b      	ldr	r3, [pc, #108]	@ (800f2a0 <__ieee754_rem_pio2+0x338>)
 800f234:	4598      	cmp	r8, r3
 800f236:	d935      	bls.n	800f2a4 <__ieee754_rem_pio2+0x33c>
 800f238:	4632      	mov	r2, r6
 800f23a:	463b      	mov	r3, r7
 800f23c:	4630      	mov	r0, r6
 800f23e:	4639      	mov	r1, r7
 800f240:	f7f0 ffee 	bl	8000220 <__aeabi_dsub>
 800f244:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f248:	e9c4 0100 	strd	r0, r1, [r4]
 800f24c:	e69e      	b.n	800ef8c <__ieee754_rem_pio2+0x24>
 800f24e:	bf00      	nop
 800f250:	54400000 	.word	0x54400000
 800f254:	3ff921fb 	.word	0x3ff921fb
 800f258:	1a626331 	.word	0x1a626331
 800f25c:	3dd0b461 	.word	0x3dd0b461
 800f260:	1a600000 	.word	0x1a600000
 800f264:	3dd0b461 	.word	0x3dd0b461
 800f268:	2e037073 	.word	0x2e037073
 800f26c:	3ba3198a 	.word	0x3ba3198a
 800f270:	6dc9c883 	.word	0x6dc9c883
 800f274:	3fe45f30 	.word	0x3fe45f30
 800f278:	2e000000 	.word	0x2e000000
 800f27c:	3ba3198a 	.word	0x3ba3198a
 800f280:	252049c1 	.word	0x252049c1
 800f284:	397b839a 	.word	0x397b839a
 800f288:	3fe921fb 	.word	0x3fe921fb
 800f28c:	4002d97b 	.word	0x4002d97b
 800f290:	3ff921fb 	.word	0x3ff921fb
 800f294:	413921fb 	.word	0x413921fb
 800f298:	3fe00000 	.word	0x3fe00000
 800f29c:	08010750 	.word	0x08010750
 800f2a0:	7fefffff 	.word	0x7fefffff
 800f2a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800f2a8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800f2ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800f2b0:	4630      	mov	r0, r6
 800f2b2:	460f      	mov	r7, r1
 800f2b4:	f7f1 fc06 	bl	8000ac4 <__aeabi_d2iz>
 800f2b8:	f7f1 f900 	bl	80004bc <__aeabi_i2d>
 800f2bc:	4602      	mov	r2, r0
 800f2be:	460b      	mov	r3, r1
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	4639      	mov	r1, r7
 800f2c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f2c8:	f7f0 ffaa 	bl	8000220 <__aeabi_dsub>
 800f2cc:	4b22      	ldr	r3, [pc, #136]	@ (800f358 <__ieee754_rem_pio2+0x3f0>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f7f1 f95e 	bl	8000590 <__aeabi_dmul>
 800f2d4:	460f      	mov	r7, r1
 800f2d6:	4606      	mov	r6, r0
 800f2d8:	f7f1 fbf4 	bl	8000ac4 <__aeabi_d2iz>
 800f2dc:	f7f1 f8ee 	bl	80004bc <__aeabi_i2d>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f2ec:	f7f0 ff98 	bl	8000220 <__aeabi_dsub>
 800f2f0:	4b19      	ldr	r3, [pc, #100]	@ (800f358 <__ieee754_rem_pio2+0x3f0>)
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	f7f1 f94c 	bl	8000590 <__aeabi_dmul>
 800f2f8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800f2fc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800f300:	f04f 0803 	mov.w	r8, #3
 800f304:	2600      	movs	r6, #0
 800f306:	2700      	movs	r7, #0
 800f308:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800f30c:	4632      	mov	r2, r6
 800f30e:	463b      	mov	r3, r7
 800f310:	46c2      	mov	sl, r8
 800f312:	f108 38ff 	add.w	r8, r8, #4294967295
 800f316:	f7f1 fba3 	bl	8000a60 <__aeabi_dcmpeq>
 800f31a:	2800      	cmp	r0, #0
 800f31c:	d1f4      	bne.n	800f308 <__ieee754_rem_pio2+0x3a0>
 800f31e:	4b0f      	ldr	r3, [pc, #60]	@ (800f35c <__ieee754_rem_pio2+0x3f4>)
 800f320:	9301      	str	r3, [sp, #4]
 800f322:	2302      	movs	r3, #2
 800f324:	9300      	str	r3, [sp, #0]
 800f326:	462a      	mov	r2, r5
 800f328:	4653      	mov	r3, sl
 800f32a:	4621      	mov	r1, r4
 800f32c:	a806      	add	r0, sp, #24
 800f32e:	f000 fb5b 	bl	800f9e8 <__kernel_rem_pio2>
 800f332:	9b04      	ldr	r3, [sp, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	4605      	mov	r5, r0
 800f338:	f6bf ae53 	bge.w	800efe2 <__ieee754_rem_pio2+0x7a>
 800f33c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800f340:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f344:	e9c4 2300 	strd	r2, r3, [r4]
 800f348:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800f34c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f350:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f354:	e740      	b.n	800f1d8 <__ieee754_rem_pio2+0x270>
 800f356:	bf00      	nop
 800f358:	41700000 	.word	0x41700000
 800f35c:	080107d0 	.word	0x080107d0

0800f360 <fabs>:
 800f360:	ec51 0b10 	vmov	r0, r1, d0
 800f364:	4602      	mov	r2, r0
 800f366:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f36a:	ec43 2b10 	vmov	d0, r2, r3
 800f36e:	4770      	bx	lr

0800f370 <__kernel_cosf>:
 800f370:	ee10 3a10 	vmov	r3, s0
 800f374:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f378:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f37c:	eef0 6a40 	vmov.f32	s13, s0
 800f380:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f384:	d204      	bcs.n	800f390 <__kernel_cosf+0x20>
 800f386:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f38a:	ee17 2a90 	vmov	r2, s15
 800f38e:	b342      	cbz	r2, 800f3e2 <__kernel_cosf+0x72>
 800f390:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f394:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f400 <__kernel_cosf+0x90>
 800f398:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f404 <__kernel_cosf+0x94>
 800f39c:	4a1a      	ldr	r2, [pc, #104]	@ (800f408 <__kernel_cosf+0x98>)
 800f39e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f40c <__kernel_cosf+0x9c>
 800f3a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3ac:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f410 <__kernel_cosf+0xa0>
 800f3b0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f3b4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f414 <__kernel_cosf+0xa4>
 800f3b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f3bc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f418 <__kernel_cosf+0xa8>
 800f3c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f3c4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f3c8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f3cc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f3d0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f3d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3d8:	d804      	bhi.n	800f3e4 <__kernel_cosf+0x74>
 800f3da:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f3de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f3e2:	4770      	bx	lr
 800f3e4:	4a0d      	ldr	r2, [pc, #52]	@ (800f41c <__kernel_cosf+0xac>)
 800f3e6:	4293      	cmp	r3, r2
 800f3e8:	bf9a      	itte	ls
 800f3ea:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f3ee:	ee07 3a10 	vmovls	s14, r3
 800f3f2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f3f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f3fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f3fe:	e7ec      	b.n	800f3da <__kernel_cosf+0x6a>
 800f400:	ad47d74e 	.word	0xad47d74e
 800f404:	310f74f6 	.word	0x310f74f6
 800f408:	3e999999 	.word	0x3e999999
 800f40c:	b493f27c 	.word	0xb493f27c
 800f410:	37d00d01 	.word	0x37d00d01
 800f414:	bab60b61 	.word	0xbab60b61
 800f418:	3d2aaaab 	.word	0x3d2aaaab
 800f41c:	3f480000 	.word	0x3f480000

0800f420 <__kernel_sinf>:
 800f420:	ee10 3a10 	vmov	r3, s0
 800f424:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f428:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f42c:	d204      	bcs.n	800f438 <__kernel_sinf+0x18>
 800f42e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f432:	ee17 3a90 	vmov	r3, s15
 800f436:	b35b      	cbz	r3, 800f490 <__kernel_sinf+0x70>
 800f438:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f43c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f494 <__kernel_sinf+0x74>
 800f440:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f498 <__kernel_sinf+0x78>
 800f444:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f448:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f49c <__kernel_sinf+0x7c>
 800f44c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f450:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f4a0 <__kernel_sinf+0x80>
 800f454:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f458:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f4a4 <__kernel_sinf+0x84>
 800f45c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f460:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f464:	b930      	cbnz	r0, 800f474 <__kernel_sinf+0x54>
 800f466:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f4a8 <__kernel_sinf+0x88>
 800f46a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f46e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f472:	4770      	bx	lr
 800f474:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f478:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f47c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f480:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f484:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f4ac <__kernel_sinf+0x8c>
 800f488:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f48c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f490:	4770      	bx	lr
 800f492:	bf00      	nop
 800f494:	2f2ec9d3 	.word	0x2f2ec9d3
 800f498:	b2d72f34 	.word	0xb2d72f34
 800f49c:	3638ef1b 	.word	0x3638ef1b
 800f4a0:	b9500d01 	.word	0xb9500d01
 800f4a4:	3c088889 	.word	0x3c088889
 800f4a8:	be2aaaab 	.word	0xbe2aaaab
 800f4ac:	3e2aaaab 	.word	0x3e2aaaab

0800f4b0 <__ieee754_fmodf>:
 800f4b0:	b570      	push	{r4, r5, r6, lr}
 800f4b2:	ee10 6a90 	vmov	r6, s1
 800f4b6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f4ba:	1e5a      	subs	r2, r3, #1
 800f4bc:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f4c0:	d206      	bcs.n	800f4d0 <__ieee754_fmodf+0x20>
 800f4c2:	ee10 4a10 	vmov	r4, s0
 800f4c6:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800f4ca:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f4ce:	d304      	bcc.n	800f4da <__ieee754_fmodf+0x2a>
 800f4d0:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f4d4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f4d8:	bd70      	pop	{r4, r5, r6, pc}
 800f4da:	4299      	cmp	r1, r3
 800f4dc:	dbfc      	blt.n	800f4d8 <__ieee754_fmodf+0x28>
 800f4de:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800f4e2:	d105      	bne.n	800f4f0 <__ieee754_fmodf+0x40>
 800f4e4:	4b32      	ldr	r3, [pc, #200]	@ (800f5b0 <__ieee754_fmodf+0x100>)
 800f4e6:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800f4ea:	ed93 0a00 	vldr	s0, [r3]
 800f4ee:	e7f3      	b.n	800f4d8 <__ieee754_fmodf+0x28>
 800f4f0:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800f4f4:	d146      	bne.n	800f584 <__ieee754_fmodf+0xd4>
 800f4f6:	020a      	lsls	r2, r1, #8
 800f4f8:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800f4fc:	2a00      	cmp	r2, #0
 800f4fe:	dc3e      	bgt.n	800f57e <__ieee754_fmodf+0xce>
 800f500:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f504:	bf01      	itttt	eq
 800f506:	021a      	lsleq	r2, r3, #8
 800f508:	fab2 f282 	clzeq	r2, r2
 800f50c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800f510:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800f514:	bf16      	itet	ne
 800f516:	15da      	asrne	r2, r3, #23
 800f518:	3282      	addeq	r2, #130	@ 0x82
 800f51a:	3a7f      	subne	r2, #127	@ 0x7f
 800f51c:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800f520:	bfbb      	ittet	lt
 800f522:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800f526:	1a24      	sublt	r4, r4, r0
 800f528:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800f52c:	40a1      	lsllt	r1, r4
 800f52e:	bfa8      	it	ge
 800f530:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800f534:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f538:	bfb5      	itete	lt
 800f53a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800f53e:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800f542:	1aa4      	sublt	r4, r4, r2
 800f544:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800f548:	bfb8      	it	lt
 800f54a:	fa03 f404 	lsllt.w	r4, r3, r4
 800f54e:	1a80      	subs	r0, r0, r2
 800f550:	1b0b      	subs	r3, r1, r4
 800f552:	b9d0      	cbnz	r0, 800f58a <__ieee754_fmodf+0xda>
 800f554:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800f558:	bf28      	it	cs
 800f55a:	460b      	movcs	r3, r1
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d0c1      	beq.n	800f4e4 <__ieee754_fmodf+0x34>
 800f560:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f564:	db19      	blt.n	800f59a <__ieee754_fmodf+0xea>
 800f566:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f56a:	db19      	blt.n	800f5a0 <__ieee754_fmodf+0xf0>
 800f56c:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800f570:	327f      	adds	r2, #127	@ 0x7f
 800f572:	432b      	orrs	r3, r5
 800f574:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f578:	ee00 3a10 	vmov	s0, r3
 800f57c:	e7ac      	b.n	800f4d8 <__ieee754_fmodf+0x28>
 800f57e:	3801      	subs	r0, #1
 800f580:	0052      	lsls	r2, r2, #1
 800f582:	e7bb      	b.n	800f4fc <__ieee754_fmodf+0x4c>
 800f584:	15c8      	asrs	r0, r1, #23
 800f586:	387f      	subs	r0, #127	@ 0x7f
 800f588:	e7ba      	b.n	800f500 <__ieee754_fmodf+0x50>
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	da02      	bge.n	800f594 <__ieee754_fmodf+0xe4>
 800f58e:	0049      	lsls	r1, r1, #1
 800f590:	3801      	subs	r0, #1
 800f592:	e7dd      	b.n	800f550 <__ieee754_fmodf+0xa0>
 800f594:	d0a6      	beq.n	800f4e4 <__ieee754_fmodf+0x34>
 800f596:	0059      	lsls	r1, r3, #1
 800f598:	e7fa      	b.n	800f590 <__ieee754_fmodf+0xe0>
 800f59a:	005b      	lsls	r3, r3, #1
 800f59c:	3a01      	subs	r2, #1
 800f59e:	e7df      	b.n	800f560 <__ieee754_fmodf+0xb0>
 800f5a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800f5a4:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f5a8:	3282      	adds	r2, #130	@ 0x82
 800f5aa:	4113      	asrs	r3, r2
 800f5ac:	432b      	orrs	r3, r5
 800f5ae:	e7e3      	b.n	800f578 <__ieee754_fmodf+0xc8>
 800f5b0:	080108d8 	.word	0x080108d8

0800f5b4 <__ieee754_rem_pio2f>:
 800f5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5b6:	ee10 6a10 	vmov	r6, s0
 800f5ba:	4b88      	ldr	r3, [pc, #544]	@ (800f7dc <__ieee754_rem_pio2f+0x228>)
 800f5bc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f5c0:	429d      	cmp	r5, r3
 800f5c2:	b087      	sub	sp, #28
 800f5c4:	4604      	mov	r4, r0
 800f5c6:	d805      	bhi.n	800f5d4 <__ieee754_rem_pio2f+0x20>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	ed80 0a00 	vstr	s0, [r0]
 800f5ce:	6043      	str	r3, [r0, #4]
 800f5d0:	2000      	movs	r0, #0
 800f5d2:	e022      	b.n	800f61a <__ieee754_rem_pio2f+0x66>
 800f5d4:	4b82      	ldr	r3, [pc, #520]	@ (800f7e0 <__ieee754_rem_pio2f+0x22c>)
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	d83a      	bhi.n	800f650 <__ieee754_rem_pio2f+0x9c>
 800f5da:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f5de:	2e00      	cmp	r6, #0
 800f5e0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f7e4 <__ieee754_rem_pio2f+0x230>
 800f5e4:	4a80      	ldr	r2, [pc, #512]	@ (800f7e8 <__ieee754_rem_pio2f+0x234>)
 800f5e6:	f023 030f 	bic.w	r3, r3, #15
 800f5ea:	dd18      	ble.n	800f61e <__ieee754_rem_pio2f+0x6a>
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f5f2:	bf09      	itett	eq
 800f5f4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f7ec <__ieee754_rem_pio2f+0x238>
 800f5f8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f7f0 <__ieee754_rem_pio2f+0x23c>
 800f5fc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f7f4 <__ieee754_rem_pio2f+0x240>
 800f600:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f604:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f608:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f60c:	ed80 7a00 	vstr	s14, [r0]
 800f610:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f614:	edc0 7a01 	vstr	s15, [r0, #4]
 800f618:	2001      	movs	r0, #1
 800f61a:	b007      	add	sp, #28
 800f61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61e:	4293      	cmp	r3, r2
 800f620:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f624:	bf09      	itett	eq
 800f626:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f7ec <__ieee754_rem_pio2f+0x238>
 800f62a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f7f0 <__ieee754_rem_pio2f+0x23c>
 800f62e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f7f4 <__ieee754_rem_pio2f+0x240>
 800f632:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f636:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f63e:	ed80 7a00 	vstr	s14, [r0]
 800f642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f646:	edc0 7a01 	vstr	s15, [r0, #4]
 800f64a:	f04f 30ff 	mov.w	r0, #4294967295
 800f64e:	e7e4      	b.n	800f61a <__ieee754_rem_pio2f+0x66>
 800f650:	4b69      	ldr	r3, [pc, #420]	@ (800f7f8 <__ieee754_rem_pio2f+0x244>)
 800f652:	429d      	cmp	r5, r3
 800f654:	d873      	bhi.n	800f73e <__ieee754_rem_pio2f+0x18a>
 800f656:	f000 f8dd 	bl	800f814 <fabsf>
 800f65a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f7fc <__ieee754_rem_pio2f+0x248>
 800f65e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f662:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f666:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f66a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f66e:	ee17 0a90 	vmov	r0, s15
 800f672:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f7e4 <__ieee754_rem_pio2f+0x230>
 800f676:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f67a:	281f      	cmp	r0, #31
 800f67c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f7f0 <__ieee754_rem_pio2f+0x23c>
 800f680:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f684:	eeb1 6a47 	vneg.f32	s12, s14
 800f688:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f68c:	ee16 1a90 	vmov	r1, s13
 800f690:	dc09      	bgt.n	800f6a6 <__ieee754_rem_pio2f+0xf2>
 800f692:	4a5b      	ldr	r2, [pc, #364]	@ (800f800 <__ieee754_rem_pio2f+0x24c>)
 800f694:	1e47      	subs	r7, r0, #1
 800f696:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f69a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f69e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d107      	bne.n	800f6b6 <__ieee754_rem_pio2f+0x102>
 800f6a6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f6aa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f6ae:	2a08      	cmp	r2, #8
 800f6b0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f6b4:	dc14      	bgt.n	800f6e0 <__ieee754_rem_pio2f+0x12c>
 800f6b6:	6021      	str	r1, [r4, #0]
 800f6b8:	ed94 7a00 	vldr	s14, [r4]
 800f6bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f6c0:	2e00      	cmp	r6, #0
 800f6c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f6c6:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6ca:	daa6      	bge.n	800f61a <__ieee754_rem_pio2f+0x66>
 800f6cc:	eeb1 7a47 	vneg.f32	s14, s14
 800f6d0:	eeb1 0a40 	vneg.f32	s0, s0
 800f6d4:	ed84 7a00 	vstr	s14, [r4]
 800f6d8:	ed84 0a01 	vstr	s0, [r4, #4]
 800f6dc:	4240      	negs	r0, r0
 800f6de:	e79c      	b.n	800f61a <__ieee754_rem_pio2f+0x66>
 800f6e0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f7ec <__ieee754_rem_pio2f+0x238>
 800f6e4:	eef0 6a40 	vmov.f32	s13, s0
 800f6e8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f6ec:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f6f0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f6f4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f7f4 <__ieee754_rem_pio2f+0x240>
 800f6f8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f6fc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f700:	ee15 2a90 	vmov	r2, s11
 800f704:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f708:	1a5b      	subs	r3, r3, r1
 800f70a:	2b19      	cmp	r3, #25
 800f70c:	dc04      	bgt.n	800f718 <__ieee754_rem_pio2f+0x164>
 800f70e:	edc4 5a00 	vstr	s11, [r4]
 800f712:	eeb0 0a66 	vmov.f32	s0, s13
 800f716:	e7cf      	b.n	800f6b8 <__ieee754_rem_pio2f+0x104>
 800f718:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f804 <__ieee754_rem_pio2f+0x250>
 800f71c:	eeb0 0a66 	vmov.f32	s0, s13
 800f720:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f724:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f728:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f808 <__ieee754_rem_pio2f+0x254>
 800f72c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f730:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f734:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f738:	ed84 7a00 	vstr	s14, [r4]
 800f73c:	e7bc      	b.n	800f6b8 <__ieee754_rem_pio2f+0x104>
 800f73e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f742:	d306      	bcc.n	800f752 <__ieee754_rem_pio2f+0x19e>
 800f744:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f748:	edc0 7a01 	vstr	s15, [r0, #4]
 800f74c:	edc0 7a00 	vstr	s15, [r0]
 800f750:	e73e      	b.n	800f5d0 <__ieee754_rem_pio2f+0x1c>
 800f752:	15ea      	asrs	r2, r5, #23
 800f754:	3a86      	subs	r2, #134	@ 0x86
 800f756:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f75a:	ee07 3a90 	vmov	s15, r3
 800f75e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f762:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f80c <__ieee754_rem_pio2f+0x258>
 800f766:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f76a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f76e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f772:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f776:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f77a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f77e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f782:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f786:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f78a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f78e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f792:	edcd 7a05 	vstr	s15, [sp, #20]
 800f796:	d11e      	bne.n	800f7d6 <__ieee754_rem_pio2f+0x222>
 800f798:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a0:	bf0c      	ite	eq
 800f7a2:	2301      	moveq	r3, #1
 800f7a4:	2302      	movne	r3, #2
 800f7a6:	491a      	ldr	r1, [pc, #104]	@ (800f810 <__ieee754_rem_pio2f+0x25c>)
 800f7a8:	9101      	str	r1, [sp, #4]
 800f7aa:	2102      	movs	r1, #2
 800f7ac:	9100      	str	r1, [sp, #0]
 800f7ae:	a803      	add	r0, sp, #12
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	f000 fc69 	bl	8010088 <__kernel_rem_pio2f>
 800f7b6:	2e00      	cmp	r6, #0
 800f7b8:	f6bf af2f 	bge.w	800f61a <__ieee754_rem_pio2f+0x66>
 800f7bc:	edd4 7a00 	vldr	s15, [r4]
 800f7c0:	eef1 7a67 	vneg.f32	s15, s15
 800f7c4:	edc4 7a00 	vstr	s15, [r4]
 800f7c8:	edd4 7a01 	vldr	s15, [r4, #4]
 800f7cc:	eef1 7a67 	vneg.f32	s15, s15
 800f7d0:	edc4 7a01 	vstr	s15, [r4, #4]
 800f7d4:	e782      	b.n	800f6dc <__ieee754_rem_pio2f+0x128>
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	e7e5      	b.n	800f7a6 <__ieee754_rem_pio2f+0x1f2>
 800f7da:	bf00      	nop
 800f7dc:	3f490fd8 	.word	0x3f490fd8
 800f7e0:	4016cbe3 	.word	0x4016cbe3
 800f7e4:	3fc90f80 	.word	0x3fc90f80
 800f7e8:	3fc90fd0 	.word	0x3fc90fd0
 800f7ec:	37354400 	.word	0x37354400
 800f7f0:	37354443 	.word	0x37354443
 800f7f4:	2e85a308 	.word	0x2e85a308
 800f7f8:	43490f80 	.word	0x43490f80
 800f7fc:	3f22f984 	.word	0x3f22f984
 800f800:	080108e0 	.word	0x080108e0
 800f804:	2e85a300 	.word	0x2e85a300
 800f808:	248d3132 	.word	0x248d3132
 800f80c:	43800000 	.word	0x43800000
 800f810:	08010960 	.word	0x08010960

0800f814 <fabsf>:
 800f814:	ee10 3a10 	vmov	r3, s0
 800f818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f81c:	ee00 3a10 	vmov	s0, r3
 800f820:	4770      	bx	lr
 800f822:	0000      	movs	r0, r0
 800f824:	0000      	movs	r0, r0
	...

0800f828 <scalbn>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	ec55 4b10 	vmov	r4, r5, d0
 800f82e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f832:	4606      	mov	r6, r0
 800f834:	462b      	mov	r3, r5
 800f836:	b991      	cbnz	r1, 800f85e <scalbn+0x36>
 800f838:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f83c:	4323      	orrs	r3, r4
 800f83e:	d03b      	beq.n	800f8b8 <scalbn+0x90>
 800f840:	4b33      	ldr	r3, [pc, #204]	@ (800f910 <scalbn+0xe8>)
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	2200      	movs	r2, #0
 800f848:	f7f0 fea2 	bl	8000590 <__aeabi_dmul>
 800f84c:	4b31      	ldr	r3, [pc, #196]	@ (800f914 <scalbn+0xec>)
 800f84e:	429e      	cmp	r6, r3
 800f850:	4604      	mov	r4, r0
 800f852:	460d      	mov	r5, r1
 800f854:	da0f      	bge.n	800f876 <scalbn+0x4e>
 800f856:	a326      	add	r3, pc, #152	@ (adr r3, 800f8f0 <scalbn+0xc8>)
 800f858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85c:	e01e      	b.n	800f89c <scalbn+0x74>
 800f85e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f862:	4291      	cmp	r1, r2
 800f864:	d10b      	bne.n	800f87e <scalbn+0x56>
 800f866:	4622      	mov	r2, r4
 800f868:	4620      	mov	r0, r4
 800f86a:	4629      	mov	r1, r5
 800f86c:	f7f0 fcda 	bl	8000224 <__adddf3>
 800f870:	4604      	mov	r4, r0
 800f872:	460d      	mov	r5, r1
 800f874:	e020      	b.n	800f8b8 <scalbn+0x90>
 800f876:	460b      	mov	r3, r1
 800f878:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f87c:	3936      	subs	r1, #54	@ 0x36
 800f87e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f882:	4296      	cmp	r6, r2
 800f884:	dd0d      	ble.n	800f8a2 <scalbn+0x7a>
 800f886:	2d00      	cmp	r5, #0
 800f888:	a11b      	add	r1, pc, #108	@ (adr r1, 800f8f8 <scalbn+0xd0>)
 800f88a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88e:	da02      	bge.n	800f896 <scalbn+0x6e>
 800f890:	a11b      	add	r1, pc, #108	@ (adr r1, 800f900 <scalbn+0xd8>)
 800f892:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f896:	a318      	add	r3, pc, #96	@ (adr r3, 800f8f8 <scalbn+0xd0>)
 800f898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89c:	f7f0 fe78 	bl	8000590 <__aeabi_dmul>
 800f8a0:	e7e6      	b.n	800f870 <scalbn+0x48>
 800f8a2:	1872      	adds	r2, r6, r1
 800f8a4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f8a8:	428a      	cmp	r2, r1
 800f8aa:	dcec      	bgt.n	800f886 <scalbn+0x5e>
 800f8ac:	2a00      	cmp	r2, #0
 800f8ae:	dd06      	ble.n	800f8be <scalbn+0x96>
 800f8b0:	f36f 531e 	bfc	r3, #20, #11
 800f8b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8b8:	ec45 4b10 	vmov	d0, r4, r5
 800f8bc:	bd70      	pop	{r4, r5, r6, pc}
 800f8be:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f8c2:	da08      	bge.n	800f8d6 <scalbn+0xae>
 800f8c4:	2d00      	cmp	r5, #0
 800f8c6:	a10a      	add	r1, pc, #40	@ (adr r1, 800f8f0 <scalbn+0xc8>)
 800f8c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8cc:	dac3      	bge.n	800f856 <scalbn+0x2e>
 800f8ce:	a10e      	add	r1, pc, #56	@ (adr r1, 800f908 <scalbn+0xe0>)
 800f8d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8d4:	e7bf      	b.n	800f856 <scalbn+0x2e>
 800f8d6:	3236      	adds	r2, #54	@ 0x36
 800f8d8:	f36f 531e 	bfc	r3, #20, #11
 800f8dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f918 <scalbn+0xf0>)
 800f8e4:	4629      	mov	r1, r5
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	e7d8      	b.n	800f89c <scalbn+0x74>
 800f8ea:	bf00      	nop
 800f8ec:	f3af 8000 	nop.w
 800f8f0:	c2f8f359 	.word	0xc2f8f359
 800f8f4:	01a56e1f 	.word	0x01a56e1f
 800f8f8:	8800759c 	.word	0x8800759c
 800f8fc:	7e37e43c 	.word	0x7e37e43c
 800f900:	8800759c 	.word	0x8800759c
 800f904:	fe37e43c 	.word	0xfe37e43c
 800f908:	c2f8f359 	.word	0xc2f8f359
 800f90c:	81a56e1f 	.word	0x81a56e1f
 800f910:	43500000 	.word	0x43500000
 800f914:	ffff3cb0 	.word	0xffff3cb0
 800f918:	3c900000 	.word	0x3c900000

0800f91c <scalbnf>:
 800f91c:	ee10 3a10 	vmov	r3, s0
 800f920:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f924:	d02b      	beq.n	800f97e <scalbnf+0x62>
 800f926:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f92a:	d302      	bcc.n	800f932 <scalbnf+0x16>
 800f92c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f930:	4770      	bx	lr
 800f932:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f936:	d123      	bne.n	800f980 <scalbnf+0x64>
 800f938:	4b24      	ldr	r3, [pc, #144]	@ (800f9cc <scalbnf+0xb0>)
 800f93a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f9d0 <scalbnf+0xb4>
 800f93e:	4298      	cmp	r0, r3
 800f940:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f944:	db17      	blt.n	800f976 <scalbnf+0x5a>
 800f946:	ee10 3a10 	vmov	r3, s0
 800f94a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f94e:	3a19      	subs	r2, #25
 800f950:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f954:	4288      	cmp	r0, r1
 800f956:	dd15      	ble.n	800f984 <scalbnf+0x68>
 800f958:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f9d4 <scalbnf+0xb8>
 800f95c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f9d8 <scalbnf+0xbc>
 800f960:	ee10 3a10 	vmov	r3, s0
 800f964:	eeb0 7a67 	vmov.f32	s14, s15
 800f968:	2b00      	cmp	r3, #0
 800f96a:	bfb8      	it	lt
 800f96c:	eef0 7a66 	vmovlt.f32	s15, s13
 800f970:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f974:	4770      	bx	lr
 800f976:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f9dc <scalbnf+0xc0>
 800f97a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f97e:	4770      	bx	lr
 800f980:	0dd2      	lsrs	r2, r2, #23
 800f982:	e7e5      	b.n	800f950 <scalbnf+0x34>
 800f984:	4410      	add	r0, r2
 800f986:	28fe      	cmp	r0, #254	@ 0xfe
 800f988:	dce6      	bgt.n	800f958 <scalbnf+0x3c>
 800f98a:	2800      	cmp	r0, #0
 800f98c:	dd06      	ble.n	800f99c <scalbnf+0x80>
 800f98e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f992:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f996:	ee00 3a10 	vmov	s0, r3
 800f99a:	4770      	bx	lr
 800f99c:	f110 0f16 	cmn.w	r0, #22
 800f9a0:	da09      	bge.n	800f9b6 <scalbnf+0x9a>
 800f9a2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f9dc <scalbnf+0xc0>
 800f9a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f9e0 <scalbnf+0xc4>
 800f9aa:	ee10 3a10 	vmov	r3, s0
 800f9ae:	eeb0 7a67 	vmov.f32	s14, s15
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	e7d9      	b.n	800f96a <scalbnf+0x4e>
 800f9b6:	3019      	adds	r0, #25
 800f9b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f9bc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f9c0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f9e4 <scalbnf+0xc8>
 800f9c4:	ee07 3a90 	vmov	s15, r3
 800f9c8:	e7d7      	b.n	800f97a <scalbnf+0x5e>
 800f9ca:	bf00      	nop
 800f9cc:	ffff3cb0 	.word	0xffff3cb0
 800f9d0:	4c000000 	.word	0x4c000000
 800f9d4:	7149f2ca 	.word	0x7149f2ca
 800f9d8:	f149f2ca 	.word	0xf149f2ca
 800f9dc:	0da24260 	.word	0x0da24260
 800f9e0:	8da24260 	.word	0x8da24260
 800f9e4:	33000000 	.word	0x33000000

0800f9e8 <__kernel_rem_pio2>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	ed2d 8b02 	vpush	{d8}
 800f9f0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f9f4:	f112 0f14 	cmn.w	r2, #20
 800f9f8:	9306      	str	r3, [sp, #24]
 800f9fa:	9104      	str	r1, [sp, #16]
 800f9fc:	4bc2      	ldr	r3, [pc, #776]	@ (800fd08 <__kernel_rem_pio2+0x320>)
 800f9fe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800fa00:	9008      	str	r0, [sp, #32]
 800fa02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa06:	9300      	str	r3, [sp, #0]
 800fa08:	9b06      	ldr	r3, [sp, #24]
 800fa0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800fa0e:	bfa8      	it	ge
 800fa10:	1ed4      	subge	r4, r2, #3
 800fa12:	9305      	str	r3, [sp, #20]
 800fa14:	bfb2      	itee	lt
 800fa16:	2400      	movlt	r4, #0
 800fa18:	2318      	movge	r3, #24
 800fa1a:	fb94 f4f3 	sdivge	r4, r4, r3
 800fa1e:	f06f 0317 	mvn.w	r3, #23
 800fa22:	fb04 3303 	mla	r3, r4, r3, r3
 800fa26:	eb03 0b02 	add.w	fp, r3, r2
 800fa2a:	9b00      	ldr	r3, [sp, #0]
 800fa2c:	9a05      	ldr	r2, [sp, #20]
 800fa2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800fcf8 <__kernel_rem_pio2+0x310>
 800fa32:	eb03 0802 	add.w	r8, r3, r2
 800fa36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fa38:	1aa7      	subs	r7, r4, r2
 800fa3a:	ae20      	add	r6, sp, #128	@ 0x80
 800fa3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fa40:	2500      	movs	r5, #0
 800fa42:	4545      	cmp	r5, r8
 800fa44:	dd12      	ble.n	800fa6c <__kernel_rem_pio2+0x84>
 800fa46:	9b06      	ldr	r3, [sp, #24]
 800fa48:	aa20      	add	r2, sp, #128	@ 0x80
 800fa4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fa4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800fa52:	2700      	movs	r7, #0
 800fa54:	9b00      	ldr	r3, [sp, #0]
 800fa56:	429f      	cmp	r7, r3
 800fa58:	dc2e      	bgt.n	800fab8 <__kernel_rem_pio2+0xd0>
 800fa5a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800fcf8 <__kernel_rem_pio2+0x310>
 800fa5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa62:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fa66:	46a8      	mov	r8, r5
 800fa68:	2600      	movs	r6, #0
 800fa6a:	e01b      	b.n	800faa4 <__kernel_rem_pio2+0xbc>
 800fa6c:	42ef      	cmn	r7, r5
 800fa6e:	d407      	bmi.n	800fa80 <__kernel_rem_pio2+0x98>
 800fa70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fa74:	f7f0 fd22 	bl	80004bc <__aeabi_i2d>
 800fa78:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fa7c:	3501      	adds	r5, #1
 800fa7e:	e7e0      	b.n	800fa42 <__kernel_rem_pio2+0x5a>
 800fa80:	ec51 0b18 	vmov	r0, r1, d8
 800fa84:	e7f8      	b.n	800fa78 <__kernel_rem_pio2+0x90>
 800fa86:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800fa8a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fa8e:	f7f0 fd7f 	bl	8000590 <__aeabi_dmul>
 800fa92:	4602      	mov	r2, r0
 800fa94:	460b      	mov	r3, r1
 800fa96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa9a:	f7f0 fbc3 	bl	8000224 <__adddf3>
 800fa9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faa2:	3601      	adds	r6, #1
 800faa4:	9b05      	ldr	r3, [sp, #20]
 800faa6:	429e      	cmp	r6, r3
 800faa8:	dded      	ble.n	800fa86 <__kernel_rem_pio2+0x9e>
 800faaa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800faae:	3701      	adds	r7, #1
 800fab0:	ecaa 7b02 	vstmia	sl!, {d7}
 800fab4:	3508      	adds	r5, #8
 800fab6:	e7cd      	b.n	800fa54 <__kernel_rem_pio2+0x6c>
 800fab8:	9b00      	ldr	r3, [sp, #0]
 800faba:	f8dd 8000 	ldr.w	r8, [sp]
 800fabe:	aa0c      	add	r2, sp, #48	@ 0x30
 800fac0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fac4:	930a      	str	r3, [sp, #40]	@ 0x28
 800fac6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800fac8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800facc:	9309      	str	r3, [sp, #36]	@ 0x24
 800face:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800fad2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fad4:	ab98      	add	r3, sp, #608	@ 0x260
 800fad6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fada:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800fade:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fae2:	ac0c      	add	r4, sp, #48	@ 0x30
 800fae4:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fae6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800faea:	46a1      	mov	r9, r4
 800faec:	46c2      	mov	sl, r8
 800faee:	f1ba 0f00 	cmp.w	sl, #0
 800faf2:	dc77      	bgt.n	800fbe4 <__kernel_rem_pio2+0x1fc>
 800faf4:	4658      	mov	r0, fp
 800faf6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800fafa:	f7ff fe95 	bl	800f828 <scalbn>
 800fafe:	ec57 6b10 	vmov	r6, r7, d0
 800fb02:	2200      	movs	r2, #0
 800fb04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800fb08:	4630      	mov	r0, r6
 800fb0a:	4639      	mov	r1, r7
 800fb0c:	f7f0 fd40 	bl	8000590 <__aeabi_dmul>
 800fb10:	ec41 0b10 	vmov	d0, r0, r1
 800fb14:	f000 fd20 	bl	8010558 <floor>
 800fb18:	4b7c      	ldr	r3, [pc, #496]	@ (800fd0c <__kernel_rem_pio2+0x324>)
 800fb1a:	ec51 0b10 	vmov	r0, r1, d0
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f7f0 fd36 	bl	8000590 <__aeabi_dmul>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	4630      	mov	r0, r6
 800fb2a:	4639      	mov	r1, r7
 800fb2c:	f7f0 fb78 	bl	8000220 <__aeabi_dsub>
 800fb30:	460f      	mov	r7, r1
 800fb32:	4606      	mov	r6, r0
 800fb34:	f7f0 ffc6 	bl	8000ac4 <__aeabi_d2iz>
 800fb38:	9002      	str	r0, [sp, #8]
 800fb3a:	f7f0 fcbf 	bl	80004bc <__aeabi_i2d>
 800fb3e:	4602      	mov	r2, r0
 800fb40:	460b      	mov	r3, r1
 800fb42:	4630      	mov	r0, r6
 800fb44:	4639      	mov	r1, r7
 800fb46:	f7f0 fb6b 	bl	8000220 <__aeabi_dsub>
 800fb4a:	f1bb 0f00 	cmp.w	fp, #0
 800fb4e:	4606      	mov	r6, r0
 800fb50:	460f      	mov	r7, r1
 800fb52:	dd6c      	ble.n	800fc2e <__kernel_rem_pio2+0x246>
 800fb54:	f108 31ff 	add.w	r1, r8, #4294967295
 800fb58:	ab0c      	add	r3, sp, #48	@ 0x30
 800fb5a:	9d02      	ldr	r5, [sp, #8]
 800fb5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb60:	f1cb 0018 	rsb	r0, fp, #24
 800fb64:	fa43 f200 	asr.w	r2, r3, r0
 800fb68:	4415      	add	r5, r2
 800fb6a:	4082      	lsls	r2, r0
 800fb6c:	1a9b      	subs	r3, r3, r2
 800fb6e:	aa0c      	add	r2, sp, #48	@ 0x30
 800fb70:	9502      	str	r5, [sp, #8]
 800fb72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800fb76:	f1cb 0217 	rsb	r2, fp, #23
 800fb7a:	fa43 f902 	asr.w	r9, r3, r2
 800fb7e:	f1b9 0f00 	cmp.w	r9, #0
 800fb82:	dd64      	ble.n	800fc4e <__kernel_rem_pio2+0x266>
 800fb84:	9b02      	ldr	r3, [sp, #8]
 800fb86:	2200      	movs	r2, #0
 800fb88:	3301      	adds	r3, #1
 800fb8a:	9302      	str	r3, [sp, #8]
 800fb8c:	4615      	mov	r5, r2
 800fb8e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800fb92:	4590      	cmp	r8, r2
 800fb94:	f300 80a1 	bgt.w	800fcda <__kernel_rem_pio2+0x2f2>
 800fb98:	f1bb 0f00 	cmp.w	fp, #0
 800fb9c:	dd07      	ble.n	800fbae <__kernel_rem_pio2+0x1c6>
 800fb9e:	f1bb 0f01 	cmp.w	fp, #1
 800fba2:	f000 80c1 	beq.w	800fd28 <__kernel_rem_pio2+0x340>
 800fba6:	f1bb 0f02 	cmp.w	fp, #2
 800fbaa:	f000 80c8 	beq.w	800fd3e <__kernel_rem_pio2+0x356>
 800fbae:	f1b9 0f02 	cmp.w	r9, #2
 800fbb2:	d14c      	bne.n	800fc4e <__kernel_rem_pio2+0x266>
 800fbb4:	4632      	mov	r2, r6
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	4955      	ldr	r1, [pc, #340]	@ (800fd10 <__kernel_rem_pio2+0x328>)
 800fbba:	2000      	movs	r0, #0
 800fbbc:	f7f0 fb30 	bl	8000220 <__aeabi_dsub>
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	460f      	mov	r7, r1
 800fbc4:	2d00      	cmp	r5, #0
 800fbc6:	d042      	beq.n	800fc4e <__kernel_rem_pio2+0x266>
 800fbc8:	4658      	mov	r0, fp
 800fbca:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800fd00 <__kernel_rem_pio2+0x318>
 800fbce:	f7ff fe2b 	bl	800f828 <scalbn>
 800fbd2:	4630      	mov	r0, r6
 800fbd4:	4639      	mov	r1, r7
 800fbd6:	ec53 2b10 	vmov	r2, r3, d0
 800fbda:	f7f0 fb21 	bl	8000220 <__aeabi_dsub>
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460f      	mov	r7, r1
 800fbe2:	e034      	b.n	800fc4e <__kernel_rem_pio2+0x266>
 800fbe4:	4b4b      	ldr	r3, [pc, #300]	@ (800fd14 <__kernel_rem_pio2+0x32c>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbec:	f7f0 fcd0 	bl	8000590 <__aeabi_dmul>
 800fbf0:	f7f0 ff68 	bl	8000ac4 <__aeabi_d2iz>
 800fbf4:	f7f0 fc62 	bl	80004bc <__aeabi_i2d>
 800fbf8:	4b47      	ldr	r3, [pc, #284]	@ (800fd18 <__kernel_rem_pio2+0x330>)
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	4606      	mov	r6, r0
 800fbfe:	460f      	mov	r7, r1
 800fc00:	f7f0 fcc6 	bl	8000590 <__aeabi_dmul>
 800fc04:	4602      	mov	r2, r0
 800fc06:	460b      	mov	r3, r1
 800fc08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fc0c:	f7f0 fb08 	bl	8000220 <__aeabi_dsub>
 800fc10:	f7f0 ff58 	bl	8000ac4 <__aeabi_d2iz>
 800fc14:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800fc18:	f849 0b04 	str.w	r0, [r9], #4
 800fc1c:	4639      	mov	r1, r7
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7f0 fb00 	bl	8000224 <__adddf3>
 800fc24:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fc2c:	e75f      	b.n	800faee <__kernel_rem_pio2+0x106>
 800fc2e:	d107      	bne.n	800fc40 <__kernel_rem_pio2+0x258>
 800fc30:	f108 33ff 	add.w	r3, r8, #4294967295
 800fc34:	aa0c      	add	r2, sp, #48	@ 0x30
 800fc36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800fc3e:	e79e      	b.n	800fb7e <__kernel_rem_pio2+0x196>
 800fc40:	4b36      	ldr	r3, [pc, #216]	@ (800fd1c <__kernel_rem_pio2+0x334>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 ff2a 	bl	8000a9c <__aeabi_dcmpge>
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	d143      	bne.n	800fcd4 <__kernel_rem_pio2+0x2ec>
 800fc4c:	4681      	mov	r9, r0
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2300      	movs	r3, #0
 800fc52:	4630      	mov	r0, r6
 800fc54:	4639      	mov	r1, r7
 800fc56:	f7f0 ff03 	bl	8000a60 <__aeabi_dcmpeq>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	f000 80c1 	beq.w	800fde2 <__kernel_rem_pio2+0x3fa>
 800fc60:	f108 33ff 	add.w	r3, r8, #4294967295
 800fc64:	2200      	movs	r2, #0
 800fc66:	9900      	ldr	r1, [sp, #0]
 800fc68:	428b      	cmp	r3, r1
 800fc6a:	da70      	bge.n	800fd4e <__kernel_rem_pio2+0x366>
 800fc6c:	2a00      	cmp	r2, #0
 800fc6e:	f000 808b 	beq.w	800fd88 <__kernel_rem_pio2+0x3a0>
 800fc72:	f108 38ff 	add.w	r8, r8, #4294967295
 800fc76:	ab0c      	add	r3, sp, #48	@ 0x30
 800fc78:	f1ab 0b18 	sub.w	fp, fp, #24
 800fc7c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d0f6      	beq.n	800fc72 <__kernel_rem_pio2+0x28a>
 800fc84:	4658      	mov	r0, fp
 800fc86:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800fd00 <__kernel_rem_pio2+0x318>
 800fc8a:	f7ff fdcd 	bl	800f828 <scalbn>
 800fc8e:	f108 0301 	add.w	r3, r8, #1
 800fc92:	00da      	lsls	r2, r3, #3
 800fc94:	9205      	str	r2, [sp, #20]
 800fc96:	ec55 4b10 	vmov	r4, r5, d0
 800fc9a:	aa70      	add	r2, sp, #448	@ 0x1c0
 800fc9c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800fd14 <__kernel_rem_pio2+0x32c>
 800fca0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800fca4:	4646      	mov	r6, r8
 800fca6:	f04f 0a00 	mov.w	sl, #0
 800fcaa:	2e00      	cmp	r6, #0
 800fcac:	f280 80d1 	bge.w	800fe52 <__kernel_rem_pio2+0x46a>
 800fcb0:	4644      	mov	r4, r8
 800fcb2:	2c00      	cmp	r4, #0
 800fcb4:	f2c0 80ff 	blt.w	800feb6 <__kernel_rem_pio2+0x4ce>
 800fcb8:	4b19      	ldr	r3, [pc, #100]	@ (800fd20 <__kernel_rem_pio2+0x338>)
 800fcba:	461f      	mov	r7, r3
 800fcbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800fcbe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcc2:	9306      	str	r3, [sp, #24]
 800fcc4:	f04f 0a00 	mov.w	sl, #0
 800fcc8:	f04f 0b00 	mov.w	fp, #0
 800fccc:	2600      	movs	r6, #0
 800fcce:	eba8 0504 	sub.w	r5, r8, r4
 800fcd2:	e0e4      	b.n	800fe9e <__kernel_rem_pio2+0x4b6>
 800fcd4:	f04f 0902 	mov.w	r9, #2
 800fcd8:	e754      	b.n	800fb84 <__kernel_rem_pio2+0x19c>
 800fcda:	f854 3b04 	ldr.w	r3, [r4], #4
 800fcde:	bb0d      	cbnz	r5, 800fd24 <__kernel_rem_pio2+0x33c>
 800fce0:	b123      	cbz	r3, 800fcec <__kernel_rem_pio2+0x304>
 800fce2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800fce6:	f844 3c04 	str.w	r3, [r4, #-4]
 800fcea:	2301      	movs	r3, #1
 800fcec:	3201      	adds	r2, #1
 800fcee:	461d      	mov	r5, r3
 800fcf0:	e74f      	b.n	800fb92 <__kernel_rem_pio2+0x1aa>
 800fcf2:	bf00      	nop
 800fcf4:	f3af 8000 	nop.w
	...
 800fd04:	3ff00000 	.word	0x3ff00000
 800fd08:	08010cb8 	.word	0x08010cb8
 800fd0c:	40200000 	.word	0x40200000
 800fd10:	3ff00000 	.word	0x3ff00000
 800fd14:	3e700000 	.word	0x3e700000
 800fd18:	41700000 	.word	0x41700000
 800fd1c:	3fe00000 	.word	0x3fe00000
 800fd20:	08010c78 	.word	0x08010c78
 800fd24:	1acb      	subs	r3, r1, r3
 800fd26:	e7de      	b.n	800fce6 <__kernel_rem_pio2+0x2fe>
 800fd28:	f108 32ff 	add.w	r2, r8, #4294967295
 800fd2c:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fd36:	a90c      	add	r1, sp, #48	@ 0x30
 800fd38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fd3c:	e737      	b.n	800fbae <__kernel_rem_pio2+0x1c6>
 800fd3e:	f108 32ff 	add.w	r2, r8, #4294967295
 800fd42:	ab0c      	add	r3, sp, #48	@ 0x30
 800fd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fd4c:	e7f3      	b.n	800fd36 <__kernel_rem_pio2+0x34e>
 800fd4e:	a90c      	add	r1, sp, #48	@ 0x30
 800fd50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fd54:	3b01      	subs	r3, #1
 800fd56:	430a      	orrs	r2, r1
 800fd58:	e785      	b.n	800fc66 <__kernel_rem_pio2+0x27e>
 800fd5a:	3401      	adds	r4, #1
 800fd5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800fd60:	2a00      	cmp	r2, #0
 800fd62:	d0fa      	beq.n	800fd5a <__kernel_rem_pio2+0x372>
 800fd64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd66:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fd6a:	eb0d 0503 	add.w	r5, sp, r3
 800fd6e:	9b06      	ldr	r3, [sp, #24]
 800fd70:	aa20      	add	r2, sp, #128	@ 0x80
 800fd72:	4443      	add	r3, r8
 800fd74:	f108 0701 	add.w	r7, r8, #1
 800fd78:	3d98      	subs	r5, #152	@ 0x98
 800fd7a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800fd7e:	4444      	add	r4, r8
 800fd80:	42bc      	cmp	r4, r7
 800fd82:	da04      	bge.n	800fd8e <__kernel_rem_pio2+0x3a6>
 800fd84:	46a0      	mov	r8, r4
 800fd86:	e6a2      	b.n	800face <__kernel_rem_pio2+0xe6>
 800fd88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd8a:	2401      	movs	r4, #1
 800fd8c:	e7e6      	b.n	800fd5c <__kernel_rem_pio2+0x374>
 800fd8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd90:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800fd94:	f7f0 fb92 	bl	80004bc <__aeabi_i2d>
 800fd98:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8010058 <__kernel_rem_pio2+0x670>
 800fd9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fda0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fda4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fda8:	46b2      	mov	sl, r6
 800fdaa:	f04f 0800 	mov.w	r8, #0
 800fdae:	9b05      	ldr	r3, [sp, #20]
 800fdb0:	4598      	cmp	r8, r3
 800fdb2:	dd05      	ble.n	800fdc0 <__kernel_rem_pio2+0x3d8>
 800fdb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fdb8:	3701      	adds	r7, #1
 800fdba:	eca5 7b02 	vstmia	r5!, {d7}
 800fdbe:	e7df      	b.n	800fd80 <__kernel_rem_pio2+0x398>
 800fdc0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800fdc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fdc8:	f7f0 fbe2 	bl	8000590 <__aeabi_dmul>
 800fdcc:	4602      	mov	r2, r0
 800fdce:	460b      	mov	r3, r1
 800fdd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdd4:	f7f0 fa26 	bl	8000224 <__adddf3>
 800fdd8:	f108 0801 	add.w	r8, r8, #1
 800fddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fde0:	e7e5      	b.n	800fdae <__kernel_rem_pio2+0x3c6>
 800fde2:	f1cb 0000 	rsb	r0, fp, #0
 800fde6:	ec47 6b10 	vmov	d0, r6, r7
 800fdea:	f7ff fd1d 	bl	800f828 <scalbn>
 800fdee:	ec55 4b10 	vmov	r4, r5, d0
 800fdf2:	4b9b      	ldr	r3, [pc, #620]	@ (8010060 <__kernel_rem_pio2+0x678>)
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	4629      	mov	r1, r5
 800fdfa:	f7f0 fe4f 	bl	8000a9c <__aeabi_dcmpge>
 800fdfe:	b300      	cbz	r0, 800fe42 <__kernel_rem_pio2+0x45a>
 800fe00:	4b98      	ldr	r3, [pc, #608]	@ (8010064 <__kernel_rem_pio2+0x67c>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	4620      	mov	r0, r4
 800fe06:	4629      	mov	r1, r5
 800fe08:	f7f0 fbc2 	bl	8000590 <__aeabi_dmul>
 800fe0c:	f7f0 fe5a 	bl	8000ac4 <__aeabi_d2iz>
 800fe10:	4606      	mov	r6, r0
 800fe12:	f7f0 fb53 	bl	80004bc <__aeabi_i2d>
 800fe16:	4b92      	ldr	r3, [pc, #584]	@ (8010060 <__kernel_rem_pio2+0x678>)
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f7f0 fbb9 	bl	8000590 <__aeabi_dmul>
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4602      	mov	r2, r0
 800fe22:	4629      	mov	r1, r5
 800fe24:	4620      	mov	r0, r4
 800fe26:	f7f0 f9fb 	bl	8000220 <__aeabi_dsub>
 800fe2a:	f7f0 fe4b 	bl	8000ac4 <__aeabi_d2iz>
 800fe2e:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe30:	f10b 0b18 	add.w	fp, fp, #24
 800fe34:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fe38:	f108 0801 	add.w	r8, r8, #1
 800fe3c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800fe40:	e720      	b.n	800fc84 <__kernel_rem_pio2+0x29c>
 800fe42:	4620      	mov	r0, r4
 800fe44:	4629      	mov	r1, r5
 800fe46:	f7f0 fe3d 	bl	8000ac4 <__aeabi_d2iz>
 800fe4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe4c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800fe50:	e718      	b.n	800fc84 <__kernel_rem_pio2+0x29c>
 800fe52:	ab0c      	add	r3, sp, #48	@ 0x30
 800fe54:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fe58:	f7f0 fb30 	bl	80004bc <__aeabi_i2d>
 800fe5c:	4622      	mov	r2, r4
 800fe5e:	462b      	mov	r3, r5
 800fe60:	f7f0 fb96 	bl	8000590 <__aeabi_dmul>
 800fe64:	4652      	mov	r2, sl
 800fe66:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800fe6a:	465b      	mov	r3, fp
 800fe6c:	4620      	mov	r0, r4
 800fe6e:	4629      	mov	r1, r5
 800fe70:	f7f0 fb8e 	bl	8000590 <__aeabi_dmul>
 800fe74:	3e01      	subs	r6, #1
 800fe76:	4604      	mov	r4, r0
 800fe78:	460d      	mov	r5, r1
 800fe7a:	e716      	b.n	800fcaa <__kernel_rem_pio2+0x2c2>
 800fe7c:	9906      	ldr	r1, [sp, #24]
 800fe7e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800fe82:	9106      	str	r1, [sp, #24]
 800fe84:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800fe88:	f7f0 fb82 	bl	8000590 <__aeabi_dmul>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	460b      	mov	r3, r1
 800fe90:	4650      	mov	r0, sl
 800fe92:	4659      	mov	r1, fp
 800fe94:	f7f0 f9c6 	bl	8000224 <__adddf3>
 800fe98:	3601      	adds	r6, #1
 800fe9a:	4682      	mov	sl, r0
 800fe9c:	468b      	mov	fp, r1
 800fe9e:	9b00      	ldr	r3, [sp, #0]
 800fea0:	429e      	cmp	r6, r3
 800fea2:	dc01      	bgt.n	800fea8 <__kernel_rem_pio2+0x4c0>
 800fea4:	42ae      	cmp	r6, r5
 800fea6:	dde9      	ble.n	800fe7c <__kernel_rem_pio2+0x494>
 800fea8:	ab48      	add	r3, sp, #288	@ 0x120
 800feaa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800feae:	e9c5 ab00 	strd	sl, fp, [r5]
 800feb2:	3c01      	subs	r4, #1
 800feb4:	e6fd      	b.n	800fcb2 <__kernel_rem_pio2+0x2ca>
 800feb6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800feb8:	2b02      	cmp	r3, #2
 800feba:	dc0b      	bgt.n	800fed4 <__kernel_rem_pio2+0x4ec>
 800febc:	2b00      	cmp	r3, #0
 800febe:	dc35      	bgt.n	800ff2c <__kernel_rem_pio2+0x544>
 800fec0:	d059      	beq.n	800ff76 <__kernel_rem_pio2+0x58e>
 800fec2:	9b02      	ldr	r3, [sp, #8]
 800fec4:	f003 0007 	and.w	r0, r3, #7
 800fec8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800fecc:	ecbd 8b02 	vpop	{d8}
 800fed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800fed6:	2b03      	cmp	r3, #3
 800fed8:	d1f3      	bne.n	800fec2 <__kernel_rem_pio2+0x4da>
 800feda:	9b05      	ldr	r3, [sp, #20]
 800fedc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800fee0:	eb0d 0403 	add.w	r4, sp, r3
 800fee4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800fee8:	4625      	mov	r5, r4
 800feea:	46c2      	mov	sl, r8
 800feec:	f1ba 0f00 	cmp.w	sl, #0
 800fef0:	dc69      	bgt.n	800ffc6 <__kernel_rem_pio2+0x5de>
 800fef2:	4645      	mov	r5, r8
 800fef4:	2d01      	cmp	r5, #1
 800fef6:	f300 8087 	bgt.w	8010008 <__kernel_rem_pio2+0x620>
 800fefa:	9c05      	ldr	r4, [sp, #20]
 800fefc:	ab48      	add	r3, sp, #288	@ 0x120
 800fefe:	441c      	add	r4, r3
 800ff00:	2000      	movs	r0, #0
 800ff02:	2100      	movs	r1, #0
 800ff04:	f1b8 0f01 	cmp.w	r8, #1
 800ff08:	f300 809c 	bgt.w	8010044 <__kernel_rem_pio2+0x65c>
 800ff0c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800ff10:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800ff14:	f1b9 0f00 	cmp.w	r9, #0
 800ff18:	f040 80a6 	bne.w	8010068 <__kernel_rem_pio2+0x680>
 800ff1c:	9b04      	ldr	r3, [sp, #16]
 800ff1e:	e9c3 5600 	strd	r5, r6, [r3]
 800ff22:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ff26:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ff2a:	e7ca      	b.n	800fec2 <__kernel_rem_pio2+0x4da>
 800ff2c:	9d05      	ldr	r5, [sp, #20]
 800ff2e:	ab48      	add	r3, sp, #288	@ 0x120
 800ff30:	441d      	add	r5, r3
 800ff32:	4644      	mov	r4, r8
 800ff34:	2000      	movs	r0, #0
 800ff36:	2100      	movs	r1, #0
 800ff38:	2c00      	cmp	r4, #0
 800ff3a:	da35      	bge.n	800ffa8 <__kernel_rem_pio2+0x5c0>
 800ff3c:	f1b9 0f00 	cmp.w	r9, #0
 800ff40:	d038      	beq.n	800ffb4 <__kernel_rem_pio2+0x5cc>
 800ff42:	4602      	mov	r2, r0
 800ff44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff48:	9c04      	ldr	r4, [sp, #16]
 800ff4a:	e9c4 2300 	strd	r2, r3, [r4]
 800ff4e:	4602      	mov	r2, r0
 800ff50:	460b      	mov	r3, r1
 800ff52:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ff56:	f7f0 f963 	bl	8000220 <__aeabi_dsub>
 800ff5a:	ad4a      	add	r5, sp, #296	@ 0x128
 800ff5c:	2401      	movs	r4, #1
 800ff5e:	45a0      	cmp	r8, r4
 800ff60:	da2b      	bge.n	800ffba <__kernel_rem_pio2+0x5d2>
 800ff62:	f1b9 0f00 	cmp.w	r9, #0
 800ff66:	d002      	beq.n	800ff6e <__kernel_rem_pio2+0x586>
 800ff68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	9b04      	ldr	r3, [sp, #16]
 800ff70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ff74:	e7a5      	b.n	800fec2 <__kernel_rem_pio2+0x4da>
 800ff76:	9c05      	ldr	r4, [sp, #20]
 800ff78:	ab48      	add	r3, sp, #288	@ 0x120
 800ff7a:	441c      	add	r4, r3
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	2100      	movs	r1, #0
 800ff80:	f1b8 0f00 	cmp.w	r8, #0
 800ff84:	da09      	bge.n	800ff9a <__kernel_rem_pio2+0x5b2>
 800ff86:	f1b9 0f00 	cmp.w	r9, #0
 800ff8a:	d002      	beq.n	800ff92 <__kernel_rem_pio2+0x5aa>
 800ff8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ff90:	4619      	mov	r1, r3
 800ff92:	9b04      	ldr	r3, [sp, #16]
 800ff94:	e9c3 0100 	strd	r0, r1, [r3]
 800ff98:	e793      	b.n	800fec2 <__kernel_rem_pio2+0x4da>
 800ff9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ff9e:	f7f0 f941 	bl	8000224 <__adddf3>
 800ffa2:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffa6:	e7eb      	b.n	800ff80 <__kernel_rem_pio2+0x598>
 800ffa8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ffac:	f7f0 f93a 	bl	8000224 <__adddf3>
 800ffb0:	3c01      	subs	r4, #1
 800ffb2:	e7c1      	b.n	800ff38 <__kernel_rem_pio2+0x550>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	e7c6      	b.n	800ff48 <__kernel_rem_pio2+0x560>
 800ffba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ffbe:	f7f0 f931 	bl	8000224 <__adddf3>
 800ffc2:	3401      	adds	r4, #1
 800ffc4:	e7cb      	b.n	800ff5e <__kernel_rem_pio2+0x576>
 800ffc6:	ed35 7b02 	vldmdb	r5!, {d7}
 800ffca:	ed8d 7b00 	vstr	d7, [sp]
 800ffce:	ed95 7b02 	vldr	d7, [r5, #8]
 800ffd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffd6:	ec53 2b17 	vmov	r2, r3, d7
 800ffda:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ffde:	f7f0 f921 	bl	8000224 <__adddf3>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	4606      	mov	r6, r0
 800ffe8:	460f      	mov	r7, r1
 800ffea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffee:	f7f0 f917 	bl	8000220 <__aeabi_dsub>
 800fff2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fff6:	f7f0 f915 	bl	8000224 <__adddf3>
 800fffa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fffe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8010002:	e9c5 6700 	strd	r6, r7, [r5]
 8010006:	e771      	b.n	800feec <__kernel_rem_pio2+0x504>
 8010008:	ed34 7b02 	vldmdb	r4!, {d7}
 801000c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8010010:	ec51 0b17 	vmov	r0, r1, d7
 8010014:	4652      	mov	r2, sl
 8010016:	465b      	mov	r3, fp
 8010018:	ed8d 7b00 	vstr	d7, [sp]
 801001c:	f7f0 f902 	bl	8000224 <__adddf3>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4606      	mov	r6, r0
 8010026:	460f      	mov	r7, r1
 8010028:	e9dd 0100 	ldrd	r0, r1, [sp]
 801002c:	f7f0 f8f8 	bl	8000220 <__aeabi_dsub>
 8010030:	4652      	mov	r2, sl
 8010032:	465b      	mov	r3, fp
 8010034:	f7f0 f8f6 	bl	8000224 <__adddf3>
 8010038:	3d01      	subs	r5, #1
 801003a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801003e:	e9c4 6700 	strd	r6, r7, [r4]
 8010042:	e757      	b.n	800fef4 <__kernel_rem_pio2+0x50c>
 8010044:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010048:	f7f0 f8ec 	bl	8000224 <__adddf3>
 801004c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010050:	e758      	b.n	800ff04 <__kernel_rem_pio2+0x51c>
 8010052:	bf00      	nop
 8010054:	f3af 8000 	nop.w
	...
 8010060:	41700000 	.word	0x41700000
 8010064:	3e700000 	.word	0x3e700000
 8010068:	9b04      	ldr	r3, [sp, #16]
 801006a:	9a04      	ldr	r2, [sp, #16]
 801006c:	601d      	str	r5, [r3, #0]
 801006e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8010072:	605c      	str	r4, [r3, #4]
 8010074:	609f      	str	r7, [r3, #8]
 8010076:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801007a:	60d3      	str	r3, [r2, #12]
 801007c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010080:	6110      	str	r0, [r2, #16]
 8010082:	6153      	str	r3, [r2, #20]
 8010084:	e71d      	b.n	800fec2 <__kernel_rem_pio2+0x4da>
 8010086:	bf00      	nop

08010088 <__kernel_rem_pio2f>:
 8010088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801008c:	ed2d 8b04 	vpush	{d8-d9}
 8010090:	b0d9      	sub	sp, #356	@ 0x164
 8010092:	4690      	mov	r8, r2
 8010094:	9001      	str	r0, [sp, #4]
 8010096:	4ab6      	ldr	r2, [pc, #728]	@ (8010370 <__kernel_rem_pio2f+0x2e8>)
 8010098:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801009a:	f118 0f04 	cmn.w	r8, #4
 801009e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80100a2:	460f      	mov	r7, r1
 80100a4:	f103 3bff 	add.w	fp, r3, #4294967295
 80100a8:	db26      	blt.n	80100f8 <__kernel_rem_pio2f+0x70>
 80100aa:	f1b8 0203 	subs.w	r2, r8, #3
 80100ae:	bf48      	it	mi
 80100b0:	f108 0204 	addmi.w	r2, r8, #4
 80100b4:	10d2      	asrs	r2, r2, #3
 80100b6:	1c55      	adds	r5, r2, #1
 80100b8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80100ba:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 80100be:	00e8      	lsls	r0, r5, #3
 80100c0:	eba2 060b 	sub.w	r6, r2, fp
 80100c4:	9002      	str	r0, [sp, #8]
 80100c6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80100ca:	eb0a 0c0b 	add.w	ip, sl, fp
 80100ce:	ac1c      	add	r4, sp, #112	@ 0x70
 80100d0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80100d4:	2000      	movs	r0, #0
 80100d6:	4560      	cmp	r0, ip
 80100d8:	dd10      	ble.n	80100fc <__kernel_rem_pio2f+0x74>
 80100da:	a91c      	add	r1, sp, #112	@ 0x70
 80100dc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80100e0:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80100e4:	2600      	movs	r6, #0
 80100e6:	4556      	cmp	r6, sl
 80100e8:	dc24      	bgt.n	8010134 <__kernel_rem_pio2f+0xac>
 80100ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80100ee:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 80100f2:	4684      	mov	ip, r0
 80100f4:	2400      	movs	r4, #0
 80100f6:	e016      	b.n	8010126 <__kernel_rem_pio2f+0x9e>
 80100f8:	2200      	movs	r2, #0
 80100fa:	e7dc      	b.n	80100b6 <__kernel_rem_pio2f+0x2e>
 80100fc:	42c6      	cmn	r6, r0
 80100fe:	bf5d      	ittte	pl
 8010100:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010104:	ee07 1a90 	vmovpl	s15, r1
 8010108:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801010c:	eef0 7a47 	vmovmi.f32	s15, s14
 8010110:	ece4 7a01 	vstmia	r4!, {s15}
 8010114:	3001      	adds	r0, #1
 8010116:	e7de      	b.n	80100d6 <__kernel_rem_pio2f+0x4e>
 8010118:	ecfe 6a01 	vldmia	lr!, {s13}
 801011c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010120:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010124:	3401      	adds	r4, #1
 8010126:	455c      	cmp	r4, fp
 8010128:	ddf6      	ble.n	8010118 <__kernel_rem_pio2f+0x90>
 801012a:	ece9 7a01 	vstmia	r9!, {s15}
 801012e:	3601      	adds	r6, #1
 8010130:	3004      	adds	r0, #4
 8010132:	e7d8      	b.n	80100e6 <__kernel_rem_pio2f+0x5e>
 8010134:	a908      	add	r1, sp, #32
 8010136:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801013a:	9104      	str	r1, [sp, #16]
 801013c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801013e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801037c <__kernel_rem_pio2f+0x2f4>
 8010142:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010378 <__kernel_rem_pio2f+0x2f0>
 8010146:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801014a:	9203      	str	r2, [sp, #12]
 801014c:	4654      	mov	r4, sl
 801014e:	00a2      	lsls	r2, r4, #2
 8010150:	9205      	str	r2, [sp, #20]
 8010152:	aa58      	add	r2, sp, #352	@ 0x160
 8010154:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010158:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801015c:	a944      	add	r1, sp, #272	@ 0x110
 801015e:	aa08      	add	r2, sp, #32
 8010160:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010164:	4694      	mov	ip, r2
 8010166:	4626      	mov	r6, r4
 8010168:	2e00      	cmp	r6, #0
 801016a:	dc4c      	bgt.n	8010206 <__kernel_rem_pio2f+0x17e>
 801016c:	4628      	mov	r0, r5
 801016e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010172:	f7ff fbd3 	bl	800f91c <scalbnf>
 8010176:	eeb0 8a40 	vmov.f32	s16, s0
 801017a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801017e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010182:	f000 fa65 	bl	8010650 <floorf>
 8010186:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801018a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801018e:	2d00      	cmp	r5, #0
 8010190:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8010194:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010198:	ee17 9a90 	vmov	r9, s15
 801019c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101a0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80101a4:	dd41      	ble.n	801022a <__kernel_rem_pio2f+0x1a2>
 80101a6:	f104 3cff 	add.w	ip, r4, #4294967295
 80101aa:	a908      	add	r1, sp, #32
 80101ac:	f1c5 0e08 	rsb	lr, r5, #8
 80101b0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80101b4:	fa46 f00e 	asr.w	r0, r6, lr
 80101b8:	4481      	add	r9, r0
 80101ba:	fa00 f00e 	lsl.w	r0, r0, lr
 80101be:	1a36      	subs	r6, r6, r0
 80101c0:	f1c5 0007 	rsb	r0, r5, #7
 80101c4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80101c8:	4106      	asrs	r6, r0
 80101ca:	2e00      	cmp	r6, #0
 80101cc:	dd3c      	ble.n	8010248 <__kernel_rem_pio2f+0x1c0>
 80101ce:	f04f 0e00 	mov.w	lr, #0
 80101d2:	f109 0901 	add.w	r9, r9, #1
 80101d6:	4670      	mov	r0, lr
 80101d8:	4574      	cmp	r4, lr
 80101da:	dc68      	bgt.n	80102ae <__kernel_rem_pio2f+0x226>
 80101dc:	2d00      	cmp	r5, #0
 80101de:	dd03      	ble.n	80101e8 <__kernel_rem_pio2f+0x160>
 80101e0:	2d01      	cmp	r5, #1
 80101e2:	d074      	beq.n	80102ce <__kernel_rem_pio2f+0x246>
 80101e4:	2d02      	cmp	r5, #2
 80101e6:	d07d      	beq.n	80102e4 <__kernel_rem_pio2f+0x25c>
 80101e8:	2e02      	cmp	r6, #2
 80101ea:	d12d      	bne.n	8010248 <__kernel_rem_pio2f+0x1c0>
 80101ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80101f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80101f4:	b340      	cbz	r0, 8010248 <__kernel_rem_pio2f+0x1c0>
 80101f6:	4628      	mov	r0, r5
 80101f8:	9306      	str	r3, [sp, #24]
 80101fa:	f7ff fb8f 	bl	800f91c <scalbnf>
 80101fe:	9b06      	ldr	r3, [sp, #24]
 8010200:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010204:	e020      	b.n	8010248 <__kernel_rem_pio2f+0x1c0>
 8010206:	ee60 7a28 	vmul.f32	s15, s0, s17
 801020a:	3e01      	subs	r6, #1
 801020c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010214:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010218:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801021c:	ecac 0a01 	vstmia	ip!, {s0}
 8010220:	ed30 0a01 	vldmdb	r0!, {s0}
 8010224:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010228:	e79e      	b.n	8010168 <__kernel_rem_pio2f+0xe0>
 801022a:	d105      	bne.n	8010238 <__kernel_rem_pio2f+0x1b0>
 801022c:	1e60      	subs	r0, r4, #1
 801022e:	a908      	add	r1, sp, #32
 8010230:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010234:	11f6      	asrs	r6, r6, #7
 8010236:	e7c8      	b.n	80101ca <__kernel_rem_pio2f+0x142>
 8010238:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801023c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010244:	da31      	bge.n	80102aa <__kernel_rem_pio2f+0x222>
 8010246:	2600      	movs	r6, #0
 8010248:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801024c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010250:	f040 8098 	bne.w	8010384 <__kernel_rem_pio2f+0x2fc>
 8010254:	1e60      	subs	r0, r4, #1
 8010256:	2200      	movs	r2, #0
 8010258:	4550      	cmp	r0, sl
 801025a:	da4b      	bge.n	80102f4 <__kernel_rem_pio2f+0x26c>
 801025c:	2a00      	cmp	r2, #0
 801025e:	d065      	beq.n	801032c <__kernel_rem_pio2f+0x2a4>
 8010260:	3c01      	subs	r4, #1
 8010262:	ab08      	add	r3, sp, #32
 8010264:	3d08      	subs	r5, #8
 8010266:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d0f8      	beq.n	8010260 <__kernel_rem_pio2f+0x1d8>
 801026e:	4628      	mov	r0, r5
 8010270:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010274:	f7ff fb52 	bl	800f91c <scalbnf>
 8010278:	1c63      	adds	r3, r4, #1
 801027a:	aa44      	add	r2, sp, #272	@ 0x110
 801027c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801037c <__kernel_rem_pio2f+0x2f4>
 8010280:	0099      	lsls	r1, r3, #2
 8010282:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010286:	4623      	mov	r3, r4
 8010288:	2b00      	cmp	r3, #0
 801028a:	f280 80a9 	bge.w	80103e0 <__kernel_rem_pio2f+0x358>
 801028e:	4623      	mov	r3, r4
 8010290:	2b00      	cmp	r3, #0
 8010292:	f2c0 80c7 	blt.w	8010424 <__kernel_rem_pio2f+0x39c>
 8010296:	aa44      	add	r2, sp, #272	@ 0x110
 8010298:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801029c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010374 <__kernel_rem_pio2f+0x2ec>
 80102a0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 80102a4:	2000      	movs	r0, #0
 80102a6:	1ae2      	subs	r2, r4, r3
 80102a8:	e0b1      	b.n	801040e <__kernel_rem_pio2f+0x386>
 80102aa:	2602      	movs	r6, #2
 80102ac:	e78f      	b.n	80101ce <__kernel_rem_pio2f+0x146>
 80102ae:	f852 1b04 	ldr.w	r1, [r2], #4
 80102b2:	b948      	cbnz	r0, 80102c8 <__kernel_rem_pio2f+0x240>
 80102b4:	b121      	cbz	r1, 80102c0 <__kernel_rem_pio2f+0x238>
 80102b6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80102ba:	f842 1c04 	str.w	r1, [r2, #-4]
 80102be:	2101      	movs	r1, #1
 80102c0:	f10e 0e01 	add.w	lr, lr, #1
 80102c4:	4608      	mov	r0, r1
 80102c6:	e787      	b.n	80101d8 <__kernel_rem_pio2f+0x150>
 80102c8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80102cc:	e7f5      	b.n	80102ba <__kernel_rem_pio2f+0x232>
 80102ce:	f104 3cff 	add.w	ip, r4, #4294967295
 80102d2:	aa08      	add	r2, sp, #32
 80102d4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80102d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80102dc:	a908      	add	r1, sp, #32
 80102de:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80102e2:	e781      	b.n	80101e8 <__kernel_rem_pio2f+0x160>
 80102e4:	f104 3cff 	add.w	ip, r4, #4294967295
 80102e8:	aa08      	add	r2, sp, #32
 80102ea:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80102ee:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80102f2:	e7f3      	b.n	80102dc <__kernel_rem_pio2f+0x254>
 80102f4:	a908      	add	r1, sp, #32
 80102f6:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80102fa:	3801      	subs	r0, #1
 80102fc:	430a      	orrs	r2, r1
 80102fe:	e7ab      	b.n	8010258 <__kernel_rem_pio2f+0x1d0>
 8010300:	3201      	adds	r2, #1
 8010302:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010306:	2e00      	cmp	r6, #0
 8010308:	d0fa      	beq.n	8010300 <__kernel_rem_pio2f+0x278>
 801030a:	9905      	ldr	r1, [sp, #20]
 801030c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010310:	eb0d 0001 	add.w	r0, sp, r1
 8010314:	18e6      	adds	r6, r4, r3
 8010316:	a91c      	add	r1, sp, #112	@ 0x70
 8010318:	f104 0c01 	add.w	ip, r4, #1
 801031c:	384c      	subs	r0, #76	@ 0x4c
 801031e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010322:	4422      	add	r2, r4
 8010324:	4562      	cmp	r2, ip
 8010326:	da04      	bge.n	8010332 <__kernel_rem_pio2f+0x2aa>
 8010328:	4614      	mov	r4, r2
 801032a:	e710      	b.n	801014e <__kernel_rem_pio2f+0xc6>
 801032c:	9804      	ldr	r0, [sp, #16]
 801032e:	2201      	movs	r2, #1
 8010330:	e7e7      	b.n	8010302 <__kernel_rem_pio2f+0x27a>
 8010332:	9903      	ldr	r1, [sp, #12]
 8010334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010338:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801033c:	9105      	str	r1, [sp, #20]
 801033e:	ee07 1a90 	vmov	s15, r1
 8010342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010346:	2400      	movs	r4, #0
 8010348:	ece6 7a01 	vstmia	r6!, {s15}
 801034c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 8010350:	46b1      	mov	r9, r6
 8010352:	455c      	cmp	r4, fp
 8010354:	dd04      	ble.n	8010360 <__kernel_rem_pio2f+0x2d8>
 8010356:	ece0 7a01 	vstmia	r0!, {s15}
 801035a:	f10c 0c01 	add.w	ip, ip, #1
 801035e:	e7e1      	b.n	8010324 <__kernel_rem_pio2f+0x29c>
 8010360:	ecfe 6a01 	vldmia	lr!, {s13}
 8010364:	ed39 7a01 	vldmdb	r9!, {s14}
 8010368:	3401      	adds	r4, #1
 801036a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801036e:	e7f0      	b.n	8010352 <__kernel_rem_pio2f+0x2ca>
 8010370:	08010cf4 	.word	0x08010cf4
 8010374:	08010cc8 	.word	0x08010cc8
 8010378:	43800000 	.word	0x43800000
 801037c:	3b800000 	.word	0x3b800000
 8010380:	00000000 	.word	0x00000000
 8010384:	9b02      	ldr	r3, [sp, #8]
 8010386:	eeb0 0a48 	vmov.f32	s0, s16
 801038a:	eba3 0008 	sub.w	r0, r3, r8
 801038e:	f7ff fac5 	bl	800f91c <scalbnf>
 8010392:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010378 <__kernel_rem_pio2f+0x2f0>
 8010396:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801039a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039e:	db19      	blt.n	80103d4 <__kernel_rem_pio2f+0x34c>
 80103a0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801037c <__kernel_rem_pio2f+0x2f4>
 80103a4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80103a8:	aa08      	add	r2, sp, #32
 80103aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103ae:	3508      	adds	r5, #8
 80103b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103b4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80103b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80103c0:	ee10 3a10 	vmov	r3, s0
 80103c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80103c8:	ee17 3a90 	vmov	r3, s15
 80103cc:	3401      	adds	r4, #1
 80103ce:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80103d2:	e74c      	b.n	801026e <__kernel_rem_pio2f+0x1e6>
 80103d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80103d8:	aa08      	add	r2, sp, #32
 80103da:	ee10 3a10 	vmov	r3, s0
 80103de:	e7f6      	b.n	80103ce <__kernel_rem_pio2f+0x346>
 80103e0:	a808      	add	r0, sp, #32
 80103e2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80103e6:	9001      	str	r0, [sp, #4]
 80103e8:	ee07 0a90 	vmov	s15, r0
 80103ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103f0:	3b01      	subs	r3, #1
 80103f2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80103f6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80103fa:	ed62 7a01 	vstmdb	r2!, {s15}
 80103fe:	e743      	b.n	8010288 <__kernel_rem_pio2f+0x200>
 8010400:	ecfc 6a01 	vldmia	ip!, {s13}
 8010404:	ecb5 7a01 	vldmia	r5!, {s14}
 8010408:	eee6 7a87 	vfma.f32	s15, s13, s14
 801040c:	3001      	adds	r0, #1
 801040e:	4550      	cmp	r0, sl
 8010410:	dc01      	bgt.n	8010416 <__kernel_rem_pio2f+0x38e>
 8010412:	4290      	cmp	r0, r2
 8010414:	ddf4      	ble.n	8010400 <__kernel_rem_pio2f+0x378>
 8010416:	a858      	add	r0, sp, #352	@ 0x160
 8010418:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801041c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010420:	3b01      	subs	r3, #1
 8010422:	e735      	b.n	8010290 <__kernel_rem_pio2f+0x208>
 8010424:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010426:	2b02      	cmp	r3, #2
 8010428:	dc09      	bgt.n	801043e <__kernel_rem_pio2f+0x3b6>
 801042a:	2b00      	cmp	r3, #0
 801042c:	dc27      	bgt.n	801047e <__kernel_rem_pio2f+0x3f6>
 801042e:	d040      	beq.n	80104b2 <__kernel_rem_pio2f+0x42a>
 8010430:	f009 0007 	and.w	r0, r9, #7
 8010434:	b059      	add	sp, #356	@ 0x164
 8010436:	ecbd 8b04 	vpop	{d8-d9}
 801043a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010440:	2b03      	cmp	r3, #3
 8010442:	d1f5      	bne.n	8010430 <__kernel_rem_pio2f+0x3a8>
 8010444:	aa30      	add	r2, sp, #192	@ 0xc0
 8010446:	1f0b      	subs	r3, r1, #4
 8010448:	4413      	add	r3, r2
 801044a:	461a      	mov	r2, r3
 801044c:	4620      	mov	r0, r4
 801044e:	2800      	cmp	r0, #0
 8010450:	dc50      	bgt.n	80104f4 <__kernel_rem_pio2f+0x46c>
 8010452:	4622      	mov	r2, r4
 8010454:	2a01      	cmp	r2, #1
 8010456:	dc5d      	bgt.n	8010514 <__kernel_rem_pio2f+0x48c>
 8010458:	ab30      	add	r3, sp, #192	@ 0xc0
 801045a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 801045e:	440b      	add	r3, r1
 8010460:	2c01      	cmp	r4, #1
 8010462:	dc67      	bgt.n	8010534 <__kernel_rem_pio2f+0x4ac>
 8010464:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010468:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801046c:	2e00      	cmp	r6, #0
 801046e:	d167      	bne.n	8010540 <__kernel_rem_pio2f+0x4b8>
 8010470:	edc7 6a00 	vstr	s13, [r7]
 8010474:	ed87 7a01 	vstr	s14, [r7, #4]
 8010478:	edc7 7a02 	vstr	s15, [r7, #8]
 801047c:	e7d8      	b.n	8010430 <__kernel_rem_pio2f+0x3a8>
 801047e:	ab30      	add	r3, sp, #192	@ 0xc0
 8010480:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 8010484:	440b      	add	r3, r1
 8010486:	4622      	mov	r2, r4
 8010488:	2a00      	cmp	r2, #0
 801048a:	da24      	bge.n	80104d6 <__kernel_rem_pio2f+0x44e>
 801048c:	b34e      	cbz	r6, 80104e2 <__kernel_rem_pio2f+0x45a>
 801048e:	eef1 7a47 	vneg.f32	s15, s14
 8010492:	edc7 7a00 	vstr	s15, [r7]
 8010496:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801049a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801049e:	aa31      	add	r2, sp, #196	@ 0xc4
 80104a0:	2301      	movs	r3, #1
 80104a2:	429c      	cmp	r4, r3
 80104a4:	da20      	bge.n	80104e8 <__kernel_rem_pio2f+0x460>
 80104a6:	b10e      	cbz	r6, 80104ac <__kernel_rem_pio2f+0x424>
 80104a8:	eef1 7a67 	vneg.f32	s15, s15
 80104ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80104b0:	e7be      	b.n	8010430 <__kernel_rem_pio2f+0x3a8>
 80104b2:	ab30      	add	r3, sp, #192	@ 0xc0
 80104b4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8010380 <__kernel_rem_pio2f+0x2f8>
 80104b8:	440b      	add	r3, r1
 80104ba:	2c00      	cmp	r4, #0
 80104bc:	da05      	bge.n	80104ca <__kernel_rem_pio2f+0x442>
 80104be:	b10e      	cbz	r6, 80104c4 <__kernel_rem_pio2f+0x43c>
 80104c0:	eef1 7a67 	vneg.f32	s15, s15
 80104c4:	edc7 7a00 	vstr	s15, [r7]
 80104c8:	e7b2      	b.n	8010430 <__kernel_rem_pio2f+0x3a8>
 80104ca:	ed33 7a01 	vldmdb	r3!, {s14}
 80104ce:	3c01      	subs	r4, #1
 80104d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104d4:	e7f1      	b.n	80104ba <__kernel_rem_pio2f+0x432>
 80104d6:	ed73 7a01 	vldmdb	r3!, {s15}
 80104da:	3a01      	subs	r2, #1
 80104dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104e0:	e7d2      	b.n	8010488 <__kernel_rem_pio2f+0x400>
 80104e2:	eef0 7a47 	vmov.f32	s15, s14
 80104e6:	e7d4      	b.n	8010492 <__kernel_rem_pio2f+0x40a>
 80104e8:	ecb2 7a01 	vldmia	r2!, {s14}
 80104ec:	3301      	adds	r3, #1
 80104ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104f2:	e7d6      	b.n	80104a2 <__kernel_rem_pio2f+0x41a>
 80104f4:	ed72 7a01 	vldmdb	r2!, {s15}
 80104f8:	edd2 6a01 	vldr	s13, [r2, #4]
 80104fc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010500:	3801      	subs	r0, #1
 8010502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010506:	ed82 7a00 	vstr	s14, [r2]
 801050a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801050e:	edc2 7a01 	vstr	s15, [r2, #4]
 8010512:	e79c      	b.n	801044e <__kernel_rem_pio2f+0x3c6>
 8010514:	ed73 7a01 	vldmdb	r3!, {s15}
 8010518:	edd3 6a01 	vldr	s13, [r3, #4]
 801051c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010520:	3a01      	subs	r2, #1
 8010522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010526:	ed83 7a00 	vstr	s14, [r3]
 801052a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801052e:	edc3 7a01 	vstr	s15, [r3, #4]
 8010532:	e78f      	b.n	8010454 <__kernel_rem_pio2f+0x3cc>
 8010534:	ed33 7a01 	vldmdb	r3!, {s14}
 8010538:	3c01      	subs	r4, #1
 801053a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801053e:	e78f      	b.n	8010460 <__kernel_rem_pio2f+0x3d8>
 8010540:	eef1 6a66 	vneg.f32	s13, s13
 8010544:	eeb1 7a47 	vneg.f32	s14, s14
 8010548:	edc7 6a00 	vstr	s13, [r7]
 801054c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010550:	eef1 7a67 	vneg.f32	s15, s15
 8010554:	e790      	b.n	8010478 <__kernel_rem_pio2f+0x3f0>
 8010556:	bf00      	nop

08010558 <floor>:
 8010558:	ec51 0b10 	vmov	r0, r1, d0
 801055c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010564:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010568:	2e13      	cmp	r6, #19
 801056a:	460c      	mov	r4, r1
 801056c:	4605      	mov	r5, r0
 801056e:	4680      	mov	r8, r0
 8010570:	dc34      	bgt.n	80105dc <floor+0x84>
 8010572:	2e00      	cmp	r6, #0
 8010574:	da17      	bge.n	80105a6 <floor+0x4e>
 8010576:	a332      	add	r3, pc, #200	@ (adr r3, 8010640 <floor+0xe8>)
 8010578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057c:	f7ef fe52 	bl	8000224 <__adddf3>
 8010580:	2200      	movs	r2, #0
 8010582:	2300      	movs	r3, #0
 8010584:	f7f0 fa94 	bl	8000ab0 <__aeabi_dcmpgt>
 8010588:	b150      	cbz	r0, 80105a0 <floor+0x48>
 801058a:	2c00      	cmp	r4, #0
 801058c:	da55      	bge.n	801063a <floor+0xe2>
 801058e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010592:	432c      	orrs	r4, r5
 8010594:	2500      	movs	r5, #0
 8010596:	42ac      	cmp	r4, r5
 8010598:	4c2b      	ldr	r4, [pc, #172]	@ (8010648 <floor+0xf0>)
 801059a:	bf08      	it	eq
 801059c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80105a0:	4621      	mov	r1, r4
 80105a2:	4628      	mov	r0, r5
 80105a4:	e023      	b.n	80105ee <floor+0x96>
 80105a6:	4f29      	ldr	r7, [pc, #164]	@ (801064c <floor+0xf4>)
 80105a8:	4137      	asrs	r7, r6
 80105aa:	ea01 0307 	and.w	r3, r1, r7
 80105ae:	4303      	orrs	r3, r0
 80105b0:	d01d      	beq.n	80105ee <floor+0x96>
 80105b2:	a323      	add	r3, pc, #140	@ (adr r3, 8010640 <floor+0xe8>)
 80105b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b8:	f7ef fe34 	bl	8000224 <__adddf3>
 80105bc:	2200      	movs	r2, #0
 80105be:	2300      	movs	r3, #0
 80105c0:	f7f0 fa76 	bl	8000ab0 <__aeabi_dcmpgt>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d0eb      	beq.n	80105a0 <floor+0x48>
 80105c8:	2c00      	cmp	r4, #0
 80105ca:	bfbe      	ittt	lt
 80105cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80105d0:	4133      	asrlt	r3, r6
 80105d2:	18e4      	addlt	r4, r4, r3
 80105d4:	ea24 0407 	bic.w	r4, r4, r7
 80105d8:	2500      	movs	r5, #0
 80105da:	e7e1      	b.n	80105a0 <floor+0x48>
 80105dc:	2e33      	cmp	r6, #51	@ 0x33
 80105de:	dd0a      	ble.n	80105f6 <floor+0x9e>
 80105e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80105e4:	d103      	bne.n	80105ee <floor+0x96>
 80105e6:	4602      	mov	r2, r0
 80105e8:	460b      	mov	r3, r1
 80105ea:	f7ef fe1b 	bl	8000224 <__adddf3>
 80105ee:	ec41 0b10 	vmov	d0, r0, r1
 80105f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80105fa:	f04f 37ff 	mov.w	r7, #4294967295
 80105fe:	40df      	lsrs	r7, r3
 8010600:	4207      	tst	r7, r0
 8010602:	d0f4      	beq.n	80105ee <floor+0x96>
 8010604:	a30e      	add	r3, pc, #56	@ (adr r3, 8010640 <floor+0xe8>)
 8010606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801060a:	f7ef fe0b 	bl	8000224 <__adddf3>
 801060e:	2200      	movs	r2, #0
 8010610:	2300      	movs	r3, #0
 8010612:	f7f0 fa4d 	bl	8000ab0 <__aeabi_dcmpgt>
 8010616:	2800      	cmp	r0, #0
 8010618:	d0c2      	beq.n	80105a0 <floor+0x48>
 801061a:	2c00      	cmp	r4, #0
 801061c:	da0a      	bge.n	8010634 <floor+0xdc>
 801061e:	2e14      	cmp	r6, #20
 8010620:	d101      	bne.n	8010626 <floor+0xce>
 8010622:	3401      	adds	r4, #1
 8010624:	e006      	b.n	8010634 <floor+0xdc>
 8010626:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801062a:	2301      	movs	r3, #1
 801062c:	40b3      	lsls	r3, r6
 801062e:	441d      	add	r5, r3
 8010630:	4545      	cmp	r5, r8
 8010632:	d3f6      	bcc.n	8010622 <floor+0xca>
 8010634:	ea25 0507 	bic.w	r5, r5, r7
 8010638:	e7b2      	b.n	80105a0 <floor+0x48>
 801063a:	2500      	movs	r5, #0
 801063c:	462c      	mov	r4, r5
 801063e:	e7af      	b.n	80105a0 <floor+0x48>
 8010640:	8800759c 	.word	0x8800759c
 8010644:	7e37e43c 	.word	0x7e37e43c
 8010648:	bff00000 	.word	0xbff00000
 801064c:	000fffff 	.word	0x000fffff

08010650 <floorf>:
 8010650:	ee10 3a10 	vmov	r3, s0
 8010654:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010658:	3a7f      	subs	r2, #127	@ 0x7f
 801065a:	2a16      	cmp	r2, #22
 801065c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010660:	dc2b      	bgt.n	80106ba <floorf+0x6a>
 8010662:	2a00      	cmp	r2, #0
 8010664:	da12      	bge.n	801068c <floorf+0x3c>
 8010666:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80106cc <floorf+0x7c>
 801066a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801066e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010676:	dd06      	ble.n	8010686 <floorf+0x36>
 8010678:	2b00      	cmp	r3, #0
 801067a:	da24      	bge.n	80106c6 <floorf+0x76>
 801067c:	2900      	cmp	r1, #0
 801067e:	4b14      	ldr	r3, [pc, #80]	@ (80106d0 <floorf+0x80>)
 8010680:	bf08      	it	eq
 8010682:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8010686:	ee00 3a10 	vmov	s0, r3
 801068a:	4770      	bx	lr
 801068c:	4911      	ldr	r1, [pc, #68]	@ (80106d4 <floorf+0x84>)
 801068e:	4111      	asrs	r1, r2
 8010690:	420b      	tst	r3, r1
 8010692:	d0fa      	beq.n	801068a <floorf+0x3a>
 8010694:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80106cc <floorf+0x7c>
 8010698:	ee30 0a27 	vadd.f32	s0, s0, s15
 801069c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80106a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a4:	ddef      	ble.n	8010686 <floorf+0x36>
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	bfbe      	ittt	lt
 80106aa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80106ae:	fa40 f202 	asrlt.w	r2, r0, r2
 80106b2:	189b      	addlt	r3, r3, r2
 80106b4:	ea23 0301 	bic.w	r3, r3, r1
 80106b8:	e7e5      	b.n	8010686 <floorf+0x36>
 80106ba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80106be:	d3e4      	bcc.n	801068a <floorf+0x3a>
 80106c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80106c4:	4770      	bx	lr
 80106c6:	2300      	movs	r3, #0
 80106c8:	e7dd      	b.n	8010686 <floorf+0x36>
 80106ca:	bf00      	nop
 80106cc:	7149f2ca 	.word	0x7149f2ca
 80106d0:	bf800000 	.word	0xbf800000
 80106d4:	007fffff 	.word	0x007fffff

080106d8 <_init>:
 80106d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106da:	bf00      	nop
 80106dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106de:	bc08      	pop	{r3}
 80106e0:	469e      	mov	lr, r3
 80106e2:	4770      	bx	lr

080106e4 <_fini>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	bf00      	nop
 80106e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ea:	bc08      	pop	{r3}
 80106ec:	469e      	mov	lr, r3
 80106ee:	4770      	bx	lr
