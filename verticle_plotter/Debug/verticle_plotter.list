
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8bc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c84  0800da94  0800da94  0000ea94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e718  0800e718  000101b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e718  0800e718  0000f718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e720  0800e720  000101b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e720  0800e720  0000f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e724  0800e724  0000f724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800e728  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  200001b4  0800e8dc  000101b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cf4  0800e8dc  00010cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d4b3  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052a5  00000000  00000000  0003d697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  00042940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001576  00000000  00000000  000444f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d207  00000000  00000000  00045a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a58f  00000000  00000000  00072c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a829  00000000  00000000  0009d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b7a2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cf8  00000000  00000000  001b7a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bf768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800da7c 	.word	0x0800da7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800da7c 	.word	0x0800da7c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 ff6b 	bl	8005d14 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f004 f854 	bl	8004ef8 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 faeb 	bl	80014f2 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fb81 	bl	80016b0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_range+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_range+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fc7d 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_range+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 fc74 	bl	8001900 <PWM_write_range>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_range+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc60 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fc57 	bl	8001900 <PWM_write_range>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_range+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fc45 	bl	8001900 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc38 	bl	8001900 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 fd68 	bl	8006ba0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_range+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fc0f 	bl	8001900 <PWM_write_range>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f005 fd4b 	bl	8006ba0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbf2 	bl	8001900 <PWM_write_range>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f005 fd30 	bl	8006ba0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fbd3 	bl	8001900 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	edc7 0a00 	vstr	s1, [r7]
 8001216:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <FIR_init+0x2a>
        numTaps += 1;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f00b f996 	bl	800c56c <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f00b f98d 	bl	800c56c <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <FIR_init+0x224>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80db 	beq.w	8001424 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001272:	e00a      	b.n	800128a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	3301      	adds	r3, #1
 8001288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800128a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f0      	bcc.n	8001274 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001292:	edd7 6a01 	vldr	s13, [r7, #4]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ae:	e077      	b.n	80013a0 <FIR_init+0x1a0>
            if (i == half_taps) {
 80012b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10c      	bne.n	80012d6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
 80012d4:	e02c      	b.n	8001330 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80012d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80012e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001430 <FIR_init+0x230>
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f00b fb08 	bl	800c914 <sinf>
 8001304:	eef0 6a40 	vmov.f32	s13, s0
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001434 <FIR_init+0x234>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	ed93 8a00 	vldr	s16, [r3]
 8001340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001430 <FIR_init+0x230>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3b01      	subs	r3, #1
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eeb0 0a66 	vmov.f32	s0, s13
 8001368:	f00b fa90 	bl	800c88c <cosf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001438 <FIR_init+0x238>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800143c <FIR_init+0x23c>
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001390:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db82      	blt.n	80012b0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	83fb      	strh	r3, [r7, #30]
 80013b4:	e00f      	b.n	80013d6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83fb      	strh	r3, [r7, #30]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3eb      	bcc.n	80013b6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d01b      	beq.n	8001424 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	83bb      	strh	r3, [r7, #28]
 80013f0:	e014      	b.n	800141c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed97 7a08 	vldr	s14, [r7, #32]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	83bb      	strh	r3, [r7, #28]
 800141c:	8bba      	ldrh	r2, [r7, #28]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e6      	bcc.n	80013f2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	ecbd 8b02 	vpop	{d8}
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40c90fdb 	.word	0x40c90fdb
 8001434:	40490fdb 	.word	0x40490fdb
 8001438:	3eeb851f 	.word	0x3eeb851f
 800143c:	3f0a3d71 	.word	0x3f0a3d71

08001440 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	895b      	ldrh	r3, [r3, #10]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	895b      	ldrh	r3, [r3, #10]
 8001466:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001468:	2300      	movs	r3, #0
 800146a:	813b      	strh	r3, [r7, #8]
 800146c:	e023      	b.n	80014b6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	897b      	ldrh	r3, [r7, #10]
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	893b      	ldrh	r3, [r7, #8]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	edd3 7a00 	vldr	s15, [r3]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 800149a:	897b      	ldrh	r3, [r7, #10]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d104      	bne.n	80014aa <FIR_process+0x6a>
            index = fir->numTaps - 1;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	891b      	ldrh	r3, [r3, #8]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	817b      	strh	r3, [r7, #10]
 80014a8:	e002      	b.n	80014b0 <FIR_process+0x70>
        } else {
            index--;
 80014aa:	897b      	ldrh	r3, [r7, #10]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80014b0:	893b      	ldrh	r3, [r7, #8]
 80014b2:	3301      	adds	r3, #1
 80014b4:	813b      	strh	r3, [r7, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	891b      	ldrh	r3, [r3, #8]
 80014ba:	893a      	ldrh	r2, [r7, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d3d6      	bcc.n	800146e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	895b      	ldrh	r3, [r3, #10]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	895a      	ldrh	r2, [r3, #10]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	891b      	ldrh	r3, [r3, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d302      	bcc.n	80014de <FIR_process+0x9e>
        fir->bufferIndex = 0;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	815a      	strh	r2, [r3, #10]
    }

    return output;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	ee07 3a90 	vmov	s15, r3
}
 80014e4:	eeb0 0a67 	vmov.f32	s0, s15
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80014f2:	b480      	push	{r7}
 80014f4:	b089      	sub	sp, #36	@ 0x24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fc:	edc7 0a04 	vstr	s1, [r7, #16]
 8001500:	ed87 1a03 	vstr	s2, [r7, #12]
 8001504:	edc7 1a02 	vstr	s3, [r7, #8]
 8001508:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800150c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001510:	edd7 7a04 	vldr	s15, [r7, #16]
 8001514:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001518:	ed97 7a03 	vldr	s14, [r7, #12]
 800151c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001520:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001528:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800152c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001530:	edd7 7a02 	vldr	s15, [r7, #8]
 8001534:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001538:	edd7 7a07 	vldr	s15, [r7, #28]
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	ed97 7a02 	vldr	s14, [r7, #8]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	ee07 3a90 	vmov	s15, r3
}
 8001552:	eeb0 0a67 	vmov.f32	s0, s15
 8001556:	3724      	adds	r7, #36	@ 0x24
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001564:	4b0d      	ldr	r3, [pc, #52]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800156c:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <modbus_1t5_Timeout+0x3c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f042 0201 	orr.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	200001d0 	.word	0x200001d0

080015a0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015a8:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <modbus_3t5_Timeout+0x1c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2201      	movs	r2, #1
 80015ae:	755a      	strb	r2, [r3, #21]

}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	200001d0 	.word	0x200001d0

080015c0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f009 f993 	bl	800a8f4 <HAL_UART_GetError>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b20      	cmp	r3, #32
 80015d2:	d101      	bne.n	80015d8 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80015d4:	f7ff ffc4 	bl	8001560 <modbus_1t5_Timeout>

	}
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80015ee:	4a2d      	ldr	r2, [pc, #180]	@ (80016a4 <Modbus_init+0xc4>)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80015f4:	4b2b      	ldr	r3, [pc, #172]	@ (80016a4 <Modbus_init+0xc4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80015fc:	4b29      	ldr	r3, [pc, #164]	@ (80016a4 <Modbus_init+0xc4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001604:	4b27      	ldr	r3, [pc, #156]	@ (80016a4 <Modbus_init+0xc4>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800160c:	4b25      	ldr	r3, [pc, #148]	@ (80016a4 <Modbus_init+0xc4>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	7e3a      	ldrb	r2, [r7, #24]
 8001612:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001614:	4b23      	ldr	r3, [pc, #140]	@ (80016a4 <Modbus_init+0xc4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <Modbus_init+0xc8>)
 8001622:	210e      	movs	r1, #14
 8001624:	4618      	mov	r0, r3
 8001626:	f007 fc13 	bl	8008e50 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2110      	movs	r1, #16
 8001630:	4618      	mov	r0, r3
 8001632:	f009 f909 	bl	800a848 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	4618      	mov	r0, r3
 800163c:	f009 f920 	bl	800a880 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	4a19      	ldr	r2, [pc, #100]	@ (80016ac <Modbus_init+0xcc>)
 8001646:	2104      	movs	r1, #4
 8001648:	4618      	mov	r0, r3
 800164a:	f008 fc51 	bl	8009ef0 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <Modbus_init+0xc4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <Modbus_init+0xc4>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <Modbus_init+0xc4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001660:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001664:	4413      	add	r3, r2
 8001666:	3302      	adds	r3, #2
 8001668:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800166c:	4619      	mov	r1, r3
 800166e:	f008 fcf9 	bl	800a064 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <Modbus_init+0xc4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d10c      	bne.n	800169c <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <Modbus_init+0xc4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	4618      	mov	r0, r3
 800168a:	f006 fbbd 	bl	8007e08 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <Modbus_init+0xc4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fe0c 	bl	80082b4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200001d0 	.word	0x200001d0
 80016a8:	080015a1 	.word	0x080015a1
 80016ac:	080015c1 	.word	0x080015c1

080016b0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <PWM_init+0x40>)
 80016c2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	88fa      	ldrh	r2, [r7, #6]
 80016ce:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80016d6:	68b8      	ldr	r0, [r7, #8]
 80016d8:	f006 fb26 	bl	8007d28 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80016dc:	88fb      	ldrh	r3, [r7, #6]
 80016de:	4619      	mov	r1, r3
 80016e0:	68b8      	ldr	r0, [r7, #8]
 80016e2:	f006 fc6d 	bl	8007fc0 <HAL_TIM_PWM_Start>
}
 80016e6:	bf00      	nop
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	0a21fe80 	.word	0x0a21fe80

080016f4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80016f4:	b5b0      	push	{r4, r5, r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001700:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001704:	edd7 7a02 	vldr	s15, [r7, #8]
 8001708:	eef5 7a40 	vcmp.f32	s15, #0.0
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	d137      	bne.n	8001782 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	889b      	ldrh	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <PWM_write_duty+0x32>
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001724:	e0e1      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	889b      	ldrh	r3, [r3, #4]
 800172a:	2b04      	cmp	r3, #4
 800172c:	d105      	bne.n	800173a <PWM_write_duty+0x46>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2300      	movs	r3, #0
 8001736:	6393      	str	r3, [r2, #56]	@ 0x38
 8001738:	e0d7      	b.n	80018ea <PWM_write_duty+0x1f6>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	889b      	ldrh	r3, [r3, #4]
 800173e:	2b08      	cmp	r3, #8
 8001740:	d105      	bne.n	800174e <PWM_write_duty+0x5a>
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	2300      	movs	r3, #0
 800174a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800174c:	e0cd      	b.n	80018ea <PWM_write_duty+0x1f6>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	889b      	ldrh	r3, [r3, #4]
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d105      	bne.n	8001762 <PWM_write_duty+0x6e>
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001760:	e0c3      	b.n	80018ea <PWM_write_duty+0x1f6>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	889b      	ldrh	r3, [r3, #4]
 8001766:	2b10      	cmp	r3, #16
 8001768:	d105      	bne.n	8001776 <PWM_write_duty+0x82>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2300      	movs	r3, #0
 8001772:	6493      	str	r3, [r2, #72]	@ 0x48
 8001774:	e0b9      	b.n	80018ea <PWM_write_duty+0x1f6>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001780:	e0b3      	b.n	80018ea <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800178e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179a:	ee17 2a90 	vmov	r2, s15
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80017aa:	33fe      	adds	r3, #254	@ 0xfe
 80017ac:	4a51      	ldr	r2, [pc, #324]	@ (80018f4 <PWM_write_duty+0x200>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	0bdb      	lsrs	r3, r3, #15
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	ee07 3a90 	vmov	s15, r3
 80017c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	899b      	ldrh	r3, [r3, #12]
 80017ce:	3301      	adds	r3, #1
 80017d0:	ee07 3a90 	vmov	s15, r3
 80017d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80017dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80017e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f0:	ee17 3a90 	vmov	r3, s15
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	89db      	ldrh	r3, [r3, #14]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe5c 	bl	80004bc <__aeabi_i2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
 8001808:	edd7 7a01 	vldr	s15, [r7, #4]
 800180c:	eef0 7ae7 	vabs.f32	s15, s15
 8001810:	ee17 0a90 	vmov	r0, s15
 8001814:	f7fe fe64 	bl	80004e0 <__aeabi_f2d>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	4620      	mov	r0, r4
 800181e:	4629      	mov	r1, r5
 8001820:	f7fe feb6 	bl	8000590 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b31      	ldr	r3, [pc, #196]	@ (80018f8 <PWM_write_duty+0x204>)
 8001832:	f7fe ffd7 	bl	80007e4 <__aeabi_ddiv>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f8b9 	bl	80009b4 <__aeabi_d2uiz>
 8001842:	4603      	mov	r3, r0
 8001844:	b29b      	uxth	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	899a      	ldrh	r2, [r3, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	89da      	ldrh	r2, [r3, #14]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	89da      	ldrh	r2, [r3, #14]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d106      	bne.n	8001884 <PWM_write_duty+0x190>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	6952      	ldr	r2, [r2, #20]
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001882:	e032      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	889b      	ldrh	r3, [r3, #4]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d106      	bne.n	800189a <PWM_write_duty+0x1a6>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	695b      	ldr	r3, [r3, #20]
 8001896:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001898:	e027      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	889b      	ldrh	r3, [r3, #4]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d106      	bne.n	80018b0 <PWM_write_duty+0x1bc>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018ae:	e01c      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	889b      	ldrh	r3, [r3, #4]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d106      	bne.n	80018c6 <PWM_write_duty+0x1d2>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80018c4:	e011      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	889b      	ldrh	r3, [r3, #4]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d106      	bne.n	80018dc <PWM_write_duty+0x1e8>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80018da:	e006      	b.n	80018ea <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80018e8:	e7ff      	b.n	80018ea <PWM_write_duty+0x1f6>
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bdb0      	pop	{r4, r5, r7, pc}
 80018f2:	bf00      	nop
 80018f4:	80008001 	.word	0x80008001
 80018f8:	40590000 	.word	0x40590000
 80018fc:	00000000 	.word	0x00000000

08001900 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001900:	b5b0      	push	{r4, r5, r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	ed87 0a02 	vstr	s0, [r7, #8]
 800190c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001910:	edd7 7a02 	vldr	s15, [r7, #8]
 8001914:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191c:	d137      	bne.n	800198e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <PWM_write_range+0x32>
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2200      	movs	r2, #0
 800192e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001930:	e0e1      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d105      	bne.n	8001946 <PWM_write_range+0x46>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2300      	movs	r3, #0
 8001942:	6393      	str	r3, [r2, #56]	@ 0x38
 8001944:	e0d7      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	2b08      	cmp	r3, #8
 800194c:	d105      	bne.n	800195a <PWM_write_range+0x5a>
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001958:	e0cd      	b.n	8001af6 <PWM_write_range+0x1f6>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d105      	bne.n	800196e <PWM_write_range+0x6e>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	e0c3      	b.n	8001af6 <PWM_write_range+0x1f6>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	889b      	ldrh	r3, [r3, #4]
 8001972:	2b10      	cmp	r3, #16
 8001974:	d105      	bne.n	8001982 <PWM_write_range+0x82>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2300      	movs	r3, #0
 800197e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001980:	e0b9      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800198c:	e0b3      	b.n	8001af6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	ee07 3a90 	vmov	s15, r3
 8001996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800199a:	ed97 7a02 	vldr	s14, [r7, #8]
 800199e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 2a90 	vmov	r2, s15
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019b6:	33fe      	adds	r3, #254	@ 0xfe
 80019b8:	4a53      	ldr	r2, [pc, #332]	@ (8001b08 <PWM_write_range+0x208>)
 80019ba:	fba2 2303 	umull	r2, r3, r2, r3
 80019be:	0bdb      	lsrs	r3, r3, #15
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	899b      	ldrh	r3, [r3, #12]
 80019da:	3301      	adds	r3, #1
 80019dc:	ee07 3a90 	vmov	s15, r3
 80019e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80019e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80019ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fc:	ee17 3a90 	vmov	r3, s15
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	89db      	ldrh	r3, [r3, #14]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd56 	bl	80004bc <__aeabi_i2d>
 8001a10:	4604      	mov	r4, r0
 8001a12:	460d      	mov	r5, r1
 8001a14:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a18:	eef0 7ae7 	vabs.f32	s15, s15
 8001a1c:	ee17 0a90 	vmov	r0, s15
 8001a20:	f7fe fd5e 	bl	80004e0 <__aeabi_f2d>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fdb0 	bl	8000590 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	a331      	add	r3, pc, #196	@ (adr r3, 8001b00 <PWM_write_range+0x200>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fed1 	bl	80007e4 <__aeabi_ddiv>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f7fe ffb3 	bl	80009b4 <__aeabi_d2uiz>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	461a      	mov	r2, r3
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	899a      	ldrh	r2, [r3, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	89da      	ldrh	r2, [r3, #14]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	89da      	ldrh	r2, [r3, #14]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	889b      	ldrh	r3, [r3, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <PWM_write_range+0x190>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	6952      	ldr	r2, [r2, #20]
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a8e:	e032      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	889b      	ldrh	r3, [r3, #4]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d106      	bne.n	8001aa6 <PWM_write_range+0x1a6>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001aa4:	e027      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	889b      	ldrh	r3, [r3, #4]
 8001aaa:	2b08      	cmp	r3, #8
 8001aac:	d106      	bne.n	8001abc <PWM_write_range+0x1bc>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001aba:	e01c      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	889b      	ldrh	r3, [r3, #4]
 8001ac0:	2b0c      	cmp	r3, #12
 8001ac2:	d106      	bne.n	8001ad2 <PWM_write_range+0x1d2>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	695b      	ldr	r3, [r3, #20]
 8001ace:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001ad0:	e011      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	889b      	ldrh	r3, [r3, #4]
 8001ad6:	2b10      	cmp	r3, #16
 8001ad8:	d106      	bne.n	8001ae8 <PWM_write_range+0x1e8>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001ae6:	e006      	b.n	8001af6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001af4:	e7ff      	b.n	8001af6 <PWM_write_range+0x1f6>
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bdb0      	pop	{r4, r5, r7, pc}
 8001afe:	bf00      	nop
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40efffe0 	.word	0x40efffe0
 8001b08:	80008001 	.word	0x80008001

08001b0c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6178      	str	r0, [r7, #20]
 8001b14:	6139      	str	r1, [r7, #16]
 8001b16:	60fa      	str	r2, [r7, #12]
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	68ba      	ldr	r2, [r7, #8]
 8001b2e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001b54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b58:	68fa      	ldr	r2, [r7, #12]
 8001b5a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	fb01 f202 	mul.w	r2, r1, r2
 8001b64:	1a9b      	subs	r3, r3, r2
 8001b66:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2200      	movs	r2, #0
 8001b72:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001b9a:	213c      	movs	r1, #60	@ 0x3c
 8001b9c:	6938      	ldr	r0, [r7, #16]
 8001b9e:	f006 fccb 	bl	8008538 <HAL_TIM_Encoder_Start>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	0000      	movs	r0, r0
 8001bac:	0000      	movs	r0, r0
	...

08001bb0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001bb0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	0fda      	lsrs	r2, r3, #31
 8001bd8:	4413      	add	r3, r2
 8001bda:	105b      	asrs	r3, r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	dd05      	ble.n	8001bf0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	e00e      	b.n	8001c0e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	425b      	negs	r3, r3
 8001bf6:	0fda      	lsrs	r2, r3, #31
 8001bf8:	4413      	add	r3, r2
 8001bfa:	105b      	asrs	r3, r3, #1
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4293      	cmp	r3, r2
 8001c02:	da04      	bge.n	8001c0e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	441a      	add	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	ee07 3a90 	vmov	s15, r3
 8001c30:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	ee07 3a90 	vmov	s15, r3
 8001c3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c40:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001c4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fc3f 	bl	80004e0 <__aeabi_f2d>
 8001c62:	4604      	mov	r4, r0
 8001c64:	460d      	mov	r5, r1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	ee07 3a90 	vmov	s15, r3
 8001c6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c82:	ee16 0a90 	vmov	r0, s13
 8001c86:	f7fe fc2b 	bl	80004e0 <__aeabi_f2d>
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	4b36      	ldr	r3, [pc, #216]	@ (8001d68 <QEI_get_diff_count+0x1b8>)
 8001c90:	f7fe fc7e 	bl	8000590 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4690      	mov	r8, r2
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc1d 	bl	80004e0 <__aeabi_f2d>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4640      	mov	r0, r8
 8001cac:	4649      	mov	r1, r9
 8001cae:	f7fe fc6f 	bl	8000590 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fab3 	bl	8000224 <__adddf3>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe fe95 	bl	80009f4 <__aeabi_d2f>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7fe fc03 	bl	80004e0 <__aeabi_f2d>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	460d      	mov	r5, r1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	ee07 3a90 	vmov	s15, r3
 8001cf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f7fe fbed 	bl	80004e0 <__aeabi_f2d>
 8001d06:	a316      	add	r3, pc, #88	@ (adr r3, 8001d60 <QEI_get_diff_count+0x1b0>)
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	f7fe fc40 	bl	8000590 <__aeabi_dmul>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	4690      	mov	r8, r2
 8001d16:	4699      	mov	r9, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fbdf 	bl	80004e0 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe fc31 	bl	8000590 <__aeabi_dmul>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4620      	mov	r0, r4
 8001d34:	4629      	mov	r1, r5
 8001d36:	f7fe fa75 	bl	8000224 <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fe57 	bl	80009f4 <__aeabi_d2f>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	605a      	str	r2, [r3, #4]
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d5e:	bf00      	nop
 8001d60:	54442d18 	.word	0x54442d18
 8001d64:	400921fb 	.word	0x400921fb
 8001d68:	40240000 	.word	0x40240000
 8001d6c:	00000000 	.word	0x00000000

08001d70 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001d70:	b5b0      	push	{r4, r5, r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6a12      	ldr	r2, [r2, #32]
 8001d80:	fb02 f303 	mul.w	r3, r2, r3
 8001d84:	ee07 3a90 	vmov	s15, r3
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fba2 	bl	80004e0 <__aeabi_f2d>
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f50 <QEI_compute_data+0x1e0>)
 8001da2:	f7fe fbf5 	bl	8000590 <__aeabi_dmul>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4614      	mov	r4, r2
 8001dac:	461d      	mov	r5, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	ee07 3a90 	vmov	s15, r3
 8001db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dba:	ee17 0a90 	vmov	r0, s15
 8001dbe:	f7fe fb8f 	bl	80004e0 <__aeabi_f2d>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	f7fe fd0b 	bl	80007e4 <__aeabi_ddiv>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4614      	mov	r4, r2
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fb80 	bl	80004e0 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4620      	mov	r0, r4
 8001de6:	4629      	mov	r1, r5
 8001de8:	f7fe fbd2 	bl	8000590 <__aeabi_dmul>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	4610      	mov	r0, r2
 8001df2:	4619      	mov	r1, r3
 8001df4:	f7fe fdfe 	bl	80009f4 <__aeabi_d2f>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e04:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f7fe fb68 	bl	80004e0 <__aeabi_f2d>
 8001e10:	a34d      	add	r3, pc, #308	@ (adr r3, 8001f48 <QEI_compute_data+0x1d8>)
 8001e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e16:	f7fe fbbb 	bl	8000590 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	ee07 3a90 	vmov	s15, r3
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fb55 	bl	80004e0 <__aeabi_f2d>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4620      	mov	r0, r4
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	f7fe fcd1 	bl	80007e4 <__aeabi_ddiv>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb46 	bl	80004e0 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4620      	mov	r0, r4
 8001e5a:	4629      	mov	r1, r5
 8001e5c:	f7fe fb98 	bl	8000590 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fdc4 	bl	80009f4 <__aeabi_d2f>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb32 	bl	80004e0 <__aeabi_f2d>
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	4b34      	ldr	r3, [pc, #208]	@ (8001f54 <QEI_compute_data+0x1e4>)
 8001e82:	f7fe fb85 	bl	8000590 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	461d      	mov	r5, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e9a:	ee17 0a90 	vmov	r0, s15
 8001e9e:	f7fe fb1f 	bl	80004e0 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	4629      	mov	r1, r5
 8001eaa:	f7fe fc9b 	bl	80007e4 <__aeabi_ddiv>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe fb10 	bl	80004e0 <__aeabi_f2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe fb62 	bl	8000590 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fd8e 	bl	80009f4 <__aeabi_d2f>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ef2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d104      	bne.n	8001f12 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f10:	e00f      	b.n	8001f32 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <QEI_compute_data+0x1b0>
 8001f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f1e:	e001      	b.n	8001f24 <QEI_compute_data+0x1b4>
 8001f20:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001f58 <QEI_compute_data+0x1e8>
 8001f24:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689a      	ldr	r2, [r3, #8]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	60da      	str	r2, [r3, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	f3af 8000 	nop.w
 8001f48:	54442d18 	.word	0x54442d18
 8001f4c:	400921fb 	.word	0x400921fb
 8001f50:	404e0000 	.word	0x404e0000
 8001f54:	40240000 	.word	0x40240000
 8001f58:	00000000 	.word	0x00000000

08001f5c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08e      	sub	sp, #56	@ 0x38
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6178      	str	r0, [r7, #20]
 8001f64:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f68:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f6c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f70:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2200      	movs	r2, #0
 8001f78:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f04f 0200 	mov.w	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8001f9a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fa6:	eef0 7ae7 	vabs.f32	s15, s15
 8001faa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8001fae:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc2:	d503      	bpl.n	8001fcc <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	22ff      	movs	r2, #255	@ 0xff
 8001fc8:	741a      	strb	r2, [r3, #16]
 8001fca:	e002      	b.n	8001fd2 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8001fd2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001fd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fde:	d006      	beq.n	8001fee <Trapezoidal_Generator+0x92>
 8001fe0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fe4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fec:	d104      	bne.n	8001ff8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
        return;
 8001ff6:	e06f      	b.n	80020d8 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8001ff8:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ffc:	ed97 7a01 	vldr	s14, [r7, #4]
 8002000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002004:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002008:	edd7 7a01 	vldr	s15, [r7, #4]
 800200c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002010:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002014:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8002028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800202c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002030:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800203c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002040:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002044:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800204c:	db27      	blt.n	800209e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800204e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002052:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800205e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002062:	ed97 7a02 	vldr	s14, [r7, #8]
 8002066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002072:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8002074:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002078:	edd7 7a06 	vldr	s15, [r7, #24]
 800207c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8002086:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800208a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800208e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	edc3 7a02 	vstr	s15, [r3, #8]
 800209c:	e018      	b.n	80020d0 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 800209e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80020a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020aa:	eeb0 0a66 	vmov.f32	s0, s13
 80020ae:	f00a fbcf 	bl	800c850 <sqrtf>
 80020b2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	6a3a      	ldr	r2, [r7, #32]
 80020ba:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	6a3a      	ldr	r2, [r7, #32]
 80020c0:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80020c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	60da      	str	r2, [r3, #12]
}
 80020d8:	3738      	adds	r7, #56	@ 0x38
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08c      	sub	sp, #48	@ 0x30
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80020e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	2220      	movs	r2, #32
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f00a faed 	bl	800c6d8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80020fe:	4b39      	ldr	r3, [pc, #228]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002100:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002104:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002106:	4b37      	ldr	r3, [pc, #220]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002108:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800210c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800210e:	4b35      	ldr	r3, [pc, #212]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002110:	2200      	movs	r2, #0
 8002112:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002114:	4b33      	ldr	r3, [pc, #204]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002116:	2200      	movs	r2, #0
 8002118:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800211a:	4b32      	ldr	r3, [pc, #200]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800211c:	2200      	movs	r2, #0
 800211e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002120:	4b30      	ldr	r3, [pc, #192]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002122:	2201      	movs	r2, #1
 8002124:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002126:	4b2f      	ldr	r3, [pc, #188]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002128:	2204      	movs	r2, #4
 800212a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800212c:	4b2d      	ldr	r3, [pc, #180]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800212e:	2200      	movs	r2, #0
 8002130:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002132:	4b2c      	ldr	r3, [pc, #176]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002134:	2201      	movs	r2, #1
 8002136:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002138:	4b2a      	ldr	r3, [pc, #168]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800213a:	2202      	movs	r2, #2
 800213c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800213e:	4b29      	ldr	r3, [pc, #164]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002146:	4b27      	ldr	r3, [pc, #156]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002148:	2200      	movs	r2, #0
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800214e:	2200      	movs	r2, #0
 8002150:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002152:	4b24      	ldr	r3, [pc, #144]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800215a:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800215c:	2200      	movs	r2, #0
 800215e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002160:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002168:	481e      	ldr	r0, [pc, #120]	@ (80021e4 <MX_ADC1_Init+0x104>)
 800216a:	f002 fd09 	bl	8004b80 <HAL_ADC_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002174:	f000 fe52 	bl	8002e1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002178:	2300      	movs	r3, #0
 800217a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800217c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002180:	4619      	mov	r1, r3
 8002182:	4818      	ldr	r0, [pc, #96]	@ (80021e4 <MX_ADC1_Init+0x104>)
 8002184:	f003 fe28 	bl	8005dd8 <HAL_ADCEx_MultiModeConfigChannel>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800218e:	f000 fe45 	bl	8002e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <MX_ADC1_Init+0x108>)
 8002194:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002196:	2306      	movs	r3, #6
 8002198:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800219a:	2307      	movs	r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800219e:	237f      	movs	r3, #127	@ 0x7f
 80021a0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021a2:	2304      	movs	r3, #4
 80021a4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <MX_ADC1_Init+0x104>)
 80021b0:	f002 ff94 	bl	80050dc <HAL_ADC_ConfigChannel>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80021ba:	f000 fe2f 	bl	8002e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80021be:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <MX_ADC1_Init+0x10c>)
 80021c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80021c2:	230c      	movs	r3, #12
 80021c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021c6:	1d3b      	adds	r3, r7, #4
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	@ (80021e4 <MX_ADC1_Init+0x104>)
 80021cc:	f002 ff86 	bl	80050dc <HAL_ADC_ConfigChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80021d6:	f000 fe21 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3730      	adds	r7, #48	@ 0x30
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200001d4 	.word	0x200001d4
 80021e8:	19200040 	.word	0x19200040
 80021ec:	1d500080 	.word	0x1d500080

080021f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09e      	sub	sp, #120	@ 0x78
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	2254      	movs	r2, #84	@ 0x54
 800220e:	2100      	movs	r1, #0
 8002210:	4618      	mov	r0, r3
 8002212:	f00a fa61 	bl	800c6d8 <memset>
  if(adcHandle->Instance==ADC1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800221e:	d15e      	bne.n	80022de <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002220:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002224:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002226:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4618      	mov	r0, r3
 8002232:	f005 fac7 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800223c:	f000 fdee 	bl	8002e1c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002240:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002244:	4a28      	ldr	r2, [pc, #160]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 8002246:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800224a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800224c:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 800224e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002250:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 800225a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 800225e:	f043 0304 	orr.w	r3, r3, #4
 8002262:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002264:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_ADC_MspInit+0xf8>)
 8002266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002270:	2303      	movs	r3, #3
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002274:	2303      	movs	r3, #3
 8002276:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800227c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002280:	4619      	mov	r1, r3
 8002282:	481a      	ldr	r0, [pc, #104]	@ (80022ec <HAL_ADC_MspInit+0xfc>)
 8002284:	f004 faf2 	bl	800686c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <HAL_ADC_MspInit+0x104>)
 800228c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800228e:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 8002290:	2205      	movs	r2, #5
 8002292:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002294:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80022a0:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022a2:	2280      	movs	r2, #128	@ 0x80
 80022a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022ae:	4b10      	ldr	r3, [pc, #64]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022b8:	2220      	movs	r2, #32
 80022ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022be:	2200      	movs	r2, #0
 80022c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022c4:	f003 ffa0 	bl	8006208 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80022ce:	f000 fda5 	bl	8002e1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80022d8:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <HAL_ADC_MspInit+0x100>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3778      	adds	r7, #120	@ 0x78
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	48000800 	.word	0x48000800
 80022f0:	20000240 	.word	0x20000240
 80022f4:	40020008 	.word	0x40020008

080022f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <MX_DMA_Init+0x70>)
 8002300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002302:	4a19      	ldr	r2, [pc, #100]	@ (8002368 <MX_DMA_Init+0x70>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6493      	str	r3, [r2, #72]	@ 0x48
 800230a:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <MX_DMA_Init+0x70>)
 800230c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002316:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <MX_DMA_Init+0x70>)
 8002318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231a:	4a13      	ldr	r2, [pc, #76]	@ (8002368 <MX_DMA_Init+0x70>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6493      	str	r3, [r2, #72]	@ 0x48
 8002322:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_DMA_Init+0x70>)
 8002324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	200b      	movs	r0, #11
 8002334:	f003 ff33 	bl	800619e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002338:	200b      	movs	r0, #11
 800233a:	f003 ff4a 	bl	80061d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	200c      	movs	r0, #12
 8002344:	f003 ff2b 	bl	800619e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002348:	200c      	movs	r0, #12
 800234a:	f003 ff42 	bl	80061d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	200d      	movs	r0, #13
 8002354:	f003 ff23 	bl	800619e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002358:	200d      	movs	r0, #13
 800235a:	f003 ff3a 	bl	80061d2 <HAL_NVIC_EnableIRQ>

}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000

0800236c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
 8002380:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <MX_GPIO_Init+0x154>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	4a4e      	ldr	r2, [pc, #312]	@ (80024c0 <MX_GPIO_Init+0x154>)
 8002388:	f043 0304 	orr.w	r3, r3, #4
 800238c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800238e:	4b4c      	ldr	r3, [pc, #304]	@ (80024c0 <MX_GPIO_Init+0x154>)
 8002390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800239a:	4b49      	ldr	r3, [pc, #292]	@ (80024c0 <MX_GPIO_Init+0x154>)
 800239c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800239e:	4a48      	ldr	r2, [pc, #288]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023a6:	4b46      	ldr	r3, [pc, #280]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023aa:	f003 0320 	and.w	r3, r3, #32
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b43      	ldr	r3, [pc, #268]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023b6:	4a42      	ldr	r2, [pc, #264]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023be:	4b40      	ldr	r3, [pc, #256]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b3d      	ldr	r3, [pc, #244]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ce:	4a3c      	ldr	r2, [pc, #240]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023d6:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <MX_GPIO_Init+0x154>)
 80023d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80023e2:	2200      	movs	r2, #0
 80023e4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ec:	f004 fbd8 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80023f0:	2200      	movs	r2, #0
 80023f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80023f6:	4833      	ldr	r0, [pc, #204]	@ (80024c4 <MX_GPIO_Init+0x158>)
 80023f8:	f004 fbd2 	bl	8006ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002402:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	482c      	ldr	r0, [pc, #176]	@ (80024c4 <MX_GPIO_Init+0x158>)
 8002414:	f004 fa2a 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002418:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 800241c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002434:	f004 fa1a 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002438:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 800243c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	4619      	mov	r1, r3
 800244c:	481e      	ldr	r0, [pc, #120]	@ (80024c8 <MX_GPIO_Init+0x15c>)
 800244e:	f004 fa0d 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002452:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002460:	2300      	movs	r3, #0
 8002462:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4816      	ldr	r0, [pc, #88]	@ (80024c4 <MX_GPIO_Init+0x158>)
 800246c:	f004 f9fe 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 8002470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002488:	f004 f9f0 	bl	800686c <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 800248c:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4808      	ldr	r0, [pc, #32]	@ (80024c4 <MX_GPIO_Init+0x158>)
 80024a2:	f004 f9e3 	bl	800686c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024a6:	2200      	movs	r2, #0
 80024a8:	2100      	movs	r1, #0
 80024aa:	2028      	movs	r0, #40	@ 0x28
 80024ac:	f003 fe77 	bl	800619e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024b0:	2028      	movs	r0, #40	@ 0x28
 80024b2:	f003 fe8e 	bl	80061d2 <HAL_NVIC_EnableIRQ>

}
 80024b6:	bf00      	nop
 80024b8:	3728      	adds	r7, #40	@ 0x28
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40021000 	.word	0x40021000
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48000400 	.word	0x48000400

080024cc <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b096      	sub	sp, #88	@ 0x58
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024d8:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2201      	movs	r2, #1
 80024e6:	2101      	movs	r1, #1
 80024e8:	f009 fb85 	bl	800bbf6 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f009 fff5 	bl	800c4ea <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800250c:	4619      	mov	r1, r3
 800250e:	4610      	mov	r0, r2
 8002510:	f009 ffeb 	bl	800c4ea <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f009 ffe1 	bl	800c4ea <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8002534:	4619      	mov	r1, r3
 8002536:	ed97 0a02 	vldr	s0, [r7, #8]
 800253a:	4610      	mov	r0, r2
 800253c:	f009 ff64 	bl	800c408 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8002552:	461a      	mov	r2, r3
 8002554:	f009 fede 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800256a:	461a      	mov	r2, r3
 800256c:	f009 fb08 	bl	800bb80 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002582:	461a      	mov	r2, r3
 8002584:	f009 fec6 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800259a:	461a      	mov	r2, r3
 800259c:	f009 feba 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80025b2:	461a      	mov	r2, r3
 80025b4:	f009 feae 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80025ca:	4619      	mov	r1, r3
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	4610      	mov	r0, r2
 80025d2:	f009 ff19 	bl	800c408 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80025e8:	461a      	mov	r2, r3
 80025ea:	f009 fac9 	bl	800bb80 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002600:	461a      	mov	r2, r3
 8002602:	f009 fe87 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002618:	461a      	mov	r2, r3
 800261a:	f009 fe7b 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8002630:	461a      	mov	r2, r3
 8002632:	f009 faa5 	bl	800bb80 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f009 faee 	bl	800bc26 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800265c:	461a      	mov	r2, r3
 800265e:	f009 fe59 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002674:	461a      	mov	r2, r3
 8002676:	f009 fe4d 	bl	800c314 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800268c:	461a      	mov	r2, r3
 800268e:	f009 fe41 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80026a4:	461a      	mov	r2, r3
 80026a6:	f009 fee5 	bl	800c474 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80026bc:	461a      	mov	r2, r3
 80026be:	f009 fe29 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80026d4:	461a      	mov	r2, r3
 80026d6:	f009 fa53 	bl	800bb80 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80026ec:	461a      	mov	r2, r3
 80026ee:	f009 fe11 	bl	800c314 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80026fa:	2204      	movs	r2, #4
 80026fc:	2104      	movs	r1, #4
 80026fe:	f009 fa7a 	bl	800bbf6 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800270e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002712:	4619      	mov	r1, r3
 8002714:	f009 fdfe 	bl	800c314 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800271e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002722:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002726:	4618      	mov	r0, r3
 8002728:	f009 fea4 	bl	800c474 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8002738:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800273c:	4618      	mov	r0, r3
 800273e:	f009 fde9 	bl	800c314 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002752:	ee07 3a90 	vmov	s15, r3
}
 8002756:	eeb0 0a67 	vmov.f32	s0, s15
 800275a:	3758      	adds	r7, #88	@ 0x58
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b0a2      	sub	sp, #136	@ 0x88
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.7
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a38      	ldr	r2, [pc, #224]	@ (8002850 <Kalman_Start+0xf0>)
 8002770:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 1.0f; //0.05
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800277a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 800277e:	f04f 0300 	mov.w	r3, #0
 8002782:	677b      	str	r3, [r7, #116]	@ 0x74
 8002784:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	667b      	str	r3, [r7, #100]	@ 0x64
 800279e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80027b0:	4b28      	ldr	r3, [pc, #160]	@ (8002854 <Kalman_Start+0xf4>)
 80027b2:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 80027b6:	461d      	mov	r5, r3
 80027b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80027c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80027cc:	f107 0314 	add.w	r3, r7, #20
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80027ea:	e028      	b.n	800283e <Kalman_Start+0xde>
	{
		filter->A[i] = A_matrix[i];
 80027ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4413      	add	r3, r2
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68f9      	ldr	r1, [r7, #12]
 80027fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027fe:	3314      	adds	r3, #20
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002806:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	3388      	adds	r3, #136	@ 0x88
 800280e:	443b      	add	r3, r7
 8002810:	3b64      	subs	r3, #100	@ 0x64
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68f9      	ldr	r1, [r7, #12]
 8002816:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800281a:	3398      	adds	r3, #152	@ 0x98
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002828:	3304      	adds	r3, #4
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002834:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002838:	3301      	adds	r3, #1
 800283a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002842:	2b0f      	cmp	r3, #15
 8002844:	ddd2      	ble.n	80027ec <Kalman_Start+0x8c>
	}

	for(i=0;i<4;i++)
 8002846:	2300      	movs	r3, #0
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800284c:	e03f      	b.n	80028ce <Kalman_Start+0x16e>
 800284e:	bf00      	nop
 8002850:	3d4ccccd 	.word	0x3d4ccccd
 8002854:	0800da94 	.word	0x0800da94
	{
		filter->X_k[i] = x_k[i];
 8002858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3388      	adds	r3, #136	@ 0x88
 8002860:	443b      	add	r3, r7
 8002862:	3b74      	subs	r3, #116	@ 0x74
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002872:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	4413      	add	r3, r2
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68f9      	ldr	r1, [r7, #12]
 8002880:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002884:	3324      	adds	r3, #36	@ 0x24
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800288c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	3388      	adds	r3, #136	@ 0x88
 8002894:	443b      	add	r3, r7
 8002896:	3b14      	subs	r3, #20
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68f9      	ldr	r1, [r7, #12]
 800289c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028a0:	3328      	adds	r3, #40	@ 0x28
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80028a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	3388      	adds	r3, #136	@ 0x88
 80028b0:	443b      	add	r3, r7
 80028b2:	3b24      	subs	r3, #36	@ 0x24
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68f9      	ldr	r1, [r7, #12]
 80028b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028bc:	332c      	adds	r3, #44	@ 0x2c
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80028c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028c8:	3301      	adds	r3, #1
 80028ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80028ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d2:	2b03      	cmp	r3, #3
 80028d4:	ddc0      	ble.n	8002858 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2201      	movs	r2, #1
 80028e0:	2104      	movs	r1, #4
 80028e2:	f009 f988 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3310      	adds	r3, #16
 80028f0:	2204      	movs	r2, #4
 80028f2:	2104      	movs	r1, #4
 80028f4:	f009 f97f 	bl	800bbf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3350      	adds	r3, #80	@ 0x50
 8002902:	2204      	movs	r2, #4
 8002904:	2104      	movs	r1, #4
 8002906:	f009 f976 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3390      	adds	r3, #144	@ 0x90
 8002914:	2201      	movs	r2, #1
 8002916:	2104      	movs	r1, #4
 8002918:	f009 f96d 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	33a0      	adds	r3, #160	@ 0xa0
 8002926:	2204      	movs	r2, #4
 8002928:	2101      	movs	r1, #1
 800292a:	f009 f964 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	33b0      	adds	r3, #176	@ 0xb0
 8002938:	2201      	movs	r2, #1
 800293a:	2104      	movs	r1, #4
 800293c:	f009 f95b 	bl	800bbf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	33c8      	adds	r3, #200	@ 0xc8
 800294a:	2204      	movs	r2, #4
 800294c:	2104      	movs	r1, #4
 800294e:	f009 f952 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800295e:	2201      	movs	r2, #1
 8002960:	2104      	movs	r1, #4
 8002962:	f009 f948 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002972:	2204      	movs	r2, #4
 8002974:	2101      	movs	r1, #1
 8002976:	f009 f93e 	bl	800bbf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002986:	2204      	movs	r2, #4
 8002988:	2104      	movs	r1, #4
 800298a:	f009 f934 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800299a:	2204      	movs	r2, #4
 800299c:	2104      	movs	r1, #4
 800299e:	f009 f92a 	bl	800bbf6 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80029ae:	2201      	movs	r2, #1
 80029b0:	2104      	movs	r1, #4
 80029b2:	f009 f920 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80029c2:	2201      	movs	r2, #1
 80029c4:	2104      	movs	r1, #4
 80029c6:	f009 f916 	bl	800bbf6 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80029d6:	2204      	movs	r2, #4
 80029d8:	2101      	movs	r1, #1
 80029da:	f009 f90c 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80029ea:	2201      	movs	r2, #1
 80029ec:	2101      	movs	r1, #1
 80029ee:	f009 f902 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80029fe:	2201      	movs	r2, #1
 8002a00:	2101      	movs	r1, #1
 8002a02:	f009 f8f8 	bl	800bbf6 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002a12:	2201      	movs	r2, #1
 8002a14:	2104      	movs	r1, #4
 8002a16:	f009 f8ee 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002a26:	2201      	movs	r2, #1
 8002a28:	2104      	movs	r1, #4
 8002a2a:	f009 f8e4 	bl	800bbf6 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	f009 f8da 	bl	800bbf6 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002a4e:	2201      	movs	r2, #1
 8002a50:	2101      	movs	r1, #1
 8002a52:	f009 f8d0 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002a62:	2201      	movs	r2, #1
 8002a64:	2101      	movs	r1, #1
 8002a66:	f009 f8c6 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002a76:	2201      	movs	r2, #1
 8002a78:	2104      	movs	r1, #4
 8002a7a:	f009 f8bc 	bl	800bbf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	f009 f8b2 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	f009 f8a8 	bl	800bbf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	33c4      	adds	r3, #196	@ 0xc4
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f009 f89f 	bl	800bbf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	f009 f895 	bl	800bbf6 <arm_mat_init_f32>
}
 8002acc:	bf00      	nop
 8002ace:	3788      	adds	r7, #136	@ 0x88
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bdb0      	pop	{r4, r5, r7, pc}

08002ad4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ad8:	f3bf 8f4f 	dsb	sy
}
 8002adc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002ade:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <__NVIC_SystemReset+0x24>)
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002ae6:	4904      	ldr	r1, [pc, #16]	@ (8002af8 <__NVIC_SystemReset+0x24>)
 8002ae8:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <__NVIC_SystemReset+0x28>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002aee:	f3bf 8f4f 	dsb	sy
}
 8002af2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <__NVIC_SystemReset+0x20>
 8002af8:	e000ed00 	.word	0xe000ed00
 8002afc:	05fa0004 	.word	0x05fa0004

08002b00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b00:	b598      	push	{r3, r4, r7, lr}
 8002b02:	ed2d 8b02 	vpush	{d8}
 8002b06:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b08:	f001 fd85 	bl	8004616 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b0c:	f000 f8a4 	bl	8002c58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b10:	f7ff fc2c 	bl	800236c <MX_GPIO_Init>
	MX_DMA_Init();
 8002b14:	f7ff fbf0 	bl	80022f8 <MX_DMA_Init>
	MX_ADC1_Init();
 8002b18:	f7ff fae2 	bl	80020e0 <MX_ADC1_Init>
	MX_TIM2_Init();
 8002b1c:	f001 f87c 	bl	8003c18 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002b20:	f001 f8c8 	bl	8003cb4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002b24:	f001 f91c 	bl	8003d60 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002b28:	f001 f970 	bl	8003e0c <MX_TIM5_Init>
	MX_TIM8_Init();
 8002b2c:	f001 f9bc 	bl	8003ea8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8002b30:	f001 fc3e 	bl	80043b0 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002b34:	f001 fa80 	bl	8004038 <MX_TIM16_Init>
	MX_TIM1_Init();
 8002b38:	f000 ffda 	bl	8003af0 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002b3c:	f000 f974 	bl	8002e28 <plotter_begin>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !trajectoryActive) {
 8002b40:	4b37      	ldr	r3, [pc, #220]	@ (8002c20 <main+0x120>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d055      	beq.n	8002bf4 <main+0xf4>
 8002b48:	4b36      	ldr	r3, [pc, #216]	@ (8002c24 <main+0x124>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d151      	bne.n	8002bf4 <main+0xf4>
 8002b50:	4b35      	ldr	r3, [pc, #212]	@ (8002c28 <main+0x128>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f083 0301 	eor.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d04a      	beq.n	8002bf4 <main+0xf4>
			prisEva.t = 0.0f;
 8002b5e:	4b33      	ldr	r3, [pc, #204]	@ (8002c2c <main+0x12c>)
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
			prisEva.isFinised = false;
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <main+0x12c>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	741a      	strb	r2, [r3, #16]

			initial_p = current_position;
 8002b6c:	4b30      	ldr	r3, [pc, #192]	@ (8002c30 <main+0x130>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a30      	ldr	r2, [pc, #192]	@ (8002c34 <main+0x134>)
 8002b72:	6013      	str	r3, [r2, #0]

			target_p = trajectory_sequence[trajectory_sequence_index];
 8002b74:	4b30      	ldr	r3, [pc, #192]	@ (8002c38 <main+0x138>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	4a30      	ldr	r2, [pc, #192]	@ (8002c3c <main+0x13c>)
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a2f      	ldr	r2, [pc, #188]	@ (8002c40 <main+0x140>)
 8002b82:	6013      	str	r3, [r2, #0]

			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002b84:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <main+0x134>)
 8002b86:	ed93 8a00 	vldr	s16, [r3]
 8002b8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c40 <main+0x140>)
 8002b8c:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_400RPM_Constant.qd_max,
 8002b90:	4b2c      	ldr	r3, [pc, #176]	@ (8002c44 <main+0x144>)
 8002b92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fd ff2b 	bl	80009f4 <__aeabi_d2f>
 8002b9e:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.qd_max * 3.0);
 8002ba0:	4b28      	ldr	r3, [pc, #160]	@ (8002c44 <main+0x144>)
 8002ba2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <main+0x148>)
 8002bac:	f7fd fcf0 	bl	8000590 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd ff1c 	bl	80009f4 <__aeabi_d2f>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	ee01 3a90 	vmov	s3, r3
 8002bc2:	ee01 4a10 	vmov	s2, r4
 8002bc6:	eef0 0a68 	vmov.f32	s1, s17
 8002bca:	eeb0 0a48 	vmov.f32	s0, s16
 8002bce:	481f      	ldr	r0, [pc, #124]	@ (8002c4c <main+0x14c>)
 8002bd0:	f7ff f9c4 	bl	8001f5c <Trapezoidal_Generator>

//			Trapezoidal_Generator(&prisGen, initial_p, target_p,
//					ZGX45RGG_150RPM_Constant.qd_max,
//					ZGX45RGG_150RPM_Constant.qd_max * 3.0);

			trajectoryActive = true;
 8002bd4:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <main+0x128>)
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8002bda:	4b17      	ldr	r3, [pc, #92]	@ (8002c38 <main+0x138>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	3301      	adds	r3, #1
 8002be0:	425a      	negs	r2, r3
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	f002 0203 	and.w	r2, r2, #3
 8002bea:	bf58      	it	pl
 8002bec:	4253      	negpl	r3, r2
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <main+0x138>)
 8002bf2:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8002bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c20 <main+0x120>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8002c24 <main+0x124>)
 8002bfc:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <main+0x150>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c0e:	f003 ffc7 	bl	8006ba0 <HAL_GPIO_WritePin>

		if (b3) {
 8002c12:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <main+0x154>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d092      	beq.n	8002b40 <main+0x40>
			NVIC_SystemReset();
 8002c1a:	f7ff ff5b 	bl	8002ad4 <__NVIC_SystemReset>
 8002c1e:	bf00      	nop
 8002c20:	2000145c 	.word	0x2000145c
 8002c24:	200002ec 	.word	0x200002ec
 8002c28:	200002c8 	.word	0x200002c8
 8002c2c:	200002b4 	.word	0x200002b4
 8002c30:	200002d4 	.word	0x200002d4
 8002c34:	200002cc 	.word	0x200002cc
 8002c38:	200002d8 	.word	0x200002d8
 8002c3c:	0800dad4 	.word	0x0800dad4
 8002c40:	200002d0 	.word	0x200002d0
 8002c44:	20000048 	.word	0x20000048
 8002c48:	40080000 	.word	0x40080000
 8002c4c:	200002a0 	.word	0x200002a0
 8002c50:	20001460 	.word	0x20001460
 8002c54:	20001464 	.word	0x20001464

08002c58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b094      	sub	sp, #80	@ 0x50
 8002c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c5e:	f107 0318 	add.w	r3, r7, #24
 8002c62:	2238      	movs	r2, #56	@ 0x38
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f009 fd36 	bl	800c6d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f003 ffc0 	bl	8006c00 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c8a:	2340      	movs	r3, #64	@ 0x40
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c92:	2302      	movs	r3, #2
 8002c94:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002c96:	2304      	movs	r3, #4
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002c9a:	2355      	movs	r3, #85	@ 0x55
 8002c9c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002caa:	f107 0318 	add.w	r3, r7, #24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 f85a 	bl	8006d68 <HAL_RCC_OscConfig>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <SystemClock_Config+0x66>
		Error_Handler();
 8002cba:	f000 f8af 	bl	8002e1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002cbe:	230f      	movs	r3, #15
 8002cc0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f004 fb58 	bl	800738c <HAL_RCC_ClockConfig>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <SystemClock_Config+0x8e>
		Error_Handler();
 8002ce2:	f000 f89b 	bl	8002e1c <Error_Handler>
	}
}
 8002ce6:	bf00      	nop
 8002ce8:	3750      	adds	r7, #80	@ 0x50
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	80fb      	strh	r3, [r7, #6]

}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]

}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a31      	ldr	r2, [pc, #196]	@ (8002de8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d156      	bne.n	8002dd6 <HAL_TIM_PeriodElapsedCallback+0xbe>
		update_sensors();
 8002d28:	f000 fa3e 	bl	80031a8 <update_sensors>
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&revolute_motor, 2000, cmd_ux);
//
		square_sample = SIGNAL_generate(&square_sg, 0.001f);
 8002d2c:	ed9f 0a2f 	vldr	s0, [pc, #188]	@ 8002dec <HAL_TIM_PeriodElapsedCallback+0xd4>
 8002d30:	482f      	ldr	r0, [pc, #188]	@ (8002df0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002d32:	f000 fc73 	bl	800361c <SIGNAL_generate>
 8002d36:	eef0 7a40 	vmov.f32	s15, s0
 8002d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d3c:	edc3 7a00 	vstr	s15, [r3]
//		sine_sample = SIGNAL_generate(&sine_sg, 0.001f);

		QEI_get_diff_count(&prismatic_encoder);
 8002d40:	482d      	ldr	r0, [pc, #180]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002d42:	f7fe ff35 	bl	8001bb0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8002d46:	482c      	ldr	r0, [pc, #176]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002d48:	f7ff f812 	bl	8001d70 <QEI_compute_data>

		vin = square_sample * 12.0 / 65535.0;
 8002d4c:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fbc5 	bl	80004e0 <__aeabi_f2d>
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b28      	ldr	r3, [pc, #160]	@ (8002dfc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002d5c:	f7fd fc18 	bl	8000590 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	a31d      	add	r3, pc, #116	@ (adr r3, 8002de0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6e:	f7fd fd39 	bl	80007e4 <__aeabi_ddiv>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4610      	mov	r0, r2
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f7fd fe3b 	bl	80009f4 <__aeabi_d2f>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a1f      	ldr	r2, [pc, #124]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002d82:	6013      	str	r3, [r2, #0]

		kal_flit = SteadyStateKalmanFilter(&flit_revolute_velocity, vin, prismatic_encoder.radps);
 8002d84:	4b1e      	ldr	r3, [pc, #120]	@ (8002e00 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002d8c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8002d90:	eef0 0a47 	vmov.f32	s1, s14
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	481a      	ldr	r0, [pc, #104]	@ (8002e04 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002d9a:	f7ff fb97 	bl	80024cc <SteadyStateKalmanFilter>
 8002d9e:	eef0 7a40 	vmov.f32	s15, s0
 8002da2:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002da4:	edc3 7a00 	vstr	s15, [r3]
		lp_filt = FIR_process(&LP_revolute_velocity,prismatic_encoder.radps);
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002daa:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	4816      	ldr	r0, [pc, #88]	@ (8002e0c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002db4:	f7fe fb44 	bl	8001440 <FIR_process>
 8002db8:	eef0 7a40 	vmov.f32	s15, s0
 8002dbc:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8002dbe:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&prismatic_motor, 2000, square_sample);
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002df4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	eef0 0a67 	vmov.f32	s1, s15
 8002dcc:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8002e14 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8002dd0:	4811      	ldr	r0, [pc, #68]	@ (8002e18 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002dd2:	f7fe f8fb 	bl	8000fcc <MDXX_set_range>
//		kal_flit = SteadyStateKalmanFilter(&flit_prismatic_velocity, vin, prismatic_encoder.radps);
//		lp_filt = FIR_process(&LP_prismatic_velocity,prismatic_encoder.radps);
//
//		MDXX_set_range(&prismatic_motor, 2000, square_sample);
	}
}
 8002dd6:	bf00      	nop
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	00000000 	.word	0x00000000
 8002de4:	40efffe0 	.word	0x40efffe0
 8002de8:	20001554 	.word	0x20001554
 8002dec:	3a83126f 	.word	0x3a83126f
 8002df0:	200005e4 	.word	0x200005e4
 8002df4:	200002e8 	.word	0x200002e8
 8002df8:	20000388 	.word	0x20000388
 8002dfc:	40280000 	.word	0x40280000
 8002e00:	200002e4 	.word	0x200002e4
 8002e04:	20000a1c 	.word	0x20000a1c
 8002e08:	200002dc 	.word	0x200002dc
 8002e0c:	20000684 	.word	0x20000684
 8002e10:	200002e0 	.word	0x200002e0
 8002e14:	44fa0000 	.word	0x44fa0000
 8002e18:	200002f0 	.word	0x200002f0

08002e1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e20:	b672      	cpsid	i
}
 8002e22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002e24:	bf00      	nop
 8002e26:	e7fd      	b.n	8002e24 <Error_Handler+0x8>

08002e28 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002e2e:	2100      	movs	r1, #0
 8002e30:	48a4      	ldr	r0, [pc, #656]	@ (80030c4 <plotter_begin+0x29c>)
 8002e32:	f000 fad1 	bl	80033d8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002e36:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80030c8 <plotter_begin+0x2a0>
 8002e3a:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80030cc <plotter_begin+0x2a4>
 8002e3e:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 80030d0 <plotter_begin+0x2a8>
 8002e42:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 80030d0 <plotter_begin+0x2a8>
 8002e46:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 80030d4 <plotter_begin+0x2ac>
 8002e4a:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80030c8 <plotter_begin+0x2a0>
 8002e4e:	489d      	ldr	r0, [pc, #628]	@ (80030c4 <plotter_begin+0x29c>)
 8002e50:	f000 fb20 	bl	8003494 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002e54:	2101      	movs	r1, #1
 8002e56:	48a0      	ldr	r0, [pc, #640]	@ (80030d8 <plotter_begin+0x2b0>)
 8002e58:	f000 fabe 	bl	80033d8 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 8002e5c:	eddf 2a9f 	vldr	s5, [pc, #636]	@ 80030dc <plotter_begin+0x2b4>
 8002e60:	ed9f 2a9f 	vldr	s4, [pc, #636]	@ 80030e0 <plotter_begin+0x2b8>
 8002e64:	2100      	movs	r1, #0
 8002e66:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002e6a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002e6e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e72:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 80030dc <plotter_begin+0x2b4>
 8002e76:	4898      	ldr	r0, [pc, #608]	@ (80030d8 <plotter_begin+0x2b0>)
 8002e78:	f000 fb37 	bl	80034ea <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4899      	ldr	r0, [pc, #612]	@ (80030e4 <plotter_begin+0x2bc>)
 8002e80:	f000 faaa 	bl	80033d8 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 8002e84:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80030dc <plotter_begin+0x2b4>
 8002e88:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80030e0 <plotter_begin+0x2b8>
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002e92:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002e96:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002e9a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80030dc <plotter_begin+0x2b4>
 8002e9e:	4891      	ldr	r0, [pc, #580]	@ (80030e4 <plotter_begin+0x2bc>)
 8002ea0:	f000 fb23 	bl	80034ea <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	4890      	ldr	r0, [pc, #576]	@ (80030e8 <plotter_begin+0x2c0>)
 8002ea8:	f000 fa96 	bl	80033d8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002eac:	ed9f 3a86 	vldr	s6, [pc, #536]	@ 80030c8 <plotter_begin+0x2a0>
 8002eb0:	eddf 2a86 	vldr	s5, [pc, #536]	@ 80030cc <plotter_begin+0x2a4>
 8002eb4:	ed9f 2a86 	vldr	s4, [pc, #536]	@ 80030d0 <plotter_begin+0x2a8>
 8002eb8:	eddf 1a85 	vldr	s3, [pc, #532]	@ 80030d0 <plotter_begin+0x2a8>
 8002ebc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8002ec0:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80030d4 <plotter_begin+0x2ac>
 8002ec4:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80030c8 <plotter_begin+0x2a0>
 8002ec8:	4887      	ldr	r0, [pc, #540]	@ (80030e8 <plotter_begin+0x2c0>)
 8002eca:	f000 fb42 	bl	8003552 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002ece:	2103      	movs	r1, #3
 8002ed0:	4886      	ldr	r0, [pc, #536]	@ (80030ec <plotter_begin+0x2c4>)
 8002ed2:	f000 fa81 	bl	80033d8 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002ed6:	eddf 3a81 	vldr	s7, [pc, #516]	@ 80030dc <plotter_begin+0x2b4>
 8002eda:	ed9f 3a81 	vldr	s6, [pc, #516]	@ 80030e0 <plotter_begin+0x2b8>
 8002ede:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 80030d0 <plotter_begin+0x2a8>
 8002ee2:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 80030d0 <plotter_begin+0x2a8>
 8002ee6:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 80030dc <plotter_begin+0x2b4>
 8002eea:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 80030e0 <plotter_begin+0x2b8>
 8002eee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002ef2:	ed9f 0a7a 	vldr	s0, [pc, #488]	@ 80030dc <plotter_begin+0x2b4>
 8002ef6:	487d      	ldr	r0, [pc, #500]	@ (80030ec <plotter_begin+0x2c4>)
 8002ef8:	f000 fb5b 	bl	80035b2 <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002efc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f08:	4979      	ldr	r1, [pc, #484]	@ (80030f0 <plotter_begin+0x2c8>)
 8002f0a:	487a      	ldr	r0, [pc, #488]	@ (80030f4 <plotter_begin+0x2cc>)
 8002f0c:	f7fe fdfe 	bl	8001b0c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002f10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002f14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f1c:	4976      	ldr	r1, [pc, #472]	@ (80030f8 <plotter_begin+0x2d0>)
 8002f1e:	4877      	ldr	r0, [pc, #476]	@ (80030fc <plotter_begin+0x2d4>)
 8002f20:	f7fe fdf4 	bl	8001b0c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8002f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f2e:	2204      	movs	r2, #4
 8002f30:	4973      	ldr	r1, [pc, #460]	@ (8003100 <plotter_begin+0x2d8>)
 8002f32:	4874      	ldr	r0, [pc, #464]	@ (8003104 <plotter_begin+0x2dc>)
 8002f34:	f7fe f826 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8002f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	4b72      	ldr	r3, [pc, #456]	@ (8003108 <plotter_begin+0x2e0>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	496f      	ldr	r1, [pc, #444]	@ (8003100 <plotter_begin+0x2d8>)
 8002f44:	4871      	ldr	r0, [pc, #452]	@ (800310c <plotter_begin+0x2e4>)
 8002f46:	f7fe f81d 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4970      	ldr	r1, [pc, #448]	@ (8003110 <plotter_begin+0x2e8>)
 8002f4e:	4871      	ldr	r0, [pc, #452]	@ (8003114 <plotter_begin+0x2ec>)
 8002f50:	f7fe fbae 	bl	80016b0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002f54:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 80030d0 <plotter_begin+0x2a8>
 8002f58:	ed9f 0a6f 	vldr	s0, [pc, #444]	@ 8003118 <plotter_begin+0x2f0>
 8002f5c:	4869      	ldr	r0, [pc, #420]	@ (8003104 <plotter_begin+0x2dc>)
 8002f5e:	f7fe f835 	bl	8000fcc <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002f62:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80030d0 <plotter_begin+0x2a8>
 8002f66:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 8003118 <plotter_begin+0x2f0>
 8002f6a:	4868      	ldr	r0, [pc, #416]	@ (800310c <plotter_begin+0x2e4>)
 8002f6c:	f7fe f82e 	bl	8000fcc <MDXX_set_range>
	pen_up();
 8002f70:	f000 f9bc 	bl	80032ec <pen_up>

//  Low Pass PID Control
	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 8002f74:	4b69      	ldr	r3, [pc, #420]	@ (800311c <plotter_begin+0x2f4>)
 8002f76:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fd fd39 	bl	80009f4 <__aeabi_d2f>
 8002f82:	4603      	mov	r3, r0
 8002f84:	ee01 3a90 	vmov	s3, r3
 8002f88:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002f8c:	eddf 0a64 	vldr	s1, [pc, #400]	@ 8003120 <plotter_begin+0x2f8>
 8002f90:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002f94:	4863      	ldr	r0, [pc, #396]	@ (8003124 <plotter_begin+0x2fc>)
 8002f96:	f7fd ffcb 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 8002f9a:	4b60      	ldr	r3, [pc, #384]	@ (800311c <plotter_begin+0x2f4>)
 8002f9c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fd26 	bl	80009f4 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	ee01 3a90 	vmov	s3, r3
 8002fae:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 80030d0 <plotter_begin+0x2a8>
 8002fb2:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8002fb6:	ed9f 0a5c 	vldr	s0, [pc, #368]	@ 8003128 <plotter_begin+0x300>
 8002fba:	485c      	ldr	r0, [pc, #368]	@ (800312c <plotter_begin+0x304>)
 8002fbc:	f7fd ffb8 	bl	8000f30 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 2, 1e-7, 1, ZGX45RGG_150RPM_Constant.U_max);
 8002fc0:	4b5b      	ldr	r3, [pc, #364]	@ (8003130 <plotter_begin+0x308>)
 8002fc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	f7fd fd13 	bl	80009f4 <__aeabi_d2f>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	ee01 3a90 	vmov	s3, r3
 8002fd4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002fd8:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8003120 <plotter_begin+0x2f8>
 8002fdc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002fe0:	4854      	ldr	r0, [pc, #336]	@ (8003134 <plotter_begin+0x30c>)
 8002fe2:	f7fd ffa5 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 50, 0, ZGX45RGG_150RPM_Constant.U_max);
 8002fe6:	4b52      	ldr	r3, [pc, #328]	@ (8003130 <plotter_begin+0x308>)
 8002fe8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002fec:	4610      	mov	r0, r2
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f7fd fd00 	bl	80009f4 <__aeabi_d2f>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	ee01 3a90 	vmov	s3, r3
 8002ffa:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 80030d0 <plotter_begin+0x2a8>
 8002ffe:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8003138 <plotter_begin+0x310>
 8003002:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 800313c <plotter_begin+0x314>
 8003006:	484e      	ldr	r0, [pc, #312]	@ (8003140 <plotter_begin+0x318>)
 8003008:	f7fd ff92 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800300c:	4948      	ldr	r1, [pc, #288]	@ (8003130 <plotter_begin+0x308>)
 800300e:	484d      	ldr	r0, [pc, #308]	@ (8003144 <plotter_begin+0x31c>)
 8003010:	f7fe f8b6 	bl	8001180 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8003014:	4941      	ldr	r1, [pc, #260]	@ (800311c <plotter_begin+0x2f4>)
 8003016:	484c      	ldr	r0, [pc, #304]	@ (8003148 <plotter_begin+0x320>)
 8003018:	f7fe f8d2 	bl	80011c0 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800301c:	4a4b      	ldr	r2, [pc, #300]	@ (800314c <plotter_begin+0x324>)
 800301e:	4944      	ldr	r1, [pc, #272]	@ (8003130 <plotter_begin+0x308>)
 8003020:	484b      	ldr	r0, [pc, #300]	@ (8003150 <plotter_begin+0x328>)
 8003022:	f7fe f8bb 	bl	800119c <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8003026:	4a49      	ldr	r2, [pc, #292]	@ (800314c <plotter_begin+0x324>)
 8003028:	493c      	ldr	r1, [pc, #240]	@ (800311c <plotter_begin+0x2f4>)
 800302a:	484a      	ldr	r0, [pc, #296]	@ (8003154 <plotter_begin+0x32c>)
 800302c:	f7fe f8d6 	bl	80011dc <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8003030:	2304      	movs	r3, #4
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8003158 <plotter_begin+0x330>
 8003038:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800315c <plotter_begin+0x334>
 800303c:	2328      	movs	r3, #40	@ 0x28
 800303e:	4a48      	ldr	r2, [pc, #288]	@ (8003160 <plotter_begin+0x338>)
 8003040:	4948      	ldr	r1, [pc, #288]	@ (8003164 <plotter_begin+0x33c>)
 8003042:	4849      	ldr	r0, [pc, #292]	@ (8003168 <plotter_begin+0x340>)
 8003044:	f7fd febc 	bl	8000dc0 <ADC_DMA_Init>
			ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8003048:	4847      	ldr	r0, [pc, #284]	@ (8003168 <plotter_begin+0x340>)
 800304a:	f7fd feee 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800304e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800313c <plotter_begin+0x314>
 8003052:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003056:	211f      	movs	r1, #31
 8003058:	4844      	ldr	r0, [pc, #272]	@ (800316c <plotter_begin+0x344>)
 800305a:	f7fe f8d1 	bl	8001200 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800305e:	eddf 0a37 	vldr	s1, [pc, #220]	@ 800313c <plotter_begin+0x314>
 8003062:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003066:	211f      	movs	r1, #31
 8003068:	4841      	ldr	r0, [pc, #260]	@ (8003170 <plotter_begin+0x348>)
 800306a:	f7fe f8c9 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800306e:	eddf 0a33 	vldr	s1, [pc, #204]	@ 800313c <plotter_begin+0x314>
 8003072:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003076:	211f      	movs	r1, #31
 8003078:	483e      	ldr	r0, [pc, #248]	@ (8003174 <plotter_begin+0x34c>)
 800307a:	f7fe f8c1 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800307e:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 800313c <plotter_begin+0x314>
 8003082:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003086:	211f      	movs	r1, #31
 8003088:	483b      	ldr	r0, [pc, #236]	@ (8003178 <plotter_begin+0x350>)
 800308a:	f7fe f8b9 	bl	8001200 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 800308e:	4a3b      	ldr	r2, [pc, #236]	@ (800317c <plotter_begin+0x354>)
 8003090:	493b      	ldr	r1, [pc, #236]	@ (8003180 <plotter_begin+0x358>)
 8003092:	483c      	ldr	r0, [pc, #240]	@ (8003184 <plotter_begin+0x35c>)
 8003094:	f7ff fb64 	bl	8002760 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8003098:	4a3b      	ldr	r2, [pc, #236]	@ (8003188 <plotter_begin+0x360>)
 800309a:	493c      	ldr	r1, [pc, #240]	@ (800318c <plotter_begin+0x364>)
 800309c:	483c      	ldr	r0, [pc, #240]	@ (8003190 <plotter_begin+0x368>)
 800309e:	f7ff fb5f 	bl	8002760 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80030a2:	23c8      	movs	r3, #200	@ 0xc8
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2315      	movs	r3, #21
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <plotter_begin+0x36c>)
 80030ac:	4a3a      	ldr	r2, [pc, #232]	@ (8003198 <plotter_begin+0x370>)
 80030ae:	493b      	ldr	r1, [pc, #236]	@ (800319c <plotter_begin+0x374>)
 80030b0:	483b      	ldr	r0, [pc, #236]	@ (80031a0 <plotter_begin+0x378>)
 80030b2:	f7fe fa95 	bl	80015e0 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80030b6:	483b      	ldr	r0, [pc, #236]	@ (80031a4 <plotter_begin+0x37c>)
 80030b8:	f004 fea6 	bl	8007e08 <HAL_TIM_Base_Start_IT>
}
 80030bc:	bf00      	nop
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	20000518 	.word	0x20000518
 80030c8:	477fff00 	.word	0x477fff00
 80030cc:	c77fff00 	.word	0xc77fff00
 80030d0:	00000000 	.word	0x00000000
 80030d4:	3dcccccd 	.word	0x3dcccccd
 80030d8:	2000055c 	.word	0x2000055c
 80030dc:	3e6eeeef 	.word	0x3e6eeeef
 80030e0:	be6eeeef 	.word	0xbe6eeeef
 80030e4:	200005a0 	.word	0x200005a0
 80030e8:	200005e4 	.word	0x200005e4
 80030ec:	20000628 	.word	0x20000628
 80030f0:	200016ec 	.word	0x200016ec
 80030f4:	20000388 	.word	0x20000388
 80030f8:	20001620 	.word	0x20001620
 80030fc:	200003d4 	.word	0x200003d4
 8003100:	20001884 	.word	0x20001884
 8003104:	200002f0 	.word	0x200002f0
 8003108:	48000800 	.word	0x48000800
 800310c:	2000033c 	.word	0x2000033c
 8003110:	20001488 	.word	0x20001488
 8003114:	200004e8 	.word	0x200004e8
 8003118:	44fa0000 	.word	0x44fa0000
 800311c:	20000048 	.word	0x20000048
 8003120:	33d6bf95 	.word	0x33d6bf95
 8003124:	20000420 	.word	0x20000420
 8003128:	43fa0000 	.word	0x43fa0000
 800312c:	2000044c 	.word	0x2000044c
 8003130:	20000000 	.word	0x20000000
 8003134:	20000478 	.word	0x20000478
 8003138:	42480000 	.word	0x42480000
 800313c:	447a0000 	.word	0x447a0000
 8003140:	200004a4 	.word	0x200004a4
 8003144:	200004dc 	.word	0x200004dc
 8003148:	200004d0 	.word	0x200004d0
 800314c:	20000090 	.word	0x20000090
 8003150:	200004e0 	.word	0x200004e0
 8003154:	200004d4 	.word	0x200004d4
 8003158:	457ff000 	.word	0x457ff000
 800315c:	40533333 	.word	0x40533333
 8003160:	20000d9c 	.word	0x20000d9c
 8003164:	200001d4 	.word	0x200001d4
 8003168:	20000500 	.word	0x20000500
 800316c:	20000678 	.word	0x20000678
 8003170:	2000066c 	.word	0x2000066c
 8003174:	20000690 	.word	0x20000690
 8003178:	20000684 	.word	0x20000684
 800317c:	20000148 	.word	0x20000148
 8003180:	20000108 	.word	0x20000108
 8003184:	20000a1c 	.word	0x20000a1c
 8003188:	200000f8 	.word	0x200000f8
 800318c:	200000b8 	.word	0x200000b8
 8003190:	2000069c 	.word	0x2000069c
 8003194:	200012c4 	.word	0x200012c4
 8003198:	20001950 	.word	0x20001950
 800319c:	20001a1c 	.word	0x20001a1c
 80031a0:	20000dec 	.word	0x20000dec
 80031a4:	20001554 	.word	0x20001554

080031a8 <update_sensors>:

void update_sensors() {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 80031ac:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80031b0:	2106      	movs	r1, #6
 80031b2:	483f      	ldr	r0, [pc, #252]	@ (80032b0 <update_sensors+0x108>)
 80031b4:	f7fd fe94 	bl	8000ee0 <ADC_DMA_GetJoystick>
 80031b8:	eef0 7a40 	vmov.f32	s15, s0
 80031bc:	4b3d      	ldr	r3, [pc, #244]	@ (80032b4 <update_sensors+0x10c>)
 80031be:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 80031c2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80031c6:	2107      	movs	r1, #7
 80031c8:	4839      	ldr	r0, [pc, #228]	@ (80032b0 <update_sensors+0x108>)
 80031ca:	f7fd fe89 	bl	8000ee0 <ADC_DMA_GetJoystick>
 80031ce:	eef0 7a40 	vmov.f32	s15, s0
 80031d2:	4b39      	ldr	r3, [pc, #228]	@ (80032b8 <update_sensors+0x110>)
 80031d4:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 80031d8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031dc:	4837      	ldr	r0, [pc, #220]	@ (80032bc <update_sensors+0x114>)
 80031de:	f003 fcc7 	bl	8006b70 <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	461a      	mov	r2, r3
 80031f0:	4b33      	ldr	r3, [pc, #204]	@ (80032c0 <update_sensors+0x118>)
 80031f2:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 80031f4:	2180      	movs	r1, #128	@ 0x80
 80031f6:	4833      	ldr	r0, [pc, #204]	@ (80032c4 <update_sensors+0x11c>)
 80031f8:	f003 fcba 	bl	8006b70 <HAL_GPIO_ReadPin>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bf0c      	ite	eq
 8003202:	2301      	moveq	r3, #1
 8003204:	2300      	movne	r3, #0
 8003206:	b2db      	uxtb	r3, r3
 8003208:	461a      	mov	r2, r3
 800320a:	4b2f      	ldr	r3, [pc, #188]	@ (80032c8 <update_sensors+0x120>)
 800320c:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 800320e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003212:	482a      	ldr	r0, [pc, #168]	@ (80032bc <update_sensors+0x114>)
 8003214:	f003 fcac 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf0c      	ite	eq
 800321e:	2301      	moveq	r3, #1
 8003220:	2300      	movne	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	461a      	mov	r2, r3
 8003226:	4b29      	ldr	r3, [pc, #164]	@ (80032cc <update_sensors+0x124>)
 8003228:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 800322a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800322e:	4823      	ldr	r0, [pc, #140]	@ (80032bc <update_sensors+0x114>)
 8003230:	f003 fc9e 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	bf0c      	ite	eq
 800323a:	2301      	moveq	r3, #1
 800323c:	2300      	movne	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	461a      	mov	r2, r3
 8003242:	4b23      	ldr	r3, [pc, #140]	@ (80032d0 <update_sensors+0x128>)
 8003244:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8003246:	2120      	movs	r1, #32
 8003248:	481e      	ldr	r0, [pc, #120]	@ (80032c4 <update_sensors+0x11c>)
 800324a:	f003 fc91 	bl	8006b70 <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	461a      	mov	r2, r3
 8003252:	4b20      	ldr	r3, [pc, #128]	@ (80032d4 <update_sensors+0x12c>)
 8003254:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 8003256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800325a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800325e:	f003 fc87 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	4b1c      	ldr	r3, [pc, #112]	@ (80032d8 <update_sensors+0x130>)
 8003268:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 800326a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800326e:	4815      	ldr	r0, [pc, #84]	@ (80032c4 <update_sensors+0x11c>)
 8003270:	f003 fc7e 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <update_sensors+0x134>)
 800327a:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 800327c:	2102      	movs	r1, #2
 800327e:	4811      	ldr	r0, [pc, #68]	@ (80032c4 <update_sensors+0x11c>)
 8003280:	f003 fc76 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <update_sensors+0x138>)
 800328a:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 800328c:	2104      	movs	r1, #4
 800328e:	480d      	ldr	r0, [pc, #52]	@ (80032c4 <update_sensors+0x11c>)
 8003290:	f003 fc6e 	bl	8006b70 <HAL_GPIO_ReadPin>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <update_sensors+0x13c>)
 800329a:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 800329c:	2110      	movs	r1, #16
 800329e:	4809      	ldr	r0, [pc, #36]	@ (80032c4 <update_sensors+0x11c>)
 80032a0:	f003 fc66 	bl	8006b70 <HAL_GPIO_ReadPin>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b0f      	ldr	r3, [pc, #60]	@ (80032e8 <update_sensors+0x140>)
 80032aa:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 80032ac:	bf00      	nop
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	20000500 	.word	0x20000500
 80032b4:	20001454 	.word	0x20001454
 80032b8:	20001458 	.word	0x20001458
 80032bc:	48000800 	.word	0x48000800
 80032c0:	2000145c 	.word	0x2000145c
 80032c4:	48000400 	.word	0x48000400
 80032c8:	20001460 	.word	0x20001460
 80032cc:	20001464 	.word	0x20001464
 80032d0:	20001468 	.word	0x20001468
 80032d4:	2000146c 	.word	0x2000146c
 80032d8:	20001474 	.word	0x20001474
 80032dc:	20001478 	.word	0x20001478
 80032e0:	2000147c 	.word	0x2000147c
 80032e4:	20001480 	.word	0x20001480
 80032e8:	20001470 	.word	0x20001470

080032ec <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80032f0:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80032f4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003304 <pen_up+0x18>
 80032f8:	4803      	ldr	r0, [pc, #12]	@ (8003308 <pen_up+0x1c>)
 80032fa:	f7fe f9fb 	bl	80016f4 <PWM_write_duty>
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	42480000 	.word	0x42480000
 8003308:	200004e8 	.word	0x200004e8

0800330c <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 8003316:	edd7 7a01 	vldr	s15, [r7, #4]
 800331a:	eef0 7ae7 	vabs.f32	s15, s15
 800331e:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8003322:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <wrap_phase+0x74>)
 8003324:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 8003326:	e007      	b.n	8003338 <wrap_phase+0x2c>
        phase -= two_pi;
 8003328:	ed97 7a01 	vldr	s14, [r7, #4]
 800332c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 8003338:	ed97 7a01 	vldr	s14, [r7, #4]
 800333c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003340:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	dcee      	bgt.n	8003328 <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 800334a:	e007      	b.n	800335c <wrap_phase+0x50>
        phase += two_pi;
 800334c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003350:	edd7 7a03 	vldr	s15, [r7, #12]
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003358:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 800335c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003360:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d4f0      	bmi.n	800334c <wrap_phase+0x40>
    }
    return phase;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	ee07 3a90 	vmov	s15, r3
}
 8003370:	eeb0 0a67 	vmov.f32	s0, s15
 8003374:	3714      	adds	r7, #20
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40c90fdb 	.word	0x40c90fdb

08003384 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	ed87 0a03 	vstr	s0, [r7, #12]
 800338e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003392:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 8003396:	ed97 7a03 	vldr	s14, [r7, #12]
 800339a:	edd7 7a02 	vldr	s15, [r7, #8]
 800339e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d501      	bpl.n	80033ac <limit_setpoint+0x28>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	e00b      	b.n	80033c4 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 80033ac:	ed97 7a03 	vldr	s14, [r7, #12]
 80033b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	dd01      	ble.n	80033c2 <limit_setpoint+0x3e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	e000      	b.n	80033c4 <limit_setpoint+0x40>
    return value;
 80033c2:	68fb      	ldr	r3, [r7, #12]
}
 80033c4:	ee07 3a90 	vmov	s15, r3
 80033c8:	eeb0 0a67 	vmov.f32	s0, s15
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033f0:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033f8:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f04f 0200 	mov.w	r2, #0
 8003418:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a1b      	ldr	r2, [pc, #108]	@ (800348c <SIGNAL_init+0xb4>)
 800341e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d828      	bhi.n	8003480 <SIGNAL_init+0xa8>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <SIGNAL_init+0x5c>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	0800347f 	.word	0x0800347f
 8003438:	08003445 	.word	0x08003445
 800343c:	08003463 	.word	0x08003463
 8003440:	0800346d 	.word	0x0800346d
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003450:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a0e      	ldr	r2, [pc, #56]	@ (8003490 <SIGNAL_init+0xb8>)
 8003456:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800345e:	621a      	str	r2, [r3, #32]
            break;
 8003460:	e00e      	b.n	8003480 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003468:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800346a:	e009      	b.n	8003480 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 800347c:	e000      	b.n	8003480 <SIGNAL_init+0xa8>
            break;
 800347e:	bf00      	nop
    }
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	bf800000 	.word	0xbf800000
 8003490:	41200000 	.word	0x41200000

08003494 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	61f8      	str	r0, [r7, #28]
 800349c:	ed87 0a06 	vstr	s0, [r7, #24]
 80034a0:	edc7 0a05 	vstr	s1, [r7, #20]
 80034a4:	ed87 1a04 	vstr	s2, [r7, #16]
 80034a8:	edc7 1a03 	vstr	s3, [r7, #12]
 80034ac:	ed87 2a02 	vstr	s4, [r7, #8]
 80034b0:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80034de:	bf00      	nop
 80034e0:	3724      	adds	r7, #36	@ 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 80034ea:	b480      	push	{r7}
 80034ec:	b089      	sub	sp, #36	@ 0x24
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	61f8      	str	r0, [r7, #28]
 80034f2:	ed87 0a06 	vstr	s0, [r7, #24]
 80034f6:	edc7 0a05 	vstr	s1, [r7, #20]
 80034fa:	ed87 1a04 	vstr	s2, [r7, #16]
 80034fe:	edc7 1a03 	vstr	s3, [r7, #12]
 8003502:	460b      	mov	r3, r1
 8003504:	ed87 2a01 	vstr	s4, [r7, #4]
 8003508:	edc7 2a00 	vstr	s5, [r7]
 800350c:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	7afa      	ldrb	r2, [r7, #11]
 8003530:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003546:	bf00      	nop
 8003548:	3724      	adds	r7, #36	@ 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003552:	b480      	push	{r7}
 8003554:	b089      	sub	sp, #36	@ 0x24
 8003556:	af00      	add	r7, sp, #0
 8003558:	61f8      	str	r0, [r7, #28]
 800355a:	ed87 0a06 	vstr	s0, [r7, #24]
 800355e:	edc7 0a05 	vstr	s1, [r7, #20]
 8003562:	ed87 1a04 	vstr	s2, [r7, #16]
 8003566:	edc7 1a03 	vstr	s3, [r7, #12]
 800356a:	ed87 2a02 	vstr	s4, [r7, #8]
 800356e:	edc7 2a01 	vstr	s5, [r7, #4]
 8003572:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	2202      	movs	r2, #2
 800357a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80035a6:	bf00      	nop
 80035a8:	3724      	adds	r7, #36	@ 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80035b2:	b480      	push	{r7}
 80035b4:	b08b      	sub	sp, #44	@ 0x2c
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80035ba:	ed87 0a08 	vstr	s0, [r7, #32]
 80035be:	edc7 0a07 	vstr	s1, [r7, #28]
 80035c2:	ed87 1a06 	vstr	s2, [r7, #24]
 80035c6:	edc7 1a05 	vstr	s3, [r7, #20]
 80035ca:	ed87 2a04 	vstr	s4, [r7, #16]
 80035ce:	edc7 2a03 	vstr	s5, [r7, #12]
 80035d2:	ed87 3a02 	vstr	s6, [r7, #8]
 80035d6:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	2203      	movs	r2, #3
 80035de:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003610:	bf00      	nop
 8003612:	372c      	adds	r7, #44	@ 0x2c
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <SIGNAL_generate>:

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 800361c:	b580      	push	{r7, lr}
 800361e:	ed2d 8b02 	vpush	{d8}
 8003622:	b08c      	sub	sp, #48	@ 0x30
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8003632:	4bb2      	ldr	r3, [pc, #712]	@ (80038fc <SIGNAL_generate+0x2e0>)
 8003634:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003642:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003646:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800364a:	edd7 7a00 	vldr	s15, [r7]
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	eeb0 0a67 	vmov.f32	s0, s15
 800365a:	f7ff fe57 	bl	800330c <wrap_phase>
 800365e:	eef0 7a40 	vmov.f32	s15, s0
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800366e:	edd7 7a00 	vldr	s15, [r7]
 8003672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b03      	cmp	r3, #3
 8003682:	f200 8123 	bhi.w	80038cc <SIGNAL_generate+0x2b0>
 8003686:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <SIGNAL_generate+0x70>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036db 	.word	0x080036db
 8003694:	080037f5 	.word	0x080037f5
 8003698:	08003861 	.word	0x08003861
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	edd3 7a03 	vldr	s15, [r3, #12]
 80036a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ac:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80036b0:	ed97 0a02 	vldr	s0, [r7, #8]
 80036b4:	f008 f9e2 	bl	800ba7c <arm_sin_f32>
 80036b8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	ed93 7a01 	vldr	s14, [r3, #4]
 80036c2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80036c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	edd3 7a04 	vldr	s15, [r3, #16]
 80036d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80036d8:	e0f8      	b.n	80038cc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	ed93 7a08 	vldr	s14, [r3, #32]
 80036e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ea:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	7d1b      	ldrb	r3, [r3, #20]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d032      	beq.n	800375c <SIGNAL_generate+0x140>
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	dc48      	bgt.n	800378c <SIGNAL_generate+0x170>
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d002      	beq.n	8003704 <SIGNAL_generate+0xe8>
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d014      	beq.n	800372c <SIGNAL_generate+0x110>
 8003702:	e043      	b.n	800378c <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	ed93 7a06 	vldr	s14, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	edd3 6a07 	vldr	s13, [r3, #28]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	edd3 7a06 	vldr	s15, [r3, #24]
 8003716:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800371a:	edd7 7a04 	vldr	s15, [r7, #16]
 800371e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800372a:	e02f      	b.n	800378c <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	ed93 8a06 	vldr	s16, [r3, #24]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	ed93 7a07 	vldr	s14, [r3, #28]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	edd3 7a06 	vldr	s15, [r3, #24]
 800373e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003742:	edd7 0a04 	vldr	s1, [r7, #16]
 8003746:	eeb0 0a66 	vmov.f32	s0, s13
 800374a:	f009 f829 	bl	800c7a0 <powf>
 800374e:	eef0 7a40 	vmov.f32	s15, s0
 8003752:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003756:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800375a:	e017      	b.n	800378c <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	edd3 6a07 	vldr	s13, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	edd3 7a06 	vldr	s15, [r3, #24]
 800376e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003772:	edd7 7a04 	vldr	s15, [r7, #16]
 8003776:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800377a:	edd7 7a04 	vldr	s15, [r7, #16]
 800377e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003786:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800378a:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 800378c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003790:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800379e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a2:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	ed93 7a03 	vldr	s14, [r3, #12]
 80037ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80037b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b4:	eeb0 0a67 	vmov.f32	s0, s15
 80037b8:	f008 f960 	bl	800ba7c <arm_sin_f32>
 80037bc:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80037c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	edd3 7a08 	vldr	s15, [r3, #32]
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	da00      	bge.n	80037ea <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 80037e8:	e070      	b.n	80038cc <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80037f2:	e06b      	b.n	80038cc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003804:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003808:	eeb0 0a67 	vmov.f32	s0, s15
 800380c:	f008 ffa8 	bl	800c760 <fmodf>
 8003810:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800381a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800381e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003822:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 8003826:	ed97 7a06 	vldr	s14, [r7, #24]
 800382a:	edd7 7a05 	vldr	s15, [r7, #20]
 800382e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	d508      	bpl.n	800384a <SIGNAL_generate+0x22e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	ed93 7a01 	vldr	s14, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	edd3 7a04 	vldr	s15, [r3, #16]
 8003844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003848:	e007      	b.n	800385a <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 8003856:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 800385a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 800385e:	e035      	b.n	80038cc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	edd3 7a03 	vldr	s15, [r3, #12]
 800386c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003870:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003874:	eeb0 0a67 	vmov.f32	s0, s15
 8003878:	f008 ff72 	bl	800c760 <fmodf>
 800387c:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 8003880:	edd7 6a08 	vldr	s13, [r7, #32]
 8003884:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388c:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80038a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80038aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 80038b8:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 80038c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80038ca:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80038d8:	eeb0 1a47 	vmov.f32	s2, s14
 80038dc:	eef0 0a67 	vmov.f32	s1, s15
 80038e0:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80038e4:	f7ff fd4e 	bl	8003384 <limit_setpoint>
 80038e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3730      	adds	r7, #48	@ 0x30
 80038f2:	46bd      	mov	sp, r7
 80038f4:	ecbd 8b02 	vpop	{d8}
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40c90fdb 	.word	0x40c90fdb

08003900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003906:	4b0f      	ldr	r3, [pc, #60]	@ (8003944 <HAL_MspInit+0x44>)
 8003908:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390a:	4a0e      	ldr	r2, [pc, #56]	@ (8003944 <HAL_MspInit+0x44>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	6613      	str	r3, [r2, #96]	@ 0x60
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <HAL_MspInit+0x44>)
 8003914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800391e:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HAL_MspInit+0x44>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	4a08      	ldr	r2, [pc, #32]	@ (8003944 <HAL_MspInit+0x44>)
 8003924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003928:	6593      	str	r3, [r2, #88]	@ 0x58
 800392a:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <HAL_MspInit+0x44>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	603b      	str	r3, [r7, #0]
 8003934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003936:	f003 fa07 	bl	8006d48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000

08003948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <NMI_Handler+0x4>

08003950 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003954:	bf00      	nop
 8003956:	e7fd      	b.n	8003954 <HardFault_Handler+0x4>

08003958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <MemManage_Handler+0x4>

08003960 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003964:	bf00      	nop
 8003966:	e7fd      	b.n	8003964 <BusFault_Handler+0x4>

08003968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <UsageFault_Handler+0x4>

08003970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800399e:	f000 fe8d 	bl	80046bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039ac:	4802      	ldr	r0, [pc, #8]	@ (80039b8 <DMA1_Channel1_IRQHandler+0x10>)
 80039ae:	f002 fe0e 	bl	80065ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000240 	.word	0x20000240

080039bc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039c0:	4802      	ldr	r0, [pc, #8]	@ (80039cc <DMA1_Channel2_IRQHandler+0x10>)
 80039c2:	f002 fe04 	bl	80065ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20001ae8 	.word	0x20001ae8

080039d0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80039d4:	4802      	ldr	r0, [pc, #8]	@ (80039e0 <DMA1_Channel3_IRQHandler+0x10>)
 80039d6:	f002 fdfa 	bl	80065ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20001b48 	.word	0x20001b48

080039e4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039e8:	4803      	ldr	r0, [pc, #12]	@ (80039f8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80039ea:	f004 fe33 	bl	8008654 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80039ee:	4803      	ldr	r0, [pc, #12]	@ (80039fc <TIM1_UP_TIM16_IRQHandler+0x18>)
 80039f0:	f004 fe30 	bl	8008654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80039f4:	bf00      	nop
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20001488 	.word	0x20001488
 80039fc:	20001950 	.word	0x20001950

08003a00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a04:	4802      	ldr	r0, [pc, #8]	@ (8003a10 <TIM2_IRQHandler+0x10>)
 8003a06:	f004 fe25 	bl	8008654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a0a:	bf00      	nop
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	20001554 	.word	0x20001554

08003a14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a18:	4802      	ldr	r0, [pc, #8]	@ (8003a24 <TIM3_IRQHandler+0x10>)
 8003a1a:	f004 fe1b 	bl	8008654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20001620 	.word	0x20001620

08003a28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a2c:	4802      	ldr	r0, [pc, #8]	@ (8003a38 <TIM4_IRQHandler+0x10>)
 8003a2e:	f004 fe11 	bl	8008654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200016ec 	.word	0x200016ec

08003a3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a40:	4802      	ldr	r0, [pc, #8]	@ (8003a4c <USART2_IRQHandler+0x10>)
 8003a42:	f006 fb5b 	bl	800a0fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a46:	bf00      	nop
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	20001a1c 	.word	0x20001a1c

08003a50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003a54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003a58:	f003 f8ba 	bl	8006bd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a5c:	bf00      	nop
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <_sbrk+0x5c>)
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <_sbrk+0x60>)
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a74:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <_sbrk+0x64>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ac4 <_sbrk+0x64>)
 8003a7e:	4a12      	ldr	r2, [pc, #72]	@ (8003ac8 <_sbrk+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d207      	bcs.n	8003aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a90:	f008 fe3a 	bl	800c708 <__errno>
 8003a94:	4603      	mov	r3, r0
 8003a96:	220c      	movs	r2, #12
 8003a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a9e:	e009      	b.n	8003ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003aa0:	4b08      	ldr	r3, [pc, #32]	@ (8003ac4 <_sbrk+0x64>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <_sbrk+0x64>)
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4413      	add	r3, r2
 8003aae:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <_sbrk+0x64>)
 8003ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3718      	adds	r7, #24
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20020000 	.word	0x20020000
 8003ac0:	00000400 	.word	0x00000400
 8003ac4:	20001484 	.word	0x20001484
 8003ac8:	20001cf8 	.word	0x20001cf8

08003acc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ad0:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <SystemInit+0x20>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ad6:	4a05      	ldr	r2, [pc, #20]	@ (8003aec <SystemInit+0x20>)
 8003ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b098      	sub	sp, #96	@ 0x60
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003afa:	2200      	movs	r2, #0
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	615a      	str	r2, [r3, #20]
 8003b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2234      	movs	r2, #52	@ 0x34
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f008 fddb 	bl	800c6d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b22:	4b3b      	ldr	r3, [pc, #236]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b24:	4a3b      	ldr	r2, [pc, #236]	@ (8003c14 <MX_TIM1_Init+0x124>)
 8003b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b28:	4b39      	ldr	r3, [pc, #228]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	4b38      	ldr	r3, [pc, #224]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003b34:	4b36      	ldr	r3, [pc, #216]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3c:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b42:	4b33      	ldr	r3, [pc, #204]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b48:	4b31      	ldr	r3, [pc, #196]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b4e:	4830      	ldr	r0, [pc, #192]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b50:	f004 f9d2 	bl	8007ef8 <HAL_TIM_PWM_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003b5a:	f7ff f95f 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b62:	2300      	movs	r3, #0
 8003b64:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b66:	2300      	movs	r3, #0
 8003b68:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4827      	ldr	r0, [pc, #156]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003b72:	f005 ffe3 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003b7c:	f7ff f94e 	bl	8002e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b80:	2360      	movs	r3, #96	@ 0x60
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003b84:	2300      	movs	r3, #0
 8003b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b94:	2300      	movs	r3, #0
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b9c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	481a      	ldr	r0, [pc, #104]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003ba6:	f004 fecf 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003bb0:	f7ff f934 	bl	8002e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003bcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003be4:	2300      	movs	r3, #0
 8003be6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003be8:	2300      	movs	r3, #0
 8003bea:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bec:	1d3b      	adds	r3, r7, #4
 8003bee:	4619      	mov	r1, r3
 8003bf0:	4807      	ldr	r0, [pc, #28]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003bf2:	f006 f839 	bl	8009c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003bfc:	f7ff f90e 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c00:	4803      	ldr	r0, [pc, #12]	@ (8003c10 <MX_TIM1_Init+0x120>)
 8003c02:	f000 fb5b 	bl	80042bc <HAL_TIM_MspPostInit>

}
 8003c06:	bf00      	nop
 8003c08:	3760      	adds	r7, #96	@ 0x60
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	20001488 	.word	0x20001488
 8003c14:	40012c00 	.word	0x40012c00

08003c18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c1e:	f107 0310 	add.w	r3, r7, #16
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
 8003c28:	609a      	str	r2, [r3, #8]
 8003c2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c2c:	1d3b      	adds	r3, r7, #4
 8003c2e:	2200      	movs	r2, #0
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c36:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003c3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c40:	22a9      	movs	r2, #169	@ 0xa9
 8003c42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c44:	4b1a      	ldr	r3, [pc, #104]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003c4a:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c4c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003c50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c52:	4b17      	ldr	r3, [pc, #92]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c58:	4b15      	ldr	r3, [pc, #84]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c5e:	4814      	ldr	r0, [pc, #80]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c60:	f003 fffe 	bl	8007c60 <HAL_TIM_Base_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c6a:	f7ff f8d7 	bl	8002e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c74:	f107 0310 	add.w	r3, r7, #16
 8003c78:	4619      	mov	r1, r3
 8003c7a:	480d      	ldr	r0, [pc, #52]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c7c:	f004 ff78 	bl	8008b70 <HAL_TIM_ConfigClockSource>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c86:	f7ff f8c9 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c92:	1d3b      	adds	r3, r7, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4806      	ldr	r0, [pc, #24]	@ (8003cb0 <MX_TIM2_Init+0x98>)
 8003c98:	f005 ff50 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003ca2:	f7ff f8bb 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ca6:	bf00      	nop
 8003ca8:	3720      	adds	r7, #32
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20001554 	.word	0x20001554

08003cb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08c      	sub	sp, #48	@ 0x30
 8003cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003cba:	f107 030c 	add.w	r3, r7, #12
 8003cbe:	2224      	movs	r2, #36	@ 0x24
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f008 fd08 	bl	800c6d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cc8:	463b      	mov	r3, r7
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cd2:	4b21      	ldr	r3, [pc, #132]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003cd4:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <MX_TIM3_Init+0xa8>)
 8003cd6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cde:	4b1e      	ldr	r3, [pc, #120]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003cea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cec:	4b1a      	ldr	r3, [pc, #104]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d00:	2301      	movs	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d10:	2301      	movs	r3, #1
 8003d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003d1c:	f107 030c 	add.w	r3, r7, #12
 8003d20:	4619      	mov	r1, r3
 8003d22:	480d      	ldr	r0, [pc, #52]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003d24:	f004 fb54 	bl	80083d0 <HAL_TIM_Encoder_Init>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003d2e:	f7ff f875 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d3a:	463b      	mov	r3, r7
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4806      	ldr	r0, [pc, #24]	@ (8003d58 <MX_TIM3_Init+0xa4>)
 8003d40:	f005 fefc 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003d4a:	f7ff f867 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d4e:	bf00      	nop
 8003d50:	3730      	adds	r7, #48	@ 0x30
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20001620 	.word	0x20001620
 8003d5c:	40000400 	.word	0x40000400

08003d60 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08c      	sub	sp, #48	@ 0x30
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d66:	f107 030c 	add.w	r3, r7, #12
 8003d6a:	2224      	movs	r2, #36	@ 0x24
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f008 fcb2 	bl	800c6d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d74:	463b      	mov	r3, r7
 8003d76:	2200      	movs	r2, #0
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
 8003d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d7e:	4b21      	ldr	r3, [pc, #132]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003d80:	4a21      	ldr	r2, [pc, #132]	@ (8003e08 <MX_TIM4_Init+0xa8>)
 8003d82:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d84:	4b1f      	ldr	r3, [pc, #124]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003d90:	4b1c      	ldr	r3, [pc, #112]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003d92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d96:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d98:	4b1a      	ldr	r3, [pc, #104]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d9e:	4b19      	ldr	r3, [pc, #100]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003da4:	2303      	movs	r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003db0:	2300      	movs	r3, #0
 8003db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003dc8:	f107 030c 	add.w	r3, r7, #12
 8003dcc:	4619      	mov	r1, r3
 8003dce:	480d      	ldr	r0, [pc, #52]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003dd0:	f004 fafe 	bl	80083d0 <HAL_TIM_Encoder_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003dda:	f7ff f81f 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003de6:	463b      	mov	r3, r7
 8003de8:	4619      	mov	r1, r3
 8003dea:	4806      	ldr	r0, [pc, #24]	@ (8003e04 <MX_TIM4_Init+0xa4>)
 8003dec:	f005 fea6 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003df6:	f7ff f811 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003dfa:	bf00      	nop
 8003dfc:	3730      	adds	r7, #48	@ 0x30
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	200016ec 	.word	0x200016ec
 8003e08:	40000800 	.word	0x40000800

08003e0c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e12:	f107 0310 	add.w	r3, r7, #16
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
 8003e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e20:	1d3b      	adds	r3, r7, #4
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea4 <MX_TIM5_Init+0x98>)
 8003e2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003e30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e32:	22a9      	movs	r2, #169	@ 0xa9
 8003e34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e36:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003e3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e44:	4b16      	ldr	r3, [pc, #88]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003e50:	4813      	ldr	r0, [pc, #76]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e52:	f003 ff05 	bl	8007c60 <HAL_TIM_Base_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003e5c:	f7fe ffde 	bl	8002e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003e66:	f107 0310 	add.w	r3, r7, #16
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	480c      	ldr	r0, [pc, #48]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e6e:	f004 fe7f 	bl	8008b70 <HAL_TIM_ConfigClockSource>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003e78:	f7fe ffd0 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003e84:	1d3b      	adds	r3, r7, #4
 8003e86:	4619      	mov	r1, r3
 8003e88:	4805      	ldr	r0, [pc, #20]	@ (8003ea0 <MX_TIM5_Init+0x94>)
 8003e8a:	f005 fe57 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003e94:	f7fe ffc2 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003e98:	bf00      	nop
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200017b8 	.word	0x200017b8
 8003ea4:	40000c00 	.word	0x40000c00

08003ea8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b09c      	sub	sp, #112	@ 0x70
 8003eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ebc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ec8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003edc:	1d3b      	adds	r3, r7, #4
 8003ede:	2234      	movs	r2, #52	@ 0x34
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f008 fbf8 	bl	800c6d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003ee8:	4b51      	ldr	r3, [pc, #324]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003eea:	4a52      	ldr	r2, [pc, #328]	@ (8004034 <MX_TIM8_Init+0x18c>)
 8003eec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003eee:	4b50      	ldr	r3, [pc, #320]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ef4:	4b4e      	ldr	r3, [pc, #312]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003efa:	4b4d      	ldr	r3, [pc, #308]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003efc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f00:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f02:	4b4b      	ldr	r3, [pc, #300]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f08:	4b49      	ldr	r3, [pc, #292]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f0e:	4b48      	ldr	r3, [pc, #288]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003f14:	4846      	ldr	r0, [pc, #280]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f16:	f003 fea3 	bl	8007c60 <HAL_TIM_Base_Init>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003f20:	f7fe ff7c 	bl	8002e1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f28:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003f2a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003f2e:	4619      	mov	r1, r3
 8003f30:	483f      	ldr	r0, [pc, #252]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f32:	f004 fe1d 	bl	8008b70 <HAL_TIM_ConfigClockSource>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003f3c:	f7fe ff6e 	bl	8002e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003f40:	483b      	ldr	r0, [pc, #236]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f42:	f003 ffd9 	bl	8007ef8 <HAL_TIM_PWM_Init>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003f4c:	f7fe ff66 	bl	8002e1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003f60:	4619      	mov	r1, r3
 8003f62:	4833      	ldr	r0, [pc, #204]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f64:	f005 fdea 	bl	8009b3c <HAL_TIMEx_MasterConfigSynchronization>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003f6e:	f7fe ff55 	bl	8002e1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f72:	2360      	movs	r3, #96	@ 0x60
 8003f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f86:	2300      	movs	r3, #0
 8003f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f92:	2200      	movs	r2, #0
 8003f94:	4619      	mov	r1, r3
 8003f96:	4826      	ldr	r0, [pc, #152]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003f98:	f004 fcd6 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003fa2:	f7fe ff3b 	bl	8002e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003fa6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003faa:	2204      	movs	r2, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4820      	ldr	r0, [pc, #128]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003fb0:	f004 fcca 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003fba:	f7fe ff2f 	bl	8002e1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003fbe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	481a      	ldr	r0, [pc, #104]	@ (8004030 <MX_TIM8_Init+0x188>)
 8003fc8:	f004 fcbe 	bl	8008948 <HAL_TIM_PWM_ConfigChannel>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003fd2:	f7fe ff23 	bl	8002e1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003ffc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004002:	2300      	movs	r3, #0
 8004004:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004006:	2300      	movs	r3, #0
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4807      	ldr	r0, [pc, #28]	@ (8004030 <MX_TIM8_Init+0x188>)
 8004014:	f005 fe28 	bl	8009c68 <HAL_TIMEx_ConfigBreakDeadTime>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800401e:	f7fe fefd 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004022:	4803      	ldr	r0, [pc, #12]	@ (8004030 <MX_TIM8_Init+0x188>)
 8004024:	f000 f94a 	bl	80042bc <HAL_TIM_MspPostInit>

}
 8004028:	bf00      	nop
 800402a:	3770      	adds	r7, #112	@ 0x70
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20001884 	.word	0x20001884
 8004034:	40013400 	.word	0x40013400

08004038 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800403c:	4b14      	ldr	r3, [pc, #80]	@ (8004090 <MX_TIM16_Init+0x58>)
 800403e:	4a15      	ldr	r2, [pc, #84]	@ (8004094 <MX_TIM16_Init+0x5c>)
 8004040:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004042:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <MX_TIM16_Init+0x58>)
 8004044:	22a9      	movs	r2, #169	@ 0xa9
 8004046:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004048:	4b11      	ldr	r3, [pc, #68]	@ (8004090 <MX_TIM16_Init+0x58>)
 800404a:	2200      	movs	r2, #0
 800404c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800404e:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <MX_TIM16_Init+0x58>)
 8004050:	f240 4279 	movw	r2, #1145	@ 0x479
 8004054:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004056:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <MX_TIM16_Init+0x58>)
 8004058:	2200      	movs	r2, #0
 800405a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <MX_TIM16_Init+0x58>)
 800405e:	2200      	movs	r2, #0
 8004060:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <MX_TIM16_Init+0x58>)
 8004064:	2200      	movs	r2, #0
 8004066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004068:	4809      	ldr	r0, [pc, #36]	@ (8004090 <MX_TIM16_Init+0x58>)
 800406a:	f003 fdf9 	bl	8007c60 <HAL_TIM_Base_Init>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d001      	beq.n	8004078 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004074:	f7fe fed2 	bl	8002e1c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8004078:	2108      	movs	r1, #8
 800407a:	4805      	ldr	r0, [pc, #20]	@ (8004090 <MX_TIM16_Init+0x58>)
 800407c:	f004 f8b2 	bl	80081e4 <HAL_TIM_OnePulse_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8004086:	f7fe fec9 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	20001950 	.word	0x20001950
 8004094:	40014400 	.word	0x40014400

08004098 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <HAL_TIM_PWM_MspInit+0x44>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d113      	bne.n	80040d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <HAL_TIM_PWM_MspInit+0x48>)
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <HAL_TIM_PWM_MspInit+0x48>)
 80040b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040b6:	4b0a      	ldr	r3, [pc, #40]	@ (80040e0 <HAL_TIM_PWM_MspInit+0x48>)
 80040b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	2019      	movs	r0, #25
 80040c8:	f002 f869 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80040cc:	2019      	movs	r0, #25
 80040ce:	f002 f880 	bl	80061d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040f4:	d114      	bne.n	8004120 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040f6:	4b2b      	ldr	r3, [pc, #172]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fa:	4a2a      	ldr	r2, [pc, #168]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6593      	str	r3, [r2, #88]	@ 0x58
 8004102:	4b28      	ldr	r3, [pc, #160]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800410e:	2200      	movs	r2, #0
 8004110:	2100      	movs	r1, #0
 8004112:	201c      	movs	r0, #28
 8004114:	f002 f843 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004118:	201c      	movs	r0, #28
 800411a:	f002 f85a 	bl	80061d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800411e:	e03c      	b.n	800419a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <HAL_TIM_Base_MspInit+0xc4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d10c      	bne.n	8004144 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800412a:	4b1e      	ldr	r3, [pc, #120]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 800412c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412e:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004130:	f043 0308 	orr.w	r3, r3, #8
 8004134:	6593      	str	r3, [r2, #88]	@ 0x58
 8004136:	4b1b      	ldr	r3, [pc, #108]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	f003 0308 	and.w	r3, r3, #8
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	693b      	ldr	r3, [r7, #16]
}
 8004142:	e02a      	b.n	800419a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a18      	ldr	r2, [pc, #96]	@ (80041ac <HAL_TIM_Base_MspInit+0xc8>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d10c      	bne.n	8004168 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800414e:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004152:	4a14      	ldr	r2, [pc, #80]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004154:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004158:	6613      	str	r3, [r2, #96]	@ 0x60
 800415a:	4b12      	ldr	r3, [pc, #72]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
}
 8004166:	e018      	b.n	800419a <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a10      	ldr	r2, [pc, #64]	@ (80041b0 <HAL_TIM_Base_MspInit+0xcc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d113      	bne.n	800419a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004172:	4b0c      	ldr	r3, [pc, #48]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004174:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004176:	4a0b      	ldr	r2, [pc, #44]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417c:	6613      	str	r3, [r2, #96]	@ 0x60
 800417e:	4b09      	ldr	r3, [pc, #36]	@ (80041a4 <HAL_TIM_Base_MspInit+0xc0>)
 8004180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800418a:	2200      	movs	r2, #0
 800418c:	2100      	movs	r1, #0
 800418e:	2019      	movs	r0, #25
 8004190:	f002 f805 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004194:	2019      	movs	r0, #25
 8004196:	f002 f81c 	bl	80061d2 <HAL_NVIC_EnableIRQ>
}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40021000 	.word	0x40021000
 80041a8:	40000c00 	.word	0x40000c00
 80041ac:	40013400 	.word	0x40013400
 80041b0:	40014400 	.word	0x40014400

080041b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08c      	sub	sp, #48	@ 0x30
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041bc:	f107 031c 	add.w	r3, r7, #28
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a37      	ldr	r2, [pc, #220]	@ (80042b0 <HAL_TIM_Encoder_MspInit+0xfc>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d131      	bne.n	800423a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041d6:	4b37      	ldr	r3, [pc, #220]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041da:	4a36      	ldr	r2, [pc, #216]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041e2:	4b34      	ldr	r3, [pc, #208]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ee:	4b31      	ldr	r3, [pc, #196]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f2:	4a30      	ldr	r2, [pc, #192]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041f4:	f043 0301 	orr.w	r3, r3, #1
 80041f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041fa:	4b2e      	ldr	r3, [pc, #184]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 80041fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004206:	23c0      	movs	r3, #192	@ 0xc0
 8004208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800420a:	2302      	movs	r3, #2
 800420c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004212:	2300      	movs	r3, #0
 8004214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004216:	2302      	movs	r3, #2
 8004218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800421a:	f107 031c 	add.w	r3, r7, #28
 800421e:	4619      	mov	r1, r3
 8004220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004224:	f002 fb22 	bl	800686c <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004228:	2200      	movs	r2, #0
 800422a:	2100      	movs	r1, #0
 800422c:	201d      	movs	r0, #29
 800422e:	f001 ffb6 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004232:	201d      	movs	r0, #29
 8004234:	f001 ffcd 	bl	80061d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8004238:	e036      	b.n	80042a8 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a1e      	ldr	r2, [pc, #120]	@ (80042b8 <HAL_TIM_Encoder_MspInit+0x104>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d131      	bne.n	80042a8 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004244:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004248:	4a1a      	ldr	r2, [pc, #104]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004250:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800425c:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 800425e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004260:	4a14      	ldr	r2, [pc, #80]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004268:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <HAL_TIM_Encoder_MspInit+0x100>)
 800426a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004274:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004286:	230a      	movs	r3, #10
 8004288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800428a:	f107 031c 	add.w	r3, r7, #28
 800428e:	4619      	mov	r1, r3
 8004290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004294:	f002 faea 	bl	800686c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004298:	2200      	movs	r2, #0
 800429a:	2100      	movs	r1, #0
 800429c:	201e      	movs	r0, #30
 800429e:	f001 ff7e 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80042a2:	201e      	movs	r0, #30
 80042a4:	f001 ff95 	bl	80061d2 <HAL_NVIC_EnableIRQ>
}
 80042a8:	bf00      	nop
 80042aa:	3730      	adds	r7, #48	@ 0x30
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40000800 	.word	0x40000800

080042bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	@ 0x28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	605a      	str	r2, [r3, #4]
 80042ce:	609a      	str	r2, [r3, #8]
 80042d0:	60da      	str	r2, [r3, #12]
 80042d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a30      	ldr	r2, [pc, #192]	@ (800439c <HAL_TIM_MspPostInit+0xe0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d11c      	bne.n	8004318 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042de:	4b30      	ldr	r3, [pc, #192]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	4a2f      	ldr	r2, [pc, #188]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ea:	4b2d      	ldr	r3, [pc, #180]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 80042ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	613b      	str	r3, [r7, #16]
 80042f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042f6:	2308      	movs	r3, #8
 80042f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fa:	2302      	movs	r3, #2
 80042fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004302:	2300      	movs	r3, #0
 8004304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004306:	2302      	movs	r3, #2
 8004308:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	4619      	mov	r1, r3
 8004310:	4824      	ldr	r0, [pc, #144]	@ (80043a4 <HAL_TIM_MspPostInit+0xe8>)
 8004312:	f002 faab 	bl	800686c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004316:	e03d      	b.n	8004394 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a22      	ldr	r2, [pc, #136]	@ (80043a8 <HAL_TIM_MspPostInit+0xec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d138      	bne.n	8004394 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004322:	4b1f      	ldr	r3, [pc, #124]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004326:	4a1e      	ldr	r2, [pc, #120]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800432e:	4b1c      	ldr	r3, [pc, #112]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800433a:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800433e:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <HAL_TIM_MspPostInit+0xe4>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004352:	23c0      	movs	r3, #192	@ 0xc0
 8004354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004356:	2302      	movs	r3, #2
 8004358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004362:	2304      	movs	r3, #4
 8004364:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004366:	f107 0314 	add.w	r3, r7, #20
 800436a:	4619      	mov	r1, r3
 800436c:	480d      	ldr	r0, [pc, #52]	@ (80043a4 <HAL_TIM_MspPostInit+0xe8>)
 800436e:	f002 fa7d 	bl	800686c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004378:	2302      	movs	r3, #2
 800437a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004380:	2300      	movs	r3, #0
 8004382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004384:	230a      	movs	r3, #10
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004388:	f107 0314 	add.w	r3, r7, #20
 800438c:	4619      	mov	r1, r3
 800438e:	4807      	ldr	r0, [pc, #28]	@ (80043ac <HAL_TIM_MspPostInit+0xf0>)
 8004390:	f002 fa6c 	bl	800686c <HAL_GPIO_Init>
}
 8004394:	bf00      	nop
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	40021000 	.word	0x40021000
 80043a4:	48000800 	.word	0x48000800
 80043a8:	40013400 	.word	0x40013400
 80043ac:	48000400 	.word	0x48000400

080043b0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80043b4:	4b23      	ldr	r3, [pc, #140]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043b6:	4a24      	ldr	r2, [pc, #144]	@ (8004448 <MX_USART2_UART_Init+0x98>)
 80043b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80043ba:	4b22      	ldr	r3, [pc, #136]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043bc:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80043c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80043c2:	4b20      	ldr	r3, [pc, #128]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043c8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80043d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043da:	220c      	movs	r2, #12
 80043dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043de:	4b19      	ldr	r3, [pc, #100]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80043e4:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043ea:	4b16      	ldr	r3, [pc, #88]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80043f0:	4b14      	ldr	r3, [pc, #80]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043f6:	4b13      	ldr	r3, [pc, #76]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80043fc:	4811      	ldr	r0, [pc, #68]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 80043fe:	f005 fd17 	bl	8009e30 <HAL_UART_Init>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004408:	f7fe fd08 	bl	8002e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800440c:	2100      	movs	r1, #0
 800440e:	480d      	ldr	r0, [pc, #52]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 8004410:	f007 fa6a 	bl	800b8e8 <HAL_UARTEx_SetTxFifoThreshold>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800441a:	f7fe fcff 	bl	8002e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800441e:	2100      	movs	r1, #0
 8004420:	4808      	ldr	r0, [pc, #32]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 8004422:	f007 fa9f 	bl	800b964 <HAL_UARTEx_SetRxFifoThreshold>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800442c:	f7fe fcf6 	bl	8002e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004430:	4804      	ldr	r0, [pc, #16]	@ (8004444 <MX_USART2_UART_Init+0x94>)
 8004432:	f007 fa20 	bl	800b876 <HAL_UARTEx_DisableFifoMode>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800443c:	f7fe fcee 	bl	8002e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20001a1c 	.word	0x20001a1c
 8004448:	40004400 	.word	0x40004400

0800444c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b09e      	sub	sp, #120	@ 0x78
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004454:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	609a      	str	r2, [r3, #8]
 8004460:	60da      	str	r2, [r3, #12]
 8004462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004464:	f107 0310 	add.w	r3, r7, #16
 8004468:	2254      	movs	r2, #84	@ 0x54
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f008 f933 	bl	800c6d8 <memset>
  if(uartHandle->Instance==USART2)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a4d      	ldr	r2, [pc, #308]	@ (80045ac <HAL_UART_MspInit+0x160>)
 8004478:	4293      	cmp	r3, r2
 800447a:	f040 8092 	bne.w	80045a2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800447e:	2302      	movs	r3, #2
 8004480:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004482:	2300      	movs	r3, #0
 8004484:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004486:	f107 0310 	add.w	r3, r7, #16
 800448a:	4618      	mov	r0, r3
 800448c:	f003 f99a 	bl	80077c4 <HAL_RCCEx_PeriphCLKConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004496:	f7fe fcc1 	bl	8002e1c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800449a:	4b45      	ldr	r3, [pc, #276]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 800449c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800449e:	4a44      	ldr	r2, [pc, #272]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80044a6:	4b42      	ldr	r3, [pc, #264]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044b2:	4b3f      	ldr	r3, [pc, #252]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 80044b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b6:	4a3e      	ldr	r2, [pc, #248]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044be:	4b3c      	ldr	r3, [pc, #240]	@ (80045b0 <HAL_UART_MspInit+0x164>)
 80044c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80044ca:	230c      	movs	r3, #12
 80044cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d6:	2300      	movs	r3, #0
 80044d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044da:	2307      	movs	r3, #7
 80044dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80044e2:	4619      	mov	r1, r3
 80044e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e8:	f002 f9c0 	bl	800686c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80044ec:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 80044ee:	4a32      	ldr	r2, [pc, #200]	@ (80045b8 <HAL_UART_MspInit+0x16c>)
 80044f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80044f2:	4b30      	ldr	r3, [pc, #192]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 80044f4:	221a      	movs	r2, #26
 80044f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f8:	4b2e      	ldr	r3, [pc, #184]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044fe:	4b2d      	ldr	r3, [pc, #180]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004500:	2200      	movs	r2, #0
 8004502:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004504:	4b2b      	ldr	r3, [pc, #172]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004506:	2280      	movs	r2, #128	@ 0x80
 8004508:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800450a:	4b2a      	ldr	r3, [pc, #168]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 800450c:	2200      	movs	r2, #0
 800450e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004510:	4b28      	ldr	r3, [pc, #160]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004516:	4b27      	ldr	r3, [pc, #156]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004518:	2200      	movs	r2, #0
 800451a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800451c:	4b25      	ldr	r3, [pc, #148]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 800451e:	2200      	movs	r2, #0
 8004520:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004522:	4824      	ldr	r0, [pc, #144]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004524:	f001 fe70 	bl	8006208 <HAL_DMA_Init>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800452e:	f7fe fc75 	bl	8002e1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a1f      	ldr	r2, [pc, #124]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 8004536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800453a:	4a1e      	ldr	r2, [pc, #120]	@ (80045b4 <HAL_UART_MspInit+0x168>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004540:	4b1e      	ldr	r3, [pc, #120]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004542:	4a1f      	ldr	r2, [pc, #124]	@ (80045c0 <HAL_UART_MspInit+0x174>)
 8004544:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004548:	221b      	movs	r2, #27
 800454a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800454c:	4b1b      	ldr	r3, [pc, #108]	@ (80045bc <HAL_UART_MspInit+0x170>)
 800454e:	2210      	movs	r2, #16
 8004550:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004552:	4b1a      	ldr	r3, [pc, #104]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004554:	2200      	movs	r2, #0
 8004556:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004558:	4b18      	ldr	r3, [pc, #96]	@ (80045bc <HAL_UART_MspInit+0x170>)
 800455a:	2280      	movs	r2, #128	@ 0x80
 800455c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800455e:	4b17      	ldr	r3, [pc, #92]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004560:	2200      	movs	r2, #0
 8004562:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004564:	4b15      	ldr	r3, [pc, #84]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004566:	2200      	movs	r2, #0
 8004568:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800456a:	4b14      	ldr	r3, [pc, #80]	@ (80045bc <HAL_UART_MspInit+0x170>)
 800456c:	2200      	movs	r2, #0
 800456e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004572:	2200      	movs	r2, #0
 8004574:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004576:	4811      	ldr	r0, [pc, #68]	@ (80045bc <HAL_UART_MspInit+0x170>)
 8004578:	f001 fe46 	bl	8006208 <HAL_DMA_Init>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004582:	f7fe fc4b 	bl	8002e1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <HAL_UART_MspInit+0x170>)
 800458a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800458c:	4a0b      	ldr	r2, [pc, #44]	@ (80045bc <HAL_UART_MspInit+0x170>)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	2026      	movs	r0, #38	@ 0x26
 8004598:	f001 fe01 	bl	800619e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800459c:	2026      	movs	r0, #38	@ 0x26
 800459e:	f001 fe18 	bl	80061d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80045a2:	bf00      	nop
 80045a4:	3778      	adds	r7, #120	@ 0x78
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40004400 	.word	0x40004400
 80045b0:	40021000 	.word	0x40021000
 80045b4:	20001ae8 	.word	0x20001ae8
 80045b8:	4002001c 	.word	0x4002001c
 80045bc:	20001b48 	.word	0x20001b48
 80045c0:	40020030 	.word	0x40020030

080045c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80045c4:	480d      	ldr	r0, [pc, #52]	@ (80045fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80045c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80045c8:	f7ff fa80 	bl	8003acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80045cc:	480c      	ldr	r0, [pc, #48]	@ (8004600 <LoopForever+0x6>)
  ldr r1, =_edata
 80045ce:	490d      	ldr	r1, [pc, #52]	@ (8004604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <LoopForever+0xe>)
  movs r3, #0
 80045d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80045d4:	e002      	b.n	80045dc <LoopCopyDataInit>

080045d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045da:	3304      	adds	r3, #4

080045dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045e0:	d3f9      	bcc.n	80045d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045e2:	4a0a      	ldr	r2, [pc, #40]	@ (800460c <LoopForever+0x12>)
  ldr r4, =_ebss
 80045e4:	4c0a      	ldr	r4, [pc, #40]	@ (8004610 <LoopForever+0x16>)
  movs r3, #0
 80045e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045e8:	e001      	b.n	80045ee <LoopFillZerobss>

080045ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045ec:	3204      	adds	r2, #4

080045ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045f0:	d3fb      	bcc.n	80045ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045f2:	f008 f88f 	bl	800c714 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80045f6:	f7fe fa83 	bl	8002b00 <main>

080045fa <LoopForever>:

LoopForever:
    b LoopForever
 80045fa:	e7fe      	b.n	80045fa <LoopForever>
  ldr   r0, =_estack
 80045fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004604:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8004608:	0800e728 	.word	0x0800e728
  ldr r2, =_sbss
 800460c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8004610:	20001cf4 	.word	0x20001cf4

08004614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004614:	e7fe      	b.n	8004614 <ADC1_2_IRQHandler>

08004616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004620:	2003      	movs	r0, #3
 8004622:	f001 fdb1 	bl	8006188 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004626:	2000      	movs	r0, #0
 8004628:	f000 f80e 	bl	8004648 <HAL_InitTick>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	71fb      	strb	r3, [r7, #7]
 8004636:	e001      	b.n	800463c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004638:	f7ff f962 	bl	8003900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800463c:	79fb      	ldrb	r3, [r7, #7]

}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004650:	2300      	movs	r3, #0
 8004652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004654:	4b16      	ldr	r3, [pc, #88]	@ (80046b0 <HAL_InitTick+0x68>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d022      	beq.n	80046a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800465c:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <HAL_InitTick+0x6c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b13      	ldr	r3, [pc, #76]	@ (80046b0 <HAL_InitTick+0x68>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004668:	fbb1 f3f3 	udiv	r3, r1, r3
 800466c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fdbc 	bl	80061ee <HAL_SYSTICK_Config>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10f      	bne.n	800469c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d809      	bhi.n	8004696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004682:	2200      	movs	r2, #0
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	f001 fd88 	bl	800619e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <HAL_InitTick+0x70>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	e007      	b.n	80046a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	e004      	b.n	80046a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
 80046a0:	e001      	b.n	80046a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000160 	.word	0x20000160
 80046b4:	20000158 	.word	0x20000158
 80046b8:	2000015c 	.word	0x2000015c

080046bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_IncTick+0x1c>)
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b05      	ldr	r3, [pc, #20]	@ (80046dc <HAL_IncTick+0x20>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a03      	ldr	r2, [pc, #12]	@ (80046d8 <HAL_IncTick+0x1c>)
 80046cc:	6013      	str	r3, [r2, #0]
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20001ba8 	.word	0x20001ba8
 80046dc:	20000160 	.word	0x20000160

080046e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return uwTick;
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_GetTick+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20001ba8 	.word	0x20001ba8

080046f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	609a      	str	r2, [r3, #8]
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004760:	b480      	push	{r7}
 8004762:	b087      	sub	sp, #28
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
 800476c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3360      	adds	r3, #96	@ 0x60
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <LL_ADC_SetOffset+0x44>)
 8004782:	4013      	ands	r3, r2
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	4313      	orrs	r3, r2
 8004790:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	03fff000 	.word	0x03fff000

080047a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	3360      	adds	r3, #96	@ 0x60
 80047b6:	461a      	mov	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4413      	add	r3, r2
 80047be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3360      	adds	r3, #96	@ 0x60
 80047e4:	461a      	mov	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	431a      	orrs	r2, r3
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80047fe:	bf00      	nop
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr

0800480a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800480a:	b480      	push	{r7}
 800480c:	b087      	sub	sp, #28
 800480e:	af00      	add	r7, sp, #0
 8004810:	60f8      	str	r0, [r7, #12]
 8004812:	60b9      	str	r1, [r7, #8]
 8004814:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3360      	adds	r3, #96	@ 0x60
 800481a:	461a      	mov	r2, r3
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	431a      	orrs	r2, r3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3360      	adds	r3, #96	@ 0x60
 8004850:	461a      	mov	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	431a      	orrs	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
 800487e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	615a      	str	r2, [r3, #20]
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b087      	sub	sp, #28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3330      	adds	r3, #48	@ 0x30
 80048d2:	461a      	mov	r2, r3
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	4413      	add	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	211f      	movs	r1, #31
 80048ee:	fa01 f303 	lsl.w	r3, r1, r3
 80048f2:	43db      	mvns	r3, r3
 80048f4:	401a      	ands	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	f003 011f 	and.w	r1, r3, #31
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f003 031f 	and.w	r3, r3, #31
 8004904:	fa01 f303 	lsl.w	r3, r1, r3
 8004908:	431a      	orrs	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800491a:	b480      	push	{r7}
 800491c:	b087      	sub	sp, #28
 800491e:	af00      	add	r7, sp, #0
 8004920:	60f8      	str	r0, [r7, #12]
 8004922:	60b9      	str	r1, [r7, #8]
 8004924:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3314      	adds	r3, #20
 800492a:	461a      	mov	r2, r3
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	0e5b      	lsrs	r3, r3, #25
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	4413      	add	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	0d1b      	lsrs	r3, r3, #20
 8004942:	f003 031f 	and.w	r3, r3, #31
 8004946:	2107      	movs	r1, #7
 8004948:	fa01 f303 	lsl.w	r3, r1, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	0d1b      	lsrs	r3, r3, #20
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	fa01 f303 	lsl.w	r3, r1, r3
 800495e:	431a      	orrs	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004964:	bf00      	nop
 8004966:	371c      	adds	r7, #28
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f003 0318 	and.w	r3, r3, #24
 8004992:	4908      	ldr	r1, [pc, #32]	@ (80049b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004994:	40d9      	lsrs	r1, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	400b      	ands	r3, r1
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	0007ffff 	.word	0x0007ffff

080049b8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f003 031f 	and.w	r3, r3, #31
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80049e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6093      	str	r3, [r2, #8]
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0c:	d101      	bne.n	8004a12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e000      	b.n	8004a14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a34:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a5c:	d101      	bne.n	8004a62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a84:	f043 0201 	orr.w	r2, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004aa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004aac:	f043 0202 	orr.w	r2, r3, #2
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <LL_ADC_IsEnabled+0x18>
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e000      	b.n	8004ada <LL_ADC_IsEnabled+0x1a>
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d101      	bne.n	8004afe <LL_ADC_IsDisableOngoing+0x18>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <LL_ADC_IsDisableOngoing+0x1a>
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b20:	f043 0204 	orr.w	r2, r3, #4
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d101      	bne.n	8004b4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e000      	b.n	8004b4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr

08004b5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b083      	sub	sp, #12
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d101      	bne.n	8004b72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e000      	b.n	8004b74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b089      	sub	sp, #36	@ 0x24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e1a9      	b.n	8004eee <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7fd fb21 	bl	80021f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ff19 	bl	80049f8 <LL_ADC_IsDeepPowerDownEnabled>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d004      	beq.n	8004bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff feff 	bl	80049d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff ff34 	bl	8004a48 <LL_ADC_IsInternalRegulatorEnabled>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d115      	bne.n	8004c12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff ff18 	bl	8004a20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bf0:	4b9c      	ldr	r3, [pc, #624]	@ (8004e64 <HAL_ADC_Init+0x2e4>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	099b      	lsrs	r3, r3, #6
 8004bf6:	4a9c      	ldr	r2, [pc, #624]	@ (8004e68 <HAL_ADC_Init+0x2e8>)
 8004bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfc:	099b      	lsrs	r3, r3, #6
 8004bfe:	3301      	adds	r3, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c04:	e002      	b.n	8004c0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f9      	bne.n	8004c06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff16 	bl	8004a48 <LL_ADC_IsInternalRegulatorEnabled>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c26:	f043 0210 	orr.w	r2, r3, #16
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c32:	f043 0201 	orr.w	r2, r3, #1
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ff76 	bl	8004b34 <LL_ADC_REG_IsConversionOngoing>
 8004c48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c4e:	f003 0310 	and.w	r3, r3, #16
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 8142 	bne.w	8004edc <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f040 813e 	bne.w	8004edc <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004c68:	f043 0202 	orr.w	r2, r3, #2
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff ff23 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d141      	bne.n	8004d04 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c88:	d004      	beq.n	8004c94 <HAL_ADC_Init+0x114>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a77      	ldr	r2, [pc, #476]	@ (8004e6c <HAL_ADC_Init+0x2ec>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10f      	bne.n	8004cb4 <HAL_ADC_Init+0x134>
 8004c94:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c98:	f7ff ff12 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4873      	ldr	r0, [pc, #460]	@ (8004e6c <HAL_ADC_Init+0x2ec>)
 8004ca0:	f7ff ff0e 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4323      	orrs	r3, r4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	e012      	b.n	8004cda <HAL_ADC_Init+0x15a>
 8004cb4:	486e      	ldr	r0, [pc, #440]	@ (8004e70 <HAL_ADC_Init+0x2f0>)
 8004cb6:	f7ff ff03 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004cba:	4604      	mov	r4, r0
 8004cbc:	486d      	ldr	r0, [pc, #436]	@ (8004e74 <HAL_ADC_Init+0x2f4>)
 8004cbe:	f7ff feff 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	431c      	orrs	r4, r3
 8004cc6:	486c      	ldr	r0, [pc, #432]	@ (8004e78 <HAL_ADC_Init+0x2f8>)
 8004cc8:	f7ff fefa 	bl	8004ac0 <LL_ADC_IsEnabled>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4323      	orrs	r3, r4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	bf0c      	ite	eq
 8004cd4:	2301      	moveq	r3, #1
 8004cd6:	2300      	movne	r3, #0
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_Init+0x172>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a5f      	ldr	r2, [pc, #380]	@ (8004e6c <HAL_ADC_Init+0x2ec>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_Init+0x176>
 8004cf2:	4a62      	ldr	r2, [pc, #392]	@ (8004e7c <HAL_ADC_Init+0x2fc>)
 8004cf4:	e000      	b.n	8004cf8 <HAL_ADC_Init+0x178>
 8004cf6:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <HAL_ADC_Init+0x300>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f7ff fcfa 	bl	80046f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	7f5b      	ldrb	r3, [r3, #29]
 8004d08:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d0e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d14:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d1a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d22:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d24:	4313      	orrs	r3, r2
 8004d26:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	045b      	lsls	r3, r3, #17
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	4b48      	ldr	r3, [pc, #288]	@ (8004e84 <HAL_ADC_Init+0x304>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	69b9      	ldr	r1, [r7, #24]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7ff fee5 	bl	8004b5a <LL_ADC_INJ_IsConversionOngoing>
 8004d90:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d17f      	bne.n	8004e98 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d17c      	bne.n	8004e98 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004da2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004daa:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dac:	4313      	orrs	r3, r2
 8004dae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dba:	f023 0302 	bic.w	r3, r3, #2
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	69b9      	ldr	r1, [r7, #24]
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d017      	beq.n	8004e00 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004dde:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004de8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004dec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6911      	ldr	r1, [r2, #16]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004dfe:	e013      	b.n	8004e28 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e0e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e24:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d12a      	bne.n	8004e88 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e48:	4311      	orrs	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e4e:	4311      	orrs	r1, r2
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e54:	430a      	orrs	r2, r1
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	611a      	str	r2, [r3, #16]
 8004e62:	e019      	b.n	8004e98 <HAL_ADC_Init+0x318>
 8004e64:	20000158 	.word	0x20000158
 8004e68:	053e2d63 	.word	0x053e2d63
 8004e6c:	50000100 	.word	0x50000100
 8004e70:	50000400 	.word	0x50000400
 8004e74:	50000500 	.word	0x50000500
 8004e78:	50000600 	.word	0x50000600
 8004e7c:	50000300 	.word	0x50000300
 8004e80:	50000700 	.word	0x50000700
 8004e84:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10c      	bne.n	8004eba <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	f023 010f 	bic.w	r1, r3, #15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004eb8:	e007      	b.n	8004eca <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 020f 	bic.w	r2, r2, #15
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	f043 0201 	orr.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004eda:	e007      	b.n	8004eec <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee0:	f043 0210 	orr.w	r2, r3, #16
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004eec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3724      	adds	r7, #36	@ 0x24
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	bf00      	nop

08004ef8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f0c:	d004      	beq.n	8004f18 <HAL_ADC_Start_DMA+0x20>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5a      	ldr	r2, [pc, #360]	@ (800507c <HAL_ADC_Start_DMA+0x184>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_ADC_Start_DMA+0x24>
 8004f18:	4b59      	ldr	r3, [pc, #356]	@ (8005080 <HAL_ADC_Start_DMA+0x188>)
 8004f1a:	e000      	b.n	8004f1e <HAL_ADC_Start_DMA+0x26>
 8004f1c:	4b59      	ldr	r3, [pc, #356]	@ (8005084 <HAL_ADC_Start_DMA+0x18c>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fd4a 	bl	80049b8 <LL_ADC_GetMultimode>
 8004f24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fe02 	bl	8004b34 <LL_ADC_REG_IsConversionOngoing>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 809b 	bne.w	800506e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d101      	bne.n	8004f46 <HAL_ADC_Start_DMA+0x4e>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e096      	b.n	8005074 <HAL_ADC_Start_DMA+0x17c>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a4d      	ldr	r2, [pc, #308]	@ (8005088 <HAL_ADC_Start_DMA+0x190>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d008      	beq.n	8004f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b05      	cmp	r3, #5
 8004f62:	d002      	beq.n	8004f6a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d17a      	bne.n	8005060 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fcf6 	bl	800595c <ADC_Enable>
 8004f70:	4603      	mov	r3, r0
 8004f72:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f74:	7dfb      	ldrb	r3, [r7, #23]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d16d      	bne.n	8005056 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f7e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004f82:	f023 0301 	bic.w	r3, r3, #1
 8004f86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3a      	ldr	r2, [pc, #232]	@ (800507c <HAL_ADC_Start_DMA+0x184>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d009      	beq.n	8004fac <HAL_ADC_Start_DMA+0xb4>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3b      	ldr	r2, [pc, #236]	@ (800508c <HAL_ADC_Start_DMA+0x194>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d002      	beq.n	8004fa8 <HAL_ADC_Start_DMA+0xb0>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	e003      	b.n	8004fb0 <HAL_ADC_Start_DMA+0xb8>
 8004fa8:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <HAL_ADC_Start_DMA+0x198>)
 8004faa:	e001      	b.n	8004fb0 <HAL_ADC_Start_DMA+0xb8>
 8004fac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	6812      	ldr	r2, [r2, #0]
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d002      	beq.n	8004fbe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d105      	bne.n	8004fca <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fc2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fda:	f023 0206 	bic.w	r2, r3, #6
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	661a      	str	r2, [r3, #96]	@ 0x60
 8004fe2:	e002      	b.n	8004fea <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fee:	4a29      	ldr	r2, [pc, #164]	@ (8005094 <HAL_ADC_Start_DMA+0x19c>)
 8004ff0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ff6:	4a28      	ldr	r2, [pc, #160]	@ (8005098 <HAL_ADC_Start_DMA+0x1a0>)
 8004ff8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ffe:	4a27      	ldr	r2, [pc, #156]	@ (800509c <HAL_ADC_Start_DMA+0x1a4>)
 8005000:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	221c      	movs	r2, #28
 8005008:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0210 	orr.w	r2, r2, #16
 8005020:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	3340      	adds	r3, #64	@ 0x40
 800503c:	4619      	mov	r1, r3
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f001 f989 	bl	8006358 <HAL_DMA_Start_IT>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff fd5c 	bl	8004b0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005054:	e00d      	b.n	8005072 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800505e:	e008      	b.n	8005072 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800506c:	e001      	b.n	8005072 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800506e:	2302      	movs	r3, #2
 8005070:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005072:	7dfb      	ldrb	r3, [r7, #23]
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	50000100 	.word	0x50000100
 8005080:	50000300 	.word	0x50000300
 8005084:	50000700 	.word	0x50000700
 8005088:	50000600 	.word	0x50000600
 800508c:	50000500 	.word	0x50000500
 8005090:	50000400 	.word	0x50000400
 8005094:	08005b47 	.word	0x08005b47
 8005098:	08005c1f 	.word	0x08005c1f
 800509c:	08005c3b 	.word	0x08005c3b

080050a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b0b6      	sub	sp, #216	@ 0xd8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d102      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x24>
 80050fa:	2302      	movs	r3, #2
 80050fc:	f000 bc13 	b.w	8005926 <HAL_ADC_ConfigChannel+0x84a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f7ff fd11 	bl	8004b34 <LL_ADC_REG_IsConversionOngoing>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 83f3 	bne.w	8005900 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	f7ff fbcb 	bl	80048c2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fcff 	bl	8004b34 <LL_ADC_REG_IsConversionOngoing>
 8005136:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4618      	mov	r0, r3
 8005140:	f7ff fd0b 	bl	8004b5a <LL_ADC_INJ_IsConversionOngoing>
 8005144:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005148:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800514c:	2b00      	cmp	r3, #0
 800514e:	f040 81d9 	bne.w	8005504 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005156:	2b00      	cmp	r3, #0
 8005158:	f040 81d4 	bne.w	8005504 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005164:	d10f      	bne.n	8005186 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2200      	movs	r2, #0
 8005170:	4619      	mov	r1, r3
 8005172:	f7ff fbd2 	bl	800491a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fb79 	bl	8004876 <LL_ADC_SetSamplingTimeCommonConfig>
 8005184:	e00e      	b.n	80051a4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6819      	ldr	r1, [r3, #0]
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	461a      	mov	r2, r3
 8005194:	f7ff fbc1 	bl	800491a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2100      	movs	r1, #0
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fb69 	bl	8004876 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695a      	ldr	r2, [r3, #20]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	08db      	lsrs	r3, r3, #3
 80051b0:	f003 0303 	and.w	r3, r3, #3
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d022      	beq.n	800520c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6919      	ldr	r1, [r3, #16]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80051d6:	f7ff fac3 	bl	8004760 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	6919      	ldr	r1, [r3, #16]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f7ff fb0f 	bl	800480a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6818      	ldr	r0, [r3, #0]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d102      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x126>
 80051fc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005200:	e000      	b.n	8005204 <HAL_ADC_ConfigChannel+0x128>
 8005202:	2300      	movs	r3, #0
 8005204:	461a      	mov	r2, r3
 8005206:	f7ff fb1b 	bl	8004840 <LL_ADC_SetOffsetSaturation>
 800520a:	e17b      	b.n	8005504 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2100      	movs	r1, #0
 8005212:	4618      	mov	r0, r3
 8005214:	f7ff fac8 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 8005218:	4603      	mov	r3, r0
 800521a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10a      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x15c>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2100      	movs	r1, #0
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fabd 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 800522e:	4603      	mov	r3, r0
 8005230:	0e9b      	lsrs	r3, r3, #26
 8005232:	f003 021f 	and.w	r2, r3, #31
 8005236:	e01e      	b.n	8005276 <HAL_ADC_ConfigChannel+0x19a>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fab2 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 8005244:	4603      	mov	r3, r0
 8005246:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800524a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800524e:	fa93 f3a3 	rbit	r3, r3
 8005252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800525a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800525e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005266:	2320      	movs	r3, #32
 8005268:	e004      	b.n	8005274 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800526a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800526e:	fab3 f383 	clz	r3, r3
 8005272:	b2db      	uxtb	r3, r3
 8005274:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <HAL_ADC_ConfigChannel+0x1b2>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	e018      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x1e4>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800529a:	fa93 f3a3 	rbit	r3, r3
 800529e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80052a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80052aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d101      	bne.n	80052b6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80052b2:	2320      	movs	r3, #32
 80052b4:	e004      	b.n	80052c0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80052b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052ba:	fab3 f383 	clz	r3, r3
 80052be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d106      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2100      	movs	r1, #0
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff fa81 	bl	80047d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2101      	movs	r1, #1
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff fa65 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 80052de:	4603      	mov	r3, r0
 80052e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x222>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fa5a 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 80052f4:	4603      	mov	r3, r0
 80052f6:	0e9b      	lsrs	r3, r3, #26
 80052f8:	f003 021f 	and.w	r2, r3, #31
 80052fc:	e01e      	b.n	800533c <HAL_ADC_ConfigChannel+0x260>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fa4f 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005314:	fa93 f3a3 	rbit	r3, r3
 8005318:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800531c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005320:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005324:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800532c:	2320      	movs	r3, #32
 800532e:	e004      	b.n	800533a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005330:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005334:	fab3 f383 	clz	r3, r3
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005344:	2b00      	cmp	r3, #0
 8005346:	d105      	bne.n	8005354 <HAL_ADC_ConfigChannel+0x278>
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	0e9b      	lsrs	r3, r3, #26
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	e018      	b.n	8005386 <HAL_ADC_ConfigChannel+0x2aa>
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005360:	fa93 f3a3 	rbit	r3, r3
 8005364:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005368:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800536c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005370:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005378:	2320      	movs	r3, #32
 800537a:	e004      	b.n	8005386 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800537c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005380:	fab3 f383 	clz	r3, r3
 8005384:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005386:	429a      	cmp	r2, r3
 8005388:	d106      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2200      	movs	r2, #0
 8005390:	2101      	movs	r1, #1
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff fa1e 	bl	80047d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2102      	movs	r1, #2
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff fa02 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x2e8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2102      	movs	r1, #2
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff f9f7 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 80053ba:	4603      	mov	r3, r0
 80053bc:	0e9b      	lsrs	r3, r3, #26
 80053be:	f003 021f 	and.w	r2, r3, #31
 80053c2:	e01e      	b.n	8005402 <HAL_ADC_ConfigChannel+0x326>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff f9ec 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053da:	fa93 f3a3 	rbit	r3, r3
 80053de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80053e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80053ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80053f2:	2320      	movs	r3, #32
 80053f4:	e004      	b.n	8005400 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80053f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80053fa:	fab3 f383 	clz	r3, r3
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800540a:	2b00      	cmp	r3, #0
 800540c:	d105      	bne.n	800541a <HAL_ADC_ConfigChannel+0x33e>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	0e9b      	lsrs	r3, r3, #26
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	e016      	b.n	8005448 <HAL_ADC_ConfigChannel+0x36c>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005422:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800542c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800542e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005432:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800543a:	2320      	movs	r3, #32
 800543c:	e004      	b.n	8005448 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800543e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005442:	fab3 f383 	clz	r3, r3
 8005446:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005448:	429a      	cmp	r2, r3
 800544a:	d106      	bne.n	800545a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2200      	movs	r2, #0
 8005452:	2102      	movs	r1, #2
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff f9bd 	bl	80047d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2103      	movs	r1, #3
 8005460:	4618      	mov	r0, r3
 8005462:	f7ff f9a1 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 8005466:	4603      	mov	r3, r0
 8005468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x3aa>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2103      	movs	r1, #3
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff f996 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 800547c:	4603      	mov	r3, r0
 800547e:	0e9b      	lsrs	r3, r3, #26
 8005480:	f003 021f 	and.w	r2, r3, #31
 8005484:	e017      	b.n	80054b6 <HAL_ADC_ConfigChannel+0x3da>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2103      	movs	r1, #3
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff f98b 	bl	80047a8 <LL_ADC_GetOffsetChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005496:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005498:	fa93 f3a3 	rbit	r3, r3
 800549c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800549e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80054a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d101      	bne.n	80054ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80054a8:	2320      	movs	r3, #32
 80054aa:	e003      	b.n	80054b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054ae:	fab3 f383 	clz	r3, r3
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d105      	bne.n	80054ce <HAL_ADC_ConfigChannel+0x3f2>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	0e9b      	lsrs	r3, r3, #26
 80054c8:	f003 031f 	and.w	r3, r3, #31
 80054cc:	e011      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x416>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054d6:	fa93 f3a3 	rbit	r3, r3
 80054da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80054dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80054e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80054e6:	2320      	movs	r3, #32
 80054e8:	e003      	b.n	80054f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80054ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d106      	bne.n	8005504 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	2103      	movs	r1, #3
 80054fe:	4618      	mov	r0, r3
 8005500:	f7ff f968 	bl	80047d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fad9 	bl	8004ac0 <LL_ADC_IsEnabled>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	f040 813d 	bne.w	8005790 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	461a      	mov	r2, r3
 8005524:	f7ff fa24 	bl	8004970 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	4aa2      	ldr	r2, [pc, #648]	@ (80057b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800552e:	4293      	cmp	r3, r2
 8005530:	f040 812e 	bne.w	8005790 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10b      	bne.n	800555c <HAL_ADC_ConfigChannel+0x480>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0e9b      	lsrs	r3, r3, #26
 800554a:	3301      	adds	r3, #1
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2b09      	cmp	r3, #9
 8005552:	bf94      	ite	ls
 8005554:	2301      	movls	r3, #1
 8005556:	2300      	movhi	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e019      	b.n	8005590 <HAL_ADC_ConfigChannel+0x4b4>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005564:	fa93 f3a3 	rbit	r3, r3
 8005568:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800556a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800556c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800556e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005574:	2320      	movs	r3, #32
 8005576:	e003      	b.n	8005580 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005578:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800557a:	fab3 f383 	clz	r3, r3
 800557e:	b2db      	uxtb	r3, r3
 8005580:	3301      	adds	r3, #1
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2b09      	cmp	r3, #9
 8005588:	bf94      	ite	ls
 800558a:	2301      	movls	r3, #1
 800558c:	2300      	movhi	r3, #0
 800558e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005590:	2b00      	cmp	r3, #0
 8005592:	d079      	beq.n	8005688 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	2b00      	cmp	r3, #0
 800559e:	d107      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x4d4>
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	0e9b      	lsrs	r3, r3, #26
 80055a6:	3301      	adds	r3, #1
 80055a8:	069b      	lsls	r3, r3, #26
 80055aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055ae:	e015      	b.n	80055dc <HAL_ADC_ConfigChannel+0x500>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80055be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80055c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80055cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	069b      	lsls	r3, r3, #26
 80055d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d109      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x520>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	0e9b      	lsrs	r3, r3, #26
 80055ee:	3301      	adds	r3, #1
 80055f0:	f003 031f 	and.w	r3, r3, #31
 80055f4:	2101      	movs	r1, #1
 80055f6:	fa01 f303 	lsl.w	r3, r1, r3
 80055fa:	e017      	b.n	800562c <HAL_ADC_ConfigChannel+0x550>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005604:	fa93 f3a3 	rbit	r3, r3
 8005608:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800560a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800560c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800560e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005614:	2320      	movs	r3, #32
 8005616:	e003      	b.n	8005620 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800561a:	fab3 f383 	clz	r3, r3
 800561e:	b2db      	uxtb	r3, r3
 8005620:	3301      	adds	r3, #1
 8005622:	f003 031f 	and.w	r3, r3, #31
 8005626:	2101      	movs	r1, #1
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	ea42 0103 	orr.w	r1, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10a      	bne.n	8005652 <HAL_ADC_ConfigChannel+0x576>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	0e9b      	lsrs	r3, r3, #26
 8005642:	3301      	adds	r3, #1
 8005644:	f003 021f 	and.w	r2, r3, #31
 8005648:	4613      	mov	r3, r2
 800564a:	005b      	lsls	r3, r3, #1
 800564c:	4413      	add	r3, r2
 800564e:	051b      	lsls	r3, r3, #20
 8005650:	e018      	b.n	8005684 <HAL_ADC_ConfigChannel+0x5a8>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800566a:	2320      	movs	r3, #32
 800566c:	e003      	b.n	8005676 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800566e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005670:	fab3 f383 	clz	r3, r3
 8005674:	b2db      	uxtb	r3, r3
 8005676:	3301      	adds	r3, #1
 8005678:	f003 021f 	and.w	r2, r3, #31
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	430b      	orrs	r3, r1
 8005686:	e07e      	b.n	8005786 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005690:	2b00      	cmp	r3, #0
 8005692:	d107      	bne.n	80056a4 <HAL_ADC_ConfigChannel+0x5c8>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	0e9b      	lsrs	r3, r3, #26
 800569a:	3301      	adds	r3, #1
 800569c:	069b      	lsls	r3, r3, #26
 800569e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056a2:	e015      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x5f4>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ac:	fa93 f3a3 	rbit	r3, r3
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80056b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80056bc:	2320      	movs	r3, #32
 80056be:	e003      	b.n	80056c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80056c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c2:	fab3 f383 	clz	r3, r3
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	3301      	adds	r3, #1
 80056ca:	069b      	lsls	r3, r3, #26
 80056cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <HAL_ADC_ConfigChannel+0x614>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	0e9b      	lsrs	r3, r3, #26
 80056e2:	3301      	adds	r3, #1
 80056e4:	f003 031f 	and.w	r3, r3, #31
 80056e8:	2101      	movs	r1, #1
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	e017      	b.n	8005720 <HAL_ADC_ConfigChannel+0x644>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	fa93 f3a3 	rbit	r3, r3
 80056fc:	61fb      	str	r3, [r7, #28]
  return result;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005708:	2320      	movs	r3, #32
 800570a:	e003      	b.n	8005714 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	fab3 f383 	clz	r3, r3
 8005712:	b2db      	uxtb	r3, r3
 8005714:	3301      	adds	r3, #1
 8005716:	f003 031f 	and.w	r3, r3, #31
 800571a:	2101      	movs	r1, #1
 800571c:	fa01 f303 	lsl.w	r3, r1, r3
 8005720:	ea42 0103 	orr.w	r1, r2, r3
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10d      	bne.n	800574c <HAL_ADC_ConfigChannel+0x670>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	0e9b      	lsrs	r3, r3, #26
 8005736:	3301      	adds	r3, #1
 8005738:	f003 021f 	and.w	r2, r3, #31
 800573c:	4613      	mov	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	4413      	add	r3, r2
 8005742:	3b1e      	subs	r3, #30
 8005744:	051b      	lsls	r3, r3, #20
 8005746:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800574a:	e01b      	b.n	8005784 <HAL_ADC_ConfigChannel+0x6a8>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	613b      	str	r3, [r7, #16]
  return result;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3301      	adds	r3, #1
 8005772:	f003 021f 	and.w	r2, r3, #31
 8005776:	4613      	mov	r3, r2
 8005778:	005b      	lsls	r3, r3, #1
 800577a:	4413      	add	r3, r2
 800577c:	3b1e      	subs	r3, #30
 800577e:	051b      	lsls	r3, r3, #20
 8005780:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005784:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800578a:	4619      	mov	r1, r3
 800578c:	f7ff f8c5 	bl	800491a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b09      	ldr	r3, [pc, #36]	@ (80057bc <HAL_ADC_ConfigChannel+0x6e0>)
 8005796:	4013      	ands	r3, r2
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80be 	beq.w	800591a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a6:	d004      	beq.n	80057b2 <HAL_ADC_ConfigChannel+0x6d6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a04      	ldr	r2, [pc, #16]	@ (80057c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d10a      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x6ec>
 80057b2:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80057b4:	e009      	b.n	80057ca <HAL_ADC_ConfigChannel+0x6ee>
 80057b6:	bf00      	nop
 80057b8:	407f0000 	.word	0x407f0000
 80057bc:	80080000 	.word	0x80080000
 80057c0:	50000100 	.word	0x50000100
 80057c4:	50000300 	.word	0x50000300
 80057c8:	4b59      	ldr	r3, [pc, #356]	@ (8005930 <HAL_ADC_ConfigChannel+0x854>)
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7fe ffba 	bl	8004744 <LL_ADC_GetCommonPathInternalCh>
 80057d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a56      	ldr	r2, [pc, #344]	@ (8005934 <HAL_ADC_ConfigChannel+0x858>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_ADC_ConfigChannel+0x70c>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a55      	ldr	r2, [pc, #340]	@ (8005938 <HAL_ADC_ConfigChannel+0x85c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d13a      	bne.n	800585e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80057e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80057ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d134      	bne.n	800585e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057fc:	d005      	beq.n	800580a <HAL_ADC_ConfigChannel+0x72e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a4e      	ldr	r2, [pc, #312]	@ (800593c <HAL_ADC_ConfigChannel+0x860>)
 8005804:	4293      	cmp	r3, r2
 8005806:	f040 8085 	bne.w	8005914 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005812:	d004      	beq.n	800581e <HAL_ADC_ConfigChannel+0x742>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a49      	ldr	r2, [pc, #292]	@ (8005940 <HAL_ADC_ConfigChannel+0x864>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d101      	bne.n	8005822 <HAL_ADC_ConfigChannel+0x746>
 800581e:	4a49      	ldr	r2, [pc, #292]	@ (8005944 <HAL_ADC_ConfigChannel+0x868>)
 8005820:	e000      	b.n	8005824 <HAL_ADC_ConfigChannel+0x748>
 8005822:	4a43      	ldr	r2, [pc, #268]	@ (8005930 <HAL_ADC_ConfigChannel+0x854>)
 8005824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005828:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7fe ff75 	bl	800471e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005834:	4b44      	ldr	r3, [pc, #272]	@ (8005948 <HAL_ADC_ConfigChannel+0x86c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	4a44      	ldr	r2, [pc, #272]	@ (800594c <HAL_ADC_ConfigChannel+0x870>)
 800583c:	fba2 2303 	umull	r2, r3, r2, r3
 8005840:	099b      	lsrs	r3, r3, #6
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	4613      	mov	r3, r2
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	4413      	add	r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800584e:	e002      	b.n	8005856 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b01      	subs	r3, #1
 8005854:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f9      	bne.n	8005850 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800585c:	e05a      	b.n	8005914 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a3b      	ldr	r2, [pc, #236]	@ (8005950 <HAL_ADC_ConfigChannel+0x874>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d125      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005868:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800586c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11f      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a31      	ldr	r2, [pc, #196]	@ (8005940 <HAL_ADC_ConfigChannel+0x864>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d104      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x7ac>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a34      	ldr	r2, [pc, #208]	@ (8005954 <HAL_ADC_ConfigChannel+0x878>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d047      	beq.n	8005918 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005890:	d004      	beq.n	800589c <HAL_ADC_ConfigChannel+0x7c0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <HAL_ADC_ConfigChannel+0x864>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <HAL_ADC_ConfigChannel+0x7c4>
 800589c:	4a29      	ldr	r2, [pc, #164]	@ (8005944 <HAL_ADC_ConfigChannel+0x868>)
 800589e:	e000      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x7c6>
 80058a0:	4a23      	ldr	r2, [pc, #140]	@ (8005930 <HAL_ADC_ConfigChannel+0x854>)
 80058a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe ff36 	bl	800471e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058b2:	e031      	b.n	8005918 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a27      	ldr	r2, [pc, #156]	@ (8005958 <HAL_ADC_ConfigChannel+0x87c>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12d      	bne.n	800591a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d127      	bne.n	800591a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005940 <HAL_ADC_ConfigChannel+0x864>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058dc:	d004      	beq.n	80058e8 <HAL_ADC_ConfigChannel+0x80c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a17      	ldr	r2, [pc, #92]	@ (8005940 <HAL_ADC_ConfigChannel+0x864>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_ADC_ConfigChannel+0x810>
 80058e8:	4a16      	ldr	r2, [pc, #88]	@ (8005944 <HAL_ADC_ConfigChannel+0x868>)
 80058ea:	e000      	b.n	80058ee <HAL_ADC_ConfigChannel+0x812>
 80058ec:	4a10      	ldr	r2, [pc, #64]	@ (8005930 <HAL_ADC_ConfigChannel+0x854>)
 80058ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe ff10 	bl	800471e <LL_ADC_SetCommonPathInternalCh>
 80058fe:	e00c      	b.n	800591a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005904:	f043 0220 	orr.w	r2, r3, #32
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005912:	e002      	b.n	800591a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005922:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005926:	4618      	mov	r0, r3
 8005928:	37d8      	adds	r7, #216	@ 0xd8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	50000700 	.word	0x50000700
 8005934:	c3210000 	.word	0xc3210000
 8005938:	90c00010 	.word	0x90c00010
 800593c:	50000600 	.word	0x50000600
 8005940:	50000100 	.word	0x50000100
 8005944:	50000300 	.word	0x50000300
 8005948:	20000158 	.word	0x20000158
 800594c:	053e2d63 	.word	0x053e2d63
 8005950:	c7520000 	.word	0xc7520000
 8005954:	50000500 	.word	0x50000500
 8005958:	cb840000 	.word	0xcb840000

0800595c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005964:	2300      	movs	r3, #0
 8005966:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff f8a7 	bl	8004ac0 <LL_ADC_IsEnabled>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d176      	bne.n	8005a66 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	689a      	ldr	r2, [r3, #8]
 800597e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a70 <ADC_Enable+0x114>)
 8005980:	4013      	ands	r3, r2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00d      	beq.n	80059a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800598a:	f043 0210 	orr.w	r2, r3, #16
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	f043 0201 	orr.w	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e062      	b.n	8005a68 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7ff f862 	bl	8004a70 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059b4:	d004      	beq.n	80059c0 <ADC_Enable+0x64>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005a74 <ADC_Enable+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d101      	bne.n	80059c4 <ADC_Enable+0x68>
 80059c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005a78 <ADC_Enable+0x11c>)
 80059c2:	e000      	b.n	80059c6 <ADC_Enable+0x6a>
 80059c4:	4b2d      	ldr	r3, [pc, #180]	@ (8005a7c <ADC_Enable+0x120>)
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe febc 	bl	8004744 <LL_ADC_GetCommonPathInternalCh>
 80059cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d013      	beq.n	80059fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80059d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005a80 <ADC_Enable+0x124>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	099b      	lsrs	r3, r3, #6
 80059dc:	4a29      	ldr	r2, [pc, #164]	@ (8005a84 <ADC_Enable+0x128>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	099b      	lsrs	r3, r3, #6
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	4613      	mov	r3, r2
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059f0:	e002      	b.n	80059f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f9      	bne.n	80059f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80059fe:	f7fe fe6f 	bl	80046e0 <HAL_GetTick>
 8005a02:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a04:	e028      	b.n	8005a58 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff f858 	bl	8004ac0 <LL_ADC_IsEnabled>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d104      	bne.n	8005a20 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7ff f828 	bl	8004a70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a20:	f7fe fe5e 	bl	80046e0 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d914      	bls.n	8005a58 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d00d      	beq.n	8005a58 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	f043 0210 	orr.w	r2, r3, #16
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e007      	b.n	8005a68 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d1cf      	bne.n	8005a06 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	8000003f 	.word	0x8000003f
 8005a74:	50000100 	.word	0x50000100
 8005a78:	50000300 	.word	0x50000300
 8005a7c:	50000700 	.word	0x50000700
 8005a80:	20000158 	.word	0x20000158
 8005a84:	053e2d63 	.word	0x053e2d63

08005a88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff f826 	bl	8004ae6 <LL_ADC_IsDisableOngoing>
 8005a9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff f80d 	bl	8004ac0 <LL_ADC_IsEnabled>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d047      	beq.n	8005b3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d144      	bne.n	8005b3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	f003 030d 	and.w	r3, r3, #13
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10c      	bne.n	8005ada <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe ffe7 	bl	8004a98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2203      	movs	r2, #3
 8005ad0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005ad2:	f7fe fe05 	bl	80046e0 <HAL_GetTick>
 8005ad6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005ad8:	e029      	b.n	8005b2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ade:	f043 0210 	orr.w	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aea:	f043 0201 	orr.w	r2, r3, #1
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e023      	b.n	8005b3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005af6:	f7fe fdf3 	bl	80046e0 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d914      	bls.n	8005b2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00d      	beq.n	8005b2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b16:	f043 0210 	orr.w	r2, r3, #16
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b22:	f043 0201 	orr.w	r2, r3, #1
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e007      	b.n	8005b3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1dc      	bne.n	8005af6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d14b      	bne.n	8005bf8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b64:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d021      	beq.n	8005bbe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7fe fe8c 	bl	800489c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d032      	beq.n	8005bf0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d12b      	bne.n	8005bf0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d11f      	bne.n	8005bf0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb4:	f043 0201 	orr.w	r2, r3, #1
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bbc:	e018      	b.n	8005bf0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f003 0302 	and.w	r3, r3, #2
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d111      	bne.n	8005bf0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d105      	bne.n	8005bf0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fa55 	bl	80050a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005bf6:	e00e      	b.n	8005c16 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	f003 0310 	and.w	r3, r3, #16
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f7ff fa5f 	bl	80050c8 <HAL_ADC_ErrorCallback>
}
 8005c0a:	e004      	b.n	8005c16 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	4798      	blx	r3
}
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff fa41 	bl	80050b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c32:	bf00      	nop
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c58:	f043 0204 	orr.w	r2, r3, #4
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f7ff fa31 	bl	80050c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c66:	bf00      	nop
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <LL_ADC_IsEnabled>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d101      	bne.n	8005c86 <LL_ADC_IsEnabled+0x18>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <LL_ADC_IsEnabled+0x1a>
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <LL_ADC_StartCalibration>:
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005ca6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	609a      	str	r2, [r3, #8]
}
 8005cba:	bf00      	nop
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <LL_ADC_IsCalibrationOnGoing>:
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cda:	d101      	bne.n	8005ce0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <LL_ADC_REG_IsConversionOngoing>:
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d101      	bne.n	8005d06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d02:	2301      	movs	r3, #1
 8005d04:	e000      	b.n	8005d08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_ADCEx_Calibration_Start+0x1c>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e04d      	b.n	8005dcc <HAL_ADCEx_Calibration_Start+0xb8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fea5 	bl	8005a88 <ADC_Disable>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d42:	7bfb      	ldrb	r3, [r7, #15]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d136      	bne.n	8005db6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d50:	f023 0302 	bic.w	r3, r3, #2
 8005d54:	f043 0202 	orr.w	r2, r3, #2
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ff96 	bl	8005c94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d68:	e014      	b.n	8005d94 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4a18      	ldr	r2, [pc, #96]	@ (8005dd4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d90d      	bls.n	8005d94 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d7c:	f023 0312 	bic.w	r3, r3, #18
 8005d80:	f043 0210 	orr.w	r2, r3, #16
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e01b      	b.n	8005dcc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff ff94 	bl	8005cc6 <LL_ADC_IsCalibrationOnGoing>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e2      	bne.n	8005d6a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da8:	f023 0303 	bic.w	r3, r3, #3
 8005dac:	f043 0201 	orr.w	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005db4:	e005      	b.n	8005dc2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dba:	f043 0210 	orr.w	r2, r3, #16
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	0004de01 	.word	0x0004de01

08005dd8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005dd8:	b590      	push	{r4, r7, lr}
 8005dda:	b0a1      	sub	sp, #132	@ 0x84
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e0e7      	b.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e02:	2300      	movs	r3, #0
 8005e04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e0e:	d102      	bne.n	8005e16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e10:	4b6f      	ldr	r3, [pc, #444]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e12:	60bb      	str	r3, [r7, #8]
 8005e14:	e009      	b.n	8005e2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d102      	bne.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005e20:	4b6d      	ldr	r3, [pc, #436]	@ (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e22:	60bb      	str	r3, [r7, #8]
 8005e24:	e001      	b.n	8005e2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e26:	2300      	movs	r3, #0
 8005e28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e34:	f043 0220 	orr.w	r2, r3, #32
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0be      	b.n	8005fc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff ff4f 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8005e50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff ff49 	bl	8005cee <LL_ADC_REG_IsConversionOngoing>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 80a0 	bne.w	8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 809c 	bne.w	8005fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e74:	d004      	beq.n	8005e80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a55      	ldr	r2, [pc, #340]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d101      	bne.n	8005e84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005e80:	4b56      	ldr	r3, [pc, #344]	@ (8005fdc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005e82:	e000      	b.n	8005e86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005e84:	4b56      	ldr	r3, [pc, #344]	@ (8005fe0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005e86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d04b      	beq.n	8005f28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	6859      	ldr	r1, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ea2:	035b      	lsls	r3, r3, #13
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb4:	d004      	beq.n	8005ec0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a45      	ldr	r2, [pc, #276]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d10f      	bne.n	8005ee0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005ec0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ec4:	f7ff fed3 	bl	8005c6e <LL_ADC_IsEnabled>
 8005ec8:	4604      	mov	r4, r0
 8005eca:	4841      	ldr	r0, [pc, #260]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ecc:	f7ff fecf 	bl	8005c6e <LL_ADC_IsEnabled>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4323      	orrs	r3, r4
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	bf0c      	ite	eq
 8005ed8:	2301      	moveq	r3, #1
 8005eda:	2300      	movne	r3, #0
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	e012      	b.n	8005f06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005ee0:	483c      	ldr	r0, [pc, #240]	@ (8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ee2:	f7ff fec4 	bl	8005c6e <LL_ADC_IsEnabled>
 8005ee6:	4604      	mov	r4, r0
 8005ee8:	483b      	ldr	r0, [pc, #236]	@ (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005eea:	f7ff fec0 	bl	8005c6e <LL_ADC_IsEnabled>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	431c      	orrs	r4, r3
 8005ef2:	483c      	ldr	r0, [pc, #240]	@ (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005ef4:	f7ff febb 	bl	8005c6e <LL_ADC_IsEnabled>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	4323      	orrs	r3, r4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bf0c      	ite	eq
 8005f00:	2301      	moveq	r3, #1
 8005f02:	2300      	movne	r3, #0
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d056      	beq.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	683a      	ldr	r2, [r7, #0]
 8005f18:	6811      	ldr	r1, [r2, #0]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	6892      	ldr	r2, [r2, #8]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	431a      	orrs	r2, r3
 8005f22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f26:	e047      	b.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f3c:	d004      	beq.n	8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a23      	ldr	r2, [pc, #140]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d10f      	bne.n	8005f68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005f48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f4c:	f7ff fe8f 	bl	8005c6e <LL_ADC_IsEnabled>
 8005f50:	4604      	mov	r4, r0
 8005f52:	481f      	ldr	r0, [pc, #124]	@ (8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f54:	f7ff fe8b 	bl	8005c6e <LL_ADC_IsEnabled>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	4323      	orrs	r3, r4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	bf0c      	ite	eq
 8005f60:	2301      	moveq	r3, #1
 8005f62:	2300      	movne	r3, #0
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	e012      	b.n	8005f8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005f68:	481a      	ldr	r0, [pc, #104]	@ (8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f6a:	f7ff fe80 	bl	8005c6e <LL_ADC_IsEnabled>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4819      	ldr	r0, [pc, #100]	@ (8005fd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f72:	f7ff fe7c 	bl	8005c6e <LL_ADC_IsEnabled>
 8005f76:	4603      	mov	r3, r0
 8005f78:	431c      	orrs	r4, r3
 8005f7a:	481a      	ldr	r0, [pc, #104]	@ (8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f7c:	f7ff fe77 	bl	8005c6e <LL_ADC_IsEnabled>
 8005f80:	4603      	mov	r3, r0
 8005f82:	4323      	orrs	r3, r4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d012      	beq.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005f92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f9a:	f023 030f 	bic.w	r3, r3, #15
 8005f9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005fa0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fa2:	e009      	b.n	8005fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005fb6:	e000      	b.n	8005fba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005fc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3784      	adds	r7, #132	@ 0x84
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd90      	pop	{r4, r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	50000100 	.word	0x50000100
 8005fd4:	50000400 	.word	0x50000400
 8005fd8:	50000500 	.word	0x50000500
 8005fdc:	50000300 	.word	0x50000300
 8005fe0:	50000700 	.word	0x50000700
 8005fe4:	50000600 	.word	0x50000600

08005fe8 <__NVIC_SetPriorityGrouping>:
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <__NVIC_SetPriorityGrouping+0x44>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006004:	4013      	ands	r3, r2
 8006006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800601a:	4a04      	ldr	r2, [pc, #16]	@ (800602c <__NVIC_SetPriorityGrouping+0x44>)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	60d3      	str	r3, [r2, #12]
}
 8006020:	bf00      	nop
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	e000ed00 	.word	0xe000ed00

08006030 <__NVIC_GetPriorityGrouping>:
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__NVIC_GetPriorityGrouping+0x18>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	f003 0307 	and.w	r3, r3, #7
}
 800603e:	4618      	mov	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr
 8006048:	e000ed00 	.word	0xe000ed00

0800604c <__NVIC_EnableIRQ>:
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	2b00      	cmp	r3, #0
 800605c:	db0b      	blt.n	8006076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800605e:	79fb      	ldrb	r3, [r7, #7]
 8006060:	f003 021f 	and.w	r2, r3, #31
 8006064:	4907      	ldr	r1, [pc, #28]	@ (8006084 <__NVIC_EnableIRQ+0x38>)
 8006066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606a:	095b      	lsrs	r3, r3, #5
 800606c:	2001      	movs	r0, #1
 800606e:	fa00 f202 	lsl.w	r2, r0, r2
 8006072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	e000e100 	.word	0xe000e100

08006088 <__NVIC_SetPriority>:
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	db0a      	blt.n	80060b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	490c      	ldr	r1, [pc, #48]	@ (80060d4 <__NVIC_SetPriority+0x4c>)
 80060a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	440b      	add	r3, r1
 80060ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80060b0:	e00a      	b.n	80060c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	4908      	ldr	r1, [pc, #32]	@ (80060d8 <__NVIC_SetPriority+0x50>)
 80060b8:	79fb      	ldrb	r3, [r7, #7]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	3b04      	subs	r3, #4
 80060c0:	0112      	lsls	r2, r2, #4
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	440b      	add	r3, r1
 80060c6:	761a      	strb	r2, [r3, #24]
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr
 80060d4:	e000e100 	.word	0xe000e100
 80060d8:	e000ed00 	.word	0xe000ed00

080060dc <NVIC_EncodePriority>:
{
 80060dc:	b480      	push	{r7}
 80060de:	b089      	sub	sp, #36	@ 0x24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f003 0307 	and.w	r3, r3, #7
 80060ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f1c3 0307 	rsb	r3, r3, #7
 80060f6:	2b04      	cmp	r3, #4
 80060f8:	bf28      	it	cs
 80060fa:	2304      	movcs	r3, #4
 80060fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	3304      	adds	r3, #4
 8006102:	2b06      	cmp	r3, #6
 8006104:	d902      	bls.n	800610c <NVIC_EncodePriority+0x30>
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	3b03      	subs	r3, #3
 800610a:	e000      	b.n	800610e <NVIC_EncodePriority+0x32>
 800610c:	2300      	movs	r3, #0
 800610e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43da      	mvns	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	401a      	ands	r2, r3
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006124:	f04f 31ff 	mov.w	r1, #4294967295
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	43d9      	mvns	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006134:	4313      	orrs	r3, r2
}
 8006136:	4618      	mov	r0, r3
 8006138:	3724      	adds	r7, #36	@ 0x24
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
	...

08006144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3b01      	subs	r3, #1
 8006150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006154:	d301      	bcc.n	800615a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006156:	2301      	movs	r3, #1
 8006158:	e00f      	b.n	800617a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800615a:	4a0a      	ldr	r2, [pc, #40]	@ (8006184 <SysTick_Config+0x40>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3b01      	subs	r3, #1
 8006160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006162:	210f      	movs	r1, #15
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	f7ff ff8e 	bl	8006088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <SysTick_Config+0x40>)
 800616e:	2200      	movs	r2, #0
 8006170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006172:	4b04      	ldr	r3, [pc, #16]	@ (8006184 <SysTick_Config+0x40>)
 8006174:	2207      	movs	r2, #7
 8006176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	e000e010 	.word	0xe000e010

08006188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff29 	bl	8005fe8 <__NVIC_SetPriorityGrouping>
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b086      	sub	sp, #24
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	4603      	mov	r3, r0
 80061a6:	60b9      	str	r1, [r7, #8]
 80061a8:	607a      	str	r2, [r7, #4]
 80061aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80061ac:	f7ff ff40 	bl	8006030 <__NVIC_GetPriorityGrouping>
 80061b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	6978      	ldr	r0, [r7, #20]
 80061b8:	f7ff ff90 	bl	80060dc <NVIC_EncodePriority>
 80061bc:	4602      	mov	r2, r0
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff ff5f 	bl	8006088 <__NVIC_SetPriority>
}
 80061ca:	bf00      	nop
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b082      	sub	sp, #8
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	4603      	mov	r3, r0
 80061da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ff33 	bl	800604c <__NVIC_EnableIRQ>
}
 80061e6:	bf00      	nop
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff ffa4 	bl	8006144 <SysTick_Config>
 80061fc:	4603      	mov	r3, r0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e08d      	b.n	8006336 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	461a      	mov	r2, r3
 8006220:	4b47      	ldr	r3, [pc, #284]	@ (8006340 <HAL_DMA_Init+0x138>)
 8006222:	429a      	cmp	r2, r3
 8006224:	d80f      	bhi.n	8006246 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	461a      	mov	r2, r3
 800622c:	4b45      	ldr	r3, [pc, #276]	@ (8006344 <HAL_DMA_Init+0x13c>)
 800622e:	4413      	add	r3, r2
 8006230:	4a45      	ldr	r2, [pc, #276]	@ (8006348 <HAL_DMA_Init+0x140>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	091b      	lsrs	r3, r3, #4
 8006238:	009a      	lsls	r2, r3, #2
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a42      	ldr	r2, [pc, #264]	@ (800634c <HAL_DMA_Init+0x144>)
 8006242:	641a      	str	r2, [r3, #64]	@ 0x40
 8006244:	e00e      	b.n	8006264 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	4b40      	ldr	r3, [pc, #256]	@ (8006350 <HAL_DMA_Init+0x148>)
 800624e:	4413      	add	r3, r2
 8006250:	4a3d      	ldr	r2, [pc, #244]	@ (8006348 <HAL_DMA_Init+0x140>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	009a      	lsls	r2, r3, #2
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a3c      	ldr	r2, [pc, #240]	@ (8006354 <HAL_DMA_Init+0x14c>)
 8006262:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800627a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800627e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006288:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006294:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa76 	bl	80067a8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c4:	d102      	bne.n	80062cc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d4:	b2d2      	uxtb	r2, r2
 80062d6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80062e0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d010      	beq.n	800630c <HAL_DMA_Init+0x104>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d80c      	bhi.n	800630c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fa96 	bl	8006824 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	e008      	b.n	800631e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40020407 	.word	0x40020407
 8006344:	bffdfff8 	.word	0xbffdfff8
 8006348:	cccccccd 	.word	0xcccccccd
 800634c:	40020000 	.word	0x40020000
 8006350:	bffdfbf8 	.word	0xbffdfbf8
 8006354:	40020400 	.word	0x40020400

08006358 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b086      	sub	sp, #24
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
 8006364:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006366:	2300      	movs	r3, #0
 8006368:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_DMA_Start_IT+0x20>
 8006374:	2302      	movs	r3, #2
 8006376:	e066      	b.n	8006446 <HAL_DMA_Start_IT+0xee>
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	d155      	bne.n	8006438 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f9bb 	bl	800672c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d008      	beq.n	80063d0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 020e 	orr.w	r2, r2, #14
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e00f      	b.n	80063f0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0204 	bic.w	r2, r2, #4
 80063de:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 020a 	orr.w	r2, r2, #10
 80063ee:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800640c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006412:	2b00      	cmp	r3, #0
 8006414:	d007      	beq.n	8006426 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006420:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006424:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e005      	b.n	8006444 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006440:	2302      	movs	r3, #2
 8006442:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3718      	adds	r7, #24
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d005      	beq.n	8006472 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2204      	movs	r2, #4
 800646a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	73fb      	strb	r3, [r7, #15]
 8006470:	e037      	b.n	80064e2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 020e 	bic.w	r2, r2, #14
 8006480:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800648c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006490:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	f003 021f 	and.w	r2, r3, #31
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2101      	movs	r1, #1
 80064b0:	fa01 f202 	lsl.w	r2, r1, r2
 80064b4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064be:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00c      	beq.n	80064e2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064d6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80064e0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d00d      	beq.n	8006534 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
 8006532:	e047      	b.n	80065c4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 020e 	bic.w	r2, r2, #14
 8006542:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800655e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006568:	f003 021f 	and.w	r2, r3, #31
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f202 	lsl.w	r2, r1, r2
 8006576:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006580:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00c      	beq.n	80065a4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006594:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006598:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80065a2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
    }
  }
  return status;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ea:	f003 031f 	and.w	r3, r3, #31
 80065ee:	2204      	movs	r2, #4
 80065f0:	409a      	lsls	r2, r3
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	4013      	ands	r3, r2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d026      	beq.n	8006648 <HAL_DMA_IRQHandler+0x7a>
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f003 0304 	and.w	r3, r3, #4
 8006600:	2b00      	cmp	r3, #0
 8006602:	d021      	beq.n	8006648 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d107      	bne.n	8006622 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0204 	bic.w	r2, r2, #4
 8006620:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	f003 021f 	and.w	r2, r3, #31
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800662e:	2104      	movs	r1, #4
 8006630:	fa01 f202 	lsl.w	r2, r1, r2
 8006634:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	2b00      	cmp	r3, #0
 800663c:	d071      	beq.n	8006722 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006646:	e06c      	b.n	8006722 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800664c:	f003 031f 	and.w	r3, r3, #31
 8006650:	2202      	movs	r2, #2
 8006652:	409a      	lsls	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	4013      	ands	r3, r2
 8006658:	2b00      	cmp	r3, #0
 800665a:	d02e      	beq.n	80066ba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d029      	beq.n	80066ba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 020a 	bic.w	r2, r2, #10
 8006682:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	f003 021f 	and.w	r2, r3, #31
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006698:	2102      	movs	r1, #2
 800669a:	fa01 f202 	lsl.w	r2, r1, r2
 800669e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d038      	beq.n	8006722 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80066b8:	e033      	b.n	8006722 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066be:	f003 031f 	and.w	r3, r3, #31
 80066c2:	2208      	movs	r2, #8
 80066c4:	409a      	lsls	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4013      	ands	r3, r2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02a      	beq.n	8006724 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f003 0308 	and.w	r3, r3, #8
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d025      	beq.n	8006724 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 020e 	bic.w	r2, r2, #14
 80066e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	f003 021f 	and.w	r2, r3, #31
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f4:	2101      	movs	r1, #1
 80066f6:	fa01 f202 	lsl.w	r2, r1, r2
 80066fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006716:	2b00      	cmp	r3, #0
 8006718:	d004      	beq.n	8006724 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006722:	bf00      	nop
 8006724:	bf00      	nop
}
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006742:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006748:	2b00      	cmp	r3, #0
 800674a:	d004      	beq.n	8006756 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006754:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675a:	f003 021f 	and.w	r2, r3, #31
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006762:	2101      	movs	r1, #1
 8006764:	fa01 f202 	lsl.w	r2, r1, r2
 8006768:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	683a      	ldr	r2, [r7, #0]
 8006770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b10      	cmp	r3, #16
 8006778:	d108      	bne.n	800678c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800678a:	e007      	b.n	800679c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68ba      	ldr	r2, [r7, #8]
 8006792:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	60da      	str	r2, [r3, #12]
}
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	4b16      	ldr	r3, [pc, #88]	@ (8006810 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d802      	bhi.n	80067c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80067bc:	4b15      	ldr	r3, [pc, #84]	@ (8006814 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80067be:	617b      	str	r3, [r7, #20]
 80067c0:	e001      	b.n	80067c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80067c2:	4b15      	ldr	r3, [pc, #84]	@ (8006818 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80067c4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	3b08      	subs	r3, #8
 80067d2:	4a12      	ldr	r2, [pc, #72]	@ (800681c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	091b      	lsrs	r3, r3, #4
 80067da:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e0:	089b      	lsrs	r3, r3, #2
 80067e2:	009a      	lsls	r2, r3, #2
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	4413      	add	r3, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006820 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2201      	movs	r2, #1
 80067fc:	409a      	lsls	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	40020407 	.word	0x40020407
 8006814:	40020800 	.word	0x40020800
 8006818:	40020820 	.word	0x40020820
 800681c:	cccccccd 	.word	0xcccccccd
 8006820:	40020880 	.word	0x40020880

08006824 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4b0b      	ldr	r3, [pc, #44]	@ (8006864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	461a      	mov	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006846:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b01      	subs	r3, #1
 800684c:	f003 031f 	and.w	r3, r3, #31
 8006850:	2201      	movs	r2, #1
 8006852:	409a      	lsls	r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	1000823f 	.word	0x1000823f
 8006868:	40020940 	.word	0x40020940

0800686c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800686c:	b480      	push	{r7}
 800686e:	b087      	sub	sp, #28
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006876:	2300      	movs	r3, #0
 8006878:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800687a:	e15a      	b.n	8006b32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	2101      	movs	r1, #1
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	4013      	ands	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 814c 	beq.w	8006b2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b01      	cmp	r3, #1
 800689e:	d005      	beq.n	80068ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d130      	bne.n	800690e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	689b      	ldr	r3, [r3, #8]
 80068b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	2203      	movs	r2, #3
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	43db      	mvns	r3, r3
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4013      	ands	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	005b      	lsls	r3, r3, #1
 80068cc:	fa02 f303 	lsl.w	r3, r2, r3
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068e2:	2201      	movs	r2, #1
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ea:	43db      	mvns	r3, r3
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4013      	ands	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	091b      	lsrs	r3, r3, #4
 80068f8:	f003 0201 	and.w	r2, r3, #1
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	2b03      	cmp	r3, #3
 8006918:	d017      	beq.n	800694a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	2203      	movs	r2, #3
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4013      	ands	r3, r2
 8006930:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	fa02 f303 	lsl.w	r3, r2, r3
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4313      	orrs	r3, r2
 8006942:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d123      	bne.n	800699e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	08da      	lsrs	r2, r3, #3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	3208      	adds	r2, #8
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	220f      	movs	r2, #15
 800696e:	fa02 f303 	lsl.w	r3, r2, r3
 8006972:	43db      	mvns	r3, r3
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	4013      	ands	r3, r2
 8006978:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	4313      	orrs	r3, r2
 800698e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	08da      	lsrs	r2, r3, #3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3208      	adds	r2, #8
 8006998:	6939      	ldr	r1, [r7, #16]
 800699a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	2203      	movs	r2, #3
 80069aa:	fa02 f303 	lsl.w	r3, r2, r3
 80069ae:	43db      	mvns	r3, r3
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	4013      	ands	r3, r2
 80069b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f003 0203 	and.w	r2, r3, #3
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	fa02 f303 	lsl.w	r3, r2, r3
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	f000 80a6 	beq.w	8006b2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069e0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b50 <HAL_GPIO_Init+0x2e4>)
 80069e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006b50 <HAL_GPIO_Init+0x2e4>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80069ec:	4b58      	ldr	r3, [pc, #352]	@ (8006b50 <HAL_GPIO_Init+0x2e4>)
 80069ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069f0:	f003 0301 	and.w	r3, r3, #1
 80069f4:	60bb      	str	r3, [r7, #8]
 80069f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069f8:	4a56      	ldr	r2, [pc, #344]	@ (8006b54 <HAL_GPIO_Init+0x2e8>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	089b      	lsrs	r3, r3, #2
 80069fe:	3302      	adds	r3, #2
 8006a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	f003 0303 	and.w	r3, r3, #3
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	220f      	movs	r2, #15
 8006a10:	fa02 f303 	lsl.w	r3, r2, r3
 8006a14:	43db      	mvns	r3, r3
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006a22:	d01f      	beq.n	8006a64 <HAL_GPIO_Init+0x1f8>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a4c      	ldr	r2, [pc, #304]	@ (8006b58 <HAL_GPIO_Init+0x2ec>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d019      	beq.n	8006a60 <HAL_GPIO_Init+0x1f4>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8006b5c <HAL_GPIO_Init+0x2f0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_GPIO_Init+0x1f0>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a4a      	ldr	r2, [pc, #296]	@ (8006b60 <HAL_GPIO_Init+0x2f4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00d      	beq.n	8006a58 <HAL_GPIO_Init+0x1ec>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a49      	ldr	r2, [pc, #292]	@ (8006b64 <HAL_GPIO_Init+0x2f8>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d007      	beq.n	8006a54 <HAL_GPIO_Init+0x1e8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a48      	ldr	r2, [pc, #288]	@ (8006b68 <HAL_GPIO_Init+0x2fc>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d101      	bne.n	8006a50 <HAL_GPIO_Init+0x1e4>
 8006a4c:	2305      	movs	r3, #5
 8006a4e:	e00a      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a50:	2306      	movs	r3, #6
 8006a52:	e008      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a54:	2304      	movs	r3, #4
 8006a56:	e006      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e004      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e002      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <HAL_GPIO_Init+0x1fa>
 8006a64:	2300      	movs	r3, #0
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	f002 0203 	and.w	r2, r2, #3
 8006a6c:	0092      	lsls	r2, r2, #2
 8006a6e:	4093      	lsls	r3, r2
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a76:	4937      	ldr	r1, [pc, #220]	@ (8006b54 <HAL_GPIO_Init+0x2e8>)
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	3302      	adds	r3, #2
 8006a7e:	693a      	ldr	r2, [r7, #16]
 8006a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a84:	4b39      	ldr	r3, [pc, #228]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	43db      	mvns	r3, r3
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	4013      	ands	r3, r2
 8006a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006aa8:	4a30      	ldr	r2, [pc, #192]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006aae:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4013      	ands	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006ad2:	4a26      	ldr	r2, [pc, #152]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006ad8:	4b24      	ldr	r3, [pc, #144]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	43db      	mvns	r3, r3
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006afc:	4a1b      	ldr	r2, [pc, #108]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b02:	4b1a      	ldr	r3, [pc, #104]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b26:	4a11      	ldr	r2, [pc, #68]	@ (8006b6c <HAL_GPIO_Init+0x300>)
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	3301      	adds	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f ae9d 	bne.w	800687c <HAL_GPIO_Init+0x10>
  }
}
 8006b42:	bf00      	nop
 8006b44:	bf00      	nop
 8006b46:	371c      	adds	r7, #28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr
 8006b50:	40021000 	.word	0x40021000
 8006b54:	40010000 	.word	0x40010000
 8006b58:	48000400 	.word	0x48000400
 8006b5c:	48000800 	.word	0x48000800
 8006b60:	48000c00 	.word	0x48000c00
 8006b64:	48001000 	.word	0x48001000
 8006b68:	48001400 	.word	0x48001400
 8006b6c:	40010400 	.word	0x40010400

08006b70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	887b      	ldrh	r3, [r7, #2]
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d002      	beq.n	8006b8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	73fb      	strb	r3, [r7, #15]
 8006b8c:	e001      	b.n	8006b92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	807b      	strh	r3, [r7, #2]
 8006bac:	4613      	mov	r3, r2
 8006bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bb0:	787b      	ldrb	r3, [r7, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006bb6:	887a      	ldrh	r2, [r7, #2]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006bbc:	e002      	b.n	8006bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006bbe:	887a      	ldrh	r2, [r7, #2]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006bda:	4b08      	ldr	r3, [pc, #32]	@ (8006bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	4013      	ands	r3, r2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006be6:	4a05      	ldr	r2, [pc, #20]	@ (8006bfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006be8:	88fb      	ldrh	r3, [r7, #6]
 8006bea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006bec:	88fb      	ldrh	r3, [r7, #6]
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fc f87d 	bl	8002cee <HAL_GPIO_EXTI_Callback>
  }
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40010400 	.word	0x40010400

08006c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d141      	bne.n	8006c92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c1a:	d131      	bne.n	8006c80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c1c:	4b47      	ldr	r3, [pc, #284]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c22:	4a46      	ldr	r2, [pc, #280]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c2c:	4b43      	ldr	r3, [pc, #268]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006c34:	4a41      	ldr	r2, [pc, #260]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c3c:	4b40      	ldr	r3, [pc, #256]	@ (8006d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2232      	movs	r2, #50	@ 0x32
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
 8006c46:	4a3f      	ldr	r2, [pc, #252]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006c48:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4c:	0c9b      	lsrs	r3, r3, #18
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c52:	e002      	b.n	8006c5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c5a:	4b38      	ldr	r3, [pc, #224]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c66:	d102      	bne.n	8006c6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f2      	bne.n	8006c54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c6e:	4b33      	ldr	r3, [pc, #204]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c70:	695b      	ldr	r3, [r3, #20]
 8006c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7a:	d158      	bne.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e057      	b.n	8006d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006c80:	4b2e      	ldr	r3, [pc, #184]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c86:	4a2d      	ldr	r2, [pc, #180]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006c90:	e04d      	b.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c98:	d141      	bne.n	8006d1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c9a:	4b28      	ldr	r3, [pc, #160]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ca2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ca6:	d131      	bne.n	8006d0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ca8:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cae:	4a23      	ldr	r2, [pc, #140]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006cb8:	4b20      	ldr	r3, [pc, #128]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2232      	movs	r2, #50	@ 0x32
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	0c9b      	lsrs	r3, r3, #18
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006cde:	e002      	b.n	8006ce6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ce6:	4b15      	ldr	r3, [pc, #84]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf2:	d102      	bne.n	8006cfa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f2      	bne.n	8006ce0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cfa:	4b10      	ldr	r3, [pc, #64]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006cfc:	695b      	ldr	r3, [r3, #20]
 8006cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d06:	d112      	bne.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e011      	b.n	8006d30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d12:	4a0a      	ldr	r2, [pc, #40]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006d1c:	e007      	b.n	8006d2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006d1e:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006d26:	4a05      	ldr	r2, [pc, #20]	@ (8006d3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006d28:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40007000 	.word	0x40007000
 8006d40:	20000158 	.word	0x20000158
 8006d44:	431bde83 	.word	0x431bde83

08006d48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d4c:	4b05      	ldr	r3, [pc, #20]	@ (8006d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	4a04      	ldr	r2, [pc, #16]	@ (8006d64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d56:	6093      	str	r3, [r2, #8]
}
 8006d58:	bf00      	nop
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40007000 	.word	0x40007000

08006d68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e2fe      	b.n	8007378 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d075      	beq.n	8006e72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d86:	4b97      	ldr	r3, [pc, #604]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f003 030c 	and.w	r3, r3, #12
 8006d8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d90:	4b94      	ldr	r3, [pc, #592]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0303 	and.w	r3, r3, #3
 8006d98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	2b0c      	cmp	r3, #12
 8006d9e:	d102      	bne.n	8006da6 <HAL_RCC_OscConfig+0x3e>
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d002      	beq.n	8006dac <HAL_RCC_OscConfig+0x44>
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d10b      	bne.n	8006dc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dac:	4b8d      	ldr	r3, [pc, #564]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d05b      	beq.n	8006e70 <HAL_RCC_OscConfig+0x108>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d157      	bne.n	8006e70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e2d9      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dcc:	d106      	bne.n	8006ddc <HAL_RCC_OscConfig+0x74>
 8006dce:	4b85      	ldr	r3, [pc, #532]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a84      	ldr	r2, [pc, #528]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	e01d      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006de4:	d10c      	bne.n	8006e00 <HAL_RCC_OscConfig+0x98>
 8006de6:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	4b7c      	ldr	r3, [pc, #496]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a7b      	ldr	r2, [pc, #492]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	e00b      	b.n	8006e18 <HAL_RCC_OscConfig+0xb0>
 8006e00:	4b78      	ldr	r3, [pc, #480]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a77      	ldr	r2, [pc, #476]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e0a:	6013      	str	r3, [r2, #0]
 8006e0c:	4b75      	ldr	r3, [pc, #468]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a74      	ldr	r2, [pc, #464]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006e16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d013      	beq.n	8006e48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fd fc5e 	bl	80046e0 <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e28:	f7fd fc5a 	bl	80046e0 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b64      	cmp	r3, #100	@ 0x64
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e29e      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0xc0>
 8006e46:	e014      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e48:	f7fd fc4a 	bl	80046e0 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e50:	f7fd fc46 	bl	80046e0 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b64      	cmp	r3, #100	@ 0x64
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e28a      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e62:	4b60      	ldr	r3, [pc, #384]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f0      	bne.n	8006e50 <HAL_RCC_OscConfig+0xe8>
 8006e6e:	e000      	b.n	8006e72 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d075      	beq.n	8006f6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e7e:	4b59      	ldr	r3, [pc, #356]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
 8006e86:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e88:	4b56      	ldr	r3, [pc, #344]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b0c      	cmp	r3, #12
 8006e96:	d102      	bne.n	8006e9e <HAL_RCC_OscConfig+0x136>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d002      	beq.n	8006ea4 <HAL_RCC_OscConfig+0x13c>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d11f      	bne.n	8006ee4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ea4:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d005      	beq.n	8006ebc <HAL_RCC_OscConfig+0x154>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e25d      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ebc:	4b49      	ldr	r3, [pc, #292]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	691b      	ldr	r3, [r3, #16]
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	4946      	ldr	r1, [pc, #280]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ed0:	4b45      	ldr	r3, [pc, #276]	@ (8006fe8 <HAL_RCC_OscConfig+0x280>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fd fbb7 	bl	8004648 <HAL_InitTick>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d043      	beq.n	8006f68 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e249      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d023      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006eec:	4b3d      	ldr	r3, [pc, #244]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006ef2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef8:	f7fd fbf2 	bl	80046e0 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006efe:	e008      	b.n	8006f12 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f00:	f7fd fbee 	bl	80046e0 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d901      	bls.n	8006f12 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e232      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f12:	4b34      	ldr	r3, [pc, #208]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d0f0      	beq.n	8006f00 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f1e:	4b31      	ldr	r3, [pc, #196]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	061b      	lsls	r3, r3, #24
 8006f2c:	492d      	ldr	r1, [pc, #180]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	604b      	str	r3, [r1, #4]
 8006f32:	e01a      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f34:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2a      	ldr	r2, [pc, #168]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f40:	f7fd fbce 	bl	80046e0 <HAL_GetTick>
 8006f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f46:	e008      	b.n	8006f5a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f48:	f7fd fbca 	bl	80046e0 <HAL_GetTick>
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d901      	bls.n	8006f5a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e20e      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f5a:	4b22      	ldr	r3, [pc, #136]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1f0      	bne.n	8006f48 <HAL_RCC_OscConfig+0x1e0>
 8006f66:	e000      	b.n	8006f6a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0308 	and.w	r3, r3, #8
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d041      	beq.n	8006ffa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01c      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f7e:	4b19      	ldr	r3, [pc, #100]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006f84:	4a17      	ldr	r2, [pc, #92]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006f86:	f043 0301 	orr.w	r3, r3, #1
 8006f8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f8e:	f7fd fba7 	bl	80046e0 <HAL_GetTick>
 8006f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f94:	e008      	b.n	8006fa8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f96:	f7fd fba3 	bl	80046e0 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d901      	bls.n	8006fa8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e1e7      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0ef      	beq.n	8006f96 <HAL_RCC_OscConfig+0x22e>
 8006fb6:	e020      	b.n	8006ffa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006fbe:	4a09      	ldr	r2, [pc, #36]	@ (8006fe4 <HAL_RCC_OscConfig+0x27c>)
 8006fc0:	f023 0301 	bic.w	r3, r3, #1
 8006fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc8:	f7fd fb8a 	bl	80046e0 <HAL_GetTick>
 8006fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fce:	e00d      	b.n	8006fec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fd0:	f7fd fb86 	bl	80046e0 <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d906      	bls.n	8006fec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e1ca      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
 8006fe2:	bf00      	nop
 8006fe4:	40021000 	.word	0x40021000
 8006fe8:	2000015c 	.word	0x2000015c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fec:	4b8c      	ldr	r3, [pc, #560]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8006fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ff2:	f003 0302 	and.w	r3, r3, #2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1ea      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	f000 80a6 	beq.w	8007154 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007008:	2300      	movs	r3, #0
 800700a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800700c:	4b84      	ldr	r3, [pc, #528]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d101      	bne.n	800701c <HAL_RCC_OscConfig+0x2b4>
 8007018:	2301      	movs	r3, #1
 800701a:	e000      	b.n	800701e <HAL_RCC_OscConfig+0x2b6>
 800701c:	2300      	movs	r3, #0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007022:	4b7f      	ldr	r3, [pc, #508]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007026:	4a7e      	ldr	r2, [pc, #504]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800702c:	6593      	str	r3, [r2, #88]	@ 0x58
 800702e:	4b7c      	ldr	r3, [pc, #496]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800703a:	2301      	movs	r3, #1
 800703c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800703e:	4b79      	ldr	r3, [pc, #484]	@ (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007046:	2b00      	cmp	r3, #0
 8007048:	d118      	bne.n	800707c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800704a:	4b76      	ldr	r3, [pc, #472]	@ (8007224 <HAL_RCC_OscConfig+0x4bc>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a75      	ldr	r2, [pc, #468]	@ (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007056:	f7fd fb43 	bl	80046e0 <HAL_GetTick>
 800705a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800705c:	e008      	b.n	8007070 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705e:	f7fd fb3f 	bl	80046e0 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b02      	cmp	r3, #2
 800706a:	d901      	bls.n	8007070 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e183      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007070:	4b6c      	ldr	r3, [pc, #432]	@ (8007224 <HAL_RCC_OscConfig+0x4bc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0f0      	beq.n	800705e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d108      	bne.n	8007096 <HAL_RCC_OscConfig+0x32e>
 8007084:	4b66      	ldr	r3, [pc, #408]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800708a:	4a65      	ldr	r2, [pc, #404]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800708c:	f043 0301 	orr.w	r3, r3, #1
 8007090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007094:	e024      	b.n	80070e0 <HAL_RCC_OscConfig+0x378>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	2b05      	cmp	r3, #5
 800709c:	d110      	bne.n	80070c0 <HAL_RCC_OscConfig+0x358>
 800709e:	4b60      	ldr	r3, [pc, #384]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070a6:	f043 0304 	orr.w	r3, r3, #4
 80070aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070ae:	4b5c      	ldr	r3, [pc, #368]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b4:	4a5a      	ldr	r2, [pc, #360]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070b6:	f043 0301 	orr.w	r3, r3, #1
 80070ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070be:	e00f      	b.n	80070e0 <HAL_RCC_OscConfig+0x378>
 80070c0:	4b57      	ldr	r3, [pc, #348]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c6:	4a56      	ldr	r2, [pc, #344]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070c8:	f023 0301 	bic.w	r3, r3, #1
 80070cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80070d0:	4b53      	ldr	r3, [pc, #332]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070d6:	4a52      	ldr	r2, [pc, #328]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80070d8:	f023 0304 	bic.w	r3, r3, #4
 80070dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d016      	beq.n	8007116 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e8:	f7fd fafa 	bl	80046e0 <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80070ee:	e00a      	b.n	8007106 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070f0:	f7fd faf6 	bl	80046e0 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070fe:	4293      	cmp	r3, r2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e138      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007106:	4b46      	ldr	r3, [pc, #280]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007108:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ed      	beq.n	80070f0 <HAL_RCC_OscConfig+0x388>
 8007114:	e015      	b.n	8007142 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007116:	f7fd fae3 	bl	80046e0 <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800711c:	e00a      	b.n	8007134 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800711e:	f7fd fadf 	bl	80046e0 <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712c:	4293      	cmp	r3, r2
 800712e:	d901      	bls.n	8007134 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e121      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007134:	4b3a      	ldr	r3, [pc, #232]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ed      	bne.n	800711e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007142:	7ffb      	ldrb	r3, [r7, #31]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007148:	4b35      	ldr	r3, [pc, #212]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800714a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800714c:	4a34      	ldr	r2, [pc, #208]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800714e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007152:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0320 	and.w	r3, r3, #32
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03c      	beq.n	80071da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d01c      	beq.n	80071a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007168:	4b2d      	ldr	r3, [pc, #180]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 800716a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800716e:	4a2c      	ldr	r2, [pc, #176]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007170:	f043 0301 	orr.w	r3, r3, #1
 8007174:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007178:	f7fd fab2 	bl	80046e0 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007180:	f7fd faae 	bl	80046e0 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e0f2      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007192:	4b23      	ldr	r3, [pc, #140]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ef      	beq.n	8007180 <HAL_RCC_OscConfig+0x418>
 80071a0:	e01b      	b.n	80071da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80071a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071aa:	f023 0301 	bic.w	r3, r3, #1
 80071ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071b2:	f7fd fa95 	bl	80046e0 <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071ba:	f7fd fa91 	bl	80046e0 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e0d5      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80071cc:	4b14      	ldr	r3, [pc, #80]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1ef      	bne.n	80071ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	f000 80c9 	beq.w	8007376 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f003 030c 	and.w	r3, r3, #12
 80071ec:	2b0c      	cmp	r3, #12
 80071ee:	f000 8083 	beq.w	80072f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d15e      	bne.n	80072b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071fa:	4b09      	ldr	r3, [pc, #36]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a08      	ldr	r2, [pc, #32]	@ (8007220 <HAL_RCC_OscConfig+0x4b8>)
 8007200:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007206:	f7fd fa6b 	bl	80046e0 <HAL_GetTick>
 800720a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800720c:	e00c      	b.n	8007228 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800720e:	f7fd fa67 	bl	80046e0 <HAL_GetTick>
 8007212:	4602      	mov	r2, r0
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	2b02      	cmp	r3, #2
 800721a:	d905      	bls.n	8007228 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800721c:	2303      	movs	r3, #3
 800721e:	e0ab      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
 8007220:	40021000 	.word	0x40021000
 8007224:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007228:	4b55      	ldr	r3, [pc, #340]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1ec      	bne.n	800720e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007234:	4b52      	ldr	r3, [pc, #328]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	4b52      	ldr	r3, [pc, #328]	@ (8007384 <HAL_RCC_OscConfig+0x61c>)
 800723a:	4013      	ands	r3, r2
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	6a11      	ldr	r1, [r2, #32]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007244:	3a01      	subs	r2, #1
 8007246:	0112      	lsls	r2, r2, #4
 8007248:	4311      	orrs	r1, r2
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800724e:	0212      	lsls	r2, r2, #8
 8007250:	4311      	orrs	r1, r2
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007256:	0852      	lsrs	r2, r2, #1
 8007258:	3a01      	subs	r2, #1
 800725a:	0552      	lsls	r2, r2, #21
 800725c:	4311      	orrs	r1, r2
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007262:	0852      	lsrs	r2, r2, #1
 8007264:	3a01      	subs	r2, #1
 8007266:	0652      	lsls	r2, r2, #25
 8007268:	4311      	orrs	r1, r2
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800726e:	06d2      	lsls	r2, r2, #27
 8007270:	430a      	orrs	r2, r1
 8007272:	4943      	ldr	r1, [pc, #268]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 8007274:	4313      	orrs	r3, r2
 8007276:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007278:	4b41      	ldr	r3, [pc, #260]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a40      	ldr	r2, [pc, #256]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 800727e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007282:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007284:	4b3e      	ldr	r3, [pc, #248]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a3d      	ldr	r2, [pc, #244]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 800728a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800728e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fd fa26 	bl	80046e0 <HAL_GetTick>
 8007294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007298:	f7fd fa22 	bl	80046e0 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e066      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072aa:	4b35      	ldr	r3, [pc, #212]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0x530>
 80072b6:	e05e      	b.n	8007376 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072b8:	4b31      	ldr	r3, [pc, #196]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a30      	ldr	r2, [pc, #192]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c4:	f7fd fa0c 	bl	80046e0 <HAL_GetTick>
 80072c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072cc:	f7fd fa08 	bl	80046e0 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e04c      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072de:	4b28      	ldr	r3, [pc, #160]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f0      	bne.n	80072cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80072ea:	4b25      	ldr	r3, [pc, #148]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	4924      	ldr	r1, [pc, #144]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 80072f0:	4b25      	ldr	r3, [pc, #148]	@ (8007388 <HAL_RCC_OscConfig+0x620>)
 80072f2:	4013      	ands	r3, r2
 80072f4:	60cb      	str	r3, [r1, #12]
 80072f6:	e03e      	b.n	8007376 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e039      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007304:	4b1e      	ldr	r3, [pc, #120]	@ (8007380 <HAL_RCC_OscConfig+0x618>)
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f003 0203 	and.w	r2, r3, #3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	429a      	cmp	r2, r3
 8007316:	d12c      	bne.n	8007372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007322:	3b01      	subs	r3, #1
 8007324:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007326:	429a      	cmp	r2, r3
 8007328:	d123      	bne.n	8007372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007334:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007336:	429a      	cmp	r2, r3
 8007338:	d11b      	bne.n	8007372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007344:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d113      	bne.n	8007372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	3b01      	subs	r3, #1
 8007358:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800735a:	429a      	cmp	r2, r3
 800735c:	d109      	bne.n	8007372 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	3b01      	subs	r3, #1
 800736c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800736e:	429a      	cmp	r2, r3
 8007370:	d001      	beq.n	8007376 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40021000 	.word	0x40021000
 8007384:	019f800c 	.word	0x019f800c
 8007388:	feeefffc 	.word	0xfeeefffc

0800738c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007396:	2300      	movs	r3, #0
 8007398:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e11e      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073a4:	4b91      	ldr	r3, [pc, #580]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	683a      	ldr	r2, [r7, #0]
 80073ae:	429a      	cmp	r2, r3
 80073b0:	d910      	bls.n	80073d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073b2:	4b8e      	ldr	r3, [pc, #568]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f023 020f 	bic.w	r2, r3, #15
 80073ba:	498c      	ldr	r1, [pc, #560]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	4313      	orrs	r3, r2
 80073c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073c2:	4b8a      	ldr	r3, [pc, #552]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d001      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e106      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d073      	beq.n	80074c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	d129      	bne.n	800743c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073e8:	4b81      	ldr	r3, [pc, #516]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d101      	bne.n	80073f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e0f4      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80073f8:	f000 f99e 	bl	8007738 <RCC_GetSysClockFreqFromPLLSource>
 80073fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	4a7c      	ldr	r2, [pc, #496]	@ (80075f4 <HAL_RCC_ClockConfig+0x268>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d93f      	bls.n	8007486 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007406:	4b7a      	ldr	r3, [pc, #488]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d009      	beq.n	8007426 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800741a:	2b00      	cmp	r3, #0
 800741c:	d033      	beq.n	8007486 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007422:	2b00      	cmp	r3, #0
 8007424:	d12f      	bne.n	8007486 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007426:	4b72      	ldr	r3, [pc, #456]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800742e:	4a70      	ldr	r2, [pc, #448]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007434:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e024      	b.n	8007486 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	2b02      	cmp	r3, #2
 8007442:	d107      	bne.n	8007454 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007444:	4b6a      	ldr	r3, [pc, #424]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d109      	bne.n	8007464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e0c6      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007454:	4b66      	ldr	r3, [pc, #408]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800745c:	2b00      	cmp	r3, #0
 800745e:	d101      	bne.n	8007464 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e0be      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007464:	f000 f8ce 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 8007468:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	4a61      	ldr	r2, [pc, #388]	@ (80075f4 <HAL_RCC_ClockConfig+0x268>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d909      	bls.n	8007486 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007472:	4b5f      	ldr	r3, [pc, #380]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800747a:	4a5d      	ldr	r2, [pc, #372]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 800747c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007480:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007482:	2380      	movs	r3, #128	@ 0x80
 8007484:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007486:	4b5a      	ldr	r3, [pc, #360]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	f023 0203 	bic.w	r2, r3, #3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	4957      	ldr	r1, [pc, #348]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007494:	4313      	orrs	r3, r2
 8007496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007498:	f7fd f922 	bl	80046e0 <HAL_GetTick>
 800749c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800749e:	e00a      	b.n	80074b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a0:	f7fd f91e 	bl	80046e0 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d901      	bls.n	80074b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80074b2:	2303      	movs	r3, #3
 80074b4:	e095      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b6:	4b4e      	ldr	r3, [pc, #312]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 020c 	and.w	r2, r3, #12
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d1eb      	bne.n	80074a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d023      	beq.n	800751c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d005      	beq.n	80074ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074e0:	4b43      	ldr	r3, [pc, #268]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	4a42      	ldr	r2, [pc, #264]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80074e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80074ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d007      	beq.n	8007508 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80074f8:	4b3d      	ldr	r3, [pc, #244]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007500:	4a3b      	ldr	r2, [pc, #236]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007502:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007506:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007508:	4b39      	ldr	r3, [pc, #228]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	4936      	ldr	r1, [pc, #216]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007516:	4313      	orrs	r3, r2
 8007518:	608b      	str	r3, [r1, #8]
 800751a:	e008      	b.n	800752e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b80      	cmp	r3, #128	@ 0x80
 8007520:	d105      	bne.n	800752e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007522:	4b33      	ldr	r3, [pc, #204]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	4a32      	ldr	r2, [pc, #200]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007528:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800752c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800752e:	4b2f      	ldr	r3, [pc, #188]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	429a      	cmp	r2, r3
 800753a:	d21d      	bcs.n	8007578 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753c:	4b2b      	ldr	r3, [pc, #172]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f023 020f 	bic.w	r2, r3, #15
 8007544:	4929      	ldr	r1, [pc, #164]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	4313      	orrs	r3, r2
 800754a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800754c:	f7fd f8c8 	bl	80046e0 <HAL_GetTick>
 8007550:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007552:	e00a      	b.n	800756a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007554:	f7fd f8c4 	bl	80046e0 <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e03b      	b.n	80075e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800756a:	4b20      	ldr	r3, [pc, #128]	@ (80075ec <HAL_RCC_ClockConfig+0x260>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 030f 	and.w	r3, r3, #15
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d1ed      	bne.n	8007554 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0304 	and.w	r3, r3, #4
 8007580:	2b00      	cmp	r3, #0
 8007582:	d008      	beq.n	8007596 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007584:	4b1a      	ldr	r3, [pc, #104]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	4917      	ldr	r1, [pc, #92]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075a2:	4b13      	ldr	r3, [pc, #76]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	490f      	ldr	r1, [pc, #60]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80075b6:	f000 f825 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 80075ba:	4602      	mov	r2, r0
 80075bc:	4b0c      	ldr	r3, [pc, #48]	@ (80075f0 <HAL_RCC_ClockConfig+0x264>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	091b      	lsrs	r3, r3, #4
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	490c      	ldr	r1, [pc, #48]	@ (80075f8 <HAL_RCC_ClockConfig+0x26c>)
 80075c8:	5ccb      	ldrb	r3, [r1, r3]
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	fa22 f303 	lsr.w	r3, r2, r3
 80075d2:	4a0a      	ldr	r2, [pc, #40]	@ (80075fc <HAL_RCC_ClockConfig+0x270>)
 80075d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80075d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007600 <HAL_RCC_ClockConfig+0x274>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4618      	mov	r0, r3
 80075dc:	f7fd f834 	bl	8004648 <HAL_InitTick>
 80075e0:	4603      	mov	r3, r0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3718      	adds	r7, #24
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40022000 	.word	0x40022000
 80075f0:	40021000 	.word	0x40021000
 80075f4:	04c4b400 	.word	0x04c4b400
 80075f8:	0800dae4 	.word	0x0800dae4
 80075fc:	20000158 	.word	0x20000158
 8007600:	2000015c 	.word	0x2000015c

08007604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007604:	b480      	push	{r7}
 8007606:	b087      	sub	sp, #28
 8007608:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800760a:	4b2c      	ldr	r3, [pc, #176]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b04      	cmp	r3, #4
 8007614:	d102      	bne.n	800761c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007616:	4b2a      	ldr	r3, [pc, #168]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007618:	613b      	str	r3, [r7, #16]
 800761a:	e047      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800761c:	4b27      	ldr	r3, [pc, #156]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f003 030c 	and.w	r3, r3, #12
 8007624:	2b08      	cmp	r3, #8
 8007626:	d102      	bne.n	800762e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007628:	4b26      	ldr	r3, [pc, #152]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	e03e      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800762e:	4b23      	ldr	r3, [pc, #140]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 030c 	and.w	r3, r3, #12
 8007636:	2b0c      	cmp	r3, #12
 8007638:	d136      	bne.n	80076a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800763a:	4b20      	ldr	r3, [pc, #128]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007644:	4b1d      	ldr	r3, [pc, #116]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	091b      	lsrs	r3, r3, #4
 800764a:	f003 030f 	and.w	r3, r3, #15
 800764e:	3301      	adds	r3, #1
 8007650:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b03      	cmp	r3, #3
 8007656:	d10c      	bne.n	8007672 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007658:	4a1a      	ldr	r2, [pc, #104]	@ (80076c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	4a16      	ldr	r2, [pc, #88]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007662:	68d2      	ldr	r2, [r2, #12]
 8007664:	0a12      	lsrs	r2, r2, #8
 8007666:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800766a:	fb02 f303 	mul.w	r3, r2, r3
 800766e:	617b      	str	r3, [r7, #20]
      break;
 8007670:	e00c      	b.n	800768c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007672:	4a13      	ldr	r2, [pc, #76]	@ (80076c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	4a10      	ldr	r2, [pc, #64]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800767c:	68d2      	ldr	r2, [r2, #12]
 800767e:	0a12      	lsrs	r2, r2, #8
 8007680:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007684:	fb02 f303 	mul.w	r3, r2, r3
 8007688:	617b      	str	r3, [r7, #20]
      break;
 800768a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800768c:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	0e5b      	lsrs	r3, r3, #25
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	3301      	adds	r3, #1
 8007698:	005b      	lsls	r3, r3, #1
 800769a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800769c:	697a      	ldr	r2, [r7, #20]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	e001      	b.n	80076ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80076ac:	693b      	ldr	r3, [r7, #16]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	40021000 	.word	0x40021000
 80076c0:	00f42400 	.word	0x00f42400
 80076c4:	016e3600 	.word	0x016e3600

080076c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076c8:	b480      	push	{r7}
 80076ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076cc:	4b03      	ldr	r3, [pc, #12]	@ (80076dc <HAL_RCC_GetHCLKFreq+0x14>)
 80076ce:	681b      	ldr	r3, [r3, #0]
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20000158 	.word	0x20000158

080076e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80076e4:	f7ff fff0 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 80076e8:	4602      	mov	r2, r0
 80076ea:	4b06      	ldr	r3, [pc, #24]	@ (8007704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	0a1b      	lsrs	r3, r3, #8
 80076f0:	f003 0307 	and.w	r3, r3, #7
 80076f4:	4904      	ldr	r1, [pc, #16]	@ (8007708 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076f6:	5ccb      	ldrb	r3, [r1, r3]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40021000 	.word	0x40021000
 8007708:	0800daf4 	.word	0x0800daf4

0800770c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007710:	f7ff ffda 	bl	80076c8 <HAL_RCC_GetHCLKFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b06      	ldr	r3, [pc, #24]	@ (8007730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0adb      	lsrs	r3, r3, #11
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	4904      	ldr	r1, [pc, #16]	@ (8007734 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800772c:	4618      	mov	r0, r3
 800772e:	bd80      	pop	{r7, pc}
 8007730:	40021000 	.word	0x40021000
 8007734:	0800daf4 	.word	0x0800daf4

08007738 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800773e:	4b1e      	ldr	r3, [pc, #120]	@ (80077b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007748:	4b1b      	ldr	r3, [pc, #108]	@ (80077b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	091b      	lsrs	r3, r3, #4
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	3301      	adds	r3, #1
 8007754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d10c      	bne.n	8007776 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800775c:	4a17      	ldr	r2, [pc, #92]	@ (80077bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	4a14      	ldr	r2, [pc, #80]	@ (80077b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007766:	68d2      	ldr	r2, [r2, #12]
 8007768:	0a12      	lsrs	r2, r2, #8
 800776a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800776e:	fb02 f303 	mul.w	r3, r2, r3
 8007772:	617b      	str	r3, [r7, #20]
    break;
 8007774:	e00c      	b.n	8007790 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007776:	4a12      	ldr	r2, [pc, #72]	@ (80077c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
 800777e:	4a0e      	ldr	r2, [pc, #56]	@ (80077b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007780:	68d2      	ldr	r2, [r2, #12]
 8007782:	0a12      	lsrs	r2, r2, #8
 8007784:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007788:	fb02 f303 	mul.w	r3, r2, r3
 800778c:	617b      	str	r3, [r7, #20]
    break;
 800778e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	0e5b      	lsrs	r3, r3, #25
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	3301      	adds	r3, #1
 800779c:	005b      	lsls	r3, r3, #1
 800779e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80077aa:	687b      	ldr	r3, [r7, #4]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40021000 	.word	0x40021000
 80077bc:	016e3600 	.word	0x016e3600
 80077c0:	00f42400 	.word	0x00f42400

080077c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80077cc:	2300      	movs	r3, #0
 80077ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80077d0:	2300      	movs	r3, #0
 80077d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8098 	beq.w	8007912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077e2:	2300      	movs	r3, #0
 80077e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e6:	4b43      	ldr	r3, [pc, #268]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077f2:	4b40      	ldr	r3, [pc, #256]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077f6:	4a3f      	ldr	r2, [pc, #252]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80077fe:	4b3d      	ldr	r3, [pc, #244]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007806:	60bb      	str	r3, [r7, #8]
 8007808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800780a:	2301      	movs	r3, #1
 800780c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800780e:	4b3a      	ldr	r3, [pc, #232]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a39      	ldr	r2, [pc, #228]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007818:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800781a:	f7fc ff61 	bl	80046e0 <HAL_GetTick>
 800781e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007820:	e009      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007822:	f7fc ff5d 	bl	80046e0 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d902      	bls.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	74fb      	strb	r3, [r7, #19]
        break;
 8007834:	e005      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007836:	4b30      	ldr	r3, [pc, #192]	@ (80078f8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0ef      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007842:	7cfb      	ldrb	r3, [r7, #19]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d159      	bne.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007848:	4b2a      	ldr	r3, [pc, #168]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800784a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007852:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01e      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	429a      	cmp	r2, r3
 8007862:	d019      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007864:	4b23      	ldr	r3, [pc, #140]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800786e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007870:	4b20      	ldr	r3, [pc, #128]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007876:	4a1f      	ldr	r2, [pc, #124]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800787c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007880:	4b1c      	ldr	r3, [pc, #112]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007886:	4a1b      	ldr	r2, [pc, #108]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800788c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007890:	4a18      	ldr	r2, [pc, #96]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	f003 0301 	and.w	r3, r3, #1
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d016      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a2:	f7fc ff1d 	bl	80046e0 <HAL_GetTick>
 80078a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078a8:	e00b      	b.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078aa:	f7fc ff19 	bl	80046e0 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d902      	bls.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	74fb      	strb	r3, [r7, #19]
            break;
 80078c0:	e006      	b.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80078c2:	4b0c      	ldr	r3, [pc, #48]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0ec      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80078d0:	7cfb      	ldrb	r3, [r7, #19]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80078d6:	4b07      	ldr	r3, [pc, #28]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e4:	4903      	ldr	r1, [pc, #12]	@ (80078f4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80078ec:	e008      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80078ee:	7cfb      	ldrb	r3, [r7, #19]
 80078f0:	74bb      	strb	r3, [r7, #18]
 80078f2:	e005      	b.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80078f4:	40021000 	.word	0x40021000
 80078f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078fc:	7cfb      	ldrb	r3, [r7, #19]
 80078fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007900:	7c7b      	ldrb	r3, [r7, #17]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d105      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007906:	4ba7      	ldr	r3, [pc, #668]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800790a:	4aa6      	ldr	r2, [pc, #664]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007910:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b00      	cmp	r3, #0
 800791c:	d00a      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800791e:	4ba1      	ldr	r3, [pc, #644]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007924:	f023 0203 	bic.w	r2, r3, #3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	499d      	ldr	r1, [pc, #628]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792e:	4313      	orrs	r3, r2
 8007930:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d00a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007940:	4b98      	ldr	r3, [pc, #608]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007946:	f023 020c 	bic.w	r2, r3, #12
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	4995      	ldr	r1, [pc, #596]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007950:	4313      	orrs	r3, r2
 8007952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007962:	4b90      	ldr	r3, [pc, #576]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007968:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	498c      	ldr	r1, [pc, #560]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007972:	4313      	orrs	r3, r2
 8007974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0308 	and.w	r3, r3, #8
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00a      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007984:	4b87      	ldr	r3, [pc, #540]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	4984      	ldr	r1, [pc, #528]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007994:	4313      	orrs	r3, r2
 8007996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0310 	and.w	r3, r3, #16
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00a      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80079a6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	695b      	ldr	r3, [r3, #20]
 80079b4:	497b      	ldr	r1, [pc, #492]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00a      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079c8:	4b76      	ldr	r3, [pc, #472]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	4973      	ldr	r1, [pc, #460]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00a      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80079ea:	4b6e      	ldr	r3, [pc, #440]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	496a      	ldr	r1, [pc, #424]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00a      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007a0c:	4b65      	ldr	r3, [pc, #404]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	4962      	ldr	r1, [pc, #392]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00a      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	4959      	ldr	r1, [pc, #356]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d00a      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a50:	4b54      	ldr	r3, [pc, #336]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007a56:	f023 0203 	bic.w	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a5e:	4951      	ldr	r1, [pc, #324]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a72:	4b4c      	ldr	r3, [pc, #304]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	4948      	ldr	r1, [pc, #288]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d015      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a94:	4b43      	ldr	r3, [pc, #268]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aa2:	4940      	ldr	r1, [pc, #256]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ab2:	d105      	bne.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	4a3a      	ldr	r2, [pc, #232]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007abe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d015      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007acc:	4b35      	ldr	r3, [pc, #212]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ada:	4932      	ldr	r1, [pc, #200]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007adc:	4313      	orrs	r3, r2
 8007ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007aea:	d105      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007aec:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	4a2c      	ldr	r2, [pc, #176]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007af6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d015      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007b04:	4b27      	ldr	r3, [pc, #156]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b12:	4924      	ldr	r1, [pc, #144]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b22:	d105      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b24:	4b1f      	ldr	r3, [pc, #124]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	4a1e      	ldr	r2, [pc, #120]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d015      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4a:	4916      	ldr	r1, [pc, #88]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b5a:	d105      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b5c:	4b11      	ldr	r3, [pc, #68]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	4a10      	ldr	r2, [pc, #64]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d019      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b82:	4908      	ldr	r1, [pc, #32]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b84:	4313      	orrs	r3, r2
 8007b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007b92:	d109      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b94:	4b03      	ldr	r3, [pc, #12]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a02      	ldr	r2, [pc, #8]	@ (8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b9e:	60d3      	str	r3, [r2, #12]
 8007ba0:	e002      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ba2:	bf00      	nop
 8007ba4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d015      	beq.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007bb4:	4b29      	ldr	r3, [pc, #164]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bc2:	4926      	ldr	r1, [pc, #152]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007bd2:	d105      	bne.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007bd4:	4b21      	ldr	r3, [pc, #132]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	4a20      	ldr	r2, [pc, #128]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d015      	beq.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007bec:	4b1b      	ldr	r3, [pc, #108]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bfa:	4918      	ldr	r1, [pc, #96]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c0a:	d105      	bne.n	8007c18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007c0c:	4b13      	ldr	r3, [pc, #76]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	4a12      	ldr	r2, [pc, #72]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007c24:	4b0d      	ldr	r3, [pc, #52]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007c2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c32:	490a      	ldr	r1, [pc, #40]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c42:	d105      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c44:	4b05      	ldr	r3, [pc, #20]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	4a04      	ldr	r2, [pc, #16]	@ (8007c5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007c4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007c50:	7cbb      	ldrb	r3, [r7, #18]
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40021000 	.word	0x40021000

08007c60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e054      	b.n	8007d1c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d111      	bne.n	8007ca2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f001 fee2 	bl	8009a50 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a23      	ldr	r2, [pc, #140]	@ (8007d24 <HAL_TIM_Base_Init+0xc4>)
 8007c98:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f001 fa2b 	bl	8009110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	080040e5 	.word	0x080040e5

08007d28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d001      	beq.n	8007d40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	e04c      	b.n	8007dda <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a26      	ldr	r2, [pc, #152]	@ (8007de8 <HAL_TIM_Base_Start+0xc0>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d022      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5a:	d01d      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a22      	ldr	r2, [pc, #136]	@ (8007dec <HAL_TIM_Base_Start+0xc4>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a21      	ldr	r2, [pc, #132]	@ (8007df0 <HAL_TIM_Base_Start+0xc8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1f      	ldr	r2, [pc, #124]	@ (8007df4 <HAL_TIM_Base_Start+0xcc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00e      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8007df8 <HAL_TIM_Base_Start+0xd0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a1c      	ldr	r2, [pc, #112]	@ (8007dfc <HAL_TIM_Base_Start+0xd4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_TIM_Base_Start+0x70>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a1b      	ldr	r2, [pc, #108]	@ (8007e00 <HAL_TIM_Base_Start+0xd8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d115      	bne.n	8007dc4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	4b19      	ldr	r3, [pc, #100]	@ (8007e04 <HAL_TIM_Base_Start+0xdc>)
 8007da0:	4013      	ands	r3, r2
 8007da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d015      	beq.n	8007dd6 <HAL_TIM_Base_Start+0xae>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007db0:	d011      	beq.n	8007dd6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0201 	orr.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dc2:	e008      	b.n	8007dd6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f042 0201 	orr.w	r2, r2, #1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	e000      	b.n	8007dd8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40012c00 	.word	0x40012c00
 8007dec:	40000400 	.word	0x40000400
 8007df0:	40000800 	.word	0x40000800
 8007df4:	40000c00 	.word	0x40000c00
 8007df8:	40013400 	.word	0x40013400
 8007dfc:	40014000 	.word	0x40014000
 8007e00:	40015000 	.word	0x40015000
 8007e04:	00010007 	.word	0x00010007

08007e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d001      	beq.n	8007e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e054      	b.n	8007eca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0201 	orr.w	r2, r2, #1
 8007e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a26      	ldr	r2, [pc, #152]	@ (8007ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d022      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e4a:	d01d      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <HAL_TIM_Base_Start_IT+0xd4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d018      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a21      	ldr	r2, [pc, #132]	@ (8007ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d013      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1f      	ldr	r2, [pc, #124]	@ (8007ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00e      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a1e      	ldr	r2, [pc, #120]	@ (8007ee8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d009      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a1c      	ldr	r2, [pc, #112]	@ (8007eec <HAL_TIM_Base_Start_IT+0xe4>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d004      	beq.n	8007e88 <HAL_TIM_Base_Start_IT+0x80>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d115      	bne.n	8007eb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	4b19      	ldr	r3, [pc, #100]	@ (8007ef4 <HAL_TIM_Base_Start_IT+0xec>)
 8007e90:	4013      	ands	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b06      	cmp	r3, #6
 8007e98:	d015      	beq.n	8007ec6 <HAL_TIM_Base_Start_IT+0xbe>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ea0:	d011      	beq.n	8007ec6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f042 0201 	orr.w	r2, r2, #1
 8007eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007eb2:	e008      	b.n	8007ec6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f042 0201 	orr.w	r2, r2, #1
 8007ec2:	601a      	str	r2, [r3, #0]
 8007ec4:	e000      	b.n	8007ec8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40012c00 	.word	0x40012c00
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800
 8007ee4:	40000c00 	.word	0x40000c00
 8007ee8:	40013400 	.word	0x40013400
 8007eec:	40014000 	.word	0x40014000
 8007ef0:	40015000 	.word	0x40015000
 8007ef4:	00010007 	.word	0x00010007

08007ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e054      	b.n	8007fb4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d111      	bne.n	8007f3a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fd96 	bl	8009a50 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d102      	bne.n	8007f32 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a23      	ldr	r2, [pc, #140]	@ (8007fbc <HAL_TIM_PWM_Init+0xc4>)
 8007f30:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	f001 f8df 	bl	8009110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2201      	movs	r2, #1
 8007fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3708      	adds	r7, #8
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	08004099 	.word	0x08004099

08007fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b084      	sub	sp, #16
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d109      	bne.n	8007fe4 <HAL_TIM_PWM_Start+0x24>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	bf14      	ite	ne
 8007fdc:	2301      	movne	r3, #1
 8007fde:	2300      	moveq	r3, #0
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	e03c      	b.n	800805e <HAL_TIM_PWM_Start+0x9e>
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d109      	bne.n	8007ffe <HAL_TIM_PWM_Start+0x3e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	bf14      	ite	ne
 8007ff6:	2301      	movne	r3, #1
 8007ff8:	2300      	moveq	r3, #0
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	e02f      	b.n	800805e <HAL_TIM_PWM_Start+0x9e>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2b08      	cmp	r3, #8
 8008002:	d109      	bne.n	8008018 <HAL_TIM_PWM_Start+0x58>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b01      	cmp	r3, #1
 800800e:	bf14      	ite	ne
 8008010:	2301      	movne	r3, #1
 8008012:	2300      	moveq	r3, #0
 8008014:	b2db      	uxtb	r3, r3
 8008016:	e022      	b.n	800805e <HAL_TIM_PWM_Start+0x9e>
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	2b0c      	cmp	r3, #12
 800801c:	d109      	bne.n	8008032 <HAL_TIM_PWM_Start+0x72>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b01      	cmp	r3, #1
 8008028:	bf14      	ite	ne
 800802a:	2301      	movne	r3, #1
 800802c:	2300      	moveq	r3, #0
 800802e:	b2db      	uxtb	r3, r3
 8008030:	e015      	b.n	800805e <HAL_TIM_PWM_Start+0x9e>
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	2b10      	cmp	r3, #16
 8008036:	d109      	bne.n	800804c <HAL_TIM_PWM_Start+0x8c>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	bf14      	ite	ne
 8008044:	2301      	movne	r3, #1
 8008046:	2300      	moveq	r3, #0
 8008048:	b2db      	uxtb	r3, r3
 800804a:	e008      	b.n	800805e <HAL_TIM_PWM_Start+0x9e>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b01      	cmp	r3, #1
 8008056:	bf14      	ite	ne
 8008058:	2301      	movne	r3, #1
 800805a:	2300      	moveq	r3, #0
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e0a6      	b.n	80081b4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d104      	bne.n	8008076 <HAL_TIM_PWM_Start+0xb6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008074:	e023      	b.n	80080be <HAL_TIM_PWM_Start+0xfe>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	2b04      	cmp	r3, #4
 800807a:	d104      	bne.n	8008086 <HAL_TIM_PWM_Start+0xc6>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008084:	e01b      	b.n	80080be <HAL_TIM_PWM_Start+0xfe>
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2b08      	cmp	r3, #8
 800808a:	d104      	bne.n	8008096 <HAL_TIM_PWM_Start+0xd6>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008094:	e013      	b.n	80080be <HAL_TIM_PWM_Start+0xfe>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b0c      	cmp	r3, #12
 800809a:	d104      	bne.n	80080a6 <HAL_TIM_PWM_Start+0xe6>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2202      	movs	r2, #2
 80080a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80080a4:	e00b      	b.n	80080be <HAL_TIM_PWM_Start+0xfe>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b10      	cmp	r3, #16
 80080aa:	d104      	bne.n	80080b6 <HAL_TIM_PWM_Start+0xf6>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80080b4:	e003      	b.n	80080be <HAL_TIM_PWM_Start+0xfe>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2202      	movs	r2, #2
 80080ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2201      	movs	r2, #1
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f001 fc9c 	bl	8009a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a3a      	ldr	r2, [pc, #232]	@ (80081bc <HAL_TIM_PWM_Start+0x1fc>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d018      	beq.n	8008108 <HAL_TIM_PWM_Start+0x148>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a39      	ldr	r2, [pc, #228]	@ (80081c0 <HAL_TIM_PWM_Start+0x200>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d013      	beq.n	8008108 <HAL_TIM_PWM_Start+0x148>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a37      	ldr	r2, [pc, #220]	@ (80081c4 <HAL_TIM_PWM_Start+0x204>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00e      	beq.n	8008108 <HAL_TIM_PWM_Start+0x148>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a36      	ldr	r2, [pc, #216]	@ (80081c8 <HAL_TIM_PWM_Start+0x208>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d009      	beq.n	8008108 <HAL_TIM_PWM_Start+0x148>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a34      	ldr	r2, [pc, #208]	@ (80081cc <HAL_TIM_PWM_Start+0x20c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d004      	beq.n	8008108 <HAL_TIM_PWM_Start+0x148>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a33      	ldr	r2, [pc, #204]	@ (80081d0 <HAL_TIM_PWM_Start+0x210>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d101      	bne.n	800810c <HAL_TIM_PWM_Start+0x14c>
 8008108:	2301      	movs	r3, #1
 800810a:	e000      	b.n	800810e <HAL_TIM_PWM_Start+0x14e>
 800810c:	2300      	movs	r3, #0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d007      	beq.n	8008122 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008120:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a25      	ldr	r2, [pc, #148]	@ (80081bc <HAL_TIM_PWM_Start+0x1fc>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d022      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008134:	d01d      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a26      	ldr	r2, [pc, #152]	@ (80081d4 <HAL_TIM_PWM_Start+0x214>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d018      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a24      	ldr	r2, [pc, #144]	@ (80081d8 <HAL_TIM_PWM_Start+0x218>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d013      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a23      	ldr	r2, [pc, #140]	@ (80081dc <HAL_TIM_PWM_Start+0x21c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d00e      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a19      	ldr	r2, [pc, #100]	@ (80081c0 <HAL_TIM_PWM_Start+0x200>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d009      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a18      	ldr	r2, [pc, #96]	@ (80081c4 <HAL_TIM_PWM_Start+0x204>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d004      	beq.n	8008172 <HAL_TIM_PWM_Start+0x1b2>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a18      	ldr	r2, [pc, #96]	@ (80081d0 <HAL_TIM_PWM_Start+0x210>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d115      	bne.n	800819e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	4b19      	ldr	r3, [pc, #100]	@ (80081e0 <HAL_TIM_PWM_Start+0x220>)
 800817a:	4013      	ands	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	2b06      	cmp	r3, #6
 8008182:	d015      	beq.n	80081b0 <HAL_TIM_PWM_Start+0x1f0>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800818a:	d011      	beq.n	80081b0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0201 	orr.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800819c:	e008      	b.n	80081b0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f042 0201 	orr.w	r2, r2, #1
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e000      	b.n	80081b2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40012c00 	.word	0x40012c00
 80081c0:	40013400 	.word	0x40013400
 80081c4:	40014000 	.word	0x40014000
 80081c8:	40014400 	.word	0x40014400
 80081cc:	40014800 	.word	0x40014800
 80081d0:	40015000 	.word	0x40015000
 80081d4:	40000400 	.word	0x40000400
 80081d8:	40000800 	.word	0x40000800
 80081dc:	40000c00 	.word	0x40000c00
 80081e0:	00010007 	.word	0x00010007

080081e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e04c      	b.n	8008292 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	2b00      	cmp	r3, #0
 8008202:	d111      	bne.n	8008228 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f001 fc1f 	bl	8009a50 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a1f      	ldr	r2, [pc, #124]	@ (800829c <HAL_TIM_OnePulse_Init+0xb8>)
 800821e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	3304      	adds	r3, #4
 8008238:	4619      	mov	r1, r3
 800823a:	4610      	mov	r0, r2
 800823c:	f000 ff68 	bl	8009110 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0208 	bic.w	r2, r2, #8
 800824e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6819      	ldr	r1, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	683a      	ldr	r2, [r7, #0]
 800825c:	430a      	orrs	r2, r1
 800825e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	080082a1 	.word	0x080082a1

080082a0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80082cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80082d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80082dc:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082de:	7bfb      	ldrb	r3, [r7, #15]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d108      	bne.n	80082f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80082e4:	7bbb      	ldrb	r3, [r7, #14]
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d105      	bne.n	80082f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80082ea:	7b7b      	ldrb	r3, [r7, #13]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d102      	bne.n	80082f6 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80082f0:	7b3b      	ldrb	r3, [r7, #12]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d001      	beq.n	80082fa <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e059      	b.n	80083ae <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2202      	movs	r2, #2
 8008306:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2202      	movs	r2, #2
 8008316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	68da      	ldr	r2, [r3, #12]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f042 0202 	orr.w	r2, r2, #2
 8008328:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f042 0204 	orr.w	r2, r2, #4
 8008338:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2201      	movs	r2, #1
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fb5e 	bl	8009a04 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2201      	movs	r2, #1
 800834e:	2104      	movs	r1, #4
 8008350:	4618      	mov	r0, r3
 8008352:	f001 fb57 	bl	8009a04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a17      	ldr	r2, [pc, #92]	@ (80083b8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d018      	beq.n	8008392 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a15      	ldr	r2, [pc, #84]	@ (80083bc <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d013      	beq.n	8008392 <HAL_TIM_OnePulse_Start_IT+0xde>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a14      	ldr	r2, [pc, #80]	@ (80083c0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d00e      	beq.n	8008392 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a12      	ldr	r2, [pc, #72]	@ (80083c4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d009      	beq.n	8008392 <HAL_TIM_OnePulse_Start_IT+0xde>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d004      	beq.n	8008392 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a0f      	ldr	r2, [pc, #60]	@ (80083cc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d101      	bne.n	8008396 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008396:	2300      	movs	r3, #0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d007      	beq.n	80083ac <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80083aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	40012c00 	.word	0x40012c00
 80083bc:	40013400 	.word	0x40013400
 80083c0:	40014000 	.word	0x40014000
 80083c4:	40014400 	.word	0x40014400
 80083c8:	40014800 	.word	0x40014800
 80083cc:	40015000 	.word	0x40015000

080083d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b086      	sub	sp, #24
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0a2      	b.n	800852a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d111      	bne.n	8008414 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fb29 	bl	8009a50 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a4a      	ldr	r2, [pc, #296]	@ (8008534 <HAL_TIM_Encoder_Init+0x164>)
 800840a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800842a:	f023 0307 	bic.w	r3, r3, #7
 800842e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3304      	adds	r3, #4
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f000 fe68 	bl	8009110 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	689b      	ldr	r3, [r3, #8]
 8008446:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008468:	f023 0303 	bic.w	r3, r3, #3
 800846c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	689a      	ldr	r2, [r3, #8]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	699b      	ldr	r3, [r3, #24]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	4313      	orrs	r3, r2
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	4313      	orrs	r3, r2
 800847e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008486:	f023 030c 	bic.w	r3, r3, #12
 800848a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008492:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	021b      	lsls	r3, r3, #8
 80084a2:	4313      	orrs	r3, r2
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	011a      	lsls	r2, r3, #4
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6a1b      	ldr	r3, [r3, #32]
 80084b4:	031b      	lsls	r3, r3, #12
 80084b6:	4313      	orrs	r3, r2
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80084c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80084cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	685a      	ldr	r2, [r3, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	4313      	orrs	r3, r2
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4313      	orrs	r3, r2
 80084de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3718      	adds	r7, #24
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	080041b5 	.word	0x080041b5

08008538 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008548:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008550:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008558:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008560:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d110      	bne.n	800858a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008568:	7bfb      	ldrb	r3, [r7, #15]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d102      	bne.n	8008574 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d001      	beq.n	8008578 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e069      	b.n	800864c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2202      	movs	r2, #2
 800857c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008588:	e031      	b.n	80085ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	2b04      	cmp	r3, #4
 800858e:	d110      	bne.n	80085b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b01      	cmp	r3, #1
 8008594:	d102      	bne.n	800859c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008596:	7b3b      	ldrb	r3, [r7, #12]
 8008598:	2b01      	cmp	r3, #1
 800859a:	d001      	beq.n	80085a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e055      	b.n	800864c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2202      	movs	r2, #2
 80085a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80085b0:	e01d      	b.n	80085ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d108      	bne.n	80085ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085b8:	7bbb      	ldrb	r3, [r7, #14]
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d105      	bne.n	80085ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085be:	7b7b      	ldrb	r3, [r7, #13]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	d102      	bne.n	80085ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085c4:	7b3b      	ldrb	r3, [r7, #12]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d001      	beq.n	80085ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e03e      	b.n	800864c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2202      	movs	r2, #2
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2202      	movs	r2, #2
 80085da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_TIM_Encoder_Start+0xc4>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d008      	beq.n	800860c <HAL_TIM_Encoder_Start+0xd4>
 80085fa:	e00f      	b.n	800861c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2201      	movs	r2, #1
 8008602:	2100      	movs	r1, #0
 8008604:	4618      	mov	r0, r3
 8008606:	f001 f9fd 	bl	8009a04 <TIM_CCxChannelCmd>
      break;
 800860a:	e016      	b.n	800863a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2201      	movs	r2, #1
 8008612:	2104      	movs	r1, #4
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f9f5 	bl	8009a04 <TIM_CCxChannelCmd>
      break;
 800861a:	e00e      	b.n	800863a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2201      	movs	r2, #1
 8008622:	2100      	movs	r1, #0
 8008624:	4618      	mov	r0, r3
 8008626:	f001 f9ed 	bl	8009a04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2201      	movs	r2, #1
 8008630:	2104      	movs	r1, #4
 8008632:	4618      	mov	r0, r3
 8008634:	f001 f9e6 	bl	8009a04 <TIM_CCxChannelCmd>
      break;
 8008638:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f042 0201 	orr.w	r2, r2, #1
 8008648:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d026      	beq.n	80086c4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d021      	beq.n	80086c4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f06f 0202 	mvn.w	r2, #2
 8008688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	4798      	blx	r3
 80086a8:	e009      	b.n	80086be <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d026      	beq.n	800871c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d021      	beq.n	800871c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f06f 0204 	mvn.w	r2, #4
 80086e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d005      	beq.n	8008702 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	4798      	blx	r3
 8008700:	e009      	b.n	8008716 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d026      	beq.n	8008774 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b00      	cmp	r3, #0
 800872e:	d021      	beq.n	8008774 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f06f 0208 	mvn.w	r2, #8
 8008738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2204      	movs	r2, #4
 800873e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f003 0303 	and.w	r3, r3, #3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
 8008758:	e009      	b.n	800876e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	f003 0310 	and.w	r3, r3, #16
 800877a:	2b00      	cmp	r3, #0
 800877c:	d026      	beq.n	80087cc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f003 0310 	and.w	r3, r3, #16
 8008784:	2b00      	cmp	r3, #0
 8008786:	d021      	beq.n	80087cc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0210 	mvn.w	r2, #16
 8008790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2208      	movs	r2, #8
 8008796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d005      	beq.n	80087b2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	4798      	blx	r3
 80087b0:	e009      	b.n	80087c6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00e      	beq.n	80087f4 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f003 0301 	and.w	r3, r3, #1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d009      	beq.n	80087f4 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f06f 0201 	mvn.w	r2, #1
 80087e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d104      	bne.n	8008808 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00e      	beq.n	8008826 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d009      	beq.n	8008826 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800881a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00e      	beq.n	800884e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008836:	2b00      	cmp	r3, #0
 8008838:	d009      	beq.n	800884e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00e      	beq.n	8008876 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800885e:	2b00      	cmp	r3, #0
 8008860:	d009      	beq.n	8008876 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800886a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f003 0320 	and.w	r3, r3, #32
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00e      	beq.n	800889e <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0220 	mvn.w	r2, #32
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00e      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d009      	beq.n	80088c6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80088ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00e      	beq.n	80088ee <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80088e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00e      	beq.n	8008916 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800890a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00e      	beq.n	800893e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d009      	beq.n	800893e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800893e:	bf00      	nop
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
	...

08008948 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895e:	2b01      	cmp	r3, #1
 8008960:	d101      	bne.n	8008966 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008962:	2302      	movs	r3, #2
 8008964:	e0ff      	b.n	8008b66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b14      	cmp	r3, #20
 8008972:	f200 80f0 	bhi.w	8008b56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008976:	a201      	add	r2, pc, #4	@ (adr r2, 800897c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	080089d1 	.word	0x080089d1
 8008980:	08008b57 	.word	0x08008b57
 8008984:	08008b57 	.word	0x08008b57
 8008988:	08008b57 	.word	0x08008b57
 800898c:	08008a11 	.word	0x08008a11
 8008990:	08008b57 	.word	0x08008b57
 8008994:	08008b57 	.word	0x08008b57
 8008998:	08008b57 	.word	0x08008b57
 800899c:	08008a53 	.word	0x08008a53
 80089a0:	08008b57 	.word	0x08008b57
 80089a4:	08008b57 	.word	0x08008b57
 80089a8:	08008b57 	.word	0x08008b57
 80089ac:	08008a93 	.word	0x08008a93
 80089b0:	08008b57 	.word	0x08008b57
 80089b4:	08008b57 	.word	0x08008b57
 80089b8:	08008b57 	.word	0x08008b57
 80089bc:	08008ad5 	.word	0x08008ad5
 80089c0:	08008b57 	.word	0x08008b57
 80089c4:	08008b57 	.word	0x08008b57
 80089c8:	08008b57 	.word	0x08008b57
 80089cc:	08008b15 	.word	0x08008b15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 fc4e 	bl	8009278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f042 0208 	orr.w	r2, r2, #8
 80089ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0204 	bic.w	r2, r2, #4
 80089fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6999      	ldr	r1, [r3, #24]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	691a      	ldr	r2, [r3, #16]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	619a      	str	r2, [r3, #24]
      break;
 8008a0e:	e0a5      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	68b9      	ldr	r1, [r7, #8]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fcc8 	bl	80093ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	699a      	ldr	r2, [r3, #24]
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	699a      	ldr	r2, [r3, #24]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6999      	ldr	r1, [r3, #24]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	021a      	lsls	r2, r3, #8
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	619a      	str	r2, [r3, #24]
      break;
 8008a50:	e084      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fd3b 	bl	80094d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69da      	ldr	r2, [r3, #28]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f042 0208 	orr.w	r2, r2, #8
 8008a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f022 0204 	bic.w	r2, r2, #4
 8008a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69d9      	ldr	r1, [r3, #28]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	61da      	str	r2, [r3, #28]
      break;
 8008a90:	e064      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	4618      	mov	r0, r3
 8008a9a:	f000 fdad 	bl	80095f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	69da      	ldr	r2, [r3, #28]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69da      	ldr	r2, [r3, #28]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	69d9      	ldr	r1, [r3, #28]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	021a      	lsls	r2, r3, #8
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	61da      	str	r2, [r3, #28]
      break;
 8008ad2:	e043      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fe20 	bl	8009720 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0208 	orr.w	r2, r2, #8
 8008aee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f022 0204 	bic.w	r2, r2, #4
 8008afe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b12:	e023      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	68b9      	ldr	r1, [r7, #8]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 fe6a 	bl	80097f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b2e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b3e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008b54:	e002      	b.n	8008b5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	75fb      	strb	r3, [r7, #23]
      break;
 8008b5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop

08008b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_TIM_ConfigClockSource+0x1c>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e0f6      	b.n	8008d7a <HAL_TIM_ConfigClockSource+0x20a>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008baa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a6f      	ldr	r2, [pc, #444]	@ (8008d84 <HAL_TIM_ConfigClockSource+0x214>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	f000 80c1 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008bcc:	4a6d      	ldr	r2, [pc, #436]	@ (8008d84 <HAL_TIM_ConfigClockSource+0x214>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	f200 80c6 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bd4:	4a6c      	ldr	r2, [pc, #432]	@ (8008d88 <HAL_TIM_ConfigClockSource+0x218>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	f000 80b9 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008bdc:	4a6a      	ldr	r2, [pc, #424]	@ (8008d88 <HAL_TIM_ConfigClockSource+0x218>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	f200 80be 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008be4:	4a69      	ldr	r2, [pc, #420]	@ (8008d8c <HAL_TIM_ConfigClockSource+0x21c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	f000 80b1 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008bec:	4a67      	ldr	r2, [pc, #412]	@ (8008d8c <HAL_TIM_ConfigClockSource+0x21c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	f200 80b6 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008bf4:	4a66      	ldr	r2, [pc, #408]	@ (8008d90 <HAL_TIM_ConfigClockSource+0x220>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	f000 80a9 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008bfc:	4a64      	ldr	r2, [pc, #400]	@ (8008d90 <HAL_TIM_ConfigClockSource+0x220>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	f200 80ae 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c04:	4a63      	ldr	r2, [pc, #396]	@ (8008d94 <HAL_TIM_ConfigClockSource+0x224>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	f000 80a1 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c0c:	4a61      	ldr	r2, [pc, #388]	@ (8008d94 <HAL_TIM_ConfigClockSource+0x224>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	f200 80a6 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c14:	4a60      	ldr	r2, [pc, #384]	@ (8008d98 <HAL_TIM_ConfigClockSource+0x228>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	f000 8099 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8008d98 <HAL_TIM_ConfigClockSource+0x228>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	f200 809e 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c28:	f000 8091 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c2c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008c30:	f200 8096 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c38:	f000 8089 	beq.w	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c40:	f200 808e 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c48:	d03e      	beq.n	8008cc8 <HAL_TIM_ConfigClockSource+0x158>
 8008c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c4e:	f200 8087 	bhi.w	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c56:	f000 8086 	beq.w	8008d66 <HAL_TIM_ConfigClockSource+0x1f6>
 8008c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c5e:	d87f      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c60:	2b70      	cmp	r3, #112	@ 0x70
 8008c62:	d01a      	beq.n	8008c9a <HAL_TIM_ConfigClockSource+0x12a>
 8008c64:	2b70      	cmp	r3, #112	@ 0x70
 8008c66:	d87b      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c68:	2b60      	cmp	r3, #96	@ 0x60
 8008c6a:	d050      	beq.n	8008d0e <HAL_TIM_ConfigClockSource+0x19e>
 8008c6c:	2b60      	cmp	r3, #96	@ 0x60
 8008c6e:	d877      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c70:	2b50      	cmp	r3, #80	@ 0x50
 8008c72:	d03c      	beq.n	8008cee <HAL_TIM_ConfigClockSource+0x17e>
 8008c74:	2b50      	cmp	r3, #80	@ 0x50
 8008c76:	d873      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c78:	2b40      	cmp	r3, #64	@ 0x40
 8008c7a:	d058      	beq.n	8008d2e <HAL_TIM_ConfigClockSource+0x1be>
 8008c7c:	2b40      	cmp	r3, #64	@ 0x40
 8008c7e:	d86f      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c80:	2b30      	cmp	r3, #48	@ 0x30
 8008c82:	d064      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c84:	2b30      	cmp	r3, #48	@ 0x30
 8008c86:	d86b      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c88:	2b20      	cmp	r3, #32
 8008c8a:	d060      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c8c:	2b20      	cmp	r3, #32
 8008c8e:	d867      	bhi.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d05c      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	d05a      	beq.n	8008d4e <HAL_TIM_ConfigClockSource+0x1de>
 8008c98:	e062      	b.n	8008d60 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008caa:	f000 fe8b 	bl	80099c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68ba      	ldr	r2, [r7, #8]
 8008cc4:	609a      	str	r2, [r3, #8]
      break;
 8008cc6:	e04f      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008cd8:	f000 fe74 	bl	80099c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cea:	609a      	str	r2, [r3, #8]
      break;
 8008cec:	e03c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	f000 fde6 	bl	80098cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2150      	movs	r1, #80	@ 0x50
 8008d06:	4618      	mov	r0, r3
 8008d08:	f000 fe3f 	bl	800998a <TIM_ITRx_SetConfig>
      break;
 8008d0c:	e02c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f000 fe05 	bl	800992a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2160      	movs	r1, #96	@ 0x60
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 fe2f 	bl	800998a <TIM_ITRx_SetConfig>
      break;
 8008d2c:	e01c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	f000 fdc6 	bl	80098cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2140      	movs	r1, #64	@ 0x40
 8008d46:	4618      	mov	r0, r3
 8008d48:	f000 fe1f 	bl	800998a <TIM_ITRx_SetConfig>
      break;
 8008d4c:	e00c      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4619      	mov	r1, r3
 8008d58:	4610      	mov	r0, r2
 8008d5a:	f000 fe16 	bl	800998a <TIM_ITRx_SetConfig>
      break;
 8008d5e:	e003      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
      break;
 8008d64:	e000      	b.n	8008d68 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	00100070 	.word	0x00100070
 8008d88:	00100060 	.word	0x00100060
 8008d8c:	00100050 	.word	0x00100050
 8008d90:	00100040 	.word	0x00100040
 8008d94:	00100030 	.word	0x00100030
 8008d98:	00100020 	.word	0x00100020

08008d9c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008e08:	bf00      	nop
 8008e0a:	370c      	adds	r7, #12
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e12:	4770      	bx	lr

08008e14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b083      	sub	sp, #12
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e1c:	bf00      	nop
 8008e1e:	370c      	adds	r7, #12
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008e30:	bf00      	nop
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	607a      	str	r2, [r7, #4]
 8008e5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d101      	bne.n	8008e6c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e14a      	b.n	8009102 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	f040 80dd 	bne.w	8009034 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	2b1f      	cmp	r3, #31
 8008e7e:	f200 80d6 	bhi.w	800902e <HAL_TIM_RegisterCallback+0x1de>
 8008e82:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <HAL_TIM_RegisterCallback+0x38>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008f09 	.word	0x08008f09
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08008f19 	.word	0x08008f19
 8008e94:	08008f21 	.word	0x08008f21
 8008e98:	08008f29 	.word	0x08008f29
 8008e9c:	08008f31 	.word	0x08008f31
 8008ea0:	08008f39 	.word	0x08008f39
 8008ea4:	08008f41 	.word	0x08008f41
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f51 	.word	0x08008f51
 8008eb0:	08008f59 	.word	0x08008f59
 8008eb4:	08008f61 	.word	0x08008f61
 8008eb8:	08008f69 	.word	0x08008f69
 8008ebc:	08008f71 	.word	0x08008f71
 8008ec0:	08008f7b 	.word	0x08008f7b
 8008ec4:	08008f85 	.word	0x08008f85
 8008ec8:	08008f8f 	.word	0x08008f8f
 8008ecc:	08008f99 	.word	0x08008f99
 8008ed0:	08008fa3 	.word	0x08008fa3
 8008ed4:	08008fad 	.word	0x08008fad
 8008ed8:	08008fb7 	.word	0x08008fb7
 8008edc:	08008fc1 	.word	0x08008fc1
 8008ee0:	08008fcb 	.word	0x08008fcb
 8008ee4:	08008fd5 	.word	0x08008fd5
 8008ee8:	08008fdf 	.word	0x08008fdf
 8008eec:	08008fe9 	.word	0x08008fe9
 8008ef0:	08008ff3 	.word	0x08008ff3
 8008ef4:	08008ffd 	.word	0x08008ffd
 8008ef8:	08009007 	.word	0x08009007
 8008efc:	08009011 	.word	0x08009011
 8008f00:	0800901b 	.word	0x0800901b
 8008f04:	08009025 	.word	0x08009025
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008f0e:	e0f7      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008f16:	e0f3      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008f1e:	e0ef      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008f26:	e0eb      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008f2e:	e0e7      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008f36:	e0e3      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008f3e:	e0df      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008f46:	e0db      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008f4e:	e0d7      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f56:	e0d3      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f5e:	e0cf      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f66:	e0cb      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f6e:	e0c7      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f78:	e0c2      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008f82:	e0bd      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008f8c:	e0b8      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008f96:	e0b3      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008fa0:	e0ae      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008faa:	e0a9      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008fb4:	e0a4      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008fbe:	e09f      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008fc8:	e09a      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008fd2:	e095      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008fdc:	e090      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008fe6:	e08b      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008ff0:	e086      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008ffa:	e081      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009004:	e07c      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800900e:	e077      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009018:	e072      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009022:	e06d      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800902c:	e068      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	75fb      	strb	r3, [r7, #23]
        break;
 8009032:	e065      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b00      	cmp	r3, #0
 800903e:	d15d      	bne.n	80090fc <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009040:	7afb      	ldrb	r3, [r7, #11]
 8009042:	2b0d      	cmp	r3, #13
 8009044:	d857      	bhi.n	80090f6 <HAL_TIM_RegisterCallback+0x2a6>
 8009046:	a201      	add	r2, pc, #4	@ (adr r2, 800904c <HAL_TIM_RegisterCallback+0x1fc>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	08009085 	.word	0x08009085
 8009050:	0800908d 	.word	0x0800908d
 8009054:	08009095 	.word	0x08009095
 8009058:	0800909d 	.word	0x0800909d
 800905c:	080090a5 	.word	0x080090a5
 8009060:	080090ad 	.word	0x080090ad
 8009064:	080090b5 	.word	0x080090b5
 8009068:	080090bd 	.word	0x080090bd
 800906c:	080090c5 	.word	0x080090c5
 8009070:	080090cd 	.word	0x080090cd
 8009074:	080090d5 	.word	0x080090d5
 8009078:	080090dd 	.word	0x080090dd
 800907c:	080090e5 	.word	0x080090e5
 8009080:	080090ed 	.word	0x080090ed
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800908a:	e039      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009092:	e035      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800909a:	e031      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80090a2:	e02d      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80090aa:	e029      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80090b2:	e025      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80090ba:	e021      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80090c2:	e01d      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80090ca:	e019      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80090d2:	e015      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80090da:	e011      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80090e2:	e00d      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80090ea:	e009      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80090f4:	e004      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	75fb      	strb	r3, [r7, #23]
        break;
 80090fa:	e001      	b.n	8009100 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop

08009110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a4c      	ldr	r2, [pc, #304]	@ (8009254 <TIM_Base_SetConfig+0x144>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d017      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800912e:	d013      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a49      	ldr	r2, [pc, #292]	@ (8009258 <TIM_Base_SetConfig+0x148>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00f      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a48      	ldr	r2, [pc, #288]	@ (800925c <TIM_Base_SetConfig+0x14c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00b      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a47      	ldr	r2, [pc, #284]	@ (8009260 <TIM_Base_SetConfig+0x150>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d007      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a46      	ldr	r2, [pc, #280]	@ (8009264 <TIM_Base_SetConfig+0x154>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d003      	beq.n	8009158 <TIM_Base_SetConfig+0x48>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a45      	ldr	r2, [pc, #276]	@ (8009268 <TIM_Base_SetConfig+0x158>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d108      	bne.n	800916a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	4313      	orrs	r3, r2
 8009168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a39      	ldr	r2, [pc, #228]	@ (8009254 <TIM_Base_SetConfig+0x144>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d023      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009178:	d01f      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a36      	ldr	r2, [pc, #216]	@ (8009258 <TIM_Base_SetConfig+0x148>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d01b      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a35      	ldr	r2, [pc, #212]	@ (800925c <TIM_Base_SetConfig+0x14c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d017      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a34      	ldr	r2, [pc, #208]	@ (8009260 <TIM_Base_SetConfig+0x150>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d013      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a33      	ldr	r2, [pc, #204]	@ (8009264 <TIM_Base_SetConfig+0x154>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d00f      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	4a33      	ldr	r2, [pc, #204]	@ (800926c <TIM_Base_SetConfig+0x15c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d00b      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	4a32      	ldr	r2, [pc, #200]	@ (8009270 <TIM_Base_SetConfig+0x160>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d007      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a31      	ldr	r2, [pc, #196]	@ (8009274 <TIM_Base_SetConfig+0x164>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d003      	beq.n	80091ba <TIM_Base_SetConfig+0xaa>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a2c      	ldr	r2, [pc, #176]	@ (8009268 <TIM_Base_SetConfig+0x158>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d108      	bne.n	80091cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	695b      	ldr	r3, [r3, #20]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a18      	ldr	r2, [pc, #96]	@ (8009254 <TIM_Base_SetConfig+0x144>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d013      	beq.n	8009220 <TIM_Base_SetConfig+0x110>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a1a      	ldr	r2, [pc, #104]	@ (8009264 <TIM_Base_SetConfig+0x154>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00f      	beq.n	8009220 <TIM_Base_SetConfig+0x110>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1a      	ldr	r2, [pc, #104]	@ (800926c <TIM_Base_SetConfig+0x15c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00b      	beq.n	8009220 <TIM_Base_SetConfig+0x110>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a19      	ldr	r2, [pc, #100]	@ (8009270 <TIM_Base_SetConfig+0x160>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_Base_SetConfig+0x110>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a18      	ldr	r2, [pc, #96]	@ (8009274 <TIM_Base_SetConfig+0x164>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_Base_SetConfig+0x110>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a13      	ldr	r2, [pc, #76]	@ (8009268 <TIM_Base_SetConfig+0x158>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d103      	bne.n	8009228 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	691b      	ldr	r3, [r3, #16]
 8009232:	f003 0301 	and.w	r3, r3, #1
 8009236:	2b01      	cmp	r3, #1
 8009238:	d105      	bne.n	8009246 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	f023 0201 	bic.w	r2, r3, #1
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	611a      	str	r2, [r3, #16]
  }
}
 8009246:	bf00      	nop
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop
 8009254:	40012c00 	.word	0x40012c00
 8009258:	40000400 	.word	0x40000400
 800925c:	40000800 	.word	0x40000800
 8009260:	40000c00 	.word	0x40000c00
 8009264:	40013400 	.word	0x40013400
 8009268:	40015000 	.word	0x40015000
 800926c:	40014000 	.word	0x40014000
 8009270:	40014400 	.word	0x40014400
 8009274:	40014800 	.word	0x40014800

08009278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a1b      	ldr	r3, [r3, #32]
 800928c:	f023 0201 	bic.w	r2, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	685b      	ldr	r3, [r3, #4]
 8009298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	f023 0302 	bic.w	r3, r3, #2
 80092c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a30      	ldr	r2, [pc, #192]	@ (8009394 <TIM_OC1_SetConfig+0x11c>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d013      	beq.n	8009300 <TIM_OC1_SetConfig+0x88>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a2f      	ldr	r2, [pc, #188]	@ (8009398 <TIM_OC1_SetConfig+0x120>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d00f      	beq.n	8009300 <TIM_OC1_SetConfig+0x88>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	4a2e      	ldr	r2, [pc, #184]	@ (800939c <TIM_OC1_SetConfig+0x124>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d00b      	beq.n	8009300 <TIM_OC1_SetConfig+0x88>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4a2d      	ldr	r2, [pc, #180]	@ (80093a0 <TIM_OC1_SetConfig+0x128>)
 80092ec:	4293      	cmp	r3, r2
 80092ee:	d007      	beq.n	8009300 <TIM_OC1_SetConfig+0x88>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4a2c      	ldr	r2, [pc, #176]	@ (80093a4 <TIM_OC1_SetConfig+0x12c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d003      	beq.n	8009300 <TIM_OC1_SetConfig+0x88>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a2b      	ldr	r2, [pc, #172]	@ (80093a8 <TIM_OC1_SetConfig+0x130>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10c      	bne.n	800931a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	f023 0308 	bic.w	r3, r3, #8
 8009306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f023 0304 	bic.w	r3, r3, #4
 8009318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a1d      	ldr	r2, [pc, #116]	@ (8009394 <TIM_OC1_SetConfig+0x11c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d013      	beq.n	800934a <TIM_OC1_SetConfig+0xd2>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1c      	ldr	r2, [pc, #112]	@ (8009398 <TIM_OC1_SetConfig+0x120>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d00f      	beq.n	800934a <TIM_OC1_SetConfig+0xd2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a1b      	ldr	r2, [pc, #108]	@ (800939c <TIM_OC1_SetConfig+0x124>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d00b      	beq.n	800934a <TIM_OC1_SetConfig+0xd2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1a      	ldr	r2, [pc, #104]	@ (80093a0 <TIM_OC1_SetConfig+0x128>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d007      	beq.n	800934a <TIM_OC1_SetConfig+0xd2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a19      	ldr	r2, [pc, #100]	@ (80093a4 <TIM_OC1_SetConfig+0x12c>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d003      	beq.n	800934a <TIM_OC1_SetConfig+0xd2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a18      	ldr	r2, [pc, #96]	@ (80093a8 <TIM_OC1_SetConfig+0x130>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d111      	bne.n	800936e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009350:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009358:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	695b      	ldr	r3, [r3, #20]
 800935e:	693a      	ldr	r2, [r7, #16]
 8009360:	4313      	orrs	r3, r2
 8009362:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	4313      	orrs	r3, r2
 800936c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	68fa      	ldr	r2, [r7, #12]
 8009378:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	697a      	ldr	r2, [r7, #20]
 8009386:	621a      	str	r2, [r3, #32]
}
 8009388:	bf00      	nop
 800938a:	371c      	adds	r7, #28
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr
 8009394:	40012c00 	.word	0x40012c00
 8009398:	40013400 	.word	0x40013400
 800939c:	40014000 	.word	0x40014000
 80093a0:	40014400 	.word	0x40014400
 80093a4:	40014800 	.word	0x40014800
 80093a8:	40015000 	.word	0x40015000

080093ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a1b      	ldr	r3, [r3, #32]
 80093c0:	f023 0210 	bic.w	r2, r3, #16
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	021b      	lsls	r3, r3, #8
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f023 0320 	bic.w	r3, r3, #32
 80093fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	697a      	ldr	r2, [r7, #20]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a2c      	ldr	r2, [pc, #176]	@ (80094bc <TIM_OC2_SetConfig+0x110>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC2_SetConfig+0x74>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a2b      	ldr	r2, [pc, #172]	@ (80094c0 <TIM_OC2_SetConfig+0x114>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC2_SetConfig+0x74>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a2a      	ldr	r2, [pc, #168]	@ (80094c4 <TIM_OC2_SetConfig+0x118>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10d      	bne.n	800943c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800943a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a1f      	ldr	r2, [pc, #124]	@ (80094bc <TIM_OC2_SetConfig+0x110>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d013      	beq.n	800946c <TIM_OC2_SetConfig+0xc0>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a1e      	ldr	r2, [pc, #120]	@ (80094c0 <TIM_OC2_SetConfig+0x114>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d00f      	beq.n	800946c <TIM_OC2_SetConfig+0xc0>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	4a1e      	ldr	r2, [pc, #120]	@ (80094c8 <TIM_OC2_SetConfig+0x11c>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d00b      	beq.n	800946c <TIM_OC2_SetConfig+0xc0>
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	4a1d      	ldr	r2, [pc, #116]	@ (80094cc <TIM_OC2_SetConfig+0x120>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d007      	beq.n	800946c <TIM_OC2_SetConfig+0xc0>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a1c      	ldr	r2, [pc, #112]	@ (80094d0 <TIM_OC2_SetConfig+0x124>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d003      	beq.n	800946c <TIM_OC2_SetConfig+0xc0>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a17      	ldr	r2, [pc, #92]	@ (80094c4 <TIM_OC2_SetConfig+0x118>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d113      	bne.n	8009494 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009472:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800947a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	695b      	ldr	r3, [r3, #20]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	4313      	orrs	r3, r2
 8009486:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	685a      	ldr	r2, [r3, #4]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40012c00 	.word	0x40012c00
 80094c0:	40013400 	.word	0x40013400
 80094c4:	40015000 	.word	0x40015000
 80094c8:	40014000 	.word	0x40014000
 80094cc:	40014400 	.word	0x40014400
 80094d0:	40014800 	.word	0x40014800

080094d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b087      	sub	sp, #28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a1b      	ldr	r3, [r3, #32]
 80094e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	021b      	lsls	r3, r3, #8
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4a2b      	ldr	r2, [pc, #172]	@ (80095e0 <TIM_OC3_SetConfig+0x10c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d007      	beq.n	8009546 <TIM_OC3_SetConfig+0x72>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4a2a      	ldr	r2, [pc, #168]	@ (80095e4 <TIM_OC3_SetConfig+0x110>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d003      	beq.n	8009546 <TIM_OC3_SetConfig+0x72>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	4a29      	ldr	r2, [pc, #164]	@ (80095e8 <TIM_OC3_SetConfig+0x114>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d10d      	bne.n	8009562 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800954c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	697a      	ldr	r2, [r7, #20]
 8009556:	4313      	orrs	r3, r2
 8009558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a1e      	ldr	r2, [pc, #120]	@ (80095e0 <TIM_OC3_SetConfig+0x10c>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_OC3_SetConfig+0xbe>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a1d      	ldr	r2, [pc, #116]	@ (80095e4 <TIM_OC3_SetConfig+0x110>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_OC3_SetConfig+0xbe>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a1d      	ldr	r2, [pc, #116]	@ (80095ec <TIM_OC3_SetConfig+0x118>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d00b      	beq.n	8009592 <TIM_OC3_SetConfig+0xbe>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1c      	ldr	r2, [pc, #112]	@ (80095f0 <TIM_OC3_SetConfig+0x11c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_OC3_SetConfig+0xbe>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1b      	ldr	r2, [pc, #108]	@ (80095f4 <TIM_OC3_SetConfig+0x120>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_OC3_SetConfig+0xbe>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a16      	ldr	r2, [pc, #88]	@ (80095e8 <TIM_OC3_SetConfig+0x114>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d113      	bne.n	80095ba <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	693a      	ldr	r2, [r7, #16]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	011b      	lsls	r3, r3, #4
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	685a      	ldr	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	621a      	str	r2, [r3, #32]
}
 80095d4:	bf00      	nop
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40013400 	.word	0x40013400
 80095e8:	40015000 	.word	0x40015000
 80095ec:	40014000 	.word	0x40014000
 80095f0:	40014400 	.word	0x40014400
 80095f4:	40014800 	.word	0x40014800

080095f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b087      	sub	sp, #28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a1b      	ldr	r3, [r3, #32]
 8009606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6a1b      	ldr	r3, [r3, #32]
 800960c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	021b      	lsls	r3, r3, #8
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	4313      	orrs	r3, r2
 800963e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	031b      	lsls	r3, r3, #12
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a2c      	ldr	r2, [pc, #176]	@ (8009708 <TIM_OC4_SetConfig+0x110>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d007      	beq.n	800966c <TIM_OC4_SetConfig+0x74>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a2b      	ldr	r2, [pc, #172]	@ (800970c <TIM_OC4_SetConfig+0x114>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d003      	beq.n	800966c <TIM_OC4_SetConfig+0x74>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	4a2a      	ldr	r2, [pc, #168]	@ (8009710 <TIM_OC4_SetConfig+0x118>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d10d      	bne.n	8009688 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	031b      	lsls	r3, r3, #12
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	4313      	orrs	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009686:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4a1f      	ldr	r2, [pc, #124]	@ (8009708 <TIM_OC4_SetConfig+0x110>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d013      	beq.n	80096b8 <TIM_OC4_SetConfig+0xc0>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a1e      	ldr	r2, [pc, #120]	@ (800970c <TIM_OC4_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00f      	beq.n	80096b8 <TIM_OC4_SetConfig+0xc0>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a1e      	ldr	r2, [pc, #120]	@ (8009714 <TIM_OC4_SetConfig+0x11c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00b      	beq.n	80096b8 <TIM_OC4_SetConfig+0xc0>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009718 <TIM_OC4_SetConfig+0x120>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d007      	beq.n	80096b8 <TIM_OC4_SetConfig+0xc0>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a1c      	ldr	r2, [pc, #112]	@ (800971c <TIM_OC4_SetConfig+0x124>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <TIM_OC4_SetConfig+0xc0>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a17      	ldr	r2, [pc, #92]	@ (8009710 <TIM_OC4_SetConfig+0x118>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d113      	bne.n	80096e0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096be:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80096c6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	019b      	lsls	r3, r3, #6
 80096ce:	693a      	ldr	r2, [r7, #16]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	699b      	ldr	r3, [r3, #24]
 80096d8:	019b      	lsls	r3, r3, #6
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	693a      	ldr	r2, [r7, #16]
 80096e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	697a      	ldr	r2, [r7, #20]
 80096f8:	621a      	str	r2, [r3, #32]
}
 80096fa:	bf00      	nop
 80096fc:	371c      	adds	r7, #28
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	40012c00 	.word	0x40012c00
 800970c:	40013400 	.word	0x40013400
 8009710:	40015000 	.word	0x40015000
 8009714:	40014000 	.word	0x40014000
 8009718:	40014400 	.word	0x40014400
 800971c:	40014800 	.word	0x40014800

08009720 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009720:	b480      	push	{r7}
 8009722:	b087      	sub	sp, #28
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a1b      	ldr	r3, [r3, #32]
 800972e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800974e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009764:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	4a19      	ldr	r2, [pc, #100]	@ (80097dc <TIM_OC5_SetConfig+0xbc>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d013      	beq.n	80097a2 <TIM_OC5_SetConfig+0x82>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	4a18      	ldr	r2, [pc, #96]	@ (80097e0 <TIM_OC5_SetConfig+0xc0>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d00f      	beq.n	80097a2 <TIM_OC5_SetConfig+0x82>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4a17      	ldr	r2, [pc, #92]	@ (80097e4 <TIM_OC5_SetConfig+0xc4>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d00b      	beq.n	80097a2 <TIM_OC5_SetConfig+0x82>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a16      	ldr	r2, [pc, #88]	@ (80097e8 <TIM_OC5_SetConfig+0xc8>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d007      	beq.n	80097a2 <TIM_OC5_SetConfig+0x82>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	4a15      	ldr	r2, [pc, #84]	@ (80097ec <TIM_OC5_SetConfig+0xcc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d003      	beq.n	80097a2 <TIM_OC5_SetConfig+0x82>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a14      	ldr	r2, [pc, #80]	@ (80097f0 <TIM_OC5_SetConfig+0xd0>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d109      	bne.n	80097b6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	697a      	ldr	r2, [r7, #20]
 80097ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	621a      	str	r2, [r3, #32]
}
 80097d0:	bf00      	nop
 80097d2:	371c      	adds	r7, #28
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	40012c00 	.word	0x40012c00
 80097e0:	40013400 	.word	0x40013400
 80097e4:	40014000 	.word	0x40014000
 80097e8:	40014400 	.word	0x40014400
 80097ec:	40014800 	.word	0x40014800
 80097f0:	40015000 	.word	0x40015000

080097f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009822:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800983a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	051b      	lsls	r3, r3, #20
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a1a      	ldr	r2, [pc, #104]	@ (80098b4 <TIM_OC6_SetConfig+0xc0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d013      	beq.n	8009878 <TIM_OC6_SetConfig+0x84>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a19      	ldr	r2, [pc, #100]	@ (80098b8 <TIM_OC6_SetConfig+0xc4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00f      	beq.n	8009878 <TIM_OC6_SetConfig+0x84>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <TIM_OC6_SetConfig+0xc8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d00b      	beq.n	8009878 <TIM_OC6_SetConfig+0x84>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a17      	ldr	r2, [pc, #92]	@ (80098c0 <TIM_OC6_SetConfig+0xcc>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d007      	beq.n	8009878 <TIM_OC6_SetConfig+0x84>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a16      	ldr	r2, [pc, #88]	@ (80098c4 <TIM_OC6_SetConfig+0xd0>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d003      	beq.n	8009878 <TIM_OC6_SetConfig+0x84>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a15      	ldr	r2, [pc, #84]	@ (80098c8 <TIM_OC6_SetConfig+0xd4>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d109      	bne.n	800988c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800987e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	029b      	lsls	r3, r3, #10
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	4313      	orrs	r3, r2
 800988a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	685a      	ldr	r2, [r3, #4]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	621a      	str	r2, [r3, #32]
}
 80098a6:	bf00      	nop
 80098a8:	371c      	adds	r7, #28
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	40012c00 	.word	0x40012c00
 80098b8:	40013400 	.word	0x40013400
 80098bc:	40014000 	.word	0x40014000
 80098c0:	40014400 	.word	0x40014400
 80098c4:	40014800 	.word	0x40014800
 80098c8:	40015000 	.word	0x40015000

080098cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	6a1b      	ldr	r3, [r3, #32]
 80098e2:	f023 0201 	bic.w	r2, r3, #1
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80098f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	011b      	lsls	r3, r3, #4
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	4313      	orrs	r3, r2
 8009900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	f023 030a 	bic.w	r3, r3, #10
 8009908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800992a:	b480      	push	{r7}
 800992c:	b087      	sub	sp, #28
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a1b      	ldr	r3, [r3, #32]
 8009940:	f023 0210 	bic.w	r2, r3, #16
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	031b      	lsls	r3, r3, #12
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	4313      	orrs	r3, r2
 800995e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009966:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	011b      	lsls	r3, r3, #4
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	697a      	ldr	r2, [r7, #20]
 800997c:	621a      	str	r2, [r3, #32]
}
 800997e:	bf00      	nop
 8009980:	371c      	adds	r7, #28
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr

0800998a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800998a:	b480      	push	{r7}
 800998c:	b085      	sub	sp, #20
 800998e:	af00      	add	r7, sp, #0
 8009990:	6078      	str	r0, [r7, #4]
 8009992:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80099a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80099a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099a6:	683a      	ldr	r2, [r7, #0]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	f043 0307 	orr.w	r3, r3, #7
 80099b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	609a      	str	r2, [r3, #8]
}
 80099b8:	bf00      	nop
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80099de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	021a      	lsls	r2, r3, #8
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	431a      	orrs	r2, r3
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	697a      	ldr	r2, [r7, #20]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	697a      	ldr	r2, [r7, #20]
 80099f6:	609a      	str	r2, [r3, #8]
}
 80099f8:	bf00      	nop
 80099fa:	371c      	adds	r7, #28
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 031f 	and.w	r3, r3, #31
 8009a16:	2201      	movs	r2, #1
 8009a18:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a1a      	ldr	r2, [r3, #32]
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	43db      	mvns	r3, r3
 8009a26:	401a      	ands	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	6a1a      	ldr	r2, [r3, #32]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	6879      	ldr	r1, [r7, #4]
 8009a38:	fa01 f303 	lsl.w	r3, r1, r3
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	621a      	str	r2, [r3, #32]
}
 8009a42:	bf00      	nop
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
	...

08009a50 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a26      	ldr	r2, [pc, #152]	@ (8009af4 <TIM_ResetCallback+0xa4>)
 8009a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a25      	ldr	r2, [pc, #148]	@ (8009af8 <TIM_ResetCallback+0xa8>)
 8009a64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a24      	ldr	r2, [pc, #144]	@ (8009afc <TIM_ResetCallback+0xac>)
 8009a6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a23      	ldr	r2, [pc, #140]	@ (8009b00 <TIM_ResetCallback+0xb0>)
 8009a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a22      	ldr	r2, [pc, #136]	@ (8009b04 <TIM_ResetCallback+0xb4>)
 8009a7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a21      	ldr	r2, [pc, #132]	@ (8009b08 <TIM_ResetCallback+0xb8>)
 8009a84:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	4a20      	ldr	r2, [pc, #128]	@ (8009b0c <TIM_ResetCallback+0xbc>)
 8009a8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	4a1f      	ldr	r2, [pc, #124]	@ (8009b10 <TIM_ResetCallback+0xc0>)
 8009a94:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8009b14 <TIM_ResetCallback+0xc4>)
 8009a9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8009b18 <TIM_ResetCallback+0xc8>)
 8009aa4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8009b1c <TIM_ResetCallback+0xcc>)
 8009aac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8009b20 <TIM_ResetCallback+0xd0>)
 8009ab4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a1a      	ldr	r2, [pc, #104]	@ (8009b24 <TIM_ResetCallback+0xd4>)
 8009abc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a19      	ldr	r2, [pc, #100]	@ (8009b28 <TIM_ResetCallback+0xd8>)
 8009ac4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a18      	ldr	r2, [pc, #96]	@ (8009b2c <TIM_ResetCallback+0xdc>)
 8009acc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a17      	ldr	r2, [pc, #92]	@ (8009b30 <TIM_ResetCallback+0xe0>)
 8009ad4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	4a16      	ldr	r2, [pc, #88]	@ (8009b34 <TIM_ResetCallback+0xe4>)
 8009adc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	@ (8009b38 <TIM_ResetCallback+0xe8>)
 8009ae4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr
 8009af4:	08002d19 	.word	0x08002d19
 8009af8:	08008d9d 	.word	0x08008d9d
 8009afc:	08008e15 	.word	0x08008e15
 8009b00:	08008e29 	.word	0x08008e29
 8009b04:	08008dc5 	.word	0x08008dc5
 8009b08:	08008dd9 	.word	0x08008dd9
 8009b0c:	08008db1 	.word	0x08008db1
 8009b10:	08008ded 	.word	0x08008ded
 8009b14:	08008e01 	.word	0x08008e01
 8009b18:	08008e3d 	.word	0x08008e3d
 8009b1c:	08009d91 	.word	0x08009d91
 8009b20:	08009da5 	.word	0x08009da5
 8009b24:	08009db9 	.word	0x08009db9
 8009b28:	08009dcd 	.word	0x08009dcd
 8009b2c:	08009de1 	.word	0x08009de1
 8009b30:	08009df5 	.word	0x08009df5
 8009b34:	08009e09 	.word	0x08009e09
 8009b38:	08009e1d 	.word	0x08009e1d

08009b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d101      	bne.n	8009b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b50:	2302      	movs	r3, #2
 8009b52:	e074      	b.n	8009c3e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a34      	ldr	r2, [pc, #208]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d009      	beq.n	8009b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a33      	ldr	r2, [pc, #204]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d004      	beq.n	8009b92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a31      	ldr	r2, [pc, #196]	@ (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d108      	bne.n	8009ba4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009b98:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a21      	ldr	r2, [pc, #132]	@ (8009c4c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d022      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bd4:	d01d      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1f      	ldr	r2, [pc, #124]	@ (8009c58 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d018      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1d      	ldr	r2, [pc, #116]	@ (8009c5c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d013      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1c      	ldr	r2, [pc, #112]	@ (8009c60 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d00e      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a15      	ldr	r2, [pc, #84]	@ (8009c50 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d009      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a18      	ldr	r2, [pc, #96]	@ (8009c64 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d004      	beq.n	8009c12 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a11      	ldr	r2, [pc, #68]	@ (8009c54 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d10c      	bne.n	8009c2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40012c00 	.word	0x40012c00
 8009c50:	40013400 	.word	0x40013400
 8009c54:	40015000 	.word	0x40015000
 8009c58:	40000400 	.word	0x40000400
 8009c5c:	40000800 	.word	0x40000800
 8009c60:	40000c00 	.word	0x40000c00
 8009c64:	40014000 	.word	0x40014000

08009c68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d101      	bne.n	8009c84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c80:	2302      	movs	r3, #2
 8009c82:	e078      	b.n	8009d76 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	695b      	ldr	r3, [r3, #20]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cea:	4313      	orrs	r3, r2
 8009cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	041b      	lsls	r3, r3, #16
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	69db      	ldr	r3, [r3, #28]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a1c      	ldr	r2, [pc, #112]	@ (8009d84 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d009      	beq.n	8009d2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009d88 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d004      	beq.n	8009d2a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a19      	ldr	r2, [pc, #100]	@ (8009d8c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d11c      	bne.n	8009d64 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d34:	051b      	lsls	r3, r3, #20
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d60:	4313      	orrs	r3, r2
 8009d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3714      	adds	r7, #20
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40012c00 	.word	0x40012c00
 8009d88:	40013400 	.word	0x40013400
 8009d8c:	40015000 	.word	0x40015000

08009d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d98:	bf00      	nop
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009e10:	bf00      	nop
 8009e12:	370c      	adds	r7, #12
 8009e14:	46bd      	mov	sp, r7
 8009e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1a:	4770      	bx	lr

08009e1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009e24:	bf00      	nop
 8009e26:	370c      	adds	r7, #12
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr

08009e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e050      	b.n	8009ee4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d114      	bne.n	8009e76 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 fd5b 	bl	800a910 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d103      	bne.n	8009e6c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	4a21      	ldr	r2, [pc, #132]	@ (8009eec <HAL_UART_Init+0xbc>)
 8009e68:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2224      	movs	r2, #36	@ 0x24
 8009e7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f022 0201 	bic.w	r2, r2, #1
 8009e8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f001 f888 	bl	800afac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fd89 	bl	800a9b4 <UART_SetConfig>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d101      	bne.n	8009eac <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e01b      	b.n	8009ee4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685a      	ldr	r2, [r3, #4]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009eba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689a      	ldr	r2, [r3, #8]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009eca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0201 	orr.w	r2, r2, #1
 8009eda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f001 f907 	bl	800b0f0 <UART_CheckIdleState>
 8009ee2:	4603      	mov	r3, r0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3708      	adds	r7, #8
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	0800444d 	.word	0x0800444d

08009ef0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	607a      	str	r2, [r7, #4]
 8009efc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d109      	bne.n	8009f1c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e09c      	b.n	800a056 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f22:	2b20      	cmp	r3, #32
 8009f24:	d16c      	bne.n	800a000 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009f26:	7afb      	ldrb	r3, [r7, #11]
 8009f28:	2b0c      	cmp	r3, #12
 8009f2a:	d85e      	bhi.n	8009fea <HAL_UART_RegisterCallback+0xfa>
 8009f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f34 <HAL_UART_RegisterCallback+0x44>)
 8009f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f32:	bf00      	nop
 8009f34:	08009f69 	.word	0x08009f69
 8009f38:	08009f73 	.word	0x08009f73
 8009f3c:	08009f7d 	.word	0x08009f7d
 8009f40:	08009f87 	.word	0x08009f87
 8009f44:	08009f91 	.word	0x08009f91
 8009f48:	08009f9b 	.word	0x08009f9b
 8009f4c:	08009fa5 	.word	0x08009fa5
 8009f50:	08009faf 	.word	0x08009faf
 8009f54:	08009fb9 	.word	0x08009fb9
 8009f58:	08009fc3 	.word	0x08009fc3
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	08009fd7 	.word	0x08009fd7
 8009f64:	08009fe1 	.word	0x08009fe1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009f70:	e070      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009f7a:	e06b      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009f84:	e066      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009f8e:	e061      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009f98:	e05c      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009fa2:	e057      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009fac:	e052      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009fb6:	e04d      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009fc0:	e048      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009fca:	e043      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009fd4:	e03e      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009fde:	e039      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009fe8:	e034      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ff0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	75fb      	strb	r3, [r7, #23]
        break;
 8009ffe:	e029      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a006:	2b00      	cmp	r3, #0
 800a008:	d11a      	bne.n	800a040 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a00a:	7afb      	ldrb	r3, [r7, #11]
 800a00c:	2b0b      	cmp	r3, #11
 800a00e:	d002      	beq.n	800a016 <HAL_UART_RegisterCallback+0x126>
 800a010:	2b0c      	cmp	r3, #12
 800a012:	d005      	beq.n	800a020 <HAL_UART_RegisterCallback+0x130>
 800a014:	e009      	b.n	800a02a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a01e:	e019      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a028:	e014      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a030:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
        break;
 800a03e:	e009      	b.n	800a054 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a046:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
}
 800a056:	4618      	mov	r0, r3
 800a058:	371c      	adds	r7, #28
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop

0800a064 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08a      	sub	sp, #40	@ 0x28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	4613      	mov	r3, r2
 800a070:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a078:	2b20      	cmp	r3, #32
 800a07a:	d137      	bne.n	800a0ec <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d002      	beq.n	800a088 <HAL_UART_Receive_DMA+0x24>
 800a082:	88fb      	ldrh	r3, [r7, #6]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e030      	b.n	800a0ee <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a18      	ldr	r2, [pc, #96]	@ (800a0f8 <HAL_UART_Receive_DMA+0x94>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d01f      	beq.n	800a0dc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d018      	beq.n	800a0dc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	e853 3f00 	ldrex	r3, [r3]
 800a0b6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a0be:	627b      	str	r3, [r7, #36]	@ 0x24
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c8:	623b      	str	r3, [r7, #32]
 800a0ca:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0cc:	69f9      	ldr	r1, [r7, #28]
 800a0ce:	6a3a      	ldr	r2, [r7, #32]
 800a0d0:	e841 2300 	strex	r3, r2, [r1]
 800a0d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e6      	bne.n	800a0aa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a0dc:	88fb      	ldrh	r3, [r7, #6]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f001 f91c 	bl	800b320 <UART_Start_Receive_DMA>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	e000      	b.n	800a0ee <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a0ec:	2302      	movs	r3, #2
  }
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3728      	adds	r7, #40	@ 0x28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	40008000 	.word	0x40008000

0800a0fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b0ba      	sub	sp, #232	@ 0xe8
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	69db      	ldr	r3, [r3, #28]
 800a10a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a122:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a126:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a12a:	4013      	ands	r3, r2
 800a12c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a134:	2b00      	cmp	r3, #0
 800a136:	d11b      	bne.n	800a170 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d015      	beq.n	800a170 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d105      	bne.n	800a15c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 8312 	beq.w	800a78a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	4798      	blx	r3
      }
      return;
 800a16e:	e30c      	b.n	800a78a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 8129 	beq.w	800a3cc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a17a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a17e:	4b90      	ldr	r3, [pc, #576]	@ (800a3c0 <HAL_UART_IRQHandler+0x2c4>)
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a186:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a18a:	4b8e      	ldr	r3, [pc, #568]	@ (800a3c4 <HAL_UART_IRQHandler+0x2c8>)
 800a18c:	4013      	ands	r3, r2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f000 811c 	beq.w	800a3cc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a198:	f003 0301 	and.w	r3, r3, #1
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d011      	beq.n	800a1c4 <HAL_UART_IRQHandler+0xc8>
 800a1a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d00b      	beq.n	800a1c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ba:	f043 0201 	orr.w	r2, r3, #1
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1c8:	f003 0302 	and.w	r3, r3, #2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d011      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xf8>
 800a1d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00b      	beq.n	800a1f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a1ea:	f043 0204 	orr.w	r2, r3, #4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1f8:	f003 0304 	and.w	r3, r3, #4
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d011      	beq.n	800a224 <HAL_UART_IRQHandler+0x128>
 800a200:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00b      	beq.n	800a224 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	2204      	movs	r2, #4
 800a212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21a:	f043 0202 	orr.w	r2, r3, #2
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a228:	f003 0308 	and.w	r3, r3, #8
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d017      	beq.n	800a260 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a234:	f003 0320 	and.w	r3, r3, #32
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d105      	bne.n	800a248 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a23c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a240:	4b5f      	ldr	r3, [pc, #380]	@ (800a3c0 <HAL_UART_IRQHandler+0x2c4>)
 800a242:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2208      	movs	r2, #8
 800a24e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a256:	f043 0208 	orr.w	r2, r3, #8
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a264:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d012      	beq.n	800a292 <HAL_UART_IRQHandler+0x196>
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a270:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00c      	beq.n	800a292 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a280:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a288:	f043 0220 	orr.w	r2, r3, #32
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 8278 	beq.w	800a78e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d013      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d105      	bne.n	800a2c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a2ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d007      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e6:	2b40      	cmp	r3, #64	@ 0x40
 800a2e8:	d005      	beq.n	800a2f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a2ee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d058      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f001 f8f9 	bl	800b4ee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a306:	2b40      	cmp	r3, #64	@ 0x40
 800a308:	d148      	bne.n	800a39c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3308      	adds	r3, #8
 800a310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a318:	e853 3f00 	ldrex	r3, [r3]
 800a31c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a320:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a324:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3308      	adds	r3, #8
 800a332:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a336:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a33a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a342:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a346:	e841 2300 	strex	r3, r2, [r1]
 800a34a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a34e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1d9      	bne.n	800a30a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d017      	beq.n	800a390 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a366:	4a18      	ldr	r2, [pc, #96]	@ (800a3c8 <HAL_UART_IRQHandler+0x2cc>)
 800a368:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a370:	4618      	mov	r0, r3
 800a372:	f7fc f8c5 	bl	8006500 <HAL_DMA_Abort_IT>
 800a376:	4603      	mov	r3, r0
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d01f      	beq.n	800a3bc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a38a:	4610      	mov	r0, r2
 800a38c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a38e:	e015      	b.n	800a3bc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a39a:	e00f      	b.n	800a3bc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a6:	e009      	b.n	800a3bc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a3ba:	e1e8      	b.n	800a78e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3bc:	bf00      	nop
    return;
 800a3be:	e1e6      	b.n	800a78e <HAL_UART_IRQHandler+0x692>
 800a3c0:	10000001 	.word	0x10000001
 800a3c4:	04000120 	.word	0x04000120
 800a3c8:	0800b7b9 	.word	0x0800b7b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	f040 8176 	bne.w	800a6c2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3da:	f003 0310 	and.w	r3, r3, #16
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 816f 	beq.w	800a6c2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e8:	f003 0310 	and.w	r3, r3, #16
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 8168 	beq.w	800a6c2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	2210      	movs	r2, #16
 800a3f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a404:	2b40      	cmp	r3, #64	@ 0x40
 800a406:	f040 80dc 	bne.w	800a5c2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 80b1 	beq.w	800a584 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a428:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a42c:	429a      	cmp	r2, r3
 800a42e:	f080 80a9 	bcs.w	800a584 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a438:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0320 	and.w	r3, r3, #32
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f040 8087 	bne.w	800a55e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a45c:	e853 3f00 	ldrex	r3, [r3]
 800a460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a464:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a468:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a46c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a47a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a47e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a486:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a48a:	e841 2300 	strex	r3, r2, [r1]
 800a48e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a492:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a496:	2b00      	cmp	r3, #0
 800a498:	d1da      	bne.n	800a450 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a4a4:	e853 3f00 	ldrex	r3, [r3]
 800a4a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a4aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a4ac:	f023 0301 	bic.w	r3, r3, #1
 800a4b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3308      	adds	r3, #8
 800a4ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a4be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a4c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a4c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a4d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d1e1      	bne.n	800a49a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	3308      	adds	r3, #8
 800a4dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a4e0:	e853 3f00 	ldrex	r3, [r3]
 800a4e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a4e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a4e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3308      	adds	r3, #8
 800a4f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a4fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a4fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a502:	e841 2300 	strex	r3, r2, [r1]
 800a506:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d1e3      	bne.n	800a4d6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2220      	movs	r2, #32
 800a512:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2200      	movs	r2, #0
 800a51a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a524:	e853 3f00 	ldrex	r3, [r3]
 800a528:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a52a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a52c:	f023 0310 	bic.w	r3, r3, #16
 800a530:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	461a      	mov	r2, r3
 800a53a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a53e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a540:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a544:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a54c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e4      	bne.n	800a51c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fb ff78 	bl	800644e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2202      	movs	r2, #2
 800a562:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a576:	b292      	uxth	r2, r2
 800a578:	1a8a      	subs	r2, r1, r2
 800a57a:	b292      	uxth	r2, r2
 800a57c:	4611      	mov	r1, r2
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a582:	e106      	b.n	800a792 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a58a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a58e:	429a      	cmp	r2, r3
 800a590:	f040 80ff 	bne.w	800a792 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b20      	cmp	r3, #32
 800a5a4:	f040 80f5 	bne.w	800a792 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	4798      	blx	r3
      return;
 800a5c0:	e0e7      	b.n	800a792 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	1ad3      	subs	r3, r2, r3
 800a5d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	f000 80d9 	beq.w	800a796 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a5e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 80d4 	beq.w	800a796 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a602:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a610:	647b      	str	r3, [r7, #68]	@ 0x44
 800a612:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a614:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a618:	e841 2300 	strex	r3, r2, [r1]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a620:	2b00      	cmp	r3, #0
 800a622:	d1e4      	bne.n	800a5ee <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3308      	adds	r3, #8
 800a62a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	e853 3f00 	ldrex	r3, [r3]
 800a632:	623b      	str	r3, [r7, #32]
   return(result);
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a63a:	f023 0301 	bic.w	r3, r3, #1
 800a63e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	3308      	adds	r3, #8
 800a648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a64c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e1      	bne.n	800a624 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2220      	movs	r2, #32
 800a664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	60fb      	str	r3, [r7, #12]
   return(result);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 0310 	bic.w	r3, r3, #16
 800a688:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a696:	61fb      	str	r3, [r7, #28]
 800a698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69a:	69b9      	ldr	r1, [r7, #24]
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	e841 2300 	strex	r3, r2, [r1]
 800a6a2:	617b      	str	r3, [r7, #20]
   return(result);
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1e4      	bne.n	800a674 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a6b6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6c0:	e069      	b.n	800a796 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d010      	beq.n	800a6f0 <HAL_UART_IRQHandler+0x5f4>
 800a6ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a6e2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a6ee:	e055      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a6f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d014      	beq.n	800a726 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a6fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a704:	2b00      	cmp	r3, #0
 800a706:	d105      	bne.n	800a714 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a70c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d03e      	beq.n	800a79a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	4798      	blx	r3
    }
    return;
 800a724:	e039      	b.n	800a79a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a72a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d009      	beq.n	800a746 <HAL_UART_IRQHandler+0x64a>
 800a732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d003      	beq.n	800a746 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 f84e 	bl	800b7e0 <UART_EndTransmit_IT>
    return;
 800a744:	e02a      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a74a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00b      	beq.n	800a76a <HAL_UART_IRQHandler+0x66e>
 800a752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a756:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d005      	beq.n	800a76a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a768:	e018      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a76a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a76e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d012      	beq.n	800a79c <HAL_UART_IRQHandler+0x6a0>
 800a776:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	da0e      	bge.n	800a79c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a788:	e008      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a78a:	bf00      	nop
 800a78c:	e006      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
    return;
 800a78e:	bf00      	nop
 800a790:	e004      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a792:	bf00      	nop
 800a794:	e002      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
      return;
 800a796:	bf00      	nop
 800a798:	e000      	b.n	800a79c <HAL_UART_IRQHandler+0x6a0>
    return;
 800a79a:	bf00      	nop
  }
}
 800a79c:	37e8      	adds	r7, #232	@ 0xe8
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop

0800a7a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a09      	ldr	r2, [pc, #36]	@ (800a87c <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d009      	beq.n	800a870 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	615a      	str	r2, [r3, #20]
  }
}
 800a870:	bf00      	nop
 800a872:	370c      	adds	r7, #12
 800a874:	46bd      	mov	sp, r7
 800a876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87a:	4770      	bx	lr
 800a87c:	40008000 	.word	0x40008000

0800a880 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a880:	b480      	push	{r7}
 800a882:	b083      	sub	sp, #12
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a18      	ldr	r2, [pc, #96]	@ (800a8f0 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d027      	beq.n	800a8e2 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d120      	bne.n	800a8de <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HAL_UART_EnableReceiverTimeout+0x2a>
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e01c      	b.n	800a8e4 <HAL_UART_EnableReceiverTimeout+0x64>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2224      	movs	r2, #36	@ 0x24
 800a8b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685a      	ldr	r2, [r3, #4]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a8c8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2220      	movs	r2, #32
 800a8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e002      	b.n	800a8e4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e000      	b.n	800a8e4 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
  }
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	40008000 	.word	0x40008000

0800a8f4 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a902:	4618      	mov	r0, r3
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr
	...

0800a910 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a1a      	ldr	r2, [pc, #104]	@ (800a984 <UART_InitCallbacksToDefault+0x74>)
 800a91c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a19      	ldr	r2, [pc, #100]	@ (800a988 <UART_InitCallbacksToDefault+0x78>)
 800a924:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a18      	ldr	r2, [pc, #96]	@ (800a98c <UART_InitCallbacksToDefault+0x7c>)
 800a92c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a17      	ldr	r2, [pc, #92]	@ (800a990 <UART_InitCallbacksToDefault+0x80>)
 800a934:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a16      	ldr	r2, [pc, #88]	@ (800a994 <UART_InitCallbacksToDefault+0x84>)
 800a93c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a15      	ldr	r2, [pc, #84]	@ (800a998 <UART_InitCallbacksToDefault+0x88>)
 800a944:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a14      	ldr	r2, [pc, #80]	@ (800a99c <UART_InitCallbacksToDefault+0x8c>)
 800a94c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a13      	ldr	r2, [pc, #76]	@ (800a9a0 <UART_InitCallbacksToDefault+0x90>)
 800a954:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a12      	ldr	r2, [pc, #72]	@ (800a9a4 <UART_InitCallbacksToDefault+0x94>)
 800a95c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a11      	ldr	r2, [pc, #68]	@ (800a9a8 <UART_InitCallbacksToDefault+0x98>)
 800a964:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	4a10      	ldr	r2, [pc, #64]	@ (800a9ac <UART_InitCallbacksToDefault+0x9c>)
 800a96c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	4a0f      	ldr	r2, [pc, #60]	@ (800a9b0 <UART_InitCallbacksToDefault+0xa0>)
 800a974:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a978:	bf00      	nop
 800a97a:	370c      	adds	r7, #12
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	0800a7b9 	.word	0x0800a7b9
 800a988:	0800a7a5 	.word	0x0800a7a5
 800a98c:	0800a7cd 	.word	0x0800a7cd
 800a990:	08002d05 	.word	0x08002d05
 800a994:	0800a7e1 	.word	0x0800a7e1
 800a998:	0800a7f5 	.word	0x0800a7f5
 800a99c:	0800a809 	.word	0x0800a809
 800a9a0:	0800a81d 	.word	0x0800a81d
 800a9a4:	0800b83b 	.word	0x0800b83b
 800a9a8:	0800b84f 	.word	0x0800b84f
 800a9ac:	0800b863 	.word	0x0800b863
 800a9b0:	0800a831 	.word	0x0800a831

0800a9b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a9b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9b8:	b08c      	sub	sp, #48	@ 0x30
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	691b      	ldr	r3, [r3, #16]
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	695b      	ldr	r3, [r3, #20]
 800a9d2:	431a      	orrs	r2, r3
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	69db      	ldr	r3, [r3, #28]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4baa      	ldr	r3, [pc, #680]	@ (800ac8c <UART_SetConfig+0x2d8>)
 800a9e4:	4013      	ands	r3, r2
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	6812      	ldr	r2, [r2, #0]
 800a9ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9ec:	430b      	orrs	r3, r1
 800a9ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	699b      	ldr	r3, [r3, #24]
 800aa0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a9f      	ldr	r2, [pc, #636]	@ (800ac90 <UART_SetConfig+0x2dc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d004      	beq.n	800aa20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	689b      	ldr	r3, [r3, #8]
 800aa26:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800aa2a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa3e:	f023 010f 	bic.w	r1, r3, #15
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	430a      	orrs	r2, r1
 800aa4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a90      	ldr	r2, [pc, #576]	@ (800ac94 <UART_SetConfig+0x2e0>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d125      	bne.n	800aaa4 <UART_SetConfig+0xf0>
 800aa58:	4b8f      	ldr	r3, [pc, #572]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800aa5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa5e:	f003 0303 	and.w	r3, r3, #3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d81a      	bhi.n	800aa9c <UART_SetConfig+0xe8>
 800aa66:	a201      	add	r2, pc, #4	@ (adr r2, 800aa6c <UART_SetConfig+0xb8>)
 800aa68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6c:	0800aa7d 	.word	0x0800aa7d
 800aa70:	0800aa8d 	.word	0x0800aa8d
 800aa74:	0800aa85 	.word	0x0800aa85
 800aa78:	0800aa95 	.word	0x0800aa95
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa82:	e116      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800aa84:	2302      	movs	r3, #2
 800aa86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa8a:	e112      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800aa8c:	2304      	movs	r3, #4
 800aa8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa92:	e10e      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800aa94:	2308      	movs	r3, #8
 800aa96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa9a:	e10a      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800aa9c:	2310      	movs	r3, #16
 800aa9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaa2:	e106      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a7c      	ldr	r2, [pc, #496]	@ (800ac9c <UART_SetConfig+0x2e8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d138      	bne.n	800ab20 <UART_SetConfig+0x16c>
 800aaae:	4b7a      	ldr	r3, [pc, #488]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800aab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aab4:	f003 030c 	and.w	r3, r3, #12
 800aab8:	2b0c      	cmp	r3, #12
 800aaba:	d82d      	bhi.n	800ab18 <UART_SetConfig+0x164>
 800aabc:	a201      	add	r2, pc, #4	@ (adr r2, 800aac4 <UART_SetConfig+0x110>)
 800aabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac2:	bf00      	nop
 800aac4:	0800aaf9 	.word	0x0800aaf9
 800aac8:	0800ab19 	.word	0x0800ab19
 800aacc:	0800ab19 	.word	0x0800ab19
 800aad0:	0800ab19 	.word	0x0800ab19
 800aad4:	0800ab09 	.word	0x0800ab09
 800aad8:	0800ab19 	.word	0x0800ab19
 800aadc:	0800ab19 	.word	0x0800ab19
 800aae0:	0800ab19 	.word	0x0800ab19
 800aae4:	0800ab01 	.word	0x0800ab01
 800aae8:	0800ab19 	.word	0x0800ab19
 800aaec:	0800ab19 	.word	0x0800ab19
 800aaf0:	0800ab19 	.word	0x0800ab19
 800aaf4:	0800ab11 	.word	0x0800ab11
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aafe:	e0d8      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab00:	2302      	movs	r3, #2
 800ab02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab06:	e0d4      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0e:	e0d0      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab10:	2308      	movs	r3, #8
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab16:	e0cc      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e0c8      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a5e      	ldr	r2, [pc, #376]	@ (800aca0 <UART_SetConfig+0x2ec>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d125      	bne.n	800ab76 <UART_SetConfig+0x1c2>
 800ab2a:	4b5b      	ldr	r3, [pc, #364]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ab34:	2b30      	cmp	r3, #48	@ 0x30
 800ab36:	d016      	beq.n	800ab66 <UART_SetConfig+0x1b2>
 800ab38:	2b30      	cmp	r3, #48	@ 0x30
 800ab3a:	d818      	bhi.n	800ab6e <UART_SetConfig+0x1ba>
 800ab3c:	2b20      	cmp	r3, #32
 800ab3e:	d00a      	beq.n	800ab56 <UART_SetConfig+0x1a2>
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	d814      	bhi.n	800ab6e <UART_SetConfig+0x1ba>
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d002      	beq.n	800ab4e <UART_SetConfig+0x19a>
 800ab48:	2b10      	cmp	r3, #16
 800ab4a:	d008      	beq.n	800ab5e <UART_SetConfig+0x1aa>
 800ab4c:	e00f      	b.n	800ab6e <UART_SetConfig+0x1ba>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab54:	e0ad      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab56:	2302      	movs	r3, #2
 800ab58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab5c:	e0a9      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab5e:	2304      	movs	r3, #4
 800ab60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab64:	e0a5      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab66:	2308      	movs	r3, #8
 800ab68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab6c:	e0a1      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab6e:	2310      	movs	r3, #16
 800ab70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab74:	e09d      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a4a      	ldr	r2, [pc, #296]	@ (800aca4 <UART_SetConfig+0x2f0>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d125      	bne.n	800abcc <UART_SetConfig+0x218>
 800ab80:	4b45      	ldr	r3, [pc, #276]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ab8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab8c:	d016      	beq.n	800abbc <UART_SetConfig+0x208>
 800ab8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab90:	d818      	bhi.n	800abc4 <UART_SetConfig+0x210>
 800ab92:	2b80      	cmp	r3, #128	@ 0x80
 800ab94:	d00a      	beq.n	800abac <UART_SetConfig+0x1f8>
 800ab96:	2b80      	cmp	r3, #128	@ 0x80
 800ab98:	d814      	bhi.n	800abc4 <UART_SetConfig+0x210>
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <UART_SetConfig+0x1f0>
 800ab9e:	2b40      	cmp	r3, #64	@ 0x40
 800aba0:	d008      	beq.n	800abb4 <UART_SetConfig+0x200>
 800aba2:	e00f      	b.n	800abc4 <UART_SetConfig+0x210>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abaa:	e082      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800abac:	2302      	movs	r3, #2
 800abae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb2:	e07e      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800abb4:	2304      	movs	r3, #4
 800abb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abba:	e07a      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800abbc:	2308      	movs	r3, #8
 800abbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abc2:	e076      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800abc4:	2310      	movs	r3, #16
 800abc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abca:	e072      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a35      	ldr	r2, [pc, #212]	@ (800aca8 <UART_SetConfig+0x2f4>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d12a      	bne.n	800ac2c <UART_SetConfig+0x278>
 800abd6:	4b30      	ldr	r3, [pc, #192]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800abd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abdc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abe0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abe4:	d01a      	beq.n	800ac1c <UART_SetConfig+0x268>
 800abe6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800abea:	d81b      	bhi.n	800ac24 <UART_SetConfig+0x270>
 800abec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf0:	d00c      	beq.n	800ac0c <UART_SetConfig+0x258>
 800abf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf6:	d815      	bhi.n	800ac24 <UART_SetConfig+0x270>
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d003      	beq.n	800ac04 <UART_SetConfig+0x250>
 800abfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac00:	d008      	beq.n	800ac14 <UART_SetConfig+0x260>
 800ac02:	e00f      	b.n	800ac24 <UART_SetConfig+0x270>
 800ac04:	2300      	movs	r3, #0
 800ac06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0a:	e052      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac12:	e04e      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac14:	2304      	movs	r3, #4
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1a:	e04a      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac1c:	2308      	movs	r3, #8
 800ac1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac22:	e046      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac24:	2310      	movs	r3, #16
 800ac26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac2a:	e042      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a17      	ldr	r2, [pc, #92]	@ (800ac90 <UART_SetConfig+0x2dc>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d13a      	bne.n	800acac <UART_SetConfig+0x2f8>
 800ac36:	4b18      	ldr	r3, [pc, #96]	@ (800ac98 <UART_SetConfig+0x2e4>)
 800ac38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ac3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ac40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac44:	d01a      	beq.n	800ac7c <UART_SetConfig+0x2c8>
 800ac46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ac4a:	d81b      	bhi.n	800ac84 <UART_SetConfig+0x2d0>
 800ac4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac50:	d00c      	beq.n	800ac6c <UART_SetConfig+0x2b8>
 800ac52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac56:	d815      	bhi.n	800ac84 <UART_SetConfig+0x2d0>
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d003      	beq.n	800ac64 <UART_SetConfig+0x2b0>
 800ac5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac60:	d008      	beq.n	800ac74 <UART_SetConfig+0x2c0>
 800ac62:	e00f      	b.n	800ac84 <UART_SetConfig+0x2d0>
 800ac64:	2300      	movs	r3, #0
 800ac66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac6a:	e022      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac72:	e01e      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac74:	2304      	movs	r3, #4
 800ac76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac7a:	e01a      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac7c:	2308      	movs	r3, #8
 800ac7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac82:	e016      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac84:	2310      	movs	r3, #16
 800ac86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac8a:	e012      	b.n	800acb2 <UART_SetConfig+0x2fe>
 800ac8c:	cfff69f3 	.word	0xcfff69f3
 800ac90:	40008000 	.word	0x40008000
 800ac94:	40013800 	.word	0x40013800
 800ac98:	40021000 	.word	0x40021000
 800ac9c:	40004400 	.word	0x40004400
 800aca0:	40004800 	.word	0x40004800
 800aca4:	40004c00 	.word	0x40004c00
 800aca8:	40005000 	.word	0x40005000
 800acac:	2310      	movs	r3, #16
 800acae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4aae      	ldr	r2, [pc, #696]	@ (800af70 <UART_SetConfig+0x5bc>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	f040 8097 	bne.w	800adec <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800acbe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800acc2:	2b08      	cmp	r3, #8
 800acc4:	d823      	bhi.n	800ad0e <UART_SetConfig+0x35a>
 800acc6:	a201      	add	r2, pc, #4	@ (adr r2, 800accc <UART_SetConfig+0x318>)
 800acc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800accc:	0800acf1 	.word	0x0800acf1
 800acd0:	0800ad0f 	.word	0x0800ad0f
 800acd4:	0800acf9 	.word	0x0800acf9
 800acd8:	0800ad0f 	.word	0x0800ad0f
 800acdc:	0800acff 	.word	0x0800acff
 800ace0:	0800ad0f 	.word	0x0800ad0f
 800ace4:	0800ad0f 	.word	0x0800ad0f
 800ace8:	0800ad0f 	.word	0x0800ad0f
 800acec:	0800ad07 	.word	0x0800ad07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf0:	f7fc fcf6 	bl	80076e0 <HAL_RCC_GetPCLK1Freq>
 800acf4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acf6:	e010      	b.n	800ad1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acf8:	4b9e      	ldr	r3, [pc, #632]	@ (800af74 <UART_SetConfig+0x5c0>)
 800acfa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acfc:	e00d      	b.n	800ad1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acfe:	f7fc fc81 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800ad02:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad04:	e009      	b.n	800ad1a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ad0c:	e005      	b.n	800ad1a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ad18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8130 	beq.w	800af82 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad26:	4a94      	ldr	r2, [pc, #592]	@ (800af78 <UART_SetConfig+0x5c4>)
 800ad28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad30:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad34:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	685a      	ldr	r2, [r3, #4]
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	005b      	lsls	r3, r3, #1
 800ad3e:	4413      	add	r3, r2
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d305      	bcc.n	800ad52 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ad4c:	69ba      	ldr	r2, [r7, #24]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d903      	bls.n	800ad5a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad58:	e113      	b.n	800af82 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	60bb      	str	r3, [r7, #8]
 800ad60:	60fa      	str	r2, [r7, #12]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad66:	4a84      	ldr	r2, [pc, #528]	@ (800af78 <UART_SetConfig+0x5c4>)
 800ad68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	2200      	movs	r2, #0
 800ad70:	603b      	str	r3, [r7, #0]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad7c:	f7f5 fe8a 	bl	8000a94 <__aeabi_uldivmod>
 800ad80:	4602      	mov	r2, r0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4610      	mov	r0, r2
 800ad86:	4619      	mov	r1, r3
 800ad88:	f04f 0200 	mov.w	r2, #0
 800ad8c:	f04f 0300 	mov.w	r3, #0
 800ad90:	020b      	lsls	r3, r1, #8
 800ad92:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad96:	0202      	lsls	r2, r0, #8
 800ad98:	6979      	ldr	r1, [r7, #20]
 800ad9a:	6849      	ldr	r1, [r1, #4]
 800ad9c:	0849      	lsrs	r1, r1, #1
 800ad9e:	2000      	movs	r0, #0
 800ada0:	460c      	mov	r4, r1
 800ada2:	4605      	mov	r5, r0
 800ada4:	eb12 0804 	adds.w	r8, r2, r4
 800ada8:	eb43 0905 	adc.w	r9, r3, r5
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	469a      	mov	sl, r3
 800adb4:	4693      	mov	fp, r2
 800adb6:	4652      	mov	r2, sl
 800adb8:	465b      	mov	r3, fp
 800adba:	4640      	mov	r0, r8
 800adbc:	4649      	mov	r1, r9
 800adbe:	f7f5 fe69 	bl	8000a94 <__aeabi_uldivmod>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4613      	mov	r3, r2
 800adc8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800add0:	d308      	bcc.n	800ade4 <UART_SetConfig+0x430>
 800add2:	6a3b      	ldr	r3, [r7, #32]
 800add4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800add8:	d204      	bcs.n	800ade4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	6a3a      	ldr	r2, [r7, #32]
 800ade0:	60da      	str	r2, [r3, #12]
 800ade2:	e0ce      	b.n	800af82 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800adea:	e0ca      	b.n	800af82 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800adf4:	d166      	bne.n	800aec4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800adf6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adfa:	2b08      	cmp	r3, #8
 800adfc:	d827      	bhi.n	800ae4e <UART_SetConfig+0x49a>
 800adfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ae04 <UART_SetConfig+0x450>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae29 	.word	0x0800ae29
 800ae08:	0800ae31 	.word	0x0800ae31
 800ae0c:	0800ae39 	.word	0x0800ae39
 800ae10:	0800ae4f 	.word	0x0800ae4f
 800ae14:	0800ae3f 	.word	0x0800ae3f
 800ae18:	0800ae4f 	.word	0x0800ae4f
 800ae1c:	0800ae4f 	.word	0x0800ae4f
 800ae20:	0800ae4f 	.word	0x0800ae4f
 800ae24:	0800ae47 	.word	0x0800ae47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae28:	f7fc fc5a 	bl	80076e0 <HAL_RCC_GetPCLK1Freq>
 800ae2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae2e:	e014      	b.n	800ae5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae30:	f7fc fc6c 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 800ae34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae36:	e010      	b.n	800ae5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae38:	4b4e      	ldr	r3, [pc, #312]	@ (800af74 <UART_SetConfig+0x5c0>)
 800ae3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae3c:	e00d      	b.n	800ae5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae3e:	f7fc fbe1 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800ae42:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae44:	e009      	b.n	800ae5a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae4c:	e005      	b.n	800ae5a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ae58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8090 	beq.w	800af82 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae66:	4a44      	ldr	r2, [pc, #272]	@ (800af78 <UART_SetConfig+0x5c4>)
 800ae68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae74:	005a      	lsls	r2, r3, #1
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	441a      	add	r2, r3
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae88:	6a3b      	ldr	r3, [r7, #32]
 800ae8a:	2b0f      	cmp	r3, #15
 800ae8c:	d916      	bls.n	800aebc <UART_SetConfig+0x508>
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae94:	d212      	bcs.n	800aebc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	f023 030f 	bic.w	r3, r3, #15
 800ae9e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	8bfb      	ldrh	r3, [r7, #30]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	8bfa      	ldrh	r2, [r7, #30]
 800aeb8:	60da      	str	r2, [r3, #12]
 800aeba:	e062      	b.n	800af82 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800aec2:	e05e      	b.n	800af82 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800aec4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d828      	bhi.n	800af1e <UART_SetConfig+0x56a>
 800aecc:	a201      	add	r2, pc, #4	@ (adr r2, 800aed4 <UART_SetConfig+0x520>)
 800aece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed2:	bf00      	nop
 800aed4:	0800aef9 	.word	0x0800aef9
 800aed8:	0800af01 	.word	0x0800af01
 800aedc:	0800af09 	.word	0x0800af09
 800aee0:	0800af1f 	.word	0x0800af1f
 800aee4:	0800af0f 	.word	0x0800af0f
 800aee8:	0800af1f 	.word	0x0800af1f
 800aeec:	0800af1f 	.word	0x0800af1f
 800aef0:	0800af1f 	.word	0x0800af1f
 800aef4:	0800af17 	.word	0x0800af17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aef8:	f7fc fbf2 	bl	80076e0 <HAL_RCC_GetPCLK1Freq>
 800aefc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aefe:	e014      	b.n	800af2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af00:	f7fc fc04 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 800af04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af06:	e010      	b.n	800af2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af08:	4b1a      	ldr	r3, [pc, #104]	@ (800af74 <UART_SetConfig+0x5c0>)
 800af0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af0c:	e00d      	b.n	800af2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af0e:	f7fc fb79 	bl	8007604 <HAL_RCC_GetSysClockFreq>
 800af12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800af14:	e009      	b.n	800af2a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800af1c:	e005      	b.n	800af2a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800af28:	bf00      	nop
    }

    if (pclk != 0U)
 800af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d028      	beq.n	800af82 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af34:	4a10      	ldr	r2, [pc, #64]	@ (800af78 <UART_SetConfig+0x5c4>)
 800af36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af3a:	461a      	mov	r2, r3
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	085b      	lsrs	r3, r3, #1
 800af48:	441a      	add	r2, r3
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	685b      	ldr	r3, [r3, #4]
 800af4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	2b0f      	cmp	r3, #15
 800af58:	d910      	bls.n	800af7c <UART_SetConfig+0x5c8>
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af60:	d20c      	bcs.n	800af7c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	b29a      	uxth	r2, r3
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	e009      	b.n	800af82 <UART_SetConfig+0x5ce>
 800af6e:	bf00      	nop
 800af70:	40008000 	.word	0x40008000
 800af74:	00f42400 	.word	0x00f42400
 800af78:	0800dafc 	.word	0x0800dafc
      }
      else
      {
        ret = HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2201      	movs	r2, #1
 800af86:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2201      	movs	r2, #1
 800af8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2200      	movs	r2, #0
 800af96:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	2200      	movs	r2, #0
 800af9c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af9e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3730      	adds	r7, #48	@ 0x30
 800afa6:	46bd      	mov	sp, r7
 800afa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800afac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00a      	beq.n	800afd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afda:	f003 0301 	and.w	r3, r3, #1
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00a      	beq.n	800b01a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	430a      	orrs	r2, r1
 800b018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	d00a      	beq.n	800b03c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00a      	beq.n	800b05e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	430a      	orrs	r2, r1
 800b05c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b062:	f003 0320 	and.w	r3, r3, #32
 800b066:	2b00      	cmp	r3, #0
 800b068:	d00a      	beq.n	800b080 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	430a      	orrs	r2, r1
 800b07e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d01a      	beq.n	800b0c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	430a      	orrs	r2, r1
 800b0a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0aa:	d10a      	bne.n	800b0c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	430a      	orrs	r2, r1
 800b0c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00a      	beq.n	800b0e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	430a      	orrs	r2, r1
 800b0e2:	605a      	str	r2, [r3, #4]
  }
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b098      	sub	sp, #96	@ 0x60
 800b0f4:	af02      	add	r7, sp, #8
 800b0f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b100:	f7f9 faee 	bl	80046e0 <HAL_GetTick>
 800b104:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0308 	and.w	r3, r3, #8
 800b110:	2b08      	cmp	r3, #8
 800b112:	d12f      	bne.n	800b174 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b114:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b118:	9300      	str	r3, [sp, #0]
 800b11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b11c:	2200      	movs	r2, #0
 800b11e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 f88e 	bl	800b244 <UART_WaitOnFlagUntilTimeout>
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d022      	beq.n	800b174 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b136:	e853 3f00 	ldrex	r3, [r3]
 800b13a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b142:	653b      	str	r3, [r7, #80]	@ 0x50
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	461a      	mov	r2, r3
 800b14a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b14c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b14e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b150:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b154:	e841 2300 	strex	r3, r2, [r1]
 800b158:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b15a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1e6      	bne.n	800b12e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2220      	movs	r2, #32
 800b164:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e063      	b.n	800b23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f003 0304 	and.w	r3, r3, #4
 800b17e:	2b04      	cmp	r3, #4
 800b180:	d149      	bne.n	800b216 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b182:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b18a:	2200      	movs	r2, #0
 800b18c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f857 	bl	800b244 <UART_WaitOnFlagUntilTimeout>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d03c      	beq.n	800b216 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1a4:	e853 3f00 	ldrex	r3, [r3]
 800b1a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1c2:	e841 2300 	strex	r3, r2, [r1]
 800b1c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1e6      	bne.n	800b19c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	e853 3f00 	ldrex	r3, [r3]
 800b1dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f023 0301 	bic.w	r3, r3, #1
 800b1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3308      	adds	r3, #8
 800b1ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1ee:	61fa      	str	r2, [r7, #28]
 800b1f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	69b9      	ldr	r1, [r7, #24]
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	617b      	str	r3, [r7, #20]
   return(result);
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e5      	bne.n	800b1ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2220      	movs	r2, #32
 800b206:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b212:	2303      	movs	r3, #3
 800b214:	e012      	b.n	800b23c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2220      	movs	r2, #32
 800b222:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3758      	adds	r7, #88	@ 0x58
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	4613      	mov	r3, r2
 800b252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b254:	e04f      	b.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25c:	d04b      	beq.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b25e:	f7f9 fa3f 	bl	80046e0 <HAL_GetTick>
 800b262:	4602      	mov	r2, r0
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	1ad3      	subs	r3, r2, r3
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d302      	bcc.n	800b274 <UART_WaitOnFlagUntilTimeout+0x30>
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d101      	bne.n	800b278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b274:	2303      	movs	r3, #3
 800b276:	e04e      	b.n	800b316 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 0304 	and.w	r3, r3, #4
 800b282:	2b00      	cmp	r3, #0
 800b284:	d037      	beq.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2b80      	cmp	r3, #128	@ 0x80
 800b28a:	d034      	beq.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2b40      	cmp	r3, #64	@ 0x40
 800b290:	d031      	beq.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	f003 0308 	and.w	r3, r3, #8
 800b29c:	2b08      	cmp	r3, #8
 800b29e:	d110      	bne.n	800b2c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f920 	bl	800b4ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2208      	movs	r2, #8
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e029      	b.n	800b316 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2d0:	d111      	bne.n	800b2f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b2da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2dc:	68f8      	ldr	r0, [r7, #12]
 800b2de:	f000 f906 	bl	800b4ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2220      	movs	r2, #32
 800b2e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e00f      	b.n	800b316 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	69da      	ldr	r2, [r3, #28]
 800b2fc:	68bb      	ldr	r3, [r7, #8]
 800b2fe:	4013      	ands	r3, r2
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	429a      	cmp	r2, r3
 800b304:	bf0c      	ite	eq
 800b306:	2301      	moveq	r3, #1
 800b308:	2300      	movne	r3, #0
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	79fb      	ldrb	r3, [r7, #7]
 800b310:	429a      	cmp	r2, r3
 800b312:	d0a0      	beq.n	800b256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b096      	sub	sp, #88	@ 0x58
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	4613      	mov	r3, r2
 800b32c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	68ba      	ldr	r2, [r7, #8]
 800b332:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	88fa      	ldrh	r2, [r7, #6]
 800b338:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2222      	movs	r2, #34	@ 0x22
 800b348:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b352:	2b00      	cmp	r3, #0
 800b354:	d02d      	beq.n	800b3b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b35c:	4a40      	ldr	r2, [pc, #256]	@ (800b460 <UART_Start_Receive_DMA+0x140>)
 800b35e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b366:	4a3f      	ldr	r2, [pc, #252]	@ (800b464 <UART_Start_Receive_DMA+0x144>)
 800b368:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b370:	4a3d      	ldr	r2, [pc, #244]	@ (800b468 <UART_Start_Receive_DMA+0x148>)
 800b372:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b37a:	2200      	movs	r2, #0
 800b37c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	3324      	adds	r3, #36	@ 0x24
 800b38a:	4619      	mov	r1, r3
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b390:	461a      	mov	r2, r3
 800b392:	88fb      	ldrh	r3, [r7, #6]
 800b394:	f7fa ffe0 	bl	8006358 <HAL_DMA_Start_IT>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d009      	beq.n	800b3b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2210      	movs	r2, #16
 800b3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e051      	b.n	800b456 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d018      	beq.n	800b3ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3c2:	e853 3f00 	ldrex	r3, [r3]
 800b3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b3d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b3de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3e0:	e841 2300 	strex	r3, r2, [r1]
 800b3e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b3e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1e6      	bne.n	800b3ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3308      	adds	r3, #8
 800b3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	e853 3f00 	ldrex	r3, [r3]
 800b3fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	653b      	str	r3, [r7, #80]	@ 0x50
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b40c:	637a      	str	r2, [r7, #52]	@ 0x34
 800b40e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b412:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e5      	bne.n	800b3ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3308      	adds	r3, #8
 800b426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	e853 3f00 	ldrex	r3, [r3]
 800b42e:	613b      	str	r3, [r7, #16]
   return(result);
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	3308      	adds	r3, #8
 800b43e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b440:	623a      	str	r2, [r7, #32]
 800b442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b444:	69f9      	ldr	r1, [r7, #28]
 800b446:	6a3a      	ldr	r2, [r7, #32]
 800b448:	e841 2300 	strex	r3, r2, [r1]
 800b44c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d1e5      	bne.n	800b420 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3758      	adds	r7, #88	@ 0x58
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	0800b5bb 	.word	0x0800b5bb
 800b464:	0800b6ef 	.word	0x0800b6ef
 800b468:	0800b735 	.word	0x0800b735

0800b46c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b08f      	sub	sp, #60	@ 0x3c
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	e853 3f00 	ldrex	r3, [r3]
 800b480:	61fb      	str	r3, [r7, #28]
   return(result);
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b488:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b494:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b49a:	e841 2300 	strex	r3, r2, [r1]
 800b49e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d1e6      	bne.n	800b474 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3308      	adds	r3, #8
 800b4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	e853 3f00 	ldrex	r3, [r3]
 800b4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b4bc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3308      	adds	r3, #8
 800b4c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4c6:	61ba      	str	r2, [r7, #24]
 800b4c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6979      	ldr	r1, [r7, #20]
 800b4cc:	69ba      	ldr	r2, [r7, #24]
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e5      	bne.n	800b4a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2220      	movs	r2, #32
 800b4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b4e2:	bf00      	nop
 800b4e4:	373c      	adds	r7, #60	@ 0x3c
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b095      	sub	sp, #84	@ 0x54
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4fe:	e853 3f00 	ldrex	r3, [r3]
 800b502:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b506:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	461a      	mov	r2, r3
 800b512:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b514:	643b      	str	r3, [r7, #64]	@ 0x40
 800b516:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b518:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b51a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b51c:	e841 2300 	strex	r3, r2, [r1]
 800b520:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d1e6      	bne.n	800b4f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3308      	adds	r3, #8
 800b52e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b530:	6a3b      	ldr	r3, [r7, #32]
 800b532:	e853 3f00 	ldrex	r3, [r3]
 800b536:	61fb      	str	r3, [r7, #28]
   return(result);
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b53e:	f023 0301 	bic.w	r3, r3, #1
 800b542:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	3308      	adds	r3, #8
 800b54a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b54c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b54e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b552:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e3      	bne.n	800b528 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b564:	2b01      	cmp	r3, #1
 800b566:	d118      	bne.n	800b59a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	60bb      	str	r3, [r7, #8]
   return(result);
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	f023 0310 	bic.w	r3, r3, #16
 800b57c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b586:	61bb      	str	r3, [r7, #24]
 800b588:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	69ba      	ldr	r2, [r7, #24]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	613b      	str	r3, [r7, #16]
   return(result);
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e6      	bne.n	800b568 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2220      	movs	r2, #32
 800b59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b5ae:	bf00      	nop
 800b5b0:	3754      	adds	r7, #84	@ 0x54
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b09c      	sub	sp, #112	@ 0x70
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d171      	bne.n	800b6ba <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b5d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5e6:	e853 3f00 	ldrex	r3, [r3]
 800b5ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b5ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b5f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b5fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b5fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b602:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b604:	e841 2300 	strex	r3, r2, [r1]
 800b608:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b60a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d1e6      	bne.n	800b5de <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	3308      	adds	r3, #8
 800b616:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	e853 3f00 	ldrex	r3, [r3]
 800b61e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b622:	f023 0301 	bic.w	r3, r3, #1
 800b626:	667b      	str	r3, [r7, #100]	@ 0x64
 800b628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3308      	adds	r3, #8
 800b62e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b630:	647a      	str	r2, [r7, #68]	@ 0x44
 800b632:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b634:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b636:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b638:	e841 2300 	strex	r3, r2, [r1]
 800b63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b63e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1e5      	bne.n	800b610 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	3308      	adds	r3, #8
 800b64a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	e853 3f00 	ldrex	r3, [r3]
 800b652:	623b      	str	r3, [r7, #32]
   return(result);
 800b654:	6a3b      	ldr	r3, [r7, #32]
 800b656:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b65a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b65c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3308      	adds	r3, #8
 800b662:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b664:	633a      	str	r2, [r7, #48]	@ 0x30
 800b666:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b668:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b66a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b66c:	e841 2300 	strex	r3, r2, [r1]
 800b670:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1e5      	bne.n	800b644 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b67a:	2220      	movs	r2, #32
 800b67c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b682:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d118      	bne.n	800b6ba <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	e853 3f00 	ldrex	r3, [r3]
 800b694:	60fb      	str	r3, [r7, #12]
   return(result);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f023 0310 	bic.w	r3, r3, #16
 800b69c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b69e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6a6:	61fb      	str	r3, [r7, #28]
 800b6a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	69b9      	ldr	r1, [r7, #24]
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	e841 2300 	strex	r3, r2, [r1]
 800b6b2:	617b      	str	r3, [r7, #20]
   return(result);
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1e6      	bne.n	800b688 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6bc:	2200      	movs	r2, #0
 800b6be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d109      	bne.n	800b6dc <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6ce:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6d0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b6d4:	4611      	mov	r1, r2
 800b6d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6d8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6da:	e004      	b.n	800b6e6 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b6dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b6e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b6e4:	4798      	blx	r3
}
 800b6e6:	bf00      	nop
 800b6e8:	3770      	adds	r7, #112	@ 0x70
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b706:	2b01      	cmp	r3, #1
 800b708:	d10b      	bne.n	800b722 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b716:	0852      	lsrs	r2, r2, #1
 800b718:	b292      	uxth	r2, r2
 800b71a:	4611      	mov	r1, r2
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b720:	e004      	b.n	800b72c <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	4798      	blx	r3
}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b740:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b748:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b750:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b75c:	2b80      	cmp	r3, #128	@ 0x80
 800b75e:	d109      	bne.n	800b774 <UART_DMAError+0x40>
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	2b21      	cmp	r3, #33	@ 0x21
 800b764:	d106      	bne.n	800b774 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2200      	movs	r2, #0
 800b76a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b76e:	6978      	ldr	r0, [r7, #20]
 800b770:	f7ff fe7c 	bl	800b46c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b77e:	2b40      	cmp	r3, #64	@ 0x40
 800b780:	d109      	bne.n	800b796 <UART_DMAError+0x62>
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b22      	cmp	r3, #34	@ 0x22
 800b786:	d106      	bne.n	800b796 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f7ff feac 	bl	800b4ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b79c:	f043 0210 	orr.w	r2, r3, #16
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7ac:	6978      	ldr	r0, [r7, #20]
 800b7ae:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7b0:	bf00      	nop
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7d8:	bf00      	nop
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b088      	sub	sp, #32
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	e853 3f00 	ldrex	r3, [r3]
 800b7f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b7fc:	61fb      	str	r3, [r7, #28]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	461a      	mov	r2, r3
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	61bb      	str	r3, [r7, #24]
 800b808:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	6979      	ldr	r1, [r7, #20]
 800b80c:	69ba      	ldr	r2, [r7, #24]
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	613b      	str	r3, [r7, #16]
   return(result);
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e6      	bne.n	800b7e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b832:	bf00      	nop
 800b834:	3720      	adds	r7, #32
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b83a:	b480      	push	{r7}
 800b83c:	b083      	sub	sp, #12
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b842:	bf00      	nop
 800b844:	370c      	adds	r7, #12
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b856:	bf00      	nop
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b862:	b480      	push	{r7}
 800b864:	b083      	sub	sp, #12
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b86a:	bf00      	nop
 800b86c:	370c      	adds	r7, #12
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b876:	b480      	push	{r7}
 800b878:	b085      	sub	sp, #20
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b884:	2b01      	cmp	r3, #1
 800b886:	d101      	bne.n	800b88c <HAL_UARTEx_DisableFifoMode+0x16>
 800b888:	2302      	movs	r3, #2
 800b88a:	e027      	b.n	800b8dc <HAL_UARTEx_DisableFifoMode+0x66>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2224      	movs	r2, #36	@ 0x24
 800b898:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0201 	bic.w	r2, r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b8ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3714      	adds	r7, #20
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e02d      	b.n	800b95c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2224      	movs	r2, #36	@ 0x24
 800b90c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f022 0201 	bic.w	r2, r2, #1
 800b926:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	683a      	ldr	r2, [r7, #0]
 800b938:	430a      	orrs	r2, r1
 800b93a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f84f 	bl	800b9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	68fa      	ldr	r2, [r7, #12]
 800b948:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b978:	2302      	movs	r3, #2
 800b97a:	e02d      	b.n	800b9d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2224      	movs	r2, #36	@ 0x24
 800b988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f022 0201 	bic.w	r2, r2, #1
 800b9a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	683a      	ldr	r2, [r7, #0]
 800b9b4:	430a      	orrs	r2, r1
 800b9b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f811 	bl	800b9e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d108      	bne.n	800ba02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ba00:	e031      	b.n	800ba66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ba02:	2308      	movs	r3, #8
 800ba04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ba06:	2308      	movs	r3, #8
 800ba08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	0e5b      	lsrs	r3, r3, #25
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	0f5b      	lsrs	r3, r3, #29
 800ba22:	b2db      	uxtb	r3, r3
 800ba24:	f003 0307 	and.w	r3, r3, #7
 800ba28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	7b3a      	ldrb	r2, [r7, #12]
 800ba2e:	4911      	ldr	r1, [pc, #68]	@ (800ba74 <UARTEx_SetNbDataToProcess+0x94>)
 800ba30:	5c8a      	ldrb	r2, [r1, r2]
 800ba32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba36:	7b3a      	ldrb	r2, [r7, #12]
 800ba38:	490f      	ldr	r1, [pc, #60]	@ (800ba78 <UARTEx_SetNbDataToProcess+0x98>)
 800ba3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba48:	7bfb      	ldrb	r3, [r7, #15]
 800ba4a:	7b7a      	ldrb	r2, [r7, #13]
 800ba4c:	4909      	ldr	r1, [pc, #36]	@ (800ba74 <UARTEx_SetNbDataToProcess+0x94>)
 800ba4e:	5c8a      	ldrb	r2, [r1, r2]
 800ba50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba54:	7b7a      	ldrb	r2, [r7, #13]
 800ba56:	4908      	ldr	r1, [pc, #32]	@ (800ba78 <UARTEx_SetNbDataToProcess+0x98>)
 800ba58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ba66:	bf00      	nop
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
 800ba72:	bf00      	nop
 800ba74:	0800db14 	.word	0x0800db14
 800ba78:	0800db1c 	.word	0x0800db1c

0800ba7c <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b08b      	sub	sp, #44	@ 0x2c
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800ba86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba8a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bb74 <arm_sin_f32+0xf8>
 800ba8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba92:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ba96:	edd7 7a06 	vldr	s15, [r7, #24]
 800ba9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba9e:	ee17 3a90 	vmov	r3, s15
 800baa2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800baa4:	edd7 7a06 	vldr	s15, [r7, #24]
 800baa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab0:	d502      	bpl.n	800bab8 <arm_sin_f32+0x3c>
  {
    n--;
 800bab2:	6a3b      	ldr	r3, [r7, #32]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	ee07 3a90 	vmov	s15, r3
 800babe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac2:	ed97 7a06 	vldr	s14, [r7, #24]
 800bac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baca:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800bace:	edd7 7a06 	vldr	s15, [r7, #24]
 800bad2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800bb78 <arm_sin_f32+0xfc>
 800bad6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bada:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800bade:	edd7 7a07 	vldr	s15, [r7, #28]
 800bae2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bae6:	ee17 3a90 	vmov	r3, s15
 800baea:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800baec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800baee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800baf2:	d309      	bcc.n	800bb08 <arm_sin_f32+0x8c>
    index = 0;
 800baf4:	2300      	movs	r3, #0
 800baf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800baf8:	edd7 7a07 	vldr	s15, [r7, #28]
 800bafc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800bb78 <arm_sin_f32+0xfc>
 800bb00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb04:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800bb08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb12:	ed97 7a07 	vldr	s14, [r7, #28]
 800bb16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb1a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800bb1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bb20:	4a16      	ldr	r2, [pc, #88]	@ (800bb7c <arm_sin_f32+0x100>)
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800bb2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	4a13      	ldr	r2, [pc, #76]	@ (800bb7c <arm_sin_f32+0x100>)
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800bb38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bb3c:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb44:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4c:	edd7 6a05 	vldr	s13, [r7, #20]
 800bb50:	edd7 7a03 	vldr	s15, [r7, #12]
 800bb54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb5c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	ee07 3a90 	vmov	s15, r3
}
 800bb66:	eeb0 0a67 	vmov.f32	s0, s15
 800bb6a:	372c      	adds	r7, #44	@ 0x2c
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb72:	4770      	bx	lr
 800bb74:	3e22f983 	.word	0x3e22f983
 800bb78:	44000000 	.word	0x44000000
 800bb7c:	0800db24 	.word	0x0800db24

0800bb80 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b08b      	sub	sp, #44	@ 0x2c
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	881b      	ldrh	r3, [r3, #0]
 800bba2:	461a      	mov	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	885b      	ldrh	r3, [r3, #2]
 800bba8:	fb02 f303 	mul.w	r3, r2, r3
 800bbac:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800bbb2:	e013      	b.n	800bbdc <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	1d1a      	adds	r2, r3, #4
 800bbb8:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbba:	ed93 7a00 	vldr	s14, [r3]
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	1d1a      	adds	r2, r3, #4
 800bbc2:	623a      	str	r2, [r7, #32]
 800bbc4:	edd3 7a00 	vldr	s15, [r3]
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	1d1a      	adds	r2, r3, #4
 800bbcc:	61fa      	str	r2, [r7, #28]
 800bbce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbd2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	3b01      	subs	r3, #1
 800bbda:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1e8      	bne.n	800bbb4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800bbe6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	372c      	adds	r7, #44	@ 0x2c
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b085      	sub	sp, #20
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	607b      	str	r3, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	817b      	strh	r3, [r7, #10]
 800bc04:	4613      	mov	r3, r2
 800bc06:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	897a      	ldrh	r2, [r7, #10]
 800bc0c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	893a      	ldrh	r2, [r7, #8]
 800bc12:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	605a      	str	r2, [r3, #4]
}
 800bc1a:	bf00      	nop
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr

0800bc26 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b0bb      	sub	sp, #236	@ 0xec
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	885b      	ldrh	r3, [r3, #2]
 800bc46:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800bc48:	f04f 0300 	mov.w	r3, #0
 800bc4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc50:	f04f 0300 	mov.w	r3, #0
 800bc54:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800bc56:	2300      	movs	r3, #0
 800bc58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800bc5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bc5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800bc62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800bc68:	e03b      	b.n	800bce2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800bc6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bc6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bc70:	1ad3      	subs	r3, r2, r3
 800bc72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc76:	e00c      	b.n	800bc92 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800bc78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc7c:	1d1a      	adds	r2, r3, #4
 800bc7e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bc82:	f04f 0200 	mov.w	r2, #0
 800bc86:	601a      	str	r2, [r3, #0]
        j--;
 800bc88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bc92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1ee      	bne.n	800bc78 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800bc9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bc9e:	1d1a      	adds	r2, r3, #4
 800bca0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bca4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800bca8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800bcaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bcb4:	e00c      	b.n	800bcd0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800bcb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bcc0:	f04f 0200 	mov.w	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
        j--;
 800bcc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bcca:	3b01      	subs	r3, #1
 800bccc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800bcd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d1ee      	bne.n	800bcb6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800bcd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800bce2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d1bf      	bne.n	800bc6a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800bcea:	2300      	movs	r3, #0
 800bcec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bcf0:	e2c7      	b.n	800c282 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800bcf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcf6:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685a      	ldr	r2, [r3, #4]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	885b      	ldrh	r3, [r3, #2]
 800bd00:	3301      	adds	r3, #1
 800bd02:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800bd06:	fb01 f303 	mul.w	r3, r1, r3
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800bd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800bd1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bd24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd28:	3301      	adds	r3, #1
 800bd2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd2e:	e02c      	b.n	800bd8a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	885b      	ldrh	r3, [r3, #2]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd3e:	fb03 f101 	mul.w	r1, r3, r1
 800bd42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd46:	440b      	add	r3, r1
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	4413      	add	r3, r2
 800bd4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800bd50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800bd58:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800bd5c:	eeb0 7ae7 	vabs.f32	s14, s15
 800bd60:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd64:	eef0 7ae7 	vabs.f32	s15, s15
 800bd68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd70:	dd06      	ble.n	800bd80 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800bd72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800bd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800bd80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bd84:	3301      	adds	r3, #1
 800bd86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800bd8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d3cd      	bcc.n	800bd30 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800bd94:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bd98:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda0:	f000 809b 	beq.w	800beda <arm_mat_inverse_f32+0x2b4>
 800bda4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bda8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdac:	429a      	cmp	r2, r3
 800bdae:	f000 8094 	beq.w	800beda <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	885b      	ldrh	r3, [r3, #2]
 800bdc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bdca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bdd6:	fb03 f202 	mul.w	r2, r3, r2
 800bdda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdde:	4413      	add	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800bde6:	4413      	add	r3, r2
 800bde8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bdf2:	fb03 f202 	mul.w	r2, r3, r2
 800bdf6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be02:	4413      	add	r3, r2
 800be04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be08:	2300      	movs	r3, #0
 800be0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be0e:	e018      	b.n	800be42 <arm_mat_inverse_f32+0x21c>
 800be10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800be18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800be1c:	1d1a      	adds	r2, r3, #4
 800be1e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800be22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800be26:	6812      	ldr	r2, [r2, #0]
 800be28:	601a      	str	r2, [r3, #0]
 800be2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be2e:	1d1a      	adds	r2, r3, #4
 800be30:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800be34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be3c:	3301      	adds	r3, #1
 800be3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800be46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800be48:	429a      	cmp	r2, r3
 800be4a:	dbe1      	blt.n	800be10 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	685b      	ldr	r3, [r3, #4]
 800be58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	885b      	ldrh	r3, [r3, #2]
 800be60:	647b      	str	r3, [r7, #68]	@ 0x44
 800be62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be64:	643b      	str	r3, [r7, #64]	@ 0x40
 800be66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be6a:	fb02 f303 	mul.w	r3, r2, r3
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800be74:	4413      	add	r3, r2
 800be76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800be7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be80:	fb02 f303 	mul.w	r3, r2, r3
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be8a:	4413      	add	r3, r2
 800be8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be90:	2300      	movs	r3, #0
 800be92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be96:	e018      	b.n	800beca <arm_mat_inverse_f32+0x2a4>
 800be98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bea0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bea4:	1d1a      	adds	r2, r3, #4
 800bea6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800beaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800beae:	6812      	ldr	r2, [r2, #0]
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800beb6:	1d1a      	adds	r2, r3, #4
 800beb8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800bebc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bec4:	3301      	adds	r3, #1
 800bec6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800beca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bed0:	429a      	cmp	r2, r3
 800bed2:	dbe1      	blt.n	800be98 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800bed4:	2301      	movs	r3, #1
 800bed6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800beda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d009      	beq.n	800bef6 <arm_mat_inverse_f32+0x2d0>
 800bee2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bee6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800beea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beee:	d102      	bne.n	800bef6 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800bef0:	f06f 0304 	mvn.w	r3, #4
 800bef4:	e208      	b.n	800c308 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800bef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800befa:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800befe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf02:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	885b      	ldrh	r3, [r3, #2]
 800bf12:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf22:	fb03 f202 	mul.w	r2, r3, r2
 800bf26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bf2a:	4413      	add	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bf32:	4413      	add	r3, r2
 800bf34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf38:	2300      	movs	r3, #0
 800bf3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf3e:	e011      	b.n	800bf64 <arm_mat_inverse_f32+0x33e>
 800bf40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bf44:	1d1a      	adds	r2, r3, #4
 800bf46:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800bf4a:	ed93 7a00 	vldr	s14, [r3]
 800bf4e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bf52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf56:	edc3 7a00 	vstr	s15, [r3]
 800bf5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bf5e:	3301      	adds	r3, #1
 800bf60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf64:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800bf68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	dbe8      	blt.n	800bf40 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	685b      	ldr	r3, [r3, #4]
 800bf72:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	885b      	ldrh	r3, [r3, #2]
 800bf7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bf84:	fb02 f303 	mul.w	r3, r2, r3
 800bf88:	009b      	lsls	r3, r3, #2
 800bf8a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bf8e:	4413      	add	r3, r2
 800bf90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bf9a:	e011      	b.n	800bfc0 <arm_mat_inverse_f32+0x39a>
 800bf9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bfa0:	1d1a      	adds	r2, r3, #4
 800bfa2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800bfa6:	ed93 7a00 	vldr	s14, [r3]
 800bfaa:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800bfae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb2:	edc3 7a00 	vstr	s15, [r3]
 800bfb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bfba:	3301      	adds	r3, #1
 800bfbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bfc0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	dbe8      	blt.n	800bf9c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800bfd0:	e0ae      	b.n	800c130 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	885b      	ldrh	r3, [r3, #2]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bfe0:	fb03 f101 	mul.w	r1, r3, r1
 800bfe4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bfe8:	440b      	add	r3, r1
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800bff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	685b      	ldr	r3, [r3, #4]
 800c008:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	885b      	ldrh	r3, [r3, #2]
 800c010:	617b      	str	r3, [r7, #20]
 800c012:	697a      	ldr	r2, [r7, #20]
 800c014:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c018:	1ad3      	subs	r3, r2, r3
 800c01a:	613b      	str	r3, [r7, #16]
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c022:	fb03 f202 	mul.w	r2, r3, r2
 800c026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c02a:	4413      	add	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c032:	4413      	add	r3, r2
 800c034:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c03c:	fb03 f202 	mul.w	r2, r3, r2
 800c040:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c04c:	4413      	add	r3, r2
 800c04e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c052:	2300      	movs	r3, #0
 800c054:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c058:	e01a      	b.n	800c090 <arm_mat_inverse_f32+0x46a>
 800c05a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c05e:	1d1a      	adds	r2, r3, #4
 800c060:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c064:	ed93 7a00 	vldr	s14, [r3]
 800c068:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c070:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c074:	1d1a      	adds	r2, r3, #4
 800c076:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c07a:	ed93 7a00 	vldr	s14, [r3]
 800c07e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c082:	edc3 7a00 	vstr	s15, [r3]
 800c086:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c08a:	3301      	adds	r3, #1
 800c08c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c090:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	429a      	cmp	r2, r3
 800c098:	dbdf      	blt.n	800c05a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	685b      	ldr	r3, [r3, #4]
 800c0a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	885b      	ldrh	r3, [r3, #2]
 800c0ae:	60fb      	str	r3, [r7, #12]
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	60bb      	str	r3, [r7, #8]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c0ba:	fb02 f303 	mul.w	r3, r2, r3
 800c0be:	009b      	lsls	r3, r3, #2
 800c0c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c0c4:	4413      	add	r3, r2
 800c0c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c0ce:	fb02 f303 	mul.w	r3, r2, r3
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c0d8:	4413      	add	r3, r2
 800c0da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c0e4:	e01a      	b.n	800c11c <arm_mat_inverse_f32+0x4f6>
 800c0e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c0ea:	1d1a      	adds	r2, r3, #4
 800c0ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c0f0:	ed93 7a00 	vldr	s14, [r3]
 800c0f4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c100:	1d1a      	adds	r2, r3, #4
 800c102:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c106:	ed93 7a00 	vldr	s14, [r3]
 800c10a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c10e:	edc3 7a00 	vstr	s15, [r3]
 800c112:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c116:	3301      	adds	r3, #1
 800c118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c11c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	429a      	cmp	r2, r3
 800c124:	dbdf      	blt.n	800c0e6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c12a:	3301      	adds	r3, #1
 800c12c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c130:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c134:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c136:	429a      	cmp	r2, r3
 800c138:	f4ff af4b 	bcc.w	800bfd2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c13c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c13e:	3301      	adds	r3, #1
 800c140:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c144:	e092      	b.n	800c26c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	885b      	ldrh	r3, [r3, #2]
 800c14e:	4619      	mov	r1, r3
 800c150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c154:	fb03 f101 	mul.w	r1, r3, r1
 800c158:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c15c:	440b      	add	r3, r1
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	885b      	ldrh	r3, [r3, #2]
 800c180:	627b      	str	r3, [r7, #36]	@ 0x24
 800c182:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	623b      	str	r3, [r7, #32]
 800c18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c192:	fb03 f202 	mul.w	r2, r3, r2
 800c196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c1a0:	4413      	add	r3, r2
 800c1a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c1a8:	fb03 f202 	mul.w	r2, r3, r2
 800c1ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c1b6:	4413      	add	r3, r2
 800c1b8:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1be:	e014      	b.n	800c1ea <arm_mat_inverse_f32+0x5c4>
 800c1c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1c2:	1d1a      	adds	r2, r3, #4
 800c1c4:	677a      	str	r2, [r7, #116]	@ 0x74
 800c1c6:	ed93 7a00 	vldr	s14, [r3]
 800c1ca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1d4:	1d1a      	adds	r2, r3, #4
 800c1d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 800c1d8:	ed93 7a00 	vldr	s14, [r3]
 800c1dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1e0:	edc3 7a00 	vstr	s15, [r3]
 800c1e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c1ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800c1ec:	6a3b      	ldr	r3, [r7, #32]
 800c1ee:	429a      	cmp	r2, r3
 800c1f0:	dbe6      	blt.n	800c1c0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	685b      	ldr	r3, [r3, #4]
 800c1fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	885b      	ldrh	r3, [r3, #2]
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	69fb      	ldr	r3, [r7, #28]
 800c206:	61bb      	str	r3, [r7, #24]
 800c208:	69fb      	ldr	r3, [r7, #28]
 800c20a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c20e:	fb02 f303 	mul.w	r3, r2, r3
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c216:	4413      	add	r3, r2
 800c218:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c21a:	69fb      	ldr	r3, [r7, #28]
 800c21c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c226:	4413      	add	r3, r2
 800c228:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c22a:	2300      	movs	r3, #0
 800c22c:	673b      	str	r3, [r7, #112]	@ 0x70
 800c22e:	e014      	b.n	800c25a <arm_mat_inverse_f32+0x634>
 800c230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c232:	1d1a      	adds	r2, r3, #4
 800c234:	66ba      	str	r2, [r7, #104]	@ 0x68
 800c236:	ed93 7a00 	vldr	s14, [r3]
 800c23a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c244:	1d1a      	adds	r2, r3, #4
 800c246:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c248:	ed93 7a00 	vldr	s14, [r3]
 800c24c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c250:	edc3 7a00 	vstr	s15, [r3]
 800c254:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c256:	3301      	adds	r3, #1
 800c258:	673b      	str	r3, [r7, #112]	@ 0x70
 800c25a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800c25c:	69bb      	ldr	r3, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	dbe6      	blt.n	800c230 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c266:	3301      	adds	r3, #1
 800c268:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c26c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c270:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c272:	429a      	cmp	r2, r3
 800c274:	f4ff af67 	bcc.w	800c146 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800c278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c27c:	3301      	adds	r3, #1
 800c27e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c286:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c288:	429a      	cmp	r2, r3
 800c28a:	f4ff ad32 	bcc.w	800bcf2 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c28e:	2300      	movs	r3, #0
 800c290:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800c294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d033      	beq.n	800c304 <arm_mat_inverse_f32+0x6de>
 800c29c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c2a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a8:	d12c      	bne.n	800c304 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2b6:	e010      	b.n	800c2da <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800c2b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c2c0:	4413      	add	r3, r2
 800c2c2:	edd3 7a00 	vldr	s15, [r3]
 800c2c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ce:	d10d      	bne.n	800c2ec <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800c2d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c2da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2de:	fb02 f303 	mul.w	r3, r2, r3
 800c2e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d3e6      	bcc.n	800c2b8 <arm_mat_inverse_f32+0x692>
 800c2ea:	e000      	b.n	800c2ee <arm_mat_inverse_f32+0x6c8>
            break;
 800c2ec:	bf00      	nop
      }

      if (i == numRows * numCols)
 800c2ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c2f2:	fb02 f303 	mul.w	r3, r2, r3
 800c2f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d102      	bne.n	800c304 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800c2fe:	23fb      	movs	r3, #251	@ 0xfb
 800c300:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800c304:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800c308:	4618      	mov	r0, r3
 800c30a:	37ec      	adds	r7, #236	@ 0xec
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c314:	b480      	push	{r7}
 800c316:	b093      	sub	sp, #76	@ 0x4c
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	881b      	ldrh	r3, [r3, #0]
 800c342:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	885b      	ldrh	r3, [r3, #2]
 800c348:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	885b      	ldrh	r3, [r3, #2]
 800c34e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800c350:	2300      	movs	r3, #0
 800c352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c354:	8b7b      	ldrh	r3, [r7, #26]
 800c356:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800c358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	69fa      	ldr	r2, [r7, #28]
 800c35e:	4413      	add	r3, r2
 800c360:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800c362:	8b3b      	ldrh	r3, [r7, #24]
 800c364:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800c36c:	f04f 0300 	mov.w	r3, #0
 800c370:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800c372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c374:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800c376:	8afb      	ldrh	r3, [r7, #22]
 800c378:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800c37a:	e017      	b.n	800c3ac <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800c37c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c37e:	1d1a      	adds	r2, r3, #4
 800c380:	647a      	str	r2, [r7, #68]	@ 0x44
 800c382:	ed93 7a00 	vldr	s14, [r3]
 800c386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c388:	edd3 7a00 	vldr	s15, [r3]
 800c38c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c390:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800c394:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c398:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800c39c:	8b3b      	ldrh	r3, [r7, #24]
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c3a2:	4413      	add	r3, r2
 800c3a4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	3b01      	subs	r3, #1
 800c3aa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1e4      	bne.n	800c37c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	1d1a      	adds	r2, r3, #4
 800c3b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c3b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3ba:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	3b01      	subs	r3, #1
 800c3c0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800c3c2:	8b3a      	ldrh	r2, [r7, #24]
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c6:	1ad3      	subs	r3, r2, r3
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	6a3a      	ldr	r2, [r7, #32]
 800c3cc:	4413      	add	r3, r2
 800c3ce:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d1ca      	bne.n	800c36c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800c3d6:	8b3b      	ldrh	r3, [r7, #24]
 800c3d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c3da:	4413      	add	r3, r2
 800c3dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800c3de:	8afb      	ldrh	r3, [r7, #22]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c3e4:	4413      	add	r3, r2
 800c3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800c3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800c3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1b1      	bne.n	800c358 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800c3f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	374c      	adds	r7, #76	@ 0x4c
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800c408:	b480      	push	{r7}
 800c40a:	b08b      	sub	sp, #44	@ 0x2c
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	ed87 0a02 	vstr	s0, [r7, #8]
 800c414:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	461a      	mov	r2, r3
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	885b      	ldrh	r3, [r3, #2]
 800c42c:	fb02 f303 	mul.w	r3, r2, r3
 800c430:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c436:	e010      	b.n	800c45a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800c438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c43a:	1d1a      	adds	r2, r3, #4
 800c43c:	627a      	str	r2, [r7, #36]	@ 0x24
 800c43e:	ed93 7a00 	vldr	s14, [r3]
 800c442:	6a3b      	ldr	r3, [r7, #32]
 800c444:	1d1a      	adds	r2, r3, #4
 800c446:	623a      	str	r2, [r7, #32]
 800c448:	edd7 7a02 	vldr	s15, [r7, #8]
 800c44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c450:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c454:	69fb      	ldr	r3, [r7, #28]
 800c456:	3b01      	subs	r3, #1
 800c458:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d1eb      	bne.n	800c438 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c460:	2300      	movs	r3, #0
 800c462:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800c464:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	372c      	adds	r7, #44	@ 0x2c
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c474:	b480      	push	{r7}
 800c476:	b08b      	sub	sp, #44	@ 0x2c
 800c478:	af00      	add	r7, sp, #0
 800c47a:	60f8      	str	r0, [r7, #12]
 800c47c:	60b9      	str	r1, [r7, #8]
 800c47e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	881b      	ldrh	r3, [r3, #0]
 800c496:	461a      	mov	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	885b      	ldrh	r3, [r3, #2]
 800c49c:	fb02 f303 	mul.w	r3, r2, r3
 800c4a0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c4a6:	e013      	b.n	800c4d0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800c4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4ae:	ed93 7a00 	vldr	s14, [r3]
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	1d1a      	adds	r2, r3, #4
 800c4b6:	623a      	str	r2, [r7, #32]
 800c4b8:	edd3 7a00 	vldr	s15, [r3]
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	61fa      	str	r2, [r7, #28]
 800c4c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4c6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d1e8      	bne.n	800c4a8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c4da:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	372c      	adds	r7, #44	@ 0x2c
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e8:	4770      	bx	lr

0800c4ea <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c4ea:	b480      	push	{r7}
 800c4ec:	b08b      	sub	sp, #44	@ 0x2c
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	6078      	str	r0, [r7, #4]
 800c4f2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	881b      	ldrh	r3, [r3, #0]
 800c504:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	885b      	ldrh	r3, [r3, #2]
 800c50a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800c50c:	89fb      	ldrh	r3, [r7, #14]
 800c50e:	61bb      	str	r3, [r7, #24]
 800c510:	2300      	movs	r3, #0
 800c512:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	009b      	lsls	r3, r3, #2
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	4413      	add	r3, r2
 800c51c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800c51e:	89bb      	ldrh	r3, [r7, #12]
 800c520:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800c522:	e00d      	b.n	800c540 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800c524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c526:	1d1a      	adds	r2, r3, #4
 800c528:	627a      	str	r2, [r7, #36]	@ 0x24
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	6a3b      	ldr	r3, [r7, #32]
 800c52e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800c530:	89fb      	ldrh	r3, [r7, #14]
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	6a3a      	ldr	r2, [r7, #32]
 800c536:	4413      	add	r3, r2
 800c538:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800c53a:	69fb      	ldr	r3, [r7, #28]
 800c53c:	3b01      	subs	r3, #1
 800c53e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d1ee      	bne.n	800c524 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	3301      	adds	r3, #1
 800c54a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800c54c:	69bb      	ldr	r3, [r7, #24]
 800c54e:	3b01      	subs	r3, #1
 800c550:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1dd      	bne.n	800c514 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c558:	2300      	movs	r3, #0
 800c55a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800c55c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c560:	4618      	mov	r0, r3
 800c562:	372c      	adds	r7, #44	@ 0x2c
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <malloc>:
 800c56c:	4b02      	ldr	r3, [pc, #8]	@ (800c578 <malloc+0xc>)
 800c56e:	4601      	mov	r1, r0
 800c570:	6818      	ldr	r0, [r3, #0]
 800c572:	f000 b825 	b.w	800c5c0 <_malloc_r>
 800c576:	bf00      	nop
 800c578:	20000164 	.word	0x20000164

0800c57c <sbrk_aligned>:
 800c57c:	b570      	push	{r4, r5, r6, lr}
 800c57e:	4e0f      	ldr	r6, [pc, #60]	@ (800c5bc <sbrk_aligned+0x40>)
 800c580:	460c      	mov	r4, r1
 800c582:	6831      	ldr	r1, [r6, #0]
 800c584:	4605      	mov	r5, r0
 800c586:	b911      	cbnz	r1, 800c58e <sbrk_aligned+0x12>
 800c588:	f000 f8ae 	bl	800c6e8 <_sbrk_r>
 800c58c:	6030      	str	r0, [r6, #0]
 800c58e:	4621      	mov	r1, r4
 800c590:	4628      	mov	r0, r5
 800c592:	f000 f8a9 	bl	800c6e8 <_sbrk_r>
 800c596:	1c43      	adds	r3, r0, #1
 800c598:	d103      	bne.n	800c5a2 <sbrk_aligned+0x26>
 800c59a:	f04f 34ff 	mov.w	r4, #4294967295
 800c59e:	4620      	mov	r0, r4
 800c5a0:	bd70      	pop	{r4, r5, r6, pc}
 800c5a2:	1cc4      	adds	r4, r0, #3
 800c5a4:	f024 0403 	bic.w	r4, r4, #3
 800c5a8:	42a0      	cmp	r0, r4
 800c5aa:	d0f8      	beq.n	800c59e <sbrk_aligned+0x22>
 800c5ac:	1a21      	subs	r1, r4, r0
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f000 f89a 	bl	800c6e8 <_sbrk_r>
 800c5b4:	3001      	adds	r0, #1
 800c5b6:	d1f2      	bne.n	800c59e <sbrk_aligned+0x22>
 800c5b8:	e7ef      	b.n	800c59a <sbrk_aligned+0x1e>
 800c5ba:	bf00      	nop
 800c5bc:	20001bac 	.word	0x20001bac

0800c5c0 <_malloc_r>:
 800c5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5c4:	1ccd      	adds	r5, r1, #3
 800c5c6:	f025 0503 	bic.w	r5, r5, #3
 800c5ca:	3508      	adds	r5, #8
 800c5cc:	2d0c      	cmp	r5, #12
 800c5ce:	bf38      	it	cc
 800c5d0:	250c      	movcc	r5, #12
 800c5d2:	2d00      	cmp	r5, #0
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	db01      	blt.n	800c5dc <_malloc_r+0x1c>
 800c5d8:	42a9      	cmp	r1, r5
 800c5da:	d904      	bls.n	800c5e6 <_malloc_r+0x26>
 800c5dc:	230c      	movs	r3, #12
 800c5de:	6033      	str	r3, [r6, #0]
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c6bc <_malloc_r+0xfc>
 800c5ea:	f000 f869 	bl	800c6c0 <__malloc_lock>
 800c5ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c5f2:	461c      	mov	r4, r3
 800c5f4:	bb44      	cbnz	r4, 800c648 <_malloc_r+0x88>
 800c5f6:	4629      	mov	r1, r5
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff ffbf 	bl	800c57c <sbrk_aligned>
 800c5fe:	1c43      	adds	r3, r0, #1
 800c600:	4604      	mov	r4, r0
 800c602:	d158      	bne.n	800c6b6 <_malloc_r+0xf6>
 800c604:	f8d8 4000 	ldr.w	r4, [r8]
 800c608:	4627      	mov	r7, r4
 800c60a:	2f00      	cmp	r7, #0
 800c60c:	d143      	bne.n	800c696 <_malloc_r+0xd6>
 800c60e:	2c00      	cmp	r4, #0
 800c610:	d04b      	beq.n	800c6aa <_malloc_r+0xea>
 800c612:	6823      	ldr	r3, [r4, #0]
 800c614:	4639      	mov	r1, r7
 800c616:	4630      	mov	r0, r6
 800c618:	eb04 0903 	add.w	r9, r4, r3
 800c61c:	f000 f864 	bl	800c6e8 <_sbrk_r>
 800c620:	4581      	cmp	r9, r0
 800c622:	d142      	bne.n	800c6aa <_malloc_r+0xea>
 800c624:	6821      	ldr	r1, [r4, #0]
 800c626:	1a6d      	subs	r5, r5, r1
 800c628:	4629      	mov	r1, r5
 800c62a:	4630      	mov	r0, r6
 800c62c:	f7ff ffa6 	bl	800c57c <sbrk_aligned>
 800c630:	3001      	adds	r0, #1
 800c632:	d03a      	beq.n	800c6aa <_malloc_r+0xea>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	442b      	add	r3, r5
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	f8d8 3000 	ldr.w	r3, [r8]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	bb62      	cbnz	r2, 800c69c <_malloc_r+0xdc>
 800c642:	f8c8 7000 	str.w	r7, [r8]
 800c646:	e00f      	b.n	800c668 <_malloc_r+0xa8>
 800c648:	6822      	ldr	r2, [r4, #0]
 800c64a:	1b52      	subs	r2, r2, r5
 800c64c:	d420      	bmi.n	800c690 <_malloc_r+0xd0>
 800c64e:	2a0b      	cmp	r2, #11
 800c650:	d917      	bls.n	800c682 <_malloc_r+0xc2>
 800c652:	1961      	adds	r1, r4, r5
 800c654:	42a3      	cmp	r3, r4
 800c656:	6025      	str	r5, [r4, #0]
 800c658:	bf18      	it	ne
 800c65a:	6059      	strne	r1, [r3, #4]
 800c65c:	6863      	ldr	r3, [r4, #4]
 800c65e:	bf08      	it	eq
 800c660:	f8c8 1000 	streq.w	r1, [r8]
 800c664:	5162      	str	r2, [r4, r5]
 800c666:	604b      	str	r3, [r1, #4]
 800c668:	4630      	mov	r0, r6
 800c66a:	f000 f82f 	bl	800c6cc <__malloc_unlock>
 800c66e:	f104 000b 	add.w	r0, r4, #11
 800c672:	1d23      	adds	r3, r4, #4
 800c674:	f020 0007 	bic.w	r0, r0, #7
 800c678:	1ac2      	subs	r2, r0, r3
 800c67a:	bf1c      	itt	ne
 800c67c:	1a1b      	subne	r3, r3, r0
 800c67e:	50a3      	strne	r3, [r4, r2]
 800c680:	e7af      	b.n	800c5e2 <_malloc_r+0x22>
 800c682:	6862      	ldr	r2, [r4, #4]
 800c684:	42a3      	cmp	r3, r4
 800c686:	bf0c      	ite	eq
 800c688:	f8c8 2000 	streq.w	r2, [r8]
 800c68c:	605a      	strne	r2, [r3, #4]
 800c68e:	e7eb      	b.n	800c668 <_malloc_r+0xa8>
 800c690:	4623      	mov	r3, r4
 800c692:	6864      	ldr	r4, [r4, #4]
 800c694:	e7ae      	b.n	800c5f4 <_malloc_r+0x34>
 800c696:	463c      	mov	r4, r7
 800c698:	687f      	ldr	r7, [r7, #4]
 800c69a:	e7b6      	b.n	800c60a <_malloc_r+0x4a>
 800c69c:	461a      	mov	r2, r3
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	42a3      	cmp	r3, r4
 800c6a2:	d1fb      	bne.n	800c69c <_malloc_r+0xdc>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	6053      	str	r3, [r2, #4]
 800c6a8:	e7de      	b.n	800c668 <_malloc_r+0xa8>
 800c6aa:	230c      	movs	r3, #12
 800c6ac:	6033      	str	r3, [r6, #0]
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f000 f80c 	bl	800c6cc <__malloc_unlock>
 800c6b4:	e794      	b.n	800c5e0 <_malloc_r+0x20>
 800c6b6:	6005      	str	r5, [r0, #0]
 800c6b8:	e7d6      	b.n	800c668 <_malloc_r+0xa8>
 800c6ba:	bf00      	nop
 800c6bc:	20001bb0 	.word	0x20001bb0

0800c6c0 <__malloc_lock>:
 800c6c0:	4801      	ldr	r0, [pc, #4]	@ (800c6c8 <__malloc_lock+0x8>)
 800c6c2:	f000 b84b 	b.w	800c75c <__retarget_lock_acquire_recursive>
 800c6c6:	bf00      	nop
 800c6c8:	20001cf0 	.word	0x20001cf0

0800c6cc <__malloc_unlock>:
 800c6cc:	4801      	ldr	r0, [pc, #4]	@ (800c6d4 <__malloc_unlock+0x8>)
 800c6ce:	f000 b846 	b.w	800c75e <__retarget_lock_release_recursive>
 800c6d2:	bf00      	nop
 800c6d4:	20001cf0 	.word	0x20001cf0

0800c6d8 <memset>:
 800c6d8:	4402      	add	r2, r0
 800c6da:	4603      	mov	r3, r0
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d100      	bne.n	800c6e2 <memset+0xa>
 800c6e0:	4770      	bx	lr
 800c6e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c6e6:	e7f9      	b.n	800c6dc <memset+0x4>

0800c6e8 <_sbrk_r>:
 800c6e8:	b538      	push	{r3, r4, r5, lr}
 800c6ea:	4d06      	ldr	r5, [pc, #24]	@ (800c704 <_sbrk_r+0x1c>)
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	4608      	mov	r0, r1
 800c6f2:	602b      	str	r3, [r5, #0]
 800c6f4:	f7f7 f9b4 	bl	8003a60 <_sbrk>
 800c6f8:	1c43      	adds	r3, r0, #1
 800c6fa:	d102      	bne.n	800c702 <_sbrk_r+0x1a>
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	b103      	cbz	r3, 800c702 <_sbrk_r+0x1a>
 800c700:	6023      	str	r3, [r4, #0]
 800c702:	bd38      	pop	{r3, r4, r5, pc}
 800c704:	20001cec 	.word	0x20001cec

0800c708 <__errno>:
 800c708:	4b01      	ldr	r3, [pc, #4]	@ (800c710 <__errno+0x8>)
 800c70a:	6818      	ldr	r0, [r3, #0]
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	20000164 	.word	0x20000164

0800c714 <__libc_init_array>:
 800c714:	b570      	push	{r4, r5, r6, lr}
 800c716:	4d0d      	ldr	r5, [pc, #52]	@ (800c74c <__libc_init_array+0x38>)
 800c718:	4c0d      	ldr	r4, [pc, #52]	@ (800c750 <__libc_init_array+0x3c>)
 800c71a:	1b64      	subs	r4, r4, r5
 800c71c:	10a4      	asrs	r4, r4, #2
 800c71e:	2600      	movs	r6, #0
 800c720:	42a6      	cmp	r6, r4
 800c722:	d109      	bne.n	800c738 <__libc_init_array+0x24>
 800c724:	4d0b      	ldr	r5, [pc, #44]	@ (800c754 <__libc_init_array+0x40>)
 800c726:	4c0c      	ldr	r4, [pc, #48]	@ (800c758 <__libc_init_array+0x44>)
 800c728:	f001 f9a8 	bl	800da7c <_init>
 800c72c:	1b64      	subs	r4, r4, r5
 800c72e:	10a4      	asrs	r4, r4, #2
 800c730:	2600      	movs	r6, #0
 800c732:	42a6      	cmp	r6, r4
 800c734:	d105      	bne.n	800c742 <__libc_init_array+0x2e>
 800c736:	bd70      	pop	{r4, r5, r6, pc}
 800c738:	f855 3b04 	ldr.w	r3, [r5], #4
 800c73c:	4798      	blx	r3
 800c73e:	3601      	adds	r6, #1
 800c740:	e7ee      	b.n	800c720 <__libc_init_array+0xc>
 800c742:	f855 3b04 	ldr.w	r3, [r5], #4
 800c746:	4798      	blx	r3
 800c748:	3601      	adds	r6, #1
 800c74a:	e7f2      	b.n	800c732 <__libc_init_array+0x1e>
 800c74c:	0800e720 	.word	0x0800e720
 800c750:	0800e720 	.word	0x0800e720
 800c754:	0800e720 	.word	0x0800e720
 800c758:	0800e724 	.word	0x0800e724

0800c75c <__retarget_lock_acquire_recursive>:
 800c75c:	4770      	bx	lr

0800c75e <__retarget_lock_release_recursive>:
 800c75e:	4770      	bx	lr

0800c760 <fmodf>:
 800c760:	b508      	push	{r3, lr}
 800c762:	ed2d 8b02 	vpush	{d8}
 800c766:	eef0 8a40 	vmov.f32	s17, s0
 800c76a:	eeb0 8a60 	vmov.f32	s16, s1
 800c76e:	f000 f9eb 	bl	800cb48 <__ieee754_fmodf>
 800c772:	eef4 8a48 	vcmp.f32	s17, s16
 800c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77a:	d60c      	bvs.n	800c796 <fmodf+0x36>
 800c77c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c79c <fmodf+0x3c>
 800c780:	eeb4 8a68 	vcmp.f32	s16, s17
 800c784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c788:	d105      	bne.n	800c796 <fmodf+0x36>
 800c78a:	f7ff ffbd 	bl	800c708 <__errno>
 800c78e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c792:	2321      	movs	r3, #33	@ 0x21
 800c794:	6003      	str	r3, [r0, #0]
 800c796:	ecbd 8b02 	vpop	{d8}
 800c79a:	bd08      	pop	{r3, pc}
 800c79c:	00000000 	.word	0x00000000

0800c7a0 <powf>:
 800c7a0:	b508      	push	{r3, lr}
 800c7a2:	ed2d 8b04 	vpush	{d8-d9}
 800c7a6:	eeb0 8a60 	vmov.f32	s16, s1
 800c7aa:	eeb0 9a40 	vmov.f32	s18, s0
 800c7ae:	f000 fa4d 	bl	800cc4c <__ieee754_powf>
 800c7b2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c7b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7ba:	eef0 8a40 	vmov.f32	s17, s0
 800c7be:	d63e      	bvs.n	800c83e <powf+0x9e>
 800c7c0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c7c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c8:	d112      	bne.n	800c7f0 <powf+0x50>
 800c7ca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c7ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d2:	d039      	beq.n	800c848 <powf+0xa8>
 800c7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800c7d8:	f000 f8e2 	bl	800c9a0 <finitef>
 800c7dc:	b378      	cbz	r0, 800c83e <powf+0x9e>
 800c7de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e6:	d52a      	bpl.n	800c83e <powf+0x9e>
 800c7e8:	f7ff ff8e 	bl	800c708 <__errno>
 800c7ec:	2322      	movs	r3, #34	@ 0x22
 800c7ee:	e014      	b.n	800c81a <powf+0x7a>
 800c7f0:	f000 f8d6 	bl	800c9a0 <finitef>
 800c7f4:	b998      	cbnz	r0, 800c81e <powf+0x7e>
 800c7f6:	eeb0 0a49 	vmov.f32	s0, s18
 800c7fa:	f000 f8d1 	bl	800c9a0 <finitef>
 800c7fe:	b170      	cbz	r0, 800c81e <powf+0x7e>
 800c800:	eeb0 0a48 	vmov.f32	s0, s16
 800c804:	f000 f8cc 	bl	800c9a0 <finitef>
 800c808:	b148      	cbz	r0, 800c81e <powf+0x7e>
 800c80a:	eef4 8a68 	vcmp.f32	s17, s17
 800c80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c812:	d7e9      	bvc.n	800c7e8 <powf+0x48>
 800c814:	f7ff ff78 	bl	800c708 <__errno>
 800c818:	2321      	movs	r3, #33	@ 0x21
 800c81a:	6003      	str	r3, [r0, #0]
 800c81c:	e00f      	b.n	800c83e <powf+0x9e>
 800c81e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c826:	d10a      	bne.n	800c83e <powf+0x9e>
 800c828:	eeb0 0a49 	vmov.f32	s0, s18
 800c82c:	f000 f8b8 	bl	800c9a0 <finitef>
 800c830:	b128      	cbz	r0, 800c83e <powf+0x9e>
 800c832:	eeb0 0a48 	vmov.f32	s0, s16
 800c836:	f000 f8b3 	bl	800c9a0 <finitef>
 800c83a:	2800      	cmp	r0, #0
 800c83c:	d1d4      	bne.n	800c7e8 <powf+0x48>
 800c83e:	eeb0 0a68 	vmov.f32	s0, s17
 800c842:	ecbd 8b04 	vpop	{d8-d9}
 800c846:	bd08      	pop	{r3, pc}
 800c848:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800c84c:	e7f7      	b.n	800c83e <powf+0x9e>
	...

0800c850 <sqrtf>:
 800c850:	b508      	push	{r3, lr}
 800c852:	ed2d 8b02 	vpush	{d8}
 800c856:	eeb0 8a40 	vmov.f32	s16, s0
 800c85a:	f000 f8d1 	bl	800ca00 <__ieee754_sqrtf>
 800c85e:	eeb4 8a48 	vcmp.f32	s16, s16
 800c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c866:	d60c      	bvs.n	800c882 <sqrtf+0x32>
 800c868:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c888 <sqrtf+0x38>
 800c86c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c874:	d505      	bpl.n	800c882 <sqrtf+0x32>
 800c876:	f7ff ff47 	bl	800c708 <__errno>
 800c87a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c87e:	2321      	movs	r3, #33	@ 0x21
 800c880:	6003      	str	r3, [r0, #0]
 800c882:	ecbd 8b02 	vpop	{d8}
 800c886:	bd08      	pop	{r3, pc}
 800c888:	00000000 	.word	0x00000000

0800c88c <cosf>:
 800c88c:	ee10 3a10 	vmov	r3, s0
 800c890:	b507      	push	{r0, r1, r2, lr}
 800c892:	4a1e      	ldr	r2, [pc, #120]	@ (800c90c <cosf+0x80>)
 800c894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c898:	4293      	cmp	r3, r2
 800c89a:	d806      	bhi.n	800c8aa <cosf+0x1e>
 800c89c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800c910 <cosf+0x84>
 800c8a0:	b003      	add	sp, #12
 800c8a2:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8a6:	f000 b8af 	b.w	800ca08 <__kernel_cosf>
 800c8aa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c8ae:	d304      	bcc.n	800c8ba <cosf+0x2e>
 800c8b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c8b4:	b003      	add	sp, #12
 800c8b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c8ba:	4668      	mov	r0, sp
 800c8bc:	f000 fc94 	bl	800d1e8 <__ieee754_rem_pio2f>
 800c8c0:	f000 0003 	and.w	r0, r0, #3
 800c8c4:	2801      	cmp	r0, #1
 800c8c6:	d009      	beq.n	800c8dc <cosf+0x50>
 800c8c8:	2802      	cmp	r0, #2
 800c8ca:	d010      	beq.n	800c8ee <cosf+0x62>
 800c8cc:	b9b0      	cbnz	r0, 800c8fc <cosf+0x70>
 800c8ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8d2:	ed9d 0a00 	vldr	s0, [sp]
 800c8d6:	f000 f897 	bl	800ca08 <__kernel_cosf>
 800c8da:	e7eb      	b.n	800c8b4 <cosf+0x28>
 800c8dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8e0:	ed9d 0a00 	vldr	s0, [sp]
 800c8e4:	f000 f8e8 	bl	800cab8 <__kernel_sinf>
 800c8e8:	eeb1 0a40 	vneg.f32	s0, s0
 800c8ec:	e7e2      	b.n	800c8b4 <cosf+0x28>
 800c8ee:	eddd 0a01 	vldr	s1, [sp, #4]
 800c8f2:	ed9d 0a00 	vldr	s0, [sp]
 800c8f6:	f000 f887 	bl	800ca08 <__kernel_cosf>
 800c8fa:	e7f5      	b.n	800c8e8 <cosf+0x5c>
 800c8fc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c900:	ed9d 0a00 	vldr	s0, [sp]
 800c904:	2001      	movs	r0, #1
 800c906:	f000 f8d7 	bl	800cab8 <__kernel_sinf>
 800c90a:	e7d3      	b.n	800c8b4 <cosf+0x28>
 800c90c:	3f490fd8 	.word	0x3f490fd8
 800c910:	00000000 	.word	0x00000000

0800c914 <sinf>:
 800c914:	ee10 3a10 	vmov	r3, s0
 800c918:	b507      	push	{r0, r1, r2, lr}
 800c91a:	4a1f      	ldr	r2, [pc, #124]	@ (800c998 <sinf+0x84>)
 800c91c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c920:	4293      	cmp	r3, r2
 800c922:	d807      	bhi.n	800c934 <sinf+0x20>
 800c924:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c99c <sinf+0x88>
 800c928:	2000      	movs	r0, #0
 800c92a:	b003      	add	sp, #12
 800c92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c930:	f000 b8c2 	b.w	800cab8 <__kernel_sinf>
 800c934:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c938:	d304      	bcc.n	800c944 <sinf+0x30>
 800c93a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c93e:	b003      	add	sp, #12
 800c940:	f85d fb04 	ldr.w	pc, [sp], #4
 800c944:	4668      	mov	r0, sp
 800c946:	f000 fc4f 	bl	800d1e8 <__ieee754_rem_pio2f>
 800c94a:	f000 0003 	and.w	r0, r0, #3
 800c94e:	2801      	cmp	r0, #1
 800c950:	d00a      	beq.n	800c968 <sinf+0x54>
 800c952:	2802      	cmp	r0, #2
 800c954:	d00f      	beq.n	800c976 <sinf+0x62>
 800c956:	b9c0      	cbnz	r0, 800c98a <sinf+0x76>
 800c958:	eddd 0a01 	vldr	s1, [sp, #4]
 800c95c:	ed9d 0a00 	vldr	s0, [sp]
 800c960:	2001      	movs	r0, #1
 800c962:	f000 f8a9 	bl	800cab8 <__kernel_sinf>
 800c966:	e7ea      	b.n	800c93e <sinf+0x2a>
 800c968:	eddd 0a01 	vldr	s1, [sp, #4]
 800c96c:	ed9d 0a00 	vldr	s0, [sp]
 800c970:	f000 f84a 	bl	800ca08 <__kernel_cosf>
 800c974:	e7e3      	b.n	800c93e <sinf+0x2a>
 800c976:	eddd 0a01 	vldr	s1, [sp, #4]
 800c97a:	ed9d 0a00 	vldr	s0, [sp]
 800c97e:	2001      	movs	r0, #1
 800c980:	f000 f89a 	bl	800cab8 <__kernel_sinf>
 800c984:	eeb1 0a40 	vneg.f32	s0, s0
 800c988:	e7d9      	b.n	800c93e <sinf+0x2a>
 800c98a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c98e:	ed9d 0a00 	vldr	s0, [sp]
 800c992:	f000 f839 	bl	800ca08 <__kernel_cosf>
 800c996:	e7f5      	b.n	800c984 <sinf+0x70>
 800c998:	3f490fd8 	.word	0x3f490fd8
 800c99c:	00000000 	.word	0x00000000

0800c9a0 <finitef>:
 800c9a0:	ee10 3a10 	vmov	r3, s0
 800c9a4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800c9a8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800c9ac:	bfac      	ite	ge
 800c9ae:	2000      	movge	r0, #0
 800c9b0:	2001      	movlt	r0, #1
 800c9b2:	4770      	bx	lr

0800c9b4 <with_errnof>:
 800c9b4:	b510      	push	{r4, lr}
 800c9b6:	ed2d 8b02 	vpush	{d8}
 800c9ba:	eeb0 8a40 	vmov.f32	s16, s0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	f7ff fea2 	bl	800c708 <__errno>
 800c9c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c9c8:	ecbd 8b02 	vpop	{d8}
 800c9cc:	6004      	str	r4, [r0, #0]
 800c9ce:	bd10      	pop	{r4, pc}

0800c9d0 <xflowf>:
 800c9d0:	b130      	cbz	r0, 800c9e0 <xflowf+0x10>
 800c9d2:	eef1 7a40 	vneg.f32	s15, s0
 800c9d6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c9da:	2022      	movs	r0, #34	@ 0x22
 800c9dc:	f7ff bfea 	b.w	800c9b4 <with_errnof>
 800c9e0:	eef0 7a40 	vmov.f32	s15, s0
 800c9e4:	e7f7      	b.n	800c9d6 <xflowf+0x6>
	...

0800c9e8 <__math_uflowf>:
 800c9e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9f0 <__math_uflowf+0x8>
 800c9ec:	f7ff bff0 	b.w	800c9d0 <xflowf>
 800c9f0:	10000000 	.word	0x10000000

0800c9f4 <__math_oflowf>:
 800c9f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9fc <__math_oflowf+0x8>
 800c9f8:	f7ff bfea 	b.w	800c9d0 <xflowf>
 800c9fc:	70000000 	.word	0x70000000

0800ca00 <__ieee754_sqrtf>:
 800ca00:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ca04:	4770      	bx	lr
	...

0800ca08 <__kernel_cosf>:
 800ca08:	ee10 3a10 	vmov	r3, s0
 800ca0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca10:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ca14:	eef0 6a40 	vmov.f32	s13, s0
 800ca18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ca1c:	d204      	bcs.n	800ca28 <__kernel_cosf+0x20>
 800ca1e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ca22:	ee17 2a90 	vmov	r2, s15
 800ca26:	b342      	cbz	r2, 800ca7a <__kernel_cosf+0x72>
 800ca28:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ca2c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ca98 <__kernel_cosf+0x90>
 800ca30:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ca9c <__kernel_cosf+0x94>
 800ca34:	4a1a      	ldr	r2, [pc, #104]	@ (800caa0 <__kernel_cosf+0x98>)
 800ca36:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800caa4 <__kernel_cosf+0x9c>
 800ca40:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca44:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800caa8 <__kernel_cosf+0xa0>
 800ca48:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca4c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800caac <__kernel_cosf+0xa4>
 800ca50:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ca54:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800cab0 <__kernel_cosf+0xa8>
 800ca58:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ca5c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ca60:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ca64:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ca68:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ca6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca70:	d804      	bhi.n	800ca7c <__kernel_cosf+0x74>
 800ca72:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ca76:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ca7a:	4770      	bx	lr
 800ca7c:	4a0d      	ldr	r2, [pc, #52]	@ (800cab4 <__kernel_cosf+0xac>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	bf9a      	itte	ls
 800ca82:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ca86:	ee07 3a10 	vmovls	s14, r3
 800ca8a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ca8e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ca92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca96:	e7ec      	b.n	800ca72 <__kernel_cosf+0x6a>
 800ca98:	ad47d74e 	.word	0xad47d74e
 800ca9c:	310f74f6 	.word	0x310f74f6
 800caa0:	3e999999 	.word	0x3e999999
 800caa4:	b493f27c 	.word	0xb493f27c
 800caa8:	37d00d01 	.word	0x37d00d01
 800caac:	bab60b61 	.word	0xbab60b61
 800cab0:	3d2aaaab 	.word	0x3d2aaaab
 800cab4:	3f480000 	.word	0x3f480000

0800cab8 <__kernel_sinf>:
 800cab8:	ee10 3a10 	vmov	r3, s0
 800cabc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cac0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800cac4:	d204      	bcs.n	800cad0 <__kernel_sinf+0x18>
 800cac6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800caca:	ee17 3a90 	vmov	r3, s15
 800cace:	b35b      	cbz	r3, 800cb28 <__kernel_sinf+0x70>
 800cad0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cad4:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800cb2c <__kernel_sinf+0x74>
 800cad8:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800cb30 <__kernel_sinf+0x78>
 800cadc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cae0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800cb34 <__kernel_sinf+0x7c>
 800cae4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cae8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800cb38 <__kernel_sinf+0x80>
 800caec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800caf0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800cb3c <__kernel_sinf+0x84>
 800caf4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800caf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cafc:	b930      	cbnz	r0, 800cb0c <__kernel_sinf+0x54>
 800cafe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800cb40 <__kernel_sinf+0x88>
 800cb02:	eea7 6a27 	vfma.f32	s12, s14, s15
 800cb06:	eea6 0a26 	vfma.f32	s0, s12, s13
 800cb0a:	4770      	bx	lr
 800cb0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800cb10:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800cb14:	eee0 7a86 	vfma.f32	s15, s1, s12
 800cb18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800cb1c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800cb44 <__kernel_sinf+0x8c>
 800cb20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800cb24:	ee30 0a60 	vsub.f32	s0, s0, s1
 800cb28:	4770      	bx	lr
 800cb2a:	bf00      	nop
 800cb2c:	2f2ec9d3 	.word	0x2f2ec9d3
 800cb30:	b2d72f34 	.word	0xb2d72f34
 800cb34:	3638ef1b 	.word	0x3638ef1b
 800cb38:	b9500d01 	.word	0xb9500d01
 800cb3c:	3c088889 	.word	0x3c088889
 800cb40:	be2aaaab 	.word	0xbe2aaaab
 800cb44:	3e2aaaab 	.word	0x3e2aaaab

0800cb48 <__ieee754_fmodf>:
 800cb48:	b570      	push	{r4, r5, r6, lr}
 800cb4a:	ee10 6a90 	vmov	r6, s1
 800cb4e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800cb52:	1e5a      	subs	r2, r3, #1
 800cb54:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800cb58:	d206      	bcs.n	800cb68 <__ieee754_fmodf+0x20>
 800cb5a:	ee10 4a10 	vmov	r4, s0
 800cb5e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800cb62:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cb66:	d304      	bcc.n	800cb72 <__ieee754_fmodf+0x2a>
 800cb68:	ee60 0a20 	vmul.f32	s1, s0, s1
 800cb6c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800cb70:	bd70      	pop	{r4, r5, r6, pc}
 800cb72:	4299      	cmp	r1, r3
 800cb74:	dbfc      	blt.n	800cb70 <__ieee754_fmodf+0x28>
 800cb76:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800cb7a:	d105      	bne.n	800cb88 <__ieee754_fmodf+0x40>
 800cb7c:	4b32      	ldr	r3, [pc, #200]	@ (800cc48 <__ieee754_fmodf+0x100>)
 800cb7e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800cb82:	ed93 0a00 	vldr	s0, [r3]
 800cb86:	e7f3      	b.n	800cb70 <__ieee754_fmodf+0x28>
 800cb88:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800cb8c:	d146      	bne.n	800cc1c <__ieee754_fmodf+0xd4>
 800cb8e:	020a      	lsls	r2, r1, #8
 800cb90:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800cb94:	2a00      	cmp	r2, #0
 800cb96:	dc3e      	bgt.n	800cc16 <__ieee754_fmodf+0xce>
 800cb98:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800cb9c:	bf01      	itttt	eq
 800cb9e:	021a      	lsleq	r2, r3, #8
 800cba0:	fab2 f282 	clzeq	r2, r2
 800cba4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800cba8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800cbac:	bf16      	itet	ne
 800cbae:	15da      	asrne	r2, r3, #23
 800cbb0:	3282      	addeq	r2, #130	@ 0x82
 800cbb2:	3a7f      	subne	r2, #127	@ 0x7f
 800cbb4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800cbb8:	bfbb      	ittet	lt
 800cbba:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800cbbe:	1a24      	sublt	r4, r4, r0
 800cbc0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800cbc4:	40a1      	lsllt	r1, r4
 800cbc6:	bfa8      	it	ge
 800cbc8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800cbcc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cbd0:	bfb5      	itete	lt
 800cbd2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800cbd6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800cbda:	1aa4      	sublt	r4, r4, r2
 800cbdc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800cbe0:	bfb8      	it	lt
 800cbe2:	fa03 f404 	lsllt.w	r4, r3, r4
 800cbe6:	1a80      	subs	r0, r0, r2
 800cbe8:	1b0b      	subs	r3, r1, r4
 800cbea:	b9d0      	cbnz	r0, 800cc22 <__ieee754_fmodf+0xda>
 800cbec:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800cbf0:	bf28      	it	cs
 800cbf2:	460b      	movcs	r3, r1
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d0c1      	beq.n	800cb7c <__ieee754_fmodf+0x34>
 800cbf8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cbfc:	db19      	blt.n	800cc32 <__ieee754_fmodf+0xea>
 800cbfe:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cc02:	db19      	blt.n	800cc38 <__ieee754_fmodf+0xf0>
 800cc04:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800cc08:	327f      	adds	r2, #127	@ 0x7f
 800cc0a:	432b      	orrs	r3, r5
 800cc0c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cc10:	ee00 3a10 	vmov	s0, r3
 800cc14:	e7ac      	b.n	800cb70 <__ieee754_fmodf+0x28>
 800cc16:	3801      	subs	r0, #1
 800cc18:	0052      	lsls	r2, r2, #1
 800cc1a:	e7bb      	b.n	800cb94 <__ieee754_fmodf+0x4c>
 800cc1c:	15c8      	asrs	r0, r1, #23
 800cc1e:	387f      	subs	r0, #127	@ 0x7f
 800cc20:	e7ba      	b.n	800cb98 <__ieee754_fmodf+0x50>
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	da02      	bge.n	800cc2c <__ieee754_fmodf+0xe4>
 800cc26:	0049      	lsls	r1, r1, #1
 800cc28:	3801      	subs	r0, #1
 800cc2a:	e7dd      	b.n	800cbe8 <__ieee754_fmodf+0xa0>
 800cc2c:	d0a6      	beq.n	800cb7c <__ieee754_fmodf+0x34>
 800cc2e:	0059      	lsls	r1, r3, #1
 800cc30:	e7fa      	b.n	800cc28 <__ieee754_fmodf+0xe0>
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	3a01      	subs	r2, #1
 800cc36:	e7df      	b.n	800cbf8 <__ieee754_fmodf+0xb0>
 800cc38:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800cc3c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800cc40:	3282      	adds	r2, #130	@ 0x82
 800cc42:	4113      	asrs	r3, r2
 800cc44:	432b      	orrs	r3, r5
 800cc46:	e7e3      	b.n	800cc10 <__ieee754_fmodf+0xc8>
 800cc48:	0800e328 	.word	0x0800e328

0800cc4c <__ieee754_powf>:
 800cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc50:	ee10 4a90 	vmov	r4, s1
 800cc54:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800cc58:	ed2d 8b02 	vpush	{d8}
 800cc5c:	ee10 6a10 	vmov	r6, s0
 800cc60:	eeb0 8a40 	vmov.f32	s16, s0
 800cc64:	eef0 8a60 	vmov.f32	s17, s1
 800cc68:	d10c      	bne.n	800cc84 <__ieee754_powf+0x38>
 800cc6a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800cc6e:	0076      	lsls	r6, r6, #1
 800cc70:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800cc74:	f240 8274 	bls.w	800d160 <__ieee754_powf+0x514>
 800cc78:	ee38 0a28 	vadd.f32	s0, s16, s17
 800cc7c:	ecbd 8b02 	vpop	{d8}
 800cc80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc84:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800cc88:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800cc8c:	d802      	bhi.n	800cc94 <__ieee754_powf+0x48>
 800cc8e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800cc92:	d908      	bls.n	800cca6 <__ieee754_powf+0x5a>
 800cc94:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800cc98:	d1ee      	bne.n	800cc78 <__ieee754_powf+0x2c>
 800cc9a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800cc9e:	0064      	lsls	r4, r4, #1
 800cca0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800cca4:	e7e6      	b.n	800cc74 <__ieee754_powf+0x28>
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	da1f      	bge.n	800ccea <__ieee754_powf+0x9e>
 800ccaa:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ccae:	f080 8260 	bcs.w	800d172 <__ieee754_powf+0x526>
 800ccb2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ccb6:	d32f      	bcc.n	800cd18 <__ieee754_powf+0xcc>
 800ccb8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800ccbc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800ccc0:	fa49 f503 	asr.w	r5, r9, r3
 800ccc4:	fa05 f303 	lsl.w	r3, r5, r3
 800ccc8:	454b      	cmp	r3, r9
 800ccca:	d123      	bne.n	800cd14 <__ieee754_powf+0xc8>
 800cccc:	f005 0501 	and.w	r5, r5, #1
 800ccd0:	f1c5 0502 	rsb	r5, r5, #2
 800ccd4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ccd8:	d11f      	bne.n	800cd1a <__ieee754_powf+0xce>
 800ccda:	2c00      	cmp	r4, #0
 800ccdc:	f280 8246 	bge.w	800d16c <__ieee754_powf+0x520>
 800cce0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cce4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cce8:	e7c8      	b.n	800cc7c <__ieee754_powf+0x30>
 800ccea:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ccee:	d111      	bne.n	800cd14 <__ieee754_powf+0xc8>
 800ccf0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800ccf4:	f000 8234 	beq.w	800d160 <__ieee754_powf+0x514>
 800ccf8:	d906      	bls.n	800cd08 <__ieee754_powf+0xbc>
 800ccfa:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800d010 <__ieee754_powf+0x3c4>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	bfa8      	it	ge
 800cd02:	eeb0 0a68 	vmovge.f32	s0, s17
 800cd06:	e7b9      	b.n	800cc7c <__ieee754_powf+0x30>
 800cd08:	2c00      	cmp	r4, #0
 800cd0a:	f280 822c 	bge.w	800d166 <__ieee754_powf+0x51a>
 800cd0e:	eeb1 0a68 	vneg.f32	s0, s17
 800cd12:	e7b3      	b.n	800cc7c <__ieee754_powf+0x30>
 800cd14:	2500      	movs	r5, #0
 800cd16:	e7dd      	b.n	800ccd4 <__ieee754_powf+0x88>
 800cd18:	2500      	movs	r5, #0
 800cd1a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800cd1e:	d102      	bne.n	800cd26 <__ieee754_powf+0xda>
 800cd20:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cd24:	e7aa      	b.n	800cc7c <__ieee754_powf+0x30>
 800cd26:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800cd2a:	f040 8227 	bne.w	800d17c <__ieee754_powf+0x530>
 800cd2e:	2e00      	cmp	r6, #0
 800cd30:	f2c0 8224 	blt.w	800d17c <__ieee754_powf+0x530>
 800cd34:	eeb0 0a48 	vmov.f32	s0, s16
 800cd38:	ecbd 8b02 	vpop	{d8}
 800cd3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd40:	f7ff be5e 	b.w	800ca00 <__ieee754_sqrtf>
 800cd44:	2d01      	cmp	r5, #1
 800cd46:	d199      	bne.n	800cc7c <__ieee754_powf+0x30>
 800cd48:	eeb1 0a40 	vneg.f32	s0, s0
 800cd4c:	e796      	b.n	800cc7c <__ieee754_powf+0x30>
 800cd4e:	0ff0      	lsrs	r0, r6, #31
 800cd50:	3801      	subs	r0, #1
 800cd52:	ea55 0300 	orrs.w	r3, r5, r0
 800cd56:	d104      	bne.n	800cd62 <__ieee754_powf+0x116>
 800cd58:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cd5c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cd60:	e78c      	b.n	800cc7c <__ieee754_powf+0x30>
 800cd62:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800cd66:	d96d      	bls.n	800ce44 <__ieee754_powf+0x1f8>
 800cd68:	4baa      	ldr	r3, [pc, #680]	@ (800d014 <__ieee754_powf+0x3c8>)
 800cd6a:	4598      	cmp	r8, r3
 800cd6c:	d808      	bhi.n	800cd80 <__ieee754_powf+0x134>
 800cd6e:	2c00      	cmp	r4, #0
 800cd70:	da0b      	bge.n	800cd8a <__ieee754_powf+0x13e>
 800cd72:	2000      	movs	r0, #0
 800cd74:	ecbd 8b02 	vpop	{d8}
 800cd78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd7c:	f7ff be3a 	b.w	800c9f4 <__math_oflowf>
 800cd80:	4ba5      	ldr	r3, [pc, #660]	@ (800d018 <__ieee754_powf+0x3cc>)
 800cd82:	4598      	cmp	r8, r3
 800cd84:	d908      	bls.n	800cd98 <__ieee754_powf+0x14c>
 800cd86:	2c00      	cmp	r4, #0
 800cd88:	dcf3      	bgt.n	800cd72 <__ieee754_powf+0x126>
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	ecbd 8b02 	vpop	{d8}
 800cd90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd94:	f7ff be28 	b.w	800c9e8 <__math_uflowf>
 800cd98:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cd9c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cda0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800d01c <__ieee754_powf+0x3d0>
 800cda4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800cda8:	eee0 6a67 	vfms.f32	s13, s0, s15
 800cdac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cdb0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800cdb4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cdb8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800d020 <__ieee754_powf+0x3d4>
 800cdbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdc0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800d024 <__ieee754_powf+0x3d8>
 800cdc4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800cdc8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800d028 <__ieee754_powf+0x3dc>
 800cdcc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cdd0:	eeb0 7a67 	vmov.f32	s14, s15
 800cdd4:	eea0 7a26 	vfma.f32	s14, s0, s13
 800cdd8:	ee17 3a10 	vmov	r3, s14
 800cddc:	f36f 030b 	bfc	r3, #0, #12
 800cde0:	ee07 3a10 	vmov	s14, r3
 800cde4:	eeb0 6a47 	vmov.f32	s12, s14
 800cde8:	eea0 6a66 	vfms.f32	s12, s0, s13
 800cdec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800cdf0:	3d01      	subs	r5, #1
 800cdf2:	4305      	orrs	r5, r0
 800cdf4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800cdf8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800cdfc:	f36f 040b 	bfc	r4, #0, #12
 800ce00:	bf18      	it	ne
 800ce02:	eeb0 8a66 	vmovne.f32	s16, s13
 800ce06:	ee06 4a90 	vmov	s13, r4
 800ce0a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ce0e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800ce12:	ee67 7a26 	vmul.f32	s15, s14, s13
 800ce16:	eee6 0a07 	vfma.f32	s1, s12, s14
 800ce1a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ce1e:	ee17 1a10 	vmov	r1, s14
 800ce22:	2900      	cmp	r1, #0
 800ce24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ce28:	f340 80dd 	ble.w	800cfe6 <__ieee754_powf+0x39a>
 800ce2c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800ce30:	f240 80ca 	bls.w	800cfc8 <__ieee754_powf+0x37c>
 800ce34:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ce38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3c:	bf4c      	ite	mi
 800ce3e:	2001      	movmi	r0, #1
 800ce40:	2000      	movpl	r0, #0
 800ce42:	e797      	b.n	800cd74 <__ieee754_powf+0x128>
 800ce44:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ce48:	bf01      	itttt	eq
 800ce4a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800d02c <__ieee754_powf+0x3e0>
 800ce4e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800ce52:	f06f 0317 	mvneq.w	r3, #23
 800ce56:	ee17 7a90 	vmoveq	r7, s15
 800ce5a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800ce5e:	bf18      	it	ne
 800ce60:	2300      	movne	r3, #0
 800ce62:	3a7f      	subs	r2, #127	@ 0x7f
 800ce64:	441a      	add	r2, r3
 800ce66:	4b72      	ldr	r3, [pc, #456]	@ (800d030 <__ieee754_powf+0x3e4>)
 800ce68:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800ce6c:	429f      	cmp	r7, r3
 800ce6e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800ce72:	dd06      	ble.n	800ce82 <__ieee754_powf+0x236>
 800ce74:	4b6f      	ldr	r3, [pc, #444]	@ (800d034 <__ieee754_powf+0x3e8>)
 800ce76:	429f      	cmp	r7, r3
 800ce78:	f340 80a4 	ble.w	800cfc4 <__ieee754_powf+0x378>
 800ce7c:	3201      	adds	r2, #1
 800ce7e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800ce82:	2600      	movs	r6, #0
 800ce84:	4b6c      	ldr	r3, [pc, #432]	@ (800d038 <__ieee754_powf+0x3ec>)
 800ce86:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800ce8a:	ee07 1a10 	vmov	s14, r1
 800ce8e:	edd3 5a00 	vldr	s11, [r3]
 800ce92:	4b6a      	ldr	r3, [pc, #424]	@ (800d03c <__ieee754_powf+0x3f0>)
 800ce94:	ee75 7a87 	vadd.f32	s15, s11, s14
 800ce98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ce9c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800cea0:	1049      	asrs	r1, r1, #1
 800cea2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800cea6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800ceaa:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800ceae:	ee37 6a65 	vsub.f32	s12, s14, s11
 800ceb2:	ee07 1a90 	vmov	s15, r1
 800ceb6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800ceba:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800cebe:	ee15 7a10 	vmov	r7, s10
 800cec2:	401f      	ands	r7, r3
 800cec4:	ee06 7a90 	vmov	s13, r7
 800cec8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800cecc:	ee37 7a65 	vsub.f32	s14, s14, s11
 800ced0:	ee65 7a05 	vmul.f32	s15, s10, s10
 800ced4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ced8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800d040 <__ieee754_powf+0x3f4>
 800cedc:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800d044 <__ieee754_powf+0x3f8>
 800cee0:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cee4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800d048 <__ieee754_powf+0x3fc>
 800cee8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ceec:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800d01c <__ieee754_powf+0x3d0>
 800cef0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cef4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800d04c <__ieee754_powf+0x400>
 800cef8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800cefc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800d050 <__ieee754_powf+0x404>
 800cf00:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cf04:	eee7 5a27 	vfma.f32	s11, s14, s15
 800cf08:	ee35 7a26 	vadd.f32	s14, s10, s13
 800cf0c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800cf10:	ee27 7a06 	vmul.f32	s14, s14, s12
 800cf14:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800cf18:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800cf1c:	eef0 5a67 	vmov.f32	s11, s15
 800cf20:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800cf24:	ee75 5a87 	vadd.f32	s11, s11, s14
 800cf28:	ee15 1a90 	vmov	r1, s11
 800cf2c:	4019      	ands	r1, r3
 800cf2e:	ee05 1a90 	vmov	s11, r1
 800cf32:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800cf36:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800cf3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf3e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cf42:	eee6 7a25 	vfma.f32	s15, s12, s11
 800cf46:	eeb0 6a67 	vmov.f32	s12, s15
 800cf4a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800cf4e:	ee16 1a10 	vmov	r1, s12
 800cf52:	4019      	ands	r1, r3
 800cf54:	ee06 1a10 	vmov	s12, r1
 800cf58:	eeb0 7a46 	vmov.f32	s14, s12
 800cf5c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800cf60:	493c      	ldr	r1, [pc, #240]	@ (800d054 <__ieee754_powf+0x408>)
 800cf62:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800cf66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf6a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800d058 <__ieee754_powf+0x40c>
 800cf6e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800d05c <__ieee754_powf+0x410>
 800cf72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf76:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800d060 <__ieee754_powf+0x414>
 800cf7a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800cf7e:	ed91 7a00 	vldr	s14, [r1]
 800cf82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf86:	ee07 2a10 	vmov	s14, r2
 800cf8a:	4a36      	ldr	r2, [pc, #216]	@ (800d064 <__ieee754_powf+0x418>)
 800cf8c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800cf90:	eeb0 7a67 	vmov.f32	s14, s15
 800cf94:	eea6 7a25 	vfma.f32	s14, s12, s11
 800cf98:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800cf9c:	ed92 5a00 	vldr	s10, [r2]
 800cfa0:	ee37 7a05 	vadd.f32	s14, s14, s10
 800cfa4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800cfa8:	ee17 2a10 	vmov	r2, s14
 800cfac:	401a      	ands	r2, r3
 800cfae:	ee07 2a10 	vmov	s14, r2
 800cfb2:	ee77 6a66 	vsub.f32	s13, s14, s13
 800cfb6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800cfba:	eee6 6a65 	vfms.f32	s13, s12, s11
 800cfbe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cfc2:	e715      	b.n	800cdf0 <__ieee754_powf+0x1a4>
 800cfc4:	2601      	movs	r6, #1
 800cfc6:	e75d      	b.n	800ce84 <__ieee754_powf+0x238>
 800cfc8:	d152      	bne.n	800d070 <__ieee754_powf+0x424>
 800cfca:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800d068 <__ieee754_powf+0x41c>
 800cfce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cfd2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800cfd6:	eef4 6ac7 	vcmpe.f32	s13, s14
 800cfda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfde:	f73f af29 	bgt.w	800ce34 <__ieee754_powf+0x1e8>
 800cfe2:	2386      	movs	r3, #134	@ 0x86
 800cfe4:	e048      	b.n	800d078 <__ieee754_powf+0x42c>
 800cfe6:	4a21      	ldr	r2, [pc, #132]	@ (800d06c <__ieee754_powf+0x420>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d907      	bls.n	800cffc <__ieee754_powf+0x3b0>
 800cfec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800cff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff4:	bf4c      	ite	mi
 800cff6:	2001      	movmi	r0, #1
 800cff8:	2000      	movpl	r0, #0
 800cffa:	e6c7      	b.n	800cd8c <__ieee754_powf+0x140>
 800cffc:	d138      	bne.n	800d070 <__ieee754_powf+0x424>
 800cffe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d002:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d00a:	dbea      	blt.n	800cfe2 <__ieee754_powf+0x396>
 800d00c:	e7ee      	b.n	800cfec <__ieee754_powf+0x3a0>
 800d00e:	bf00      	nop
 800d010:	00000000 	.word	0x00000000
 800d014:	3f7ffff3 	.word	0x3f7ffff3
 800d018:	3f800007 	.word	0x3f800007
 800d01c:	3eaaaaab 	.word	0x3eaaaaab
 800d020:	3fb8aa00 	.word	0x3fb8aa00
 800d024:	3fb8aa3b 	.word	0x3fb8aa3b
 800d028:	36eca570 	.word	0x36eca570
 800d02c:	4b800000 	.word	0x4b800000
 800d030:	001cc471 	.word	0x001cc471
 800d034:	005db3d6 	.word	0x005db3d6
 800d038:	0800e340 	.word	0x0800e340
 800d03c:	fffff000 	.word	0xfffff000
 800d040:	3e6c3255 	.word	0x3e6c3255
 800d044:	3e53f142 	.word	0x3e53f142
 800d048:	3e8ba305 	.word	0x3e8ba305
 800d04c:	3edb6db7 	.word	0x3edb6db7
 800d050:	3f19999a 	.word	0x3f19999a
 800d054:	0800e330 	.word	0x0800e330
 800d058:	3f76384f 	.word	0x3f76384f
 800d05c:	3f763800 	.word	0x3f763800
 800d060:	369dc3a0 	.word	0x369dc3a0
 800d064:	0800e338 	.word	0x0800e338
 800d068:	3338aa3c 	.word	0x3338aa3c
 800d06c:	43160000 	.word	0x43160000
 800d070:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800d074:	d96f      	bls.n	800d156 <__ieee754_powf+0x50a>
 800d076:	15db      	asrs	r3, r3, #23
 800d078:	3b7e      	subs	r3, #126	@ 0x7e
 800d07a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800d07e:	4118      	asrs	r0, r3
 800d080:	4408      	add	r0, r1
 800d082:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d086:	4a4e      	ldr	r2, [pc, #312]	@ (800d1c0 <__ieee754_powf+0x574>)
 800d088:	3b7f      	subs	r3, #127	@ 0x7f
 800d08a:	411a      	asrs	r2, r3
 800d08c:	4002      	ands	r2, r0
 800d08e:	ee07 2a10 	vmov	s14, r2
 800d092:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800d096:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800d09a:	f1c3 0317 	rsb	r3, r3, #23
 800d09e:	4118      	asrs	r0, r3
 800d0a0:	2900      	cmp	r1, #0
 800d0a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d0a6:	bfb8      	it	lt
 800d0a8:	4240      	neglt	r0, r0
 800d0aa:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800d0ae:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800d1c4 <__ieee754_powf+0x578>
 800d0b2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800d1c8 <__ieee754_powf+0x57c>
 800d0b6:	ee16 3a90 	vmov	r3, s13
 800d0ba:	f36f 030b 	bfc	r3, #0, #12
 800d0be:	ee06 3a90 	vmov	s13, r3
 800d0c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d0c6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d0ca:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d0ce:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800d1cc <__ieee754_powf+0x580>
 800d0d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0d6:	eee0 7a87 	vfma.f32	s15, s1, s14
 800d0da:	eeb0 7a67 	vmov.f32	s14, s15
 800d0de:	eea6 7a86 	vfma.f32	s14, s13, s12
 800d0e2:	eef0 5a47 	vmov.f32	s11, s14
 800d0e6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800d0ea:	ee67 6a07 	vmul.f32	s13, s14, s14
 800d0ee:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d0f2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800d1d0 <__ieee754_powf+0x584>
 800d0f6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800d1d4 <__ieee754_powf+0x588>
 800d0fa:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800d0fe:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800d1d8 <__ieee754_powf+0x58c>
 800d102:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d106:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800d1dc <__ieee754_powf+0x590>
 800d10a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800d10e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d1e0 <__ieee754_powf+0x594>
 800d112:	eee6 5a26 	vfma.f32	s11, s12, s13
 800d116:	eeb0 6a47 	vmov.f32	s12, s14
 800d11a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800d11e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d122:	ee67 5a06 	vmul.f32	s11, s14, s12
 800d126:	ee36 6a66 	vsub.f32	s12, s12, s13
 800d12a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800d12e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800d132:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800d136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d13a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d13e:	ee10 3a10 	vmov	r3, s0
 800d142:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d146:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d14a:	da06      	bge.n	800d15a <__ieee754_powf+0x50e>
 800d14c:	f000 f984 	bl	800d458 <scalbnf>
 800d150:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d154:	e592      	b.n	800cc7c <__ieee754_powf+0x30>
 800d156:	2000      	movs	r0, #0
 800d158:	e7a7      	b.n	800d0aa <__ieee754_powf+0x45e>
 800d15a:	ee00 3a10 	vmov	s0, r3
 800d15e:	e7f7      	b.n	800d150 <__ieee754_powf+0x504>
 800d160:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d164:	e58a      	b.n	800cc7c <__ieee754_powf+0x30>
 800d166:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800d1e4 <__ieee754_powf+0x598>
 800d16a:	e587      	b.n	800cc7c <__ieee754_powf+0x30>
 800d16c:	eeb0 0a48 	vmov.f32	s0, s16
 800d170:	e584      	b.n	800cc7c <__ieee754_powf+0x30>
 800d172:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800d176:	f43f adbb 	beq.w	800ccf0 <__ieee754_powf+0xa4>
 800d17a:	2502      	movs	r5, #2
 800d17c:	eeb0 0a48 	vmov.f32	s0, s16
 800d180:	f000 f962 	bl	800d448 <fabsf>
 800d184:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800d188:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800d18c:	4647      	mov	r7, r8
 800d18e:	d003      	beq.n	800d198 <__ieee754_powf+0x54c>
 800d190:	f1b8 0f00 	cmp.w	r8, #0
 800d194:	f47f addb 	bne.w	800cd4e <__ieee754_powf+0x102>
 800d198:	2c00      	cmp	r4, #0
 800d19a:	bfbc      	itt	lt
 800d19c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800d1a0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800d1a4:	2e00      	cmp	r6, #0
 800d1a6:	f6bf ad69 	bge.w	800cc7c <__ieee754_powf+0x30>
 800d1aa:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800d1ae:	ea58 0805 	orrs.w	r8, r8, r5
 800d1b2:	f47f adc7 	bne.w	800cd44 <__ieee754_powf+0xf8>
 800d1b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d1ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800d1be:	e55d      	b.n	800cc7c <__ieee754_powf+0x30>
 800d1c0:	ff800000 	.word	0xff800000
 800d1c4:	3f317218 	.word	0x3f317218
 800d1c8:	3f317200 	.word	0x3f317200
 800d1cc:	35bfbe8c 	.word	0x35bfbe8c
 800d1d0:	b5ddea0e 	.word	0xb5ddea0e
 800d1d4:	3331bb4c 	.word	0x3331bb4c
 800d1d8:	388ab355 	.word	0x388ab355
 800d1dc:	bb360b61 	.word	0xbb360b61
 800d1e0:	3e2aaaab 	.word	0x3e2aaaab
 800d1e4:	00000000 	.word	0x00000000

0800d1e8 <__ieee754_rem_pio2f>:
 800d1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1ea:	ee10 6a10 	vmov	r6, s0
 800d1ee:	4b88      	ldr	r3, [pc, #544]	@ (800d410 <__ieee754_rem_pio2f+0x228>)
 800d1f0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d1f4:	429d      	cmp	r5, r3
 800d1f6:	b087      	sub	sp, #28
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	d805      	bhi.n	800d208 <__ieee754_rem_pio2f+0x20>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	ed80 0a00 	vstr	s0, [r0]
 800d202:	6043      	str	r3, [r0, #4]
 800d204:	2000      	movs	r0, #0
 800d206:	e022      	b.n	800d24e <__ieee754_rem_pio2f+0x66>
 800d208:	4b82      	ldr	r3, [pc, #520]	@ (800d414 <__ieee754_rem_pio2f+0x22c>)
 800d20a:	429d      	cmp	r5, r3
 800d20c:	d83a      	bhi.n	800d284 <__ieee754_rem_pio2f+0x9c>
 800d20e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d212:	2e00      	cmp	r6, #0
 800d214:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d418 <__ieee754_rem_pio2f+0x230>
 800d218:	4a80      	ldr	r2, [pc, #512]	@ (800d41c <__ieee754_rem_pio2f+0x234>)
 800d21a:	f023 030f 	bic.w	r3, r3, #15
 800d21e:	dd18      	ble.n	800d252 <__ieee754_rem_pio2f+0x6a>
 800d220:	4293      	cmp	r3, r2
 800d222:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d226:	bf09      	itett	eq
 800d228:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d420 <__ieee754_rem_pio2f+0x238>
 800d22c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d424 <__ieee754_rem_pio2f+0x23c>
 800d230:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d428 <__ieee754_rem_pio2f+0x240>
 800d234:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d238:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d23c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d240:	ed80 7a00 	vstr	s14, [r0]
 800d244:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d248:	edc0 7a01 	vstr	s15, [r0, #4]
 800d24c:	2001      	movs	r0, #1
 800d24e:	b007      	add	sp, #28
 800d250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d252:	4293      	cmp	r3, r2
 800d254:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d258:	bf09      	itett	eq
 800d25a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d420 <__ieee754_rem_pio2f+0x238>
 800d25e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d424 <__ieee754_rem_pio2f+0x23c>
 800d262:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d428 <__ieee754_rem_pio2f+0x240>
 800d266:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d26a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d26e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d272:	ed80 7a00 	vstr	s14, [r0]
 800d276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d27a:	edc0 7a01 	vstr	s15, [r0, #4]
 800d27e:	f04f 30ff 	mov.w	r0, #4294967295
 800d282:	e7e4      	b.n	800d24e <__ieee754_rem_pio2f+0x66>
 800d284:	4b69      	ldr	r3, [pc, #420]	@ (800d42c <__ieee754_rem_pio2f+0x244>)
 800d286:	429d      	cmp	r5, r3
 800d288:	d873      	bhi.n	800d372 <__ieee754_rem_pio2f+0x18a>
 800d28a:	f000 f8dd 	bl	800d448 <fabsf>
 800d28e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d430 <__ieee754_rem_pio2f+0x248>
 800d292:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d296:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d29a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d29e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2a2:	ee17 0a90 	vmov	r0, s15
 800d2a6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d418 <__ieee754_rem_pio2f+0x230>
 800d2aa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d2ae:	281f      	cmp	r0, #31
 800d2b0:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d424 <__ieee754_rem_pio2f+0x23c>
 800d2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2b8:	eeb1 6a47 	vneg.f32	s12, s14
 800d2bc:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d2c0:	ee16 1a90 	vmov	r1, s13
 800d2c4:	dc09      	bgt.n	800d2da <__ieee754_rem_pio2f+0xf2>
 800d2c6:	4a5b      	ldr	r2, [pc, #364]	@ (800d434 <__ieee754_rem_pio2f+0x24c>)
 800d2c8:	1e47      	subs	r7, r0, #1
 800d2ca:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d2ce:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d2d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d2d6:	4293      	cmp	r3, r2
 800d2d8:	d107      	bne.n	800d2ea <__ieee754_rem_pio2f+0x102>
 800d2da:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d2de:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d2e2:	2a08      	cmp	r2, #8
 800d2e4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d2e8:	dc14      	bgt.n	800d314 <__ieee754_rem_pio2f+0x12c>
 800d2ea:	6021      	str	r1, [r4, #0]
 800d2ec:	ed94 7a00 	vldr	s14, [r4]
 800d2f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d2f4:	2e00      	cmp	r6, #0
 800d2f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d2fa:	ed84 0a01 	vstr	s0, [r4, #4]
 800d2fe:	daa6      	bge.n	800d24e <__ieee754_rem_pio2f+0x66>
 800d300:	eeb1 7a47 	vneg.f32	s14, s14
 800d304:	eeb1 0a40 	vneg.f32	s0, s0
 800d308:	ed84 7a00 	vstr	s14, [r4]
 800d30c:	ed84 0a01 	vstr	s0, [r4, #4]
 800d310:	4240      	negs	r0, r0
 800d312:	e79c      	b.n	800d24e <__ieee754_rem_pio2f+0x66>
 800d314:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d420 <__ieee754_rem_pio2f+0x238>
 800d318:	eef0 6a40 	vmov.f32	s13, s0
 800d31c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d320:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d324:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d328:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d428 <__ieee754_rem_pio2f+0x240>
 800d32c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d330:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d334:	ee15 2a90 	vmov	r2, s11
 800d338:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d33c:	1a5b      	subs	r3, r3, r1
 800d33e:	2b19      	cmp	r3, #25
 800d340:	dc04      	bgt.n	800d34c <__ieee754_rem_pio2f+0x164>
 800d342:	edc4 5a00 	vstr	s11, [r4]
 800d346:	eeb0 0a66 	vmov.f32	s0, s13
 800d34a:	e7cf      	b.n	800d2ec <__ieee754_rem_pio2f+0x104>
 800d34c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d438 <__ieee754_rem_pio2f+0x250>
 800d350:	eeb0 0a66 	vmov.f32	s0, s13
 800d354:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d358:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d35c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d43c <__ieee754_rem_pio2f+0x254>
 800d360:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d364:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d368:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d36c:	ed84 7a00 	vstr	s14, [r4]
 800d370:	e7bc      	b.n	800d2ec <__ieee754_rem_pio2f+0x104>
 800d372:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d376:	d306      	bcc.n	800d386 <__ieee754_rem_pio2f+0x19e>
 800d378:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d37c:	edc0 7a01 	vstr	s15, [r0, #4]
 800d380:	edc0 7a00 	vstr	s15, [r0]
 800d384:	e73e      	b.n	800d204 <__ieee754_rem_pio2f+0x1c>
 800d386:	15ea      	asrs	r2, r5, #23
 800d388:	3a86      	subs	r2, #134	@ 0x86
 800d38a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d396:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d440 <__ieee754_rem_pio2f+0x258>
 800d39a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3a2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d3a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3b6:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d3ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3be:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c6:	edcd 7a05 	vstr	s15, [sp, #20]
 800d3ca:	d11e      	bne.n	800d40a <__ieee754_rem_pio2f+0x222>
 800d3cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d4:	bf0c      	ite	eq
 800d3d6:	2301      	moveq	r3, #1
 800d3d8:	2302      	movne	r3, #2
 800d3da:	491a      	ldr	r1, [pc, #104]	@ (800d444 <__ieee754_rem_pio2f+0x25c>)
 800d3dc:	9101      	str	r1, [sp, #4]
 800d3de:	2102      	movs	r1, #2
 800d3e0:	9100      	str	r1, [sp, #0]
 800d3e2:	a803      	add	r0, sp, #12
 800d3e4:	4621      	mov	r1, r4
 800d3e6:	f000 f89d 	bl	800d524 <__kernel_rem_pio2f>
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	f6bf af2f 	bge.w	800d24e <__ieee754_rem_pio2f+0x66>
 800d3f0:	edd4 7a00 	vldr	s15, [r4]
 800d3f4:	eef1 7a67 	vneg.f32	s15, s15
 800d3f8:	edc4 7a00 	vstr	s15, [r4]
 800d3fc:	edd4 7a01 	vldr	s15, [r4, #4]
 800d400:	eef1 7a67 	vneg.f32	s15, s15
 800d404:	edc4 7a01 	vstr	s15, [r4, #4]
 800d408:	e782      	b.n	800d310 <__ieee754_rem_pio2f+0x128>
 800d40a:	2303      	movs	r3, #3
 800d40c:	e7e5      	b.n	800d3da <__ieee754_rem_pio2f+0x1f2>
 800d40e:	bf00      	nop
 800d410:	3f490fd8 	.word	0x3f490fd8
 800d414:	4016cbe3 	.word	0x4016cbe3
 800d418:	3fc90f80 	.word	0x3fc90f80
 800d41c:	3fc90fd0 	.word	0x3fc90fd0
 800d420:	37354400 	.word	0x37354400
 800d424:	37354443 	.word	0x37354443
 800d428:	2e85a308 	.word	0x2e85a308
 800d42c:	43490f80 	.word	0x43490f80
 800d430:	3f22f984 	.word	0x3f22f984
 800d434:	0800e348 	.word	0x0800e348
 800d438:	2e85a300 	.word	0x2e85a300
 800d43c:	248d3132 	.word	0x248d3132
 800d440:	43800000 	.word	0x43800000
 800d444:	0800e3c8 	.word	0x0800e3c8

0800d448 <fabsf>:
 800d448:	ee10 3a10 	vmov	r3, s0
 800d44c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d450:	ee00 3a10 	vmov	s0, r3
 800d454:	4770      	bx	lr
	...

0800d458 <scalbnf>:
 800d458:	ee10 3a10 	vmov	r3, s0
 800d45c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d460:	d02b      	beq.n	800d4ba <scalbnf+0x62>
 800d462:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d466:	d302      	bcc.n	800d46e <scalbnf+0x16>
 800d468:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d46c:	4770      	bx	lr
 800d46e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d472:	d123      	bne.n	800d4bc <scalbnf+0x64>
 800d474:	4b24      	ldr	r3, [pc, #144]	@ (800d508 <scalbnf+0xb0>)
 800d476:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d50c <scalbnf+0xb4>
 800d47a:	4298      	cmp	r0, r3
 800d47c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d480:	db17      	blt.n	800d4b2 <scalbnf+0x5a>
 800d482:	ee10 3a10 	vmov	r3, s0
 800d486:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d48a:	3a19      	subs	r2, #25
 800d48c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d490:	4288      	cmp	r0, r1
 800d492:	dd15      	ble.n	800d4c0 <scalbnf+0x68>
 800d494:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d510 <scalbnf+0xb8>
 800d498:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d514 <scalbnf+0xbc>
 800d49c:	ee10 3a10 	vmov	r3, s0
 800d4a0:	eeb0 7a67 	vmov.f32	s14, s15
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	bfb8      	it	lt
 800d4a8:	eef0 7a66 	vmovlt.f32	s15, s13
 800d4ac:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d4b0:	4770      	bx	lr
 800d4b2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d518 <scalbnf+0xc0>
 800d4b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d4ba:	4770      	bx	lr
 800d4bc:	0dd2      	lsrs	r2, r2, #23
 800d4be:	e7e5      	b.n	800d48c <scalbnf+0x34>
 800d4c0:	4410      	add	r0, r2
 800d4c2:	28fe      	cmp	r0, #254	@ 0xfe
 800d4c4:	dce6      	bgt.n	800d494 <scalbnf+0x3c>
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	dd06      	ble.n	800d4d8 <scalbnf+0x80>
 800d4ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d4ce:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d4d2:	ee00 3a10 	vmov	s0, r3
 800d4d6:	4770      	bx	lr
 800d4d8:	f110 0f16 	cmn.w	r0, #22
 800d4dc:	da09      	bge.n	800d4f2 <scalbnf+0x9a>
 800d4de:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d518 <scalbnf+0xc0>
 800d4e2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d51c <scalbnf+0xc4>
 800d4e6:	ee10 3a10 	vmov	r3, s0
 800d4ea:	eeb0 7a67 	vmov.f32	s14, s15
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	e7d9      	b.n	800d4a6 <scalbnf+0x4e>
 800d4f2:	3019      	adds	r0, #25
 800d4f4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d4f8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d4fc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d520 <scalbnf+0xc8>
 800d500:	ee07 3a90 	vmov	s15, r3
 800d504:	e7d7      	b.n	800d4b6 <scalbnf+0x5e>
 800d506:	bf00      	nop
 800d508:	ffff3cb0 	.word	0xffff3cb0
 800d50c:	4c000000 	.word	0x4c000000
 800d510:	7149f2ca 	.word	0x7149f2ca
 800d514:	f149f2ca 	.word	0xf149f2ca
 800d518:	0da24260 	.word	0x0da24260
 800d51c:	8da24260 	.word	0x8da24260
 800d520:	33000000 	.word	0x33000000

0800d524 <__kernel_rem_pio2f>:
 800d524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d528:	ed2d 8b04 	vpush	{d8-d9}
 800d52c:	b0d9      	sub	sp, #356	@ 0x164
 800d52e:	4690      	mov	r8, r2
 800d530:	9001      	str	r0, [sp, #4]
 800d532:	4ab6      	ldr	r2, [pc, #728]	@ (800d80c <__kernel_rem_pio2f+0x2e8>)
 800d534:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d536:	f118 0f04 	cmn.w	r8, #4
 800d53a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d53e:	460f      	mov	r7, r1
 800d540:	f103 3bff 	add.w	fp, r3, #4294967295
 800d544:	db26      	blt.n	800d594 <__kernel_rem_pio2f+0x70>
 800d546:	f1b8 0203 	subs.w	r2, r8, #3
 800d54a:	bf48      	it	mi
 800d54c:	f108 0204 	addmi.w	r2, r8, #4
 800d550:	10d2      	asrs	r2, r2, #3
 800d552:	1c55      	adds	r5, r2, #1
 800d554:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d556:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d55a:	00e8      	lsls	r0, r5, #3
 800d55c:	eba2 060b 	sub.w	r6, r2, fp
 800d560:	9002      	str	r0, [sp, #8]
 800d562:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d566:	eb0a 0c0b 	add.w	ip, sl, fp
 800d56a:	ac1c      	add	r4, sp, #112	@ 0x70
 800d56c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d570:	2000      	movs	r0, #0
 800d572:	4560      	cmp	r0, ip
 800d574:	dd10      	ble.n	800d598 <__kernel_rem_pio2f+0x74>
 800d576:	a91c      	add	r1, sp, #112	@ 0x70
 800d578:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d57c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d580:	2600      	movs	r6, #0
 800d582:	4556      	cmp	r6, sl
 800d584:	dc24      	bgt.n	800d5d0 <__kernel_rem_pio2f+0xac>
 800d586:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d58a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d58e:	4684      	mov	ip, r0
 800d590:	2400      	movs	r4, #0
 800d592:	e016      	b.n	800d5c2 <__kernel_rem_pio2f+0x9e>
 800d594:	2200      	movs	r2, #0
 800d596:	e7dc      	b.n	800d552 <__kernel_rem_pio2f+0x2e>
 800d598:	42c6      	cmn	r6, r0
 800d59a:	bf5d      	ittte	pl
 800d59c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d5a0:	ee07 1a90 	vmovpl	s15, r1
 800d5a4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d5a8:	eef0 7a47 	vmovmi.f32	s15, s14
 800d5ac:	ece4 7a01 	vstmia	r4!, {s15}
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	e7de      	b.n	800d572 <__kernel_rem_pio2f+0x4e>
 800d5b4:	ecfe 6a01 	vldmia	lr!, {s13}
 800d5b8:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d5bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d5c0:	3401      	adds	r4, #1
 800d5c2:	455c      	cmp	r4, fp
 800d5c4:	ddf6      	ble.n	800d5b4 <__kernel_rem_pio2f+0x90>
 800d5c6:	ece9 7a01 	vstmia	r9!, {s15}
 800d5ca:	3601      	adds	r6, #1
 800d5cc:	3004      	adds	r0, #4
 800d5ce:	e7d8      	b.n	800d582 <__kernel_rem_pio2f+0x5e>
 800d5d0:	a908      	add	r1, sp, #32
 800d5d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5d6:	9104      	str	r1, [sp, #16]
 800d5d8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d5da:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d818 <__kernel_rem_pio2f+0x2f4>
 800d5de:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d814 <__kernel_rem_pio2f+0x2f0>
 800d5e2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d5e6:	9203      	str	r2, [sp, #12]
 800d5e8:	4654      	mov	r4, sl
 800d5ea:	00a2      	lsls	r2, r4, #2
 800d5ec:	9205      	str	r2, [sp, #20]
 800d5ee:	aa58      	add	r2, sp, #352	@ 0x160
 800d5f0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d5f4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d5f8:	a944      	add	r1, sp, #272	@ 0x110
 800d5fa:	aa08      	add	r2, sp, #32
 800d5fc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d600:	4694      	mov	ip, r2
 800d602:	4626      	mov	r6, r4
 800d604:	2e00      	cmp	r6, #0
 800d606:	dc4c      	bgt.n	800d6a2 <__kernel_rem_pio2f+0x17e>
 800d608:	4628      	mov	r0, r5
 800d60a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d60e:	f7ff ff23 	bl	800d458 <scalbnf>
 800d612:	eeb0 8a40 	vmov.f32	s16, s0
 800d616:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d61a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d61e:	f000 f9e9 	bl	800d9f4 <floorf>
 800d622:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d626:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d62a:	2d00      	cmp	r5, #0
 800d62c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d630:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d634:	ee17 9a90 	vmov	r9, s15
 800d638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d63c:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d640:	dd41      	ble.n	800d6c6 <__kernel_rem_pio2f+0x1a2>
 800d642:	f104 3cff 	add.w	ip, r4, #4294967295
 800d646:	a908      	add	r1, sp, #32
 800d648:	f1c5 0e08 	rsb	lr, r5, #8
 800d64c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d650:	fa46 f00e 	asr.w	r0, r6, lr
 800d654:	4481      	add	r9, r0
 800d656:	fa00 f00e 	lsl.w	r0, r0, lr
 800d65a:	1a36      	subs	r6, r6, r0
 800d65c:	f1c5 0007 	rsb	r0, r5, #7
 800d660:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d664:	4106      	asrs	r6, r0
 800d666:	2e00      	cmp	r6, #0
 800d668:	dd3c      	ble.n	800d6e4 <__kernel_rem_pio2f+0x1c0>
 800d66a:	f04f 0e00 	mov.w	lr, #0
 800d66e:	f109 0901 	add.w	r9, r9, #1
 800d672:	4670      	mov	r0, lr
 800d674:	4574      	cmp	r4, lr
 800d676:	dc68      	bgt.n	800d74a <__kernel_rem_pio2f+0x226>
 800d678:	2d00      	cmp	r5, #0
 800d67a:	dd03      	ble.n	800d684 <__kernel_rem_pio2f+0x160>
 800d67c:	2d01      	cmp	r5, #1
 800d67e:	d074      	beq.n	800d76a <__kernel_rem_pio2f+0x246>
 800d680:	2d02      	cmp	r5, #2
 800d682:	d07d      	beq.n	800d780 <__kernel_rem_pio2f+0x25c>
 800d684:	2e02      	cmp	r6, #2
 800d686:	d12d      	bne.n	800d6e4 <__kernel_rem_pio2f+0x1c0>
 800d688:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d68c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d690:	b340      	cbz	r0, 800d6e4 <__kernel_rem_pio2f+0x1c0>
 800d692:	4628      	mov	r0, r5
 800d694:	9306      	str	r3, [sp, #24]
 800d696:	f7ff fedf 	bl	800d458 <scalbnf>
 800d69a:	9b06      	ldr	r3, [sp, #24]
 800d69c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d6a0:	e020      	b.n	800d6e4 <__kernel_rem_pio2f+0x1c0>
 800d6a2:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d6a6:	3e01      	subs	r6, #1
 800d6a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6b0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d6b4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6b8:	ecac 0a01 	vstmia	ip!, {s0}
 800d6bc:	ed30 0a01 	vldmdb	r0!, {s0}
 800d6c0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d6c4:	e79e      	b.n	800d604 <__kernel_rem_pio2f+0xe0>
 800d6c6:	d105      	bne.n	800d6d4 <__kernel_rem_pio2f+0x1b0>
 800d6c8:	1e60      	subs	r0, r4, #1
 800d6ca:	a908      	add	r1, sp, #32
 800d6cc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d6d0:	11f6      	asrs	r6, r6, #7
 800d6d2:	e7c8      	b.n	800d666 <__kernel_rem_pio2f+0x142>
 800d6d4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d6d8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e0:	da31      	bge.n	800d746 <__kernel_rem_pio2f+0x222>
 800d6e2:	2600      	movs	r6, #0
 800d6e4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ec:	f040 8098 	bne.w	800d820 <__kernel_rem_pio2f+0x2fc>
 800d6f0:	1e60      	subs	r0, r4, #1
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	4550      	cmp	r0, sl
 800d6f6:	da4b      	bge.n	800d790 <__kernel_rem_pio2f+0x26c>
 800d6f8:	2a00      	cmp	r2, #0
 800d6fa:	d065      	beq.n	800d7c8 <__kernel_rem_pio2f+0x2a4>
 800d6fc:	3c01      	subs	r4, #1
 800d6fe:	ab08      	add	r3, sp, #32
 800d700:	3d08      	subs	r5, #8
 800d702:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d0f8      	beq.n	800d6fc <__kernel_rem_pio2f+0x1d8>
 800d70a:	4628      	mov	r0, r5
 800d70c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d710:	f7ff fea2 	bl	800d458 <scalbnf>
 800d714:	1c63      	adds	r3, r4, #1
 800d716:	aa44      	add	r2, sp, #272	@ 0x110
 800d718:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d818 <__kernel_rem_pio2f+0x2f4>
 800d71c:	0099      	lsls	r1, r3, #2
 800d71e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d722:	4623      	mov	r3, r4
 800d724:	2b00      	cmp	r3, #0
 800d726:	f280 80a9 	bge.w	800d87c <__kernel_rem_pio2f+0x358>
 800d72a:	4623      	mov	r3, r4
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	f2c0 80c7 	blt.w	800d8c0 <__kernel_rem_pio2f+0x39c>
 800d732:	aa44      	add	r2, sp, #272	@ 0x110
 800d734:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d738:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d810 <__kernel_rem_pio2f+0x2ec>
 800d73c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d740:	2000      	movs	r0, #0
 800d742:	1ae2      	subs	r2, r4, r3
 800d744:	e0b1      	b.n	800d8aa <__kernel_rem_pio2f+0x386>
 800d746:	2602      	movs	r6, #2
 800d748:	e78f      	b.n	800d66a <__kernel_rem_pio2f+0x146>
 800d74a:	f852 1b04 	ldr.w	r1, [r2], #4
 800d74e:	b948      	cbnz	r0, 800d764 <__kernel_rem_pio2f+0x240>
 800d750:	b121      	cbz	r1, 800d75c <__kernel_rem_pio2f+0x238>
 800d752:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d756:	f842 1c04 	str.w	r1, [r2, #-4]
 800d75a:	2101      	movs	r1, #1
 800d75c:	f10e 0e01 	add.w	lr, lr, #1
 800d760:	4608      	mov	r0, r1
 800d762:	e787      	b.n	800d674 <__kernel_rem_pio2f+0x150>
 800d764:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d768:	e7f5      	b.n	800d756 <__kernel_rem_pio2f+0x232>
 800d76a:	f104 3cff 	add.w	ip, r4, #4294967295
 800d76e:	aa08      	add	r2, sp, #32
 800d770:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d774:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d778:	a908      	add	r1, sp, #32
 800d77a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d77e:	e781      	b.n	800d684 <__kernel_rem_pio2f+0x160>
 800d780:	f104 3cff 	add.w	ip, r4, #4294967295
 800d784:	aa08      	add	r2, sp, #32
 800d786:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d78a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d78e:	e7f3      	b.n	800d778 <__kernel_rem_pio2f+0x254>
 800d790:	a908      	add	r1, sp, #32
 800d792:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d796:	3801      	subs	r0, #1
 800d798:	430a      	orrs	r2, r1
 800d79a:	e7ab      	b.n	800d6f4 <__kernel_rem_pio2f+0x1d0>
 800d79c:	3201      	adds	r2, #1
 800d79e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d7a2:	2e00      	cmp	r6, #0
 800d7a4:	d0fa      	beq.n	800d79c <__kernel_rem_pio2f+0x278>
 800d7a6:	9905      	ldr	r1, [sp, #20]
 800d7a8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d7ac:	eb0d 0001 	add.w	r0, sp, r1
 800d7b0:	18e6      	adds	r6, r4, r3
 800d7b2:	a91c      	add	r1, sp, #112	@ 0x70
 800d7b4:	f104 0c01 	add.w	ip, r4, #1
 800d7b8:	384c      	subs	r0, #76	@ 0x4c
 800d7ba:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d7be:	4422      	add	r2, r4
 800d7c0:	4562      	cmp	r2, ip
 800d7c2:	da04      	bge.n	800d7ce <__kernel_rem_pio2f+0x2aa>
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	e710      	b.n	800d5ea <__kernel_rem_pio2f+0xc6>
 800d7c8:	9804      	ldr	r0, [sp, #16]
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	e7e7      	b.n	800d79e <__kernel_rem_pio2f+0x27a>
 800d7ce:	9903      	ldr	r1, [sp, #12]
 800d7d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d7d4:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d7d8:	9105      	str	r1, [sp, #20]
 800d7da:	ee07 1a90 	vmov	s15, r1
 800d7de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	ece6 7a01 	vstmia	r6!, {s15}
 800d7e8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d7ec:	46b1      	mov	r9, r6
 800d7ee:	455c      	cmp	r4, fp
 800d7f0:	dd04      	ble.n	800d7fc <__kernel_rem_pio2f+0x2d8>
 800d7f2:	ece0 7a01 	vstmia	r0!, {s15}
 800d7f6:	f10c 0c01 	add.w	ip, ip, #1
 800d7fa:	e7e1      	b.n	800d7c0 <__kernel_rem_pio2f+0x29c>
 800d7fc:	ecfe 6a01 	vldmia	lr!, {s13}
 800d800:	ed39 7a01 	vldmdb	r9!, {s14}
 800d804:	3401      	adds	r4, #1
 800d806:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d80a:	e7f0      	b.n	800d7ee <__kernel_rem_pio2f+0x2ca>
 800d80c:	0800e70c 	.word	0x0800e70c
 800d810:	0800e6e0 	.word	0x0800e6e0
 800d814:	43800000 	.word	0x43800000
 800d818:	3b800000 	.word	0x3b800000
 800d81c:	00000000 	.word	0x00000000
 800d820:	9b02      	ldr	r3, [sp, #8]
 800d822:	eeb0 0a48 	vmov.f32	s0, s16
 800d826:	eba3 0008 	sub.w	r0, r3, r8
 800d82a:	f7ff fe15 	bl	800d458 <scalbnf>
 800d82e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d814 <__kernel_rem_pio2f+0x2f0>
 800d832:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83a:	db19      	blt.n	800d870 <__kernel_rem_pio2f+0x34c>
 800d83c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d818 <__kernel_rem_pio2f+0x2f4>
 800d840:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d844:	aa08      	add	r2, sp, #32
 800d846:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d84a:	3508      	adds	r5, #8
 800d84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d850:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d858:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d85c:	ee10 3a10 	vmov	r3, s0
 800d860:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d864:	ee17 3a90 	vmov	r3, s15
 800d868:	3401      	adds	r4, #1
 800d86a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d86e:	e74c      	b.n	800d70a <__kernel_rem_pio2f+0x1e6>
 800d870:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d874:	aa08      	add	r2, sp, #32
 800d876:	ee10 3a10 	vmov	r3, s0
 800d87a:	e7f6      	b.n	800d86a <__kernel_rem_pio2f+0x346>
 800d87c:	a808      	add	r0, sp, #32
 800d87e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d882:	9001      	str	r0, [sp, #4]
 800d884:	ee07 0a90 	vmov	s15, r0
 800d888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d88c:	3b01      	subs	r3, #1
 800d88e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d892:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d896:	ed62 7a01 	vstmdb	r2!, {s15}
 800d89a:	e743      	b.n	800d724 <__kernel_rem_pio2f+0x200>
 800d89c:	ecfc 6a01 	vldmia	ip!, {s13}
 800d8a0:	ecb5 7a01 	vldmia	r5!, {s14}
 800d8a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	4550      	cmp	r0, sl
 800d8ac:	dc01      	bgt.n	800d8b2 <__kernel_rem_pio2f+0x38e>
 800d8ae:	4290      	cmp	r0, r2
 800d8b0:	ddf4      	ble.n	800d89c <__kernel_rem_pio2f+0x378>
 800d8b2:	a858      	add	r0, sp, #352	@ 0x160
 800d8b4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d8b8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	e735      	b.n	800d72c <__kernel_rem_pio2f+0x208>
 800d8c0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	dc09      	bgt.n	800d8da <__kernel_rem_pio2f+0x3b6>
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	dc27      	bgt.n	800d91a <__kernel_rem_pio2f+0x3f6>
 800d8ca:	d040      	beq.n	800d94e <__kernel_rem_pio2f+0x42a>
 800d8cc:	f009 0007 	and.w	r0, r9, #7
 800d8d0:	b059      	add	sp, #356	@ 0x164
 800d8d2:	ecbd 8b04 	vpop	{d8-d9}
 800d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8da:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d8dc:	2b03      	cmp	r3, #3
 800d8de:	d1f5      	bne.n	800d8cc <__kernel_rem_pio2f+0x3a8>
 800d8e0:	aa30      	add	r2, sp, #192	@ 0xc0
 800d8e2:	1f0b      	subs	r3, r1, #4
 800d8e4:	4413      	add	r3, r2
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	dc50      	bgt.n	800d990 <__kernel_rem_pio2f+0x46c>
 800d8ee:	4622      	mov	r2, r4
 800d8f0:	2a01      	cmp	r2, #1
 800d8f2:	dc5d      	bgt.n	800d9b0 <__kernel_rem_pio2f+0x48c>
 800d8f4:	ab30      	add	r3, sp, #192	@ 0xc0
 800d8f6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d8fa:	440b      	add	r3, r1
 800d8fc:	2c01      	cmp	r4, #1
 800d8fe:	dc67      	bgt.n	800d9d0 <__kernel_rem_pio2f+0x4ac>
 800d900:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d904:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d908:	2e00      	cmp	r6, #0
 800d90a:	d167      	bne.n	800d9dc <__kernel_rem_pio2f+0x4b8>
 800d90c:	edc7 6a00 	vstr	s13, [r7]
 800d910:	ed87 7a01 	vstr	s14, [r7, #4]
 800d914:	edc7 7a02 	vstr	s15, [r7, #8]
 800d918:	e7d8      	b.n	800d8cc <__kernel_rem_pio2f+0x3a8>
 800d91a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d91c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d920:	440b      	add	r3, r1
 800d922:	4622      	mov	r2, r4
 800d924:	2a00      	cmp	r2, #0
 800d926:	da24      	bge.n	800d972 <__kernel_rem_pio2f+0x44e>
 800d928:	b34e      	cbz	r6, 800d97e <__kernel_rem_pio2f+0x45a>
 800d92a:	eef1 7a47 	vneg.f32	s15, s14
 800d92e:	edc7 7a00 	vstr	s15, [r7]
 800d932:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d936:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d93a:	aa31      	add	r2, sp, #196	@ 0xc4
 800d93c:	2301      	movs	r3, #1
 800d93e:	429c      	cmp	r4, r3
 800d940:	da20      	bge.n	800d984 <__kernel_rem_pio2f+0x460>
 800d942:	b10e      	cbz	r6, 800d948 <__kernel_rem_pio2f+0x424>
 800d944:	eef1 7a67 	vneg.f32	s15, s15
 800d948:	edc7 7a01 	vstr	s15, [r7, #4]
 800d94c:	e7be      	b.n	800d8cc <__kernel_rem_pio2f+0x3a8>
 800d94e:	ab30      	add	r3, sp, #192	@ 0xc0
 800d950:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d81c <__kernel_rem_pio2f+0x2f8>
 800d954:	440b      	add	r3, r1
 800d956:	2c00      	cmp	r4, #0
 800d958:	da05      	bge.n	800d966 <__kernel_rem_pio2f+0x442>
 800d95a:	b10e      	cbz	r6, 800d960 <__kernel_rem_pio2f+0x43c>
 800d95c:	eef1 7a67 	vneg.f32	s15, s15
 800d960:	edc7 7a00 	vstr	s15, [r7]
 800d964:	e7b2      	b.n	800d8cc <__kernel_rem_pio2f+0x3a8>
 800d966:	ed33 7a01 	vldmdb	r3!, {s14}
 800d96a:	3c01      	subs	r4, #1
 800d96c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d970:	e7f1      	b.n	800d956 <__kernel_rem_pio2f+0x432>
 800d972:	ed73 7a01 	vldmdb	r3!, {s15}
 800d976:	3a01      	subs	r2, #1
 800d978:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d97c:	e7d2      	b.n	800d924 <__kernel_rem_pio2f+0x400>
 800d97e:	eef0 7a47 	vmov.f32	s15, s14
 800d982:	e7d4      	b.n	800d92e <__kernel_rem_pio2f+0x40a>
 800d984:	ecb2 7a01 	vldmia	r2!, {s14}
 800d988:	3301      	adds	r3, #1
 800d98a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d98e:	e7d6      	b.n	800d93e <__kernel_rem_pio2f+0x41a>
 800d990:	ed72 7a01 	vldmdb	r2!, {s15}
 800d994:	edd2 6a01 	vldr	s13, [r2, #4]
 800d998:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d99c:	3801      	subs	r0, #1
 800d99e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9a2:	ed82 7a00 	vstr	s14, [r2]
 800d9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9aa:	edc2 7a01 	vstr	s15, [r2, #4]
 800d9ae:	e79c      	b.n	800d8ea <__kernel_rem_pio2f+0x3c6>
 800d9b0:	ed73 7a01 	vldmdb	r3!, {s15}
 800d9b4:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9b8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9bc:	3a01      	subs	r2, #1
 800d9be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9c2:	ed83 7a00 	vstr	s14, [r3]
 800d9c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ca:	edc3 7a01 	vstr	s15, [r3, #4]
 800d9ce:	e78f      	b.n	800d8f0 <__kernel_rem_pio2f+0x3cc>
 800d9d0:	ed33 7a01 	vldmdb	r3!, {s14}
 800d9d4:	3c01      	subs	r4, #1
 800d9d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9da:	e78f      	b.n	800d8fc <__kernel_rem_pio2f+0x3d8>
 800d9dc:	eef1 6a66 	vneg.f32	s13, s13
 800d9e0:	eeb1 7a47 	vneg.f32	s14, s14
 800d9e4:	edc7 6a00 	vstr	s13, [r7]
 800d9e8:	ed87 7a01 	vstr	s14, [r7, #4]
 800d9ec:	eef1 7a67 	vneg.f32	s15, s15
 800d9f0:	e790      	b.n	800d914 <__kernel_rem_pio2f+0x3f0>
 800d9f2:	bf00      	nop

0800d9f4 <floorf>:
 800d9f4:	ee10 3a10 	vmov	r3, s0
 800d9f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d9fc:	3a7f      	subs	r2, #127	@ 0x7f
 800d9fe:	2a16      	cmp	r2, #22
 800da00:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800da04:	dc2b      	bgt.n	800da5e <floorf+0x6a>
 800da06:	2a00      	cmp	r2, #0
 800da08:	da12      	bge.n	800da30 <floorf+0x3c>
 800da0a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800da70 <floorf+0x7c>
 800da0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1a:	dd06      	ble.n	800da2a <floorf+0x36>
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	da24      	bge.n	800da6a <floorf+0x76>
 800da20:	2900      	cmp	r1, #0
 800da22:	4b14      	ldr	r3, [pc, #80]	@ (800da74 <floorf+0x80>)
 800da24:	bf08      	it	eq
 800da26:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800da2a:	ee00 3a10 	vmov	s0, r3
 800da2e:	4770      	bx	lr
 800da30:	4911      	ldr	r1, [pc, #68]	@ (800da78 <floorf+0x84>)
 800da32:	4111      	asrs	r1, r2
 800da34:	420b      	tst	r3, r1
 800da36:	d0fa      	beq.n	800da2e <floorf+0x3a>
 800da38:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800da70 <floorf+0x7c>
 800da3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da40:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da48:	ddef      	ble.n	800da2a <floorf+0x36>
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bfbe      	ittt	lt
 800da4e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800da52:	fa40 f202 	asrlt.w	r2, r0, r2
 800da56:	189b      	addlt	r3, r3, r2
 800da58:	ea23 0301 	bic.w	r3, r3, r1
 800da5c:	e7e5      	b.n	800da2a <floorf+0x36>
 800da5e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800da62:	d3e4      	bcc.n	800da2e <floorf+0x3a>
 800da64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800da68:	4770      	bx	lr
 800da6a:	2300      	movs	r3, #0
 800da6c:	e7dd      	b.n	800da2a <floorf+0x36>
 800da6e:	bf00      	nop
 800da70:	7149f2ca 	.word	0x7149f2ca
 800da74:	bf800000 	.word	0xbf800000
 800da78:	007fffff 	.word	0x007fffff

0800da7c <_init>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	bf00      	nop
 800da80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da82:	bc08      	pop	{r3}
 800da84:	469e      	mov	lr, r3
 800da86:	4770      	bx	lr

0800da88 <_fini>:
 800da88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da8a:	bf00      	nop
 800da8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da8e:	bc08      	pop	{r3}
 800da90:	469e      	mov	lr, r3
 800da92:	4770      	bx	lr
