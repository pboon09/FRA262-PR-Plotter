
kalman_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bde0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a4  0800bfb8  0800bfb8  0000cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c85c  0800c85c  0000e074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c85c  0800c85c  0000d85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c864  0800c864  0000e074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c864  0800c864  0000d864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c868  0800c868  0000d868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  0800c86c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001474  20000074  0800c8e0  0000e074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014e8  0800c8e0  0000e4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a0b1  00000000  00000000  0000e0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b63  00000000  00000000  00038155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0003ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a7  00000000  00000000  0003e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c27b  00000000  00000000  0003fc17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027bf1  00000000  00000000  0006be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001194c9  00000000  00000000  00093a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acf4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007608  00000000  00000000  001acf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  001b4598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000074 	.word	0x20000074
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bfa0 	.word	0x0800bfa0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000078 	.word	0x20000078
 8000214:	0800bfa0 	.word	0x0800bfa0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000dca:	60b8      	str	r0, [r7, #8]
 8000dcc:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	dd01      	ble.n	8000dea <PWM_Satuation+0x2a>
		return _upper_limit;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	e013      	b.n	8000e12 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000df4:	ed97 7a03 	vldr	s14, [r7, #12]
 8000df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d501      	bpl.n	8000e06 <PWM_Satuation+0x46>
		return _lower_limit;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	e005      	b.n	8000e12 <PWM_Satuation+0x52>
	return (int32_t) _u;
 8000e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0e:	ee17 3a90 	vmov	r3, s15
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 8000e1e:	b480      	push	{r7}
 8000e20:	b087      	sub	sp, #28
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6178      	str	r0, [r7, #20]
 8000e26:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e2a:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e2e:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e32:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f04f 0200 	mov.w	r2, #0
 8000e66:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea4:	bfac      	ite	ge
 8000ea6:	2301      	movge	r3, #1
 8000ea8:	2300      	movlt	r3, #0
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d10e      	bne.n	8000ed4 <PID_CONTROLLER_Compute+0x50>
 8000eb6:	edd7 7a00 	vldr	s15, [r7]
 8000eba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec2:	bfcc      	ite	gt
 8000ec4:	2301      	movgt	r3, #1
 8000ec6:	2300      	movle	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f083 0301 	eor.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d057      	beq.n	8000f84 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ee0:	eef1 7a67 	vneg.f32	s15, s15
 8000ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eec:	bf94      	ite	ls
 8000eee:	2301      	movls	r3, #1
 8000ef0:	2300      	movhi	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	f083 0301 	eor.w	r3, r3, #1
 8000ef8:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10e      	bne.n	8000f1c <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8000efe:	edd7 7a00 	vldr	s15, [r7]
 8000f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f0a:	bf4c      	ite	mi
 8000f0c:	2301      	movmi	r3, #1
 8000f0e:	2300      	movpl	r3, #0
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	f083 0301 	eor.w	r3, r3, #1
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d033      	beq.n	8000f84 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edd3 6a00 	vldr	s13, [r3]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f38:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 8000f3c:	edd7 7a00 	vldr	s15, [r7]
 8000f40:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	ed93 6a00 	vldr	s12, [r3]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000f54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000f62:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 6a02 	vldr	s12, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 8000f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69da      	ldr	r2, [r3, #28]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	61da      	str	r2, [r3, #28]
	return controller->u;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f96:	ee07 3a90 	vmov	s15, r3
}
 8000f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	603b      	str	r3, [r7, #0]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	88fa      	ldrh	r2, [r7, #6]
 8000fc2:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3328      	adds	r3, #40	@ 0x28
 8000fc8:	88fa      	ldrh	r2, [r7, #6]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 ffb3 	bl	8001f38 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8b3a      	ldrh	r2, [r7, #24]
 8000fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000ffc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001006:	2b00      	cmp	r3, #0
 8001008:	d15f      	bne.n	80010ca <MDXX_set_range+0xda>
		if (duty == 0) {
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	d115      	bne.n	8001044 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3310      	adds	r3, #16
 800101c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800119c <MDXX_set_range+0x1ac>
 8001020:	ed97 0a02 	vldr	s0, [r7, #8]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 ffab 	bl	8001f80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	3328      	adds	r3, #40	@ 0x28
 800102e:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800119c <MDXX_set_range+0x1ac>
 8001032:	ed97 0a02 	vldr	s0, [r7, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 ffa2 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = 0;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	2200      	movs	r2, #0
 8001040:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8001042:	e0a6      	b.n	8001192 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800104c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001050:	dd1a      	ble.n	8001088 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3310      	adds	r3, #16
 8001056:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800119c <MDXX_set_range+0x1ac>
 800105a:	ed97 0a02 	vldr	s0, [r7, #8]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 ff8e 	bl	8001f80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3328      	adds	r3, #40	@ 0x28
 8001068:	edd7 0a01 	vldr	s1, [r7, #4]
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 ff85 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = duty;
 8001076:	edd7 7a01 	vldr	s15, [r7, #4]
 800107a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107e:	ee17 2a90 	vmov	r2, s15
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001086:	e084      	b.n	8001192 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3310      	adds	r3, #16
 800108c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80011a0 <MDXX_set_range+0x1b0>
 8001090:	ed97 0a02 	vldr	s0, [r7, #8]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 ff73 	bl	8001f80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	3328      	adds	r3, #40	@ 0x28
 800109e:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a2:	eef0 7ae7 	vabs.f32	s15, s15
 80010a6:	eef0 0a67 	vmov.f32	s1, s15
 80010aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 ff66 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	eef0 7ae7 	vabs.f32	s15, s15
 80010bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c0:	ee17 2a90 	vmov	r2, s15
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010c8:	e063      	b.n	8001192 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010d0:	2b01      	cmp	r3, #1
 80010d2:	d15e      	bne.n	8001192 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	d115      	bne.n	800110e <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	f005 fafe 	bl	80066f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3328      	adds	r3, #40	@ 0x28
 80010f8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800119c <MDXX_set_range+0x1ac>
 80010fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001100:	4618      	mov	r0, r3
 8001102:	f000 ff3d 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = 0;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800110c:	e041      	b.n	8001192 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800110e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001112:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	dd1a      	ble.n	8001152 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001126:	2200      	movs	r2, #0
 8001128:	4619      	mov	r1, r3
 800112a:	f005 fae1 	bl	80066f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3328      	adds	r3, #40	@ 0x28
 8001132:	edd7 0a01 	vldr	s1, [r7, #4]
 8001136:	ed97 0a02 	vldr	s0, [r7, #8]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 ff20 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = duty;
 8001140:	edd7 7a01 	vldr	s15, [r7, #4]
 8001144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001148:	ee17 2a90 	vmov	r2, s15
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001150:	e01f      	b.n	8001192 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800115c:	2201      	movs	r2, #1
 800115e:	4619      	mov	r1, r3
 8001160:	f005 fac6 	bl	80066f0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3328      	adds	r3, #40	@ 0x28
 8001168:	edd7 7a01 	vldr	s15, [r7, #4]
 800116c:	eef0 7ae7 	vabs.f32	s15, s15
 8001170:	eef0 0a67 	vmov.f32	s1, s15
 8001174:	ed97 0a02 	vldr	s0, [r7, #8]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 ff01 	bl	8001f80 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	eef0 7ae7 	vabs.f32	s15, s15
 8001186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118a:	ee17 2a90 	vmov	r2, s15
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	00000000 	.word	0x00000000
 80011a0:	42c80000 	.word	0x42c80000

080011a4 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	@ 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80011ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80011b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80011b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80011ba:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 80011be:	ed97 7a05 	vldr	s14, [r7, #20]
 80011c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80011ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80011d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011da:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 80011de:	ed97 7a01 	vldr	s14, [r7, #4]
 80011e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80011ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80011f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011fa:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	ee07 3a90 	vmov	s15, r3
}
 8001204:	eeb0 0a67 	vmov.f32	s0, s15
 8001208:	3724      	adds	r7, #36	@ 0x24
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <MotorKalman_Init>:
#include "MotorMatrixGenerator.h"


void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	@ 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6278      	str	r0, [r7, #36]	@ 0x24
 800121c:	ed87 0a08 	vstr	s0, [r7, #32]
 8001220:	edc7 0a07 	vstr	s1, [r7, #28]
 8001224:	ed87 1a06 	vstr	s2, [r7, #24]
 8001228:	edc7 1a05 	vstr	s3, [r7, #20]
 800122c:	ed87 2a04 	vstr	s4, [r7, #16]
 8001230:	edc7 2a03 	vstr	s5, [r7, #12]
 8001234:	ed87 3a02 	vstr	s6, [r7, #8]
 8001238:	edc7 3a01 	vstr	s7, [r7, #4]
 800123c:	ed87 4a00 	vstr	s8, [r7]
    filter->dt = dt;
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	6a3a      	ldr	r2, [r7, #32]
 8001244:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8
    filter->J = J;
 8001248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	f8c3 23ac 	str.w	r2, [r3, #940]	@ 0x3ac
    filter->b = b;
 8001250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0
    filter->K_t = K_t;
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	f8c3 23b4 	str.w	r2, [r3, #948]	@ 0x3b4
    filter->K_e = K_e;
 8001260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	f8c3 23b8 	str.w	r2, [r3, #952]	@ 0x3b8
    filter->R_a = R_a;
 8001268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	f8c3 23bc 	str.w	r2, [r3, #956]	@ 0x3bc
    filter->L_a = L_a;
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0

    // Initialize state vector X = [position; velocity; load_torque; current]
    memset(filter->X, 0, sizeof(filter->X));
 8001278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127a:	2210      	movs	r2, #16
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f00a f9f4 	bl	800b66c <memset>

    // Initialize covariance matrix P as diagonal with large initial uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	3310      	adds	r3, #16
 8001288:	2240      	movs	r2, #64	@ 0x40
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f00a f9ed 	bl	800b66c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001296:	e00c      	b.n	80012b2 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001298:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800129a:	4613      	mov	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4413      	add	r3, r2
 80012a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a2:	3304      	adds	r3, #4
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	4a9b      	ldr	r2, [pc, #620]	@ (8001518 <MotorKalman_Init+0x304>)
 80012aa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80012ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012ae:	3301      	adds	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	ddef      	ble.n	8001298 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix I
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80012b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ba:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 80012be:	2240      	movs	r2, #64	@ 0x40
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f00a f9d2 	bl	800b66c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012cc:	e00e      	b.n	80012ec <MotorKalman_Init+0xd8>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80012ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d8:	3388      	adds	r3, #136	@ 0x88
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3304      	adds	r3, #4
 80012e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80012e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e8:	3301      	adds	r3, #1
 80012ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	dded      	ble.n	80012ce <MotorKalman_Init+0xba>
    }

    // Initialize measurement matrix C = [1 0 0 0] (measure position only)
    memset(filter->C, 0, sizeof(filter->C));
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	33f0      	adds	r3, #240	@ 0xf0
 80012f6:	2210      	movs	r2, #16
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00a f9b6 	bl	800b66c <memset>
    filter->C[0] = 1.0f;
 8001300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001302:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001306:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G (noise affects load torque)
    memset(filter->G, 0, sizeof(filter->G));
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001310:	2210      	movs	r2, #16
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f00a f9a9 	bl	800b66c <memset>
    filter->G[2] = 1.0f;
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001320:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108

    MotorKalman_SetProcessNoise(filter, Q);
 8001324:	ed97 0a01 	vldr	s0, [r7, #4]
 8001328:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800132a:	f000 f92b 	bl	8001584 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 800132e:	ed97 0a00 	vldr	s0, [r7]
 8001332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001334:	f000 f94b 	bl	80015ce <MotorKalman_SetMeasurementNoise>

    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	2201      	movs	r2, #1
 8001342:	2104      	movs	r1, #4
 8001344:	f009 fcd7 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800134e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001350:	3310      	adds	r3, #16
 8001352:	2204      	movs	r2, #4
 8001354:	2104      	movs	r1, #4
 8001356:	f009 fcce 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 800135a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135c:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 8001366:	2204      	movs	r2, #4
 8001368:	2104      	movs	r1, #4
 800136a:	f009 fcc4 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->A_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A);
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	3350      	adds	r3, #80	@ 0x50
 8001378:	2204      	movs	r2, #4
 800137a:	2104      	movs	r1, #4
 800137c:	f009 fcbb 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B);
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	33d0      	adds	r3, #208	@ 0xd0
 800138a:	2201      	movs	r2, #1
 800138c:	2104      	movs	r1, #4
 800138e:	f009 fcb2 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->C);
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	33f0      	adds	r3, #240	@ 0xf0
 800139c:	2204      	movs	r2, #4
 800139e:	2101      	movs	r1, #1
 80013a0:	f009 fca9 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->G_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->G);
 80013a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a6:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80013aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80013b0:	2201      	movs	r2, #1
 80013b2:	2104      	movs	r1, #4
 80013b4:	f009 fc9f 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ba:	f503 70f6 	add.w	r0, r3, #492	@ 0x1ec
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80013c4:	2204      	movs	r2, #4
 80013c6:	2104      	movs	r1, #4
 80013c8:	f009 fc95 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80013cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ce:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
 80013d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80013d8:	2201      	movs	r2, #1
 80013da:	2101      	movs	r1, #1
 80013dc:	f009 fc8b 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80013ec:	2201      	movs	r2, #1
 80013ee:	2104      	movs	r1, #4
 80013f0:	f009 fc81 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->S_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->S);
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	f503 7003 	add.w	r0, r3, #524	@ 0x20c
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8001400:	2201      	movs	r2, #1
 8001402:	2101      	movs	r1, #1
 8001404:	f009 fc77 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->innovation_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->innovation);
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	f503 7005 	add.w	r0, r3, #532	@ 0x214
 800140e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001410:	f503 73d2 	add.w	r3, r3, #420	@ 0x1a4
 8001414:	2201      	movs	r2, #1
 8001416:	2101      	movs	r1, #1
 8001418:	f009 fc6d 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	f503 7064 	add.w	r0, r3, #912	@ 0x390
 8001422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001424:	f503 7368 	add.w	r3, r3, #928	@ 0x3a0
 8001428:	2201      	movs	r2, #1
 800142a:	2101      	movs	r1, #1
 800142c:	f009 fc63 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001432:	f503 7066 	add.w	r0, r3, #920	@ 0x398
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
 800143c:	2201      	movs	r2, #1
 800143e:	2101      	movs	r1, #1
 8001440:	f009 fc59 	bl	800acf6 <arm_mat_init_f32>

    arm_mat_init_f32(&filter->temp1_nn_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp1_nn_data);
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	f503 7019 	add.w	r0, r3, #612	@ 0x264
 800144a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144c:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8001450:	2204      	movs	r2, #4
 8001452:	2104      	movs	r1, #4
 8001454:	f009 fc4f 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp2_nn_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp2_nn_data);
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	f503 701b 	add.w	r0, r3, #620	@ 0x26c
 800145e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001460:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001464:	2204      	movs	r2, #4
 8001466:	2104      	movs	r1, #4
 8001468:	f009 fc45 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp3_nn_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp3_nn_data);
 800146c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146e:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 8001472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001474:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8001478:	2204      	movs	r2, #4
 800147a:	2104      	movs	r1, #4
 800147c:	f009 fc3b 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_n1_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_n1_data);
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	f503 701f 	add.w	r0, r3, #636	@ 0x27c
 8001486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001488:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 800148c:	2201      	movs	r2, #1
 800148e:	2104      	movs	r1, #4
 8001490:	f009 fc31 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_nm_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_nm_data);
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	f503 7021 	add.w	r0, r3, #644	@ 0x284
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80014a0:	2201      	movs	r2, #1
 80014a2:	2104      	movs	r1, #4
 80014a4:	f009 fc27 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_mn_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_mn_data);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014aa:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	f503 735f 	add.w	r3, r3, #892	@ 0x37c
 80014b4:	2204      	movs	r2, #4
 80014b6:	2101      	movs	r1, #1
 80014b8:	f009 fc1d 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_mm_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_mm_data);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	f503 7025 	add.w	r0, r3, #660	@ 0x294
 80014c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c4:	f503 7363 	add.w	r3, r3, #908	@ 0x38c
 80014c8:	2201      	movs	r2, #1
 80014ca:	2101      	movs	r1, #1
 80014cc:	f009 fc13 	bl	800acf6 <arm_mat_init_f32>

    MotorKalman_DiscretizeModel(filter);
 80014d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014d2:	f000 f823 	bl	800151c <MotorKalman_DiscretizeModel>

    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	3390      	adds	r3, #144	@ 0x90
 80014e0:	2204      	movs	r2, #4
 80014e2:	2104      	movs	r1, #4
 80014e4:	f009 fc07 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80014ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f0:	33e0      	adds	r3, #224	@ 0xe0
 80014f2:	2201      	movs	r2, #1
 80014f4:	2104      	movs	r1, #4
 80014f6:	f009 fbfe 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fc:	f503 70fa 	add.w	r0, r3, #500	@ 0x1f4
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001506:	2204      	movs	r2, #4
 8001508:	2104      	movs	r1, #4
 800150a:	f009 fbf4 	bl	800acf6 <arm_mat_init_f32>
}
 800150e:	bf00      	nop
 8001510:	3730      	adds	r7, #48	@ 0x30
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	42c80000 	.word	0x42c80000

0800151c <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    GenerateMotorMatrices(
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edd3 7aef 	vldr	s15, [r3, #956]	@ 0x3bc
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7af0 	vldr	s14, [r3, #960]	@ 0x3c0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 6aeb 	vldr	s13, [r3, #940]	@ 0x3ac
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	ed93 6aec 	vldr	s12, [r3, #944]	@ 0x3b0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	edd3 5aee 	vldr	s11, [r3, #952]	@ 0x3b8
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	ed93 5aed 	vldr	s10, [r3, #948]	@ 0x3b4
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	edd3 4aea 	vldr	s9, [r3, #936]	@ 0x3a8
        filter->J,
        filter->b,
        filter->K_e,
        filter->K_t,
        filter->dt,
        filter->A_d,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	eeb0 3a64 	vmov.f32	s6, s9
 8001560:	eef0 2a45 	vmov.f32	s5, s10
 8001564:	eeb0 2a65 	vmov.f32	s4, s11
 8001568:	eef0 1a46 	vmov.f32	s3, s12
 800156c:	eeb0 1a66 	vmov.f32	s2, s13
 8001570:	eef0 0a47 	vmov.f32	s1, s14
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	f000 fc76 	bl	8001e68 <GenerateMotorMatrices>
    );
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	ed87 0a00 	vstr	s0, [r7]
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001596:	2240      	movs	r2, #64	@ 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00a f866 	bl	800b66c <memset>

    filter->Q_d[0 * 4 + 0] = 0;  // Position
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f8c3 2150 	str.w	r2, [r3, #336]	@ 0x150
    filter->Q_d[1 * 4 + 1] = Q;  // Velocity
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	683a      	ldr	r2, [r7, #0]
 80015ae:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
    filter->Q_d[2 * 4 + 2] = 0;  // Load torque
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f8c3 2178 	str.w	r2, [r3, #376]	@ 0x178
    filter->Q_d[3 * 4 + 3] = 0;  // Current
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	ed87 0a00 	vstr	s0, [r7]
    filter->R[0] = R;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b08a      	sub	sp, #40	@ 0x28
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	ed87 0a00 	vstr	s0, [r7]
    arm_status status;

    filter->input_data[0] = voltage_input;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	f8c3 23a4 	str.w	r2, [r3, #932]	@ 0x3a4

    // X_predicted = A_d⋅X
    status = arm_mat_mult_f32(&filter->A_d_matrix, &filter->X_matrix, &filter->temp_n1_matrix);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f503 71d6 	add.w	r1, r3, #428	@ 0x1ac
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001614:	461a      	mov	r2, r3
 8001616:	f009 fefd 	bl	800b414 <arm_mat_mult_f32>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ARM_MATH_SUCCESS) return;
 8001620:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001624:	2b00      	cmp	r3, #0
 8001626:	d175      	bne.n	8001714 <MotorKalman_Predict+0x126>

    // X_predicted = A_d⋅X + B_d⋅u
    // Compute B_d * u
    arm_matrix_instance_f32 Bu_result;
    float32_t Bu_data[MOTOR_KALMAN_NUM_STATES];
    arm_mat_init_f32(&Bu_result, MOTOR_KALMAN_NUM_STATES, 1, Bu_data);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	f107 001c 	add.w	r0, r7, #28
 8001630:	2201      	movs	r2, #1
 8001632:	2104      	movs	r1, #4
 8001634:	f009 fb5f 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_mult_f32(&filter->B_d_matrix, &filter->input_matrix, &Bu_result);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f503 7366 	add.w	r3, r3, #920	@ 0x398
 8001644:	f107 021c 	add.w	r2, r7, #28
 8001648:	4619      	mov	r1, r3
 800164a:	f009 fee3 	bl	800b414 <arm_mat_mult_f32>

    // X = A_d*X + B_d*u
    arm_mat_add_f32(&filter->temp_n1_matrix, &Bu_result, &filter->X_matrix);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 701f 	add.w	r0, r3, #636	@ 0x27c
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f503 72d6 	add.w	r2, r3, #428	@ 0x1ac
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	f009 fb0e 	bl	800ac80 <arm_mat_add_f32>

    // temp1 = A_d⋅P
    status = arm_mat_mult_f32(&filter->A_d_matrix, &filter->P_matrix, &filter->temp1_nn_matrix);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f503 71da 	add.w	r1, r3, #436	@ 0x1b4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001676:	461a      	mov	r2, r3
 8001678:	f009 fecc 	bl	800b414 <arm_mat_mult_f32>
 800167c:	4603      	mov	r3, r0
 800167e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ARM_MATH_SUCCESS) return;
 8001682:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001686:	2b00      	cmp	r3, #0
 8001688:	d146      	bne.n	8001718 <MotorKalman_Predict+0x12a>

    // temp2 = A_d' (transpose of A_d)
    arm_mat_trans_f32(&filter->A_d_matrix, &filter->temp2_nn_matrix);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f503 72e2 	add.w	r2, r3, #452	@ 0x1c4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8001696:	4619      	mov	r1, r3
 8001698:	4610      	mov	r0, r2
 800169a:	f009 ffa6 	bl	800b5ea <arm_mat_trans_f32>
    // temp3 = temp1⋅A_d' = A_d⋅P⋅A_d'
    status = arm_mat_mult_f32(&filter->temp1_nn_matrix, &filter->temp2_nn_matrix, &filter->temp3_nn_matrix);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	f503 7019 	add.w	r0, r3, #612	@ 0x264
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f503 711b 	add.w	r1, r3, #620	@ 0x26c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80016b0:	461a      	mov	r2, r3
 80016b2:	f009 feaf 	bl	800b414 <arm_mat_mult_f32>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ARM_MATH_SUCCESS) return;
 80016bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d12b      	bne.n	800171c <MotorKalman_Predict+0x12e>

    // P_predicted = A_d⋅P⋅A_d' + Q_d
    status = arm_mat_add_f32(&filter->temp3_nn_matrix, &filter->Q_d_matrix, &filter->P_matrix);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f503 71fa 	add.w	r1, r3, #500	@ 0x1f4
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80016d6:	461a      	mov	r2, r3
 80016d8:	f009 fad2 	bl	800ac80 <arm_mat_add_f32>
 80016dc:	4603      	mov	r3, r0
 80016de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != ARM_MATH_SUCCESS) return;
 80016e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11a      	bne.n	8001720 <MotorKalman_Predict+0x132>

    // Update state estimates
    filter->position = filter->X[0];
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    filter->velocity = filter->X[1];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
    filter->load_torque = filter->X[2];
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
    filter->current = filter->X[3];
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
 8001712:	e006      	b.n	8001722 <MotorKalman_Predict+0x134>
    if (status != ARM_MATH_SUCCESS) return;
 8001714:	bf00      	nop
 8001716:	e004      	b.n	8001722 <MotorKalman_Predict+0x134>
    if (status != ARM_MATH_SUCCESS) return;
 8001718:	bf00      	nop
 800171a:	e002      	b.n	8001722 <MotorKalman_Predict+0x134>
    if (status != ARM_MATH_SUCCESS) return;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <MotorKalman_Predict+0x134>
    if (status != ARM_MATH_SUCCESS) return;
 8001720:	bf00      	nop
}
 8001722:	3728      	adds	r7, #40	@ 0x28
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	ed87 0a00 	vstr	s0, [r7]
    arm_status status;

    filter->measurement_data[0] = position;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	f8c3 23a0 	str.w	r2, [r3, #928]	@ 0x3a0

    // innovation = z - C⋅X_predicted = z - H⋅X
    filter->innovation[0] = position - filter->X[0];
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	ed97 7a00 	vldr	s14, [r7]
 8001746:	ee77 7a67 	vsub.f32	s15, s14, s15
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edc3 7a69 	vstr	s15, [r3, #420]	@ 0x1a4

    // temp_mn = C⋅P
    status = arm_mat_mult_f32(&filter->C_matrix, &filter->P_matrix, &filter->temp_mn_matrix);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 71da 	add.w	r1, r3, #436	@ 0x1b4
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001762:	461a      	mov	r2, r3
 8001764:	f009 fe56 	bl	800b414 <arm_mat_mult_f32>
 8001768:	4603      	mov	r3, r0
 800176a:	74fb      	strb	r3, [r7, #19]
    if (status != ARM_MATH_SUCCESS) return;
 800176c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001770:	2b00      	cmp	r3, #0
 8001772:	f040 8100 	bne.w	8001976 <MotorKalman_Update+0x24e>

    // temp_nm = C' (transpose of C)
    arm_mat_trans_f32(&filter->C_matrix, &filter->temp_nm_matrix);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 72ee 	add.w	r2, r3, #476	@ 0x1dc
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f009 ff30 	bl	800b5ea <arm_mat_trans_f32>
    // S = C⋅P⋅C'
    status = arm_mat_mult_f32(&filter->temp_mn_matrix, &filter->temp_nm_matrix, &filter->S_matrix);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f503 7023 	add.w	r0, r3, #652	@ 0x28c
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f503 7121 	add.w	r1, r3, #644	@ 0x284
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 800179c:	461a      	mov	r2, r3
 800179e:	f009 fe39 	bl	800b414 <arm_mat_mult_f32>
 80017a2:	4603      	mov	r3, r0
 80017a4:	74fb      	strb	r3, [r7, #19]
    if (status != ARM_MATH_SUCCESS) return;
 80017a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80e5 	bne.w	800197a <MotorKalman_Update+0x252>

    // S = C⋅P⋅C' + R (innovation covariance)
    filter->S[0] += filter->R[0];
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	ed93 7a6a 	vldr	s14, [r3, #424]	@ 0x1a8
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80017bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8

    // K = P⋅C' (before scaling by S_inv)
    status = arm_mat_mult_f32(&filter->P_matrix, &filter->temp_nm_matrix, &filter->K_matrix);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f503 7121 	add.w	r1, r3, #644	@ 0x284
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 80017d8:	461a      	mov	r2, r3
 80017da:	f009 fe1b 	bl	800b414 <arm_mat_mult_f32>
 80017de:	4603      	mov	r3, r0
 80017e0:	74fb      	strb	r3, [r7, #19]
    if (status != ARM_MATH_SUCCESS) return;
 80017e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f040 80c9 	bne.w	800197e <MotorKalman_Update+0x256>

    // K = P⋅C'⋅S^(-1) (Kalman gain)
    float32_t S_inv = 1.0f / filter->S[0];
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	ed93 7a6a 	vldr	s14, [r3, #424]	@ 0x1a8
 80017f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	edc7 7a03 	vstr	s15, [r7, #12]
    arm_mat_scale_f32(&filter->K_matrix, S_inv, &filter->K_matrix);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f503 7301 	add.w	r3, r3, #516	@ 0x204
 800180a:	4619      	mov	r1, r3
 800180c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001810:	4610      	mov	r0, r2
 8001812:	f009 fe79 	bl	800b508 <arm_mat_scale_f32>

    // X = X_predicted + K⋅innovation
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e01d      	b.n	8001858 <MotorKalman_Update+0x130>
        filter->X[i] += filter->K[i] * filter->innovation[0];
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3364      	adds	r3, #100	@ 0x64
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	4413      	add	r3, r2
 8001832:	3304      	adds	r3, #4
 8001834:	edd3 6a00 	vldr	s13, [r3]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800183e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b03      	cmp	r3, #3
 800185c:	ddde      	ble.n	800181c <MotorKalman_Update+0xf4>
    }

    // temp1 = K⋅C
    arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &filter->temp1_nn_matrix);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f503 71ee 	add.w	r1, r3, #476	@ 0x1dc
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001870:	461a      	mov	r2, r3
 8001872:	f009 fdcf 	bl	800b414 <arm_mat_mult_f32>
    // temp2 = I - K⋅C
    arm_mat_sub_f32(&filter->I_matrix, &filter->temp1_nn_matrix, &filter->temp2_nn_matrix);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f503 7007 	add.w	r0, r3, #540	@ 0x21c
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f503 7119 	add.w	r1, r3, #612	@ 0x264
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f503 731b 	add.w	r3, r3, #620	@ 0x26c
 8001888:	461a      	mov	r2, r3
 800188a:	f009 fe73 	bl	800b574 <arm_mat_sub_f32>

    // temp1 = (I - K⋅C)⋅P
    status = arm_mat_mult_f32(&filter->temp2_nn_matrix, &filter->P_matrix, &filter->temp1_nn_matrix);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f503 701b 	add.w	r0, r3, #620	@ 0x26c
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f503 71da 	add.w	r1, r3, #436	@ 0x1b4
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80018a0:	461a      	mov	r2, r3
 80018a2:	f009 fdb7 	bl	800b414 <arm_mat_mult_f32>
 80018a6:	4603      	mov	r3, r0
 80018a8:	74fb      	strb	r3, [r7, #19]
    if (status != ARM_MATH_SUCCESS) return;
 80018aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d167      	bne.n	8001982 <MotorKalman_Update+0x25a>

    // temp3 = (I - K⋅C)' (transpose)
    arm_mat_trans_f32(&filter->temp2_nn_matrix, &filter->temp3_nn_matrix);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f503 721b 	add.w	r2, r3, #620	@ 0x26c
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f009 fe92 	bl	800b5ea <arm_mat_trans_f32>
    // P = (I - K⋅C)⋅P⋅(I - K⋅C)' (Joseph form for numerical stability)
    status = arm_mat_mult_f32(&filter->temp1_nn_matrix, &filter->temp3_nn_matrix, &filter->P_matrix);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f503 7019 	add.w	r0, r3, #612	@ 0x264
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f503 711d 	add.w	r1, r3, #628	@ 0x274
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80018d8:	461a      	mov	r2, r3
 80018da:	f009 fd9b 	bl	800b414 <arm_mat_mult_f32>
 80018de:	4603      	mov	r3, r0
 80018e0:	74fb      	strb	r3, [r7, #19]
    if (status != ARM_MATH_SUCCESS) return;
 80018e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d14d      	bne.n	8001986 <MotorKalman_Update+0x25e>

    // temp_nm = K' (transpose of K)
    arm_mat_trans_f32(&filter->K_matrix, &filter->temp_nm_matrix);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f503 7201 	add.w	r2, r3, #516	@ 0x204
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80018f6:	4619      	mov	r1, r3
 80018f8:	4610      	mov	r0, r2
 80018fa:	f009 fe76 	bl	800b5ea <arm_mat_trans_f32>
    // temp1 = K⋅K'
    arm_mat_mult_f32(&filter->K_matrix, &filter->temp_nm_matrix, &filter->temp1_nn_matrix);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f503 7121 	add.w	r1, r3, #644	@ 0x284
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001910:	461a      	mov	r2, r3
 8001912:	f009 fd7f 	bl	800b414 <arm_mat_mult_f32>
    // temp1 = K⋅R⋅K'
    arm_mat_scale_f32(&filter->temp1_nn_matrix, filter->R[0], &filter->temp1_nn_matrix);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f503 7219 	add.w	r2, r3, #612	@ 0x264
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001928:	4619      	mov	r1, r3
 800192a:	eeb0 0a67 	vmov.f32	s0, s15
 800192e:	4610      	mov	r0, r2
 8001930:	f009 fdea 	bl	800b508 <arm_mat_scale_f32>
    // P = (I - K⋅C)⋅P⋅(I - K⋅C)' + K⋅R⋅K' (complete Joseph form)
    arm_mat_add_f32(&filter->P_matrix, &filter->temp1_nn_matrix, &filter->P_matrix);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f503 7119 	add.w	r1, r3, #612	@ 0x264
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8001946:	461a      	mov	r2, r3
 8001948:	f009 f99a 	bl	800ac80 <arm_mat_add_f32>

    // Update state estimates
    filter->position = filter->X[0];
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    filter->velocity = filter->X[1];
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0
    filter->load_torque = filter->X[2];
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689a      	ldr	r2, [r3, #8]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
    filter->current = filter->X[3];
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8
 8001974:	e008      	b.n	8001988 <MotorKalman_Update+0x260>
    if (status != ARM_MATH_SUCCESS) return;
 8001976:	bf00      	nop
 8001978:	e006      	b.n	8001988 <MotorKalman_Update+0x260>
    if (status != ARM_MATH_SUCCESS) return;
 800197a:	bf00      	nop
 800197c:	e004      	b.n	8001988 <MotorKalman_Update+0x260>
    if (status != ARM_MATH_SUCCESS) return;
 800197e:	bf00      	nop
 8001980:	e002      	b.n	8001988 <MotorKalman_Update+0x260>
    if (status != ARM_MATH_SUCCESS) return;
 8001982:	bf00      	nop
 8001984:	e000      	b.n	8001988 <MotorKalman_Update+0x260>
    if (status != ARM_MATH_SUCCESS) return;
 8001986:	bf00      	nop
}
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <MotorKalman_Estimate>:

float32_t MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 800198e:	b580      	push	{r7, lr}
 8001990:	b084      	sub	sp, #16
 8001992:	af00      	add	r7, sp, #0
 8001994:	60f8      	str	r0, [r7, #12]
 8001996:	ed87 0a02 	vstr	s0, [r7, #8]
 800199a:	edc7 0a01 	vstr	s1, [r7, #4]
    MotorKalman_Predict(filter, voltage_input);
 800199e:	ed97 0a02 	vldr	s0, [r7, #8]
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f7ff fe23 	bl	80015ee <MotorKalman_Predict>

    MotorKalman_Update(filter, position);
 80019a8:	ed97 0a01 	vldr	s0, [r7, #4]
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f7ff febb 	bl	8001728 <MotorKalman_Update>

    return filter->velocity;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80019b8:	ee07 3a90 	vmov	s15, r3
}
 80019bc:	eeb0 0a67 	vmov.f32	s0, s15
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 80019c6:	b480      	push	{r7}
 80019c8:	b087      	sub	sp, #28
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e00c      	b.n	80019f2 <matrix_copy+0x2c>
        dst[i] = src[i];
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	441a      	add	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	440b      	add	r3, r1
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbee      	blt.n	80019d8 <matrix_copy+0x12>
    }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <matrix_add>:

static void matrix_add(float32_t *src1, float32_t *src2, float32_t *dst, int size) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < size; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	e016      	b.n	8001a4a <matrix_add+0x42>
        dst[i] = src1[i] + src2[i];
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	ed93 7a00 	vldr	s14, [r3]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	4413      	add	r3, r2
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a40:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < size; i++) {
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbe4      	blt.n	8001a1c <matrix_add+0x14>
    }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b0f3      	sub	sp, #460	@ 0x1cc
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	f507 74e4 	add.w	r4, r7, #456	@ 0x1c8
 8001a6a:	f5a4 74da 	sub.w	r4, r4, #436	@ 0x1b4
 8001a6e:	6020      	str	r0, [r4, #0]
 8001a70:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 8001a74:	f5a0 70dc 	sub.w	r0, r0, #440	@ 0x1b8
 8001a78:	6001      	str	r1, [r0, #0]
 8001a7a:	f507 71e4 	add.w	r1, r7, #456	@ 0x1c8
 8001a7e:	f5a1 71de 	sub.w	r1, r1, #444	@ 0x1bc
 8001a82:	ed81 0a00 	vstr	s0, [r1]
 8001a86:	f507 71e4 	add.w	r1, r7, #456	@ 0x1c8
 8001a8a:	f5a1 71e0 	sub.w	r1, r1, #448	@ 0x1c0
 8001a8e:	600a      	str	r2, [r1, #0]
 8001a90:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8001a94:	f5a2 72e2 	sub.w	r2, r2, #452	@ 0x1c4
 8001a98:	6013      	str	r3, [r2, #0]
    arm_status status;
    const int n = 4;  // State dimension
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    const int max_terms = 15;  // Number of Taylor series terms for accuracy
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8

    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, n, n, A_c);
 8001aa6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001ab6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001aba:	f507 70ce 	add.w	r0, r7, #412	@ 0x19c
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f009 f919 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, n, n, A_d);
 8001ac4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ac8:	b299      	uxth	r1, r3
 8001aca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001ad4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001ad8:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f009 f90a 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, n, 1, B_c);
 8001ae2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ae6:	b299      	uxth	r1, r3
 8001ae8:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001aec:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001af0:	f507 70c6 	add.w	r0, r7, #396	@ 0x18c
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	f009 f8fd 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, n, 1, B_d);
 8001afc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b00:	b299      	uxth	r1, r3
 8001b02:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001b06:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001b0a:	f507 70c2 	add.w	r0, r7, #388	@ 0x184
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f009 f8f0 	bl	800acf6 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8001b16:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001b1a:	2240      	movs	r2, #64	@ 0x40
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 fda4 	bl	800b66c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, n, n, I_data);
 8001b24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b28:	b299      	uxth	r1, r3
 8001b2a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001b34:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001b38:	f009 f8dd 	bl	800acf6 <arm_mat_init_f32>
    for (int i = 0; i < n; i++) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b42:	e015      	b.n	8001b70 <discretize_system_with_arm+0x110>
        I_data[i*n + i] = 1.0f;
 8001b44:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b48:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001b4c:	fb03 f202 	mul.w	r2, r3, r2
 8001b50:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8001b5c:	443b      	add	r3, r7
 8001b5e:	3b84      	subs	r3, #132	@ 0x84
 8001b60:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001b64:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8001b66:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001b70:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8001b74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbe3      	blt.n	8001b44 <discretize_system_with_arm+0xe4>
     * Compute A_d = e^(A⋅dt) using Taylor series:
     * e^(A⋅dt) = I + A⋅dt + (A⋅dt)²/2! + (A⋅dt)³/3! + ...
     */

    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, n*n);
 8001b7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b80:	fb03 f203 	mul.w	r2, r3, r3
 8001b84:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001b88:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001b8c:	f507 70a2 	add.w	r0, r7, #324	@ 0x144
 8001b90:	6819      	ldr	r1, [r3, #0]
 8001b92:	f7ff ff18 	bl	80019c6 <matrix_copy>
    // Working matrices
    float32_t A_power_data[16];      // Stores (A⋅dt)^k
    float32_t temp_data[16];          // Temporary storage
    float32_t A_dt_data[16];          // Stores A⋅dt
    arm_matrix_instance_f32 A_power_matrix, temp_matrix, A_dt_matrix;
    arm_mat_init_f32(&A_power_matrix, n, n, A_power_data);
 8001b96:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ba6:	f107 0074 	add.w	r0, r7, #116	@ 0x74
 8001baa:	f009 f8a4 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, n, n, temp_data);
 8001bae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001bbe:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8001bc2:	f009 f898 	bl	800acf6 <arm_mat_init_f32>
    arm_mat_init_f32(&A_dt_matrix, n, n, A_dt_data);
 8001bc6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001bd6:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8001bda:	f009 f88c 	bl	800acf6 <arm_mat_init_f32>

    // Calculate A⋅dt
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8001bde:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001be2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001be6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001bea:	f507 72ce 	add.w	r2, r7, #412	@ 0x19c
 8001bee:	ed93 0a00 	vldr	s0, [r3]
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	f009 fc88 	bl	800b508 <arm_mat_scale_f32>

    // Initialize A_power to A⋅dt for first iteration
    matrix_copy(A_dt_data, A_power_data, n*n);
 8001bf8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001bfc:	fb03 f203 	mul.w	r2, r3, r3
 8001c00:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001c04:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fedc 	bl	80019c6 <matrix_copy>

    // Add Taylor series terms
    float32_t factorial = 1.0f;
 8001c0e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001c12:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
    for (int k = 1; k <= max_terms; k++) {
 8001c16:	2301      	movs	r3, #1
 8001c18:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c1c:	e053      	b.n	8001cc6 <discretize_system_with_arm+0x266>
        factorial *= k;
 8001c1e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	ed97 7a70 	vldr	s14, [r7, #448]	@ 0x1c0
 8001c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c32:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0

        // Add (A⋅dt)^k / k! to A_d
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8001c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c3a:	edd7 7a70 	vldr	s15, [r7, #448]	@ 0x1c0
 8001c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001c42:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001c46:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c50:	4618      	mov	r0, r3
 8001c52:	f009 fc59 	bl	800b508 <arm_mat_scale_f32>
        matrix_add(A_d, temp_data, A_d, n*n);
 8001c56:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001c5a:	fb03 f303 	mul.w	r3, r3, r3
 8001c5e:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8001c62:	f5a2 72e0 	sub.w	r2, r2, #448	@ 0x1c0
 8001c66:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001c6a:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 8001c6e:	f5a0 70e0 	sub.w	r0, r0, #448	@ 0x1c0
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6800      	ldr	r0, [r0, #0]
 8001c76:	f7ff fec7 	bl	8001a08 <matrix_add>

        // Compute next power: A_power = A_power * A_dt
        if (k < max_terms) {
 8001c7a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001c7e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001c82:	429a      	cmp	r2, r3
 8001c84:	da1a      	bge.n	8001cbc <discretize_system_with_arm+0x25c>
            status = arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8001c86:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001c8a:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8001c8e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001c92:	4618      	mov	r0, r3
 8001c94:	f009 fbbe 	bl	800b414 <arm_mat_mult_f32>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
            if (status == ARM_MATH_SUCCESS) {
 8001c9e:	f997 31a7 	ldrsb.w	r3, [r7, #423]	@ 0x1a7
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10a      	bne.n	8001cbc <discretize_system_with_arm+0x25c>
                matrix_copy(temp_data, A_power_data, n*n);
 8001ca6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001caa:	fb03 f203 	mul.w	r2, r3, r3
 8001cae:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001cb2:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fe85 	bl	80019c6 <matrix_copy>
    for (int k = 1; k <= max_terms; k++) {
 8001cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001cc6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001cca:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	dda5      	ble.n	8001c1e <discretize_system_with_arm+0x1be>
     *
     * This is the integral of the matrix exponential series
     */

    // Initialize integral matrix to dt⋅I
    float32_t integral_data[16] = {0};
 8001cd2:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001cd6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	2340      	movs	r3, #64	@ 0x40
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f009 fcc3 	bl	800b66c <memset>
    arm_matrix_instance_f32 integral_matrix;
    arm_mat_init_f32(&integral_matrix, n, n, integral_data);
 8001ce6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001cea:	b299      	uxth	r1, r3
 8001cec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf6:	f107 001c 	add.w	r0, r7, #28
 8001cfa:	f008 fffc 	bl	800acf6 <arm_mat_init_f32>
    for (int i = 0; i < n; i++) {
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001d04:	e019      	b.n	8001d3a <discretize_system_with_arm+0x2da>
        integral_data[i*n + i] = dt;
 8001d06:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001d0a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8001d0e:	fb03 f202 	mul.w	r2, r3, r2
 8001d12:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001d16:	4413      	add	r3, r2
 8001d18:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8001d1c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8001d28:	f5a2 72de 	sub.w	r2, r2, #444	@ 0x1bc
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8001d30:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001d34:	3301      	adds	r3, #1
 8001d36:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8001d3a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001d3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dbdf      	blt.n	8001d06 <discretize_system_with_arm+0x2a6>
    }

    // Reset A_power to A for computing integral series
    matrix_copy(A_c, A_power_data, n*n);
 8001d46:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001d4a:	fb03 f203 	mul.w	r2, r3, r3
 8001d4e:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001d52:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001d56:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	f7ff fe33 	bl	80019c6 <matrix_copy>

    // Add integral series terms
    float32_t dt_power = dt * dt;  // dt²
 8001d60:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001d64:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001d68:	edd3 7a00 	vldr	s15, [r3]
 8001d6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001d70:	edc7 7a6d 	vstr	s15, [r7, #436]	@ 0x1b4
    factorial = 1.0f;
 8001d74:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001d78:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

    for (int k = 1; k <= max_terms; k++) {
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001d82:	e05a      	b.n	8001e3a <discretize_system_with_arm+0x3da>
        factorial *= (k + 1);  // (k+1)! for integral
 8001d84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001d88:	3301      	adds	r3, #1
 8001d8a:	ee07 3a90 	vmov	s15, r3
 8001d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d92:	ed97 7a70 	vldr	s14, [r7, #448]	@ 0x1c0
 8001d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d9a:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0

        // Add A^k⋅dt^(k+1) / (k+1)! to integral
        arm_mat_scale_f32(&A_power_matrix, dt_power/factorial, &temp_matrix);
 8001d9e:	ed97 7a6d 	vldr	s14, [r7, #436]	@ 0x1b4
 8001da2:	edd7 7a70 	vldr	s15, [r7, #448]	@ 0x1c0
 8001da6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001daa:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001dae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001db2:	4611      	mov	r1, r2
 8001db4:	eeb0 0a66 	vmov.f32	s0, s13
 8001db8:	4618      	mov	r0, r3
 8001dba:	f009 fba5 	bl	800b508 <arm_mat_scale_f32>
        matrix_add(integral_data, temp_data, integral_data, n*n);
 8001dbe:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001dc2:	fb03 f303 	mul.w	r3, r3, r3
 8001dc6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001dca:	f107 01bc 	add.w	r1, r7, #188	@ 0xbc
 8001dce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001dd2:	f7ff fe19 	bl	8001a08 <matrix_add>

        // Update dt_power for next term
        dt_power *= dt;
 8001dd6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 8001dda:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001dde:	ed97 7a6d 	vldr	s14, [r7, #436]	@ 0x1b4
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	edc7 7a6d 	vstr	s15, [r7, #436]	@ 0x1b4

        // Compute next power of A: A_power = A_power * A
        if (k < max_terms) {
 8001dee:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001df2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001df6:	429a      	cmp	r2, r3
 8001df8:	da1a      	bge.n	8001e30 <discretize_system_with_arm+0x3d0>
            status = arm_mat_mult_f32(&A_power_matrix, &A_c_matrix, &temp_matrix);
 8001dfa:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001dfe:	f507 71ce 	add.w	r1, r7, #412	@ 0x19c
 8001e02:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e06:	4618      	mov	r0, r3
 8001e08:	f009 fb04 	bl	800b414 <arm_mat_mult_f32>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
            if (status == ARM_MATH_SUCCESS) {
 8001e12:	f997 31a7 	ldrsb.w	r3, [r7, #423]	@ 0x1a7
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10a      	bne.n	8001e30 <discretize_system_with_arm+0x3d0>
                matrix_copy(temp_data, A_power_data, n*n);
 8001e1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001e1e:	fb03 f203 	mul.w	r2, r3, r3
 8001e22:	f107 01fc 	add.w	r1, r7, #252	@ 0xfc
 8001e26:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff fdcb 	bl	80019c6 <matrix_copy>
    for (int k = 1; k <= max_terms; k++) {
 8001e30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001e34:	3301      	adds	r3, #1
 8001e36:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8001e3a:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8001e3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001e42:	429a      	cmp	r2, r3
 8001e44:	dd9e      	ble.n	8001d84 <discretize_system_with_arm+0x324>
            }
        }
    }

    // Finally, compute B_d = integral * B_c
    status = arm_mat_mult_f32(&integral_matrix, &B_c_matrix, &B_d_matrix);
 8001e46:	f507 72c2 	add.w	r2, r7, #388	@ 0x184
 8001e4a:	f507 71c6 	add.w	r1, r7, #396	@ 0x18c
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	4618      	mov	r0, r3
 8001e54:	f009 fade 	bl	800b414 <arm_mat_mult_f32>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 31a7 	strb.w	r3, [r7, #423]	@ 0x1a7
}
 8001e5e:	bf00      	nop
 8001e60:	f507 77e6 	add.w	r7, r7, #460	@ 0x1cc
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd90      	pop	{r4, r7, pc}

08001e68 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09e      	sub	sp, #120	@ 0x78
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8001e72:	edc7 0a08 	vstr	s1, [r7, #32]
 8001e76:	ed87 1a07 	vstr	s2, [r7, #28]
 8001e7a:	edc7 1a06 	vstr	s3, [r7, #24]
 8001e7e:	ed87 2a05 	vstr	s4, [r7, #20]
 8001e82:	edc7 2a04 	vstr	s5, [r7, #16]
 8001e86:	ed87 3a03 	vstr	s6, [r7, #12]
 8001e8a:	60b8      	str	r0, [r7, #8]
 8001e8c:	6079      	str	r1, [r7, #4]

	//Continuous-time system model
	float32_t A_c[16] = {0};
 8001e8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f009 fbe8 	bl	800b66c <memset>
    float32_t B_c[4] = {0};
 8001e9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]

    A_c[0*4 + 1] = 1.0f;
 8001eaa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001eae:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8001eb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb4:	eef1 6a67 	vneg.f32	s13, s15
 8001eb8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ec0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8001ec4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8001ec8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8001ed4:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ed8:	ed97 7a07 	vldr	s14, [r7, #28]
 8001edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ee0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    A_c[3*4 + 1] = -ke/L_a;
 8001ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee8:	eef1 6a67 	vneg.f32	s13, s15
 8001eec:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8001ef8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001efc:	eef1 6a67 	vneg.f32	s13, s15
 8001f00:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f08:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    B_c[3] = 1.0f/L_a;
 8001f0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f10:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f18:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8001f1c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001f20:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f2c:	f7ff fd98 	bl	8001a60 <discretize_system_with_arm>
}
 8001f30:	bf00      	nop
 8001f32:	3778      	adds	r7, #120	@ 0x78
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	60f8      	str	r0, [r7, #12]
 8001f40:	60b9      	str	r1, [r7, #8]
 8001f42:	4613      	mov	r3, r2
 8001f44:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a0b      	ldr	r2, [pc, #44]	@ (8001f78 <PWM_init+0x40>)
 8001f4a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	88fa      	ldrh	r2, [r7, #6]
 8001f56:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f005 fc96 	bl	8007890 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	4619      	mov	r1, r3
 8001f68:	68b8      	ldr	r0, [r7, #8]
 8001f6a:	f005 fddd 	bl	8007b28 <HAL_TIM_PWM_Start>
}
 8001f6e:	bf00      	nop
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	0a21fe80 	.word	0x0a21fe80
 8001f7c:	00000000 	.word	0x00000000

08001f80 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f8c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001f90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9c:	d137      	bne.n	800200e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	889b      	ldrh	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <PWM_write_range+0x32>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001fb0:	e0e1      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	889b      	ldrh	r3, [r3, #4]
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d105      	bne.n	8001fc6 <PWM_write_range+0x46>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001fc4:	e0d7      	b.n	8002176 <PWM_write_range+0x1f6>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	889b      	ldrh	r3, [r3, #4]
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d105      	bne.n	8001fda <PWM_write_range+0x5a>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001fd8:	e0cd      	b.n	8002176 <PWM_write_range+0x1f6>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	889b      	ldrh	r3, [r3, #4]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d105      	bne.n	8001fee <PWM_write_range+0x6e>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2300      	movs	r3, #0
 8001fea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fec:	e0c3      	b.n	8002176 <PWM_write_range+0x1f6>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	889b      	ldrh	r3, [r3, #4]
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d105      	bne.n	8002002 <PWM_write_range+0x82>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	6493      	str	r3, [r2, #72]	@ 0x48
 8002000:	e0b9      	b.n	8002176 <PWM_write_range+0x1f6>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2300      	movs	r3, #0
 800200a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800200c:	e0b3      	b.n	8002176 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800201a:	ed97 7a02 	vldr	s14, [r7, #8]
 800201e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002022:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002026:	ee17 2a90 	vmov	r2, s15
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002036:	33fe      	adds	r3, #254	@ 0xfe
 8002038:	4a53      	ldr	r2, [pc, #332]	@ (8002188 <PWM_write_range+0x208>)
 800203a:	fba2 2303 	umull	r2, r3, r2, r3
 800203e:	0bdb      	lsrs	r3, r3, #15
 8002040:	b29b      	uxth	r3, r3
 8002042:	3b01      	subs	r3, #1
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	899b      	ldrh	r3, [r3, #12]
 800205a:	3301      	adds	r3, #1
 800205c:	ee07 3a90 	vmov	s15, r3
 8002060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002068:	ed97 7a02 	vldr	s14, [r7, #8]
 800206c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002070:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002074:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b29a      	uxth	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	89db      	ldrh	r3, [r3, #14]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa16 	bl	80004bc <__aeabi_i2d>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	edd7 7a01 	vldr	s15, [r7, #4]
 8002098:	eef0 7ae7 	vabs.f32	s15, s15
 800209c:	ee17 0a90 	vmov	r0, s15
 80020a0:	f7fe fa1e 	bl	80004e0 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4620      	mov	r0, r4
 80020aa:	4629      	mov	r1, r5
 80020ac:	f7fe fa70 	bl	8000590 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	a331      	add	r3, pc, #196	@ (adr r3, 8002180 <PWM_write_range+0x200>)
 80020ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020be:	f7fe fb91 	bl	80007e4 <__aeabi_ddiv>
 80020c2:	4602      	mov	r2, r0
 80020c4:	460b      	mov	r3, r1
 80020c6:	4610      	mov	r0, r2
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7fe fc73 	bl	80009b4 <__aeabi_d2uiz>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	899a      	ldrh	r2, [r3, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	89da      	ldrh	r2, [r3, #14]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	89da      	ldrh	r2, [r3, #14]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	889b      	ldrh	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <PWM_write_range+0x190>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	6952      	ldr	r2, [r2, #20]
 800210c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800210e:	e032      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	889b      	ldrh	r3, [r3, #4]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d106      	bne.n	8002126 <PWM_write_range+0x1a6>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002124:	e027      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	2b08      	cmp	r3, #8
 800212c:	d106      	bne.n	800213c <PWM_write_range+0x1bc>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800213a:	e01c      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	2b0c      	cmp	r3, #12
 8002142:	d106      	bne.n	8002152 <PWM_write_range+0x1d2>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002150:	e011      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	889b      	ldrh	r3, [r3, #4]
 8002156:	2b10      	cmp	r3, #16
 8002158:	d106      	bne.n	8002168 <PWM_write_range+0x1e8>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002166:	e006      	b.n	8002176 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002174:	e7ff      	b.n	8002176 <PWM_write_range+0x1f6>
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bdb0      	pop	{r4, r5, r7, pc}
 800217e:	bf00      	nop
 8002180:	00000000 	.word	0x00000000
 8002184:	40efffe0 	.word	0x40efffe0
 8002188:	80008001 	.word	0x80008001

0800218c <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6178      	str	r0, [r7, #20]
 8002194:	6139      	str	r1, [r7, #16]
 8002196:	60fa      	str	r2, [r7, #12]
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	ed87 0a01 	vstr	s0, [r7, #4]
 800219e:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80021ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	fb93 f2f2 	sdiv	r2, r3, r2
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	fb01 f202 	mul.w	r2, r1, r2
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	2200      	movs	r2, #0
 8002210:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f04f 0200 	mov.w	r2, #0
 8002220:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800225a:	213c      	movs	r1, #60	@ 0x3c
 800225c:	6938      	ldr	r0, [r7, #16]
 800225e:	f005 fe91 	bl	8007f84 <HAL_TIM_Encoder_Start>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	0000      	movs	r0, r0
 800226c:	0000      	movs	r0, r0
	...

08002270 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8002270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	0fda      	lsrs	r2, r3, #31
 8002298:	4413      	add	r3, r2
 800229a:	105b      	asrs	r3, r3, #1
 800229c:	461a      	mov	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4293      	cmp	r3, r2
 80022a2:	dd05      	ble.n	80022b0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e00e      	b.n	80022ce <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	0fda      	lsrs	r2, r3, #31
 80022b6:	4413      	add	r3, r2
 80022b8:	105b      	asrs	r3, r3, #1
 80022ba:	425b      	negs	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	da04      	bge.n	80022ce <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	4413      	add	r3, r2
 80022cc:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022dc:	441a      	add	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ec:	ee07 3a90 	vmov	s15, r3
 80022f0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002300:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800230a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800230e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f8df 	bl	80004e0 <__aeabi_f2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800233e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002342:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f8c9 	bl	80004e0 <__aeabi_f2d>
 800234e:	a33c      	add	r3, pc, #240	@ (adr r3, 8002440 <QEI_get_diff_count+0x1d0>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe f91c 	bl	8000590 <__aeabi_dmul>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4690      	mov	r8, r2
 800235e:	4699      	mov	r9, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8bb 	bl	80004e0 <__aeabi_f2d>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	4640      	mov	r0, r8
 8002370:	4649      	mov	r1, r9
 8002372:	f7fe f90d 	bl	8000590 <__aeabi_dmul>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4620      	mov	r0, r4
 800237c:	4629      	mov	r1, r5
 800237e:	f7fd ff51 	bl	8000224 <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4610      	mov	r0, r2
 8002388:	4619      	mov	r1, r3
 800238a:	f7fe fb33 	bl	80009f4 <__aeabi_d2f>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8a1 	bl	80004e0 <__aeabi_f2d>
 800239e:	4604      	mov	r4, r0
 80023a0:	460d      	mov	r5, r1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023be:	ee16 0a90 	vmov	r0, s13
 80023c2:	f7fe f88d 	bl	80004e0 <__aeabi_f2d>
 80023c6:	a31e      	add	r3, pc, #120	@ (adr r3, 8002440 <QEI_get_diff_count+0x1d0>)
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f7fe f8e0 	bl	8000590 <__aeabi_dmul>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4690      	mov	r8, r2
 80023d6:	4699      	mov	r9, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe f87f 	bl	80004e0 <__aeabi_f2d>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4640      	mov	r0, r8
 80023e8:	4649      	mov	r1, r9
 80023ea:	f7fe f8d1 	bl	8000590 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4690      	mov	r8, r2
 80023f4:	4699      	mov	r9, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f870 	bl	80004e0 <__aeabi_f2d>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4640      	mov	r0, r8
 8002406:	4649      	mov	r1, r9
 8002408:	f7fe f8c2 	bl	8000590 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4620      	mov	r0, r4
 8002412:	4629      	mov	r1, r5
 8002414:	f7fd ff06 	bl	8000224 <__adddf3>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4610      	mov	r0, r2
 800241e:	4619      	mov	r1, r3
 8002420:	f7fe fae8 	bl	80009f4 <__aeabi_d2f>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	605a      	str	r2, [r3, #4]
}
 8002432:	bf00      	nop
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800243c:	f3af 8000 	nop.w
 8002440:	54442d18 	.word	0x54442d18
 8002444:	400921fb 	.word	0x400921fb

08002448 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	ee07 3a90 	vmov	s15, r3
 8002460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f836 	bl	80004e0 <__aeabi_f2d>
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	4b83      	ldr	r3, [pc, #524]	@ (8002688 <QEI_compute_data+0x240>)
 800247a:	f7fe f889 	bl	8000590 <__aeabi_dmul>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4614      	mov	r4, r2
 8002484:	461d      	mov	r5, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	ee07 3a90 	vmov	s15, r3
 800248e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002492:	ee17 0a90 	vmov	r0, s15
 8002496:	f7fe f823 	bl	80004e0 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4620      	mov	r0, r4
 80024a0:	4629      	mov	r1, r5
 80024a2:	f7fe f99f 	bl	80007e4 <__aeabi_ddiv>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	461d      	mov	r5, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe f814 	bl	80004e0 <__aeabi_f2d>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4620      	mov	r0, r4
 80024be:	4629      	mov	r1, r5
 80024c0:	f7fe f866 	bl	8000590 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fa92 	bl	80009f4 <__aeabi_d2f>
 80024d0:	4602      	mov	r2, r0
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80024dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024e0:	ee17 0a90 	vmov	r0, s15
 80024e4:	f7fd fffc 	bl	80004e0 <__aeabi_f2d>
 80024e8:	a365      	add	r3, pc, #404	@ (adr r3, 8002680 <QEI_compute_data+0x238>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe f84f 	bl	8000590 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	461d      	mov	r5, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002506:	ee17 0a90 	vmov	r0, s15
 800250a:	f7fd ffe9 	bl	80004e0 <__aeabi_f2d>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4620      	mov	r0, r4
 8002514:	4629      	mov	r1, r5
 8002516:	f7fe f965 	bl	80007e4 <__aeabi_ddiv>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd ffda 	bl	80004e0 <__aeabi_f2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fe f82c 	bl	8000590 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	f7fe fa58 	bl	80009f4 <__aeabi_d2f>
 8002544:	4602      	mov	r2, r0
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	4618      	mov	r0, r3
 8002550:	f7fd ffc6 	bl	80004e0 <__aeabi_f2d>
 8002554:	a34a      	add	r3, pc, #296	@ (adr r3, 8002680 <QEI_compute_data+0x238>)
 8002556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255a:	f7fe f819 	bl	8000590 <__aeabi_dmul>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4614      	mov	r4, r2
 8002564:	461d      	mov	r5, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd ffb8 	bl	80004e0 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4620      	mov	r0, r4
 8002576:	4629      	mov	r1, r5
 8002578:	f7fe f80a 	bl	8000590 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4614      	mov	r4, r2
 8002582:	461d      	mov	r5, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002590:	ee17 0a90 	vmov	r0, s15
 8002594:	f7fd ffa4 	bl	80004e0 <__aeabi_f2d>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4620      	mov	r0, r4
 800259e:	4629      	mov	r1, r5
 80025a0:	f7fe f920 	bl	80007e4 <__aeabi_ddiv>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd ff95 	bl	80004e0 <__aeabi_f2d>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4620      	mov	r0, r4
 80025bc:	4629      	mov	r1, r5
 80025be:	f7fd ffe7 	bl	8000590 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f7fe fa13 	bl	80009f4 <__aeabi_d2f>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f4:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 80025f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80025fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002604:	d00a      	beq.n	800261c <QEI_compute_data+0x1d4>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002612:	edd7 7a03 	vldr	s15, [r7, #12]
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	e001      	b.n	8002620 <QEI_compute_data+0x1d8>
 800261c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800268c <QEI_compute_data+0x244>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	ed93 7a04 	vldr	s14, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002636:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 800263a:	edd7 7a02 	vldr	s15, [r7, #8]
 800263e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002646:	d00a      	beq.n	800265e <QEI_compute_data+0x216>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002654:	edd7 7a02 	vldr	s15, [r7, #8]
 8002658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265c:	e001      	b.n	8002662 <QEI_compute_data+0x21a>
 800265e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800268c <QEI_compute_data+0x244>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	615a      	str	r2, [r3, #20]
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bdb0      	pop	{r4, r5, r7, pc}
 8002680:	54442d18 	.word	0x54442d18
 8002684:	400921fb 	.word	0x400921fb
 8002688:	404e0000 	.word	0x404e0000
 800268c:	00000000 	.word	0x00000000

08002690 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b08c      	sub	sp, #48	@ 0x30
 8002694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]
 800269e:	605a      	str	r2, [r3, #4]
 80026a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026a2:	1d3b      	adds	r3, r7, #4
 80026a4:	2220      	movs	r2, #32
 80026a6:	2100      	movs	r1, #0
 80026a8:	4618      	mov	r0, r3
 80026aa:	f008 ffdf 	bl	800b66c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026ae:	4b39      	ldr	r3, [pc, #228]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80026b6:	4b37      	ldr	r3, [pc, #220]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026be:	4b35      	ldr	r3, [pc, #212]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80026c4:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80026ca:	4b32      	ldr	r3, [pc, #200]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026d0:	4b30      	ldr	r3, [pc, #192]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026d8:	2204      	movs	r2, #4
 80026da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80026e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026ea:	2202      	movs	r2, #2
 80026ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026ee:	4b29      	ldr	r3, [pc, #164]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80026f6:	4b27      	ldr	r3, [pc, #156]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026fc:	4b25      	ldr	r3, [pc, #148]	@ (8002794 <MX_ADC1_Init+0x104>)
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002702:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <MX_ADC1_Init+0x104>)
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <MX_ADC1_Init+0x104>)
 800270c:	2200      	movs	r2, #0
 800270e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002710:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <MX_ADC1_Init+0x104>)
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002718:	481e      	ldr	r0, [pc, #120]	@ (8002794 <MX_ADC1_Init+0x104>)
 800271a:	f002 fbb3 	bl	8004e84 <HAL_ADC_Init>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002724:	f000 fe26 	bl	8003374 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800272c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002730:	4619      	mov	r1, r3
 8002732:	4818      	ldr	r0, [pc, #96]	@ (8002794 <MX_ADC1_Init+0x104>)
 8002734:	f003 f9c8 	bl	8005ac8 <HAL_ADCEx_MultiModeConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800273e:	f000 fe19 	bl	8003374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002742:	4b15      	ldr	r3, [pc, #84]	@ (8002798 <MX_ADC1_Init+0x108>)
 8002744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002746:	2306      	movs	r3, #6
 8002748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800274a:	2307      	movs	r3, #7
 800274c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800274e:	237f      	movs	r3, #127	@ 0x7f
 8002750:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002752:	2304      	movs	r3, #4
 8002754:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	4619      	mov	r1, r3
 800275e:	480d      	ldr	r0, [pc, #52]	@ (8002794 <MX_ADC1_Init+0x104>)
 8002760:	f002 fd4c 	bl	80051fc <HAL_ADC_ConfigChannel>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800276a:	f000 fe03 	bl	8003374 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800276e:	4b0b      	ldr	r3, [pc, #44]	@ (800279c <MX_ADC1_Init+0x10c>)
 8002770:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002772:	230c      	movs	r3, #12
 8002774:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4806      	ldr	r0, [pc, #24]	@ (8002794 <MX_ADC1_Init+0x104>)
 800277c:	f002 fd3e 	bl	80051fc <HAL_ADC_ConfigChannel>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002786:	f000 fdf5 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800278a:	bf00      	nop
 800278c:	3730      	adds	r7, #48	@ 0x30
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000090 	.word	0x20000090
 8002798:	19200040 	.word	0x19200040
 800279c:	1d500080 	.word	0x1d500080

080027a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b09e      	sub	sp, #120	@ 0x78
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027b8:	f107 0310 	add.w	r3, r7, #16
 80027bc:	2254      	movs	r2, #84	@ 0x54
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f008 ff53 	bl	800b66c <memset>
  if(adcHandle->Instance==ADC1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027ce:	d15e      	bne.n	800288e <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80027d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80027d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80027d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80027da:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027dc:	f107 0310 	add.w	r3, r7, #16
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fda3 	bl	800732c <HAL_RCCEx_PeriphCLKConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80027ec:	f000 fdc2 	bl	8003374 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 80027f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f4:	4a28      	ldr	r2, [pc, #160]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 80027f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027fc:	4b26      	ldr	r3, [pc, #152]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 80027fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002808:	4b23      	ldr	r3, [pc, #140]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280c:	4a22      	ldr	r2, [pc, #136]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 800280e:	f043 0304 	orr.w	r3, r3, #4
 8002812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002814:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_ADC_MspInit+0xf8>)
 8002816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002820:	2303      	movs	r3, #3
 8002822:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002824:	2303      	movs	r3, #3
 8002826:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002830:	4619      	mov	r1, r3
 8002832:	481a      	ldr	r0, [pc, #104]	@ (800289c <HAL_ADC_MspInit+0xfc>)
 8002834:	f003 fdda 	bl	80063ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 800283a:	4a1a      	ldr	r2, [pc, #104]	@ (80028a4 <HAL_ADC_MspInit+0x104>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002840:	2205      	movs	r2, #5
 8002842:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b13      	ldr	r3, [pc, #76]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002858:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800285c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800285e:	4b10      	ldr	r3, [pc, #64]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002860:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002864:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002868:	2220      	movs	r2, #32
 800286a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800286c:	4b0c      	ldr	r3, [pc, #48]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 800286e:	2200      	movs	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002872:	480b      	ldr	r0, [pc, #44]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002874:	f003 fb40 	bl	8005ef8 <HAL_DMA_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800287e:	f000 fd79 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a06      	ldr	r2, [pc, #24]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 8002886:	655a      	str	r2, [r3, #84]	@ 0x54
 8002888:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <HAL_ADC_MspInit+0x100>)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800288e:	bf00      	nop
 8002890:	3778      	adds	r7, #120	@ 0x78
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	48000800 	.word	0x48000800
 80028a0:	200000fc 	.word	0x200000fc
 80028a4:	40020008 	.word	0x40020008

080028a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80028ae:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <MX_DMA_Init+0x90>)
 80028b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b2:	4a21      	ldr	r2, [pc, #132]	@ (8002938 <MX_DMA_Init+0x90>)
 80028b4:	f043 0304 	orr.w	r3, r3, #4
 80028b8:	6493      	str	r3, [r2, #72]	@ 0x48
 80028ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <MX_DMA_Init+0x90>)
 80028bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	607b      	str	r3, [r7, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <MX_DMA_Init+0x90>)
 80028c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002938 <MX_DMA_Init+0x90>)
 80028cc:	f043 0301 	orr.w	r3, r3, #1
 80028d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80028d2:	4b19      	ldr	r3, [pc, #100]	@ (8002938 <MX_DMA_Init+0x90>)
 80028d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80028de:	2200      	movs	r2, #0
 80028e0:	2100      	movs	r1, #0
 80028e2:	200b      	movs	r0, #11
 80028e4:	f003 fad3 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80028e8:	200b      	movs	r0, #11
 80028ea:	f003 faea 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80028ee:	2200      	movs	r2, #0
 80028f0:	2100      	movs	r1, #0
 80028f2:	200c      	movs	r0, #12
 80028f4:	f003 facb 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80028f8:	200c      	movs	r0, #12
 80028fa:	f003 fae2 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	2100      	movs	r1, #0
 8002902:	200d      	movs	r0, #13
 8002904:	f003 fac3 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002908:	200d      	movs	r0, #13
 800290a:	f003 fada 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	200e      	movs	r0, #14
 8002914:	f003 fabb 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002918:	200e      	movs	r0, #14
 800291a:	f003 fad2 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	200f      	movs	r0, #15
 8002924:	f003 fab3 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002928:	200f      	movs	r0, #15
 800292a:	f003 faca 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000

0800293c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002952:	4b75      	ldr	r3, [pc, #468]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002956:	4a74      	ldr	r2, [pc, #464]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800295e:	4b72      	ldr	r3, [pc, #456]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800296a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 800296c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002976:	4b6c      	ldr	r3, [pc, #432]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002982:	4b69      	ldr	r3, [pc, #420]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002986:	4a68      	ldr	r2, [pc, #416]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800298e:	4b66      	ldr	r3, [pc, #408]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 8002990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800299a:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800299e:	4a62      	ldr	r2, [pc, #392]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029a6:	4b60      	ldr	r3, [pc, #384]	@ (8002b28 <MX_GPIO_Init+0x1ec>)
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	607b      	str	r3, [r7, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80029b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029bc:	f003 fe98 	bl	80066f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029c6:	4859      	ldr	r0, [pc, #356]	@ (8002b2c <MX_GPIO_Init+0x1f0>)
 80029c8:	f003 fe92 	bl	80066f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80029d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80029d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4852      	ldr	r0, [pc, #328]	@ (8002b2c <MX_GPIO_Init+0x1f0>)
 80029e4:	f003 fd02 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80029e8:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80029ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ee:	2301      	movs	r3, #1
 80029f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a04:	f003 fcf2 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8002a08:	f241 0301 	movw	r3, #4097	@ 0x1001
 8002a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4844      	ldr	r0, [pc, #272]	@ (8002b30 <MX_GPIO_Init+0x1f4>)
 8002a20:	f003 fce4 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8002a24:	2306      	movs	r3, #6
 8002a26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	483e      	ldr	r0, [pc, #248]	@ (8002b30 <MX_GPIO_Init+0x1f4>)
 8002a38:	f003 fcd8 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a42:	2301      	movs	r3, #1
 8002a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	4619      	mov	r1, r3
 8002a54:	4835      	ldr	r0, [pc, #212]	@ (8002b2c <MX_GPIO_Init+0x1f0>)
 8002a56:	f003 fcc9 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8002a5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	482e      	ldr	r0, [pc, #184]	@ (8002b2c <MX_GPIO_Init+0x1f0>)
 8002a72:	f003 fcbb 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8002a76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a80:	2302      	movs	r3, #2
 8002a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4828      	ldr	r0, [pc, #160]	@ (8002b2c <MX_GPIO_Init+0x1f0>)
 8002a8c:	f003 fcae 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8002a90:	2310      	movs	r3, #16
 8002a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002a94:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8002a9e:	f107 0314 	add.w	r3, r7, #20
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4822      	ldr	r0, [pc, #136]	@ (8002b30 <MX_GPIO_Init+0x1f4>)
 8002aa6:	f003 fca1 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8002aaa:	2340      	movs	r3, #64	@ 0x40
 8002aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002aae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8002ab8:	f107 0314 	add.w	r3, r7, #20
 8002abc:	4619      	mov	r1, r3
 8002abe:	481c      	ldr	r0, [pc, #112]	@ (8002b30 <MX_GPIO_Init+0x1f4>)
 8002ac0:	f003 fc94 	bl	80063ec <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ac8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4815      	ldr	r0, [pc, #84]	@ (8002b30 <MX_GPIO_Init+0x1f4>)
 8002ada:	f003 fc87 	bl	80063ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2006      	movs	r0, #6
 8002ae4:	f003 f9d3 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ae8:	2006      	movs	r0, #6
 8002aea:	f003 f9ea 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	200a      	movs	r0, #10
 8002af4:	f003 f9cb 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002af8:	200a      	movs	r0, #10
 8002afa:	f003 f9e2 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2017      	movs	r0, #23
 8002b04:	f003 f9c3 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b08:	2017      	movs	r0, #23
 8002b0a:	f003 f9da 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2028      	movs	r0, #40	@ 0x28
 8002b14:	f003 f9bb 	bl	8005e8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b18:	2028      	movs	r0, #40	@ 0x28
 8002b1a:	f003 f9d2 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	@ 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000400 	.word	0x48000400

08002b34 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b096      	sub	sp, #88	@ 0x58
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b40:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2101      	movs	r1, #1
 8002b50:	f008 f8d1 	bl	800acf6 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f008 fd41 	bl	800b5ea <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8002b74:	4619      	mov	r1, r3
 8002b76:	4610      	mov	r0, r2
 8002b78:	f008 fd37 	bl	800b5ea <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f008 fd2d 	bl	800b5ea <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f008 fcb0 	bl	800b508 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f008 fc2a 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f008 f854 	bl	800ac80 <arm_mat_add_f32>
//	  arm_mat_add_f32(&filter->X_k_matrix, &filter->G_matrix, &filter->X_k_matrix);					// Xk = Ax + Bu + G

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002bea:	461a      	mov	r2, r3
 8002bec:	f008 fc12 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002c02:	461a      	mov	r2, r3
 8002c04:	f008 fc06 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	f008 fbfa 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8002c32:	4619      	mov	r1, r3
 8002c34:	eeb0 0a67 	vmov.f32	s0, s15
 8002c38:	4610      	mov	r0, r2
 8002c3a:	f008 fc65 	bl	800b508 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8002c50:	461a      	mov	r2, r3
 8002c52:	f008 f815 	bl	800ac80 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f008 fbd3 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8002c80:	461a      	mov	r2, r3
 8002c82:	f008 fbc7 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f007 fff1 	bl	800ac80 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8002caa:	4619      	mov	r1, r3
 8002cac:	4610      	mov	r0, r2
 8002cae:	f008 f83a 	bl	800ad26 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f008 fba5 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f008 fb99 	bl	800b414 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f008 fb8d 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f008 fc31 	bl	800b574 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8002d24:	461a      	mov	r2, r3
 8002d26:	f008 fb75 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	f007 ff9f 	bl	800ac80 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8002d54:	461a      	mov	r2, r3
 8002d56:	f008 fb5d 	bl	800b414 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8002d62:	2204      	movs	r2, #4
 8002d64:	2104      	movs	r1, #4
 8002d66:	f007 ffc6 	bl	800acf6 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8002d76:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f008 fb4a 	bl	800b414 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002d86:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002d8a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f008 fbf0 	bl	800b574 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8002da0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002da4:	4618      	mov	r0, r3
 8002da6:	f008 fb35 	bl	800b414 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8002dba:	ee07 3a90 	vmov	s15, r3
}
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	3758      	adds	r7, #88	@ 0x58
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b0a4      	sub	sp, #144	@ 0x90
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6178      	str	r0, [r7, #20]
 8002dd0:	6139      	str	r1, [r7, #16]
 8002dd2:	60fa      	str	r2, [r7, #12]
 8002dd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dd8:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8002dec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002df0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e16:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	67bb      	str	r3, [r7, #120]	@ 0x78
					  0.0f,
					  1.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002e22:	4bc6      	ldr	r3, [pc, #792]	@ (800313c <Kalman_Start+0x374>)
 8002e24:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002e28:	461d      	mov	r5, r3
 8002e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002e3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002e3e:	f107 031c 	add.w	r3, r7, #28
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002e5c:	e028      	b.n	8002eb0 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8002e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4413      	add	r3, r2
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	6979      	ldr	r1, [r7, #20]
 8002e6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e70:	3314      	adds	r3, #20
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3390      	adds	r3, #144	@ 0x90
 8002e80:	443b      	add	r3, r7
 8002e82:	3b64      	subs	r3, #100	@ 0x64
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e8c:	3398      	adds	r3, #152	@ 0x98
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002eb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb4:	2b0f      	cmp	r3, #15
 8002eb6:	ddd2      	ble.n	8002e5e <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002ebe:	e03a      	b.n	8002f36 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8002ec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	3390      	adds	r3, #144	@ 0x90
 8002ec8:	443b      	add	r3, r7
 8002eca:	3b74      	subs	r3, #116	@ 0x74
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	6979      	ldr	r1, [r7, #20]
 8002ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eec:	3324      	adds	r3, #36	@ 0x24
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002ef4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	3390      	adds	r3, #144	@ 0x90
 8002efc:	443b      	add	r3, r7
 8002efe:	3b14      	subs	r3, #20
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	6979      	ldr	r1, [r7, #20]
 8002f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f08:	3328      	adds	r3, #40	@ 0x28
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002f10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3390      	adds	r3, #144	@ 0x90
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b24      	subs	r3, #36	@ 0x24
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	6979      	ldr	r1, [r7, #20]
 8002f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f24:	332c      	adds	r3, #44	@ 0x2c
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f30:	3301      	adds	r3, #1
 8002f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	ddc0      	ble.n	8002ec0 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2201      	movs	r2, #1
 8002f48:	2104      	movs	r1, #4
 8002f4a:	f007 fed4 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3310      	adds	r3, #16
 8002f58:	2204      	movs	r2, #4
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	f007 fecb 	bl	800acf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3350      	adds	r3, #80	@ 0x50
 8002f6a:	2204      	movs	r2, #4
 8002f6c:	2104      	movs	r1, #4
 8002f6e:	f007 fec2 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	3390      	adds	r3, #144	@ 0x90
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2104      	movs	r1, #4
 8002f80:	f007 feb9 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	33a0      	adds	r3, #160	@ 0xa0
 8002f8e:	2204      	movs	r2, #4
 8002f90:	2101      	movs	r1, #1
 8002f92:	f007 feb0 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	33b0      	adds	r3, #176	@ 0xb0
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	f007 fea7 	bl	800acf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	33c8      	adds	r3, #200	@ 0xc8
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	f007 fe9e 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	2104      	movs	r1, #4
 8002fca:	f007 fe94 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002fda:	2204      	movs	r2, #4
 8002fdc:	2101      	movs	r1, #1
 8002fde:	f007 fe8a 	bl	800acf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002fee:	2204      	movs	r2, #4
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	f007 fe80 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003002:	2204      	movs	r2, #4
 8003004:	2104      	movs	r1, #4
 8003006:	f007 fe76 	bl	800acf6 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003016:	2201      	movs	r2, #1
 8003018:	2104      	movs	r1, #4
 800301a:	f007 fe6c 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800302a:	2201      	movs	r2, #1
 800302c:	2104      	movs	r1, #4
 800302e:	f007 fe62 	bl	800acf6 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800303e:	2204      	movs	r2, #4
 8003040:	2101      	movs	r1, #1
 8003042:	f007 fe58 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003052:	2201      	movs	r2, #1
 8003054:	2101      	movs	r1, #1
 8003056:	f007 fe4e 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003066:	2201      	movs	r2, #1
 8003068:	2101      	movs	r1, #1
 800306a:	f007 fe44 	bl	800acf6 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800307a:	2201      	movs	r2, #1
 800307c:	2104      	movs	r1, #4
 800307e:	f007 fe3a 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800308e:	2201      	movs	r2, #1
 8003090:	2104      	movs	r1, #4
 8003092:	f007 fe30 	bl	800acf6 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80030a2:	2201      	movs	r2, #1
 80030a4:	2101      	movs	r1, #1
 80030a6:	f007 fe26 	bl	800acf6 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80030b6:	2201      	movs	r2, #1
 80030b8:	2101      	movs	r1, #1
 80030ba:	f007 fe1c 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80030ca:	2201      	movs	r2, #1
 80030cc:	2101      	movs	r1, #1
 80030ce:	f007 fe12 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80030de:	2201      	movs	r2, #1
 80030e0:	2104      	movs	r1, #4
 80030e2:	f007 fe08 	bl	800acf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80030f2:	2201      	movs	r2, #1
 80030f4:	2101      	movs	r1, #1
 80030f6:	f007 fdfe 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003106:	2204      	movs	r2, #4
 8003108:	2104      	movs	r1, #4
 800310a:	f007 fdf4 	bl	800acf6 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	33c4      	adds	r3, #196	@ 0xc4
 8003118:	2201      	movs	r2, #1
 800311a:	2101      	movs	r1, #1
 800311c:	f007 fdeb 	bl	800acf6 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800312c:	2201      	movs	r2, #1
 800312e:	2101      	movs	r1, #1
 8003130:	f007 fde1 	bl	800acf6 <arm_mat_init_f32>
}
 8003134:	bf00      	nop
 8003136:	3790      	adds	r7, #144	@ 0x90
 8003138:	46bd      	mov	sp, r7
 800313a:	bdb0      	pop	{r4, r5, r7, pc}
 800313c:	0800bfb8 	.word	0x0800bfb8

08003140 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003144:	f001 fc57 	bl	80049f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003148:	f000 f81c 	bl	8003184 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800314c:	f7ff fbf6 	bl	800293c <MX_GPIO_Init>
	MX_DMA_Init();
 8003150:	f7ff fbaa 	bl	80028a8 <MX_DMA_Init>
	MX_ADC1_Init();
 8003154:	f7ff fa9c 	bl	8002690 <MX_ADC1_Init>
	MX_TIM2_Init();
 8003158:	f000 fe62 	bl	8003e20 <MX_TIM2_Init>
	MX_TIM3_Init();
 800315c:	f000 feae 	bl	8003ebc <MX_TIM3_Init>
	MX_TIM4_Init();
 8003160:	f000 ff02 	bl	8003f68 <MX_TIM4_Init>
	MX_TIM5_Init();
 8003164:	f000 ff56 	bl	8004014 <MX_TIM5_Init>
	MX_TIM8_Init();
 8003168:	f000 ffaa 	bl	80040c0 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800316c:	f001 fa6c 	bl	8004648 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8003170:	f001 f864 	bl	800423c <MX_TIM16_Init>
	MX_TIM1_Init();
 8003174:	f000 fdc0 	bl	8003cf8 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8003178:	f001 fa1c 	bl	80045b4 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	motor_begin();
 800317c:	f000 f900 	bl	8003380 <motor_begin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8003180:	bf00      	nop
 8003182:	e7fd      	b.n	8003180 <main+0x40>

08003184 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b094      	sub	sp, #80	@ 0x50
 8003188:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800318a:	f107 0318 	add.w	r3, r7, #24
 800318e:	2238      	movs	r2, #56	@ 0x38
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f008 fa6a 	bl	800b66c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
 80031a4:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f003 fade 	bl	8006768 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031ac:	2302      	movs	r3, #2
 80031ae:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031b6:	2340      	movs	r3, #64	@ 0x40
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ba:	2302      	movs	r3, #2
 80031bc:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031be:	2302      	movs	r3, #2
 80031c0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80031c2:	2304      	movs	r3, #4
 80031c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80031c6:	2355      	movs	r3, #85	@ 0x55
 80031c8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ca:	2302      	movs	r3, #2
 80031cc:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80031ce:	2302      	movs	r3, #2
 80031d0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80031d2:	2302      	movs	r3, #2
 80031d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 fb78 	bl	80068d0 <HAL_RCC_OscConfig>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <SystemClock_Config+0x66>
		Error_Handler();
 80031e6:	f000 f8c5 	bl	8003374 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80031ea:	230f      	movs	r3, #15
 80031ec:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031ee:	2303      	movs	r3, #3
 80031f0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031f6:	2300      	movs	r3, #0
 80031f8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	2104      	movs	r1, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f003 fe76 	bl	8006ef4 <HAL_RCC_ClockConfig>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <SystemClock_Config+0x8e>
		Error_Handler();
 800320e:	f000 f8b1 	bl	8003374 <Error_Handler>
	}
}
 8003212:	bf00      	nop
 8003214:	3750      	adds	r7, #80	@ 0x50
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a40      	ldr	r2, [pc, #256]	@ (8003328 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d178      	bne.n	800331e <HAL_TIM_PeriodElapsedCallback+0x102>
		QEI_get_diff_count(&encoder);
 800322c:	483f      	ldr	r0, [pc, #252]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800322e:	f7ff f81f 	bl	8002270 <QEI_get_diff_count>
		QEI_compute_data(&encoder);
 8003232:	483e      	ldr	r0, [pc, #248]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003234:	f7ff f908 	bl	8002448 <QEI_compute_data>

		square_pwm = SIGNAL_generate(&square_sg_pwm, 1e-3);
 8003238:	ed9f 0a3d 	vldr	s0, [pc, #244]	@ 8003330 <HAL_TIM_PeriodElapsedCallback+0x114>
 800323c:	483d      	ldr	r0, [pc, #244]	@ (8003334 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800323e:	f000 fae5 	bl	800380c <SIGNAL_generate>
 8003242:	eef0 7a40 	vmov.f32	s15, s0
 8003246:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8003248:	edc3 7a00 	vstr	s15, [r3]
		square = SIGNAL_generate(&square_sg, 1e-3);
 800324c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8003330 <HAL_TIM_PeriodElapsedCallback+0x114>
 8003250:	483a      	ldr	r0, [pc, #232]	@ (800333c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8003252:	f000 fadb 	bl	800380c <SIGNAL_generate>
 8003256:	eef0 7a40 	vmov.f32	s15, s0
 800325a:	4b39      	ldr	r3, [pc, #228]	@ (8003340 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800325c:	edc3 7a00 	vstr	s15, [r3]

		vin = mapf(command_pwm, -65535.0, 65535.0, -12.0, 12.0);
 8003260:	4b38      	ldr	r3, [pc, #224]	@ (8003344 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 800326a:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800326e:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8003348 <HAL_TIM_PeriodElapsedCallback+0x12c>
 8003272:	eddf 0a36 	vldr	s1, [pc, #216]	@ 800334c <HAL_TIM_PeriodElapsedCallback+0x130>
 8003276:	eeb0 0a67 	vmov.f32	s0, s15
 800327a:	f7fd ff93 	bl	80011a4 <mapf>
 800327e:	eef0 7a40 	vmov.f32	s15, s0
 8003282:	4b33      	ldr	r3, [pc, #204]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8003284:	edc3 7a00 	vstr	s15, [r3]

		estimated_velocity = MotorKalman_Estimate(&motor_kalman, vin,
 8003288:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	4b27      	ldr	r3, [pc, #156]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8003290:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003294:	eef0 0a47 	vmov.f32	s1, s14
 8003298:	eeb0 0a67 	vmov.f32	s0, s15
 800329c:	482d      	ldr	r0, [pc, #180]	@ (8003354 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800329e:	f7fe fb76 	bl	800198e <MotorKalman_Estimate>
 80032a2:	eef0 7a40 	vmov.f32	s15, s0
 80032a6:	4b2c      	ldr	r3, [pc, #176]	@ (8003358 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80032a8:	edc3 7a00 	vstr	s15, [r3]
				encoder.rads);
		stead = SteadyStateKalmanFilter(&paweekorn_kalman, vin, encoder.rads);
 80032ac:	4b28      	ldr	r3, [pc, #160]	@ (8003350 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80032ae:	edd3 7a00 	vldr	s15, [r3]
 80032b2:	4b1e      	ldr	r3, [pc, #120]	@ (800332c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80032b4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80032b8:	eef0 0a47 	vmov.f32	s1, s14
 80032bc:	eeb0 0a67 	vmov.f32	s0, s15
 80032c0:	4826      	ldr	r0, [pc, #152]	@ (800335c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80032c2:	f7ff fc37 	bl	8002b34 <SteadyStateKalmanFilter>
 80032c6:	eef0 7a40 	vmov.f32	s15, s0
 80032ca:	4b25      	ldr	r3, [pc, #148]	@ (8003360 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80032cc:	edc3 7a00 	vstr	s15, [r3]

		command_pwm = PWM_Satuation(
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80032d2:	ed93 7a00 	vldr	s14, [r3]
 80032d6:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80032d8:	edd3 7a00 	vldr	s15, [r3]
 80032dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	481f      	ldr	r0, [pc, #124]	@ (8003364 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80032e6:	f7fd fdcd 	bl	8000e84 <PID_CONTROLLER_Compute>
 80032ea:	eef0 7a40 	vmov.f32	s15, s0
 80032ee:	491e      	ldr	r1, [pc, #120]	@ (8003368 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80032f0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80032f4:	eeb0 0a67 	vmov.f32	s0, s15
 80032f8:	f7fd fd62 	bl	8000dc0 <PWM_Satuation>
 80032fc:	ee07 0a90 	vmov	s15, r0
 8003300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003304:	4b0f      	ldr	r3, [pc, #60]	@ (8003344 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8003306:	edc3 7a00 	vstr	s15, [r3]
				PID_CONTROLLER_Compute(&velocity_pid,
						square - estimated_velocity), 65535.0, -65535.0);

		MDXX_set_range(&motor, 2000, command_pwm);
 800330a:	4b0e      	ldr	r3, [pc, #56]	@ (8003344 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800330c:	edd3 7a00 	vldr	s15, [r3]
 8003310:	eef0 0a67 	vmov.f32	s1, s15
 8003314:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800336c <HAL_TIM_PeriodElapsedCallback+0x150>
 8003318:	4815      	ldr	r0, [pc, #84]	@ (8003370 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800331a:	f7fd fe69 	bl	8000ff0 <MDXX_set_range>

	}
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000bcc 	.word	0x20000bcc
 800332c:	20000a7c 	.word	0x20000a7c
 8003330:	3a83126f 	.word	0x3a83126f
 8003334:	20000964 	.word	0x20000964
 8003338:	20000164 	.word	0x20000164
 800333c:	200009ec 	.word	0x200009ec
 8003340:	20000160 	.word	0x20000160
 8003344:	2000016c 	.word	0x2000016c
 8003348:	477fff00 	.word	0x477fff00
 800334c:	c77fff00 	.word	0xc77fff00
 8003350:	2000015c 	.word	0x2000015c
 8003354:	20000174 	.word	0x20000174
 8003358:	20000168 	.word	0x20000168
 800335c:	20000550 	.word	0x20000550
 8003360:	20000170 	.word	0x20000170
 8003364:	20000ad8 	.word	0x20000ad8
 8003368:	ffff0001 	.word	0xffff0001
 800336c:	44fa0000 	.word	0x44fa0000
 8003370:	20000a30 	.word	0x20000a30

08003374 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003378:	b672      	cpsid	i
}
 800337a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800337c:	bf00      	nop
 800337e:	e7fd      	b.n	800337c <Error_Handler+0x8>

08003380 <motor_begin>:
float L = 0.157854;
float R = 1.15;
float J = 0.001384174297611;
float B = 0.065057814635037;

void motor_begin() {
 8003380:	b580      	push	{r7, lr}
 8003382:	ed2d 8b04 	vpush	{d8-d9}
 8003386:	b082      	sub	sp, #8
 8003388:	af02      	add	r7, sp, #8

	SIGNAL_init(&sine_sg_pwm, SIGNAL_SINE);
 800338a:	2100      	movs	r1, #0
 800338c:	4872      	ldr	r0, [pc, #456]	@ (8003558 <motor_begin+0x1d8>)
 800338e:	f000 f983 	bl	8003698 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_pwm, 65535.0,
 8003392:	eddf 2a72 	vldr	s5, [pc, #456]	@ 800355c <motor_begin+0x1dc>
 8003396:	ed9f 2a72 	vldr	s4, [pc, #456]	@ 8003560 <motor_begin+0x1e0>
 800339a:	eddf 1a72 	vldr	s3, [pc, #456]	@ 8003564 <motor_begin+0x1e4>
 800339e:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8003564 <motor_begin+0x1e4>
 80033a2:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8003568 <motor_begin+0x1e8>
 80033a6:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 800355c <motor_begin+0x1dc>
 80033aa:	486b      	ldr	r0, [pc, #428]	@ (8003558 <motor_begin+0x1d8>)
 80033ac:	f000 f9d2 	bl	8003754 <SIGNAL_config_sine>
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -65535.0, 65535.0);

	SIGNAL_init(&square_sg_pwm, SIGNAL_SQUARE);
 80033b0:	2102      	movs	r1, #2
 80033b2:	486e      	ldr	r0, [pc, #440]	@ (800356c <motor_begin+0x1ec>)
 80033b4:	f000 f970 	bl	8003698 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_pwm, 65535.0,
 80033b8:	ed9f 3a68 	vldr	s6, [pc, #416]	@ 800355c <motor_begin+0x1dc>
 80033bc:	eddf 2a68 	vldr	s5, [pc, #416]	@ 8003560 <motor_begin+0x1e0>
 80033c0:	ed9f 2a68 	vldr	s4, [pc, #416]	@ 8003564 <motor_begin+0x1e4>
 80033c4:	eddf 1a67 	vldr	s3, [pc, #412]	@ 8003564 <motor_begin+0x1e4>
 80033c8:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80033cc:	eddf 0a66 	vldr	s1, [pc, #408]	@ 8003568 <motor_begin+0x1e8>
 80033d0:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 800355c <motor_begin+0x1dc>
 80033d4:	4865      	ldr	r0, [pc, #404]	@ (800356c <motor_begin+0x1ec>)
 80033d6:	f000 f9e8 	bl	80037aa <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET, -65535.0, 65535.0);

	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 80033da:	2100      	movs	r1, #0
 80033dc:	4864      	ldr	r0, [pc, #400]	@ (8003570 <motor_begin+0x1f0>)
 80033de:	f000 f95b 	bl	8003698 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, 40.0,
 80033e2:	eddf 2a64 	vldr	s5, [pc, #400]	@ 8003574 <motor_begin+0x1f4>
 80033e6:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8003578 <motor_begin+0x1f8>
 80033ea:	eddf 1a5e 	vldr	s3, [pc, #376]	@ 8003564 <motor_begin+0x1e4>
 80033ee:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8003564 <motor_begin+0x1e4>
 80033f2:	eddf 0a5d 	vldr	s1, [pc, #372]	@ 8003568 <motor_begin+0x1e8>
 80033f6:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8003574 <motor_begin+0x1f4>
 80033fa:	485d      	ldr	r0, [pc, #372]	@ (8003570 <motor_begin+0x1f0>)
 80033fc:	f000 f9aa 	bl	8003754 <SIGNAL_config_sine>
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -40.0, 40.0);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8003400:	2102      	movs	r1, #2
 8003402:	485e      	ldr	r0, [pc, #376]	@ (800357c <motor_begin+0x1fc>)
 8003404:	f000 f948 	bl	8003698 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, 40.0,
 8003408:	ed9f 3a5a 	vldr	s6, [pc, #360]	@ 8003574 <motor_begin+0x1f4>
 800340c:	eddf 2a5a 	vldr	s5, [pc, #360]	@ 8003578 <motor_begin+0x1f8>
 8003410:	ed9f 2a54 	vldr	s4, [pc, #336]	@ 8003564 <motor_begin+0x1e4>
 8003414:	eddf 1a53 	vldr	s3, [pc, #332]	@ 8003564 <motor_begin+0x1e4>
 8003418:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800341c:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8003568 <motor_begin+0x1e8>
 8003420:	ed9f 0a54 	vldr	s0, [pc, #336]	@ 8003574 <motor_begin+0x1f4>
 8003424:	4855      	ldr	r0, [pc, #340]	@ (800357c <motor_begin+0x1fc>)
 8003426:	f000 f9c0 	bl	80037aa <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET, -40.0, 40.0);

	QEI_init(&encoder, ENC_TIM, ENC_PPR, ENC_FREQ, MOTOR_RATIO, 0.0);
 800342a:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8003564 <motor_begin+0x1e4>
 800342e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003432:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003436:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800343a:	4951      	ldr	r1, [pc, #324]	@ (8003580 <motor_begin+0x200>)
 800343c:	4851      	ldr	r0, [pc, #324]	@ (8003584 <motor_begin+0x204>)
 800343e:	f7fe fea5 	bl	800218c <QEI_init>

	PID_CONTROLLER_Init(&velocity_pid, 7000, 0, 0, 65535.0);
 8003442:	eddf 1a46 	vldr	s3, [pc, #280]	@ 800355c <motor_begin+0x1dc>
 8003446:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8003564 <motor_begin+0x1e4>
 800344a:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8003564 <motor_begin+0x1e4>
 800344e:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8003588 <motor_begin+0x208>
 8003452:	484e      	ldr	r0, [pc, #312]	@ (800358c <motor_begin+0x20c>)
 8003454:	f7fd fce3 	bl	8000e1e <PID_CONTROLLER_Init>

	MDXX_GPIO_init(&motor, MOTOR_TIM, MOTOR_TIM_CH, MOTOR_GPIOx,
 8003458:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003462:	2204      	movs	r2, #4
 8003464:	494a      	ldr	r1, [pc, #296]	@ (8003590 <motor_begin+0x210>)
 8003466:	484b      	ldr	r0, [pc, #300]	@ (8003594 <motor_begin+0x214>)
 8003468:	f7fd fd9e 	bl	8000fa8 <MDXX_GPIO_init>
	MOTOR_GPIO_Pin);

	MDXX_set_range(&motor, 2000, 0);
 800346c:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8003564 <motor_begin+0x1e4>
 8003470:	ed9f 0a49 	vldr	s0, [pc, #292]	@ 8003598 <motor_begin+0x218>
 8003474:	4847      	ldr	r0, [pc, #284]	@ (8003594 <motor_begin+0x214>)
 8003476:	f7fd fdbb 	bl	8000ff0 <MDXX_set_range>

	GenerateMotorMatrices(R, L, J, B* 0.6, Ke, Kt, 1e-3, A_d, B_d);
 800347a:	4b48      	ldr	r3, [pc, #288]	@ (800359c <motor_begin+0x21c>)
 800347c:	ed93 8a00 	vldr	s16, [r3]
 8003480:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <motor_begin+0x220>)
 8003482:	edd3 8a00 	vldr	s17, [r3]
 8003486:	4b47      	ldr	r3, [pc, #284]	@ (80035a4 <motor_begin+0x224>)
 8003488:	ed93 9a00 	vldr	s18, [r3]
 800348c:	4b46      	ldr	r3, [pc, #280]	@ (80035a8 <motor_begin+0x228>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f825 	bl	80004e0 <__aeabi_f2d>
 8003496:	a32e      	add	r3, pc, #184	@ (adr r3, 8003550 <motor_begin+0x1d0>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fd f878 	bl	8000590 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	f7fd faa4 	bl	80009f4 <__aeabi_d2f>
 80034ac:	4602      	mov	r2, r0
 80034ae:	4b3f      	ldr	r3, [pc, #252]	@ (80035ac <motor_begin+0x22c>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	4b3e      	ldr	r3, [pc, #248]	@ (80035b0 <motor_begin+0x230>)
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	493e      	ldr	r1, [pc, #248]	@ (80035b4 <motor_begin+0x234>)
 80034bc:	483e      	ldr	r0, [pc, #248]	@ (80035b8 <motor_begin+0x238>)
 80034be:	ed9f 3a3f 	vldr	s6, [pc, #252]	@ 80035bc <motor_begin+0x23c>
 80034c2:	eef0 2a47 	vmov.f32	s5, s14
 80034c6:	eeb0 2a67 	vmov.f32	s4, s15
 80034ca:	ee01 2a90 	vmov	s3, r2
 80034ce:	eeb0 1a49 	vmov.f32	s2, s18
 80034d2:	eef0 0a68 	vmov.f32	s1, s17
 80034d6:	eeb0 0a48 	vmov.f32	s0, s16
 80034da:	f7fe fcc5 	bl	8001e68 <GenerateMotorMatrices>
	Kalman_Start(&paweekorn_kalman, A_d, B_d, 1.0, 0.1);
 80034de:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8003568 <motor_begin+0x1e8>
 80034e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80034e6:	4a33      	ldr	r2, [pc, #204]	@ (80035b4 <motor_begin+0x234>)
 80034e8:	4933      	ldr	r1, [pc, #204]	@ (80035b8 <motor_begin+0x238>)
 80034ea:	4835      	ldr	r0, [pc, #212]	@ (80035c0 <motor_begin+0x240>)
 80034ec:	f7ff fc6c 	bl	8002dc8 <Kalman_Start>

	MotorKalman_Init(&motor_kalman, 1e-3, J, B, Kt, Ke, R, L, 1.0, 0.1);
 80034f0:	4b2c      	ldr	r3, [pc, #176]	@ (80035a4 <motor_begin+0x224>)
 80034f2:	edd3 7a00 	vldr	s15, [r3]
 80034f6:	4b2c      	ldr	r3, [pc, #176]	@ (80035a8 <motor_begin+0x228>)
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	4b2c      	ldr	r3, [pc, #176]	@ (80035b0 <motor_begin+0x230>)
 80034fe:	edd3 6a00 	vldr	s13, [r3]
 8003502:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <motor_begin+0x22c>)
 8003504:	ed93 6a00 	vldr	s12, [r3]
 8003508:	4b24      	ldr	r3, [pc, #144]	@ (800359c <motor_begin+0x21c>)
 800350a:	edd3 5a00 	vldr	s11, [r3]
 800350e:	4b24      	ldr	r3, [pc, #144]	@ (80035a0 <motor_begin+0x220>)
 8003510:	ed93 5a00 	vldr	s10, [r3]
 8003514:	ed9f 4a14 	vldr	s8, [pc, #80]	@ 8003568 <motor_begin+0x1e8>
 8003518:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800351c:	eeb0 3a45 	vmov.f32	s6, s10
 8003520:	eef0 2a65 	vmov.f32	s5, s11
 8003524:	eeb0 2a46 	vmov.f32	s4, s12
 8003528:	eef0 1a66 	vmov.f32	s3, s13
 800352c:	eeb0 1a47 	vmov.f32	s2, s14
 8003530:	eef0 0a67 	vmov.f32	s1, s15
 8003534:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80035bc <motor_begin+0x23c>
 8003538:	4822      	ldr	r0, [pc, #136]	@ (80035c4 <motor_begin+0x244>)
 800353a:	f7fd fe6b 	bl	8001214 <MotorKalman_Init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800353e:	4822      	ldr	r0, [pc, #136]	@ (80035c8 <motor_begin+0x248>)
 8003540:	f004 fa16 	bl	8007970 <HAL_TIM_Base_Start_IT>
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	ecbd 8b04 	vpop	{d8-d9}
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	33333333 	.word	0x33333333
 8003554:	3fe33333 	.word	0x3fe33333
 8003558:	20000920 	.word	0x20000920
 800355c:	477fff00 	.word	0x477fff00
 8003560:	c77fff00 	.word	0xc77fff00
 8003564:	00000000 	.word	0x00000000
 8003568:	3dcccccd 	.word	0x3dcccccd
 800356c:	20000964 	.word	0x20000964
 8003570:	200009a8 	.word	0x200009a8
 8003574:	42200000 	.word	0x42200000
 8003578:	c2200000 	.word	0xc2200000
 800357c:	200009ec 	.word	0x200009ec
 8003580:	20000e30 	.word	0x20000e30
 8003584:	20000a7c 	.word	0x20000a7c
 8003588:	45dac000 	.word	0x45dac000
 800358c:	20000ad8 	.word	0x20000ad8
 8003590:	20000efc 	.word	0x20000efc
 8003594:	20000a30 	.word	0x20000a30
 8003598:	44fa0000 	.word	0x44fa0000
 800359c:	2000000c 	.word	0x2000000c
 80035a0:	20000008 	.word	0x20000008
 80035a4:	20000010 	.word	0x20000010
 80035a8:	20000014 	.word	0x20000014
 80035ac:	20000000 	.word	0x20000000
 80035b0:	20000004 	.word	0x20000004
 80035b4:	20000910 	.word	0x20000910
 80035b8:	200008d0 	.word	0x200008d0
 80035bc:	3a83126f 	.word	0x3a83126f
 80035c0:	20000550 	.word	0x20000550
 80035c4:	20000174 	.word	0x20000174
 80035c8:	20000bcc 	.word	0x20000bcc

080035cc <wrap_phase>:

// CMSIS-specific constants
#define ARM_PI_F32 3.14159265358979323846f

// Internal helper functions
static float32_t wrap_phase(float32_t phase) {
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	ed87 0a01 	vstr	s0, [r7, #4]
    phase = fabsf(phase);
 80035d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80035da:	eef0 7ae7 	vabs.f32	s15, s15
 80035de:	edc7 7a01 	vstr	s15, [r7, #4]
    float32_t two_pi = 2.0f * ARM_PI_F32;
 80035e2:	4b17      	ldr	r3, [pc, #92]	@ (8003640 <wrap_phase+0x74>)
 80035e4:	60fb      	str	r3, [r7, #12]
    while (phase > two_pi) {
 80035e6:	e007      	b.n	80035f8 <wrap_phase+0x2c>
        phase -= two_pi;
 80035e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80035ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f4:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase > two_pi) {
 80035f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80035fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003608:	dcee      	bgt.n	80035e8 <wrap_phase+0x1c>
    }
    while (phase < 0.0f) {
 800360a:	e007      	b.n	800361c <wrap_phase+0x50>
        phase += two_pi;
 800360c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003610:	edd7 7a03 	vldr	s15, [r7, #12]
 8003614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003618:	edc7 7a01 	vstr	s15, [r7, #4]
    while (phase < 0.0f) {
 800361c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003628:	d4f0      	bmi.n	800360c <wrap_phase+0x40>
    }
    return phase;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	ee07 3a90 	vmov	s15, r3
}
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40c90fdb 	.word	0x40c90fdb

08003644 <limit_setpoint>:

// Limit output to specified setpoint range
static float32_t limit_setpoint(float32_t value, float32_t min_setpoint, float32_t max_setpoint) {
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	ed87 0a03 	vstr	s0, [r7, #12]
 800364e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003652:	ed87 1a01 	vstr	s2, [r7, #4]
    if (value < min_setpoint) return min_setpoint;
 8003656:	ed97 7a03 	vldr	s14, [r7, #12]
 800365a:	edd7 7a02 	vldr	s15, [r7, #8]
 800365e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	d501      	bpl.n	800366c <limit_setpoint+0x28>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	e00b      	b.n	8003684 <limit_setpoint+0x40>
    if (value > max_setpoint) return max_setpoint;
 800366c:	ed97 7a03 	vldr	s14, [r7, #12]
 8003670:	edd7 7a01 	vldr	s15, [r7, #4]
 8003674:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367c:	dd01      	ble.n	8003682 <limit_setpoint+0x3e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	e000      	b.n	8003684 <limit_setpoint+0x40>
    return value;
 8003682:	68fb      	ldr	r3, [r7, #12]
}
 8003684:	ee07 3a90 	vmov	s15, r3
 8003688:	eeb0 0a67 	vmov.f32	s0, s15
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <SIGNAL_init>:

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036b0:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036b8:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f04f 0200 	mov.w	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a1b      	ldr	r2, [pc, #108]	@ (800374c <SIGNAL_init+0xb4>)
 80036de:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80036e6:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d828      	bhi.n	8003740 <SIGNAL_init+0xa8>
 80036ee:	a201      	add	r2, pc, #4	@ (adr r2, 80036f4 <SIGNAL_init+0x5c>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	0800373f 	.word	0x0800373f
 80036f8:	08003705 	.word	0x08003705
 80036fc:	08003723 	.word	0x08003723
 8003700:	0800372d 	.word	0x0800372d
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003710:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <SIGNAL_init+0xb8>)
 8003716:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800371e:	621a      	str	r2, [r3, #32]
            break;
 8003720:	e00e      	b.n	8003740 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003728:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800372a:	e009      	b.n	8003740 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 800373c:	e000      	b.n	8003740 <SIGNAL_init+0xa8>
            break;
 800373e:	bf00      	nop
    }
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	bf800000 	.word	0xbf800000
 8003750:	41200000 	.word	0x41200000

08003754 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003754:	b480      	push	{r7}
 8003756:	b089      	sub	sp, #36	@ 0x24
 8003758:	af00      	add	r7, sp, #0
 800375a:	61f8      	str	r0, [r7, #28]
 800375c:	ed87 0a06 	vstr	s0, [r7, #24]
 8003760:	edc7 0a05 	vstr	s1, [r7, #20]
 8003764:	ed87 1a04 	vstr	s2, [r7, #16]
 8003768:	edc7 1a03 	vstr	s3, [r7, #12]
 800376c:	ed87 2a02 	vstr	s4, [r7, #8]
 8003770:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800379e:	bf00      	nop
 80037a0:	3724      	adds	r7, #36	@ 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80037aa:	b480      	push	{r7}
 80037ac:	b089      	sub	sp, #36	@ 0x24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	61f8      	str	r0, [r7, #28]
 80037b2:	ed87 0a06 	vstr	s0, [r7, #24]
 80037b6:	edc7 0a05 	vstr	s1, [r7, #20]
 80037ba:	ed87 1a04 	vstr	s2, [r7, #16]
 80037be:	edc7 1a03 	vstr	s3, [r7, #12]
 80037c2:	ed87 2a02 	vstr	s4, [r7, #8]
 80037c6:	edc7 2a01 	vstr	s5, [r7, #4]
 80037ca:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SIGNAL_generate>:
    sg->min_setpoint = min_setpoint;
    sg->max_setpoint = max_setpoint;
}

// Signal generation function
float32_t SIGNAL_generate(SignalGenerator* sg, float32_t sample_time) {
 800380c:	b580      	push	{r7, lr}
 800380e:	ed2d 8b02 	vpush	{d8}
 8003812:	b08c      	sub	sp, #48	@ 0x30
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	ed87 0a00 	vstr	s0, [r7]
    float32_t output = 0.0f;
 800381c:	f04f 0300 	mov.w	r3, #0
 8003820:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float32_t two_pi = 2.0f * ARM_PI_F32;
 8003822:	4bb2      	ldr	r3, [pc, #712]	@ (8003aec <SIGNAL_generate+0x2e0>)
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24

    // Update phase and time
    sg->current_phase = wrap_phase(sg->current_phase + two_pi * sg->frequency * sample_time);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003832:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003836:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800383a:	edd7 7a00 	vldr	s15, [r7]
 800383e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003846:	eeb0 0a67 	vmov.f32	s0, s15
 800384a:	f7ff febf 	bl	80035cc <wrap_phase>
 800384e:	eef0 7a40 	vmov.f32	s15, s0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    sg->time_elapsed += sample_time;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800385e:	edd7 7a00 	vldr	s15, [r7]
 8003862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    switch (sg->type) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b03      	cmp	r3, #3
 8003872:	f200 8123 	bhi.w	8003abc <SIGNAL_generate+0x2b0>
 8003876:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <SIGNAL_generate+0x70>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	0800388d 	.word	0x0800388d
 8003880:	080038cb 	.word	0x080038cb
 8003884:	080039e5 	.word	0x080039e5
 8003888:	08003a51 	.word	0x08003a51
        case SIGNAL_SINE: {
            // Sine wave generation
            float32_t phase_input = sg->current_phase + sg->phase;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	edd3 7a03 	vldr	s15, [r3, #12]
 8003898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389c:	edc7 7a02 	vstr	s15, [r7, #8]
            output = arm_sin_f32(phase_input);
 80038a0:	ed97 0a02 	vldr	s0, [r7, #8]
 80038a4:	f007 f96a 	bl	800ab7c <arm_sin_f32>
 80038a8:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output = sg->amplitude * output + sg->offset;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	ed93 7a01 	vldr	s14, [r3, #4]
 80038b2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80038b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80038c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 80038c8:	e0f8      	b.n	8003abc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_CHIRP: {
            // Chirp signal generation
            float32_t inst_freq;
            float32_t progress = sg->time_elapsed / sg->duration;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	ed93 7a08 	vldr	s14, [r3, #32]
 80038d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038da:	edc7 7a04 	vstr	s15, [r7, #16]

            // Calculate instantaneous frequency based on chirp type
            switch (sg->chirp_type) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	7d1b      	ldrb	r3, [r3, #20]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d032      	beq.n	800394c <SIGNAL_generate+0x140>
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	dc48      	bgt.n	800397c <SIGNAL_generate+0x170>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <SIGNAL_generate+0xe8>
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d014      	beq.n	800391c <SIGNAL_generate+0x110>
 80038f2:	e043      	b.n	800397c <SIGNAL_generate+0x170>
                case CHIRP_LINEAR:
                    // Linear frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	edd3 6a07 	vldr	s13, [r3, #28]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	edd3 7a06 	vldr	s15, [r3, #24]
 8003906:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800390a:	edd7 7a04 	vldr	s15, [r7, #16]
 800390e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003916:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800391a:	e02f      	b.n	800397c <SIGNAL_generate+0x170>
                case CHIRP_LOGARITHMIC:
                    // Logarithmic frequency sweep
                    inst_freq = sg->f_start * powf(sg->f_end / sg->f_start, progress);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	ed93 8a06 	vldr	s16, [r3, #24]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	ed93 7a07 	vldr	s14, [r3, #28]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	edd3 7a06 	vldr	s15, [r3, #24]
 800392e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003932:	edd7 0a04 	vldr	s1, [r7, #16]
 8003936:	eeb0 0a66 	vmov.f32	s0, s13
 800393a:	f007 fee9 	bl	800b710 <powf>
 800393e:	eef0 7a40 	vmov.f32	s15, s0
 8003942:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003946:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800394a:	e017      	b.n	800397c <SIGNAL_generate+0x170>
                case CHIRP_QUADRATIC:
                    // Quadratic frequency sweep
                    inst_freq = sg->f_start + (sg->f_end - sg->f_start) * progress * progress;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	edd3 6a07 	vldr	s13, [r3, #28]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	edd3 7a06 	vldr	s15, [r3, #24]
 800395e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003962:	edd7 7a04 	vldr	s15, [r7, #16]
 8003966:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800396a:	edd7 7a04 	vldr	s15, [r7, #16]
 800396e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003976:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
                    break;
 800397a:	bf00      	nop
            }

            // Integrate instantaneous frequency
            float32_t chirp_phase = two_pi * inst_freq * sg->time_elapsed;
 800397c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003980:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003992:	edc7 7a03 	vstr	s15, [r7, #12]
            output = arm_sin_f32(chirp_phase + sg->phase);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	ed93 7a03 	vldr	s14, [r3, #12]
 800399c:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	f007 f8e8 	bl	800ab7c <arm_sin_f32>
 80039ac:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
            output *= sg->amplitude;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80039b6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

            // Reset if duration exceeded
            if (sg->time_elapsed >= sg->duration) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80039ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	da00      	bge.n	80039da <SIGNAL_generate+0x1ce>
                sg->time_elapsed = 0.0f;
            }
            break;
 80039d8:	e070      	b.n	8003abc <SIGNAL_generate+0x2b0>
                sg->time_elapsed = 0.0f;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	639a      	str	r2, [r3, #56]	@ 0x38
            break;
 80039e2:	e06b      	b.n	8003abc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_SQUARE: {
            // Square wave generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	f007 fe68 	bl	800b6d0 <fmodf>
 8003a00:	ed87 0a06 	vstr	s0, [r7, #24]

            float32_t threshold = two_pi * sg->duty_cycle;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003a0a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a05 	vstr	s15, [r7, #20]
            output = (phase_normalized < threshold) ?
                     sg->amplitude + sg->offset :
 8003a16:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a26:	d508      	bpl.n	8003a3a <SIGNAL_generate+0x22e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a38:	e007      	b.n	8003a4a <SIGNAL_generate+0x23e>
                     -sg->amplitude + sg->offset;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	edd3 7a01 	vldr	s15, [r3, #4]
                     sg->amplitude + sg->offset :
 8003a46:	ee77 7a67 	vsub.f32	s15, s14, s15
            output = (phase_normalized < threshold) ?
 8003a4a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003a4e:	e035      	b.n	8003abc <SIGNAL_generate+0x2b0>
        }

        case SIGNAL_RAMP: {
            // Ramp signal generation
            float32_t phase_normalized = fmodf(sg->current_phase + sg->phase, two_pi);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a60:	edd7 0a09 	vldr	s1, [r7, #36]	@ 0x24
 8003a64:	eeb0 0a67 	vmov.f32	s0, s15
 8003a68:	f007 fe32 	bl	800b6d0 <fmodf>
 8003a6c:	ed87 0a08 	vstr	s0, [r7, #32]
            float32_t ramp_ratio = phase_normalized / two_pi;
 8003a70:	edd7 6a08 	vldr	s13, [r7, #32]
 8003a74:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	edc7 7a07 	vstr	s15, [r7, #28]

            output = sg->ramp_start +
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
                     (sg->ramp_end - sg->ramp_start) * ramp_ratio * sg->amplitude +
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003a92:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003a96:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a9a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
            output = sg->ramp_start +
 8003aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
                     sg->offset;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	edd3 7a04 	vldr	s15, [r3, #16]
            output = sg->ramp_start +
 8003ab2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            break;
 8003aba:	bf00      	nop
        }
    }

    // Limit output to specified setpoint range
    return limit_setpoint(output, sg->min_setpoint, sg->max_setpoint);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8003ac8:	eeb0 1a47 	vmov.f32	s2, s14
 8003acc:	eef0 0a67 	vmov.f32	s1, s15
 8003ad0:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8003ad4:	f7ff fdb6 	bl	8003644 <limit_setpoint>
 8003ad8:	eef0 7a40 	vmov.f32	s15, s0
}
 8003adc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae0:	3730      	adds	r7, #48	@ 0x30
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	ecbd 8b02 	vpop	{d8}
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40c90fdb 	.word	0x40c90fdb

08003af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	4b0f      	ldr	r3, [pc, #60]	@ (8003b34 <HAL_MspInit+0x44>)
 8003af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003afa:	4a0e      	ldr	r2, [pc, #56]	@ (8003b34 <HAL_MspInit+0x44>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0e:	4b09      	ldr	r3, [pc, #36]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b1a:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <HAL_MspInit+0x44>)
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b22:	603b      	str	r3, [r7, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b26:	f002 fec3 	bl	80068b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000

08003b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003b3c:	bf00      	nop
 8003b3e:	e7fd      	b.n	8003b3c <NMI_Handler+0x4>

08003b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b44:	bf00      	nop
 8003b46:	e7fd      	b.n	8003b44 <HardFault_Handler+0x4>

08003b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b4c:	bf00      	nop
 8003b4e:	e7fd      	b.n	8003b4c <MemManage_Handler+0x4>

08003b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b54:	bf00      	nop
 8003b56:	e7fd      	b.n	8003b54 <BusFault_Handler+0x4>

08003b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <UsageFault_Handler+0x4>

08003b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b72:	bf00      	nop
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b8a:	b580      	push	{r7, lr}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b8e:	f000 ff85 	bl	8004a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f002 fdc0 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8003ba8:	2010      	movs	r0, #16
 8003baa:	f002 fdb9 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bb8:	4802      	ldr	r0, [pc, #8]	@ (8003bc4 <DMA1_Channel1_IRQHandler+0x10>)
 8003bba:	f002 fb05 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200000fc 	.word	0x200000fc

08003bc8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003bcc:	4802      	ldr	r0, [pc, #8]	@ (8003bd8 <DMA1_Channel2_IRQHandler+0x10>)
 8003bce:	f002 fafb 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200012ec 	.word	0x200012ec

08003bdc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003be0:	4802      	ldr	r0, [pc, #8]	@ (8003bec <DMA1_Channel3_IRQHandler+0x10>)
 8003be2:	f002 faf1 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	2000134c 	.word	0x2000134c

08003bf0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003bf4:	4802      	ldr	r0, [pc, #8]	@ (8003c00 <DMA1_Channel4_IRQHandler+0x10>)
 8003bf6:	f002 fae7 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000122c 	.word	0x2000122c

08003c04 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003c08:	4802      	ldr	r0, [pc, #8]	@ (8003c14 <DMA1_Channel5_IRQHandler+0x10>)
 8003c0a:	f002 fadd 	bl	80061c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	2000128c 	.word	0x2000128c

08003c18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8003c1c:	2040      	movs	r0, #64	@ 0x40
 8003c1e:	f002 fd7f 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8003c22:	2080      	movs	r0, #128	@ 0x80
 8003c24:	f002 fd7c 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003c28:	bf00      	nop
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003c30:	4803      	ldr	r0, [pc, #12]	@ (8003c40 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003c32:	f004 fa35 	bl	80080a0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003c36:	4803      	ldr	r0, [pc, #12]	@ (8003c44 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003c38:	f004 fa32 	bl	80080a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003c3c:	bf00      	nop
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	20000b00 	.word	0x20000b00
 8003c44:	20000fc8 	.word	0x20000fc8

08003c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003c4c:	4802      	ldr	r0, [pc, #8]	@ (8003c58 <TIM2_IRQHandler+0x10>)
 8003c4e:	f004 fa27 	bl	80080a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003c52:	bf00      	nop
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000bcc 	.word	0x20000bcc

08003c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003c60:	4802      	ldr	r0, [pc, #8]	@ (8003c6c <TIM3_IRQHandler+0x10>)
 8003c62:	f004 fa1d 	bl	80080a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000c98 	.word	0x20000c98

08003c70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003c74:	4802      	ldr	r0, [pc, #8]	@ (8003c80 <TIM4_IRQHandler+0x10>)
 8003c76:	f004 fa13 	bl	80080a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000d64 	.word	0x20000d64

08003c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003c88:	4802      	ldr	r0, [pc, #8]	@ (8003c94 <USART2_IRQHandler+0x10>)
 8003c8a:	f005 fcf7 	bl	800967c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003c8e:	bf00      	nop
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20001160 	.word	0x20001160

08003c98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8003c9c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003ca0:	f002 fd3e 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8003ca4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003ca8:	f002 fd3a 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8003cac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003cb0:	f002 fd36 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003cb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003cb8:	f002 fd32 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003cc4:	4802      	ldr	r0, [pc, #8]	@ (8003cd0 <LPUART1_IRQHandler+0x10>)
 8003cc6:	f005 fcd9 	bl	800967c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003cca:	bf00      	nop
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20001094 	.word	0x20001094

08003cd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003cd8:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <SystemInit+0x20>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	4a05      	ldr	r2, [pc, #20]	@ (8003cf4 <SystemInit+0x20>)
 8003ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b098      	sub	sp, #96	@ 0x60
 8003cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cfe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d1e:	1d3b      	adds	r3, r7, #4
 8003d20:	2234      	movs	r2, #52	@ 0x34
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f007 fca1 	bl	800b66c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e1c <MX_TIM1_Init+0x124>)
 8003d2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d30:	4b39      	ldr	r3, [pc, #228]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d36:	4b38      	ldr	r3, [pc, #224]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d3c:	4b36      	ldr	r3, [pc, #216]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d3e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d44:	4b34      	ldr	r3, [pc, #208]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d4a:	4b33      	ldr	r3, [pc, #204]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d50:	4b31      	ldr	r3, [pc, #196]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003d56:	4830      	ldr	r0, [pc, #192]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d58:	f003 fe82 	bl	8007a60 <HAL_TIM_PWM_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003d62:	f7ff fb07 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d76:	4619      	mov	r1, r3
 8003d78:	4827      	ldr	r0, [pc, #156]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003d7a:	f005 faa5 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003d84:	f7ff faf6 	bl	8003374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d88:	2360      	movs	r3, #96	@ 0x60
 8003d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d90:	2300      	movs	r3, #0
 8003d92:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003d94:	2300      	movs	r3, #0
 8003d96:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003da4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003da8:	220c      	movs	r2, #12
 8003daa:	4619      	mov	r1, r3
 8003dac:	481a      	ldr	r0, [pc, #104]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003dae:	f004 faf1 	bl	8008394 <HAL_TIM_PWM_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003db8:	f7ff fadc 	bl	8003374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003dde:	2300      	movs	r3, #0
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003de2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003dec:	2300      	movs	r3, #0
 8003dee:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4807      	ldr	r0, [pc, #28]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003dfa:	f005 fafb 	bl	80093f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d001      	beq.n	8003e08 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003e04:	f7ff fab6 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003e08:	4803      	ldr	r0, [pc, #12]	@ (8003e18 <MX_TIM1_Init+0x120>)
 8003e0a:	f000 fb77 	bl	80044fc <HAL_TIM_MspPostInit>

}
 8003e0e:	bf00      	nop
 8003e10:	3760      	adds	r7, #96	@ 0x60
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	20000b00 	.word	0x20000b00
 8003e1c:	40012c00 	.word	0x40012c00

08003e20 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e26:	f107 0310 	add.w	r3, r7, #16
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	609a      	str	r2, [r3, #8]
 8003e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e34:	1d3b      	adds	r3, r7, #4
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003e44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003e46:	4b1c      	ldr	r3, [pc, #112]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e48:	22a9      	movs	r2, #169	@ 0xa9
 8003e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003e52:	4b19      	ldr	r3, [pc, #100]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003e58:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e5a:	4b17      	ldr	r3, [pc, #92]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e60:	4b15      	ldr	r3, [pc, #84]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003e66:	4814      	ldr	r0, [pc, #80]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e68:	f003 fcae 	bl	80077c8 <HAL_TIM_Base_Init>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e72:	f7ff fa7f 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e7c:	f107 0310 	add.w	r3, r7, #16
 8003e80:	4619      	mov	r1, r3
 8003e82:	480d      	ldr	r0, [pc, #52]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003e84:	f004 fb9a 	bl	80085bc <HAL_TIM_ConfigClockSource>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e8e:	f7ff fa71 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4806      	ldr	r0, [pc, #24]	@ (8003eb8 <MX_TIM2_Init+0x98>)
 8003ea0:	f005 fa12 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003eaa:	f7ff fa63 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003eae:	bf00      	nop
 8003eb0:	3720      	adds	r7, #32
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000bcc 	.word	0x20000bcc

08003ebc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08c      	sub	sp, #48	@ 0x30
 8003ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003ec2:	f107 030c 	add.w	r3, r7, #12
 8003ec6:	2224      	movs	r2, #36	@ 0x24
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f007 fbce 	bl	800b66c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ed0:	463b      	mov	r3, r7
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003eda:	4b21      	ldr	r3, [pc, #132]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003edc:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <MX_TIM3_Init+0xa8>)
 8003ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003eec:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ef2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efa:	4b19      	ldr	r3, [pc, #100]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003f00:	2303      	movs	r3, #3
 8003f02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f14:	2300      	movs	r3, #0
 8003f16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	4619      	mov	r1, r3
 8003f2a:	480d      	ldr	r0, [pc, #52]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003f2c:	f003 ff76 	bl	8007e1c <HAL_TIM_Encoder_Init>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003f36:	f7ff fa1d 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f42:	463b      	mov	r3, r7
 8003f44:	4619      	mov	r1, r3
 8003f46:	4806      	ldr	r0, [pc, #24]	@ (8003f60 <MX_TIM3_Init+0xa4>)
 8003f48:	f005 f9be 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003f52:	f7ff fa0f 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003f56:	bf00      	nop
 8003f58:	3730      	adds	r7, #48	@ 0x30
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000c98 	.word	0x20000c98
 8003f64:	40000400 	.word	0x40000400

08003f68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08c      	sub	sp, #48	@ 0x30
 8003f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f6e:	f107 030c 	add.w	r3, r7, #12
 8003f72:	2224      	movs	r2, #36	@ 0x24
 8003f74:	2100      	movs	r1, #0
 8003f76:	4618      	mov	r0, r3
 8003f78:	f007 fb78 	bl	800b66c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003f86:	4b21      	ldr	r3, [pc, #132]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f88:	4a21      	ldr	r2, [pc, #132]	@ (8004010 <MX_TIM4_Init+0xa8>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003f8c:	4b1f      	ldr	r3, [pc, #124]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa6:	4b19      	ldr	r3, [pc, #100]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fac:	2303      	movs	r3, #3
 8003fae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003fd0:	f107 030c 	add.w	r3, r7, #12
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	480d      	ldr	r0, [pc, #52]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003fd8:	f003 ff20 	bl	8007e1c <HAL_TIM_Encoder_Init>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003fe2:	f7ff f9c7 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4806      	ldr	r0, [pc, #24]	@ (800400c <MX_TIM4_Init+0xa4>)
 8003ff4:	f005 f968 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003ffe:	f7ff f9b9 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004002:	bf00      	nop
 8004004:	3730      	adds	r7, #48	@ 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000d64 	.word	0x20000d64
 8004010:	40000800 	.word	0x40000800

08004014 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	@ 0x30
 8004018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800401a:	f107 030c 	add.w	r3, r7, #12
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	2100      	movs	r1, #0
 8004022:	4618      	mov	r0, r3
 8004024:	f007 fb22 	bl	800b66c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004028:	463b      	mov	r3, r7
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004032:	4b21      	ldr	r3, [pc, #132]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 8004034:	4a21      	ldr	r2, [pc, #132]	@ (80040bc <MX_TIM5_Init+0xa8>)
 8004036:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004038:	4b1f      	ldr	r3, [pc, #124]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 800403a:	2200      	movs	r2, #0
 800403c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403e:	4b1e      	ldr	r3, [pc, #120]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8004044:	4b1c      	ldr	r3, [pc, #112]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 8004046:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800404a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800404c:	4b1a      	ldr	r3, [pc, #104]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 800404e:	2200      	movs	r2, #0
 8004050:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004052:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 8004054:	2200      	movs	r2, #0
 8004056:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004058:	2303      	movs	r3, #3
 800405a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800406c:	2300      	movs	r3, #0
 800406e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004070:	2301      	movs	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004074:	2300      	movs	r3, #0
 8004076:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	4619      	mov	r1, r3
 8004082:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 8004084:	f003 feca 	bl	8007e1c <HAL_TIM_Encoder_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800408e:	f7ff f971 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004092:	2300      	movs	r3, #0
 8004094:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800409a:	463b      	mov	r3, r7
 800409c:	4619      	mov	r1, r3
 800409e:	4806      	ldr	r0, [pc, #24]	@ (80040b8 <MX_TIM5_Init+0xa4>)
 80040a0:	f005 f912 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80040aa:	f7ff f963 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80040ae:	bf00      	nop
 80040b0:	3730      	adds	r7, #48	@ 0x30
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	20000e30 	.word	0x20000e30
 80040bc:	40000c00 	.word	0x40000c00

080040c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b09c      	sub	sp, #112	@ 0x70
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	605a      	str	r2, [r3, #4]
 80040d0:	609a      	str	r2, [r3, #8]
 80040d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
 80040dc:	605a      	str	r2, [r3, #4]
 80040de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	611a      	str	r2, [r3, #16]
 80040f0:	615a      	str	r2, [r3, #20]
 80040f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	2234      	movs	r2, #52	@ 0x34
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f007 fab6 	bl	800b66c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004100:	4b4c      	ldr	r3, [pc, #304]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004102:	4a4d      	ldr	r2, [pc, #308]	@ (8004238 <MX_TIM8_Init+0x178>)
 8004104:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004106:	4b4b      	ldr	r3, [pc, #300]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800410c:	4b49      	ldr	r3, [pc, #292]	@ (8004234 <MX_TIM8_Init+0x174>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004112:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004114:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004118:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800411a:	4b46      	ldr	r3, [pc, #280]	@ (8004234 <MX_TIM8_Init+0x174>)
 800411c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004120:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004122:	4b44      	ldr	r3, [pc, #272]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004124:	2200      	movs	r2, #0
 8004126:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004128:	4b42      	ldr	r3, [pc, #264]	@ (8004234 <MX_TIM8_Init+0x174>)
 800412a:	2200      	movs	r2, #0
 800412c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800412e:	4841      	ldr	r0, [pc, #260]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004130:	f003 fb4a 	bl	80077c8 <HAL_TIM_Base_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800413a:	f7ff f91b 	bl	8003374 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800413e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004142:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004144:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004148:	4619      	mov	r1, r3
 800414a:	483a      	ldr	r0, [pc, #232]	@ (8004234 <MX_TIM8_Init+0x174>)
 800414c:	f004 fa36 	bl	80085bc <HAL_TIM_ConfigClockSource>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8004156:	f7ff f90d 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800415a:	4836      	ldr	r0, [pc, #216]	@ (8004234 <MX_TIM8_Init+0x174>)
 800415c:	f003 fc80 	bl	8007a60 <HAL_TIM_PWM_Init>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8004166:	f7ff f905 	bl	8003374 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800416e:	2300      	movs	r3, #0
 8004170:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004176:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800417a:	4619      	mov	r1, r3
 800417c:	482d      	ldr	r0, [pc, #180]	@ (8004234 <MX_TIM8_Init+0x174>)
 800417e:	f005 f8a3 	bl	80092c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d001      	beq.n	800418c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8004188:	f7ff f8f4 	bl	8003374 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800418c:	2360      	movs	r3, #96	@ 0x60
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004194:	2300      	movs	r3, #0
 8004196:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004198:	2300      	movs	r3, #0
 800419a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800419c:	2300      	movs	r3, #0
 800419e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041a0:	2300      	movs	r3, #0
 80041a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041a4:	2300      	movs	r3, #0
 80041a6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80041ac:	2200      	movs	r2, #0
 80041ae:	4619      	mov	r1, r3
 80041b0:	4820      	ldr	r0, [pc, #128]	@ (8004234 <MX_TIM8_Init+0x174>)
 80041b2:	f004 f8ef 	bl	8008394 <HAL_TIM_PWM_ConfigChannel>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80041bc:	f7ff f8da 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80041c4:	2204      	movs	r2, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	481a      	ldr	r0, [pc, #104]	@ (8004234 <MX_TIM8_Init+0x174>)
 80041ca:	f004 f8e3 	bl	8008394 <HAL_TIM_PWM_ConfigChannel>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80041d4:	f7ff f8ce 	bl	8003374 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80041fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004202:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004208:	2300      	movs	r3, #0
 800420a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800420c:	2300      	movs	r3, #0
 800420e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	4619      	mov	r1, r3
 8004214:	4807      	ldr	r0, [pc, #28]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004216:	f005 f8ed 	bl	80093f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8004220:	f7ff f8a8 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004224:	4803      	ldr	r0, [pc, #12]	@ (8004234 <MX_TIM8_Init+0x174>)
 8004226:	f000 f969 	bl	80044fc <HAL_TIM_MspPostInit>

}
 800422a:	bf00      	nop
 800422c:	3770      	adds	r7, #112	@ 0x70
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000efc 	.word	0x20000efc
 8004238:	40013400 	.word	0x40013400

0800423c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004240:	4b14      	ldr	r3, [pc, #80]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004242:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <MX_TIM16_Init+0x5c>)
 8004244:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8004246:	4b13      	ldr	r3, [pc, #76]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004248:	22a9      	movs	r2, #169	@ 0xa9
 800424a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800424c:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <MX_TIM16_Init+0x58>)
 800424e:	2200      	movs	r2, #0
 8004250:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8004252:	4b10      	ldr	r3, [pc, #64]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004254:	f240 4279 	movw	r2, #1145	@ 0x479
 8004258:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800425a:	4b0e      	ldr	r3, [pc, #56]	@ (8004294 <MX_TIM16_Init+0x58>)
 800425c:	2200      	movs	r2, #0
 800425e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004262:	2200      	movs	r2, #0
 8004264:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004266:	4b0b      	ldr	r3, [pc, #44]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004268:	2200      	movs	r2, #0
 800426a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800426c:	4809      	ldr	r0, [pc, #36]	@ (8004294 <MX_TIM16_Init+0x58>)
 800426e:	f003 faab 	bl	80077c8 <HAL_TIM_Base_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8004278:	f7ff f87c 	bl	8003374 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800427c:	2108      	movs	r1, #8
 800427e:	4805      	ldr	r0, [pc, #20]	@ (8004294 <MX_TIM16_Init+0x58>)
 8004280:	f003 fd64 	bl	8007d4c <HAL_TIM_OnePulse_Init>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800428a:	f7ff f873 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800428e:	bf00      	nop
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000fc8 	.word	0x20000fc8
 8004298:	40014400 	.word	0x40014400

0800429c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <HAL_TIM_PWM_MspInit+0x44>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042ae:	4b0d      	ldr	r3, [pc, #52]	@ (80042e4 <HAL_TIM_PWM_MspInit+0x48>)
 80042b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042b2:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <HAL_TIM_PWM_MspInit+0x48>)
 80042b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80042b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80042ba:	4b0a      	ldr	r3, [pc, #40]	@ (80042e4 <HAL_TIM_PWM_MspInit+0x48>)
 80042bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2100      	movs	r1, #0
 80042ca:	2019      	movs	r0, #25
 80042cc:	f001 fddf 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80042d0:	2019      	movs	r0, #25
 80042d2:	f001 fdf6 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f8:	d114      	bne.n	8004324 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fa:	4b22      	ldr	r3, [pc, #136]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042fe:	4a21      	ldr	r2, [pc, #132]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6593      	str	r3, [r2, #88]	@ 0x58
 8004306:	4b1f      	ldr	r3, [pc, #124]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	201c      	movs	r0, #28
 8004318:	f001 fdb9 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800431c:	201c      	movs	r0, #28
 800431e:	f001 fdd0 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8004322:	e02a      	b.n	800437a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a17      	ldr	r2, [pc, #92]	@ (8004388 <HAL_TIM_Base_MspInit+0xa0>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10c      	bne.n	8004348 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004332:	4a14      	ldr	r2, [pc, #80]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004334:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004338:	6613      	str	r3, [r2, #96]	@ 0x60
 800433a:	4b12      	ldr	r3, [pc, #72]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 800433c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800433e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	693b      	ldr	r3, [r7, #16]
}
 8004346:	e018      	b.n	800437a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0f      	ldr	r2, [pc, #60]	@ (800438c <HAL_TIM_Base_MspInit+0xa4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d113      	bne.n	800437a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004356:	4a0b      	ldr	r2, [pc, #44]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800435c:	6613      	str	r3, [r2, #96]	@ 0x60
 800435e:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <HAL_TIM_Base_MspInit+0x9c>)
 8004360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	2019      	movs	r0, #25
 8004370:	f001 fd8d 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004374:	2019      	movs	r0, #25
 8004376:	f001 fda4 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40013400 	.word	0x40013400
 800438c:	40014400 	.word	0x40014400

08004390 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08e      	sub	sp, #56	@ 0x38
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004398:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	605a      	str	r2, [r3, #4]
 80043a2:	609a      	str	r2, [r3, #8]
 80043a4:	60da      	str	r2, [r3, #12]
 80043a6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a4f      	ldr	r2, [pc, #316]	@ (80044ec <HAL_TIM_Encoder_MspInit+0x15c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d131      	bne.n	8004416 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043b2:	4b4f      	ldr	r3, [pc, #316]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b6:	4a4e      	ldr	r2, [pc, #312]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043b8:	f043 0302 	orr.w	r3, r3, #2
 80043bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043be:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ca:	4b49      	ldr	r3, [pc, #292]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ce:	4a48      	ldr	r2, [pc, #288]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043d6:	4b46      	ldr	r3, [pc, #280]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80043d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
 80043e0:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e2:	23c0      	movs	r3, #192	@ 0xc0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e6:	2302      	movs	r3, #2
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ea:	2300      	movs	r3, #0
 80043ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ee:	2300      	movs	r3, #0
 80043f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043f2:	2302      	movs	r3, #2
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043fa:	4619      	mov	r1, r3
 80043fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004400:	f001 fff4 	bl	80063ec <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004404:	2200      	movs	r2, #0
 8004406:	2100      	movs	r1, #0
 8004408:	201d      	movs	r0, #29
 800440a:	f001 fd40 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800440e:	201d      	movs	r0, #29
 8004410:	f001 fd57 	bl	8005ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8004414:	e065      	b.n	80044e2 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a36      	ldr	r2, [pc, #216]	@ (80044f4 <HAL_TIM_Encoder_MspInit+0x164>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d132      	bne.n	8004486 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004420:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 8004422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004424:	4a32      	ldr	r2, [pc, #200]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 8004426:	f043 0304 	orr.w	r3, r3, #4
 800442a:	6593      	str	r3, [r2, #88]	@ 0x58
 800442c:	4b30      	ldr	r3, [pc, #192]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 800442e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004430:	f003 0304 	and.w	r3, r3, #4
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 800443a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443c:	4a2c      	ldr	r2, [pc, #176]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004444:	4b2a      	ldr	r3, [pc, #168]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004450:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004456:	2302      	movs	r3, #2
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445e:	2300      	movs	r3, #0
 8004460:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004462:	230a      	movs	r3, #10
 8004464:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800446a:	4619      	mov	r1, r3
 800446c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004470:	f001 ffbc 	bl	80063ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004474:	2200      	movs	r2, #0
 8004476:	2100      	movs	r1, #0
 8004478:	201e      	movs	r0, #30
 800447a:	f001 fd08 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800447e:	201e      	movs	r0, #30
 8004480:	f001 fd1f 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
}
 8004484:	e02d      	b.n	80044e2 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1b      	ldr	r2, [pc, #108]	@ (80044f8 <HAL_TIM_Encoder_MspInit+0x168>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d128      	bne.n	80044e2 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004490:	4b17      	ldr	r3, [pc, #92]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004494:	4a16      	ldr	r2, [pc, #88]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6593      	str	r3, [r2, #88]	@ 0x58
 800449c:	4b14      	ldr	r3, [pc, #80]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ac:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044b4:	4b0e      	ldr	r3, [pc, #56]	@ (80044f0 <HAL_TIM_Encoder_MspInit+0x160>)
 80044b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80044c0:	2303      	movs	r3, #3
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c4:	2302      	movs	r3, #2
 80044c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044cc:	2300      	movs	r3, #0
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80044d0:	2302      	movs	r3, #2
 80044d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044d8:	4619      	mov	r1, r3
 80044da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044de:	f001 ff85 	bl	80063ec <HAL_GPIO_Init>
}
 80044e2:	bf00      	nop
 80044e4:	3738      	adds	r7, #56	@ 0x38
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40021000 	.word	0x40021000
 80044f4:	40000800 	.word	0x40000800
 80044f8:	40000c00 	.word	0x40000c00

080044fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	@ 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004504:	f107 0314 	add.w	r3, r7, #20
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	609a      	str	r2, [r3, #8]
 8004510:	60da      	str	r2, [r3, #12]
 8004512:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_TIM_MspPostInit+0xa8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d11c      	bne.n	8004558 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 8004520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004522:	4a21      	ldr	r2, [pc, #132]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 8004524:	f043 0304 	orr.w	r3, r3, #4
 8004528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800452a:	4b1f      	ldr	r3, [pc, #124]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 800452c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	613b      	str	r3, [r7, #16]
 8004534:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004536:	2308      	movs	r3, #8
 8004538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453a:	2302      	movs	r3, #2
 800453c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004542:	2300      	movs	r3, #0
 8004544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004546:	2302      	movs	r3, #2
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454a:	f107 0314 	add.w	r3, r7, #20
 800454e:	4619      	mov	r1, r3
 8004550:	4816      	ldr	r0, [pc, #88]	@ (80045ac <HAL_TIM_MspPostInit+0xb0>)
 8004552:	f001 ff4b 	bl	80063ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004556:	e020      	b.n	800459a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a14      	ldr	r2, [pc, #80]	@ (80045b0 <HAL_TIM_MspPostInit+0xb4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d11b      	bne.n	800459a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004562:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 8004564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004566:	4a10      	ldr	r2, [pc, #64]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 8004568:	f043 0304 	orr.w	r3, r3, #4
 800456c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800456e:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <HAL_TIM_MspPostInit+0xac>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800457a:	23c0      	movs	r3, #192	@ 0xc0
 800457c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457e:	2302      	movs	r3, #2
 8004580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004586:	2300      	movs	r3, #0
 8004588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800458a:	2304      	movs	r3, #4
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	4619      	mov	r1, r3
 8004594:	4805      	ldr	r0, [pc, #20]	@ (80045ac <HAL_TIM_MspPostInit+0xb0>)
 8004596:	f001 ff29 	bl	80063ec <HAL_GPIO_Init>
}
 800459a:	bf00      	nop
 800459c:	3728      	adds	r7, #40	@ 0x28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40012c00 	.word	0x40012c00
 80045a8:	40021000 	.word	0x40021000
 80045ac:	48000800 	.word	0x48000800
 80045b0:	40013400 	.word	0x40013400

080045b4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80045b8:	4b20      	ldr	r3, [pc, #128]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045ba:	4a21      	ldr	r2, [pc, #132]	@ (8004640 <MX_LPUART1_UART_Init+0x8c>)
 80045bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80045be:	4b1f      	ldr	r3, [pc, #124]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045c0:	4a20      	ldr	r2, [pc, #128]	@ (8004644 <MX_LPUART1_UART_Init+0x90>)
 80045c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80045ca:	4b1c      	ldr	r3, [pc, #112]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80045d0:	4b1a      	ldr	r3, [pc, #104]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80045d6:	4b19      	ldr	r3, [pc, #100]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045d8:	220c      	movs	r2, #12
 80045da:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045dc:	4b17      	ldr	r3, [pc, #92]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045e2:	4b16      	ldr	r3, [pc, #88]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80045e8:	4b14      	ldr	r3, [pc, #80]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045ee:	4b13      	ldr	r3, [pc, #76]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80045f4:	4811      	ldr	r0, [pc, #68]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 80045f6:	f004 ffe1 	bl	80095bc <HAL_UART_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8004600:	f7fe feb8 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004604:	2100      	movs	r1, #0
 8004606:	480d      	ldr	r0, [pc, #52]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 8004608:	f006 f9ed 	bl	800a9e6 <HAL_UARTEx_SetTxFifoThreshold>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8004612:	f7fe feaf 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004616:	2100      	movs	r1, #0
 8004618:	4808      	ldr	r0, [pc, #32]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 800461a:	f006 fa22 	bl	800aa62 <HAL_UARTEx_SetRxFifoThreshold>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8004624:	f7fe fea6 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004628:	4804      	ldr	r0, [pc, #16]	@ (800463c <MX_LPUART1_UART_Init+0x88>)
 800462a:	f006 f9a3 	bl	800a974 <HAL_UARTEx_DisableFifoMode>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8004634:	f7fe fe9e 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}
 800463c:	20001094 	.word	0x20001094
 8004640:	40008000 	.word	0x40008000
 8004644:	001e8480 	.word	0x001e8480

08004648 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800464c:	4b23      	ldr	r3, [pc, #140]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 800464e:	4a24      	ldr	r2, [pc, #144]	@ (80046e0 <MX_USART2_UART_Init+0x98>)
 8004650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004652:	4b22      	ldr	r3, [pc, #136]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 800465c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004660:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004662:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004664:	2200      	movs	r2, #0
 8004666:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004668:	4b1c      	ldr	r3, [pc, #112]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 800466a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800466e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004670:	4b1a      	ldr	r3, [pc, #104]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004672:	220c      	movs	r2, #12
 8004674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004676:	4b19      	ldr	r3, [pc, #100]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004678:	2200      	movs	r2, #0
 800467a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800467c:	4b17      	ldr	r3, [pc, #92]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 800467e:	2200      	movs	r2, #0
 8004680:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004682:	4b16      	ldr	r3, [pc, #88]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004684:	2200      	movs	r2, #0
 8004686:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004688:	4b14      	ldr	r3, [pc, #80]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 800468a:	2200      	movs	r2, #0
 800468c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800468e:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004690:	2200      	movs	r2, #0
 8004692:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004694:	4811      	ldr	r0, [pc, #68]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 8004696:	f004 ff91 	bl	80095bc <HAL_UART_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80046a0:	f7fe fe68 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046a4:	2100      	movs	r1, #0
 80046a6:	480d      	ldr	r0, [pc, #52]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 80046a8:	f006 f99d 	bl	800a9e6 <HAL_UARTEx_SetTxFifoThreshold>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80046b2:	f7fe fe5f 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80046b6:	2100      	movs	r1, #0
 80046b8:	4808      	ldr	r0, [pc, #32]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 80046ba:	f006 f9d2 	bl	800aa62 <HAL_UARTEx_SetRxFifoThreshold>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80046c4:	f7fe fe56 	bl	8003374 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80046c8:	4804      	ldr	r0, [pc, #16]	@ (80046dc <MX_USART2_UART_Init+0x94>)
 80046ca:	f006 f953 	bl	800a974 <HAL_UARTEx_DisableFifoMode>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80046d4:	f7fe fe4e 	bl	8003374 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80046d8:	bf00      	nop
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20001160 	.word	0x20001160
 80046e0:	40004400 	.word	0x40004400

080046e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b0a0      	sub	sp, #128	@ 0x80
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046ec:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80046f0:	2200      	movs	r2, #0
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	605a      	str	r2, [r3, #4]
 80046f6:	609a      	str	r2, [r3, #8]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046fc:	f107 0318 	add.w	r3, r7, #24
 8004700:	2254      	movs	r2, #84	@ 0x54
 8004702:	2100      	movs	r1, #0
 8004704:	4618      	mov	r0, r3
 8004706:	f006 ffb1 	bl	800b66c <memset>
  if(uartHandle->Instance==LPUART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a99      	ldr	r2, [pc, #612]	@ (8004974 <HAL_UART_MspInit+0x290>)
 8004710:	4293      	cmp	r3, r2
 8004712:	f040 8093 	bne.w	800483c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004716:	2320      	movs	r3, #32
 8004718:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800471a:	2300      	movs	r3, #0
 800471c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800471e:	f107 0318 	add.w	r3, r7, #24
 8004722:	4618      	mov	r0, r3
 8004724:	f002 fe02 	bl	800732c <HAL_RCCEx_PeriphCLKConfig>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800472e:	f7fe fe21 	bl	8003374 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004732:	4b91      	ldr	r3, [pc, #580]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	4a90      	ldr	r2, [pc, #576]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004738:	f043 0301 	orr.w	r3, r3, #1
 800473c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800473e:	4b8e      	ldr	r3, [pc, #568]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474a:	4b8b      	ldr	r3, [pc, #556]	@ (8004978 <HAL_UART_MspInit+0x294>)
 800474c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800474e:	4a8a      	ldr	r2, [pc, #552]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004756:	4b88      	ldr	r3, [pc, #544]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004762:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004766:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476c:	2300      	movs	r3, #0
 800476e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004770:	2300      	movs	r3, #0
 8004772:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004774:	2308      	movs	r3, #8
 8004776:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004778:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800477c:	4619      	mov	r1, r3
 800477e:	487f      	ldr	r0, [pc, #508]	@ (800497c <HAL_UART_MspInit+0x298>)
 8004780:	f001 fe34 	bl	80063ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8004784:	4b7e      	ldr	r3, [pc, #504]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 8004786:	4a7f      	ldr	r2, [pc, #508]	@ (8004984 <HAL_UART_MspInit+0x2a0>)
 8004788:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800478a:	4b7d      	ldr	r3, [pc, #500]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 800478c:	2222      	movs	r2, #34	@ 0x22
 800478e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004790:	4b7b      	ldr	r3, [pc, #492]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004796:	4b7a      	ldr	r3, [pc, #488]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 8004798:	2200      	movs	r2, #0
 800479a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800479c:	4b78      	ldr	r3, [pc, #480]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 800479e:	2280      	movs	r2, #128	@ 0x80
 80047a0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047a2:	4b77      	ldr	r3, [pc, #476]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047a8:	4b75      	ldr	r3, [pc, #468]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80047ae:	4b74      	ldr	r3, [pc, #464]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80047b4:	4b72      	ldr	r3, [pc, #456]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80047ba:	4871      	ldr	r0, [pc, #452]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047bc:	f001 fb9c 	bl	8005ef8 <HAL_DMA_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80047c6:	f7fe fdd5 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a6c      	ldr	r2, [pc, #432]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80047d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004980 <HAL_UART_MspInit+0x29c>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80047d8:	4b6b      	ldr	r3, [pc, #428]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047da:	4a6c      	ldr	r2, [pc, #432]	@ (800498c <HAL_UART_MspInit+0x2a8>)
 80047dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80047de:	4b6a      	ldr	r3, [pc, #424]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047e0:	2223      	movs	r2, #35	@ 0x23
 80047e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80047e4:	4b68      	ldr	r3, [pc, #416]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047e6:	2210      	movs	r2, #16
 80047e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047ea:	4b67      	ldr	r3, [pc, #412]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80047f0:	4b65      	ldr	r3, [pc, #404]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047f2:	2280      	movs	r2, #128	@ 0x80
 80047f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047f6:	4b64      	ldr	r3, [pc, #400]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047fc:	4b62      	ldr	r3, [pc, #392]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 80047fe:	2200      	movs	r2, #0
 8004800:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004802:	4b61      	ldr	r3, [pc, #388]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 8004804:	2200      	movs	r2, #0
 8004806:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004808:	4b5f      	ldr	r3, [pc, #380]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 800480a:	2200      	movs	r2, #0
 800480c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800480e:	485e      	ldr	r0, [pc, #376]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 8004810:	f001 fb72 	bl	8005ef8 <HAL_DMA_Init>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800481a:	f7fe fdab 	bl	8003374 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a59      	ldr	r2, [pc, #356]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 8004822:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004824:	4a58      	ldr	r2, [pc, #352]	@ (8004988 <HAL_UART_MspInit+0x2a4>)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800482a:	2200      	movs	r2, #0
 800482c:	2100      	movs	r1, #0
 800482e:	205b      	movs	r0, #91	@ 0x5b
 8004830:	f001 fb2d 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004834:	205b      	movs	r0, #91	@ 0x5b
 8004836:	f001 fb44 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800483a:	e097      	b.n	800496c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a53      	ldr	r2, [pc, #332]	@ (8004990 <HAL_UART_MspInit+0x2ac>)
 8004842:	4293      	cmp	r3, r2
 8004844:	f040 8092 	bne.w	800496c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004848:	2302      	movs	r3, #2
 800484a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800484c:	2300      	movs	r3, #0
 800484e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004850:	f107 0318 	add.w	r3, r7, #24
 8004854:	4618      	mov	r0, r3
 8004856:	f002 fd69 	bl	800732c <HAL_RCCEx_PeriphCLKConfig>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8004860:	f7fe fd88 	bl	8003374 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004864:	4b44      	ldr	r3, [pc, #272]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004868:	4a43      	ldr	r2, [pc, #268]	@ (8004978 <HAL_UART_MspInit+0x294>)
 800486a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004870:	4b41      	ldr	r3, [pc, #260]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800487c:	4b3e      	ldr	r3, [pc, #248]	@ (8004978 <HAL_UART_MspInit+0x294>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004880:	4a3d      	ldr	r2, [pc, #244]	@ (8004978 <HAL_UART_MspInit+0x294>)
 8004882:	f043 0301 	orr.w	r3, r3, #1
 8004886:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004888:	4b3b      	ldr	r3, [pc, #236]	@ (8004978 <HAL_UART_MspInit+0x294>)
 800488a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004894:	230c      	movs	r3, #12
 8004896:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004898:	2302      	movs	r3, #2
 800489a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489c:	2300      	movs	r3, #0
 800489e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048a0:	2300      	movs	r3, #0
 80048a2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80048a4:	2307      	movs	r3, #7
 80048a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80048ac:	4619      	mov	r1, r3
 80048ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80048b2:	f001 fd9b 	bl	80063ec <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80048b6:	4b37      	ldr	r3, [pc, #220]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048b8:	4a37      	ldr	r2, [pc, #220]	@ (8004998 <HAL_UART_MspInit+0x2b4>)
 80048ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80048bc:	4b35      	ldr	r3, [pc, #212]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048be:	221a      	movs	r2, #26
 80048c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048c2:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048c8:	4b32      	ldr	r3, [pc, #200]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ce:	4b31      	ldr	r3, [pc, #196]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048d0:	2280      	movs	r2, #128	@ 0x80
 80048d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048d6:	2200      	movs	r2, #0
 80048d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048da:	4b2e      	ldr	r3, [pc, #184]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80048e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048e6:	4b2b      	ldr	r3, [pc, #172]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048ec:	4829      	ldr	r0, [pc, #164]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 80048ee:	f001 fb03 	bl	8005ef8 <HAL_DMA_Init>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_MspInit+0x218>
      Error_Handler();
 80048f8:	f7fe fd3c 	bl	8003374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a25      	ldr	r2, [pc, #148]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 8004900:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004904:	4a23      	ldr	r2, [pc, #140]	@ (8004994 <HAL_UART_MspInit+0x2b0>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800490a:	4b24      	ldr	r3, [pc, #144]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 800490c:	4a24      	ldr	r2, [pc, #144]	@ (80049a0 <HAL_UART_MspInit+0x2bc>)
 800490e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004910:	4b22      	ldr	r3, [pc, #136]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004912:	221b      	movs	r2, #27
 8004914:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004916:	4b21      	ldr	r3, [pc, #132]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004918:	2210      	movs	r2, #16
 800491a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800491c:	4b1f      	ldr	r3, [pc, #124]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 800491e:	2200      	movs	r2, #0
 8004920:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004924:	2280      	movs	r2, #128	@ 0x80
 8004926:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004928:	4b1c      	ldr	r3, [pc, #112]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 800492a:	2200      	movs	r2, #0
 800492c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004930:	2200      	movs	r2, #0
 8004932:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004934:	4b19      	ldr	r3, [pc, #100]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004936:	2200      	movs	r2, #0
 8004938:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800493a:	4b18      	ldr	r3, [pc, #96]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 800493c:	2200      	movs	r2, #0
 800493e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004940:	4816      	ldr	r0, [pc, #88]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004942:	f001 fad9 	bl	8005ef8 <HAL_DMA_Init>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800494c:	f7fe fd12 	bl	8003374 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a12      	ldr	r2, [pc, #72]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004954:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004956:	4a11      	ldr	r2, [pc, #68]	@ (800499c <HAL_UART_MspInit+0x2b8>)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800495c:	2200      	movs	r2, #0
 800495e:	2100      	movs	r1, #0
 8004960:	2026      	movs	r0, #38	@ 0x26
 8004962:	f001 fa94 	bl	8005e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004966:	2026      	movs	r0, #38	@ 0x26
 8004968:	f001 faab 	bl	8005ec2 <HAL_NVIC_EnableIRQ>
}
 800496c:	bf00      	nop
 800496e:	3780      	adds	r7, #128	@ 0x80
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	40008000 	.word	0x40008000
 8004978:	40021000 	.word	0x40021000
 800497c:	48000400 	.word	0x48000400
 8004980:	2000122c 	.word	0x2000122c
 8004984:	40020044 	.word	0x40020044
 8004988:	2000128c 	.word	0x2000128c
 800498c:	40020058 	.word	0x40020058
 8004990:	40004400 	.word	0x40004400
 8004994:	200012ec 	.word	0x200012ec
 8004998:	4002001c 	.word	0x4002001c
 800499c:	2000134c 	.word	0x2000134c
 80049a0:	40020030 	.word	0x40020030

080049a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80049a4:	480d      	ldr	r0, [pc, #52]	@ (80049dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80049a6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049a8:	f7ff f994 	bl	8003cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049ac:	480c      	ldr	r0, [pc, #48]	@ (80049e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80049ae:	490d      	ldr	r1, [pc, #52]	@ (80049e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049b0:	4a0d      	ldr	r2, [pc, #52]	@ (80049e8 <LoopForever+0xe>)
  movs r3, #0
 80049b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80049b4:	e002      	b.n	80049bc <LoopCopyDataInit>

080049b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ba:	3304      	adds	r3, #4

080049bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c0:	d3f9      	bcc.n	80049b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c2:	4a0a      	ldr	r2, [pc, #40]	@ (80049ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80049c4:	4c0a      	ldr	r4, [pc, #40]	@ (80049f0 <LoopForever+0x16>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c8:	e001      	b.n	80049ce <LoopFillZerobss>

080049ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049cc:	3204      	adds	r2, #4

080049ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d0:	d3fb      	bcc.n	80049ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049d2:	f006 fe59 	bl	800b688 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049d6:	f7fe fbb3 	bl	8003140 <main>

080049da <LoopForever>:

LoopForever:
    b LoopForever
 80049da:	e7fe      	b.n	80049da <LoopForever>
  ldr   r0, =_estack
 80049dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80049e8:	0800c86c 	.word	0x0800c86c
  ldr r2, =_sbss
 80049ec:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80049f0:	200014e8 	.word	0x200014e8

080049f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049f4:	e7fe      	b.n	80049f4 <ADC1_2_IRQHandler>

080049f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a00:	2003      	movs	r0, #3
 8004a02:	f001 fa39 	bl	8005e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a06:	2000      	movs	r0, #0
 8004a08:	f000 f80e 	bl	8004a28 <HAL_InitTick>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	71fb      	strb	r3, [r7, #7]
 8004a16:	e001      	b.n	8004a1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a18:	f7ff f86a 	bl	8003af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a1c:	79fb      	ldrb	r3, [r7, #7]

}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004a30:	2300      	movs	r3, #0
 8004a32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004a34:	4b16      	ldr	r3, [pc, #88]	@ (8004a90 <HAL_InitTick+0x68>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d022      	beq.n	8004a82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004a3c:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <HAL_InitTick+0x6c>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b13      	ldr	r3, [pc, #76]	@ (8004a90 <HAL_InitTick+0x68>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004a48:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a50:	4618      	mov	r0, r3
 8004a52:	f001 fa44 	bl	8005ede <HAL_SYSTICK_Config>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10f      	bne.n	8004a7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b0f      	cmp	r3, #15
 8004a60:	d809      	bhi.n	8004a76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a62:	2200      	movs	r2, #0
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6a:	f001 fa10 	bl	8005e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a98 <HAL_InitTick+0x70>)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	e007      	b.n	8004a86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	e004      	b.n	8004a86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	e001      	b.n	8004a86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000020 	.word	0x20000020
 8004a94:	20000018 	.word	0x20000018
 8004a98:	2000001c 	.word	0x2000001c

08004a9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa0:	4b05      	ldr	r3, [pc, #20]	@ (8004ab8 <HAL_IncTick+0x1c>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b05      	ldr	r3, [pc, #20]	@ (8004abc <HAL_IncTick+0x20>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	4a03      	ldr	r2, [pc, #12]	@ (8004ab8 <HAL_IncTick+0x1c>)
 8004aac:	6013      	str	r3, [r2, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	200013ac 	.word	0x200013ac
 8004abc:	20000020 	.word	0x20000020

08004ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <HAL_GetTick+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	200013ac 	.word	0x200013ac

08004ad8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	431a      	orrs	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	609a      	str	r2, [r3, #8]
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3360      	adds	r3, #96	@ 0x60
 8004b52:	461a      	mov	r2, r3
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b08      	ldr	r3, [pc, #32]	@ (8004b84 <LL_ADC_SetOffset+0x44>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	03fff000 	.word	0x03fff000

08004b88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3360      	adds	r3, #96	@ 0x60
 8004b96:	461a      	mov	r2, r3
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3360      	adds	r3, #96	@ 0x60
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b087      	sub	sp, #28
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	60f8      	str	r0, [r7, #12]
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3360      	adds	r3, #96	@ 0x60
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4413      	add	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004c14:	bf00      	nop
 8004c16:	371c      	adds	r7, #28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	3360      	adds	r3, #96	@ 0x60
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	431a      	orrs	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	615a      	str	r2, [r3, #20]
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3330      	adds	r3, #48	@ 0x30
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	0a1b      	lsrs	r3, r3, #8
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	4413      	add	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 031f 	and.w	r3, r3, #31
 8004ca6:	211f      	movs	r1, #31
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	43db      	mvns	r3, r3
 8004cae:	401a      	ands	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0e9b      	lsrs	r3, r3, #26
 8004cb4:	f003 011f 	and.w	r1, r3, #31
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3314      	adds	r3, #20
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	0e5b      	lsrs	r3, r3, #25
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	4413      	add	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	0d1b      	lsrs	r3, r3, #20
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2107      	movs	r1, #7
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	43db      	mvns	r3, r3
 8004d08:	401a      	ands	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	0d1b      	lsrs	r3, r3, #20
 8004d0e:	f003 031f 	and.w	r3, r3, #31
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	fa01 f303 	lsl.w	r3, r1, r3
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	43db      	mvns	r3, r3
 8004d46:	401a      	ands	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0318 	and.w	r3, r3, #24
 8004d4e:	4908      	ldr	r1, [pc, #32]	@ (8004d70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004d50:	40d9      	lsrs	r1, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	400b      	ands	r3, r1
 8004d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004d62:	bf00      	nop
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	0007ffff 	.word	0x0007ffff

08004d74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6093      	str	r3, [r2, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004dac:	d101      	bne.n	8004db2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004dd0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004dd4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004df8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfc:	d101      	bne.n	8004e02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d101      	bne.n	8004e28 <LL_ADC_IsEnabled+0x18>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e000      	b.n	8004e2a <LL_ADC_IsEnabled+0x1a>
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e36:	b480      	push	{r7}
 8004e38:	b083      	sub	sp, #12
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0304 	and.w	r3, r3, #4
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d101      	bne.n	8004e4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d101      	bne.n	8004e74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e84:	b590      	push	{r4, r7, lr}
 8004e86:	b089      	sub	sp, #36	@ 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e1a9      	b.n	80051f2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d109      	bne.n	8004ec0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fd fc77 	bl	80027a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff67 	bl	8004d98 <LL_ADC_IsDeepPowerDownEnabled>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d004      	beq.n	8004eda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff ff4d 	bl	8004d74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff ff82 	bl	8004de8 <LL_ADC_IsInternalRegulatorEnabled>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d115      	bne.n	8004f16 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ff66 	bl	8004dc0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8005168 <HAL_ADC_Init+0x2e4>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	099b      	lsrs	r3, r3, #6
 8004efa:	4a9c      	ldr	r2, [pc, #624]	@ (800516c <HAL_ADC_Init+0x2e8>)
 8004efc:	fba2 2303 	umull	r2, r3, r2, r3
 8004f00:	099b      	lsrs	r3, r3, #6
 8004f02:	3301      	adds	r3, #1
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f08:	e002      	b.n	8004f10 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f9      	bne.n	8004f0a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7ff ff64 	bl	8004de8 <LL_ADC_IsInternalRegulatorEnabled>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10d      	bne.n	8004f42 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2a:	f043 0210 	orr.w	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f36:	f043 0201 	orr.w	r2, r3, #1
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff75 	bl	8004e36 <LL_ADC_REG_IsConversionOngoing>
 8004f4c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 8142 	bne.w	80051e0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f040 813e 	bne.w	80051e0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f68:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004f6c:	f043 0202 	orr.w	r2, r3, #2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f7ff ff49 	bl	8004e10 <LL_ADC_IsEnabled>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d141      	bne.n	8005008 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f8c:	d004      	beq.n	8004f98 <HAL_ADC_Init+0x114>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a77      	ldr	r2, [pc, #476]	@ (8005170 <HAL_ADC_Init+0x2ec>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10f      	bne.n	8004fb8 <HAL_ADC_Init+0x134>
 8004f98:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f9c:	f7ff ff38 	bl	8004e10 <LL_ADC_IsEnabled>
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	4873      	ldr	r0, [pc, #460]	@ (8005170 <HAL_ADC_Init+0x2ec>)
 8004fa4:	f7ff ff34 	bl	8004e10 <LL_ADC_IsEnabled>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4323      	orrs	r3, r4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bf0c      	ite	eq
 8004fb0:	2301      	moveq	r3, #1
 8004fb2:	2300      	movne	r3, #0
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	e012      	b.n	8004fde <HAL_ADC_Init+0x15a>
 8004fb8:	486e      	ldr	r0, [pc, #440]	@ (8005174 <HAL_ADC_Init+0x2f0>)
 8004fba:	f7ff ff29 	bl	8004e10 <LL_ADC_IsEnabled>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	486d      	ldr	r0, [pc, #436]	@ (8005178 <HAL_ADC_Init+0x2f4>)
 8004fc2:	f7ff ff25 	bl	8004e10 <LL_ADC_IsEnabled>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	431c      	orrs	r4, r3
 8004fca:	486c      	ldr	r0, [pc, #432]	@ (800517c <HAL_ADC_Init+0x2f8>)
 8004fcc:	f7ff ff20 	bl	8004e10 <LL_ADC_IsEnabled>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	4323      	orrs	r3, r4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	bf0c      	ite	eq
 8004fd8:	2301      	moveq	r3, #1
 8004fda:	2300      	movne	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d012      	beq.n	8005008 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fea:	d004      	beq.n	8004ff6 <HAL_ADC_Init+0x172>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a5f      	ldr	r2, [pc, #380]	@ (8005170 <HAL_ADC_Init+0x2ec>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_Init+0x176>
 8004ff6:	4a62      	ldr	r2, [pc, #392]	@ (8005180 <HAL_ADC_Init+0x2fc>)
 8004ff8:	e000      	b.n	8004ffc <HAL_ADC_Init+0x178>
 8004ffa:	4a62      	ldr	r2, [pc, #392]	@ (8005184 <HAL_ADC_Init+0x300>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7ff fd68 	bl	8004ad8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	7f5b      	ldrb	r3, [r3, #29]
 800500c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005012:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005018:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800501e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005026:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005028:	4313      	orrs	r3, r2
 800502a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005032:	2b01      	cmp	r3, #1
 8005034:	d106      	bne.n	8005044 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503a:	3b01      	subs	r3, #1
 800503c:	045b      	lsls	r3, r3, #17
 800503e:	69ba      	ldr	r2, [r7, #24]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d009      	beq.n	8005060 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005050:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005058:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4313      	orrs	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	4b48      	ldr	r3, [pc, #288]	@ (8005188 <HAL_ADC_Init+0x304>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	430b      	orrs	r3, r1
 8005072:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fee4 	bl	8004e5c <LL_ADC_INJ_IsConversionOngoing>
 8005094:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d17f      	bne.n	800519c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d17c      	bne.n	800519c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80050a6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050ae:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050be:	f023 0302 	bic.w	r3, r3, #2
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6812      	ldr	r2, [r2, #0]
 80050c6:	69b9      	ldr	r1, [r7, #24]
 80050c8:	430b      	orrs	r3, r1
 80050ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d017      	beq.n	8005104 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80050e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80050ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80050f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6911      	ldr	r1, [r2, #16]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	430b      	orrs	r3, r1
 80050fe:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005102:	e013      	b.n	800512c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005112:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005124:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005128:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005132:	2b01      	cmp	r3, #1
 8005134:	d12a      	bne.n	800518c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005152:	4311      	orrs	r1, r2
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005158:	430a      	orrs	r2, r1
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	611a      	str	r2, [r3, #16]
 8005166:	e019      	b.n	800519c <HAL_ADC_Init+0x318>
 8005168:	20000018 	.word	0x20000018
 800516c:	053e2d63 	.word	0x053e2d63
 8005170:	50000100 	.word	0x50000100
 8005174:	50000400 	.word	0x50000400
 8005178:	50000500 	.word	0x50000500
 800517c:	50000600 	.word	0x50000600
 8005180:	50000300 	.word	0x50000300
 8005184:	50000700 	.word	0x50000700
 8005188:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	695b      	ldr	r3, [r3, #20]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d10c      	bne.n	80051be <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051aa:	f023 010f 	bic.w	r1, r3, #15
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	1e5a      	subs	r2, r3, #1
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80051bc:	e007      	b.n	80051ce <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 020f 	bic.w	r2, r2, #15
 80051cc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	f043 0201 	orr.w	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051de:	e007      	b.n	80051f0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e4:	f043 0210 	orr.w	r2, r3, #16
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3724      	adds	r7, #36	@ 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd90      	pop	{r4, r7, pc}
 80051fa:	bf00      	nop

080051fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b0b6      	sub	sp, #216	@ 0xd8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005216:	2b01      	cmp	r3, #1
 8005218:	d102      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x24>
 800521a:	2302      	movs	r3, #2
 800521c:	f000 bc13 	b.w	8005a46 <HAL_ADC_ConfigChannel+0x84a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4618      	mov	r0, r3
 800522e:	f7ff fe02 	bl	8004e36 <LL_ADC_REG_IsConversionOngoing>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 83f3 	bne.w	8005a20 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6818      	ldr	r0, [r3, #0]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	6859      	ldr	r1, [r3, #4]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	f7ff fd18 	bl	8004c7c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff fdf0 	bl	8004e36 <LL_ADC_REG_IsConversionOngoing>
 8005256:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff fdfc 	bl	8004e5c <LL_ADC_INJ_IsConversionOngoing>
 8005264:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005268:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 81d9 	bne.w	8005624 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005272:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005276:	2b00      	cmp	r3, #0
 8005278:	f040 81d4 	bne.w	8005624 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005284:	d10f      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2200      	movs	r2, #0
 8005290:	4619      	mov	r1, r3
 8005292:	f7ff fd1f 	bl	8004cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800529e:	4618      	mov	r0, r3
 80052a0:	f7ff fcd9 	bl	8004c56 <LL_ADC_SetSamplingTimeCommonConfig>
 80052a4:	e00e      	b.n	80052c4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6818      	ldr	r0, [r3, #0]
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	6819      	ldr	r1, [r3, #0]
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	461a      	mov	r2, r3
 80052b4:	f7ff fd0e 	bl	8004cd4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2100      	movs	r1, #0
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff fcc9 	bl	8004c56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	fa02 f303 	lsl.w	r3, r2, r3
 80052da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d022      	beq.n	800532c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80052f6:	f7ff fc23 	bl	8004b40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6919      	ldr	r1, [r3, #16]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	699b      	ldr	r3, [r3, #24]
 8005306:	461a      	mov	r2, r3
 8005308:	f7ff fc6f 	bl	8004bea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005318:	2b01      	cmp	r3, #1
 800531a:	d102      	bne.n	8005322 <HAL_ADC_ConfigChannel+0x126>
 800531c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005320:	e000      	b.n	8005324 <HAL_ADC_ConfigChannel+0x128>
 8005322:	2300      	movs	r3, #0
 8005324:	461a      	mov	r2, r3
 8005326:	f7ff fc7b 	bl	8004c20 <LL_ADC_SetOffsetSaturation>
 800532a:	e17b      	b.n	8005624 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2100      	movs	r1, #0
 8005332:	4618      	mov	r0, r3
 8005334:	f7ff fc28 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 8005338:	4603      	mov	r3, r0
 800533a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10a      	bne.n	8005358 <HAL_ADC_ConfigChannel+0x15c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f7ff fc1d 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 800534e:	4603      	mov	r3, r0
 8005350:	0e9b      	lsrs	r3, r3, #26
 8005352:	f003 021f 	and.w	r2, r3, #31
 8005356:	e01e      	b.n	8005396 <HAL_ADC_ConfigChannel+0x19a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2100      	movs	r1, #0
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fc12 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 8005364:	4603      	mov	r3, r0
 8005366:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800537a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800537e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005386:	2320      	movs	r3, #32
 8005388:	e004      	b.n	8005394 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800538a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800538e:	fab3 f383 	clz	r3, r3
 8005392:	b2db      	uxtb	r3, r3
 8005394:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d105      	bne.n	80053ae <HAL_ADC_ConfigChannel+0x1b2>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	0e9b      	lsrs	r3, r3, #26
 80053a8:	f003 031f 	and.w	r3, r3, #31
 80053ac:	e018      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x1e4>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053ba:	fa93 f3a3 	rbit	r3, r3
 80053be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80053c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80053ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80053d2:	2320      	movs	r3, #32
 80053d4:	e004      	b.n	80053e0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80053d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053da:	fab3 f383 	clz	r3, r3
 80053de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d106      	bne.n	80053f2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7ff fbe1 	bl	8004bb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2101      	movs	r1, #1
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff fbc5 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 80053fe:	4603      	mov	r3, r0
 8005400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10a      	bne.n	800541e <HAL_ADC_ConfigChannel+0x222>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2101      	movs	r1, #1
 800540e:	4618      	mov	r0, r3
 8005410:	f7ff fbba 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 8005414:	4603      	mov	r3, r0
 8005416:	0e9b      	lsrs	r3, r3, #26
 8005418:	f003 021f 	and.w	r2, r3, #31
 800541c:	e01e      	b.n	800545c <HAL_ADC_ConfigChannel+0x260>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2101      	movs	r1, #1
 8005424:	4618      	mov	r0, r3
 8005426:	f7ff fbaf 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 800542a:	4603      	mov	r3, r0
 800542c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005430:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800543c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800544c:	2320      	movs	r3, #32
 800544e:	e004      	b.n	800545a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005454:	fab3 f383 	clz	r3, r3
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005464:	2b00      	cmp	r3, #0
 8005466:	d105      	bne.n	8005474 <HAL_ADC_ConfigChannel+0x278>
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	0e9b      	lsrs	r3, r3, #26
 800546e:	f003 031f 	and.w	r3, r3, #31
 8005472:	e018      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x2aa>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005480:	fa93 f3a3 	rbit	r3, r3
 8005484:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005488:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800548c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005490:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005498:	2320      	movs	r3, #32
 800549a:	e004      	b.n	80054a6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800549c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054a0:	fab3 f383 	clz	r3, r3
 80054a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d106      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fb7e 	bl	8004bb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2102      	movs	r1, #2
 80054be:	4618      	mov	r0, r3
 80054c0:	f7ff fb62 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x2e8>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2102      	movs	r1, #2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff fb57 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 80054da:	4603      	mov	r3, r0
 80054dc:	0e9b      	lsrs	r3, r3, #26
 80054de:	f003 021f 	and.w	r2, r3, #31
 80054e2:	e01e      	b.n	8005522 <HAL_ADC_ConfigChannel+0x326>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2102      	movs	r1, #2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fb4c 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 80054f0:	4603      	mov	r3, r0
 80054f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005502:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005506:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800550a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005512:	2320      	movs	r3, #32
 8005514:	e004      	b.n	8005520 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800551a:	fab3 f383 	clz	r3, r3
 800551e:	b2db      	uxtb	r3, r3
 8005520:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552a:	2b00      	cmp	r3, #0
 800552c:	d105      	bne.n	800553a <HAL_ADC_ConfigChannel+0x33e>
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	0e9b      	lsrs	r3, r3, #26
 8005534:	f003 031f 	and.w	r3, r3, #31
 8005538:	e016      	b.n	8005568 <HAL_ADC_ConfigChannel+0x36c>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005546:	fa93 f3a3 	rbit	r3, r3
 800554a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800554c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800554e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005552:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800555a:	2320      	movs	r3, #32
 800555c:	e004      	b.n	8005568 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800555e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005562:	fab3 f383 	clz	r3, r3
 8005566:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005568:	429a      	cmp	r2, r3
 800556a:	d106      	bne.n	800557a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2200      	movs	r2, #0
 8005572:	2102      	movs	r1, #2
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fb1d 	bl	8004bb4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2103      	movs	r1, #3
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fb01 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 8005586:	4603      	mov	r3, r0
 8005588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10a      	bne.n	80055a6 <HAL_ADC_ConfigChannel+0x3aa>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2103      	movs	r1, #3
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff faf6 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 800559c:	4603      	mov	r3, r0
 800559e:	0e9b      	lsrs	r3, r3, #26
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	e017      	b.n	80055d6 <HAL_ADC_ConfigChannel+0x3da>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2103      	movs	r1, #3
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7ff faeb 	bl	8004b88 <LL_ADC_GetOffsetChannel>
 80055b2:	4603      	mov	r3, r0
 80055b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055c0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d105      	bne.n	80055ee <HAL_ADC_ConfigChannel+0x3f2>
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	0e9b      	lsrs	r3, r3, #26
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	e011      	b.n	8005612 <HAL_ADC_ConfigChannel+0x416>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80055f6:	fa93 f3a3 	rbit	r3, r3
 80055fa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80055fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005606:	2320      	movs	r3, #32
 8005608:	e003      	b.n	8005612 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800560a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800560c:	fab3 f383 	clz	r3, r3
 8005610:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005612:	429a      	cmp	r2, r3
 8005614:	d106      	bne.n	8005624 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	2103      	movs	r1, #3
 800561e:	4618      	mov	r0, r3
 8005620:	f7ff fac8 	bl	8004bb4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fbf1 	bl	8004e10 <LL_ADC_IsEnabled>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 813d 	bne.w	80058b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6819      	ldr	r1, [r3, #0]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	461a      	mov	r2, r3
 8005644:	f7ff fb72 	bl	8004d2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	4aa2      	ldr	r2, [pc, #648]	@ (80058d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	f040 812e 	bne.w	80058b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10b      	bne.n	800567c <HAL_ADC_ConfigChannel+0x480>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	0e9b      	lsrs	r3, r3, #26
 800566a:	3301      	adds	r3, #1
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2b09      	cmp	r3, #9
 8005672:	bf94      	ite	ls
 8005674:	2301      	movls	r3, #1
 8005676:	2300      	movhi	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e019      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x4b4>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005682:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005684:	fa93 f3a3 	rbit	r3, r3
 8005688:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800568a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800568c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800568e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005694:	2320      	movs	r3, #32
 8005696:	e003      	b.n	80056a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005698:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800569a:	fab3 f383 	clz	r3, r3
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	3301      	adds	r3, #1
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	2b09      	cmp	r3, #9
 80056a8:	bf94      	ite	ls
 80056aa:	2301      	movls	r3, #1
 80056ac:	2300      	movhi	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d079      	beq.n	80057a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x4d4>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0e9b      	lsrs	r3, r3, #26
 80056c6:	3301      	adds	r3, #1
 80056c8:	069b      	lsls	r3, r3, #26
 80056ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056ce:	e015      	b.n	80056fc <HAL_ADC_ConfigChannel+0x500>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80056de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80056e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80056e8:	2320      	movs	r3, #32
 80056ea:	e003      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80056ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	069b      	lsls	r3, r3, #26
 80056f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_ADC_ConfigChannel+0x520>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	0e9b      	lsrs	r3, r3, #26
 800570e:	3301      	adds	r3, #1
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	e017      	b.n	800574c <HAL_ADC_ConfigChannel+0x550>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800572a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800572e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e003      	b.n	8005740 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	3301      	adds	r3, #1
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2101      	movs	r1, #1
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	ea42 0103 	orr.w	r1, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <HAL_ADC_ConfigChannel+0x576>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	3301      	adds	r3, #1
 8005764:	f003 021f 	and.w	r2, r3, #31
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	051b      	lsls	r3, r3, #20
 8005770:	e018      	b.n	80057a4 <HAL_ADC_ConfigChannel+0x5a8>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800578a:	2320      	movs	r3, #32
 800578c:	e003      	b.n	8005796 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800578e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005790:	fab3 f383 	clz	r3, r3
 8005794:	b2db      	uxtb	r3, r3
 8005796:	3301      	adds	r3, #1
 8005798:	f003 021f 	and.w	r2, r3, #31
 800579c:	4613      	mov	r3, r2
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	4413      	add	r3, r2
 80057a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057a4:	430b      	orrs	r3, r1
 80057a6:	e07e      	b.n	80058a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d107      	bne.n	80057c4 <HAL_ADC_ConfigChannel+0x5c8>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	0e9b      	lsrs	r3, r3, #26
 80057ba:	3301      	adds	r3, #1
 80057bc:	069b      	lsls	r3, r3, #26
 80057be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057c2:	e015      	b.n	80057f0 <HAL_ADC_ConfigChannel+0x5f4>
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057cc:	fa93 f3a3 	rbit	r3, r3
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80057d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80057dc:	2320      	movs	r3, #32
 80057de:	e003      	b.n	80057e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	fab3 f383 	clz	r3, r3
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	3301      	adds	r3, #1
 80057ea:	069b      	lsls	r3, r3, #26
 80057ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x614>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	0e9b      	lsrs	r3, r3, #26
 8005802:	3301      	adds	r3, #1
 8005804:	f003 031f 	and.w	r3, r3, #31
 8005808:	2101      	movs	r1, #1
 800580a:	fa01 f303 	lsl.w	r3, r1, r3
 800580e:	e017      	b.n	8005840 <HAL_ADC_ConfigChannel+0x644>
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	6a3b      	ldr	r3, [r7, #32]
 8005818:	fa93 f3a3 	rbit	r3, r3
 800581c:	61fb      	str	r3, [r7, #28]
  return result;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005828:	2320      	movs	r3, #32
 800582a:	e003      	b.n	8005834 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800582c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582e:	fab3 f383 	clz	r3, r3
 8005832:	b2db      	uxtb	r3, r3
 8005834:	3301      	adds	r3, #1
 8005836:	f003 031f 	and.w	r3, r3, #31
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	ea42 0103 	orr.w	r1, r2, r3
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10d      	bne.n	800586c <HAL_ADC_ConfigChannel+0x670>
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	0e9b      	lsrs	r3, r3, #26
 8005856:	3301      	adds	r3, #1
 8005858:	f003 021f 	and.w	r2, r3, #31
 800585c:	4613      	mov	r3, r2
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	4413      	add	r3, r2
 8005862:	3b1e      	subs	r3, #30
 8005864:	051b      	lsls	r3, r3, #20
 8005866:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800586a:	e01b      	b.n	80058a4 <HAL_ADC_ConfigChannel+0x6a8>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	fa93 f3a3 	rbit	r3, r3
 8005878:	613b      	str	r3, [r7, #16]
  return result;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005884:	2320      	movs	r3, #32
 8005886:	e003      	b.n	8005890 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	fab3 f383 	clz	r3, r3
 800588e:	b2db      	uxtb	r3, r3
 8005890:	3301      	adds	r3, #1
 8005892:	f003 021f 	and.w	r2, r3, #31
 8005896:	4613      	mov	r3, r2
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	4413      	add	r3, r2
 800589c:	3b1e      	subs	r3, #30
 800589e:	051b      	lsls	r3, r3, #20
 80058a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058a4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058aa:	4619      	mov	r1, r3
 80058ac:	f7ff fa12 	bl	8004cd4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b09      	ldr	r3, [pc, #36]	@ (80058dc <HAL_ADC_ConfigChannel+0x6e0>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80be 	beq.w	8005a3a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058c6:	d004      	beq.n	80058d2 <HAL_ADC_ConfigChannel+0x6d6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a04      	ldr	r2, [pc, #16]	@ (80058e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10a      	bne.n	80058e8 <HAL_ADC_ConfigChannel+0x6ec>
 80058d2:	4b04      	ldr	r3, [pc, #16]	@ (80058e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80058d4:	e009      	b.n	80058ea <HAL_ADC_ConfigChannel+0x6ee>
 80058d6:	bf00      	nop
 80058d8:	407f0000 	.word	0x407f0000
 80058dc:	80080000 	.word	0x80080000
 80058e0:	50000100 	.word	0x50000100
 80058e4:	50000300 	.word	0x50000300
 80058e8:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_ADC_ConfigChannel+0x854>)
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff f91a 	bl	8004b24 <LL_ADC_GetCommonPathInternalCh>
 80058f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a56      	ldr	r2, [pc, #344]	@ (8005a54 <HAL_ADC_ConfigChannel+0x858>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_ADC_ConfigChannel+0x70c>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a55      	ldr	r2, [pc, #340]	@ (8005a58 <HAL_ADC_ConfigChannel+0x85c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d13a      	bne.n	800597e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800590c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d134      	bne.n	800597e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800591c:	d005      	beq.n	800592a <HAL_ADC_ConfigChannel+0x72e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a4e      	ldr	r2, [pc, #312]	@ (8005a5c <HAL_ADC_ConfigChannel+0x860>)
 8005924:	4293      	cmp	r3, r2
 8005926:	f040 8085 	bne.w	8005a34 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005932:	d004      	beq.n	800593e <HAL_ADC_ConfigChannel+0x742>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a49      	ldr	r2, [pc, #292]	@ (8005a60 <HAL_ADC_ConfigChannel+0x864>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d101      	bne.n	8005942 <HAL_ADC_ConfigChannel+0x746>
 800593e:	4a49      	ldr	r2, [pc, #292]	@ (8005a64 <HAL_ADC_ConfigChannel+0x868>)
 8005940:	e000      	b.n	8005944 <HAL_ADC_ConfigChannel+0x748>
 8005942:	4a43      	ldr	r2, [pc, #268]	@ (8005a50 <HAL_ADC_ConfigChannel+0x854>)
 8005944:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005948:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f7ff f8d5 	bl	8004afe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005954:	4b44      	ldr	r3, [pc, #272]	@ (8005a68 <HAL_ADC_ConfigChannel+0x86c>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	099b      	lsrs	r3, r3, #6
 800595a:	4a44      	ldr	r2, [pc, #272]	@ (8005a6c <HAL_ADC_ConfigChannel+0x870>)
 800595c:	fba2 2303 	umull	r2, r3, r2, r3
 8005960:	099b      	lsrs	r3, r3, #6
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	4613      	mov	r3, r2
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800596e:	e002      	b.n	8005976 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b01      	subs	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1f9      	bne.n	8005970 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800597c:	e05a      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3b      	ldr	r2, [pc, #236]	@ (8005a70 <HAL_ADC_ConfigChannel+0x874>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d125      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800598c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11f      	bne.n	80059d4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a31      	ldr	r2, [pc, #196]	@ (8005a60 <HAL_ADC_ConfigChannel+0x864>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d104      	bne.n	80059a8 <HAL_ADC_ConfigChannel+0x7ac>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a34      	ldr	r2, [pc, #208]	@ (8005a74 <HAL_ADC_ConfigChannel+0x878>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d047      	beq.n	8005a38 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059b0:	d004      	beq.n	80059bc <HAL_ADC_ConfigChannel+0x7c0>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005a60 <HAL_ADC_ConfigChannel+0x864>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d101      	bne.n	80059c0 <HAL_ADC_ConfigChannel+0x7c4>
 80059bc:	4a29      	ldr	r2, [pc, #164]	@ (8005a64 <HAL_ADC_ConfigChannel+0x868>)
 80059be:	e000      	b.n	80059c2 <HAL_ADC_ConfigChannel+0x7c6>
 80059c0:	4a23      	ldr	r2, [pc, #140]	@ (8005a50 <HAL_ADC_ConfigChannel+0x854>)
 80059c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059ca:	4619      	mov	r1, r3
 80059cc:	4610      	mov	r0, r2
 80059ce:	f7ff f896 	bl	8004afe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059d2:	e031      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a27      	ldr	r2, [pc, #156]	@ (8005a78 <HAL_ADC_ConfigChannel+0x87c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d12d      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80059de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d127      	bne.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005a60 <HAL_ADC_ConfigChannel+0x864>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d022      	beq.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059fc:	d004      	beq.n	8005a08 <HAL_ADC_ConfigChannel+0x80c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a17      	ldr	r2, [pc, #92]	@ (8005a60 <HAL_ADC_ConfigChannel+0x864>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d101      	bne.n	8005a0c <HAL_ADC_ConfigChannel+0x810>
 8005a08:	4a16      	ldr	r2, [pc, #88]	@ (8005a64 <HAL_ADC_ConfigChannel+0x868>)
 8005a0a:	e000      	b.n	8005a0e <HAL_ADC_ConfigChannel+0x812>
 8005a0c:	4a10      	ldr	r2, [pc, #64]	@ (8005a50 <HAL_ADC_ConfigChannel+0x854>)
 8005a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f7ff f870 	bl	8004afe <LL_ADC_SetCommonPathInternalCh>
 8005a1e:	e00c      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a32:	e002      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a34:	bf00      	nop
 8005a36:	e000      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a38:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a42:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	37d8      	adds	r7, #216	@ 0xd8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	50000700 	.word	0x50000700
 8005a54:	c3210000 	.word	0xc3210000
 8005a58:	90c00010 	.word	0x90c00010
 8005a5c:	50000600 	.word	0x50000600
 8005a60:	50000100 	.word	0x50000100
 8005a64:	50000300 	.word	0x50000300
 8005a68:	20000018 	.word	0x20000018
 8005a6c:	053e2d63 	.word	0x053e2d63
 8005a70:	c7520000 	.word	0xc7520000
 8005a74:	50000500 	.word	0x50000500
 8005a78:	cb840000 	.word	0xcb840000

08005a7c <LL_ADC_IsEnabled>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <LL_ADC_IsEnabled+0x18>
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <LL_ADC_IsEnabled+0x1a>
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <LL_ADC_REG_IsConversionOngoing>:
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0304 	and.w	r3, r3, #4
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d101      	bne.n	8005aba <LL_ADC_REG_IsConversionOngoing+0x18>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e000      	b.n	8005abc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005ac8:	b590      	push	{r4, r7, lr}
 8005aca:	b0a1      	sub	sp, #132	@ 0x84
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e0e7      	b.n	8005cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005aee:	2300      	movs	r3, #0
 8005af0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005af2:	2300      	movs	r3, #0
 8005af4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005afe:	d102      	bne.n	8005b06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b00:	4b6f      	ldr	r3, [pc, #444]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	e009      	b.n	8005b1a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6e      	ldr	r2, [pc, #440]	@ (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d102      	bne.n	8005b16 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005b10:	4b6d      	ldr	r3, [pc, #436]	@ (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	e001      	b.n	8005b1a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005b16:	2300      	movs	r3, #0
 8005b18:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b24:	f043 0220 	orr.w	r2, r3, #32
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e0be      	b.n	8005cb6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7ff ffb1 	bl	8005aa2 <LL_ADC_REG_IsConversionOngoing>
 8005b40:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff ffab 	bl	8005aa2 <LL_ADC_REG_IsConversionOngoing>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 80a0 	bne.w	8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005b54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f040 809c 	bne.w	8005c94 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b64:	d004      	beq.n	8005b70 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a55      	ldr	r2, [pc, #340]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d101      	bne.n	8005b74 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005b70:	4b56      	ldr	r3, [pc, #344]	@ (8005ccc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005b72:	e000      	b.n	8005b76 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005b74:	4b56      	ldr	r3, [pc, #344]	@ (8005cd0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005b76:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d04b      	beq.n	8005c18 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005b80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005b92:	035b      	lsls	r3, r3, #13
 8005b94:	430b      	orrs	r3, r1
 8005b96:	431a      	orrs	r2, r3
 8005b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b9a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ba4:	d004      	beq.n	8005bb0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a45      	ldr	r2, [pc, #276]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d10f      	bne.n	8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005bb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005bb4:	f7ff ff62 	bl	8005a7c <LL_ADC_IsEnabled>
 8005bb8:	4604      	mov	r4, r0
 8005bba:	4841      	ldr	r0, [pc, #260]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005bbc:	f7ff ff5e 	bl	8005a7c <LL_ADC_IsEnabled>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	4323      	orrs	r3, r4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bf0c      	ite	eq
 8005bc8:	2301      	moveq	r3, #1
 8005bca:	2300      	movne	r3, #0
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	e012      	b.n	8005bf6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005bd0:	483c      	ldr	r0, [pc, #240]	@ (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005bd2:	f7ff ff53 	bl	8005a7c <LL_ADC_IsEnabled>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	483b      	ldr	r0, [pc, #236]	@ (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005bda:	f7ff ff4f 	bl	8005a7c <LL_ADC_IsEnabled>
 8005bde:	4603      	mov	r3, r0
 8005be0:	431c      	orrs	r4, r3
 8005be2:	483c      	ldr	r0, [pc, #240]	@ (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005be4:	f7ff ff4a 	bl	8005a7c <LL_ADC_IsEnabled>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4323      	orrs	r3, r4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	bf0c      	ite	eq
 8005bf0:	2301      	moveq	r3, #1
 8005bf2:	2300      	movne	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d056      	beq.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c02:	f023 030f 	bic.w	r3, r3, #15
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	6811      	ldr	r1, [r2, #0]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	6892      	ldr	r2, [r2, #8]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	431a      	orrs	r2, r3
 8005c12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c14:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c16:	e047      	b.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c22:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c2c:	d004      	beq.n	8005c38 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a23      	ldr	r2, [pc, #140]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d10f      	bne.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005c38:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005c3c:	f7ff ff1e 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c40:	4604      	mov	r4, r0
 8005c42:	481f      	ldr	r0, [pc, #124]	@ (8005cc0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005c44:	f7ff ff1a 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	4323      	orrs	r3, r4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bf0c      	ite	eq
 8005c50:	2301      	moveq	r3, #1
 8005c52:	2300      	movne	r3, #0
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	e012      	b.n	8005c7e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005c58:	481a      	ldr	r0, [pc, #104]	@ (8005cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005c5a:	f7ff ff0f 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4819      	ldr	r0, [pc, #100]	@ (8005cc8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005c62:	f7ff ff0b 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c66:	4603      	mov	r3, r0
 8005c68:	431c      	orrs	r4, r3
 8005c6a:	481a      	ldr	r0, [pc, #104]	@ (8005cd4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005c6c:	f7ff ff06 	bl	8005a7c <LL_ADC_IsEnabled>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4323      	orrs	r3, r4
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf0c      	ite	eq
 8005c78:	2301      	moveq	r3, #1
 8005c7a:	2300      	movne	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d012      	beq.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005c8a:	f023 030f 	bic.w	r3, r3, #15
 8005c8e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005c90:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005c92:	e009      	b.n	8005ca8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c98:	f043 0220 	orr.w	r2, r3, #32
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005ca6:	e000      	b.n	8005caa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ca8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005cb2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3784      	adds	r7, #132	@ 0x84
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd90      	pop	{r4, r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	50000100 	.word	0x50000100
 8005cc4:	50000400 	.word	0x50000400
 8005cc8:	50000500 	.word	0x50000500
 8005ccc:	50000300 	.word	0x50000300
 8005cd0:	50000700 	.word	0x50000700
 8005cd4:	50000600 	.word	0x50000600

08005cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cee:	68ba      	ldr	r2, [r7, #8]
 8005cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d0a:	4a04      	ldr	r2, [pc, #16]	@ (8005d1c <__NVIC_SetPriorityGrouping+0x44>)
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	60d3      	str	r3, [r2, #12]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	e000ed00 	.word	0xe000ed00

08005d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d24:	4b04      	ldr	r3, [pc, #16]	@ (8005d38 <__NVIC_GetPriorityGrouping+0x18>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	0a1b      	lsrs	r3, r3, #8
 8005d2a:	f003 0307 	and.w	r3, r3, #7
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000ed00 	.word	0xe000ed00

08005d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	4603      	mov	r3, r0
 8005d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	db0b      	blt.n	8005d66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d4e:	79fb      	ldrb	r3, [r7, #7]
 8005d50:	f003 021f 	and.w	r2, r3, #31
 8005d54:	4907      	ldr	r1, [pc, #28]	@ (8005d74 <__NVIC_EnableIRQ+0x38>)
 8005d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	2001      	movs	r0, #1
 8005d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8005d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	e000e100 	.word	0xe000e100

08005d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	6039      	str	r1, [r7, #0]
 8005d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	db0a      	blt.n	8005da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	490c      	ldr	r1, [pc, #48]	@ (8005dc4 <__NVIC_SetPriority+0x4c>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	0112      	lsls	r2, r2, #4
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005da0:	e00a      	b.n	8005db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	4908      	ldr	r1, [pc, #32]	@ (8005dc8 <__NVIC_SetPriority+0x50>)
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	3b04      	subs	r3, #4
 8005db0:	0112      	lsls	r2, r2, #4
 8005db2:	b2d2      	uxtb	r2, r2
 8005db4:	440b      	add	r3, r1
 8005db6:	761a      	strb	r2, [r3, #24]
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000e100 	.word	0xe000e100
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b089      	sub	sp, #36	@ 0x24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	f1c3 0307 	rsb	r3, r3, #7
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	bf28      	it	cs
 8005dea:	2304      	movcs	r3, #4
 8005dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3304      	adds	r3, #4
 8005df2:	2b06      	cmp	r3, #6
 8005df4:	d902      	bls.n	8005dfc <NVIC_EncodePriority+0x30>
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3b03      	subs	r3, #3
 8005dfa:	e000      	b.n	8005dfe <NVIC_EncodePriority+0x32>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43da      	mvns	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	401a      	ands	r2, r3
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e14:	f04f 31ff 	mov.w	r1, #4294967295
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1e:	43d9      	mvns	r1, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e24:	4313      	orrs	r3, r2
         );
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3724      	adds	r7, #36	@ 0x24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
	...

08005e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e44:	d301      	bcc.n	8005e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e46:	2301      	movs	r3, #1
 8005e48:	e00f      	b.n	8005e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e74 <SysTick_Config+0x40>)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e52:	210f      	movs	r1, #15
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	f7ff ff8e 	bl	8005d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <SysTick_Config+0x40>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e62:	4b04      	ldr	r3, [pc, #16]	@ (8005e74 <SysTick_Config+0x40>)
 8005e64:	2207      	movs	r2, #7
 8005e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	e000e010 	.word	0xe000e010

08005e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff ff29 	bl	8005cd8 <__NVIC_SetPriorityGrouping>
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	4603      	mov	r3, r0
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
 8005e9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e9c:	f7ff ff40 	bl	8005d20 <__NVIC_GetPriorityGrouping>
 8005ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f7ff ff90 	bl	8005dcc <NVIC_EncodePriority>
 8005eac:	4602      	mov	r2, r0
 8005eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7ff ff5f 	bl	8005d78 <__NVIC_SetPriority>
}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b082      	sub	sp, #8
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff ff33 	bl	8005d3c <__NVIC_EnableIRQ>
}
 8005ed6:	bf00      	nop
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ffa4 	bl	8005e34 <SysTick_Config>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
	...

08005ef8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e08d      	b.n	8006026 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4b47      	ldr	r3, [pc, #284]	@ (8006030 <HAL_DMA_Init+0x138>)
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d80f      	bhi.n	8005f36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4b45      	ldr	r3, [pc, #276]	@ (8006034 <HAL_DMA_Init+0x13c>)
 8005f1e:	4413      	add	r3, r2
 8005f20:	4a45      	ldr	r2, [pc, #276]	@ (8006038 <HAL_DMA_Init+0x140>)
 8005f22:	fba2 2303 	umull	r2, r3, r2, r3
 8005f26:	091b      	lsrs	r3, r3, #4
 8005f28:	009a      	lsls	r2, r3, #2
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a42      	ldr	r2, [pc, #264]	@ (800603c <HAL_DMA_Init+0x144>)
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f34:	e00e      	b.n	8005f54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4b40      	ldr	r3, [pc, #256]	@ (8006040 <HAL_DMA_Init+0x148>)
 8005f3e:	4413      	add	r3, r2
 8005f40:	4a3d      	ldr	r2, [pc, #244]	@ (8006038 <HAL_DMA_Init+0x140>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	009a      	lsls	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a3c      	ldr	r2, [pc, #240]	@ (8006044 <HAL_DMA_Init+0x14c>)
 8005f52:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005f6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f9be 	bl	8006328 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fb4:	d102      	bne.n	8005fbc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fd0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d010      	beq.n	8005ffc <HAL_DMA_Init+0x104>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d80c      	bhi.n	8005ffc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9de 	bl	80063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005ff8:	605a      	str	r2, [r3, #4]
 8005ffa:	e008      	b.n	800600e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	40020407 	.word	0x40020407
 8006034:	bffdfff8 	.word	0xbffdfff8
 8006038:	cccccccd 	.word	0xcccccccd
 800603c:	40020000 	.word	0x40020000
 8006040:	bffdfbf8 	.word	0xbffdfbf8
 8006044:	40020400 	.word	0x40020400

08006048 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006050:	2300      	movs	r3, #0
 8006052:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d005      	beq.n	800606c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2204      	movs	r2, #4
 8006064:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
 800606a:	e037      	b.n	80060dc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 020e 	bic.w	r2, r2, #14
 800607a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006086:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800608a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0201 	bic.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a0:	f003 021f 	and.w	r2, r3, #31
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f202 	lsl.w	r2, r1, r2
 80060ae:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80060b8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00c      	beq.n	80060dc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80060d0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80060da:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b084      	sub	sp, #16
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d00d      	beq.n	800612e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2204      	movs	r2, #4
 8006116:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
 800612c:	e047      	b.n	80061be <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 020e 	bic.w	r2, r2, #14
 800613c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0201 	bic.w	r2, r2, #1
 800614c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800615c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006162:	f003 021f 	and.w	r2, r3, #31
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	2101      	movs	r1, #1
 800616c:	fa01 f202 	lsl.w	r2, r1, r2
 8006170:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800617a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00c      	beq.n	800619e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006192:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800619c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	4798      	blx	r3
    }
  }
  return status;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2204      	movs	r2, #4
 80061ea:	409a      	lsls	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d026      	beq.n	8006242 <HAL_DMA_IRQHandler+0x7a>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d021      	beq.n	8006242 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d107      	bne.n	800621c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0204 	bic.w	r2, r2, #4
 800621a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006220:	f003 021f 	and.w	r2, r3, #31
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006228:	2104      	movs	r1, #4
 800622a:	fa01 f202 	lsl.w	r2, r1, r2
 800622e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006234:	2b00      	cmp	r3, #0
 8006236:	d071      	beq.n	800631c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006240:	e06c      	b.n	800631c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006246:	f003 031f 	and.w	r3, r3, #31
 800624a:	2202      	movs	r2, #2
 800624c:	409a      	lsls	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4013      	ands	r3, r2
 8006252:	2b00      	cmp	r3, #0
 8006254:	d02e      	beq.n	80062b4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d029      	beq.n	80062b4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0320 	and.w	r3, r3, #32
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 020a 	bic.w	r2, r2, #10
 800627c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800628a:	f003 021f 	and.w	r2, r3, #31
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	2102      	movs	r1, #2
 8006294:	fa01 f202 	lsl.w	r2, r1, r2
 8006298:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d038      	beq.n	800631c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80062b2:	e033      	b.n	800631c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	2208      	movs	r2, #8
 80062be:	409a      	lsls	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02a      	beq.n	800631e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d025      	beq.n	800631e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f022 020e 	bic.w	r2, r2, #14
 80062e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f003 021f 	and.w	r2, r3, #31
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ee:	2101      	movs	r1, #1
 80062f0:	fa01 f202 	lsl.w	r2, r1, r2
 80062f4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2201      	movs	r2, #1
 80062fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800631c:	bf00      	nop
 800631e:	bf00      	nop
}
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
	...

08006328 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	461a      	mov	r2, r3
 8006336:	4b16      	ldr	r3, [pc, #88]	@ (8006390 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006338:	429a      	cmp	r2, r3
 800633a:	d802      	bhi.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800633c:	4b15      	ldr	r3, [pc, #84]	@ (8006394 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e001      	b.n	8006346 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006342:	4b15      	ldr	r3, [pc, #84]	@ (8006398 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006344:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3b08      	subs	r3, #8
 8006352:	4a12      	ldr	r2, [pc, #72]	@ (800639c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006354:	fba2 2303 	umull	r2, r3, r2, r3
 8006358:	091b      	lsrs	r3, r3, #4
 800635a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006360:	089b      	lsrs	r3, r3, #2
 8006362:	009a      	lsls	r2, r3, #2
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4413      	add	r3, r2
 8006368:	461a      	mov	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a0b      	ldr	r2, [pc, #44]	@ (80063a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006372:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f003 031f 	and.w	r3, r3, #31
 800637a:	2201      	movs	r2, #1
 800637c:	409a      	lsls	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40020407 	.word	0x40020407
 8006394:	40020800 	.word	0x40020800
 8006398:	40020820 	.word	0x40020820
 800639c:	cccccccd 	.word	0xcccccccd
 80063a0:	40020880 	.word	0x40020880

080063a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4b0b      	ldr	r3, [pc, #44]	@ (80063e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	461a      	mov	r2, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a08      	ldr	r2, [pc, #32]	@ (80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80063c6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3b01      	subs	r3, #1
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr
 80063e4:	1000823f 	.word	0x1000823f
 80063e8:	40020940 	.word	0x40020940

080063ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063fa:	e15a      	b.n	80066b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	2101      	movs	r1, #1
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	4013      	ands	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 814c 	beq.w	80066ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d005      	beq.n	800642c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006428:	2b02      	cmp	r3, #2
 800642a:	d130      	bne.n	800648e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	2203      	movs	r2, #3
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	43db      	mvns	r3, r3
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4013      	ands	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68da      	ldr	r2, [r3, #12]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006462:	2201      	movs	r2, #1
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	43db      	mvns	r3, r3
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4013      	ands	r3, r2
 8006470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	f003 0201 	and.w	r2, r3, #1
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	fa02 f303 	lsl.w	r3, r2, r3
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	4313      	orrs	r3, r2
 8006486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	2b03      	cmp	r3, #3
 8006498:	d017      	beq.n	80064ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	2203      	movs	r2, #3
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	43db      	mvns	r3, r3
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4013      	ands	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689a      	ldr	r2, [r3, #8]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	fa02 f303 	lsl.w	r3, r2, r3
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d123      	bne.n	800651e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	08da      	lsrs	r2, r3, #3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3208      	adds	r2, #8
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	220f      	movs	r2, #15
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43db      	mvns	r3, r3
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	4013      	ands	r3, r2
 80064f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0307 	and.w	r3, r3, #7
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	08da      	lsrs	r2, r3, #3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3208      	adds	r2, #8
 8006518:	6939      	ldr	r1, [r7, #16]
 800651a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	2203      	movs	r2, #3
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	43db      	mvns	r3, r3
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4013      	ands	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f003 0203 	and.w	r2, r3, #3
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	005b      	lsls	r3, r3, #1
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 80a6 	beq.w	80066ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006560:	4b5b      	ldr	r3, [pc, #364]	@ (80066d0 <HAL_GPIO_Init+0x2e4>)
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	4a5a      	ldr	r2, [pc, #360]	@ (80066d0 <HAL_GPIO_Init+0x2e4>)
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	6613      	str	r3, [r2, #96]	@ 0x60
 800656c:	4b58      	ldr	r3, [pc, #352]	@ (80066d0 <HAL_GPIO_Init+0x2e4>)
 800656e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	60bb      	str	r3, [r7, #8]
 8006576:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006578:	4a56      	ldr	r2, [pc, #344]	@ (80066d4 <HAL_GPIO_Init+0x2e8>)
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	089b      	lsrs	r3, r3, #2
 800657e:	3302      	adds	r3, #2
 8006580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006584:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f003 0303 	and.w	r3, r3, #3
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	220f      	movs	r2, #15
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4013      	ands	r3, r2
 800659a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80065a2:	d01f      	beq.n	80065e4 <HAL_GPIO_Init+0x1f8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a4c      	ldr	r2, [pc, #304]	@ (80066d8 <HAL_GPIO_Init+0x2ec>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d019      	beq.n	80065e0 <HAL_GPIO_Init+0x1f4>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a4b      	ldr	r2, [pc, #300]	@ (80066dc <HAL_GPIO_Init+0x2f0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <HAL_GPIO_Init+0x1f0>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a4a      	ldr	r2, [pc, #296]	@ (80066e0 <HAL_GPIO_Init+0x2f4>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00d      	beq.n	80065d8 <HAL_GPIO_Init+0x1ec>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a49      	ldr	r2, [pc, #292]	@ (80066e4 <HAL_GPIO_Init+0x2f8>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d007      	beq.n	80065d4 <HAL_GPIO_Init+0x1e8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a48      	ldr	r2, [pc, #288]	@ (80066e8 <HAL_GPIO_Init+0x2fc>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_GPIO_Init+0x1e4>
 80065cc:	2305      	movs	r3, #5
 80065ce:	e00a      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065d0:	2306      	movs	r3, #6
 80065d2:	e008      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065d4:	2304      	movs	r3, #4
 80065d6:	e006      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065d8:	2303      	movs	r3, #3
 80065da:	e004      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065dc:	2302      	movs	r3, #2
 80065de:	e002      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_GPIO_Init+0x1fa>
 80065e4:	2300      	movs	r3, #0
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f002 0203 	and.w	r2, r2, #3
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	4093      	lsls	r3, r2
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065f6:	4937      	ldr	r1, [pc, #220]	@ (80066d4 <HAL_GPIO_Init+0x2e8>)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	3302      	adds	r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006604:	4b39      	ldr	r3, [pc, #228]	@ (80066ec <HAL_GPIO_Init+0x300>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006628:	4a30      	ldr	r2, [pc, #192]	@ (80066ec <HAL_GPIO_Init+0x300>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800662e:	4b2f      	ldr	r3, [pc, #188]	@ (80066ec <HAL_GPIO_Init+0x300>)
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006652:	4a26      	ldr	r2, [pc, #152]	@ (80066ec <HAL_GPIO_Init+0x300>)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006658:	4b24      	ldr	r3, [pc, #144]	@ (80066ec <HAL_GPIO_Init+0x300>)
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	43db      	mvns	r3, r3
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4013      	ands	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800667c:	4a1b      	ldr	r2, [pc, #108]	@ (80066ec <HAL_GPIO_Init+0x300>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006682:	4b1a      	ldr	r3, [pc, #104]	@ (80066ec <HAL_GPIO_Init+0x300>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	43db      	mvns	r3, r3
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4013      	ands	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80066a6:	4a11      	ldr	r2, [pc, #68]	@ (80066ec <HAL_GPIO_Init+0x300>)
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	3301      	adds	r3, #1
 80066b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	fa22 f303 	lsr.w	r3, r2, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f47f ae9d 	bne.w	80063fc <HAL_GPIO_Init+0x10>
  }
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	40021000 	.word	0x40021000
 80066d4:	40010000 	.word	0x40010000
 80066d8:	48000400 	.word	0x48000400
 80066dc:	48000800 	.word	0x48000800
 80066e0:	48000c00 	.word	0x48000c00
 80066e4:	48001000 	.word	0x48001000
 80066e8:	48001400 	.word	0x48001400
 80066ec:	40010400 	.word	0x40010400

080066f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	807b      	strh	r3, [r7, #2]
 80066fc:	4613      	mov	r3, r2
 80066fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006700:	787b      	ldrb	r3, [r7, #1]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006706:	887a      	ldrh	r2, [r7, #2]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800670c:	e002      	b.n	8006714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800670e:	887a      	ldrh	r2, [r7, #2]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800672a:	4b08      	ldr	r3, [pc, #32]	@ (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800672c:	695a      	ldr	r2, [r3, #20]
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d006      	beq.n	8006744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006736:	4a05      	ldr	r2, [pc, #20]	@ (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f806 	bl	8006750 <HAL_GPIO_EXTI_Callback>
  }
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	40010400 	.word	0x40010400

08006750 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800675a:	bf00      	nop
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr
	...

08006768 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d141      	bne.n	80067fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006776:	4b4b      	ldr	r3, [pc, #300]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800677e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006782:	d131      	bne.n	80067e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006784:	4b47      	ldr	r3, [pc, #284]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006786:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800678a:	4a46      	ldr	r2, [pc, #280]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006790:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006794:	4b43      	ldr	r3, [pc, #268]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800679c:	4a41      	ldr	r2, [pc, #260]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067a4:	4b40      	ldr	r3, [pc, #256]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2232      	movs	r2, #50	@ 0x32
 80067aa:	fb02 f303 	mul.w	r3, r2, r3
 80067ae:	4a3f      	ldr	r2, [pc, #252]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067b0:	fba2 2303 	umull	r2, r3, r2, r3
 80067b4:	0c9b      	lsrs	r3, r3, #18
 80067b6:	3301      	adds	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ba:	e002      	b.n	80067c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3b01      	subs	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c2:	4b38      	ldr	r3, [pc, #224]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ce:	d102      	bne.n	80067d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1f2      	bne.n	80067bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067d6:	4b33      	ldr	r3, [pc, #204]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067e2:	d158      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e057      	b.n	8006898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067e8:	4b2e      	ldr	r3, [pc, #184]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ee:	4a2d      	ldr	r2, [pc, #180]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80067f8:	e04d      	b.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006800:	d141      	bne.n	8006886 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006802:	4b28      	ldr	r3, [pc, #160]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800680a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680e:	d131      	bne.n	8006874 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006810:	4b24      	ldr	r3, [pc, #144]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006816:	4a23      	ldr	r2, [pc, #140]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800681c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006820:	4b20      	ldr	r3, [pc, #128]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006828:	4a1e      	ldr	r2, [pc, #120]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800682e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006830:	4b1d      	ldr	r3, [pc, #116]	@ (80068a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2232      	movs	r2, #50	@ 0x32
 8006836:	fb02 f303 	mul.w	r3, r2, r3
 800683a:	4a1c      	ldr	r2, [pc, #112]	@ (80068ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	0c9b      	lsrs	r3, r3, #18
 8006842:	3301      	adds	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006846:	e002      	b.n	800684e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3b01      	subs	r3, #1
 800684c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800684e:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800685a:	d102      	bne.n	8006862 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f2      	bne.n	8006848 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800686a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800686e:	d112      	bne.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e011      	b.n	8006898 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006874:	4b0b      	ldr	r3, [pc, #44]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800687a:	4a0a      	ldr	r2, [pc, #40]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006884:	e007      	b.n	8006896 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006886:	4b07      	ldr	r3, [pc, #28]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800688e:	4a05      	ldr	r2, [pc, #20]	@ (80068a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006890:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006894:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3714      	adds	r7, #20
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	40007000 	.word	0x40007000
 80068a8:	20000018 	.word	0x20000018
 80068ac:	431bde83 	.word	0x431bde83

080068b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80068b4:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	4a04      	ldr	r2, [pc, #16]	@ (80068cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80068ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068be:	6093      	str	r3, [r2, #8]
}
 80068c0:	bf00      	nop
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40007000 	.word	0x40007000

080068d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e2fe      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d075      	beq.n	80069da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ee:	4b97      	ldr	r3, [pc, #604]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068f8:	4b94      	ldr	r3, [pc, #592]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0303 	and.w	r3, r3, #3
 8006900:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b0c      	cmp	r3, #12
 8006906:	d102      	bne.n	800690e <HAL_RCC_OscConfig+0x3e>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2b03      	cmp	r3, #3
 800690c:	d002      	beq.n	8006914 <HAL_RCC_OscConfig+0x44>
 800690e:	69bb      	ldr	r3, [r7, #24]
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10b      	bne.n	800692c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006914:	4b8d      	ldr	r3, [pc, #564]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d05b      	beq.n	80069d8 <HAL_RCC_OscConfig+0x108>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d157      	bne.n	80069d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e2d9      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006934:	d106      	bne.n	8006944 <HAL_RCC_OscConfig+0x74>
 8006936:	4b85      	ldr	r3, [pc, #532]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a84      	ldr	r2, [pc, #528]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e01d      	b.n	8006980 <HAL_RCC_OscConfig+0xb0>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800694c:	d10c      	bne.n	8006968 <HAL_RCC_OscConfig+0x98>
 800694e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a7e      	ldr	r2, [pc, #504]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006954:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006958:	6013      	str	r3, [r2, #0]
 800695a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a7b      	ldr	r2, [pc, #492]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006964:	6013      	str	r3, [r2, #0]
 8006966:	e00b      	b.n	8006980 <HAL_RCC_OscConfig+0xb0>
 8006968:	4b78      	ldr	r3, [pc, #480]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a77      	ldr	r2, [pc, #476]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 800696e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	4b75      	ldr	r3, [pc, #468]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a74      	ldr	r2, [pc, #464]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 800697a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800697e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d013      	beq.n	80069b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fe f89a 	bl	8004ac0 <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006990:	f7fe f896 	bl	8004ac0 <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	@ 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e29e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069a2:	4b6a      	ldr	r3, [pc, #424]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0f0      	beq.n	8006990 <HAL_RCC_OscConfig+0xc0>
 80069ae:	e014      	b.n	80069da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fe f886 	bl	8004ac0 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069b8:	f7fe f882 	bl	8004ac0 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b64      	cmp	r3, #100	@ 0x64
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e28a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069ca:	4b60      	ldr	r3, [pc, #384]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0xe8>
 80069d6:	e000      	b.n	80069da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d075      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069e6:	4b59      	ldr	r3, [pc, #356]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 030c 	and.w	r3, r3, #12
 80069ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069f0:	4b56      	ldr	r3, [pc, #344]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	f003 0303 	and.w	r3, r3, #3
 80069f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	2b0c      	cmp	r3, #12
 80069fe:	d102      	bne.n	8006a06 <HAL_RCC_OscConfig+0x136>
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d002      	beq.n	8006a0c <HAL_RCC_OscConfig+0x13c>
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	2b04      	cmp	r3, #4
 8006a0a:	d11f      	bne.n	8006a4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <HAL_RCC_OscConfig+0x154>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e25d      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a24:	4b49      	ldr	r3, [pc, #292]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	061b      	lsls	r3, r3, #24
 8006a32:	4946      	ldr	r1, [pc, #280]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a38:	4b45      	ldr	r3, [pc, #276]	@ (8006b50 <HAL_RCC_OscConfig+0x280>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7fd fff3 	bl	8004a28 <HAL_InitTick>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d043      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e249      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d023      	beq.n	8006a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a54:	4b3d      	ldr	r3, [pc, #244]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3c      	ldr	r2, [pc, #240]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fe f82e 	bl	8004ac0 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a68:	f7fe f82a 	bl	8004ac0 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e232      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a7a:	4b34      	ldr	r3, [pc, #208]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a86:	4b31      	ldr	r3, [pc, #196]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	061b      	lsls	r3, r3, #24
 8006a94:	492d      	ldr	r1, [pc, #180]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	604b      	str	r3, [r1, #4]
 8006a9a:	e01a      	b.n	8006ad2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006aa2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa8:	f7fe f80a 	bl	8004ac0 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ab0:	f7fe f806 	bl	8004ac0 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e20e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ac2:	4b22      	ldr	r3, [pc, #136]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x1e0>
 8006ace:	e000      	b.n	8006ad2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0308 	and.w	r3, r3, #8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d041      	beq.n	8006b62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d01c      	beq.n	8006b20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ae6:	4b19      	ldr	r3, [pc, #100]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aec:	4a17      	ldr	r2, [pc, #92]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af6:	f7fd ffe3 	bl	8004ac0 <HAL_GetTick>
 8006afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006afc:	e008      	b.n	8006b10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006afe:	f7fd ffdf 	bl	8004ac0 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b02      	cmp	r3, #2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e1e7      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0ef      	beq.n	8006afe <HAL_RCC_OscConfig+0x22e>
 8006b1e:	e020      	b.n	8006b62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b20:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b26:	4a09      	ldr	r2, [pc, #36]	@ (8006b4c <HAL_RCC_OscConfig+0x27c>)
 8006b28:	f023 0301 	bic.w	r3, r3, #1
 8006b2c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b30:	f7fd ffc6 	bl	8004ac0 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b36:	e00d      	b.n	8006b54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b38:	f7fd ffc2 	bl	8004ac0 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d906      	bls.n	8006b54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e1ca      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
 8006b4a:	bf00      	nop
 8006b4c:	40021000 	.word	0x40021000
 8006b50:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b54:	4b8c      	ldr	r3, [pc, #560]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b5a:	f003 0302 	and.w	r3, r3, #2
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ea      	bne.n	8006b38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0304 	and.w	r3, r3, #4
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 80a6 	beq.w	8006cbc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b70:	2300      	movs	r3, #0
 8006b72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b74:	4b84      	ldr	r3, [pc, #528]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_RCC_OscConfig+0x2b4>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x2b6>
 8006b84:	2300      	movs	r3, #0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00d      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b8e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b94:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b96:	4b7c      	ldr	r3, [pc, #496]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba6:	4b79      	ldr	r3, [pc, #484]	@ (8006d8c <HAL_RCC_OscConfig+0x4bc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d118      	bne.n	8006be4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bb2:	4b76      	ldr	r3, [pc, #472]	@ (8006d8c <HAL_RCC_OscConfig+0x4bc>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a75      	ldr	r2, [pc, #468]	@ (8006d8c <HAL_RCC_OscConfig+0x4bc>)
 8006bb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bbe:	f7fd ff7f 	bl	8004ac0 <HAL_GetTick>
 8006bc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bc4:	e008      	b.n	8006bd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bc6:	f7fd ff7b 	bl	8004ac0 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e183      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d8c <HAL_RCC_OscConfig+0x4bc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0f0      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d108      	bne.n	8006bfe <HAL_RCC_OscConfig+0x32e>
 8006bec:	4b66      	ldr	r3, [pc, #408]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bf2:	4a65      	ldr	r2, [pc, #404]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006bf4:	f043 0301 	orr.w	r3, r3, #1
 8006bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006bfc:	e024      	b.n	8006c48 <HAL_RCC_OscConfig+0x378>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	2b05      	cmp	r3, #5
 8006c04:	d110      	bne.n	8006c28 <HAL_RCC_OscConfig+0x358>
 8006c06:	4b60      	ldr	r3, [pc, #384]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c0c:	4a5e      	ldr	r2, [pc, #376]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c0e:	f043 0304 	orr.w	r3, r3, #4
 8006c12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c16:	4b5c      	ldr	r3, [pc, #368]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1c:	4a5a      	ldr	r2, [pc, #360]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c26:	e00f      	b.n	8006c48 <HAL_RCC_OscConfig+0x378>
 8006c28:	4b57      	ldr	r3, [pc, #348]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2e:	4a56      	ldr	r2, [pc, #344]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c38:	4b53      	ldr	r3, [pc, #332]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c3e:	4a52      	ldr	r2, [pc, #328]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c40:	f023 0304 	bic.w	r3, r3, #4
 8006c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d016      	beq.n	8006c7e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c50:	f7fd ff36 	bl	8004ac0 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c56:	e00a      	b.n	8006c6e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c58:	f7fd ff32 	bl	8004ac0 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e138      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6e:	4b46      	ldr	r3, [pc, #280]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d0ed      	beq.n	8006c58 <HAL_RCC_OscConfig+0x388>
 8006c7c:	e015      	b.n	8006caa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c7e:	f7fd ff1f 	bl	8004ac0 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fd ff1b 	bl	8004ac0 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e121      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1ed      	bne.n	8006c86 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006caa:	7ffb      	ldrb	r3, [r7, #31]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d105      	bne.n	8006cbc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cb0:	4b35      	ldr	r3, [pc, #212]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cb4:	4a34      	ldr	r2, [pc, #208]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d03c      	beq.n	8006d42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d01c      	beq.n	8006d0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce0:	f7fd feee 	bl	8004ac0 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ce8:	f7fd feea 	bl	8004ac0 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e0f2      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cfa:	4b23      	ldr	r3, [pc, #140]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d00:	f003 0302 	and.w	r3, r3, #2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0ef      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x418>
 8006d08:	e01b      	b.n	8006d42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d10:	4a1d      	ldr	r2, [pc, #116]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d12:	f023 0301 	bic.w	r3, r3, #1
 8006d16:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d1a:	f7fd fed1 	bl	8004ac0 <HAL_GetTick>
 8006d1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d20:	e008      	b.n	8006d34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d22:	f7fd fecd 	bl	8004ac0 <HAL_GetTick>
 8006d26:	4602      	mov	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e0d5      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d34:	4b14      	ldr	r3, [pc, #80]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1ef      	bne.n	8006d22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80c9 	beq.w	8006ede <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	f000 8083 	beq.w	8006e60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d15e      	bne.n	8006e20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d62:	4b09      	ldr	r3, [pc, #36]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a08      	ldr	r2, [pc, #32]	@ (8006d88 <HAL_RCC_OscConfig+0x4b8>)
 8006d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d6e:	f7fd fea7 	bl	8004ac0 <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d74:	e00c      	b.n	8006d90 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d76:	f7fd fea3 	bl	8004ac0 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d905      	bls.n	8006d90 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e0ab      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d90:	4b55      	ldr	r3, [pc, #340]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1ec      	bne.n	8006d76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d9c:	4b52      	ldr	r3, [pc, #328]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	4b52      	ldr	r3, [pc, #328]	@ (8006eec <HAL_RCC_OscConfig+0x61c>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	6a11      	ldr	r1, [r2, #32]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006dac:	3a01      	subs	r2, #1
 8006dae:	0112      	lsls	r2, r2, #4
 8006db0:	4311      	orrs	r1, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006db6:	0212      	lsls	r2, r2, #8
 8006db8:	4311      	orrs	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006dbe:	0852      	lsrs	r2, r2, #1
 8006dc0:	3a01      	subs	r2, #1
 8006dc2:	0552      	lsls	r2, r2, #21
 8006dc4:	4311      	orrs	r1, r2
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006dca:	0852      	lsrs	r2, r2, #1
 8006dcc:	3a01      	subs	r2, #1
 8006dce:	0652      	lsls	r2, r2, #25
 8006dd0:	4311      	orrs	r1, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006dd6:	06d2      	lsls	r2, r2, #27
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	4943      	ldr	r1, [pc, #268]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de0:	4b41      	ldr	r3, [pc, #260]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a40      	ldr	r2, [pc, #256]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006de6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dec:	4b3e      	ldr	r3, [pc, #248]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006df6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df8:	f7fd fe62 	bl	8004ac0 <HAL_GetTick>
 8006dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dfe:	e008      	b.n	8006e12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e00:	f7fd fe5e 	bl	8004ac0 <HAL_GetTick>
 8006e04:	4602      	mov	r2, r0
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d901      	bls.n	8006e12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e0e:	2303      	movs	r3, #3
 8006e10:	e066      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e12:	4b35      	ldr	r3, [pc, #212]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0f0      	beq.n	8006e00 <HAL_RCC_OscConfig+0x530>
 8006e1e:	e05e      	b.n	8006ede <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e20:	4b31      	ldr	r3, [pc, #196]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a30      	ldr	r2, [pc, #192]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e2c:	f7fd fe48 	bl	8004ac0 <HAL_GetTick>
 8006e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e32:	e008      	b.n	8006e46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e34:	f7fd fe44 	bl	8004ac0 <HAL_GetTick>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e04c      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e46:	4b28      	ldr	r3, [pc, #160]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f0      	bne.n	8006e34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e52:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	4924      	ldr	r1, [pc, #144]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e58:	4b25      	ldr	r3, [pc, #148]	@ (8006ef0 <HAL_RCC_OscConfig+0x620>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	60cb      	str	r3, [r1, #12]
 8006e5e:	e03e      	b.n	8006ede <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	69db      	ldr	r3, [r3, #28]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e039      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee8 <HAL_RCC_OscConfig+0x618>)
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f003 0203 	and.w	r2, r3, #3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d12c      	bne.n	8006eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d123      	bne.n	8006eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d11b      	bne.n	8006eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d113      	bne.n	8006eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d109      	bne.n	8006eda <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ed0:	085b      	lsrs	r3, r3, #1
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40021000 	.word	0x40021000
 8006eec:	019f800c 	.word	0x019f800c
 8006ef0:	feeefffc 	.word	0xfeeefffc

08006ef4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e11e      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f0c:	4b91      	ldr	r3, [pc, #580]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	683a      	ldr	r2, [r7, #0]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d910      	bls.n	8006f3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f1a:	4b8e      	ldr	r3, [pc, #568]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f023 020f 	bic.w	r2, r3, #15
 8006f22:	498c      	ldr	r1, [pc, #560]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f2a:	4b8a      	ldr	r3, [pc, #552]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d001      	beq.n	8006f3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e106      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d073      	beq.n	8007030 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2b03      	cmp	r3, #3
 8006f4e:	d129      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f50:	4b81      	ldr	r3, [pc, #516]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0f4      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f60:	f000 f99e 	bl	80072a0 <RCC_GetSysClockFreqFromPLLSource>
 8006f64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4a7c      	ldr	r2, [pc, #496]	@ (800715c <HAL_RCC_ClockConfig+0x268>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d93f      	bls.n	8006fee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d033      	beq.n	8006fee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d12f      	bne.n	8006fee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f8e:	4b72      	ldr	r3, [pc, #456]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f96:	4a70      	ldr	r2, [pc, #448]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f9e:	2380      	movs	r3, #128	@ 0x80
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e024      	b.n	8006fee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d107      	bne.n	8006fbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fac:	4b6a      	ldr	r3, [pc, #424]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d109      	bne.n	8006fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0c6      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fbc:	4b66      	ldr	r3, [pc, #408]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e0be      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fcc:	f000 f8ce 	bl	800716c <HAL_RCC_GetSysClockFreq>
 8006fd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	4a61      	ldr	r2, [pc, #388]	@ (800715c <HAL_RCC_ClockConfig+0x268>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d909      	bls.n	8006fee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fda:	4b5f      	ldr	r3, [pc, #380]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fe2:	4a5d      	ldr	r2, [pc, #372]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fea:	2380      	movs	r3, #128	@ 0x80
 8006fec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fee:	4b5a      	ldr	r3, [pc, #360]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f023 0203 	bic.w	r2, r3, #3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4957      	ldr	r1, [pc, #348]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007000:	f7fd fd5e 	bl	8004ac0 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	e00a      	b.n	800701e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007008:	f7fd fd5a 	bl	8004ac0 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e095      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701e:	4b4e      	ldr	r3, [pc, #312]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 020c 	and.w	r2, r3, #12
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	429a      	cmp	r2, r3
 800702e:	d1eb      	bne.n	8007008 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0302 	and.w	r3, r3, #2
 8007038:	2b00      	cmp	r3, #0
 800703a:	d023      	beq.n	8007084 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0304 	and.w	r3, r3, #4
 8007044:	2b00      	cmp	r3, #0
 8007046:	d005      	beq.n	8007054 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007048:	4b43      	ldr	r3, [pc, #268]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	4a42      	ldr	r2, [pc, #264]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800704e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007052:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d007      	beq.n	8007070 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007060:	4b3d      	ldr	r3, [pc, #244]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007068:	4a3b      	ldr	r2, [pc, #236]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800706a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800706e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007070:	4b39      	ldr	r3, [pc, #228]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	4936      	ldr	r1, [pc, #216]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800707e:	4313      	orrs	r3, r2
 8007080:	608b      	str	r3, [r1, #8]
 8007082:	e008      	b.n	8007096 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	2b80      	cmp	r3, #128	@ 0x80
 8007088:	d105      	bne.n	8007096 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800708a:	4b33      	ldr	r3, [pc, #204]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	4a32      	ldr	r2, [pc, #200]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8007090:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007094:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007096:	4b2f      	ldr	r3, [pc, #188]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 030f 	and.w	r3, r3, #15
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d21d      	bcs.n	80070e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070a4:	4b2b      	ldr	r3, [pc, #172]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f023 020f 	bic.w	r2, r3, #15
 80070ac:	4929      	ldr	r1, [pc, #164]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80070b4:	f7fd fd04 	bl	8004ac0 <HAL_GetTick>
 80070b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	e00a      	b.n	80070d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070bc:	f7fd fd00 	bl	8004ac0 <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e03b      	b.n	800714a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070d2:	4b20      	ldr	r3, [pc, #128]	@ (8007154 <HAL_RCC_ClockConfig+0x260>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1ed      	bne.n	80070bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4917      	ldr	r1, [pc, #92]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800710a:	4b13      	ldr	r3, [pc, #76]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	490f      	ldr	r1, [pc, #60]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800711e:	f000 f825 	bl	800716c <HAL_RCC_GetSysClockFreq>
 8007122:	4602      	mov	r2, r0
 8007124:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <HAL_RCC_ClockConfig+0x264>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	490c      	ldr	r1, [pc, #48]	@ (8007160 <HAL_RCC_ClockConfig+0x26c>)
 8007130:	5ccb      	ldrb	r3, [r1, r3]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	fa22 f303 	lsr.w	r3, r2, r3
 800713a:	4a0a      	ldr	r2, [pc, #40]	@ (8007164 <HAL_RCC_ClockConfig+0x270>)
 800713c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800713e:	4b0a      	ldr	r3, [pc, #40]	@ (8007168 <HAL_RCC_ClockConfig+0x274>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4618      	mov	r0, r3
 8007144:	f7fd fc70 	bl	8004a28 <HAL_InitTick>
 8007148:	4603      	mov	r3, r0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40022000 	.word	0x40022000
 8007158:	40021000 	.word	0x40021000
 800715c:	04c4b400 	.word	0x04c4b400
 8007160:	0800bff8 	.word	0x0800bff8
 8007164:	20000018 	.word	0x20000018
 8007168:	2000001c 	.word	0x2000001c

0800716c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007172:	4b2c      	ldr	r3, [pc, #176]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 030c 	and.w	r3, r3, #12
 800717a:	2b04      	cmp	r3, #4
 800717c:	d102      	bne.n	8007184 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800717e:	4b2a      	ldr	r3, [pc, #168]	@ (8007228 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	e047      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007184:	4b27      	ldr	r3, [pc, #156]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f003 030c 	and.w	r3, r3, #12
 800718c:	2b08      	cmp	r3, #8
 800718e:	d102      	bne.n	8007196 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007190:	4b26      	ldr	r3, [pc, #152]	@ (800722c <HAL_RCC_GetSysClockFreq+0xc0>)
 8007192:	613b      	str	r3, [r7, #16]
 8007194:	e03e      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007196:	4b23      	ldr	r3, [pc, #140]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f003 030c 	and.w	r3, r3, #12
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d136      	bne.n	8007210 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071a2:	4b20      	ldr	r3, [pc, #128]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80071ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	3301      	adds	r3, #1
 80071b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b03      	cmp	r3, #3
 80071be:	d10c      	bne.n	80071da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071c0:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <HAL_RCC_GetSysClockFreq+0xc0>)
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c8:	4a16      	ldr	r2, [pc, #88]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ca:	68d2      	ldr	r2, [r2, #12]
 80071cc:	0a12      	lsrs	r2, r2, #8
 80071ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071d2:	fb02 f303 	mul.w	r3, r2, r3
 80071d6:	617b      	str	r3, [r7, #20]
      break;
 80071d8:	e00c      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071da:	4a13      	ldr	r2, [pc, #76]	@ (8007228 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	4a10      	ldr	r2, [pc, #64]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071e4:	68d2      	ldr	r2, [r2, #12]
 80071e6:	0a12      	lsrs	r2, r2, #8
 80071e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071ec:	fb02 f303 	mul.w	r3, r2, r3
 80071f0:	617b      	str	r3, [r7, #20]
      break;
 80071f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007224 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	0e5b      	lsrs	r3, r3, #25
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	3301      	adds	r3, #1
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	fbb2 f3f3 	udiv	r3, r2, r3
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	e001      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007214:	693b      	ldr	r3, [r7, #16]
}
 8007216:	4618      	mov	r0, r3
 8007218:	371c      	adds	r7, #28
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40021000 	.word	0x40021000
 8007228:	00f42400 	.word	0x00f42400
 800722c:	016e3600 	.word	0x016e3600

08007230 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007234:	4b03      	ldr	r3, [pc, #12]	@ (8007244 <HAL_RCC_GetHCLKFreq+0x14>)
 8007236:	681b      	ldr	r3, [r3, #0]
}
 8007238:	4618      	mov	r0, r3
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000018 	.word	0x20000018

08007248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800724c:	f7ff fff0 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 8007250:	4602      	mov	r2, r0
 8007252:	4b06      	ldr	r3, [pc, #24]	@ (800726c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	f003 0307 	and.w	r3, r3, #7
 800725c:	4904      	ldr	r1, [pc, #16]	@ (8007270 <HAL_RCC_GetPCLK1Freq+0x28>)
 800725e:	5ccb      	ldrb	r3, [r1, r3]
 8007260:	f003 031f 	and.w	r3, r3, #31
 8007264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007268:	4618      	mov	r0, r3
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40021000 	.word	0x40021000
 8007270:	0800c008 	.word	0x0800c008

08007274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007278:	f7ff ffda 	bl	8007230 <HAL_RCC_GetHCLKFreq>
 800727c:	4602      	mov	r2, r0
 800727e:	4b06      	ldr	r3, [pc, #24]	@ (8007298 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	0adb      	lsrs	r3, r3, #11
 8007284:	f003 0307 	and.w	r3, r3, #7
 8007288:	4904      	ldr	r1, [pc, #16]	@ (800729c <HAL_RCC_GetPCLK2Freq+0x28>)
 800728a:	5ccb      	ldrb	r3, [r1, r3]
 800728c:	f003 031f 	and.w	r3, r3, #31
 8007290:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007294:	4618      	mov	r0, r3
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40021000 	.word	0x40021000
 800729c:	0800c008 	.word	0x0800c008

080072a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	f003 0303 	and.w	r3, r3, #3
 80072ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	091b      	lsrs	r3, r3, #4
 80072b6:	f003 030f 	and.w	r3, r3, #15
 80072ba:	3301      	adds	r3, #1
 80072bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	2b03      	cmp	r3, #3
 80072c2:	d10c      	bne.n	80072de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c4:	4a17      	ldr	r2, [pc, #92]	@ (8007324 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072cc:	4a14      	ldr	r2, [pc, #80]	@ (8007320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ce:	68d2      	ldr	r2, [r2, #12]
 80072d0:	0a12      	lsrs	r2, r2, #8
 80072d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072d6:	fb02 f303 	mul.w	r3, r2, r3
 80072da:	617b      	str	r3, [r7, #20]
    break;
 80072dc:	e00c      	b.n	80072f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072de:	4a12      	ldr	r2, [pc, #72]	@ (8007328 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072e8:	68d2      	ldr	r2, [r2, #12]
 80072ea:	0a12      	lsrs	r2, r2, #8
 80072ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
    break;
 80072f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072f8:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	0e5b      	lsrs	r3, r3, #25
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	3301      	adds	r3, #1
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007312:	687b      	ldr	r3, [r7, #4]
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr
 8007320:	40021000 	.word	0x40021000
 8007324:	016e3600 	.word	0x016e3600
 8007328:	00f42400 	.word	0x00f42400

0800732c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007334:	2300      	movs	r3, #0
 8007336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007338:	2300      	movs	r3, #0
 800733a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8098 	beq.w	800747a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800734a:	2300      	movs	r3, #0
 800734c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800734e:	4b43      	ldr	r3, [pc, #268]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800735a:	4b40      	ldr	r3, [pc, #256]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800735c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800735e:	4a3f      	ldr	r2, [pc, #252]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007364:	6593      	str	r3, [r2, #88]	@ 0x58
 8007366:	4b3d      	ldr	r3, [pc, #244]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800736a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736e:	60bb      	str	r3, [r7, #8]
 8007370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007372:	2301      	movs	r3, #1
 8007374:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007376:	4b3a      	ldr	r3, [pc, #232]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a39      	ldr	r2, [pc, #228]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800737c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007380:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007382:	f7fd fb9d 	bl	8004ac0 <HAL_GetTick>
 8007386:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007388:	e009      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800738a:	f7fd fb99 	bl	8004ac0 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	2b02      	cmp	r3, #2
 8007396:	d902      	bls.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007398:	2303      	movs	r3, #3
 800739a:	74fb      	strb	r3, [r7, #19]
        break;
 800739c:	e005      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800739e:	4b30      	ldr	r3, [pc, #192]	@ (8007460 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0ef      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073aa:	7cfb      	ldrb	r3, [r7, #19]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d159      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073b0:	4b2a      	ldr	r3, [pc, #168]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d01e      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d019      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073cc:	4b23      	ldr	r3, [pc, #140]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073d8:	4b20      	ldr	r3, [pc, #128]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073de:	4a1f      	ldr	r2, [pc, #124]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073e8:	4b1c      	ldr	r3, [pc, #112]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ee:	4a1b      	ldr	r2, [pc, #108]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073f8:	4a18      	ldr	r2, [pc, #96]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f003 0301 	and.w	r3, r3, #1
 8007406:	2b00      	cmp	r3, #0
 8007408:	d016      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740a:	f7fd fb59 	bl	8004ac0 <HAL_GetTick>
 800740e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007410:	e00b      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f7fd fb55 	bl	8004ac0 <HAL_GetTick>
 8007416:	4602      	mov	r2, r0
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	1ad3      	subs	r3, r2, r3
 800741c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007420:	4293      	cmp	r3, r2
 8007422:	d902      	bls.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	74fb      	strb	r3, [r7, #19]
            break;
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800742a:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d0ec      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007438:	7cfb      	ldrb	r3, [r7, #19]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800743e:	4b07      	ldr	r3, [pc, #28]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007440:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007444:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800744c:	4903      	ldr	r1, [pc, #12]	@ (800745c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800744e:	4313      	orrs	r3, r2
 8007450:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007454:	e008      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007456:	7cfb      	ldrb	r3, [r7, #19]
 8007458:	74bb      	strb	r3, [r7, #18]
 800745a:	e005      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800745c:	40021000 	.word	0x40021000
 8007460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007464:	7cfb      	ldrb	r3, [r7, #19]
 8007466:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007468:	7c7b      	ldrb	r3, [r7, #17]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d105      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746e:	4ba7      	ldr	r3, [pc, #668]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007472:	4aa6      	ldr	r2, [pc, #664]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007474:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007478:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007486:	4ba1      	ldr	r3, [pc, #644]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800748c:	f023 0203 	bic.w	r2, r3, #3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	499d      	ldr	r1, [pc, #628]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00a      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074a8:	4b98      	ldr	r3, [pc, #608]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074ae:	f023 020c 	bic.w	r2, r3, #12
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	4995      	ldr	r1, [pc, #596]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0304 	and.w	r3, r3, #4
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074ca:	4b90      	ldr	r3, [pc, #576]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68db      	ldr	r3, [r3, #12]
 80074d8:	498c      	ldr	r1, [pc, #560]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00a      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074ec:	4b87      	ldr	r3, [pc, #540]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4984      	ldr	r1, [pc, #528]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800750e:	4b7f      	ldr	r3, [pc, #508]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	497b      	ldr	r1, [pc, #492]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751e:	4313      	orrs	r3, r2
 8007520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00a      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007530:	4b76      	ldr	r3, [pc, #472]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007536:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	699b      	ldr	r3, [r3, #24]
 800753e:	4973      	ldr	r1, [pc, #460]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007540:	4313      	orrs	r3, r2
 8007542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b00      	cmp	r3, #0
 8007550:	d00a      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007552:	4b6e      	ldr	r3, [pc, #440]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007558:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	496a      	ldr	r1, [pc, #424]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007562:	4313      	orrs	r3, r2
 8007564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00a      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007574:	4b65      	ldr	r3, [pc, #404]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800757a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	4962      	ldr	r1, [pc, #392]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007596:	4b5d      	ldr	r3, [pc, #372]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a4:	4959      	ldr	r1, [pc, #356]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00a      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075b8:	4b54      	ldr	r3, [pc, #336]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075be:	f023 0203 	bic.w	r2, r3, #3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075c6:	4951      	ldr	r1, [pc, #324]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00a      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075da:	4b4c      	ldr	r3, [pc, #304]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075e8:	4948      	ldr	r1, [pc, #288]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d015      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075fc:	4b43      	ldr	r3, [pc, #268]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007602:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760a:	4940      	ldr	r1, [pc, #256]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800760c:	4313      	orrs	r3, r2
 800760e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800761a:	d105      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800761c:	4b3b      	ldr	r3, [pc, #236]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	4a3a      	ldr	r2, [pc, #232]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007622:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007626:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007630:	2b00      	cmp	r3, #0
 8007632:	d015      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007634:	4b35      	ldr	r3, [pc, #212]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800763a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	4932      	ldr	r1, [pc, #200]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007644:	4313      	orrs	r3, r2
 8007646:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800764e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007652:	d105      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007654:	4b2d      	ldr	r3, [pc, #180]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4a2c      	ldr	r2, [pc, #176]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800765e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007668:	2b00      	cmp	r3, #0
 800766a:	d015      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800766c:	4b27      	ldr	r3, [pc, #156]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007672:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800767a:	4924      	ldr	r1, [pc, #144]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007686:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800768a:	d105      	bne.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800768c:	4b1f      	ldr	r3, [pc, #124]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	4a1e      	ldr	r2, [pc, #120]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007696:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d015      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076a4:	4b19      	ldr	r3, [pc, #100]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b2:	4916      	ldr	r1, [pc, #88]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076b4:	4313      	orrs	r3, r2
 80076b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076c2:	d105      	bne.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076c4:	4b11      	ldr	r3, [pc, #68]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	4a10      	ldr	r2, [pc, #64]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d019      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076dc:	4b0b      	ldr	r3, [pc, #44]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	4908      	ldr	r1, [pc, #32]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076fa:	d109      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076fc:	4b03      	ldr	r3, [pc, #12]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a02      	ldr	r2, [pc, #8]	@ (800770c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007706:	60d3      	str	r3, [r2, #12]
 8007708:	e002      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800770a:	bf00      	nop
 800770c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d015      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800771c:	4b29      	ldr	r3, [pc, #164]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772a:	4926      	ldr	r1, [pc, #152]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007736:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800773a:	d105      	bne.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800773c:	4b21      	ldr	r3, [pc, #132]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4a20      	ldr	r2, [pc, #128]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007742:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007746:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d015      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007754:	4b1b      	ldr	r3, [pc, #108]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800775a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007762:	4918      	ldr	r1, [pc, #96]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007772:	d105      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007774:	4b13      	ldr	r3, [pc, #76]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a12      	ldr	r2, [pc, #72]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800777a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800777e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d015      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800778c:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800778e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007792:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800779a:	490a      	ldr	r1, [pc, #40]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800779c:	4313      	orrs	r3, r2
 800779e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077aa:	d105      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ac:	4b05      	ldr	r3, [pc, #20]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	4a04      	ldr	r2, [pc, #16]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	40021000 	.word	0x40021000

080077c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e054      	b.n	8007884 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d111      	bne.n	800780a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f001 fcf4 	bl	80091dc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a23      	ldr	r2, [pc, #140]	@ (800788c <HAL_TIM_Base_Init+0xc4>)
 8007800:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2202      	movs	r2, #2
 800780e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	4619      	mov	r1, r3
 800781c:	4610      	mov	r0, r2
 800781e:	f001 f83d 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2201      	movs	r2, #1
 8007836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2201      	movs	r2, #1
 800784e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2201      	movs	r2, #1
 8007876:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	080042e9 	.word	0x080042e9

08007890 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d001      	beq.n	80078a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e04c      	b.n	8007942 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a26      	ldr	r2, [pc, #152]	@ (8007950 <HAL_TIM_Base_Start+0xc0>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d022      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c2:	d01d      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a22      	ldr	r2, [pc, #136]	@ (8007954 <HAL_TIM_Base_Start+0xc4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d018      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a21      	ldr	r2, [pc, #132]	@ (8007958 <HAL_TIM_Base_Start+0xc8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d013      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a1f      	ldr	r2, [pc, #124]	@ (800795c <HAL_TIM_Base_Start+0xcc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00e      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007960 <HAL_TIM_Base_Start+0xd0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d009      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007964 <HAL_TIM_Base_Start+0xd4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d004      	beq.n	8007900 <HAL_TIM_Base_Start+0x70>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a1b      	ldr	r2, [pc, #108]	@ (8007968 <HAL_TIM_Base_Start+0xd8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d115      	bne.n	800792c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	4b19      	ldr	r3, [pc, #100]	@ (800796c <HAL_TIM_Base_Start+0xdc>)
 8007908:	4013      	ands	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b06      	cmp	r3, #6
 8007910:	d015      	beq.n	800793e <HAL_TIM_Base_Start+0xae>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007918:	d011      	beq.n	800793e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 0201 	orr.w	r2, r2, #1
 8007928:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792a:	e008      	b.n	800793e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0201 	orr.w	r2, r2, #1
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	e000      	b.n	8007940 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	40012c00 	.word	0x40012c00
 8007954:	40000400 	.word	0x40000400
 8007958:	40000800 	.word	0x40000800
 800795c:	40000c00 	.word	0x40000c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40014000 	.word	0x40014000
 8007968:	40015000 	.word	0x40015000
 800796c:	00010007 	.word	0x00010007

08007970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d001      	beq.n	8007988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e054      	b.n	8007a32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68da      	ldr	r2, [r3, #12]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f042 0201 	orr.w	r2, r2, #1
 800799e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a26      	ldr	r2, [pc, #152]	@ (8007a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d022      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b2:	d01d      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a22      	ldr	r2, [pc, #136]	@ (8007a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d018      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a21      	ldr	r2, [pc, #132]	@ (8007a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d013      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a1f      	ldr	r2, [pc, #124]	@ (8007a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d00e      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007a50 <HAL_TIM_Base_Start_IT+0xe0>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d009      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1c      	ldr	r2, [pc, #112]	@ (8007a54 <HAL_TIM_Base_Start_IT+0xe4>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x80>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1b      	ldr	r2, [pc, #108]	@ (8007a58 <HAL_TIM_Base_Start_IT+0xe8>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d115      	bne.n	8007a1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	689a      	ldr	r2, [r3, #8]
 80079f6:	4b19      	ldr	r3, [pc, #100]	@ (8007a5c <HAL_TIM_Base_Start_IT+0xec>)
 80079f8:	4013      	ands	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b06      	cmp	r3, #6
 8007a00:	d015      	beq.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a08:	d011      	beq.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1a:	e008      	b.n	8007a2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f042 0201 	orr.w	r2, r2, #1
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	e000      	b.n	8007a30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3714      	adds	r7, #20
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40013400 	.word	0x40013400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40015000 	.word	0x40015000
 8007a5c:	00010007 	.word	0x00010007

08007a60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e054      	b.n	8007b1c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d111      	bne.n	8007aa2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f001 fba8 	bl	80091dc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d102      	bne.n	8007a9a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a23      	ldr	r2, [pc, #140]	@ (8007b24 <HAL_TIM_PWM_Init+0xc4>)
 8007a98:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f000 fef1 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	0800429d 	.word	0x0800429d

08007b28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d109      	bne.n	8007b4c <HAL_TIM_PWM_Start+0x24>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	bf14      	ite	ne
 8007b44:	2301      	movne	r3, #1
 8007b46:	2300      	moveq	r3, #0
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	e03c      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x9e>
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d109      	bne.n	8007b66 <HAL_TIM_PWM_Start+0x3e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	bf14      	ite	ne
 8007b5e:	2301      	movne	r3, #1
 8007b60:	2300      	moveq	r3, #0
 8007b62:	b2db      	uxtb	r3, r3
 8007b64:	e02f      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x9e>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d109      	bne.n	8007b80 <HAL_TIM_PWM_Start+0x58>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	bf14      	ite	ne
 8007b78:	2301      	movne	r3, #1
 8007b7a:	2300      	moveq	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	e022      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x9e>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2b0c      	cmp	r3, #12
 8007b84:	d109      	bne.n	8007b9a <HAL_TIM_PWM_Start+0x72>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	bf14      	ite	ne
 8007b92:	2301      	movne	r3, #1
 8007b94:	2300      	moveq	r3, #0
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	e015      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x9e>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d109      	bne.n	8007bb4 <HAL_TIM_PWM_Start+0x8c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	bf14      	ite	ne
 8007bac:	2301      	movne	r3, #1
 8007bae:	2300      	moveq	r3, #0
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	e008      	b.n	8007bc6 <HAL_TIM_PWM_Start+0x9e>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	bf14      	ite	ne
 8007bc0:	2301      	movne	r3, #1
 8007bc2:	2300      	moveq	r3, #0
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d001      	beq.n	8007bce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e0a6      	b.n	8007d1c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <HAL_TIM_PWM_Start+0xb6>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007bdc:	e023      	b.n	8007c26 <HAL_TIM_PWM_Start+0xfe>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b04      	cmp	r3, #4
 8007be2:	d104      	bne.n	8007bee <HAL_TIM_PWM_Start+0xc6>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2202      	movs	r2, #2
 8007be8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007bec:	e01b      	b.n	8007c26 <HAL_TIM_PWM_Start+0xfe>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d104      	bne.n	8007bfe <HAL_TIM_PWM_Start+0xd6>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2202      	movs	r2, #2
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007bfc:	e013      	b.n	8007c26 <HAL_TIM_PWM_Start+0xfe>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b0c      	cmp	r3, #12
 8007c02:	d104      	bne.n	8007c0e <HAL_TIM_PWM_Start+0xe6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007c0c:	e00b      	b.n	8007c26 <HAL_TIM_PWM_Start+0xfe>
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b10      	cmp	r3, #16
 8007c12:	d104      	bne.n	8007c1e <HAL_TIM_PWM_Start+0xf6>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c1c:	e003      	b.n	8007c26 <HAL_TIM_PWM_Start+0xfe>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	6839      	ldr	r1, [r7, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 faae 	bl	8009190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a3a      	ldr	r2, [pc, #232]	@ (8007d24 <HAL_TIM_PWM_Start+0x1fc>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d018      	beq.n	8007c70 <HAL_TIM_PWM_Start+0x148>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a39      	ldr	r2, [pc, #228]	@ (8007d28 <HAL_TIM_PWM_Start+0x200>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d013      	beq.n	8007c70 <HAL_TIM_PWM_Start+0x148>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a37      	ldr	r2, [pc, #220]	@ (8007d2c <HAL_TIM_PWM_Start+0x204>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d00e      	beq.n	8007c70 <HAL_TIM_PWM_Start+0x148>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a36      	ldr	r2, [pc, #216]	@ (8007d30 <HAL_TIM_PWM_Start+0x208>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d009      	beq.n	8007c70 <HAL_TIM_PWM_Start+0x148>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a34      	ldr	r2, [pc, #208]	@ (8007d34 <HAL_TIM_PWM_Start+0x20c>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d004      	beq.n	8007c70 <HAL_TIM_PWM_Start+0x148>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a33      	ldr	r2, [pc, #204]	@ (8007d38 <HAL_TIM_PWM_Start+0x210>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d101      	bne.n	8007c74 <HAL_TIM_PWM_Start+0x14c>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <HAL_TIM_PWM_Start+0x14e>
 8007c74:	2300      	movs	r3, #0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a25      	ldr	r2, [pc, #148]	@ (8007d24 <HAL_TIM_PWM_Start+0x1fc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d022      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c9c:	d01d      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a26      	ldr	r2, [pc, #152]	@ (8007d3c <HAL_TIM_PWM_Start+0x214>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d018      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a24      	ldr	r2, [pc, #144]	@ (8007d40 <HAL_TIM_PWM_Start+0x218>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d013      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a23      	ldr	r2, [pc, #140]	@ (8007d44 <HAL_TIM_PWM_Start+0x21c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d00e      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a19      	ldr	r2, [pc, #100]	@ (8007d28 <HAL_TIM_PWM_Start+0x200>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d009      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <HAL_TIM_PWM_Start+0x204>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIM_PWM_Start+0x1b2>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a18      	ldr	r2, [pc, #96]	@ (8007d38 <HAL_TIM_PWM_Start+0x210>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d115      	bne.n	8007d06 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	4b19      	ldr	r3, [pc, #100]	@ (8007d48 <HAL_TIM_PWM_Start+0x220>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2b06      	cmp	r3, #6
 8007cea:	d015      	beq.n	8007d18 <HAL_TIM_PWM_Start+0x1f0>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf2:	d011      	beq.n	8007d18 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f042 0201 	orr.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d04:	e008      	b.n	8007d18 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e000      	b.n	8007d1a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d1a:	2300      	movs	r3, #0
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3710      	adds	r7, #16
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	40012c00 	.word	0x40012c00
 8007d28:	40013400 	.word	0x40013400
 8007d2c:	40014000 	.word	0x40014000
 8007d30:	40014400 	.word	0x40014400
 8007d34:	40014800 	.word	0x40014800
 8007d38:	40015000 	.word	0x40015000
 8007d3c:	40000400 	.word	0x40000400
 8007d40:	40000800 	.word	0x40000800
 8007d44:	40000c00 	.word	0x40000c00
 8007d48:	00010007 	.word	0x00010007

08007d4c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e04c      	b.n	8007dfa <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d111      	bne.n	8007d90 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 fa31 	bl	80091dc <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a1f      	ldr	r2, [pc, #124]	@ (8007e04 <HAL_TIM_OnePulse_Init+0xb8>)
 8007d86:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3304      	adds	r3, #4
 8007da0:	4619      	mov	r1, r3
 8007da2:	4610      	mov	r0, r2
 8007da4:	f000 fd7a 	bl	800889c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0208 	bic.w	r2, r2, #8
 8007db6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6819      	ldr	r1, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2201      	movs	r2, #1
 8007dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	08007e09 	.word	0x08007e09

08007e08 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	e0a2      	b.n	8007f76 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d111      	bne.n	8007e60 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 f9c9 	bl	80091dc <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d102      	bne.n	8007e58 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a4a      	ldr	r2, [pc, #296]	@ (8007f80 <HAL_TIM_Encoder_Init+0x164>)
 8007e56:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007e76:	f023 0307 	bic.w	r3, r3, #7
 8007e7a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4619      	mov	r1, r3
 8007e86:	4610      	mov	r0, r2
 8007e88:	f000 fd08 	bl	800889c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007eb4:	f023 0303 	bic.w	r3, r3, #3
 8007eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	021b      	lsls	r3, r3, #8
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007ed2:	f023 030c 	bic.w	r3, r3, #12
 8007ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ede:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	68da      	ldr	r2, [r3, #12]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	021b      	lsls	r3, r3, #8
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	011a      	lsls	r2, r3, #4
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	6a1b      	ldr	r3, [r3, #32]
 8007f00:	031b      	lsls	r3, r3, #12
 8007f02:	4313      	orrs	r3, r2
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007f10:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f18:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	011b      	lsls	r3, r3, #4
 8007f24:	4313      	orrs	r3, r2
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	08004391 	.word	0x08004391

08007f84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007fa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007fac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d110      	bne.n	8007fd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fb4:	7bfb      	ldrb	r3, [r7, #15]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d102      	bne.n	8007fc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fba:	7b7b      	ldrb	r3, [r7, #13]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d001      	beq.n	8007fc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e069      	b.n	8008098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fd4:	e031      	b.n	800803a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b04      	cmp	r3, #4
 8007fda:	d110      	bne.n	8007ffe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fdc:	7bbb      	ldrb	r3, [r7, #14]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d102      	bne.n	8007fe8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fe2:	7b3b      	ldrb	r3, [r7, #12]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d001      	beq.n	8007fec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e055      	b.n	8008098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ffc:	e01d      	b.n	800803a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ffe:	7bfb      	ldrb	r3, [r7, #15]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d108      	bne.n	8008016 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b01      	cmp	r3, #1
 8008008:	d105      	bne.n	8008016 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800800a:	7b7b      	ldrb	r3, [r7, #13]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d102      	bne.n	8008016 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008010:	7b3b      	ldrb	r3, [r7, #12]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d001      	beq.n	800801a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e03e      	b.n	8008098 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2202      	movs	r2, #2
 800801e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2202      	movs	r2, #2
 800802e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2202      	movs	r2, #2
 8008036:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d003      	beq.n	8008048 <HAL_TIM_Encoder_Start+0xc4>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	2b04      	cmp	r3, #4
 8008044:	d008      	beq.n	8008058 <HAL_TIM_Encoder_Start+0xd4>
 8008046:	e00f      	b.n	8008068 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2201      	movs	r2, #1
 800804e:	2100      	movs	r1, #0
 8008050:	4618      	mov	r0, r3
 8008052:	f001 f89d 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 8008056:	e016      	b.n	8008086 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2201      	movs	r2, #1
 800805e:	2104      	movs	r1, #4
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f895 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 8008066:	e00e      	b.n	8008086 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2201      	movs	r2, #1
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 f88d 	bl	8009190 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2201      	movs	r2, #1
 800807c:	2104      	movs	r1, #4
 800807e:	4618      	mov	r0, r3
 8008080:	f001 f886 	bl	8009190 <TIM_CCxChannelCmd>
      break;
 8008084:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f042 0201 	orr.w	r2, r2, #1
 8008094:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d026      	beq.n	8008110 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d021      	beq.n	8008110 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0202 	mvn.w	r2, #2
 80080d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	e009      	b.n	800810a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0304 	and.w	r3, r3, #4
 8008116:	2b00      	cmp	r3, #0
 8008118:	d026      	beq.n	8008168 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d021      	beq.n	8008168 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0204 	mvn.w	r2, #4
 800812c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2202      	movs	r2, #2
 8008132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
 800814c:	e009      	b.n	8008162 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d026      	beq.n	80081c0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f003 0308 	and.w	r3, r3, #8
 8008178:	2b00      	cmp	r3, #0
 800817a:	d021      	beq.n	80081c0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0208 	mvn.w	r2, #8
 8008184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2204      	movs	r2, #4
 800818a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69db      	ldr	r3, [r3, #28]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	2b00      	cmp	r3, #0
 8008198:	d005      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	4798      	blx	r3
 80081a4:	e009      	b.n	80081ba <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 0310 	and.w	r3, r3, #16
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d026      	beq.n	8008218 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0310 	and.w	r3, r3, #16
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d021      	beq.n	8008218 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f06f 0210 	mvn.w	r2, #16
 80081dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2208      	movs	r2, #8
 80081e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	4798      	blx	r3
 80081fc:	e009      	b.n	8008212 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	2b00      	cmp	r3, #0
 8008220:	d00e      	beq.n	8008240 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b00      	cmp	r3, #0
 800822a:	d009      	beq.n	8008240 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0201 	mvn.w	r2, #1
 8008234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008246:	2b00      	cmp	r3, #0
 8008248:	d104      	bne.n	8008254 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008250:	2b00      	cmp	r3, #0
 8008252:	d00e      	beq.n	8008272 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800825a:	2b00      	cmp	r3, #0
 800825c:	d009      	beq.n	8008272 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00e      	beq.n	800829a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008282:	2b00      	cmp	r3, #0
 8008284:	d009      	beq.n	800829a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800828e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00e      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f06f 0220 	mvn.w	r2, #32
 80082de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00e      	beq.n	8008312 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d009      	beq.n	8008312 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00e      	beq.n	800833a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d009      	beq.n	800833a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800832e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00e      	beq.n	8008362 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800834a:	2b00      	cmp	r3, #0
 800834c:	d009      	beq.n	8008362 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800838a:	bf00      	nop
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d101      	bne.n	80083b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e0ff      	b.n	80085b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	2201      	movs	r2, #1
 80083b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2b14      	cmp	r3, #20
 80083be:	f200 80f0 	bhi.w	80085a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083c2:	a201      	add	r2, pc, #4	@ (adr r2, 80083c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c8:	0800841d 	.word	0x0800841d
 80083cc:	080085a3 	.word	0x080085a3
 80083d0:	080085a3 	.word	0x080085a3
 80083d4:	080085a3 	.word	0x080085a3
 80083d8:	0800845d 	.word	0x0800845d
 80083dc:	080085a3 	.word	0x080085a3
 80083e0:	080085a3 	.word	0x080085a3
 80083e4:	080085a3 	.word	0x080085a3
 80083e8:	0800849f 	.word	0x0800849f
 80083ec:	080085a3 	.word	0x080085a3
 80083f0:	080085a3 	.word	0x080085a3
 80083f4:	080085a3 	.word	0x080085a3
 80083f8:	080084df 	.word	0x080084df
 80083fc:	080085a3 	.word	0x080085a3
 8008400:	080085a3 	.word	0x080085a3
 8008404:	080085a3 	.word	0x080085a3
 8008408:	08008521 	.word	0x08008521
 800840c:	080085a3 	.word	0x080085a3
 8008410:	080085a3 	.word	0x080085a3
 8008414:	080085a3 	.word	0x080085a3
 8008418:	08008561 	.word	0x08008561
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68b9      	ldr	r1, [r7, #8]
 8008422:	4618      	mov	r0, r3
 8008424:	f000 faee 	bl	8008a04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	699a      	ldr	r2, [r3, #24]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f042 0208 	orr.w	r2, r2, #8
 8008436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0204 	bic.w	r2, r2, #4
 8008446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6999      	ldr	r1, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	619a      	str	r2, [r3, #24]
      break;
 800845a:	e0a5      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 fb68 	bl	8008b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6999      	ldr	r1, [r3, #24]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	021a      	lsls	r2, r3, #8
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	430a      	orrs	r2, r1
 800849a:	619a      	str	r2, [r3, #24]
      break;
 800849c:	e084      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fbdb 	bl	8008c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	69da      	ldr	r2, [r3, #28]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0208 	orr.w	r2, r2, #8
 80084b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	69da      	ldr	r2, [r3, #28]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0204 	bic.w	r2, r2, #4
 80084c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	69d9      	ldr	r1, [r3, #28]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	691a      	ldr	r2, [r3, #16]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	430a      	orrs	r2, r1
 80084da:	61da      	str	r2, [r3, #28]
      break;
 80084dc:	e064      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68b9      	ldr	r1, [r7, #8]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 fc4d 	bl	8008d84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69da      	ldr	r2, [r3, #28]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	69d9      	ldr	r1, [r3, #28]
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	021a      	lsls	r2, r3, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	61da      	str	r2, [r3, #28]
      break;
 800851e:	e043      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68b9      	ldr	r1, [r7, #8]
 8008526:	4618      	mov	r0, r3
 8008528:	f000 fcc0 	bl	8008eac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f042 0208 	orr.w	r2, r2, #8
 800853a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0204 	bic.w	r2, r2, #4
 800854a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	691a      	ldr	r2, [r3, #16]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800855e:	e023      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	4618      	mov	r0, r3
 8008568:	f000 fd0a 	bl	8008f80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800857a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800858a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	021a      	lsls	r2, r3, #8
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	430a      	orrs	r2, r1
 800859e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80085a0:	e002      	b.n	80085a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	75fb      	strb	r3, [r7, #23]
      break;
 80085a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop

080085bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_TIM_ConfigClockSource+0x1c>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e0f6      	b.n	80087c6 <HAL_TIM_ConfigClockSource+0x20a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80085f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a6f      	ldr	r2, [pc, #444]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x214>)
 8008612:	4293      	cmp	r3, r2
 8008614:	f000 80c1 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008618:	4a6d      	ldr	r2, [pc, #436]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x214>)
 800861a:	4293      	cmp	r3, r2
 800861c:	f200 80c6 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008620:	4a6c      	ldr	r2, [pc, #432]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x218>)
 8008622:	4293      	cmp	r3, r2
 8008624:	f000 80b9 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008628:	4a6a      	ldr	r2, [pc, #424]	@ (80087d4 <HAL_TIM_ConfigClockSource+0x218>)
 800862a:	4293      	cmp	r3, r2
 800862c:	f200 80be 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008630:	4a69      	ldr	r2, [pc, #420]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x21c>)
 8008632:	4293      	cmp	r3, r2
 8008634:	f000 80b1 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008638:	4a67      	ldr	r2, [pc, #412]	@ (80087d8 <HAL_TIM_ConfigClockSource+0x21c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	f200 80b6 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008640:	4a66      	ldr	r2, [pc, #408]	@ (80087dc <HAL_TIM_ConfigClockSource+0x220>)
 8008642:	4293      	cmp	r3, r2
 8008644:	f000 80a9 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008648:	4a64      	ldr	r2, [pc, #400]	@ (80087dc <HAL_TIM_ConfigClockSource+0x220>)
 800864a:	4293      	cmp	r3, r2
 800864c:	f200 80ae 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008650:	4a63      	ldr	r2, [pc, #396]	@ (80087e0 <HAL_TIM_ConfigClockSource+0x224>)
 8008652:	4293      	cmp	r3, r2
 8008654:	f000 80a1 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008658:	4a61      	ldr	r2, [pc, #388]	@ (80087e0 <HAL_TIM_ConfigClockSource+0x224>)
 800865a:	4293      	cmp	r3, r2
 800865c:	f200 80a6 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008660:	4a60      	ldr	r2, [pc, #384]	@ (80087e4 <HAL_TIM_ConfigClockSource+0x228>)
 8008662:	4293      	cmp	r3, r2
 8008664:	f000 8099 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008668:	4a5e      	ldr	r2, [pc, #376]	@ (80087e4 <HAL_TIM_ConfigClockSource+0x228>)
 800866a:	4293      	cmp	r3, r2
 800866c:	f200 809e 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008670:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008674:	f000 8091 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008678:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800867c:	f200 8096 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008684:	f000 8089 	beq.w	800879a <HAL_TIM_ConfigClockSource+0x1de>
 8008688:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800868c:	f200 808e 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 8008690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008694:	d03e      	beq.n	8008714 <HAL_TIM_ConfigClockSource+0x158>
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800869a:	f200 8087 	bhi.w	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 800869e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086a2:	f000 8086 	beq.w	80087b2 <HAL_TIM_ConfigClockSource+0x1f6>
 80086a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086aa:	d87f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086ac:	2b70      	cmp	r3, #112	@ 0x70
 80086ae:	d01a      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0x12a>
 80086b0:	2b70      	cmp	r3, #112	@ 0x70
 80086b2:	d87b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086b4:	2b60      	cmp	r3, #96	@ 0x60
 80086b6:	d050      	beq.n	800875a <HAL_TIM_ConfigClockSource+0x19e>
 80086b8:	2b60      	cmp	r3, #96	@ 0x60
 80086ba:	d877      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086bc:	2b50      	cmp	r3, #80	@ 0x50
 80086be:	d03c      	beq.n	800873a <HAL_TIM_ConfigClockSource+0x17e>
 80086c0:	2b50      	cmp	r3, #80	@ 0x50
 80086c2:	d873      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086c4:	2b40      	cmp	r3, #64	@ 0x40
 80086c6:	d058      	beq.n	800877a <HAL_TIM_ConfigClockSource+0x1be>
 80086c8:	2b40      	cmp	r3, #64	@ 0x40
 80086ca:	d86f      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086cc:	2b30      	cmp	r3, #48	@ 0x30
 80086ce:	d064      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x1de>
 80086d0:	2b30      	cmp	r3, #48	@ 0x30
 80086d2:	d86b      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086d4:	2b20      	cmp	r3, #32
 80086d6:	d060      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x1de>
 80086d8:	2b20      	cmp	r3, #32
 80086da:	d867      	bhi.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d05c      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x1de>
 80086e0:	2b10      	cmp	r3, #16
 80086e2:	d05a      	beq.n	800879a <HAL_TIM_ConfigClockSource+0x1de>
 80086e4:	e062      	b.n	80087ac <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086f6:	f000 fd2b 	bl	8009150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	609a      	str	r2, [r3, #8]
      break;
 8008712:	e04f      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008724:	f000 fd14 	bl	8009150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008736:	609a      	str	r2, [r3, #8]
      break;
 8008738:	e03c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008746:	461a      	mov	r2, r3
 8008748:	f000 fc86 	bl	8009058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2150      	movs	r1, #80	@ 0x50
 8008752:	4618      	mov	r0, r3
 8008754:	f000 fcdf 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008758:	e02c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008766:	461a      	mov	r2, r3
 8008768:	f000 fca5 	bl	80090b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2160      	movs	r1, #96	@ 0x60
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fccf 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008778:	e01c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008786:	461a      	mov	r2, r3
 8008788:	f000 fc66 	bl	8009058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2140      	movs	r1, #64	@ 0x40
 8008792:	4618      	mov	r0, r3
 8008794:	f000 fcbf 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 8008798:	e00c      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f000 fcb6 	bl	8009116 <TIM_ITRx_SetConfig>
      break;
 80087aa:	e003      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      break;
 80087b0:	e000      	b.n	80087b4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80087b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	00100070 	.word	0x00100070
 80087d4:	00100060 	.word	0x00100060
 80087d8:	00100050 	.word	0x00100050
 80087dc:	00100040 	.word	0x00100040
 80087e0:	00100030 	.word	0x00100030
 80087e4:	00100020 	.word	0x00100020

080087e8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a4c      	ldr	r2, [pc, #304]	@ (80089e0 <TIM_Base_SetConfig+0x144>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d017      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088ba:	d013      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a49      	ldr	r2, [pc, #292]	@ (80089e4 <TIM_Base_SetConfig+0x148>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00f      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a48      	ldr	r2, [pc, #288]	@ (80089e8 <TIM_Base_SetConfig+0x14c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d00b      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a47      	ldr	r2, [pc, #284]	@ (80089ec <TIM_Base_SetConfig+0x150>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d007      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a46      	ldr	r2, [pc, #280]	@ (80089f0 <TIM_Base_SetConfig+0x154>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d003      	beq.n	80088e4 <TIM_Base_SetConfig+0x48>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a45      	ldr	r2, [pc, #276]	@ (80089f4 <TIM_Base_SetConfig+0x158>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d108      	bne.n	80088f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	4a39      	ldr	r2, [pc, #228]	@ (80089e0 <TIM_Base_SetConfig+0x144>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d023      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008904:	d01f      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a36      	ldr	r2, [pc, #216]	@ (80089e4 <TIM_Base_SetConfig+0x148>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01b      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a35      	ldr	r2, [pc, #212]	@ (80089e8 <TIM_Base_SetConfig+0x14c>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d017      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a34      	ldr	r2, [pc, #208]	@ (80089ec <TIM_Base_SetConfig+0x150>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d013      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a33      	ldr	r2, [pc, #204]	@ (80089f0 <TIM_Base_SetConfig+0x154>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d00f      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <TIM_Base_SetConfig+0x15c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00b      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a32      	ldr	r2, [pc, #200]	@ (80089fc <TIM_Base_SetConfig+0x160>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d007      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a31      	ldr	r2, [pc, #196]	@ (8008a00 <TIM_Base_SetConfig+0x164>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d003      	beq.n	8008946 <TIM_Base_SetConfig+0xaa>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a2c      	ldr	r2, [pc, #176]	@ (80089f4 <TIM_Base_SetConfig+0x158>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d108      	bne.n	8008958 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800894c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	689a      	ldr	r2, [r3, #8]
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4a18      	ldr	r2, [pc, #96]	@ (80089e0 <TIM_Base_SetConfig+0x144>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d013      	beq.n	80089ac <TIM_Base_SetConfig+0x110>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1a      	ldr	r2, [pc, #104]	@ (80089f0 <TIM_Base_SetConfig+0x154>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d00f      	beq.n	80089ac <TIM_Base_SetConfig+0x110>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a1a      	ldr	r2, [pc, #104]	@ (80089f8 <TIM_Base_SetConfig+0x15c>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d00b      	beq.n	80089ac <TIM_Base_SetConfig+0x110>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a19      	ldr	r2, [pc, #100]	@ (80089fc <TIM_Base_SetConfig+0x160>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d007      	beq.n	80089ac <TIM_Base_SetConfig+0x110>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a18      	ldr	r2, [pc, #96]	@ (8008a00 <TIM_Base_SetConfig+0x164>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d003      	beq.n	80089ac <TIM_Base_SetConfig+0x110>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	4a13      	ldr	r2, [pc, #76]	@ (80089f4 <TIM_Base_SetConfig+0x158>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d103      	bne.n	80089b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	691a      	ldr	r2, [r3, #16]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2201      	movs	r2, #1
 80089b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d105      	bne.n	80089d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	f023 0201 	bic.w	r2, r3, #1
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	611a      	str	r2, [r3, #16]
  }
}
 80089d2:	bf00      	nop
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	40012c00 	.word	0x40012c00
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40013400 	.word	0x40013400
 80089f4:	40015000 	.word	0x40015000
 80089f8:	40014000 	.word	0x40014000
 80089fc:	40014400 	.word	0x40014400
 8008a00:	40014800 	.word	0x40014800

08008a04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a1b      	ldr	r3, [r3, #32]
 8008a12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a1b      	ldr	r3, [r3, #32]
 8008a18:	f023 0201 	bic.w	r2, r3, #1
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	f023 0302 	bic.w	r3, r3, #2
 8008a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a30      	ldr	r2, [pc, #192]	@ (8008b20 <TIM_OC1_SetConfig+0x11c>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d013      	beq.n	8008a8c <TIM_OC1_SetConfig+0x88>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a2f      	ldr	r2, [pc, #188]	@ (8008b24 <TIM_OC1_SetConfig+0x120>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00f      	beq.n	8008a8c <TIM_OC1_SetConfig+0x88>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8008b28 <TIM_OC1_SetConfig+0x124>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d00b      	beq.n	8008a8c <TIM_OC1_SetConfig+0x88>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a2d      	ldr	r2, [pc, #180]	@ (8008b2c <TIM_OC1_SetConfig+0x128>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d007      	beq.n	8008a8c <TIM_OC1_SetConfig+0x88>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008b30 <TIM_OC1_SetConfig+0x12c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d003      	beq.n	8008a8c <TIM_OC1_SetConfig+0x88>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	4a2b      	ldr	r2, [pc, #172]	@ (8008b34 <TIM_OC1_SetConfig+0x130>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d10c      	bne.n	8008aa6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f023 0308 	bic.w	r3, r3, #8
 8008a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f023 0304 	bic.w	r3, r3, #4
 8008aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8008b20 <TIM_OC1_SetConfig+0x11c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d013      	beq.n	8008ad6 <TIM_OC1_SetConfig+0xd2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b24 <TIM_OC1_SetConfig+0x120>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d00f      	beq.n	8008ad6 <TIM_OC1_SetConfig+0xd2>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1b      	ldr	r2, [pc, #108]	@ (8008b28 <TIM_OC1_SetConfig+0x124>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d00b      	beq.n	8008ad6 <TIM_OC1_SetConfig+0xd2>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1a      	ldr	r2, [pc, #104]	@ (8008b2c <TIM_OC1_SetConfig+0x128>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d007      	beq.n	8008ad6 <TIM_OC1_SetConfig+0xd2>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a19      	ldr	r2, [pc, #100]	@ (8008b30 <TIM_OC1_SetConfig+0x12c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d003      	beq.n	8008ad6 <TIM_OC1_SetConfig+0xd2>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a18      	ldr	r2, [pc, #96]	@ (8008b34 <TIM_OC1_SetConfig+0x130>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d111      	bne.n	8008afa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	695b      	ldr	r3, [r3, #20]
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	693a      	ldr	r2, [r7, #16]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	621a      	str	r2, [r3, #32]
}
 8008b14:	bf00      	nop
 8008b16:	371c      	adds	r7, #28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr
 8008b20:	40012c00 	.word	0x40012c00
 8008b24:	40013400 	.word	0x40013400
 8008b28:	40014000 	.word	0x40014000
 8008b2c:	40014400 	.word	0x40014400
 8008b30:	40014800 	.word	0x40014800
 8008b34:	40015000 	.word	0x40015000

08008b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a1b      	ldr	r3, [r3, #32]
 8008b4c:	f023 0210 	bic.w	r2, r3, #16
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	699b      	ldr	r3, [r3, #24]
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	021b      	lsls	r3, r3, #8
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	f023 0320 	bic.w	r3, r3, #32
 8008b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	011b      	lsls	r3, r3, #4
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a2c      	ldr	r2, [pc, #176]	@ (8008c48 <TIM_OC2_SetConfig+0x110>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_OC2_SetConfig+0x74>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a2b      	ldr	r2, [pc, #172]	@ (8008c4c <TIM_OC2_SetConfig+0x114>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_OC2_SetConfig+0x74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c50 <TIM_OC2_SetConfig+0x118>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d10d      	bne.n	8008bc8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	011b      	lsls	r3, r3, #4
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a1f      	ldr	r2, [pc, #124]	@ (8008c48 <TIM_OC2_SetConfig+0x110>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d013      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xc0>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c4c <TIM_OC2_SetConfig+0x114>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xc0>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a1e      	ldr	r2, [pc, #120]	@ (8008c54 <TIM_OC2_SetConfig+0x11c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xc0>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a1d      	ldr	r2, [pc, #116]	@ (8008c58 <TIM_OC2_SetConfig+0x120>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xc0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a1c      	ldr	r2, [pc, #112]	@ (8008c5c <TIM_OC2_SetConfig+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC2_SetConfig+0xc0>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a17      	ldr	r2, [pc, #92]	@ (8008c50 <TIM_OC2_SetConfig+0x118>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d113      	bne.n	8008c20 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008c06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	699b      	ldr	r3, [r3, #24]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	621a      	str	r2, [r3, #32]
}
 8008c3a:	bf00      	nop
 8008c3c:	371c      	adds	r7, #28
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	40012c00 	.word	0x40012c00
 8008c4c:	40013400 	.word	0x40013400
 8008c50:	40015000 	.word	0x40015000
 8008c54:	40014000 	.word	0x40014000
 8008c58:	40014400 	.word	0x40014400
 8008c5c:	40014800 	.word	0x40014800

08008c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0303 	bic.w	r3, r3, #3
 8008c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	021b      	lsls	r3, r3, #8
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8008d6c <TIM_OC3_SetConfig+0x10c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_OC3_SetConfig+0x72>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8008d70 <TIM_OC3_SetConfig+0x110>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_OC3_SetConfig+0x72>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a29      	ldr	r2, [pc, #164]	@ (8008d74 <TIM_OC3_SetConfig+0x114>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d10d      	bne.n	8008cee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	021b      	lsls	r3, r3, #8
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a1e      	ldr	r2, [pc, #120]	@ (8008d6c <TIM_OC3_SetConfig+0x10c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d013      	beq.n	8008d1e <TIM_OC3_SetConfig+0xbe>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d70 <TIM_OC3_SetConfig+0x110>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d00f      	beq.n	8008d1e <TIM_OC3_SetConfig+0xbe>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a1d      	ldr	r2, [pc, #116]	@ (8008d78 <TIM_OC3_SetConfig+0x118>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d00b      	beq.n	8008d1e <TIM_OC3_SetConfig+0xbe>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1c      	ldr	r2, [pc, #112]	@ (8008d7c <TIM_OC3_SetConfig+0x11c>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d007      	beq.n	8008d1e <TIM_OC3_SetConfig+0xbe>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1b      	ldr	r2, [pc, #108]	@ (8008d80 <TIM_OC3_SetConfig+0x120>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d003      	beq.n	8008d1e <TIM_OC3_SetConfig+0xbe>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a16      	ldr	r2, [pc, #88]	@ (8008d74 <TIM_OC3_SetConfig+0x114>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d113      	bne.n	8008d46 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	695b      	ldr	r3, [r3, #20]
 8008d32:	011b      	lsls	r3, r3, #4
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	621a      	str	r2, [r3, #32]
}
 8008d60:	bf00      	nop
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	40012c00 	.word	0x40012c00
 8008d70:	40013400 	.word	0x40013400
 8008d74:	40015000 	.word	0x40015000
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40014400 	.word	0x40014400
 8008d80:	40014800 	.word	0x40014800

08008d84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008dbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008dd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	031b      	lsls	r3, r3, #12
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a2c      	ldr	r2, [pc, #176]	@ (8008e94 <TIM_OC4_SetConfig+0x110>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d007      	beq.n	8008df8 <TIM_OC4_SetConfig+0x74>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a2b      	ldr	r2, [pc, #172]	@ (8008e98 <TIM_OC4_SetConfig+0x114>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d003      	beq.n	8008df8 <TIM_OC4_SetConfig+0x74>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a2a      	ldr	r2, [pc, #168]	@ (8008e9c <TIM_OC4_SetConfig+0x118>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d10d      	bne.n	8008e14 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008dfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	031b      	lsls	r3, r3, #12
 8008e06:	697a      	ldr	r2, [r7, #20]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a1f      	ldr	r2, [pc, #124]	@ (8008e94 <TIM_OC4_SetConfig+0x110>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d013      	beq.n	8008e44 <TIM_OC4_SetConfig+0xc0>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8008e98 <TIM_OC4_SetConfig+0x114>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d00f      	beq.n	8008e44 <TIM_OC4_SetConfig+0xc0>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a1e      	ldr	r2, [pc, #120]	@ (8008ea0 <TIM_OC4_SetConfig+0x11c>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00b      	beq.n	8008e44 <TIM_OC4_SetConfig+0xc0>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008ea4 <TIM_OC4_SetConfig+0x120>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d007      	beq.n	8008e44 <TIM_OC4_SetConfig+0xc0>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea8 <TIM_OC4_SetConfig+0x124>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d003      	beq.n	8008e44 <TIM_OC4_SetConfig+0xc0>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	4a17      	ldr	r2, [pc, #92]	@ (8008e9c <TIM_OC4_SetConfig+0x118>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d113      	bne.n	8008e6c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e4a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008e52:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	019b      	lsls	r3, r3, #6
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	019b      	lsls	r3, r3, #6
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68fa      	ldr	r2, [r7, #12]
 8008e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	621a      	str	r2, [r3, #32]
}
 8008e86:	bf00      	nop
 8008e88:	371c      	adds	r7, #28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e90:	4770      	bx	lr
 8008e92:	bf00      	nop
 8008e94:	40012c00 	.word	0x40012c00
 8008e98:	40013400 	.word	0x40013400
 8008e9c:	40015000 	.word	0x40015000
 8008ea0:	40014000 	.word	0x40014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	40014800 	.word	0x40014800

08008eac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a1b      	ldr	r3, [r3, #32]
 8008ec0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008ef0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	041b      	lsls	r3, r3, #16
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a19      	ldr	r2, [pc, #100]	@ (8008f68 <TIM_OC5_SetConfig+0xbc>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d013      	beq.n	8008f2e <TIM_OC5_SetConfig+0x82>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a18      	ldr	r2, [pc, #96]	@ (8008f6c <TIM_OC5_SetConfig+0xc0>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d00f      	beq.n	8008f2e <TIM_OC5_SetConfig+0x82>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a17      	ldr	r2, [pc, #92]	@ (8008f70 <TIM_OC5_SetConfig+0xc4>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d00b      	beq.n	8008f2e <TIM_OC5_SetConfig+0x82>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a16      	ldr	r2, [pc, #88]	@ (8008f74 <TIM_OC5_SetConfig+0xc8>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d007      	beq.n	8008f2e <TIM_OC5_SetConfig+0x82>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a15      	ldr	r2, [pc, #84]	@ (8008f78 <TIM_OC5_SetConfig+0xcc>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d003      	beq.n	8008f2e <TIM_OC5_SetConfig+0x82>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a14      	ldr	r2, [pc, #80]	@ (8008f7c <TIM_OC5_SetConfig+0xd0>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d109      	bne.n	8008f42 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	021b      	lsls	r3, r3, #8
 8008f3c:	697a      	ldr	r2, [r7, #20]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	621a      	str	r2, [r3, #32]
}
 8008f5c:	bf00      	nop
 8008f5e:	371c      	adds	r7, #28
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40013400 	.word	0x40013400
 8008f70:	40014000 	.word	0x40014000
 8008f74:	40014400 	.word	0x40014400
 8008f78:	40014800 	.word	0x40014800
 8008f7c:	40015000 	.word	0x40015000

08008f80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b087      	sub	sp, #28
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	021b      	lsls	r3, r3, #8
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	051b      	lsls	r3, r3, #20
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1a      	ldr	r2, [pc, #104]	@ (8009040 <TIM_OC6_SetConfig+0xc0>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d013      	beq.n	8009004 <TIM_OC6_SetConfig+0x84>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a19      	ldr	r2, [pc, #100]	@ (8009044 <TIM_OC6_SetConfig+0xc4>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00f      	beq.n	8009004 <TIM_OC6_SetConfig+0x84>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	@ (8009048 <TIM_OC6_SetConfig+0xc8>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00b      	beq.n	8009004 <TIM_OC6_SetConfig+0x84>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a17      	ldr	r2, [pc, #92]	@ (800904c <TIM_OC6_SetConfig+0xcc>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_OC6_SetConfig+0x84>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <TIM_OC6_SetConfig+0xd0>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC6_SetConfig+0x84>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <TIM_OC6_SetConfig+0xd4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d109      	bne.n	8009018 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800900a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	bf00      	nop
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	40012c00 	.word	0x40012c00
 8009044:	40013400 	.word	0x40013400
 8009048:	40014000 	.word	0x40014000
 800904c:	40014400 	.word	0x40014400
 8009050:	40014800 	.word	0x40014800
 8009054:	40015000 	.word	0x40015000

08009058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	f023 0201 	bic.w	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f023 030a 	bic.w	r3, r3, #10
 8009094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4313      	orrs	r3, r2
 800909c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	621a      	str	r2, [r3, #32]
}
 80090aa:	bf00      	nop
 80090ac:	371c      	adds	r7, #28
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b087      	sub	sp, #28
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	60f8      	str	r0, [r7, #12]
 80090be:	60b9      	str	r1, [r7, #8]
 80090c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a1b      	ldr	r3, [r3, #32]
 80090cc:	f023 0210 	bic.w	r2, r3, #16
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	031b      	lsls	r3, r3, #12
 80090e6:	693a      	ldr	r2, [r7, #16]
 80090e8:	4313      	orrs	r3, r2
 80090ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	6078      	str	r0, [r7, #4]
 800911e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800912c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	f043 0307 	orr.w	r3, r3, #7
 800913c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	609a      	str	r2, [r3, #8]
}
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800916a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	021a      	lsls	r2, r3, #8
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	431a      	orrs	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4313      	orrs	r3, r2
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	609a      	str	r2, [r3, #8]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2201      	movs	r2, #1
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1a      	ldr	r2, [r3, #32]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	43db      	mvns	r3, r3
 80091b2:	401a      	ands	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 031f 	and.w	r3, r3, #31
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	431a      	orrs	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a26      	ldr	r2, [pc, #152]	@ (8009280 <TIM_ResetCallback+0xa4>)
 80091e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a25      	ldr	r2, [pc, #148]	@ (8009284 <TIM_ResetCallback+0xa8>)
 80091f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a24      	ldr	r2, [pc, #144]	@ (8009288 <TIM_ResetCallback+0xac>)
 80091f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a23      	ldr	r2, [pc, #140]	@ (800928c <TIM_ResetCallback+0xb0>)
 8009200:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a22      	ldr	r2, [pc, #136]	@ (8009290 <TIM_ResetCallback+0xb4>)
 8009208:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a21      	ldr	r2, [pc, #132]	@ (8009294 <TIM_ResetCallback+0xb8>)
 8009210:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a20      	ldr	r2, [pc, #128]	@ (8009298 <TIM_ResetCallback+0xbc>)
 8009218:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a1f      	ldr	r2, [pc, #124]	@ (800929c <TIM_ResetCallback+0xc0>)
 8009220:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a1e      	ldr	r2, [pc, #120]	@ (80092a0 <TIM_ResetCallback+0xc4>)
 8009228:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a1d      	ldr	r2, [pc, #116]	@ (80092a4 <TIM_ResetCallback+0xc8>)
 8009230:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a1c      	ldr	r2, [pc, #112]	@ (80092a8 <TIM_ResetCallback+0xcc>)
 8009238:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a1b      	ldr	r2, [pc, #108]	@ (80092ac <TIM_ResetCallback+0xd0>)
 8009240:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a1a      	ldr	r2, [pc, #104]	@ (80092b0 <TIM_ResetCallback+0xd4>)
 8009248:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a19      	ldr	r2, [pc, #100]	@ (80092b4 <TIM_ResetCallback+0xd8>)
 8009250:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a18      	ldr	r2, [pc, #96]	@ (80092b8 <TIM_ResetCallback+0xdc>)
 8009258:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	4a17      	ldr	r2, [pc, #92]	@ (80092bc <TIM_ResetCallback+0xe0>)
 8009260:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a16      	ldr	r2, [pc, #88]	@ (80092c0 <TIM_ResetCallback+0xe4>)
 8009268:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	4a15      	ldr	r2, [pc, #84]	@ (80092c4 <TIM_ResetCallback+0xe8>)
 8009270:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	0800321d 	.word	0x0800321d
 8009284:	080087e9 	.word	0x080087e9
 8009288:	08008861 	.word	0x08008861
 800928c:	08008875 	.word	0x08008875
 8009290:	08008811 	.word	0x08008811
 8009294:	08008825 	.word	0x08008825
 8009298:	080087fd 	.word	0x080087fd
 800929c:	08008839 	.word	0x08008839
 80092a0:	0800884d 	.word	0x0800884d
 80092a4:	08008889 	.word	0x08008889
 80092a8:	0800951d 	.word	0x0800951d
 80092ac:	08009531 	.word	0x08009531
 80092b0:	08009545 	.word	0x08009545
 80092b4:	08009559 	.word	0x08009559
 80092b8:	0800956d 	.word	0x0800956d
 80092bc:	08009581 	.word	0x08009581
 80092c0:	08009595 	.word	0x08009595
 80092c4:	080095a9 	.word	0x080095a9

080092c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d101      	bne.n	80092e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092dc:	2302      	movs	r3, #2
 80092de:	e074      	b.n	80093ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2202      	movs	r2, #2
 80092ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4a34      	ldr	r2, [pc, #208]	@ (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d009      	beq.n	800931e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a33      	ldr	r2, [pc, #204]	@ (80093dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d004      	beq.n	800931e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a31      	ldr	r2, [pc, #196]	@ (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d108      	bne.n	8009330 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009324:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a21      	ldr	r2, [pc, #132]	@ (80093d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d022      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d01d      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a1f      	ldr	r2, [pc, #124]	@ (80093e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d018      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a1d      	ldr	r2, [pc, #116]	@ (80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d013      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a1c      	ldr	r2, [pc, #112]	@ (80093ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d00e      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a15      	ldr	r2, [pc, #84]	@ (80093dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d009      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a18      	ldr	r2, [pc, #96]	@ (80093f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d004      	beq.n	800939e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a11      	ldr	r2, [pc, #68]	@ (80093e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d10c      	bne.n	80093b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr
 80093d6:	bf00      	nop
 80093d8:	40012c00 	.word	0x40012c00
 80093dc:	40013400 	.word	0x40013400
 80093e0:	40015000 	.word	0x40015000
 80093e4:	40000400 	.word	0x40000400
 80093e8:	40000800 	.word	0x40000800
 80093ec:	40000c00 	.word	0x40000c00
 80093f0:	40014000 	.word	0x40014000

080093f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093fe:	2300      	movs	r3, #0
 8009400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800940c:	2302      	movs	r3, #2
 800940e:	e078      	b.n	8009502 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	4313      	orrs	r3, r2
 8009424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	4313      	orrs	r3, r2
 8009432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	4313      	orrs	r3, r2
 8009440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4313      	orrs	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	691b      	ldr	r3, [r3, #16]
 800945a:	4313      	orrs	r3, r2
 800945c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	695b      	ldr	r3, [r3, #20]
 8009468:	4313      	orrs	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	4313      	orrs	r3, r2
 8009478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	041b      	lsls	r3, r3, #16
 8009486:	4313      	orrs	r3, r2
 8009488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	4313      	orrs	r3, r2
 8009496:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a1c      	ldr	r2, [pc, #112]	@ (8009510 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d009      	beq.n	80094b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a1b      	ldr	r2, [pc, #108]	@ (8009514 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d004      	beq.n	80094b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a19      	ldr	r2, [pc, #100]	@ (8009518 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d11c      	bne.n	80094f0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c0:	051b      	lsls	r3, r3, #20
 80094c2:	4313      	orrs	r3, r2
 80094c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	40012c00 	.word	0x40012c00
 8009514:	40013400 	.word	0x40013400
 8009518:	40015000 	.word	0x40015000

0800951c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e050      	b.n	8009670 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d114      	bne.n	8009602 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fbfb 	bl	8009ddc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a21      	ldr	r2, [pc, #132]	@ (8009678 <HAL_UART_Init+0xbc>)
 80095f4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2224      	movs	r2, #36	@ 0x24
 8009606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 ff28 	bl	800a478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fc29 	bl	8009e80 <UART_SetConfig>
 800962e:	4603      	mov	r3, r0
 8009630:	2b01      	cmp	r3, #1
 8009632:	d101      	bne.n	8009638 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e01b      	b.n	8009670 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009646:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689a      	ldr	r2, [r3, #8]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009656:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 ffa7 	bl	800a5bc <UART_CheckIdleState>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	080046e5 	.word	0x080046e5

0800967c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b0ba      	sub	sp, #232	@ 0xe8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096aa:	4013      	ands	r3, r2
 80096ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d11b      	bne.n	80096f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d015      	beq.n	80096f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096c8:	f003 0320 	and.w	r3, r3, #32
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d105      	bne.n	80096dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d009      	beq.n	80096f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 8312 	beq.w	8009d0a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
      }
      return;
 80096ee:	e30c      	b.n	8009d0a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8129 	beq.w	800994c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80096fe:	4b90      	ldr	r3, [pc, #576]	@ (8009940 <HAL_UART_IRQHandler+0x2c4>)
 8009700:	4013      	ands	r3, r2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009706:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800970a:	4b8e      	ldr	r3, [pc, #568]	@ (8009944 <HAL_UART_IRQHandler+0x2c8>)
 800970c:	4013      	ands	r3, r2
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 811c 	beq.w	800994c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	2b00      	cmp	r3, #0
 800971e:	d011      	beq.n	8009744 <HAL_UART_IRQHandler+0xc8>
 8009720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00b      	beq.n	8009744 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2201      	movs	r2, #1
 8009732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800973a:	f043 0201 	orr.w	r2, r3, #1
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b00      	cmp	r3, #0
 800974e:	d011      	beq.n	8009774 <HAL_UART_IRQHandler+0xf8>
 8009750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d00b      	beq.n	8009774 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2202      	movs	r2, #2
 8009762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800976a:	f043 0204 	orr.w	r2, r3, #4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009778:	f003 0304 	and.w	r3, r3, #4
 800977c:	2b00      	cmp	r3, #0
 800977e:	d011      	beq.n	80097a4 <HAL_UART_IRQHandler+0x128>
 8009780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d00b      	beq.n	80097a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2204      	movs	r2, #4
 8009792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	f043 0202 	orr.w	r2, r3, #2
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d017      	beq.n	80097e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80097c0:	4b5f      	ldr	r3, [pc, #380]	@ (8009940 <HAL_UART_IRQHandler+0x2c4>)
 80097c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2208      	movs	r2, #8
 80097ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097d6:	f043 0208 	orr.w	r2, r3, #8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d012      	beq.n	8009812 <HAL_UART_IRQHandler+0x196>
 80097ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80097f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00c      	beq.n	8009812 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009808:	f043 0220 	orr.w	r2, r3, #32
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009818:	2b00      	cmp	r3, #0
 800981a:	f000 8278 	beq.w	8009d0e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800981e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	d013      	beq.n	8009852 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800982a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800982e:	f003 0320 	and.w	r3, r3, #32
 8009832:	2b00      	cmp	r3, #0
 8009834:	d105      	bne.n	8009842 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800983a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d007      	beq.n	8009852 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689b      	ldr	r3, [r3, #8]
 8009862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009866:	2b40      	cmp	r3, #64	@ 0x40
 8009868:	d005      	beq.n	8009876 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800986a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800986e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009872:	2b00      	cmp	r3, #0
 8009874:	d058      	beq.n	8009928 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 ffb7 	bl	800a7ea <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009886:	2b40      	cmp	r3, #64	@ 0x40
 8009888:	d148      	bne.n	800991c <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3308      	adds	r3, #8
 8009890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009898:	e853 3f00 	ldrex	r3, [r3]
 800989c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	3308      	adds	r3, #8
 80098b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80098b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80098ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80098c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80098c6:	e841 2300 	strex	r3, r2, [r1]
 80098ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80098ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d1d9      	bne.n	800988a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d017      	beq.n	8009910 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e6:	4a18      	ldr	r2, [pc, #96]	@ (8009948 <HAL_UART_IRQHandler+0x2cc>)
 80098e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fc fc02 	bl	80060fa <HAL_DMA_Abort_IT>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01f      	beq.n	800993c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800990a:	4610      	mov	r0, r2
 800990c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990e:	e015      	b.n	800993c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800991a:	e00f      	b.n	800993c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009926:	e009      	b.n	800993c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800993a:	e1e8      	b.n	8009d0e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800993c:	bf00      	nop
    return;
 800993e:	e1e6      	b.n	8009d0e <HAL_UART_IRQHandler+0x692>
 8009940:	10000001 	.word	0x10000001
 8009944:	04000120 	.word	0x04000120
 8009948:	0800a8b7 	.word	0x0800a8b7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009950:	2b01      	cmp	r3, #1
 8009952:	f040 8176 	bne.w	8009c42 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800995a:	f003 0310 	and.w	r3, r3, #16
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 816f 	beq.w	8009c42 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009968:	f003 0310 	and.w	r3, r3, #16
 800996c:	2b00      	cmp	r3, #0
 800996e:	f000 8168 	beq.w	8009c42 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2210      	movs	r2, #16
 8009978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009984:	2b40      	cmp	r3, #64	@ 0x40
 8009986:	f040 80dc 	bne.w	8009b42 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009998:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 80b1 	beq.w	8009b04 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80099a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099ac:	429a      	cmp	r2, r3
 80099ae:	f080 80a9 	bcs.w	8009b04 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80099b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0320 	and.w	r3, r3, #32
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 8087 	bne.w	8009ade <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80099dc:	e853 3f00 	ldrex	r3, [r3]
 80099e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80099e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80099e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80099ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	461a      	mov	r2, r3
 80099f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80099fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009a06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009a12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1da      	bne.n	80099d0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	3308      	adds	r3, #8
 8009a20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009a2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a2c:	f023 0301 	bic.w	r3, r3, #1
 8009a30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	3308      	adds	r3, #8
 8009a3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009a3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009a42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009a50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e1      	bne.n	8009a1a <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009a66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	3308      	adds	r3, #8
 8009a76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009a7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009a80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009a82:	e841 2300 	strex	r3, r2, [r1]
 8009a86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d1e3      	bne.n	8009a56 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aa4:	e853 3f00 	ldrex	r3, [r3]
 8009aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009aaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aac:	f023 0310 	bic.w	r3, r3, #16
 8009ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009abe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009ac0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009ac4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009acc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e4      	bne.n	8009a9c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fc fab5 	bl	8006048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009af6:	b292      	uxth	r2, r2
 8009af8:	1a8a      	subs	r2, r1, r2
 8009afa:	b292      	uxth	r2, r2
 8009afc:	4611      	mov	r1, r2
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009b02:	e106      	b.n	8009d12 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009b0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	f040 80ff 	bne.w	8009d12 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f003 0320 	and.w	r3, r3, #32
 8009b22:	2b20      	cmp	r3, #32
 8009b24:	f040 80f5 	bne.w	8009d12 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	4798      	blx	r3
      return;
 8009b40:	e0e7      	b.n	8009d12 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 80d9 	beq.w	8009d16 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009b64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	f000 80d4 	beq.w	8009d16 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b76:	e853 3f00 	ldrex	r3, [r3]
 8009b7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009b90:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b92:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e4      	bne.n	8009b6e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3308      	adds	r3, #8
 8009baa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009bcc:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bd4:	e841 2300 	strex	r3, r2, [r1]
 8009bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1e1      	bne.n	8009ba4 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2220      	movs	r2, #32
 8009be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	e853 3f00 	ldrex	r3, [r3]
 8009c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f023 0310 	bic.w	r3, r3, #16
 8009c08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	461a      	mov	r2, r3
 8009c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009c16:	61fb      	str	r3, [r7, #28]
 8009c18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	69b9      	ldr	r1, [r7, #24]
 8009c1c:	69fa      	ldr	r2, [r7, #28]
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	617b      	str	r3, [r7, #20]
   return(result);
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e4      	bne.n	8009bf4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2202      	movs	r2, #2
 8009c2e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009c36:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c40:	e069      	b.n	8009d16 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d010      	beq.n	8009c70 <HAL_UART_IRQHandler+0x5f4>
 8009c4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009c62:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c6e:	e055      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d014      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d105      	bne.n	8009c94 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d008      	beq.n	8009ca6 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d03e      	beq.n	8009d1a <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	4798      	blx	r3
    }
    return;
 8009ca4:	e039      	b.n	8009d1a <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009caa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d009      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x64a>
 8009cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fe0d 	bl	800a8de <UART_EndTransmit_IT>
    return;
 8009cc4:	e02a      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <HAL_UART_IRQHandler+0x66e>
 8009cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cd6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ce8:	e018      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d012      	beq.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
 8009cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da0e      	bge.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d08:	e008      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d0a:	bf00      	nop
 8009d0c:	e006      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d0e:	bf00      	nop
 8009d10:	e004      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d12:	bf00      	nop
 8009d14:	e002      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
      return;
 8009d16:	bf00      	nop
 8009d18:	e000      	b.n	8009d1c <HAL_UART_IRQHandler+0x6a0>
    return;
 8009d1a:	bf00      	nop
  }
}
 8009d1c:	37e8      	adds	r7, #232	@ 0xe8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop

08009d24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dd0:	bf00      	nop
 8009dd2:	370c      	adds	r7, #12
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	4a1a      	ldr	r2, [pc, #104]	@ (8009e50 <UART_InitCallbacksToDefault+0x74>)
 8009de8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a19      	ldr	r2, [pc, #100]	@ (8009e54 <UART_InitCallbacksToDefault+0x78>)
 8009df0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a18      	ldr	r2, [pc, #96]	@ (8009e58 <UART_InitCallbacksToDefault+0x7c>)
 8009df8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a17      	ldr	r2, [pc, #92]	@ (8009e5c <UART_InitCallbacksToDefault+0x80>)
 8009e00:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a16      	ldr	r2, [pc, #88]	@ (8009e60 <UART_InitCallbacksToDefault+0x84>)
 8009e08:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a15      	ldr	r2, [pc, #84]	@ (8009e64 <UART_InitCallbacksToDefault+0x88>)
 8009e10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a14      	ldr	r2, [pc, #80]	@ (8009e68 <UART_InitCallbacksToDefault+0x8c>)
 8009e18:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a13      	ldr	r2, [pc, #76]	@ (8009e6c <UART_InitCallbacksToDefault+0x90>)
 8009e20:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a12      	ldr	r2, [pc, #72]	@ (8009e70 <UART_InitCallbacksToDefault+0x94>)
 8009e28:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a11      	ldr	r2, [pc, #68]	@ (8009e74 <UART_InitCallbacksToDefault+0x98>)
 8009e30:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a10      	ldr	r2, [pc, #64]	@ (8009e78 <UART_InitCallbacksToDefault+0x9c>)
 8009e38:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8009e7c <UART_InitCallbacksToDefault+0xa0>)
 8009e40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	08009d39 	.word	0x08009d39
 8009e54:	08009d25 	.word	0x08009d25
 8009e58:	08009d61 	.word	0x08009d61
 8009e5c:	08009d4d 	.word	0x08009d4d
 8009e60:	08009d75 	.word	0x08009d75
 8009e64:	08009d89 	.word	0x08009d89
 8009e68:	08009d9d 	.word	0x08009d9d
 8009e6c:	08009db1 	.word	0x08009db1
 8009e70:	0800a939 	.word	0x0800a939
 8009e74:	0800a94d 	.word	0x0800a94d
 8009e78:	0800a961 	.word	0x0800a961
 8009e7c:	08009dc5 	.word	0x08009dc5

08009e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e84:	b08c      	sub	sp, #48	@ 0x30
 8009e86:	af00      	add	r7, sp, #0
 8009e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	691b      	ldr	r3, [r3, #16]
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4baa      	ldr	r3, [pc, #680]	@ (800a158 <UART_SetConfig+0x2d8>)
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	697a      	ldr	r2, [r7, #20]
 8009eb4:	6812      	ldr	r2, [r2, #0]
 8009eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009eb8:	430b      	orrs	r3, r1
 8009eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	68da      	ldr	r2, [r3, #12]
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	430a      	orrs	r2, r1
 8009ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	699b      	ldr	r3, [r3, #24]
 8009ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a9f      	ldr	r2, [pc, #636]	@ (800a15c <UART_SetConfig+0x2dc>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d004      	beq.n	8009eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009ef6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009f00:	430b      	orrs	r3, r1
 8009f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f0a:	f023 010f 	bic.w	r1, r3, #15
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a90      	ldr	r2, [pc, #576]	@ (800a160 <UART_SetConfig+0x2e0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d125      	bne.n	8009f70 <UART_SetConfig+0xf0>
 8009f24:	4b8f      	ldr	r3, [pc, #572]	@ (800a164 <UART_SetConfig+0x2e4>)
 8009f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b03      	cmp	r3, #3
 8009f30:	d81a      	bhi.n	8009f68 <UART_SetConfig+0xe8>
 8009f32:	a201      	add	r2, pc, #4	@ (adr r2, 8009f38 <UART_SetConfig+0xb8>)
 8009f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f38:	08009f49 	.word	0x08009f49
 8009f3c:	08009f59 	.word	0x08009f59
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009f61 	.word	0x08009f61
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f4e:	e116      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009f50:	2302      	movs	r3, #2
 8009f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f56:	e112      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009f58:	2304      	movs	r3, #4
 8009f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f5e:	e10e      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009f60:	2308      	movs	r3, #8
 8009f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f66:	e10a      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009f68:	2310      	movs	r3, #16
 8009f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f6e:	e106      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a7c      	ldr	r2, [pc, #496]	@ (800a168 <UART_SetConfig+0x2e8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d138      	bne.n	8009fec <UART_SetConfig+0x16c>
 8009f7a:	4b7a      	ldr	r3, [pc, #488]	@ (800a164 <UART_SetConfig+0x2e4>)
 8009f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f80:	f003 030c 	and.w	r3, r3, #12
 8009f84:	2b0c      	cmp	r3, #12
 8009f86:	d82d      	bhi.n	8009fe4 <UART_SetConfig+0x164>
 8009f88:	a201      	add	r2, pc, #4	@ (adr r2, 8009f90 <UART_SetConfig+0x110>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	08009fc5 	.word	0x08009fc5
 8009f94:	08009fe5 	.word	0x08009fe5
 8009f98:	08009fe5 	.word	0x08009fe5
 8009f9c:	08009fe5 	.word	0x08009fe5
 8009fa0:	08009fd5 	.word	0x08009fd5
 8009fa4:	08009fe5 	.word	0x08009fe5
 8009fa8:	08009fe5 	.word	0x08009fe5
 8009fac:	08009fe5 	.word	0x08009fe5
 8009fb0:	08009fcd 	.word	0x08009fcd
 8009fb4:	08009fe5 	.word	0x08009fe5
 8009fb8:	08009fe5 	.word	0x08009fe5
 8009fbc:	08009fe5 	.word	0x08009fe5
 8009fc0:	08009fdd 	.word	0x08009fdd
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fca:	e0d8      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009fcc:	2302      	movs	r3, #2
 8009fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fd2:	e0d4      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009fd4:	2304      	movs	r3, #4
 8009fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fda:	e0d0      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009fdc:	2308      	movs	r3, #8
 8009fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	e0cc      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009fe4:	2310      	movs	r3, #16
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009fea:	e0c8      	b.n	800a17e <UART_SetConfig+0x2fe>
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800a16c <UART_SetConfig+0x2ec>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d125      	bne.n	800a042 <UART_SetConfig+0x1c2>
 8009ff6:	4b5b      	ldr	r3, [pc, #364]	@ (800a164 <UART_SetConfig+0x2e4>)
 8009ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ffc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a000:	2b30      	cmp	r3, #48	@ 0x30
 800a002:	d016      	beq.n	800a032 <UART_SetConfig+0x1b2>
 800a004:	2b30      	cmp	r3, #48	@ 0x30
 800a006:	d818      	bhi.n	800a03a <UART_SetConfig+0x1ba>
 800a008:	2b20      	cmp	r3, #32
 800a00a:	d00a      	beq.n	800a022 <UART_SetConfig+0x1a2>
 800a00c:	2b20      	cmp	r3, #32
 800a00e:	d814      	bhi.n	800a03a <UART_SetConfig+0x1ba>
 800a010:	2b00      	cmp	r3, #0
 800a012:	d002      	beq.n	800a01a <UART_SetConfig+0x19a>
 800a014:	2b10      	cmp	r3, #16
 800a016:	d008      	beq.n	800a02a <UART_SetConfig+0x1aa>
 800a018:	e00f      	b.n	800a03a <UART_SetConfig+0x1ba>
 800a01a:	2300      	movs	r3, #0
 800a01c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a020:	e0ad      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a022:	2302      	movs	r3, #2
 800a024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a028:	e0a9      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a02a:	2304      	movs	r3, #4
 800a02c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a030:	e0a5      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a032:	2308      	movs	r3, #8
 800a034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a038:	e0a1      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a03a:	2310      	movs	r3, #16
 800a03c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a040:	e09d      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a4a      	ldr	r2, [pc, #296]	@ (800a170 <UART_SetConfig+0x2f0>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d125      	bne.n	800a098 <UART_SetConfig+0x218>
 800a04c:	4b45      	ldr	r3, [pc, #276]	@ (800a164 <UART_SetConfig+0x2e4>)
 800a04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a052:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a056:	2bc0      	cmp	r3, #192	@ 0xc0
 800a058:	d016      	beq.n	800a088 <UART_SetConfig+0x208>
 800a05a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a05c:	d818      	bhi.n	800a090 <UART_SetConfig+0x210>
 800a05e:	2b80      	cmp	r3, #128	@ 0x80
 800a060:	d00a      	beq.n	800a078 <UART_SetConfig+0x1f8>
 800a062:	2b80      	cmp	r3, #128	@ 0x80
 800a064:	d814      	bhi.n	800a090 <UART_SetConfig+0x210>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <UART_SetConfig+0x1f0>
 800a06a:	2b40      	cmp	r3, #64	@ 0x40
 800a06c:	d008      	beq.n	800a080 <UART_SetConfig+0x200>
 800a06e:	e00f      	b.n	800a090 <UART_SetConfig+0x210>
 800a070:	2300      	movs	r3, #0
 800a072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a076:	e082      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a078:	2302      	movs	r3, #2
 800a07a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a07e:	e07e      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a080:	2304      	movs	r3, #4
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a086:	e07a      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a088:	2308      	movs	r3, #8
 800a08a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a08e:	e076      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a090:	2310      	movs	r3, #16
 800a092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a096:	e072      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a35      	ldr	r2, [pc, #212]	@ (800a174 <UART_SetConfig+0x2f4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d12a      	bne.n	800a0f8 <UART_SetConfig+0x278>
 800a0a2:	4b30      	ldr	r3, [pc, #192]	@ (800a164 <UART_SetConfig+0x2e4>)
 800a0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0b0:	d01a      	beq.n	800a0e8 <UART_SetConfig+0x268>
 800a0b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0b6:	d81b      	bhi.n	800a0f0 <UART_SetConfig+0x270>
 800a0b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0bc:	d00c      	beq.n	800a0d8 <UART_SetConfig+0x258>
 800a0be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c2:	d815      	bhi.n	800a0f0 <UART_SetConfig+0x270>
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d003      	beq.n	800a0d0 <UART_SetConfig+0x250>
 800a0c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0cc:	d008      	beq.n	800a0e0 <UART_SetConfig+0x260>
 800a0ce:	e00f      	b.n	800a0f0 <UART_SetConfig+0x270>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0d6:	e052      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0de:	e04e      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a0e0:	2304      	movs	r3, #4
 800a0e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0e6:	e04a      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a0e8:	2308      	movs	r3, #8
 800a0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0ee:	e046      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a0f6:	e042      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a17      	ldr	r2, [pc, #92]	@ (800a15c <UART_SetConfig+0x2dc>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d13a      	bne.n	800a178 <UART_SetConfig+0x2f8>
 800a102:	4b18      	ldr	r3, [pc, #96]	@ (800a164 <UART_SetConfig+0x2e4>)
 800a104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a10c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a110:	d01a      	beq.n	800a148 <UART_SetConfig+0x2c8>
 800a112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a116:	d81b      	bhi.n	800a150 <UART_SetConfig+0x2d0>
 800a118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a11c:	d00c      	beq.n	800a138 <UART_SetConfig+0x2b8>
 800a11e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a122:	d815      	bhi.n	800a150 <UART_SetConfig+0x2d0>
 800a124:	2b00      	cmp	r3, #0
 800a126:	d003      	beq.n	800a130 <UART_SetConfig+0x2b0>
 800a128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a12c:	d008      	beq.n	800a140 <UART_SetConfig+0x2c0>
 800a12e:	e00f      	b.n	800a150 <UART_SetConfig+0x2d0>
 800a130:	2300      	movs	r3, #0
 800a132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a136:	e022      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a138:	2302      	movs	r3, #2
 800a13a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a13e:	e01e      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a140:	2304      	movs	r3, #4
 800a142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a146:	e01a      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a148:	2308      	movs	r3, #8
 800a14a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a14e:	e016      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a150:	2310      	movs	r3, #16
 800a152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a156:	e012      	b.n	800a17e <UART_SetConfig+0x2fe>
 800a158:	cfff69f3 	.word	0xcfff69f3
 800a15c:	40008000 	.word	0x40008000
 800a160:	40013800 	.word	0x40013800
 800a164:	40021000 	.word	0x40021000
 800a168:	40004400 	.word	0x40004400
 800a16c:	40004800 	.word	0x40004800
 800a170:	40004c00 	.word	0x40004c00
 800a174:	40005000 	.word	0x40005000
 800a178:	2310      	movs	r3, #16
 800a17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4aae      	ldr	r2, [pc, #696]	@ (800a43c <UART_SetConfig+0x5bc>)
 800a184:	4293      	cmp	r3, r2
 800a186:	f040 8097 	bne.w	800a2b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a18a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a18e:	2b08      	cmp	r3, #8
 800a190:	d823      	bhi.n	800a1da <UART_SetConfig+0x35a>
 800a192:	a201      	add	r2, pc, #4	@ (adr r2, 800a198 <UART_SetConfig+0x318>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1bd 	.word	0x0800a1bd
 800a19c:	0800a1db 	.word	0x0800a1db
 800a1a0:	0800a1c5 	.word	0x0800a1c5
 800a1a4:	0800a1db 	.word	0x0800a1db
 800a1a8:	0800a1cb 	.word	0x0800a1cb
 800a1ac:	0800a1db 	.word	0x0800a1db
 800a1b0:	0800a1db 	.word	0x0800a1db
 800a1b4:	0800a1db 	.word	0x0800a1db
 800a1b8:	0800a1d3 	.word	0x0800a1d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1bc:	f7fd f844 	bl	8007248 <HAL_RCC_GetPCLK1Freq>
 800a1c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1c2:	e010      	b.n	800a1e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1c4:	4b9e      	ldr	r3, [pc, #632]	@ (800a440 <UART_SetConfig+0x5c0>)
 800a1c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1c8:	e00d      	b.n	800a1e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ca:	f7fc ffcf 	bl	800716c <HAL_RCC_GetSysClockFreq>
 800a1ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a1d0:	e009      	b.n	800a1e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a1d8:	e005      	b.n	800a1e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a1e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 8130 	beq.w	800a44e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1f2:	4a94      	ldr	r2, [pc, #592]	@ (800a444 <UART_SetConfig+0x5c4>)
 800a1f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800a200:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	685a      	ldr	r2, [r3, #4]
 800a206:	4613      	mov	r3, r2
 800a208:	005b      	lsls	r3, r3, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	69ba      	ldr	r2, [r7, #24]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d305      	bcc.n	800a21e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a218:	69ba      	ldr	r2, [r7, #24]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d903      	bls.n	800a226 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a21e:	2301      	movs	r3, #1
 800a220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a224:	e113      	b.n	800a44e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	2200      	movs	r2, #0
 800a22a:	60bb      	str	r3, [r7, #8]
 800a22c:	60fa      	str	r2, [r7, #12]
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a232:	4a84      	ldr	r2, [pc, #528]	@ (800a444 <UART_SetConfig+0x5c4>)
 800a234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2200      	movs	r2, #0
 800a23c:	603b      	str	r3, [r7, #0]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a248:	f7f6 fc24 	bl	8000a94 <__aeabi_uldivmod>
 800a24c:	4602      	mov	r2, r0
 800a24e:	460b      	mov	r3, r1
 800a250:	4610      	mov	r0, r2
 800a252:	4619      	mov	r1, r3
 800a254:	f04f 0200 	mov.w	r2, #0
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	020b      	lsls	r3, r1, #8
 800a25e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a262:	0202      	lsls	r2, r0, #8
 800a264:	6979      	ldr	r1, [r7, #20]
 800a266:	6849      	ldr	r1, [r1, #4]
 800a268:	0849      	lsrs	r1, r1, #1
 800a26a:	2000      	movs	r0, #0
 800a26c:	460c      	mov	r4, r1
 800a26e:	4605      	mov	r5, r0
 800a270:	eb12 0804 	adds.w	r8, r2, r4
 800a274:	eb43 0905 	adc.w	r9, r3, r5
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	469a      	mov	sl, r3
 800a280:	4693      	mov	fp, r2
 800a282:	4652      	mov	r2, sl
 800a284:	465b      	mov	r3, fp
 800a286:	4640      	mov	r0, r8
 800a288:	4649      	mov	r1, r9
 800a28a:	f7f6 fc03 	bl	8000a94 <__aeabi_uldivmod>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	4613      	mov	r3, r2
 800a294:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a296:	6a3b      	ldr	r3, [r7, #32]
 800a298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a29c:	d308      	bcc.n	800a2b0 <UART_SetConfig+0x430>
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2a4:	d204      	bcs.n	800a2b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	6a3a      	ldr	r2, [r7, #32]
 800a2ac:	60da      	str	r2, [r3, #12]
 800a2ae:	e0ce      	b.n	800a44e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a2b6:	e0ca      	b.n	800a44e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	69db      	ldr	r3, [r3, #28]
 800a2bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2c0:	d166      	bne.n	800a390 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a2c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a2c6:	2b08      	cmp	r3, #8
 800a2c8:	d827      	bhi.n	800a31a <UART_SetConfig+0x49a>
 800a2ca:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d0 <UART_SetConfig+0x450>)
 800a2cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d0:	0800a2f5 	.word	0x0800a2f5
 800a2d4:	0800a2fd 	.word	0x0800a2fd
 800a2d8:	0800a305 	.word	0x0800a305
 800a2dc:	0800a31b 	.word	0x0800a31b
 800a2e0:	0800a30b 	.word	0x0800a30b
 800a2e4:	0800a31b 	.word	0x0800a31b
 800a2e8:	0800a31b 	.word	0x0800a31b
 800a2ec:	0800a31b 	.word	0x0800a31b
 800a2f0:	0800a313 	.word	0x0800a313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f4:	f7fc ffa8 	bl	8007248 <HAL_RCC_GetPCLK1Freq>
 800a2f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a2fa:	e014      	b.n	800a326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2fc:	f7fc ffba 	bl	8007274 <HAL_RCC_GetPCLK2Freq>
 800a300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a302:	e010      	b.n	800a326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a304:	4b4e      	ldr	r3, [pc, #312]	@ (800a440 <UART_SetConfig+0x5c0>)
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a308:	e00d      	b.n	800a326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a30a:	f7fc ff2f 	bl	800716c <HAL_RCC_GetSysClockFreq>
 800a30e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a310:	e009      	b.n	800a326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a318:	e005      	b.n	800a326 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a31a:	2300      	movs	r3, #0
 800a31c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a31e:	2301      	movs	r3, #1
 800a320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 8090 	beq.w	800a44e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a332:	4a44      	ldr	r2, [pc, #272]	@ (800a444 <UART_SetConfig+0x5c4>)
 800a334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a338:	461a      	mov	r2, r3
 800a33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a33c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a340:	005a      	lsls	r2, r3, #1
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	085b      	lsrs	r3, r3, #1
 800a348:	441a      	add	r2, r3
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	2b0f      	cmp	r3, #15
 800a358:	d916      	bls.n	800a388 <UART_SetConfig+0x508>
 800a35a:	6a3b      	ldr	r3, [r7, #32]
 800a35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a360:	d212      	bcs.n	800a388 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a362:	6a3b      	ldr	r3, [r7, #32]
 800a364:	b29b      	uxth	r3, r3
 800a366:	f023 030f 	bic.w	r3, r3, #15
 800a36a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	b29b      	uxth	r3, r3
 800a372:	f003 0307 	and.w	r3, r3, #7
 800a376:	b29a      	uxth	r2, r3
 800a378:	8bfb      	ldrh	r3, [r7, #30]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	8bfa      	ldrh	r2, [r7, #30]
 800a384:	60da      	str	r2, [r3, #12]
 800a386:	e062      	b.n	800a44e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a38e:	e05e      	b.n	800a44e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a394:	2b08      	cmp	r3, #8
 800a396:	d828      	bhi.n	800a3ea <UART_SetConfig+0x56a>
 800a398:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <UART_SetConfig+0x520>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3c5 	.word	0x0800a3c5
 800a3a4:	0800a3cd 	.word	0x0800a3cd
 800a3a8:	0800a3d5 	.word	0x0800a3d5
 800a3ac:	0800a3eb 	.word	0x0800a3eb
 800a3b0:	0800a3db 	.word	0x0800a3db
 800a3b4:	0800a3eb 	.word	0x0800a3eb
 800a3b8:	0800a3eb 	.word	0x0800a3eb
 800a3bc:	0800a3eb 	.word	0x0800a3eb
 800a3c0:	0800a3e3 	.word	0x0800a3e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3c4:	f7fc ff40 	bl	8007248 <HAL_RCC_GetPCLK1Freq>
 800a3c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ca:	e014      	b.n	800a3f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3cc:	f7fc ff52 	bl	8007274 <HAL_RCC_GetPCLK2Freq>
 800a3d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3d2:	e010      	b.n	800a3f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a440 <UART_SetConfig+0x5c0>)
 800a3d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3d8:	e00d      	b.n	800a3f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3da:	f7fc fec7 	bl	800716c <HAL_RCC_GetSysClockFreq>
 800a3de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3e0:	e009      	b.n	800a3f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3e8:	e005      	b.n	800a3f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a3f4:	bf00      	nop
    }

    if (pclk != 0U)
 800a3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d028      	beq.n	800a44e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a400:	4a10      	ldr	r2, [pc, #64]	@ (800a444 <UART_SetConfig+0x5c4>)
 800a402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a406:	461a      	mov	r2, r3
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	085b      	lsrs	r3, r3, #1
 800a414:	441a      	add	r2, r3
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a41e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a420:	6a3b      	ldr	r3, [r7, #32]
 800a422:	2b0f      	cmp	r3, #15
 800a424:	d910      	bls.n	800a448 <UART_SetConfig+0x5c8>
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a42c:	d20c      	bcs.n	800a448 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	b29a      	uxth	r2, r3
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	60da      	str	r2, [r3, #12]
 800a438:	e009      	b.n	800a44e <UART_SetConfig+0x5ce>
 800a43a:	bf00      	nop
 800a43c:	40008000 	.word	0x40008000
 800a440:	00f42400 	.word	0x00f42400
 800a444:	0800c010 	.word	0x0800c010
      }
      else
      {
        ret = HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	2201      	movs	r2, #1
 800a452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2201      	movs	r2, #1
 800a45a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	2200      	movs	r2, #0
 800a462:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	2200      	movs	r2, #0
 800a468:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a46a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3730      	adds	r7, #48	@ 0x30
 800a472:	46bd      	mov	sp, r7
 800a474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a484:	f003 0308 	and.w	r3, r3, #8
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c8:	f003 0302 	and.w	r3, r3, #2
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00a      	beq.n	800a4e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ea:	f003 0304 	and.w	r3, r3, #4
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00a      	beq.n	800a508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	430a      	orrs	r2, r1
 800a506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50c:	f003 0310 	and.w	r3, r3, #16
 800a510:	2b00      	cmp	r3, #0
 800a512:	d00a      	beq.n	800a52a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	430a      	orrs	r2, r1
 800a528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52e:	f003 0320 	and.w	r3, r3, #32
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	430a      	orrs	r2, r1
 800a54a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a554:	2b00      	cmp	r3, #0
 800a556:	d01a      	beq.n	800a58e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a576:	d10a      	bne.n	800a58e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a596:	2b00      	cmp	r3, #0
 800a598:	d00a      	beq.n	800a5b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	605a      	str	r2, [r3, #4]
  }
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b098      	sub	sp, #96	@ 0x60
 800a5c0:	af02      	add	r7, sp, #8
 800a5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5cc:	f7fa fa78 	bl	8004ac0 <HAL_GetTick>
 800a5d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0308 	and.w	r3, r3, #8
 800a5dc:	2b08      	cmp	r3, #8
 800a5de:	d12f      	bne.n	800a640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f88e 	bl	800a710 <UART_WaitOnFlagUntilTimeout>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d022      	beq.n	800a640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a602:	e853 3f00 	ldrex	r3, [r3]
 800a606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a60a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a60e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	461a      	mov	r2, r3
 800a616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a618:	647b      	str	r3, [r7, #68]	@ 0x44
 800a61a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a61c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a61e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a620:	e841 2300 	strex	r3, r2, [r1]
 800a624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1e6      	bne.n	800a5fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a63c:	2303      	movs	r3, #3
 800a63e:	e063      	b.n	800a708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d149      	bne.n	800a6e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a64e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a652:	9300      	str	r3, [sp, #0]
 800a654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a656:	2200      	movs	r2, #0
 800a658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f857 	bl	800a710 <UART_WaitOnFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d03c      	beq.n	800a6e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a670:	e853 3f00 	ldrex	r3, [r3]
 800a674:	623b      	str	r3, [r7, #32]
   return(result);
 800a676:	6a3b      	ldr	r3, [r7, #32]
 800a678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a67c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a686:	633b      	str	r3, [r7, #48]	@ 0x30
 800a688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a68a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a68e:	e841 2300 	strex	r3, r2, [r1]
 800a692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1e6      	bne.n	800a668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	3308      	adds	r3, #8
 800a6a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	e853 3f00 	ldrex	r3, [r3]
 800a6a8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f023 0301 	bic.w	r3, r3, #1
 800a6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3308      	adds	r3, #8
 800a6b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6ba:	61fa      	str	r2, [r7, #28]
 800a6bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6be:	69b9      	ldr	r1, [r7, #24]
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1e5      	bne.n	800a69a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2220      	movs	r2, #32
 800a6d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e012      	b.n	800a708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2220      	movs	r2, #32
 800a6ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3758      	adds	r7, #88	@ 0x58
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b084      	sub	sp, #16
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	603b      	str	r3, [r7, #0]
 800a71c:	4613      	mov	r3, r2
 800a71e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a720:	e04f      	b.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a722:	69bb      	ldr	r3, [r7, #24]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d04b      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a72a:	f7fa f9c9 	bl	8004ac0 <HAL_GetTick>
 800a72e:	4602      	mov	r2, r0
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	1ad3      	subs	r3, r2, r3
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	429a      	cmp	r2, r3
 800a738:	d302      	bcc.n	800a740 <UART_WaitOnFlagUntilTimeout+0x30>
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d101      	bne.n	800a744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a740:	2303      	movs	r3, #3
 800a742:	e04e      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0304 	and.w	r3, r3, #4
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d037      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b80      	cmp	r3, #128	@ 0x80
 800a756:	d034      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2b40      	cmp	r3, #64	@ 0x40
 800a75c:	d031      	beq.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b08      	cmp	r3, #8
 800a76a:	d110      	bne.n	800a78e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2208      	movs	r2, #8
 800a772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f838 	bl	800a7ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2208      	movs	r2, #8
 800a77e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e029      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a79c:	d111      	bne.n	800a7c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7a8:	68f8      	ldr	r0, [r7, #12]
 800a7aa:	f000 f81e 	bl	800a7ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	2220      	movs	r2, #32
 800a7b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e00f      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69da      	ldr	r2, [r3, #28]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	68ba      	ldr	r2, [r7, #8]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	bf0c      	ite	eq
 800a7d2:	2301      	moveq	r3, #1
 800a7d4:	2300      	movne	r3, #0
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	461a      	mov	r2, r3
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d0a0      	beq.n	800a722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7ea:	b480      	push	{r7}
 800a7ec:	b095      	sub	sp, #84	@ 0x54
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7fa:	e853 3f00 	ldrex	r3, [r3]
 800a7fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a810:	643b      	str	r3, [r7, #64]	@ 0x40
 800a812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a818:	e841 2300 	strex	r3, r2, [r1]
 800a81c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a81e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1e6      	bne.n	800a7f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3308      	adds	r3, #8
 800a82a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	61fb      	str	r3, [r7, #28]
   return(result);
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	3308      	adds	r3, #8
 800a846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a84a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a84c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a84e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a850:	e841 2300 	strex	r3, r2, [r1]
 800a854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1e3      	bne.n	800a824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d118      	bne.n	800a896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	60bb      	str	r3, [r7, #8]
   return(result);
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f023 0310 	bic.w	r3, r3, #16
 800a878:	647b      	str	r3, [r7, #68]	@ 0x44
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	461a      	mov	r2, r3
 800a880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a882:	61bb      	str	r3, [r7, #24]
 800a884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6979      	ldr	r1, [r7, #20]
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	613b      	str	r3, [r7, #16]
   return(result);
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e6      	bne.n	800a864 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2220      	movs	r2, #32
 800a89a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8aa:	bf00      	nop
 800a8ac:	3754      	adds	r7, #84	@ 0x54
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a8b6:	b580      	push	{r7, lr}
 800a8b8:	b084      	sub	sp, #16
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8d6:	bf00      	nop
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b088      	sub	sp, #32
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	e853 3f00 	ldrex	r3, [r3]
 800a8f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8fa:	61fb      	str	r3, [r7, #28]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	461a      	mov	r2, r3
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	61bb      	str	r3, [r7, #24]
 800a906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a908:	6979      	ldr	r1, [r7, #20]
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	e841 2300 	strex	r3, r2, [r1]
 800a910:	613b      	str	r3, [r7, #16]
   return(result);
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1e6      	bne.n	800a8e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a930:	bf00      	nop
 800a932:	3720      	adds	r7, #32
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a938:	b480      	push	{r7}
 800a93a:	b083      	sub	sp, #12
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a954:	bf00      	nop
 800a956:	370c      	adds	r7, #12
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_UARTEx_DisableFifoMode+0x16>
 800a986:	2302      	movs	r3, #2
 800a988:	e027      	b.n	800a9da <HAL_UARTEx_DisableFifoMode+0x66>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2224      	movs	r2, #36	@ 0x24
 800a996:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a9b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2220      	movs	r2, #32
 800a9cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9d8:	2300      	movs	r3, #0
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr

0800a9e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d101      	bne.n	800a9fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	e02d      	b.n	800aa5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2201      	movs	r2, #1
 800aa02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2224      	movs	r2, #36	@ 0x24
 800aa0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0201 	bic.w	r2, r2, #1
 800aa24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	430a      	orrs	r2, r1
 800aa38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f850 	bl	800aae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68fa      	ldr	r2, [r7, #12]
 800aa46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2220      	movs	r2, #32
 800aa4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3710      	adds	r7, #16
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
 800aa6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d101      	bne.n	800aa7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e02d      	b.n	800aad6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2224      	movs	r2, #36	@ 0x24
 800aa86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f022 0201 	bic.w	r2, r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	683a      	ldr	r2, [r7, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f812 	bl	800aae0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d108      	bne.n	800ab02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab00:	e031      	b.n	800ab66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab02:	2308      	movs	r3, #8
 800ab04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab06:	2308      	movs	r3, #8
 800ab08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	0e5b      	lsrs	r3, r3, #25
 800ab12:	b2db      	uxtb	r3, r3
 800ab14:	f003 0307 	and.w	r3, r3, #7
 800ab18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	0f5b      	lsrs	r3, r3, #29
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0307 	and.w	r3, r3, #7
 800ab28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	7b3a      	ldrb	r2, [r7, #12]
 800ab2e:	4911      	ldr	r1, [pc, #68]	@ (800ab74 <UARTEx_SetNbDataToProcess+0x94>)
 800ab30:	5c8a      	ldrb	r2, [r1, r2]
 800ab32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab36:	7b3a      	ldrb	r2, [r7, #12]
 800ab38:	490f      	ldr	r1, [pc, #60]	@ (800ab78 <UARTEx_SetNbDataToProcess+0x98>)
 800ab3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab3c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab48:	7bfb      	ldrb	r3, [r7, #15]
 800ab4a:	7b7a      	ldrb	r2, [r7, #13]
 800ab4c:	4909      	ldr	r1, [pc, #36]	@ (800ab74 <UARTEx_SetNbDataToProcess+0x94>)
 800ab4e:	5c8a      	ldrb	r2, [r1, r2]
 800ab50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab54:	7b7a      	ldrb	r2, [r7, #13]
 800ab56:	4908      	ldr	r1, [pc, #32]	@ (800ab78 <UARTEx_SetNbDataToProcess+0x98>)
 800ab58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab5a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800ab66:	bf00      	nop
 800ab68:	3714      	adds	r7, #20
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab70:	4770      	bx	lr
 800ab72:	bf00      	nop
 800ab74:	0800c028 	.word	0x0800c028
 800ab78:	0800c030 	.word	0x0800c030

0800ab7c <arm_sin_f32>:
  @return        sin(x)
 */

float32_t arm_sin_f32(
  float32_t x)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b08b      	sub	sp, #44	@ 0x2c
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 800ab86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab8a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ac74 <arm_sin_f32+0xf8>
 800ab8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab92:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800ab96:	edd7 7a06 	vldr	s15, [r7, #24]
 800ab9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ab9e:	ee17 3a90 	vmov	r3, s15
 800aba2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800aba4:	edd7 7a06 	vldr	s15, [r7, #24]
 800aba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb0:	d502      	bpl.n	800abb8 <arm_sin_f32+0x3c>
  {
    n--;
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	3b01      	subs	r3, #1
 800abb6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800abc2:	ed97 7a06 	vldr	s14, [r7, #24]
 800abc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abca:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800abce:	edd7 7a06 	vldr	s15, [r7, #24]
 800abd2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800ac78 <arm_sin_f32+0xfc>
 800abd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800abda:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 800abde:	edd7 7a07 	vldr	s15, [r7, #28]
 800abe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe6:	ee17 3a90 	vmov	r3, s15
 800abea:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800abec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800abee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800abf2:	d309      	bcc.n	800ac08 <arm_sin_f32+0x8c>
    index = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800abf8:	edd7 7a07 	vldr	s15, [r7, #28]
 800abfc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800ac78 <arm_sin_f32+0xfc>
 800ac00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac04:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800ac08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac1a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 800ac1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac20:	4a16      	ldr	r2, [pc, #88]	@ (800ac7c <arm_sin_f32+0x100>)
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4413      	add	r3, r2
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800ac2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	4a13      	ldr	r2, [pc, #76]	@ (800ac7c <arm_sin_f32+0x100>)
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 800ac38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac3c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ac40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ac44:	edd7 7a04 	vldr	s15, [r7, #16]
 800ac48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac4c:	edd7 6a05 	vldr	s13, [r7, #20]
 800ac50:	edd7 7a03 	vldr	s15, [r7, #12]
 800ac54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac5c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (sinVal);
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	ee07 3a90 	vmov	s15, r3
}
 800ac66:	eeb0 0a67 	vmov.f32	s0, s15
 800ac6a:	372c      	adds	r7, #44	@ 0x2c
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr
 800ac74:	3e22f983 	.word	0x3e22f983
 800ac78:	44000000 	.word	0x44000000
 800ac7c:	0800c038 	.word	0x0800c038

0800ac80 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b08b      	sub	sp, #44	@ 0x2c
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	461a      	mov	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	885b      	ldrh	r3, [r3, #2]
 800aca8:	fb02 f303 	mul.w	r3, r2, r3
 800acac:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800acb2:	e013      	b.n	800acdc <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800acb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb6:	1d1a      	adds	r2, r3, #4
 800acb8:	627a      	str	r2, [r7, #36]	@ 0x24
 800acba:	ed93 7a00 	vldr	s14, [r3]
 800acbe:	6a3b      	ldr	r3, [r7, #32]
 800acc0:	1d1a      	adds	r2, r3, #4
 800acc2:	623a      	str	r2, [r7, #32]
 800acc4:	edd3 7a00 	vldr	s15, [r3]
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	61fa      	str	r2, [r7, #28]
 800acce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acd2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	3b01      	subs	r3, #1
 800acda:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800acdc:	69bb      	ldr	r3, [r7, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e8      	bne.n	800acb4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ace2:	2300      	movs	r3, #0
 800ace4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ace6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800acea:	4618      	mov	r0, r3
 800acec:	372c      	adds	r7, #44	@ 0x2c
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	607b      	str	r3, [r7, #4]
 800ad00:	460b      	mov	r3, r1
 800ad02:	817b      	strh	r3, [r7, #10]
 800ad04:	4613      	mov	r3, r2
 800ad06:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	897a      	ldrh	r2, [r7, #10]
 800ad0c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	893a      	ldrh	r2, [r7, #8]
 800ad12:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	605a      	str	r2, [r3, #4]
}
 800ad1a:	bf00      	nop
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800ad26:	b480      	push	{r7}
 800ad28:	b0bb      	sub	sp, #236	@ 0xec
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
 800ad2e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	881b      	ldrh	r3, [r3, #0]
 800ad40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	885b      	ldrh	r3, [r3, #2]
 800ad46:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800ad48:	f04f 0300 	mov.w	r3, #0
 800ad4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ad50:	f04f 0300 	mov.w	r3, #0
 800ad54:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800ad56:	2300      	movs	r3, #0
 800ad58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ad5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ad62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ad68:	e03b      	b.n	800ade2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ad6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ad6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ad76:	e00c      	b.n	800ad92 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ad78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad7c:	1d1a      	adds	r2, r3, #4
 800ad7e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ad82:	f04f 0200 	mov.w	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
        j--;
 800ad88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ad92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1ee      	bne.n	800ad78 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ad9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ada4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ada8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800adaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800adae:	3b01      	subs	r3, #1
 800adb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800adb4:	e00c      	b.n	800add0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800adb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800adba:	1d1a      	adds	r2, r3, #4
 800adbc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800adc0:	f04f 0200 	mov.w	r2, #0
 800adc4:	601a      	str	r2, [r3, #0]
        j--;
 800adc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adca:	3b01      	subs	r3, #1
 800adcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800add0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1ee      	bne.n	800adb6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800add8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800addc:	3b01      	subs	r3, #1
 800adde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ade2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1bf      	bne.n	800ad6a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800adea:	2300      	movs	r3, #0
 800adec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800adf0:	e2c7      	b.n	800b382 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800adf2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adf6:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	885b      	ldrh	r3, [r3, #2]
 800ae00:	3301      	adds	r3, #1
 800ae02:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800ae06:	fb01 f303 	mul.w	r3, r1, r3
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800ae12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800ae1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae20:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ae24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae28:	3301      	adds	r3, #1
 800ae2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae2e:	e02c      	b.n	800ae8a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae3e:	fb03 f101 	mul.w	r1, r3, r1
 800ae42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae46:	440b      	add	r3, r1
 800ae48:	009b      	lsls	r3, r3, #2
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800ae50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800ae58:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800ae5c:	eeb0 7ae7 	vabs.f32	s14, s15
 800ae60:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ae64:	eef0 7ae7 	vabs.f32	s15, s15
 800ae68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ae6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae70:	dd06      	ble.n	800ae80 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800ae72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800ae7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800ae80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ae84:	3301      	adds	r3, #1
 800ae86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae8a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ae8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d3cd      	bcc.n	800ae30 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800ae94:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ae98:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ae9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea0:	f000 809b 	beq.w	800afda <arm_mat_inverse_f32+0x2b4>
 800aea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aeac:	429a      	cmp	r2, r3
 800aeae:	f000 8094 	beq.w	800afda <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	885b      	ldrh	r3, [r3, #2]
 800aec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aec8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aeca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aed2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aed4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aed6:	fb03 f202 	mul.w	r2, r3, r2
 800aeda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aede:	4413      	add	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aee6:	4413      	add	r3, r2
 800aee8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aeec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aeee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aef2:	fb03 f202 	mul.w	r2, r3, r2
 800aef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af02:	4413      	add	r3, r2
 800af04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800af0e:	e018      	b.n	800af42 <arm_mat_inverse_f32+0x21c>
 800af10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800af18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af1c:	1d1a      	adds	r2, r3, #4
 800af1e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800af22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af26:	6812      	ldr	r2, [r2, #0]
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800af34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800af36:	601a      	str	r2, [r3, #0]
 800af38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800af3c:	3301      	adds	r3, #1
 800af3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800af42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800af46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af48:	429a      	cmp	r2, r3
 800af4a:	dbe1      	blt.n	800af10 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	685b      	ldr	r3, [r3, #4]
 800af50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	885b      	ldrh	r3, [r3, #2]
 800af60:	647b      	str	r3, [r7, #68]	@ 0x44
 800af62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af64:	643b      	str	r3, [r7, #64]	@ 0x40
 800af66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af68:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af6a:	fb02 f303 	mul.w	r3, r2, r3
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800af74:	4413      	add	r3, r2
 800af76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800af7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800af80:	fb02 f303 	mul.w	r3, r2, r3
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800af8a:	4413      	add	r3, r2
 800af8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800af90:	2300      	movs	r3, #0
 800af92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af96:	e018      	b.n	800afca <arm_mat_inverse_f32+0x2a4>
 800af98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800afa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800afaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800afae:	6812      	ldr	r2, [r2, #0]
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800afb6:	1d1a      	adds	r2, r3, #4
 800afb8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800afbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800afc4:	3301      	adds	r3, #1
 800afc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800afca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800afce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800afd0:	429a      	cmp	r2, r3
 800afd2:	dbe1      	blt.n	800af98 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800afd4:	2301      	movs	r3, #1
 800afd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800afda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d009      	beq.n	800aff6 <arm_mat_inverse_f32+0x2d0>
 800afe2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800afe6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800afea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afee:	d102      	bne.n	800aff6 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800aff0:	f06f 0304 	mvn.w	r3, #4
 800aff4:	e208      	b.n	800b408 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800aff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800affa:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800affe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b002:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	685b      	ldr	r3, [r3, #4]
 800b00a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b016:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b01e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b020:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b022:	fb03 f202 	mul.w	r2, r3, r2
 800b026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800b032:	4413      	add	r3, r2
 800b034:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b038:	2300      	movs	r3, #0
 800b03a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b03e:	e011      	b.n	800b064 <arm_mat_inverse_f32+0x33e>
 800b040:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b044:	1d1a      	adds	r2, r3, #4
 800b046:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800b04a:	ed93 7a00 	vldr	s14, [r3]
 800b04e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b052:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b056:	edc3 7a00 	vstr	s15, [r3]
 800b05a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b05e:	3301      	adds	r3, #1
 800b060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b064:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800b068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06a:	429a      	cmp	r2, r3
 800b06c:	dbe8      	blt.n	800b040 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	885b      	ldrh	r3, [r3, #2]
 800b07a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b082:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800b08e:	4413      	add	r3, r2
 800b090:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b094:	2300      	movs	r3, #0
 800b096:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b09a:	e011      	b.n	800b0c0 <arm_mat_inverse_f32+0x39a>
 800b09c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0a0:	1d1a      	adds	r2, r3, #4
 800b0a2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b0a6:	ed93 7a00 	vldr	s14, [r3]
 800b0aa:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b2:	edc3 7a00 	vstr	s15, [r3]
 800b0b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b0c0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800b0c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	dbe8      	blt.n	800b09c <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800b0d0:	e0ae      	b.n	800b230 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	685a      	ldr	r2, [r3, #4]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	885b      	ldrh	r3, [r3, #2]
 800b0da:	4619      	mov	r1, r3
 800b0dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b0e0:	fb03 f101 	mul.w	r1, r3, r1
 800b0e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b0e8:	440b      	add	r3, r1
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800b0f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	885b      	ldrh	r3, [r3, #2]
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	697a      	ldr	r2, [r7, #20]
 800b114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b122:	fb03 f202 	mul.w	r2, r3, r2
 800b126:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b12a:	4413      	add	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800b132:	4413      	add	r3, r2
 800b134:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b13c:	fb03 f202 	mul.w	r2, r3, r2
 800b140:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800b14c:	4413      	add	r3, r2
 800b14e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b152:	2300      	movs	r3, #0
 800b154:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b158:	e01a      	b.n	800b190 <arm_mat_inverse_f32+0x46a>
 800b15a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b15e:	1d1a      	adds	r2, r3, #4
 800b160:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b164:	ed93 7a00 	vldr	s14, [r3]
 800b168:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b170:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b174:	1d1a      	adds	r2, r3, #4
 800b176:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800b17a:	ed93 7a00 	vldr	s14, [r3]
 800b17e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b182:	edc3 7a00 	vstr	s15, [r3]
 800b186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b18a:	3301      	adds	r3, #1
 800b18c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b190:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	429a      	cmp	r2, r3
 800b198:	dbdf      	blt.n	800b15a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	885b      	ldrh	r3, [r3, #2]
 800b1ae:	60fb      	str	r3, [r7, #12]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	60bb      	str	r3, [r7, #8]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b1ba:	fb02 f303 	mul.w	r3, r2, r3
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b1ce:	fb02 f303 	mul.w	r3, r2, r3
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b1d8:	4413      	add	r3, r2
 800b1da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b1e4:	e01a      	b.n	800b21c <arm_mat_inverse_f32+0x4f6>
 800b1e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b1ea:	1d1a      	adds	r2, r3, #4
 800b1ec:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b1f0:	ed93 7a00 	vldr	s14, [r3]
 800b1f4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b1f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800b206:	ed93 7a00 	vldr	s14, [r3]
 800b20a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b20e:	edc3 7a00 	vstr	s15, [r3]
 800b212:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b216:	3301      	adds	r3, #1
 800b218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b21c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	429a      	cmp	r2, r3
 800b224:	dbdf      	blt.n	800b1e6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800b226:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b22a:	3301      	adds	r3, #1
 800b22c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b230:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b234:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b236:	429a      	cmp	r2, r3
 800b238:	f4ff af4b 	bcc.w	800b0d2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800b23c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b23e:	3301      	adds	r3, #1
 800b240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b244:	e092      	b.n	800b36c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	685a      	ldr	r2, [r3, #4]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	885b      	ldrh	r3, [r3, #2]
 800b24e:	4619      	mov	r1, r3
 800b250:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b254:	fb03 f101 	mul.w	r1, r3, r1
 800b258:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b25c:	440b      	add	r3, r1
 800b25e:	009b      	lsls	r3, r3, #2
 800b260:	4413      	add	r3, r2
 800b262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800b266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	677b      	str	r3, [r7, #116]	@ 0x74
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	885b      	ldrh	r3, [r3, #2]
 800b280:	627b      	str	r3, [r7, #36]	@ 0x24
 800b282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	623b      	str	r3, [r7, #32]
 800b28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b292:	fb03 f202 	mul.w	r2, r3, r2
 800b296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b29a:	4413      	add	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b2a0:	4413      	add	r3, r2
 800b2a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2a8:	fb03 f202 	mul.w	r2, r3, r2
 800b2ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b2b6:	4413      	add	r3, r2
 800b2b8:	677b      	str	r3, [r7, #116]	@ 0x74
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b2be:	e014      	b.n	800b2ea <arm_mat_inverse_f32+0x5c4>
 800b2c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b2c2:	1d1a      	adds	r2, r3, #4
 800b2c4:	677a      	str	r2, [r7, #116]	@ 0x74
 800b2c6:	ed93 7a00 	vldr	s14, [r3]
 800b2ca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b2d4:	1d1a      	adds	r2, r3, #4
 800b2d6:	67ba      	str	r2, [r7, #120]	@ 0x78
 800b2d8:	ed93 7a00 	vldr	s14, [r3]
 800b2dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2e0:	edc3 7a00 	vstr	s15, [r3]
 800b2e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b2ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b2ec:	6a3b      	ldr	r3, [r7, #32]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	dbe6      	blt.n	800b2c0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	885b      	ldrh	r3, [r3, #2]
 800b302:	61fb      	str	r3, [r7, #28]
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	61bb      	str	r3, [r7, #24]
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b30e:	fb02 f303 	mul.w	r3, r2, r3
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b316:	4413      	add	r3, r2
 800b318:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b31e:	fb02 f303 	mul.w	r3, r2, r3
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b326:	4413      	add	r3, r2
 800b328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b32a:	2300      	movs	r3, #0
 800b32c:	673b      	str	r3, [r7, #112]	@ 0x70
 800b32e:	e014      	b.n	800b35a <arm_mat_inverse_f32+0x634>
 800b330:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b332:	1d1a      	adds	r2, r3, #4
 800b334:	66ba      	str	r2, [r7, #104]	@ 0x68
 800b336:	ed93 7a00 	vldr	s14, [r3]
 800b33a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b344:	1d1a      	adds	r2, r3, #4
 800b346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b348:	ed93 7a00 	vldr	s14, [r3]
 800b34c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b350:	edc3 7a00 	vstr	s15, [r3]
 800b354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b356:	3301      	adds	r3, #1
 800b358:	673b      	str	r3, [r7, #112]	@ 0x70
 800b35a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	429a      	cmp	r2, r3
 800b360:	dbe6      	blt.n	800b330 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800b362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b366:	3301      	adds	r3, #1
 800b368:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b36c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b370:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b372:	429a      	cmp	r2, r3
 800b374:	f4ff af67 	bcc.w	800b246 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800b378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b37c:	3301      	adds	r3, #1
 800b37e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b382:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b388:	429a      	cmp	r2, r3
 800b38a:	f4ff ad32 	bcc.w	800adf2 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b38e:	2300      	movs	r3, #0
 800b390:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800b394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d033      	beq.n	800b404 <arm_mat_inverse_f32+0x6de>
 800b39c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800b3a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a8:	d12c      	bne.n	800b404 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3b6:	e010      	b.n	800b3da <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800b3b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b3c0:	4413      	add	r3, r2
 800b3c2:	edd3 7a00 	vldr	s15, [r3]
 800b3c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ce:	d10d      	bne.n	800b3ec <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800b3d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b3da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3de:	fb02 f303 	mul.w	r3, r2, r3
 800b3e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d3e6      	bcc.n	800b3b8 <arm_mat_inverse_f32+0x692>
 800b3ea:	e000      	b.n	800b3ee <arm_mat_inverse_f32+0x6c8>
            break;
 800b3ec:	bf00      	nop
      }

      if (i == numRows * numCols)
 800b3ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b3f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3f2:	fb02 f303 	mul.w	r3, r2, r3
 800b3f6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d102      	bne.n	800b404 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800b3fe:	23fb      	movs	r3, #251	@ 0xfb
 800b400:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800b404:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800b408:	4618      	mov	r0, r3
 800b40a:	37ec      	adds	r7, #236	@ 0xec
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800b414:	b480      	push	{r7}
 800b416:	b093      	sub	sp, #76	@ 0x4c
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	685b      	ldr	r3, [r3, #4]
 800b42a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	885b      	ldrh	r3, [r3, #2]
 800b448:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800b450:	2300      	movs	r3, #0
 800b452:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b454:	8b7b      	ldrh	r3, [r7, #26]
 800b456:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	69fa      	ldr	r2, [r7, #28]
 800b45e:	4413      	add	r3, r2
 800b460:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800b462:	8b3b      	ldrh	r3, [r7, #24]
 800b464:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800b46c:	f04f 0300 	mov.w	r3, #0
 800b470:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800b472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b474:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800b476:	8afb      	ldrh	r3, [r7, #22]
 800b478:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800b47a:	e017      	b.n	800b4ac <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800b47c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b47e:	1d1a      	adds	r2, r3, #4
 800b480:	647a      	str	r2, [r7, #68]	@ 0x44
 800b482:	ed93 7a00 	vldr	s14, [r3]
 800b486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b488:	edd3 7a00 	vldr	s15, [r3]
 800b48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b490:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800b494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b498:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800b49c:	8b3b      	ldrh	r3, [r7, #24]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b4a2:	4413      	add	r3, r2
 800b4a4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800b4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d1e4      	bne.n	800b47c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800b4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b4:	1d1a      	adds	r2, r3, #4
 800b4b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b4b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b4ba:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800b4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800b4c2:	8b3a      	ldrh	r2, [r7, #24]
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	6a3a      	ldr	r2, [r7, #32]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1ca      	bne.n	800b46c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800b4d6:	8b3b      	ldrh	r3, [r7, #24]
 800b4d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b4da:	4413      	add	r3, r2
 800b4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800b4de:	8afb      	ldrh	r3, [r7, #22]
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b4e4:	4413      	add	r3, r2
 800b4e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800b4e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800b4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d1b1      	bne.n	800b458 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800b4f8:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	374c      	adds	r7, #76	@ 0x4c
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800b508:	b480      	push	{r7}
 800b50a:	b08b      	sub	sp, #44	@ 0x2c
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	ed87 0a02 	vstr	s0, [r7, #8]
 800b514:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	881b      	ldrh	r3, [r3, #0]
 800b526:	461a      	mov	r2, r3
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	885b      	ldrh	r3, [r3, #2]
 800b52c:	fb02 f303 	mul.w	r3, r2, r3
 800b530:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b532:	69bb      	ldr	r3, [r7, #24]
 800b534:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b536:	e010      	b.n	800b55a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	1d1a      	adds	r2, r3, #4
 800b53c:	627a      	str	r2, [r7, #36]	@ 0x24
 800b53e:	ed93 7a00 	vldr	s14, [r3]
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	1d1a      	adds	r2, r3, #4
 800b546:	623a      	str	r2, [r7, #32]
 800b548:	edd7 7a02 	vldr	s15, [r7, #8]
 800b54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b550:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b554:	69fb      	ldr	r3, [r7, #28]
 800b556:	3b01      	subs	r3, #1
 800b558:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1eb      	bne.n	800b538 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b560:	2300      	movs	r3, #0
 800b562:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800b564:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b568:	4618      	mov	r0, r3
 800b56a:	372c      	adds	r7, #44	@ 0x2c
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800b574:	b480      	push	{r7}
 800b576:	b08b      	sub	sp, #44	@ 0x2c
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	881b      	ldrh	r3, [r3, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	885b      	ldrh	r3, [r3, #2]
 800b59c:	fb02 f303 	mul.w	r3, r2, r3
 800b5a0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800b5a6:	e013      	b.n	800b5d0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5aa:	1d1a      	adds	r2, r3, #4
 800b5ac:	627a      	str	r2, [r7, #36]	@ 0x24
 800b5ae:	ed93 7a00 	vldr	s14, [r3]
 800b5b2:	6a3b      	ldr	r3, [r7, #32]
 800b5b4:	1d1a      	adds	r2, r3, #4
 800b5b6:	623a      	str	r2, [r7, #32]
 800b5b8:	edd3 7a00 	vldr	s15, [r3]
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	1d1a      	adds	r2, r3, #4
 800b5c0:	61fa      	str	r2, [r7, #28]
 800b5c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5c6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800b5ca:	69bb      	ldr	r3, [r7, #24]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1e8      	bne.n	800b5a8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800b5da:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	372c      	adds	r7, #44	@ 0x2c
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800b5ea:	b480      	push	{r7}
 800b5ec:	b08b      	sub	sp, #44	@ 0x2c
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
 800b5f2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	685b      	ldr	r3, [r3, #4]
 800b5fe:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	881b      	ldrh	r3, [r3, #0]
 800b604:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800b60c:	89fb      	ldrh	r3, [r7, #14]
 800b60e:	61bb      	str	r3, [r7, #24]
 800b610:	2300      	movs	r3, #0
 800b612:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	009b      	lsls	r3, r3, #2
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	4413      	add	r3, r2
 800b61c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800b61e:	89bb      	ldrh	r3, [r7, #12]
 800b620:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800b622:	e00d      	b.n	800b640 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800b624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b626:	1d1a      	adds	r2, r3, #4
 800b628:	627a      	str	r2, [r7, #36]	@ 0x24
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	6a3b      	ldr	r3, [r7, #32]
 800b62e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800b630:	89fb      	ldrh	r3, [r7, #14]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	6a3a      	ldr	r2, [r7, #32]
 800b636:	4413      	add	r3, r2
 800b638:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800b63a:	69fb      	ldr	r3, [r7, #28]
 800b63c:	3b01      	subs	r3, #1
 800b63e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800b640:	69fb      	ldr	r3, [r7, #28]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1ee      	bne.n	800b624 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	3301      	adds	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	3b01      	subs	r3, #1
 800b650:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800b652:	69bb      	ldr	r3, [r7, #24]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1dd      	bne.n	800b614 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800b658:	2300      	movs	r3, #0
 800b65a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800b65c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800b660:	4618      	mov	r0, r3
 800b662:	372c      	adds	r7, #44	@ 0x2c
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr

0800b66c <memset>:
 800b66c:	4402      	add	r2, r0
 800b66e:	4603      	mov	r3, r0
 800b670:	4293      	cmp	r3, r2
 800b672:	d100      	bne.n	800b676 <memset+0xa>
 800b674:	4770      	bx	lr
 800b676:	f803 1b01 	strb.w	r1, [r3], #1
 800b67a:	e7f9      	b.n	800b670 <memset+0x4>

0800b67c <__errno>:
 800b67c:	4b01      	ldr	r3, [pc, #4]	@ (800b684 <__errno+0x8>)
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	20000024 	.word	0x20000024

0800b688 <__libc_init_array>:
 800b688:	b570      	push	{r4, r5, r6, lr}
 800b68a:	4d0d      	ldr	r5, [pc, #52]	@ (800b6c0 <__libc_init_array+0x38>)
 800b68c:	4c0d      	ldr	r4, [pc, #52]	@ (800b6c4 <__libc_init_array+0x3c>)
 800b68e:	1b64      	subs	r4, r4, r5
 800b690:	10a4      	asrs	r4, r4, #2
 800b692:	2600      	movs	r6, #0
 800b694:	42a6      	cmp	r6, r4
 800b696:	d109      	bne.n	800b6ac <__libc_init_array+0x24>
 800b698:	4d0b      	ldr	r5, [pc, #44]	@ (800b6c8 <__libc_init_array+0x40>)
 800b69a:	4c0c      	ldr	r4, [pc, #48]	@ (800b6cc <__libc_init_array+0x44>)
 800b69c:	f000 fc80 	bl	800bfa0 <_init>
 800b6a0:	1b64      	subs	r4, r4, r5
 800b6a2:	10a4      	asrs	r4, r4, #2
 800b6a4:	2600      	movs	r6, #0
 800b6a6:	42a6      	cmp	r6, r4
 800b6a8:	d105      	bne.n	800b6b6 <__libc_init_array+0x2e>
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b0:	4798      	blx	r3
 800b6b2:	3601      	adds	r6, #1
 800b6b4:	e7ee      	b.n	800b694 <__libc_init_array+0xc>
 800b6b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6ba:	4798      	blx	r3
 800b6bc:	3601      	adds	r6, #1
 800b6be:	e7f2      	b.n	800b6a6 <__libc_init_array+0x1e>
 800b6c0:	0800c864 	.word	0x0800c864
 800b6c4:	0800c864 	.word	0x0800c864
 800b6c8:	0800c864 	.word	0x0800c864
 800b6cc:	0800c868 	.word	0x0800c868

0800b6d0 <fmodf>:
 800b6d0:	b508      	push	{r3, lr}
 800b6d2:	ed2d 8b02 	vpush	{d8}
 800b6d6:	eef0 8a40 	vmov.f32	s17, s0
 800b6da:	eeb0 8a60 	vmov.f32	s16, s1
 800b6de:	f000 f8a1 	bl	800b824 <__ieee754_fmodf>
 800b6e2:	eef4 8a48 	vcmp.f32	s17, s16
 800b6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ea:	d60c      	bvs.n	800b706 <fmodf+0x36>
 800b6ec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b70c <fmodf+0x3c>
 800b6f0:	eeb4 8a68 	vcmp.f32	s16, s17
 800b6f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6f8:	d105      	bne.n	800b706 <fmodf+0x36>
 800b6fa:	f7ff ffbf 	bl	800b67c <__errno>
 800b6fe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b702:	2321      	movs	r3, #33	@ 0x21
 800b704:	6003      	str	r3, [r0, #0]
 800b706:	ecbd 8b02 	vpop	{d8}
 800b70a:	bd08      	pop	{r3, pc}
 800b70c:	00000000 	.word	0x00000000

0800b710 <powf>:
 800b710:	b508      	push	{r3, lr}
 800b712:	ed2d 8b04 	vpush	{d8-d9}
 800b716:	eeb0 8a60 	vmov.f32	s16, s1
 800b71a:	eeb0 9a40 	vmov.f32	s18, s0
 800b71e:	f000 f903 	bl	800b928 <__ieee754_powf>
 800b722:	eeb4 8a48 	vcmp.f32	s16, s16
 800b726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72a:	eef0 8a40 	vmov.f32	s17, s0
 800b72e:	d63e      	bvs.n	800b7ae <powf+0x9e>
 800b730:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800b734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b738:	d112      	bne.n	800b760 <powf+0x50>
 800b73a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b742:	d039      	beq.n	800b7b8 <powf+0xa8>
 800b744:	eeb0 0a48 	vmov.f32	s0, s16
 800b748:	f000 f839 	bl	800b7be <finitef>
 800b74c:	b378      	cbz	r0, 800b7ae <powf+0x9e>
 800b74e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b756:	d52a      	bpl.n	800b7ae <powf+0x9e>
 800b758:	f7ff ff90 	bl	800b67c <__errno>
 800b75c:	2322      	movs	r3, #34	@ 0x22
 800b75e:	e014      	b.n	800b78a <powf+0x7a>
 800b760:	f000 f82d 	bl	800b7be <finitef>
 800b764:	b998      	cbnz	r0, 800b78e <powf+0x7e>
 800b766:	eeb0 0a49 	vmov.f32	s0, s18
 800b76a:	f000 f828 	bl	800b7be <finitef>
 800b76e:	b170      	cbz	r0, 800b78e <powf+0x7e>
 800b770:	eeb0 0a48 	vmov.f32	s0, s16
 800b774:	f000 f823 	bl	800b7be <finitef>
 800b778:	b148      	cbz	r0, 800b78e <powf+0x7e>
 800b77a:	eef4 8a68 	vcmp.f32	s17, s17
 800b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b782:	d7e9      	bvc.n	800b758 <powf+0x48>
 800b784:	f7ff ff7a 	bl	800b67c <__errno>
 800b788:	2321      	movs	r3, #33	@ 0x21
 800b78a:	6003      	str	r3, [r0, #0]
 800b78c:	e00f      	b.n	800b7ae <powf+0x9e>
 800b78e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800b792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b796:	d10a      	bne.n	800b7ae <powf+0x9e>
 800b798:	eeb0 0a49 	vmov.f32	s0, s18
 800b79c:	f000 f80f 	bl	800b7be <finitef>
 800b7a0:	b128      	cbz	r0, 800b7ae <powf+0x9e>
 800b7a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7a6:	f000 f80a 	bl	800b7be <finitef>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1d4      	bne.n	800b758 <powf+0x48>
 800b7ae:	eeb0 0a68 	vmov.f32	s0, s17
 800b7b2:	ecbd 8b04 	vpop	{d8-d9}
 800b7b6:	bd08      	pop	{r3, pc}
 800b7b8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800b7bc:	e7f7      	b.n	800b7ae <powf+0x9e>

0800b7be <finitef>:
 800b7be:	ee10 3a10 	vmov	r3, s0
 800b7c2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800b7c6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b7ca:	bfac      	ite	ge
 800b7cc:	2000      	movge	r0, #0
 800b7ce:	2001      	movlt	r0, #1
 800b7d0:	4770      	bx	lr

0800b7d2 <with_errnof>:
 800b7d2:	b510      	push	{r4, lr}
 800b7d4:	ed2d 8b02 	vpush	{d8}
 800b7d8:	eeb0 8a40 	vmov.f32	s16, s0
 800b7dc:	4604      	mov	r4, r0
 800b7de:	f7ff ff4d 	bl	800b67c <__errno>
 800b7e2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7e6:	ecbd 8b02 	vpop	{d8}
 800b7ea:	6004      	str	r4, [r0, #0]
 800b7ec:	bd10      	pop	{r4, pc}

0800b7ee <xflowf>:
 800b7ee:	b130      	cbz	r0, 800b7fe <xflowf+0x10>
 800b7f0:	eef1 7a40 	vneg.f32	s15, s0
 800b7f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b7f8:	2022      	movs	r0, #34	@ 0x22
 800b7fa:	f7ff bfea 	b.w	800b7d2 <with_errnof>
 800b7fe:	eef0 7a40 	vmov.f32	s15, s0
 800b802:	e7f7      	b.n	800b7f4 <xflowf+0x6>

0800b804 <__math_uflowf>:
 800b804:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b80c <__math_uflowf+0x8>
 800b808:	f7ff bff1 	b.w	800b7ee <xflowf>
 800b80c:	10000000 	.word	0x10000000

0800b810 <__math_oflowf>:
 800b810:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b818 <__math_oflowf+0x8>
 800b814:	f7ff bfeb 	b.w	800b7ee <xflowf>
 800b818:	70000000 	.word	0x70000000

0800b81c <__ieee754_sqrtf>:
 800b81c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b820:	4770      	bx	lr
	...

0800b824 <__ieee754_fmodf>:
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	ee10 6a90 	vmov	r6, s1
 800b82a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b82e:	1e5a      	subs	r2, r3, #1
 800b830:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b834:	d206      	bcs.n	800b844 <__ieee754_fmodf+0x20>
 800b836:	ee10 4a10 	vmov	r4, s0
 800b83a:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800b83e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b842:	d304      	bcc.n	800b84e <__ieee754_fmodf+0x2a>
 800b844:	ee60 0a20 	vmul.f32	s1, s0, s1
 800b848:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
 800b84e:	4299      	cmp	r1, r3
 800b850:	dbfc      	blt.n	800b84c <__ieee754_fmodf+0x28>
 800b852:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800b856:	d105      	bne.n	800b864 <__ieee754_fmodf+0x40>
 800b858:	4b32      	ldr	r3, [pc, #200]	@ (800b924 <__ieee754_fmodf+0x100>)
 800b85a:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800b85e:	ed93 0a00 	vldr	s0, [r3]
 800b862:	e7f3      	b.n	800b84c <__ieee754_fmodf+0x28>
 800b864:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800b868:	d146      	bne.n	800b8f8 <__ieee754_fmodf+0xd4>
 800b86a:	020a      	lsls	r2, r1, #8
 800b86c:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800b870:	2a00      	cmp	r2, #0
 800b872:	dc3e      	bgt.n	800b8f2 <__ieee754_fmodf+0xce>
 800b874:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b878:	bf01      	itttt	eq
 800b87a:	021a      	lsleq	r2, r3, #8
 800b87c:	fab2 f282 	clzeq	r2, r2
 800b880:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800b884:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800b888:	bf16      	itet	ne
 800b88a:	15da      	asrne	r2, r3, #23
 800b88c:	3282      	addeq	r2, #130	@ 0x82
 800b88e:	3a7f      	subne	r2, #127	@ 0x7f
 800b890:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800b894:	bfbb      	ittet	lt
 800b896:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b89a:	1a24      	sublt	r4, r4, r0
 800b89c:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800b8a0:	40a1      	lsllt	r1, r4
 800b8a2:	bfa8      	it	ge
 800b8a4:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800b8a8:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b8ac:	bfb5      	itete	lt
 800b8ae:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800b8b2:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800b8b6:	1aa4      	sublt	r4, r4, r2
 800b8b8:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800b8bc:	bfb8      	it	lt
 800b8be:	fa03 f404 	lsllt.w	r4, r3, r4
 800b8c2:	1a80      	subs	r0, r0, r2
 800b8c4:	1b0b      	subs	r3, r1, r4
 800b8c6:	b9d0      	cbnz	r0, 800b8fe <__ieee754_fmodf+0xda>
 800b8c8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800b8cc:	bf28      	it	cs
 800b8ce:	460b      	movcs	r3, r1
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d0c1      	beq.n	800b858 <__ieee754_fmodf+0x34>
 800b8d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b8d8:	db19      	blt.n	800b90e <__ieee754_fmodf+0xea>
 800b8da:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800b8de:	db19      	blt.n	800b914 <__ieee754_fmodf+0xf0>
 800b8e0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800b8e4:	327f      	adds	r2, #127	@ 0x7f
 800b8e6:	432b      	orrs	r3, r5
 800b8e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b8ec:	ee00 3a10 	vmov	s0, r3
 800b8f0:	e7ac      	b.n	800b84c <__ieee754_fmodf+0x28>
 800b8f2:	3801      	subs	r0, #1
 800b8f4:	0052      	lsls	r2, r2, #1
 800b8f6:	e7bb      	b.n	800b870 <__ieee754_fmodf+0x4c>
 800b8f8:	15c8      	asrs	r0, r1, #23
 800b8fa:	387f      	subs	r0, #127	@ 0x7f
 800b8fc:	e7ba      	b.n	800b874 <__ieee754_fmodf+0x50>
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	da02      	bge.n	800b908 <__ieee754_fmodf+0xe4>
 800b902:	0049      	lsls	r1, r1, #1
 800b904:	3801      	subs	r0, #1
 800b906:	e7dd      	b.n	800b8c4 <__ieee754_fmodf+0xa0>
 800b908:	d0a6      	beq.n	800b858 <__ieee754_fmodf+0x34>
 800b90a:	0059      	lsls	r1, r3, #1
 800b90c:	e7fa      	b.n	800b904 <__ieee754_fmodf+0xe0>
 800b90e:	005b      	lsls	r3, r3, #1
 800b910:	3a01      	subs	r2, #1
 800b912:	e7df      	b.n	800b8d4 <__ieee754_fmodf+0xb0>
 800b914:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800b918:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b91c:	3282      	adds	r2, #130	@ 0x82
 800b91e:	4113      	asrs	r3, r2
 800b920:	432b      	orrs	r3, r5
 800b922:	e7e3      	b.n	800b8ec <__ieee754_fmodf+0xc8>
 800b924:	0800c83c 	.word	0x0800c83c

0800b928 <__ieee754_powf>:
 800b928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b92c:	ee10 4a90 	vmov	r4, s1
 800b930:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800b934:	ed2d 8b02 	vpush	{d8}
 800b938:	ee10 6a10 	vmov	r6, s0
 800b93c:	eeb0 8a40 	vmov.f32	s16, s0
 800b940:	eef0 8a60 	vmov.f32	s17, s1
 800b944:	d10c      	bne.n	800b960 <__ieee754_powf+0x38>
 800b946:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800b94a:	0076      	lsls	r6, r6, #1
 800b94c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800b950:	f240 8274 	bls.w	800be3c <__ieee754_powf+0x514>
 800b954:	ee38 0a28 	vadd.f32	s0, s16, s17
 800b958:	ecbd 8b02 	vpop	{d8}
 800b95c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b960:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800b964:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800b968:	d802      	bhi.n	800b970 <__ieee754_powf+0x48>
 800b96a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b96e:	d908      	bls.n	800b982 <__ieee754_powf+0x5a>
 800b970:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800b974:	d1ee      	bne.n	800b954 <__ieee754_powf+0x2c>
 800b976:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800b97a:	0064      	lsls	r4, r4, #1
 800b97c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800b980:	e7e6      	b.n	800b950 <__ieee754_powf+0x28>
 800b982:	2e00      	cmp	r6, #0
 800b984:	da1f      	bge.n	800b9c6 <__ieee754_powf+0x9e>
 800b986:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800b98a:	f080 8260 	bcs.w	800be4e <__ieee754_powf+0x526>
 800b98e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b992:	d32f      	bcc.n	800b9f4 <__ieee754_powf+0xcc>
 800b994:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800b998:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800b99c:	fa49 f503 	asr.w	r5, r9, r3
 800b9a0:	fa05 f303 	lsl.w	r3, r5, r3
 800b9a4:	454b      	cmp	r3, r9
 800b9a6:	d123      	bne.n	800b9f0 <__ieee754_powf+0xc8>
 800b9a8:	f005 0501 	and.w	r5, r5, #1
 800b9ac:	f1c5 0502 	rsb	r5, r5, #2
 800b9b0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800b9b4:	d11f      	bne.n	800b9f6 <__ieee754_powf+0xce>
 800b9b6:	2c00      	cmp	r4, #0
 800b9b8:	f280 8246 	bge.w	800be48 <__ieee754_powf+0x520>
 800b9bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800b9c0:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800b9c4:	e7c8      	b.n	800b958 <__ieee754_powf+0x30>
 800b9c6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800b9ca:	d111      	bne.n	800b9f0 <__ieee754_powf+0xc8>
 800b9cc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800b9d0:	f000 8234 	beq.w	800be3c <__ieee754_powf+0x514>
 800b9d4:	d906      	bls.n	800b9e4 <__ieee754_powf+0xbc>
 800b9d6:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800bcec <__ieee754_powf+0x3c4>
 800b9da:	2c00      	cmp	r4, #0
 800b9dc:	bfa8      	it	ge
 800b9de:	eeb0 0a68 	vmovge.f32	s0, s17
 800b9e2:	e7b9      	b.n	800b958 <__ieee754_powf+0x30>
 800b9e4:	2c00      	cmp	r4, #0
 800b9e6:	f280 822c 	bge.w	800be42 <__ieee754_powf+0x51a>
 800b9ea:	eeb1 0a68 	vneg.f32	s0, s17
 800b9ee:	e7b3      	b.n	800b958 <__ieee754_powf+0x30>
 800b9f0:	2500      	movs	r5, #0
 800b9f2:	e7dd      	b.n	800b9b0 <__ieee754_powf+0x88>
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800b9fa:	d102      	bne.n	800ba02 <__ieee754_powf+0xda>
 800b9fc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800ba00:	e7aa      	b.n	800b958 <__ieee754_powf+0x30>
 800ba02:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800ba06:	f040 8227 	bne.w	800be58 <__ieee754_powf+0x530>
 800ba0a:	2e00      	cmp	r6, #0
 800ba0c:	f2c0 8224 	blt.w	800be58 <__ieee754_powf+0x530>
 800ba10:	eeb0 0a48 	vmov.f32	s0, s16
 800ba14:	ecbd 8b02 	vpop	{d8}
 800ba18:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba1c:	f7ff befe 	b.w	800b81c <__ieee754_sqrtf>
 800ba20:	2d01      	cmp	r5, #1
 800ba22:	d199      	bne.n	800b958 <__ieee754_powf+0x30>
 800ba24:	eeb1 0a40 	vneg.f32	s0, s0
 800ba28:	e796      	b.n	800b958 <__ieee754_powf+0x30>
 800ba2a:	0ff0      	lsrs	r0, r6, #31
 800ba2c:	3801      	subs	r0, #1
 800ba2e:	ea55 0300 	orrs.w	r3, r5, r0
 800ba32:	d104      	bne.n	800ba3e <__ieee754_powf+0x116>
 800ba34:	ee38 8a48 	vsub.f32	s16, s16, s16
 800ba38:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800ba3c:	e78c      	b.n	800b958 <__ieee754_powf+0x30>
 800ba3e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800ba42:	d96d      	bls.n	800bb20 <__ieee754_powf+0x1f8>
 800ba44:	4baa      	ldr	r3, [pc, #680]	@ (800bcf0 <__ieee754_powf+0x3c8>)
 800ba46:	4598      	cmp	r8, r3
 800ba48:	d808      	bhi.n	800ba5c <__ieee754_powf+0x134>
 800ba4a:	2c00      	cmp	r4, #0
 800ba4c:	da0b      	bge.n	800ba66 <__ieee754_powf+0x13e>
 800ba4e:	2000      	movs	r0, #0
 800ba50:	ecbd 8b02 	vpop	{d8}
 800ba54:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba58:	f7ff beda 	b.w	800b810 <__math_oflowf>
 800ba5c:	4ba5      	ldr	r3, [pc, #660]	@ (800bcf4 <__ieee754_powf+0x3cc>)
 800ba5e:	4598      	cmp	r8, r3
 800ba60:	d908      	bls.n	800ba74 <__ieee754_powf+0x14c>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	dcf3      	bgt.n	800ba4e <__ieee754_powf+0x126>
 800ba66:	2000      	movs	r0, #0
 800ba68:	ecbd 8b02 	vpop	{d8}
 800ba6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba70:	f7ff bec8 	b.w	800b804 <__math_uflowf>
 800ba74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ba78:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba7c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800bcf8 <__ieee754_powf+0x3d0>
 800ba80:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800ba84:	eee0 6a67 	vfms.f32	s13, s0, s15
 800ba88:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ba8c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800ba90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ba94:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800bcfc <__ieee754_powf+0x3d4>
 800ba98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba9c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800bd00 <__ieee754_powf+0x3d8>
 800baa0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800baa4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800bd04 <__ieee754_powf+0x3dc>
 800baa8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800baac:	eeb0 7a67 	vmov.f32	s14, s15
 800bab0:	eea0 7a26 	vfma.f32	s14, s0, s13
 800bab4:	ee17 3a10 	vmov	r3, s14
 800bab8:	f36f 030b 	bfc	r3, #0, #12
 800babc:	ee07 3a10 	vmov	s14, r3
 800bac0:	eeb0 6a47 	vmov.f32	s12, s14
 800bac4:	eea0 6a66 	vfms.f32	s12, s0, s13
 800bac8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800bacc:	3d01      	subs	r5, #1
 800bace:	4305      	orrs	r5, r0
 800bad0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bad4:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800bad8:	f36f 040b 	bfc	r4, #0, #12
 800badc:	bf18      	it	ne
 800bade:	eeb0 8a66 	vmovne.f32	s16, s13
 800bae2:	ee06 4a90 	vmov	s13, r4
 800bae6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800baea:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800baee:	ee67 7a26 	vmul.f32	s15, s14, s13
 800baf2:	eee6 0a07 	vfma.f32	s1, s12, s14
 800baf6:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bafa:	ee17 1a10 	vmov	r1, s14
 800bafe:	2900      	cmp	r1, #0
 800bb00:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb04:	f340 80dd 	ble.w	800bcc2 <__ieee754_powf+0x39a>
 800bb08:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bb0c:	f240 80ca 	bls.w	800bca4 <__ieee754_powf+0x37c>
 800bb10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb18:	bf4c      	ite	mi
 800bb1a:	2001      	movmi	r0, #1
 800bb1c:	2000      	movpl	r0, #0
 800bb1e:	e797      	b.n	800ba50 <__ieee754_powf+0x128>
 800bb20:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bb24:	bf01      	itttt	eq
 800bb26:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800bd08 <__ieee754_powf+0x3e0>
 800bb2a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bb2e:	f06f 0317 	mvneq.w	r3, #23
 800bb32:	ee17 7a90 	vmoveq	r7, s15
 800bb36:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800bb3a:	bf18      	it	ne
 800bb3c:	2300      	movne	r3, #0
 800bb3e:	3a7f      	subs	r2, #127	@ 0x7f
 800bb40:	441a      	add	r2, r3
 800bb42:	4b72      	ldr	r3, [pc, #456]	@ (800bd0c <__ieee754_powf+0x3e4>)
 800bb44:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800bb48:	429f      	cmp	r7, r3
 800bb4a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800bb4e:	dd06      	ble.n	800bb5e <__ieee754_powf+0x236>
 800bb50:	4b6f      	ldr	r3, [pc, #444]	@ (800bd10 <__ieee754_powf+0x3e8>)
 800bb52:	429f      	cmp	r7, r3
 800bb54:	f340 80a4 	ble.w	800bca0 <__ieee754_powf+0x378>
 800bb58:	3201      	adds	r2, #1
 800bb5a:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800bb5e:	2600      	movs	r6, #0
 800bb60:	4b6c      	ldr	r3, [pc, #432]	@ (800bd14 <__ieee754_powf+0x3ec>)
 800bb62:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800bb66:	ee07 1a10 	vmov	s14, r1
 800bb6a:	edd3 5a00 	vldr	s11, [r3]
 800bb6e:	4b6a      	ldr	r3, [pc, #424]	@ (800bd18 <__ieee754_powf+0x3f0>)
 800bb70:	ee75 7a87 	vadd.f32	s15, s11, s14
 800bb74:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb78:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800bb7c:	1049      	asrs	r1, r1, #1
 800bb7e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800bb82:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800bb86:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800bb8a:	ee37 6a65 	vsub.f32	s12, s14, s11
 800bb8e:	ee07 1a90 	vmov	s15, r1
 800bb92:	ee26 5a24 	vmul.f32	s10, s12, s9
 800bb96:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800bb9a:	ee15 7a10 	vmov	r7, s10
 800bb9e:	401f      	ands	r7, r3
 800bba0:	ee06 7a90 	vmov	s13, r7
 800bba4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800bba8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800bbac:	ee65 7a05 	vmul.f32	s15, s10, s10
 800bbb0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800bbb4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800bd1c <__ieee754_powf+0x3f4>
 800bbb8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800bd20 <__ieee754_powf+0x3f8>
 800bbbc:	eee7 5a87 	vfma.f32	s11, s15, s14
 800bbc0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800bd24 <__ieee754_powf+0x3fc>
 800bbc4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bbc8:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800bcf8 <__ieee754_powf+0x3d0>
 800bbcc:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bbd0:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800bd28 <__ieee754_powf+0x400>
 800bbd4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800bbd8:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800bd2c <__ieee754_powf+0x404>
 800bbdc:	ee26 6a24 	vmul.f32	s12, s12, s9
 800bbe0:	eee7 5a27 	vfma.f32	s11, s14, s15
 800bbe4:	ee35 7a26 	vadd.f32	s14, s10, s13
 800bbe8:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800bbec:	ee27 7a06 	vmul.f32	s14, s14, s12
 800bbf0:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800bbf4:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800bbf8:	eef0 5a67 	vmov.f32	s11, s15
 800bbfc:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800bc00:	ee75 5a87 	vadd.f32	s11, s11, s14
 800bc04:	ee15 1a90 	vmov	r1, s11
 800bc08:	4019      	ands	r1, r3
 800bc0a:	ee05 1a90 	vmov	s11, r1
 800bc0e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bc12:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800bc16:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc1a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bc1e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc22:	eeb0 6a67 	vmov.f32	s12, s15
 800bc26:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bc2a:	ee16 1a10 	vmov	r1, s12
 800bc2e:	4019      	ands	r1, r3
 800bc30:	ee06 1a10 	vmov	s12, r1
 800bc34:	eeb0 7a46 	vmov.f32	s14, s12
 800bc38:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800bc3c:	493c      	ldr	r1, [pc, #240]	@ (800bd30 <__ieee754_powf+0x408>)
 800bc3e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800bc42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc46:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800bd34 <__ieee754_powf+0x40c>
 800bc4a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800bd38 <__ieee754_powf+0x410>
 800bc4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc52:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800bd3c <__ieee754_powf+0x414>
 800bc56:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc5a:	ed91 7a00 	vldr	s14, [r1]
 800bc5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc62:	ee07 2a10 	vmov	s14, r2
 800bc66:	4a36      	ldr	r2, [pc, #216]	@ (800bd40 <__ieee754_powf+0x418>)
 800bc68:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800bc6c:	eeb0 7a67 	vmov.f32	s14, s15
 800bc70:	eea6 7a25 	vfma.f32	s14, s12, s11
 800bc74:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800bc78:	ed92 5a00 	vldr	s10, [r2]
 800bc7c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800bc80:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bc84:	ee17 2a10 	vmov	r2, s14
 800bc88:	401a      	ands	r2, r3
 800bc8a:	ee07 2a10 	vmov	s14, r2
 800bc8e:	ee77 6a66 	vsub.f32	s13, s14, s13
 800bc92:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800bc96:	eee6 6a65 	vfms.f32	s13, s12, s11
 800bc9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bc9e:	e715      	b.n	800bacc <__ieee754_powf+0x1a4>
 800bca0:	2601      	movs	r6, #1
 800bca2:	e75d      	b.n	800bb60 <__ieee754_powf+0x238>
 800bca4:	d152      	bne.n	800bd4c <__ieee754_powf+0x424>
 800bca6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800bd44 <__ieee754_powf+0x41c>
 800bcaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcae:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800bcb2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800bcb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcba:	f73f af29 	bgt.w	800bb10 <__ieee754_powf+0x1e8>
 800bcbe:	2386      	movs	r3, #134	@ 0x86
 800bcc0:	e048      	b.n	800bd54 <__ieee754_powf+0x42c>
 800bcc2:	4a21      	ldr	r2, [pc, #132]	@ (800bd48 <__ieee754_powf+0x420>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d907      	bls.n	800bcd8 <__ieee754_powf+0x3b0>
 800bcc8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcd0:	bf4c      	ite	mi
 800bcd2:	2001      	movmi	r0, #1
 800bcd4:	2000      	movpl	r0, #0
 800bcd6:	e6c7      	b.n	800ba68 <__ieee754_powf+0x140>
 800bcd8:	d138      	bne.n	800bd4c <__ieee754_powf+0x424>
 800bcda:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bcde:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800bce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce6:	dbea      	blt.n	800bcbe <__ieee754_powf+0x396>
 800bce8:	e7ee      	b.n	800bcc8 <__ieee754_powf+0x3a0>
 800bcea:	bf00      	nop
 800bcec:	00000000 	.word	0x00000000
 800bcf0:	3f7ffff3 	.word	0x3f7ffff3
 800bcf4:	3f800007 	.word	0x3f800007
 800bcf8:	3eaaaaab 	.word	0x3eaaaaab
 800bcfc:	3fb8aa00 	.word	0x3fb8aa00
 800bd00:	3fb8aa3b 	.word	0x3fb8aa3b
 800bd04:	36eca570 	.word	0x36eca570
 800bd08:	4b800000 	.word	0x4b800000
 800bd0c:	001cc471 	.word	0x001cc471
 800bd10:	005db3d6 	.word	0x005db3d6
 800bd14:	0800c854 	.word	0x0800c854
 800bd18:	fffff000 	.word	0xfffff000
 800bd1c:	3e6c3255 	.word	0x3e6c3255
 800bd20:	3e53f142 	.word	0x3e53f142
 800bd24:	3e8ba305 	.word	0x3e8ba305
 800bd28:	3edb6db7 	.word	0x3edb6db7
 800bd2c:	3f19999a 	.word	0x3f19999a
 800bd30:	0800c844 	.word	0x0800c844
 800bd34:	3f76384f 	.word	0x3f76384f
 800bd38:	3f763800 	.word	0x3f763800
 800bd3c:	369dc3a0 	.word	0x369dc3a0
 800bd40:	0800c84c 	.word	0x0800c84c
 800bd44:	3338aa3c 	.word	0x3338aa3c
 800bd48:	43160000 	.word	0x43160000
 800bd4c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800bd50:	d96f      	bls.n	800be32 <__ieee754_powf+0x50a>
 800bd52:	15db      	asrs	r3, r3, #23
 800bd54:	3b7e      	subs	r3, #126	@ 0x7e
 800bd56:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800bd5a:	4118      	asrs	r0, r3
 800bd5c:	4408      	add	r0, r1
 800bd5e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bd62:	4a4e      	ldr	r2, [pc, #312]	@ (800be9c <__ieee754_powf+0x574>)
 800bd64:	3b7f      	subs	r3, #127	@ 0x7f
 800bd66:	411a      	asrs	r2, r3
 800bd68:	4002      	ands	r2, r0
 800bd6a:	ee07 2a10 	vmov	s14, r2
 800bd6e:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800bd72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800bd76:	f1c3 0317 	rsb	r3, r3, #23
 800bd7a:	4118      	asrs	r0, r3
 800bd7c:	2900      	cmp	r1, #0
 800bd7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd82:	bfb8      	it	lt
 800bd84:	4240      	neglt	r0, r0
 800bd86:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800bd8a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800bea0 <__ieee754_powf+0x578>
 800bd8e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800bea4 <__ieee754_powf+0x57c>
 800bd92:	ee16 3a90 	vmov	r3, s13
 800bd96:	f36f 030b 	bfc	r3, #0, #12
 800bd9a:	ee06 3a90 	vmov	s13, r3
 800bd9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800bda2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bda6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800bdaa:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800bea8 <__ieee754_powf+0x580>
 800bdae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdb2:	eee0 7a87 	vfma.f32	s15, s1, s14
 800bdb6:	eeb0 7a67 	vmov.f32	s14, s15
 800bdba:	eea6 7a86 	vfma.f32	s14, s13, s12
 800bdbe:	eef0 5a47 	vmov.f32	s11, s14
 800bdc2:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800bdc6:	ee67 6a07 	vmul.f32	s13, s14, s14
 800bdca:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bdce:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800beac <__ieee754_powf+0x584>
 800bdd2:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800beb0 <__ieee754_powf+0x588>
 800bdd6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800bdda:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800beb4 <__ieee754_powf+0x58c>
 800bdde:	eee6 5a26 	vfma.f32	s11, s12, s13
 800bde2:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800beb8 <__ieee754_powf+0x590>
 800bde6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800bdea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bebc <__ieee754_powf+0x594>
 800bdee:	eee6 5a26 	vfma.f32	s11, s12, s13
 800bdf2:	eeb0 6a47 	vmov.f32	s12, s14
 800bdf6:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800bdfa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800bdfe:	ee67 5a06 	vmul.f32	s11, s14, s12
 800be02:	ee36 6a66 	vsub.f32	s12, s12, s13
 800be06:	eee7 7a27 	vfma.f32	s15, s14, s15
 800be0a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800be0e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800be12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be16:	ee30 0a67 	vsub.f32	s0, s0, s15
 800be1a:	ee10 3a10 	vmov	r3, s0
 800be1e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800be22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be26:	da06      	bge.n	800be36 <__ieee754_powf+0x50e>
 800be28:	f000 f854 	bl	800bed4 <scalbnf>
 800be2c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800be30:	e592      	b.n	800b958 <__ieee754_powf+0x30>
 800be32:	2000      	movs	r0, #0
 800be34:	e7a7      	b.n	800bd86 <__ieee754_powf+0x45e>
 800be36:	ee00 3a10 	vmov	s0, r3
 800be3a:	e7f7      	b.n	800be2c <__ieee754_powf+0x504>
 800be3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be40:	e58a      	b.n	800b958 <__ieee754_powf+0x30>
 800be42:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800bec0 <__ieee754_powf+0x598>
 800be46:	e587      	b.n	800b958 <__ieee754_powf+0x30>
 800be48:	eeb0 0a48 	vmov.f32	s0, s16
 800be4c:	e584      	b.n	800b958 <__ieee754_powf+0x30>
 800be4e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800be52:	f43f adbb 	beq.w	800b9cc <__ieee754_powf+0xa4>
 800be56:	2502      	movs	r5, #2
 800be58:	eeb0 0a48 	vmov.f32	s0, s16
 800be5c:	f000 f832 	bl	800bec4 <fabsf>
 800be60:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800be64:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800be68:	4647      	mov	r7, r8
 800be6a:	d003      	beq.n	800be74 <__ieee754_powf+0x54c>
 800be6c:	f1b8 0f00 	cmp.w	r8, #0
 800be70:	f47f addb 	bne.w	800ba2a <__ieee754_powf+0x102>
 800be74:	2c00      	cmp	r4, #0
 800be76:	bfbc      	itt	lt
 800be78:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800be7c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800be80:	2e00      	cmp	r6, #0
 800be82:	f6bf ad69 	bge.w	800b958 <__ieee754_powf+0x30>
 800be86:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800be8a:	ea58 0805 	orrs.w	r8, r8, r5
 800be8e:	f47f adc7 	bne.w	800ba20 <__ieee754_powf+0xf8>
 800be92:	ee70 7a40 	vsub.f32	s15, s0, s0
 800be96:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800be9a:	e55d      	b.n	800b958 <__ieee754_powf+0x30>
 800be9c:	ff800000 	.word	0xff800000
 800bea0:	3f317218 	.word	0x3f317218
 800bea4:	3f317200 	.word	0x3f317200
 800bea8:	35bfbe8c 	.word	0x35bfbe8c
 800beac:	b5ddea0e 	.word	0xb5ddea0e
 800beb0:	3331bb4c 	.word	0x3331bb4c
 800beb4:	388ab355 	.word	0x388ab355
 800beb8:	bb360b61 	.word	0xbb360b61
 800bebc:	3e2aaaab 	.word	0x3e2aaaab
 800bec0:	00000000 	.word	0x00000000

0800bec4 <fabsf>:
 800bec4:	ee10 3a10 	vmov	r3, s0
 800bec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800becc:	ee00 3a10 	vmov	s0, r3
 800bed0:	4770      	bx	lr
	...

0800bed4 <scalbnf>:
 800bed4:	ee10 3a10 	vmov	r3, s0
 800bed8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bedc:	d02b      	beq.n	800bf36 <scalbnf+0x62>
 800bede:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bee2:	d302      	bcc.n	800beea <scalbnf+0x16>
 800bee4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bee8:	4770      	bx	lr
 800beea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800beee:	d123      	bne.n	800bf38 <scalbnf+0x64>
 800bef0:	4b24      	ldr	r3, [pc, #144]	@ (800bf84 <scalbnf+0xb0>)
 800bef2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bf88 <scalbnf+0xb4>
 800bef6:	4298      	cmp	r0, r3
 800bef8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800befc:	db17      	blt.n	800bf2e <scalbnf+0x5a>
 800befe:	ee10 3a10 	vmov	r3, s0
 800bf02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bf06:	3a19      	subs	r2, #25
 800bf08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bf0c:	4288      	cmp	r0, r1
 800bf0e:	dd15      	ble.n	800bf3c <scalbnf+0x68>
 800bf10:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bf8c <scalbnf+0xb8>
 800bf14:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bf90 <scalbnf+0xbc>
 800bf18:	ee10 3a10 	vmov	r3, s0
 800bf1c:	eeb0 7a67 	vmov.f32	s14, s15
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	bfb8      	it	lt
 800bf24:	eef0 7a66 	vmovlt.f32	s15, s13
 800bf28:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bf2c:	4770      	bx	lr
 800bf2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bf94 <scalbnf+0xc0>
 800bf32:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bf36:	4770      	bx	lr
 800bf38:	0dd2      	lsrs	r2, r2, #23
 800bf3a:	e7e5      	b.n	800bf08 <scalbnf+0x34>
 800bf3c:	4410      	add	r0, r2
 800bf3e:	28fe      	cmp	r0, #254	@ 0xfe
 800bf40:	dce6      	bgt.n	800bf10 <scalbnf+0x3c>
 800bf42:	2800      	cmp	r0, #0
 800bf44:	dd06      	ble.n	800bf54 <scalbnf+0x80>
 800bf46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bf4e:	ee00 3a10 	vmov	s0, r3
 800bf52:	4770      	bx	lr
 800bf54:	f110 0f16 	cmn.w	r0, #22
 800bf58:	da09      	bge.n	800bf6e <scalbnf+0x9a>
 800bf5a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bf94 <scalbnf+0xc0>
 800bf5e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bf98 <scalbnf+0xc4>
 800bf62:	ee10 3a10 	vmov	r3, s0
 800bf66:	eeb0 7a67 	vmov.f32	s14, s15
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	e7d9      	b.n	800bf22 <scalbnf+0x4e>
 800bf6e:	3019      	adds	r0, #25
 800bf70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bf74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bf78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bf9c <scalbnf+0xc8>
 800bf7c:	ee07 3a90 	vmov	s15, r3
 800bf80:	e7d7      	b.n	800bf32 <scalbnf+0x5e>
 800bf82:	bf00      	nop
 800bf84:	ffff3cb0 	.word	0xffff3cb0
 800bf88:	4c000000 	.word	0x4c000000
 800bf8c:	7149f2ca 	.word	0x7149f2ca
 800bf90:	f149f2ca 	.word	0xf149f2ca
 800bf94:	0da24260 	.word	0x0da24260
 800bf98:	8da24260 	.word	0x8da24260
 800bf9c:	33000000 	.word	0x33000000

0800bfa0 <_init>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr

0800bfac <_fini>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr
