%implements stm32f4_advanced_pwm "C"

%selectfile NULL_FILE

%function BlockTypeSetup(block, system) void
   %<AddParametersToBlock(block)>

   %if (EXISTS(::__STM32F4XX_GPIO__) == 0)
   %assign :: __STM32F4XX_GPIO__ = 1
      %openfile tmpBuf
         #include "stm32f4xx_gpio.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f4xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif

   %if (EXISTS(::__STM32F4XX_TIM__) == 0)
   %assign :: __STM32F4XX_TIM__ = 1
      %openfile tmpBuf
         #include "stm32f4xx_tim.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f4xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
 
%endfunction %% BlockTypeSetup(block, system)

%function BlockInstanceSetup(block, system) void
   %<AddParametersToBlock(block)>

   
   %openfile tmpBuf
   /* Advanced PWM Configuration, Block: %<Name> */
   #define %<blockid>_PWM_PERIOD    %<pwm_period>
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDefines")>
   %<LibSetSourceFileCustomSection(file,"cDefines",tmpBuf)>

   %openfile tmpBuf

/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid>
 * ########################################################################
*/
   void disable_%<blockid>(void)
   {
        /* Main Output Enable */
        TIM_CtrlPWMOutputs(TIM%<timer_module>, DISABLE);

        /* TIM%<timer_module> counter disable */
        /*TIM_Cmd(TIM%<timer_module>, DISABLE);*/
        /*RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM%<timer_module>, DISABLE);*/
   }

   void enable_%<blockid>(void)
   {
        GPIO_InitTypeDef GPIO_InitStructure;
        TIM_BDTRInitTypeDef TIM_BDTRInitStructure;
        TIM_OCInitTypeDef TIM_OCInitStructure;
        TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
        /* TIM%<timer_module> clock enable */
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM%<timer_module>, ENABLE);
        %if output_state_buffer == "TIM_OutputState_Enable"
            /* Output state */
            %if timer_module == 1
                %if pwm_break_input == "TIM_Break_Enable"
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
                %endif
                %if (ch1_enabled == 1) || (ch3_enabled == 1) || (ch4_enabled == 1)
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
                %endif
                %if ch2_enabled == 1
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
                %endif
            %else
                %if pwm_break_input == "TIM_Break_Enable"
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
                %endif
                %if (ch1_enabled == 1) || (ch2_enabled == 1) || (ch3_enabled == 1) || (ch4_enabled == 1)
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
                %endif
            %endif
            /* GPIO Configuration */
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
            %if ch1_enabled == 1
                /* TIM%<timer_module> Channel 1 */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
                    GPIO_Init(GPIOA, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
                    GPIO_Init(GPIOC, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_TIM8);                    
                %endif
            %endif
            %if ch2_enabled == 1
                /* TIM%<timer_module> Channel 2 */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
                    GPIO_Init(GPIOE, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
                    GPIO_Init(GPIOC, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_TIM8);                    
                %endif
            %endif  
            %if ch3_enabled == 1
                /* TIM%<timer_module> Channel 3 */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
                    GPIO_Init(GPIOA, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
                    GPIO_Init(GPIOC, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_TIM8);                    
                %endif
            %endif  
            %if ch4_enabled == 1
                /* TIM%<timer_module> Channel 4 */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
                    GPIO_Init(GPIOA, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
                    GPIO_Init(GPIOC, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_TIM8);                    
                %endif
            %endif  
        %endif
        %if output_n_state_buffer == "TIM_OutputNState_Enable"
            /* Output N state */
            %if %<timer_module == 1>
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
            %else
                %if ch1_enabled == 1
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
                %endif
                %if (ch2_enabled == 1) || (ch3_enabled == 1)
                RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
                %endif
            %endif

            /* GPIO Configuration */
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
            GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
            GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
            %if ch1_enabled == 1
                /* TIM%<timer_module> Channel 1N */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
                    GPIO_Init(GPIOB, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
                    GPIO_Init(GPIOA, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOA, GPIO_PinSource7, GPIO_AF_TIM8);
                %endif
            %endif
            %if ch2_enabled == 1
                /* TIM%<timer_module> Channel 2N */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
                    GPIO_Init(GPIOB, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOB, GPIO_PinSource14, GPIO_AF_TIM1); 
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
                    GPIO_Init(GPIOB, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOB, GPIO_PinSource0, GPIO_AF_TIM8); 
                %endif
            %endif
            %if ch3_enabled == 1
                /* TIM%<timer_module> Channel 3N */
                %if timer_module == 1
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
                    GPIO_Init(GPIOB, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_TIM1);
                %else
                    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
                    GPIO_Init(GPIOB, &GPIO_InitStructure);
                    GPIO_PinAFConfig(GPIOB, GPIO_PinSource1, GPIO_AF_TIM8);
                %endif
            %endif
        %endif
        %if pwm_break_input == "TIM_Break_Enable"
            /* GPIO Configuration: BKIN pin */
            %if timer_module == 1
                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
                GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
                GPIO_Init(GPIOB, &GPIO_InitStructure);
                GPIO_PinAFConfig(GPIOB, GPIO_PinSource12, GPIO_AF_TIM%<timer_module>);
            %else
                GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
                GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
                GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
                GPIO_Init(GPIOA, &GPIO_InitStructure);
                GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM%<timer_module>);
            %endif
        %endif
        /* Time Base configuration */
        TIM_TimeBaseStructure.TIM_Prescaler = %<blockid>_PRESCALE;
        TIM_TimeBaseStructure.TIM_CounterMode = %<pwm_align_mode>;
        TIM_TimeBaseStructure.TIM_Period = %<blockid>_PERIOD;
        TIM_TimeBaseStructure.TIM_ClockDivision = 0;
        TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
        TIM_TimeBaseInit(TIM%<timer_module>, &TIM_TimeBaseStructure);
        /* Channel 1, 2,3 and 4 Configuration in PWM mode */
        TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
        %if output_state_buffer == "TIM_OutputState_Enable" 
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
        %else
        TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;
        %endif
        %if output_n_state_buffer == "TIM_OutputNState_Enable"
        TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
        %else
        TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;
        %endif
        %if ch1_enabled == 1
            /* Channel 1 */
            TIM_OCInitStructure.TIM_Pulse = 0;
            TIM_OCInitStructure.TIM_OCPolarity = %<output1_polarity>;
            TIM_OCInitStructure.TIM_OCNPolarity = %<output1_n_polarity>;
            TIM_OCInitStructure.TIM_OCIdleState = %<output1_idle>;
            TIM_OCInitStructure.TIM_OCNIdleState = %<output1_n_idle>;
            TIM_OC1Init(TIM%<timer_module>, &TIM_OCInitStructure);
        %endif
        %if ch2_enabled == 1
            /* Channel 2 */
            TIM_OCInitStructure.TIM_Pulse = 0;
            TIM_OCInitStructure.TIM_OCPolarity = %<output2_polarity>;
            TIM_OCInitStructure.TIM_OCNPolarity = %<output2_n_polarity>;
            TIM_OCInitStructure.TIM_OCIdleState = %<output2_idle>;
            TIM_OCInitStructure.TIM_OCNIdleState = %<output2_n_idle>;
            TIM_OC2Init(TIM%<timer_module>, &TIM_OCInitStructure);
        %endif
        %if ch3_enabled == 1
            /* Channel 3 */
            TIM_OCInitStructure.TIM_Pulse = 0;
            TIM_OCInitStructure.TIM_OCPolarity = %<output3_polarity>;
            TIM_OCInitStructure.TIM_OCNPolarity = %<output3_n_polarity>;
            TIM_OCInitStructure.TIM_OCIdleState = %<output3_idle>;
            TIM_OCInitStructure.TIM_OCNIdleState = %<output3_n_idle>;
            TIM_OC3Init(TIM%<timer_module>, &TIM_OCInitStructure);
        %endif
        %if ch4_enabled == 1
            /* Channel Ref */
            TIM_OCInitStructure.TIM_Pulse = 0;
            TIM_OCInitStructure.TIM_OCPolarity = %<output4_polarity>;
            TIM_OCInitStructure.TIM_OCNPolarity = %<output4_n_polarity>;
            TIM_OCInitStructure.TIM_OCIdleState = %<output4_idle>;
            TIM_OCInitStructure.TIM_OCNIdleState = %<output4_n_idle>;
            TIM_OC4Init(TIM%<timer_module>, &TIM_OCInitStructure);
        %endif
        /* Automatic Output enable, Break, dead time and lock configuration*/
        TIM_BDTRInitStructure.TIM_OSSRState = TIM_OSSRState_Enable;
        TIM_BDTRInitStructure.TIM_OSSIState = TIM_OSSIState_Enable;
        TIM_BDTRInitStructure.TIM_LOCKLevel = %<pwm_lock_level>;
        TIM_BDTRInitStructure.TIM_DeadTime = %<blockid>_DEADTIME;
        TIM_BDTRInitStructure.TIM_Break = %<pwm_break_input>;
        TIM_BDTRInitStructure.TIM_BreakPolarity = %<pwm_break_polarity>;
        TIM_BDTRInitStructure.TIM_AutomaticOutput = %<pwm_auto_outenable>;
        TIM_BDTRConfig(TIM%<timer_module>, &TIM_BDTRInitStructure);
        /* TIM counter enable */
        TIM_Cmd(TIM%<timer_module>, ENABLE);
        /* Main Output Enable */
        TIM_CtrlPWMOutputs(TIM%<timer_module>, ENABLE);
   }

    %closefile tmpBuf
    %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
    %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
    %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
       
    %openfile tmpBuf
        /* Timer %<timer_module> */
        /* %<blockid> Period */
        #define %<blockid>_PERIOD							%<pwm_period>
        #define %<blockid>_PRESCALE                         %<pwm_presc>
        /* Deadtime in unit of seconds */
        #define %<blockid>_DEADTIME                         %<pwm_deadtime_val>
    %closefile tmpBuf
    %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
    %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
    %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

    %openfile tmpBuf
    /* ########################################################################
     * Name: %<Name>
     * Id: %<blockid>
     * ########################################################################
     */
     void disable_%<blockid>(void);
     void enable_%<blockid>(void);
    %closefile tmpBuf
    %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
    %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
    %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction %%Block Instance setup

%function Outputs(block, system) Output
   %<AddParametersToBlock(block)>
      %assign i = 0 
      %if ch1_enabled == 1
            %assign u = LibBlockInputSignal(i, "", "", 0)
            if(%<u> < 0.0) { /* Disable while negative duty */
              TIM%<timer_module>->CCER &= (uint16_t)~((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_1);
            }
            else {
              TIM%<timer_module>->CCER |= (uint16_t)((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_1);
              TIM%<timer_module>->CCR1 = (uint16_t)((uint32_t)%<blockid>_PERIOD*%<u>/100);
            }
            %assign i = i + 1
      %endif 
      %if ch2_enabled == 1
            %assign u = LibBlockInputSignal(i, "", "", 0)
            if(%<u> < 0.0) { /* Disable while negative duty */
              TIM%<timer_module>->CCER &= (uint16_t)~((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_2);
            }
            else {
              TIM%<timer_module>->CCER |= (uint16_t)((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_2);
              TIM%<timer_module>->CCR2 = (uint16_t)((uint32_t)%<blockid>_PERIOD*%<u>/100);
            }            
            %assign i = i + 1 
      %endif
      %if ch3_enabled == 1
            %assign u = LibBlockInputSignal(i, "", "", 0)
            if(%<u> < 0.0) { /* Disable while negative duty */
              TIM%<timer_module>->CCER &= (uint16_t)~((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_3);
            }
            else {
              TIM%<timer_module>->CCER |= (uint16_t)((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_3);
              TIM%<timer_module>->CCR3 = (uint16_t)((uint32_t)%<blockid>_PERIOD*%<u>/100);
            }            
            %assign i = i + 1
      %endif
      %if ch4_enabled == 1
            %assign u = LibBlockInputSignal(i, "", "", 0)
            if(%<u> < 0.0) { /* Disable while negative duty */
              TIM%<timer_module>->CCER &= (uint16_t)~((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_4);
            }
            else {
              TIM%<timer_module>->CCER |= (uint16_t)((TIM_CCx_Enable | TIM_CCxN_Enable) << TIM_Channel_4);
              TIM%<timer_module>->CCR4 = (uint16_t)((uint32_t)%<blockid>_PERIOD*%<u>/100);
            }
            %assign i = i + 1 
      %endif
%endfunction %% Outputs(block, system)

%function Enable(block, system) Output
%<AddParametersToBlock(block)>
enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
%<AddParametersToBlock(block)>
disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
%<AddParametersToBlock(block)>
/* terminate_%<blockid>(); */
%endfunction

%function AddParametersToBlock(block) void      
   %assign timer_module = CAST("Number",SFcnParamSettings.timer_module)
   %assign pwm_period = CAST("Number",SFcnParamSettings.pwm_period)
   %assign pwm_presc = CAST("Number",SFcnParamSettings.pwm_presc)
   %assign pwm_align_mode = CAST("String",SFcnParamSettings.pwm_align_mode)
   %assign pwm_deadtime_val = CAST("Number",SFcnParamSettings.pwm_deadtime_val)
   %assign pwm_lock_level = CAST("String",SFcnParamSettings.pwm_lock_level)
   %assign pwm_break_input = CAST("String",SFcnParamSettings.pwm_break_input)
   %assign pwm_break_polarity = CAST("String",SFcnParamSettings.pwm_break_polarity)
   %assign pwm_auto_outenable = CAST("String",SFcnParamSettings.pwm_auto_outenable)
   %assign output_state_buffer = CAST("String",SFcnParamSettings.output_state_buffer)
   %assign output_n_state_buffer = CAST("String",SFcnParamSettings.output_n_state_buffer)
   %assign ch1_enabled = CAST("Number",SFcnParamSettings.ch1_enabled)
   %assign ch2_enabled = CAST("Number",SFcnParamSettings.ch2_enabled)
   %assign ch3_enabled = CAST("Number",SFcnParamSettings.ch3_enabled)
   %assign ch4_enabled = CAST("Number",SFcnParamSettings.ch4_enabled)
   %assign output1_polarity = CAST("String",SFcnParamSettings.output1_polarity)
   %assign output1_idle = CAST("String",SFcnParamSettings.output1_idle)
   %assign output1_n_polarity = CAST("String",SFcnParamSettings.output1_n_polarity)
   %assign output1_n_idle = CAST("String",SFcnParamSettings.output1_n_idle)
   %assign output2_polarity = CAST("String",SFcnParamSettings.output2_polarity)
   %assign output2_idle = CAST("String",SFcnParamSettings.output2_idle)
   %assign output2_n_polarity = CAST("String",SFcnParamSettings.output2_n_polarity)
   %assign output2_n_idle = CAST("String",SFcnParamSettings.output2_n_idle)
   %assign output3_polarity = CAST("String",SFcnParamSettings.output3_polarity)
   %assign output3_idle = CAST("String",SFcnParamSettings.output3_idle)
   %assign output3_n_polarity = CAST("String",SFcnParamSettings.output3_n_polarity)
   %assign output3_n_idle = CAST("String",SFcnParamSettings.output3_n_idle)
   %assign output4_polarity = CAST("String",SFcnParamSettings.output4_polarity)
   %assign output4_idle = CAST("String",SFcnParamSettings.output4_idle)
   %assign output4_n_polarity = CAST("String",SFcnParamSettings.output4_n_polarity)
   %assign output4_n_idle = CAST("String",SFcnParamSettings.output4_n_idle)
   %assign blockid = CAST("String",SFcnParamSettings.blockid)

   %assign block = block + timer_module + pwm_period + pwm_presc + \
                    pwm_align_mode + pwm_deadtime_val + pwm_lock_level + \
                    pwm_break_input + pwm_break_polarity + pwm_auto_outenable + \
                    output_state_buffer + output_n_state_buffer + \
                    ch1_enabled + ch2_enabled + ch3_enabled + ch4_enabled + \
                    output1_polarity + output1_idle + output1_n_polarity + output1_n_idle + \
                    output2_polarity + output2_idle + output2_n_polarity + output2_n_idle + \
                    output3_polarity + output3_idle + output3_n_polarity + output3_n_idle + \
                    output4_polarity + output4_idle + output4_n_polarity + output4_n_idle + \
                    blockid

%endfunction