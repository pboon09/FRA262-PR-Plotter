%implements stm32f4_fsmc "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
  %assign conf = CAST("String",SFcnParamSettings.conf)
  %assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
  %assign blockid = CAST("String",SFcnParamSettings.blockid)

  %% Size of confstr: %<SIZE(confstr)[1]>
  %assign block = block + conf + sampletime + blockid

  %if conf == "LcdUpdate"
    %assign picturehigh = confstr[0]
    %assign picturewidth = confstr[1]    
    %assign block = block + picturehigh + picturewidth  
  %endif
  %if conf == "RamSetup"
    %assign useasmainram = confstr[0]

    %assign block = block + useasmainram
  %endif
%endfunction

%function BlockTypeSetup(block, system) void
%<addParametersToBlock(block)>
   %if (EXISTS(::__STM32F4XX_GPIO__) == 0)
      %assign :: __STM32F4XX_GPIO__ = 1
      %openfile tmpBuf
         #include "stm32f4xx_gpio.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f4xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STM32F4XX_FSMC__) == 0)
      %assign :: __STM32F4XX_FSMC__ = 1
      %openfile tmpBuf
         #include "stm32f4xx_fsmc.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f4xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %openfile tmpBuf

   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %openfile tmpBuf

   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%endfunction

%function BlockInstanceSetup(block, system) void
%<addParametersToBlock(block)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid>
 * ########################################################################
*/
  %if (conf == "LcdUpdate")
    %if (EXISTS(::__LCD_X__) == 0)
      %assign :: __LCD_X__ = 1
      #define _X(s) ((%<picturehigh>/2-1) + s)
      #define _Y(s) ((%<picturewidth>/2-1) + s)
    %endif

    #define %<blockid>_IMAGE_COLUMN_SIZE   %<picturehigh>
    #define %<blockid>_IMAGE_LINE_SIZE     %<picturewidth>

    #define %<blockid>_SOURCE   0x64000000

    void %<blockid>_Update(void);
  %endif

  %if (conf == "LcdSetup")
  /* LCD Registers */ 
  #define LCD_REG_0             0x00
  #define LCD_REG_1             0x01
  #define LCD_REG_2             0x02
  #define LCD_REG_3             0x03
  #define LCD_REG_4             0x04
  #define LCD_REG_5             0x05
  #define LCD_REG_6             0x06
  #define LCD_REG_7             0x07
  #define LCD_REG_8             0x08
  #define LCD_REG_9             0x09
  #define LCD_REG_10            0x0A
  #define LCD_REG_12            0x0C
  #define LCD_REG_13            0x0D
  #define LCD_REG_14            0x0E
  #define LCD_REG_15            0x0F
  #define LCD_REG_16            0x10
  #define LCD_REG_17            0x11
  #define LCD_REG_18            0x12
  #define LCD_REG_19            0x13
  #define LCD_REG_20            0x14
  #define LCD_REG_21            0x15
  #define LCD_REG_22            0x16
  #define LCD_REG_23            0x17
  #define LCD_REG_24            0x18
  #define LCD_REG_25            0x19
  #define LCD_REG_26            0x1A
  #define LCD_REG_27            0x1B
  #define LCD_REG_28            0x1C
  #define LCD_REG_29            0x1D
  #define LCD_REG_30            0x1E
  #define LCD_REG_31            0x1F
  #define LCD_REG_32            0x20
  #define LCD_REG_33            0x21
  #define LCD_REG_34            0x22
  #define LCD_REG_36            0x24
  #define LCD_REG_37            0x25
  #define LCD_REG_40            0x28
  #define LCD_REG_41            0x29
  #define LCD_REG_43            0x2B
  #define LCD_REG_45            0x2D
  #define LCD_REG_48            0x30
  #define LCD_REG_49            0x31
  #define LCD_REG_50            0x32
  #define LCD_REG_51            0x33
  #define LCD_REG_52            0x34
  #define LCD_REG_53            0x35
  #define LCD_REG_54            0x36
  #define LCD_REG_55            0x37
  #define LCD_REG_56            0x38
  #define LCD_REG_57            0x39
  #define LCD_REG_58            0x3A
  #define LCD_REG_59            0x3B
  #define LCD_REG_60            0x3C
  #define LCD_REG_61            0x3D
  #define LCD_REG_62            0x3E
  #define LCD_REG_63            0x3F
  #define LCD_REG_64            0x40
  #define LCD_REG_65            0x41
  #define LCD_REG_66            0x42
  #define LCD_REG_67            0x43
  #define LCD_REG_68            0x44
  #define LCD_REG_69            0x45
  #define LCD_REG_70            0x46
  #define LCD_REG_71            0x47
  #define LCD_REG_72            0x48
  #define LCD_REG_73            0x49
  #define LCD_REG_74            0x4A
  #define LCD_REG_75            0x4B
  #define LCD_REG_76            0x4C
  #define LCD_REG_77            0x4D
  #define LCD_REG_78            0x4E
  #define LCD_REG_79            0x4F
  #define LCD_REG_80            0x50
  #define LCD_REG_81            0x51
  #define LCD_REG_82            0x52
  #define LCD_REG_83            0x53
  #define LCD_REG_96            0x60
  #define LCD_REG_97            0x61
  #define LCD_REG_106           0x6A
  #define LCD_REG_118           0x76
  #define LCD_REG_128           0x80
  #define LCD_REG_129           0x81
  #define LCD_REG_130           0x82
  #define LCD_REG_131           0x83
  #define LCD_REG_132           0x84
  #define LCD_REG_133           0x85
  #define LCD_REG_134           0x86
  #define LCD_REG_135           0x87
  #define LCD_REG_136           0x88
  #define LCD_REG_137           0x89
  #define LCD_REG_139           0x8B
  #define LCD_REG_140           0x8C
  #define LCD_REG_141           0x8D
  #define LCD_REG_143           0x8F
  #define LCD_REG_144           0x90
  #define LCD_REG_145           0x91
  #define LCD_REG_146           0x92
  #define LCD_REG_147           0x93
  #define LCD_REG_148           0x94
  #define LCD_REG_149           0x95
  #define LCD_REG_150           0x96
  #define LCD_REG_151           0x97
  #define LCD_REG_152           0x98
  #define LCD_REG_153           0x99
  #define LCD_REG_154           0x9A
  #define LCD_REG_157           0x9D
  #define LCD_REG_192           0xC0
  #define LCD_REG_193           0xC1
  #define LCD_REG_229           0xE5

  /* LCD color */ 
  #define LCD_COLOR_WHITE       0xFFFF
  #define LCD_COLOR_BLACK       0x0000
  #define LCD_COLOR_GREY        0xF7DE
  #define LCD_COLOR_BLUE        0x001F
  #define LCD_COLOR_BLUE2       0x051F
  #define LCD_COLOR_RED         0xF800
  #define LCD_COLOR_MAGENTA     0xF81F
  #define LCD_COLOR_GREEN       0x07E0
  #define LCD_COLOR_CYAN        0x7FFF
  #define LCD_COLOR_YELLOW      0xFFE0

  void %<blockid>_LCD_Init(void);

  void LCD_WriteRAM_Prepare(void);
  void LCD_WriteRAM(uint16_t RGB_Code);
  uint16_t LCD_ReadRAM(void);
  void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue);
  uint16_t LCD_ReadReg(uint8_t LCD_Reg);
  void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos);
  void LCD_Clear(uint16_t Color);
  void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width);
  %endif

  %if (conf == "RamSetup") || (conf == "LcdSetup")
  void enable_%<blockid>(void);
  %endif
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid> 
 * ########################################################################
*/
%if (conf == "LcdSetup")
uint32_t %<blockid>_init_state = 0;

typedef struct
{
  __IO uint16_t LCD_REG;
  __IO uint16_t LCD_RAM;
} LCD_TypeDef;

/* Note: LCD /CS is NE3 - Bank 3 of NOR/SRAM Bank 1~4 */
#define LCD_BASE           ((uint32_t)(0x60000000 | 0x08000000))
#define LCD                ((LCD_TypeDef *) LCD_BASE)

/* Prepare to write to the LCD RAM */
void LCD_WriteRAM_Prepare(void)
{
  LCD->LCD_REG = LCD_REG_34;
}

/* Writes to the LCD RAM */
void LCD_WriteRAM(uint16_t RGB_Code)
{
  /* Write 16-bit GRAM Reg */
  LCD->LCD_RAM = RGB_Code;
}

/* Reads the LCD RAM */
uint16_t LCD_ReadRAM(void)
{
  /* Write 16-bit Index (then Read Reg) */
  LCD->LCD_REG = LCD_REG_34; /* Select GRAM Reg */
  /* Read 16-bit Reg */
  return LCD->LCD_RAM;
}

/* Writes to the selected LCD register */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
  /* Write 16-bit Index, then Write Reg */
  LCD->LCD_REG = LCD_Reg;
  /* Write 16-bit Reg */
  LCD->LCD_RAM = LCD_RegValue;
}

/* Reads the selected LCD Register */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
  /* Write 16-bit Index (then Read Reg) */
  LCD->LCD_REG = LCD_Reg;
  /* Read 16-bit Reg */
  return (LCD->LCD_RAM);
}

/* Sets the cursor position */
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
  LCD_WriteReg(LCD_REG_32, Xpos);
  LCD_WriteReg(LCD_REG_33, Ypos);
}

/* Clears the hole LCD */
void LCD_Clear(uint16_t Color)
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x013F); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 76800; index++)
  {
    LCD->LCD_RAM = Color;
  }  
}

/* Sets a display window */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Height, uint16_t Width)
{
  /* Horizontal GRAM Start Address */
  if(Xpos >= Height)
  {
    LCD_WriteReg(LCD_REG_80, (Xpos - Height + 1));
  }
  else
  {
    LCD_WriteReg(LCD_REG_80, 0);
  }
  /* Horizontal GRAM End Address */
  LCD_WriteReg(LCD_REG_81, Xpos);
  /* Vertical GRAM Start Address */
  if(Ypos >= Width)
  {
    LCD_WriteReg(LCD_REG_82, (Ypos - Width + 1));
  }  
  else
  {
    LCD_WriteReg(LCD_REG_82, 0);
  }
  /* Vertical GRAM End Address */
  LCD_WriteReg(LCD_REG_83, Ypos);
  LCD_SetCursor(Xpos, Ypos);
}

void %<blockid>_LCD_Init(void)
{ 
  __IO uint32_t lcdid = 0;

  /* Check init state */
  if(%<blockid>_init_state != 0) {
    return; /* No init needded */
  }
  else {
   %<blockid>_init_state = 1; /* Mark as already init */
  }

  /* Delay 50ms */
  SysTimer_delay_us(50000UL);

  /* Read the LCD ID */
  lcdid = LCD_ReadReg(0x00);  

  /* Check if the LCD is ILI9320 Controller */
  if(lcdid == 0x9320)
  {
    /* Start Initial Sequence */
    LCD_WriteReg(LCD_REG_229,0x8000); /* Set the internal vcore voltage */
    LCD_WriteReg(LCD_REG_0,  0x0001); /* Start internal OSC. */
    LCD_WriteReg(LCD_REG_1,  0x0100); /* set SS and SM bit */
    LCD_WriteReg(LCD_REG_2,  0x0700); /* set 1 line inversion */
    LCD_WriteReg(LCD_REG_3,  0x1030); /* set GRAM write direction and BGR=1. */
    LCD_WriteReg(LCD_REG_4,  0x0000); /* Resize register */
    LCD_WriteReg(LCD_REG_8,  0x0202); /* set the back porch and front porch */
    LCD_WriteReg(LCD_REG_9,  0x0000); /* set non-display area refresh cycle ISC[3:0] */
    LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
    LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
    LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
    LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */

    /* Power On sequence */
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    SysTimer_delay_us(200000UL);                 /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    SysTimer_delay_us(50000UL);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    SysTimer_delay_us(50000UL);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    SysTimer_delay_us(50000UL);                  /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
    LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */

    /* Adjust the Gamma Curve */
    LCD_WriteReg(LCD_REG_48, 0x0007);
    LCD_WriteReg(LCD_REG_49, 0x0007);
    LCD_WriteReg(LCD_REG_50, 0x0007);
    LCD_WriteReg(LCD_REG_53, 0x0007);
    LCD_WriteReg(LCD_REG_54, 0x0007);
    LCD_WriteReg(LCD_REG_55, 0x0700);
    LCD_WriteReg(LCD_REG_56, 0x0700);
    LCD_WriteReg(LCD_REG_57, 0x0700);
    LCD_WriteReg(LCD_REG_60, 0x0700);
    LCD_WriteReg(LCD_REG_61, 0x1F00);
  
    /* Set GRAM area */
    LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
    LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
    LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
    LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */
    LCD_WriteReg(LCD_REG_96,  0x2700); /* Gate Scan Line */
    LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
    LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */

    /* Partial Display Control */
    LCD_WriteReg(LCD_REG_128, 0x0000);
    LCD_WriteReg(LCD_REG_129, 0x0000);
    LCD_WriteReg(LCD_REG_130, 0x0000);
    LCD_WriteReg(LCD_REG_131, 0x0000);
    LCD_WriteReg(LCD_REG_132, 0x0000);
    LCD_WriteReg(LCD_REG_133, 0x0000);

    /* Panel Control */
    LCD_WriteReg(LCD_REG_144, 0x0010);
    LCD_WriteReg(LCD_REG_146, 0x0000);
    LCD_WriteReg(LCD_REG_147, 0x0003);
    LCD_WriteReg(LCD_REG_149, 0x0110);
    LCD_WriteReg(LCD_REG_151, 0x0000);
    LCD_WriteReg(LCD_REG_152, 0x0000);

    /* Set GRAM write direction and BGR = 1 */
    /* I/D=01 (Horizontal : increment, Vertical : decrement) */
    /* AM=1 (address is updated in vertical writing direction) */
    LCD_WriteReg(LCD_REG_3, 0x1018);

    LCD_WriteReg(LCD_REG_7, 0x0173); /* 262K color and display ON */  
  }
  else if(lcdid == 0x9325) /* Check if the LCD is ILI9325 Controller */
  {
    /* Start Initial Sequence */
    LCD_WriteReg(LCD_REG_0, 0x0001); /* Start internal OSC. */
    LCD_WriteReg(LCD_REG_1, 0x0100); /* Set SS and SM bit */
    LCD_WriteReg(LCD_REG_2, 0x0700); /* Set 1 line inversion */
    LCD_WriteReg(LCD_REG_3, 0x1018); /* Set GRAM write direction and BGR=1. */
    LCD_WriteReg(LCD_REG_4, 0x0000); /* Resize register */
    LCD_WriteReg(LCD_REG_8, 0x0202); /* Set the back porch and front porch */
    LCD_WriteReg(LCD_REG_9, 0x0000); /* Set non-display area refresh cycle ISC[3:0] */
    LCD_WriteReg(LCD_REG_10, 0x0000); /* FMARK function */
    LCD_WriteReg(LCD_REG_12, 0x0000); /* RGB interface setting */
    LCD_WriteReg(LCD_REG_13, 0x0000); /* Frame marker Position */
    LCD_WriteReg(LCD_REG_15, 0x0000); /* RGB interface polarity */

    /* Power On sequence */
    LCD_WriteReg(LCD_REG_16, 0x0000); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0000); /* DC1[2:0], DC0[2:0], VC[2:0] */
    LCD_WriteReg(LCD_REG_18, 0x0000); /* VREG1OUT voltage */
    LCD_WriteReg(LCD_REG_19, 0x0000); /* VDV[4:0] for VCOM amplitude */
    SysTimer_delay_us(200000UL);                      /* Dis-charge capacitor power voltage (200ms) */
    LCD_WriteReg(LCD_REG_16, 0x17B0); /* SAP, BT[3:0], AP, DSTB, SLP, STB */
    LCD_WriteReg(LCD_REG_17, 0x0137); /* DC1[2:0], DC0[2:0], VC[2:0] */
    SysTimer_delay_us(50000UL);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_18, 0x0139); /* VREG1OUT voltage */
    SysTimer_delay_us(50000UL);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_19, 0x1d00); /* VDV[4:0] for VCOM amplitude */
    LCD_WriteReg(LCD_REG_41, 0x0013); /* VCM[4:0] for VCOMH */
    SysTimer_delay_us(50000UL);                       /* Delay 50 ms */
    LCD_WriteReg(LCD_REG_32, 0x0000); /* GRAM horizontal Address */
    LCD_WriteReg(LCD_REG_33, 0x0000); /* GRAM Vertical Address */

    /* Adjust the Gamma Curve (ILI9325)*/
    LCD_WriteReg(LCD_REG_48, 0x0007);
    LCD_WriteReg(LCD_REG_49, 0x0302);
    LCD_WriteReg(LCD_REG_50, 0x0105);
    LCD_WriteReg(LCD_REG_53, 0x0206);
    LCD_WriteReg(LCD_REG_54, 0x0808);
    LCD_WriteReg(LCD_REG_55, 0x0206);
    LCD_WriteReg(LCD_REG_56, 0x0504);
    LCD_WriteReg(LCD_REG_57, 0x0007);
    LCD_WriteReg(LCD_REG_60, 0x0105);
    LCD_WriteReg(LCD_REG_61, 0x0808);

    /* Set GRAM area */
    LCD_WriteReg(LCD_REG_80, 0x0000); /* Horizontal GRAM Start Address */
    LCD_WriteReg(LCD_REG_81, 0x00EF); /* Horizontal GRAM End Address */
    LCD_WriteReg(LCD_REG_82, 0x0000); /* Vertical GRAM Start Address */
    LCD_WriteReg(LCD_REG_83, 0x013F); /* Vertical GRAM End Address */

    LCD_WriteReg(LCD_REG_96,  0xA700); /* Gate Scan Line(GS=1, scan direction is G320~G1) */
    LCD_WriteReg(LCD_REG_97,  0x0001); /* NDL,VLE, REV */
    LCD_WriteReg(LCD_REG_106, 0x0000); /* set scrolling line */

    /* Partial Display Control */
    LCD_WriteReg(LCD_REG_128, 0x0000);
    LCD_WriteReg(LCD_REG_129, 0x0000);
    LCD_WriteReg(LCD_REG_130, 0x0000);
    LCD_WriteReg(LCD_REG_131, 0x0000);
    LCD_WriteReg(LCD_REG_132, 0x0000);
    LCD_WriteReg(LCD_REG_133, 0x0000);

    /* Panel Control */
    LCD_WriteReg(LCD_REG_144, 0x0010);
    LCD_WriteReg(LCD_REG_146, 0x0000);
    LCD_WriteReg(LCD_REG_147, 0x0003);
    LCD_WriteReg(LCD_REG_149, 0x0110);
    LCD_WriteReg(LCD_REG_151, 0x0000);
    LCD_WriteReg(LCD_REG_152, 0x0000);

    /* set GRAM write direction and BGR = 1 */
    /* I/D=00 (Horizontal : increment, Vertical : decrement) */
    /* AM=1 (address is updated in vertical writing direction) */
    LCD_WriteReg(LCD_REG_3, 0x1018);

    LCD_WriteReg(LCD_REG_7, 0x0133); /* 262K color and display ON */ 

    /* Clear LCD */
    LCD_Clear(LCD_COLOR_BLUE);
  }
}
%endif

%if (conf == "LcdUpdate")
void %<blockid>_Update(void)
{
  uint32_t i, j  = 0;
  uint8_t    *pBuff = (uint8_t *)(%<blockid>_SOURCE);

  LCD_SetDisplayWindow(_X(0), _Y(0), %<picturehigh>, %<picturewidth>);
  LCD_WriteReg(LCD_REG_3, 0x1038);
  LCD_SetCursor(0, 0);
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */

  for (i = 0 ; i < %<blockid>_IMAGE_COLUMN_SIZE ; i += 2) {
    for (j = 0 ; j < %<blockid>_IMAGE_LINE_SIZE  * 2 ; j += 4) {
      LCD_WriteRAM(pBuff[2 * i * %<blockid>_IMAGE_LINE_SIZE + j + 1] << 8 | pBuff[2 * i * %<blockid>_IMAGE_LINE_SIZE  + j]);
    }
  }
}
%endif

%if (conf == "RamSetup") || (conf == "LcdSetup")
void enable_%<blockid>(void){
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
  GPIO_InitTypeDef GPIO_InitStructure; 
  
  /* Enable GPIOs clock */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD \
                       | RCC_AHB1Periph_GPIOG \
                       | RCC_AHB1Periph_GPIOE \
                       | RCC_AHB1Periph_GPIOF, ENABLE);

  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE); 

  /* GPIOD configuration */
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
  %if (conf == "RamSetup")
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource11, GPIO_AF_FSMC); 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_FSMC);
  %endif
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 \
                              | GPIO_Pin_1 \
                              | GPIO_Pin_4 \
                              | GPIO_Pin_5 \
                              | GPIO_Pin_8 \
                              | GPIO_Pin_9 \
                              | GPIO_Pin_10\
  %if (conf == "RamSetup")
                              | GPIO_Pin_11\
                              | GPIO_Pin_12\
                              | GPIO_Pin_13\
  %endif
                              | GPIO_Pin_14\
                              | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
  GPIO_Init(GPIOD, &GPIO_InitStructure);

  /* GPIOE configuration */
  %if (conf == "RamSetup")
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource0 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource1 , GPIO_AF_FSMC);
  /*GPIO_PinAFConfig(GPIOE, GPIO_PinSource2 , GPIO_AF_FSMC);*/
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource3 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource4 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource5 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource6 , GPIO_AF_FSMC);
  %endif
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);

  GPIO_InitStructure.GPIO_Pin = \
  %if (conf == "RamSetup")
                                GPIO_Pin_0 \
                              | GPIO_Pin_1 \
                              /*| GPIO_Pin_2*/ \
                              | GPIO_Pin_3 \
                              | GPIO_Pin_4 \
                              | GPIO_Pin_5 \
                              | GPIO_Pin_6 \
                              | \
  %endif
                                GPIO_Pin_7 \
                              | GPIO_Pin_8 \
                              | GPIO_Pin_9 \
                              | GPIO_Pin_10\
                              | GPIO_Pin_11\
                              | GPIO_Pin_12\
                              | GPIO_Pin_13\
                              | GPIO_Pin_14\
                              | GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);

  /* GPIOF configuration */
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource0 , GPIO_AF_FSMC);
  %if (conf == "RamSetup")
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource1 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource2 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource3 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource4 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource5 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource12 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource13 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource14 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOF, GPIO_PinSource15 , GPIO_AF_FSMC);
  %endif

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 \
  %if (conf == "RamSetup")
                              | GPIO_Pin_1 \
                              | GPIO_Pin_2 \
                              | GPIO_Pin_3 \
                              | GPIO_Pin_4 \
                              | GPIO_Pin_5 \
                              | GPIO_Pin_12\
                              | GPIO_Pin_13\
                              | GPIO_Pin_14\
                              | GPIO_Pin_15\
  %endif
                              ;      
  GPIO_Init(GPIOF, &GPIO_InitStructure);

  /* GPIOG configuration */
  %if (conf == "RamSetup")
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource0 , GPIO_AF_FSMC);  
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource1 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource2 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource3 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource4 , GPIO_AF_FSMC);
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource5 , GPIO_AF_FSMC);
  /*GPIO_PinAFConfig(GPIOG, GPIO_PinSource9 , GPIO_AF_FSMC);*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 \
                              | GPIO_Pin_1 \
                              | GPIO_Pin_2 \
                              | GPIO_Pin_3 \
                              | GPIO_Pin_4 \
                              | GPIO_Pin_5 \
                              | GPIO_Pin_9;
  %else
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource10 , GPIO_AF_FSMC);
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
  %endif  
  GPIO_Init(GPIOG, &GPIO_InitStructure);
  
  %if (conf == "RamSetup")
  /* FSMC-SRAM Configuration */
  p.FSMC_AddressSetupTime = 7;
  p.FSMC_AddressHoldTime = 0;
  p.FSMC_DataSetupTime = 10;
  p.FSMC_BusTurnAroundDuration = 1;
  p.FSMC_CLKDivision = 0;
  p.FSMC_DataLatency = 0;
  p.FSMC_AccessMode = FSMC_AccessMode_A;

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 

  /*!< Enable FSMC Bank1_SRAM2 Bank */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM2, ENABLE); 
  %else
  /* FSMC-LCD Configuration */
  p.FSMC_AddressSetupTime = 5;
  p.FSMC_AddressHoldTime = 0;
  p.FSMC_DataSetupTime = 9;
  p.FSMC_BusTurnAroundDuration = 0;
  p.FSMC_CLKDivision = 0;
  p.FSMC_DataLatency = 0;
  p.FSMC_AccessMode = FSMC_AccessMode_A;

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM3;
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   

  /* Enable FSMC NOR/SRAM Bank3 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
  %endif

  %if (conf == "LcdSetup")
  %<blockid>_init_state = 0;
  %endif
}
%endif

%closefile tmpBuf
%assign file = LibCreateSourceFile("Source", "Custom","waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%function Outputs(block, system) Output
%<addParametersToBlock(block)>
  /* %<blockid>: '%<block.Name>' */

  %if (conf == "LcdSetup")
  /* LCD Configuration */
  %<blockid>_LCD_Init();
  %endif
  %if (conf == "LcdUpdate")
  /* LCD frame update */
  %<blockid>_Update();
  %endif
%endfunction

%function Enable(block, system) Output
%<addParametersToBlock(block)>
%if (conf == "RamSetup")
  %if useasmainram == "on"
  %else
  enable_%<blockid>();
  %endif
%endif

%if (conf == "LcdSetup")  
  enable_%<blockid>();
%endif
%endfunction

%function Disable(block, system) Output
%<addParametersToBlock(block)>
%%disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
%<addParametersToBlock(block)>
%%/* terminate_%<blockid>(); */
%endfunction

