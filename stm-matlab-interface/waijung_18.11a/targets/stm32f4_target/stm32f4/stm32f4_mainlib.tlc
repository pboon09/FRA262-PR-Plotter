%% Core library for STM32F4 code generation e.g. for main.c and system initialization
%selectfile NULL_FILE
%% Setup main.c
%% Only bareboard is supported (No OS). 
%% Currently only Singletasking - Multi-Rate is support at present.
%% 3 Options scheduling options
%% 1. Singletasking - Single-Rate (sample times of all blocks in the model and the model's fixed step size are the same)
%% 2. Singletasking - Multi-Rate (sample times of all blocks in the model and the model's fixed step size are not the same
%%                                all sample times in the model must be an integer multiple of the model's fixed step size.)
%% 3. Multitasking - Multi-Rate
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function FcnSingleTaskingMain() void
   %%openfile tmpBuf
   %%assign srcFile = LibGetModelDotCFile()
   %%closefile tmpBuf
   %%<LibSetSourceFileSection(srcFile, "Includes", tmpBuf)>
   %openfile tmpBuf
      %<SLibDeclareFcnProtoCtlGlobalVariables()>\
      %<LibWriteModelData()>\
   %closefile tmpBuf 
   %assign file  = LibCreateSourceFile("Source", "Custom", "main")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDefinitions")>
   %<LibSetSourceFileCustomSection(file,"cDefinitions",tmpBuf)>

   %openfile tmpBuf
      #include "waijung_hwdrvlib.h"
      #include "%<LibGetMdlPubHdrBaseName()>.h"
      #include "rtwtypes.h" /* MathWorks types */
   %closefile tmpBuf
   %assign file  = LibCreateSourceFile("Source", "Custom", "main")
   %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
   %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>

   %openfile tmpBuf
      volatile unsigned int systick_count = 1;
      static volatile unsigned int systick_active = 0;

      /* Main program */
      int_T main(void) { 
	  

         /* Initialize model */
         %<LibCallModelInitialize()>\

         %%if ISEQUAL(%<StopTime>, rtInf)
         /* Continue indefinitely */
         if (SysTick_Config(SYSTICKRELOADVALUE)){ 
         /* Capture error */ 
            while (1);
         }

         while(1) {
            if (systick_active != systick_count) {
               systick_active ++;
               %<LibCallModelStep(0)>\

               /* Profiler update */
            }
         }
      }
   %closefile tmpBuf
   %assign file  = LibCreateSourceFile("Source", "Custom", "main")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %openfile tmpBuf
      /* 
       * rt_Onestep is called from a timer ISR at the base sample time of %<SampleTime[0].ClockTickStepSize> sec.
       * The ISR is void SysTick_Handler(void) and is defined in stm32f4xx_it.c
       */
      void rt_OneStep(void);
   %closefile tmpBuf  
   %assign file  = LibCreateSourceFile("Source", "Custom", "main")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDeclarations")>
   %<LibSetSourceFileCustomSection(file,"cDeclarations",tmpBuf)>

   %openfile tmpBuf
      void rt_OneStep(void) {   
         %assign varsbuf = LibWriteModelInputs()
         %if varsbuf != ""
            /* Remove conditional, and set model inputs here */
            %<varsbuf>\
         %endif
         %% /* Step the model */
         %% %<LibCallModelStep(0)>\
         %%systick_active = 1;
         %assign varsbuf = LibWriteModelOutputs()
         %if varsbuf != ""
            /* Remove conditional, and get model outputs here */
            %<varsbuf>\
         %endif
		 /* Tick counter */
		 systick_count++;
      }

      /**
       * @brief  This function handles SysTick Handler.
       * @param  None
       * @retval None
       */
       void SysTick_Handler(void){
           rt_OneStep();
       }
   %closefile tmpBuf  
   %assign file  = LibCreateSourceFile("Source", "Custom", "main")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %%%openfile tmpBuf
   %%
   %%%closefile tmpBuf
   %%%assign file = LibCreateSourceFile("Source", "Custom", "stm32f4xx_it")
   %%%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %%%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%% Generate Code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%function SLibGenerateCode() void
   %if LibIsSingleRateModel() || LibIsSingleTasking()
      %<FcnSingleTaskingMain()>
   %else
      %error None Single Tasking Non Single Rate Not allow
   %endif
%endfunction
