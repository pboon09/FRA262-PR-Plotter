%implements stm32f0_regular_dac "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
%assign inputtypestr = CAST("String",SFcnParamSettings.inputtypestr)
%assign dac1on = CAST("Number",SFcnParamSettings.dac1on)
%assign dac2on = CAST("Number",SFcnParamSettings.dac2on)
%assign advancedsettings = CAST("Number",SFcnParamSettings.advancedsettings)
%assign vref = CAST("String",SFcnParamSettings.vref)
%assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
%assign blockid = CAST("String",SFcnParamSettings.blockid)
%assign apb = CAST("String",SFcnParamSettings.apb)
%assign portstr = SFcnParamSettings.portstr
%assign portstr_size = SIZE(portstr)
%assign pinstr = SFcnParamSettings.pinstr
%assign pinstr_size = SIZE(pinstr)
%assign pinmat = SFcnParamSettings.pinmat
%assign dacbufferstr = CAST("String",SFcnParamSettings.dacbufferstr)
%assign dacmode = CAST("String",SFcnParamSettings.dacmode)
%assign nbr_pins = CAST("Number",pinmat[0][0])
%assign dacalignment = CAST("String",SFcnParamSettings.dacalignment)
%assign block = block + inputtypestr + dac1on + dac2on + advancedsettings + \
                vref + sampletime + blockid + \
                apb + portstr + portstr_size + pinstr + pinstr_size + \
                pinmat + dacbufferstr + dacmode + nbr_pins + dacalignment
%endfunction

%function BlockTypeSetup(block, system) void
   %<addParametersToBlock(block)>
   %if (EXISTS(::__STM32F0XX_GPIO_H__) == 0)
      %assign :: __STM32F0XX_GPIO_H__ = 1
      %openfile tmpBuf
         #include "stm32f0xx_gpio.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f0xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIndludes")>
      %<LibSetSourceFileCustomSection(file,"cIndludes",tmpBuf)>
   %endif

   %if (EXISTS(::__STM32F0XX_DAC_H__) == 0)
      %assign :: __STM32F0XX_DAC_H__ = 1
      %openfile tmpBuf
         #include "stm32f0xx_dac.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "stm32f0xx_conf")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIndludes")>
      %<LibSetSourceFileCustomSection(file,"cIndludes",tmpBuf)>
   %endif
%endfunction

%function BlockInstanceSetup(block, system) void
   %<addParametersToBlock(block)>
   %openfile tmpBuf
      %%if (nbr_pins > 1)
         /* Define DAC Scale factor */
         #define %<blockid>_SF 4095 / %<vref>
      %%endif      
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDefines")>
   %<LibSetSourceFileCustomSection(file,"cDefines",tmpBuf)>

   %openfile tmpBuf
      %if (nbr_pins > 1)
         /* Temporary DAC data buffer */
         extern uint16_t %<blockid>_Buf[%<nbr_pins>];
       %endif      
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDeclarations")>
   %<LibSetSourceFileCustomSection(file,"cDeclarations",tmpBuf)>

   %openfile tmpBuf
      %if (nbr_pins > 1)
         /* Temporary DAC data buffer */
         uint16_t %<blockid>_Buf[%<nbr_pins>];
       %endif      
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cDeclarations")>
   %<LibSetSourceFileCustomSection(file,"cDeclarations",tmpBuf)>

   %openfile tmpBuf
      void enable_%<blockid>(void);  /* %<blockid> */
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %openfile tmpBuf
      void enable_%<blockid>(void){ 
         /* Block: %<blockid> */
         /* Preconfiguration before using DAC----------------------------------------*/
         GPIO_InitTypeDef GPIO_InitStructure;
         DAC_InitTypeDef DAC_InitStructure;

         /* GPIOA clock enable (to be used with DAC) */
         RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);

         /* DAC Periph clock enable */
         RCC_APB%<apb>PeriphClockCmd(RCC_APB%<apb>Periph_DAC, ENABLE);

         /* 
          * DAC channels (DAC_OUT1 = PA.4)(DAC_OUT2 = PA.5) configuration 
          * Once the DAC channel is enabled, the corresponding GPIO pin is automatically 
          * connected to the DAC converter. 
          * The GPIO pin is configured in analog mode to avoid parasitic consumption.
          */
         GPIO_InitStructure.GPIO_Pin = %<pinstr[0]>;
         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
         GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
         GPIO_Init(GPIOA, &GPIO_InitStructure);

         //DAC_DeInit(); 

         %foreach idx = nbr_pins
            %assign pinidx = idx + 1
            %assign dacmodule = CAST("Number",pinmat[0][pinidx] - 3)
            %assign pin = CAST("Number",%<pinmat[0][idx]>)
            /* DAC Channel %<dacmodule> Configuration */
            DAC_InitStructure.DAC_Trigger = DAC_Trigger_None;
            DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
            DAC_InitStructure.DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
            DAC_InitStructure.DAC_OutputBuffer = %<dacbufferstr>;
            DAC_Init(DAC_Channel_%<dacmodule>, &DAC_InitStructure);
         %endforeach

         %foreach idx = nbr_pins
            %assign pinidx = idx + 1
            %assign dacmodule = CAST("Number",pinmat[0][pinidx] - 3)
            %assign pin = CAST("Number",%<pinmat[0][idx]>)
            /* 
             * Enable DAC Channel %<dacmodule>: 
             * Once the DAC channel%<dacmodule> is enabled, PA.0%<pin> is 
             * automatically connected to the DAC converter. 
             */
             DAC_Cmd(DAC_Channel_%<dacmodule>, ENABLE);
         %endforeach
      }

      void disable_%<blockid>(void){ 
         %foreach idx = nbr_pins
            %assign pinidx = idx + 1
            %assign dacmodule = CAST("Number",pinmat[0][pinidx] - 3)
            %assign pin = CAST("Number",%<pinmat[0][idx]>)
             DAC_Cmd(DAC_Channel_%<dacmodule>, DISABLE);
         %endforeach
      }

      %%void terminate_%<blockid>(void){ 
      %%   disable_%<blockid>();
      %%}
   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%function Outputs(block, system) Output
   %<addParametersToBlock(block)>
   /* %<Type> Block: %<Name> */
   %if (nbr_pins > 1)
      %assign Channel = 0
      %if (inputtypestr == "Volts")
         %foreach idx = nbr_pins
            %assign y = LibBlockInputSignal(%<Channel>, "", "", 0)
            %assign y_type = LibBlockInputSignalDataTypeName(Channel, "tRealPart")
            if(%<y> > 0)
              %<blockid>_Buf[%<idx>] = (uint16_t) (%<y> * %<blockid>_SF);
            else
              %<blockid>_Buf[%<idx>] = 0;
            %assign Channel = Channel + 1
         %endforeach
         DAC_SetDualChannelData(%<dacalignment>, \
           (%<blockid>_Buf[1] <= 4095)?%<blockid>_Buf[1]:4095, \
           (%<blockid>_Buf[0] <= 4095)?%<blockid>_Buf[0]:4095);
      %else
         %assign y1 = LibBlockInputSignal(0, "", "", 0)
         %assign y2 = LibBlockInputSignal(1, "", "", 1)
         %if dacalignment == "DAC_Align_12b_R"
         DAC_SetChannel1Data(%<dacalignment>, (uint16_t)((%<y1> <= 4095)?%<y1>:4095));
         DAC_SetChannel2Data(%<dacalignment>, (uint16_t)((%<y2> <= 4095)?%<y2>:4095));
         %else
         DAC_SetChannel1Data(%<dacalignment>, (uint16_t)%<y1>);
         DAC_SetChannel2Data(%<dacalignment>, (uint16_t)%<y2>);
         %endif
      %endif
   %else
      {
        uint16_t DacVal;
      %assign y = LibBlockInputSignal(0, "", "", 0)
      %assign dacmodule = CAST("Number",pinmat[0][1] - 3)
      %if (inputtypestr == "Volts")
         %assign y_type = LibBlockInputSignalDataTypeName(0, "tRealPart")         
         if(%<y> > 0) {
           DacVal = (uint16_t)(%<y>* %<blockid>_SF);
           if(DacVal > 4095)
             DacVal = 4095;
         }
         else {
          DacVal = 0;
         }
         DAC_SetChannel%<dacmodule>Data(%<dacalignment>, DacVal);
      %else 
         %if dacalignment == "DAC_Align_12b_R"
         DAC_SetChannel%<dacmodule>Data(%<dacalignment>, (uint16_t) ((%<y> <= 4095)?%<y>:4095));
         %else
         DAC_SetChannel%<dacmodule>Data(%<dacalignment>, (uint16_t) %<y>);
         %endif
      %endif
      }
   %endif
%endfunction

%function Enable(block, system) Output
   %<addParametersToBlock(block)>
   enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
   %<addParametersToBlock(block)>
   disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
   %<addParametersToBlock(block)>
   %% terminate_%<blockid>();
%endfunction

