%implements nrf5_radio "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
  %assign conf = CAST("String",SFcnParamSettings.conf)
  %assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
  %assign blockid = block.Identifier

  %% Size of optionstring: %<SIZE(optionstring)[1]>
  %assign block = block + conf + sampletime + blockid

  %assign txpower          = optionstring[0]
  %assign frequency        = optionstring[1]
  %assign mode             = optionstring[2]
  %assign txaddress        = optionstring[3]
  %assign payload          = optionstring[4]
  %assign rxaddress        = optionstring[5]
  %assign transfer         = optionstring[6]
  %%assign binheader        = optionstring[7]
  %%assign binheaderlen     = optionstring[8]
  %%assign binterminator    = optionstring[9]
  %%assign binterminatorlen = optionstring[10]
  %assign buffercount = CAST("Number",optionstring[11])
  
  %assign block = block + txpower + frequency + mode + txaddress + payload + rxaddress \
                + transfer + buffercount

  %%
  %assign header_len = SIZE(headerstring)[1]
  %assign terminator_len = SIZE(terminatorstring)[1]
  %assign block = block + header_len + terminator_len

%endfunction

%function BlockTypeSetup(block, system) void
%<addParametersToBlock(block)>
   %if (EXISTS(::__nrf5_GPIO__) == 0)
      %assign :: __nrf5_GPIO__ = 1
      %openfile tmpBuf
         #include "nrf_gpio.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif

   %if (EXISTS(::__STRING_LIB_H__) == 0)
      %assign :: __STRING_LIB_H__ = 1
      %openfile tmpBuf
         #include <string.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STDIO_LIB_H__) == 0)
      %assign :: __STDIO_LIB_H__ = 1
      %openfile tmpBuf
         #include <stdio.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
%endfunction

%function BlockInstanceSetup(block, system) void
%<addParametersToBlock(block)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid>
 * ########################################################################
*/
  %if conf == "Setup"
    /* Radio state */
    typedef enum {
      RADIO_DISABLE = 0,
      RADIO_TX,
      RADIO_RX
    } RADIO_STATE;

    #define PACKET_BASE_ADDRESS_LENGTH       (4UL)  //!< Packet base address length field size in bytes
    #define PACKET_STATIC_LENGTH             (%<payload>UL)  //!< Packet static length in bytes
    #define PACKET_PAYLOAD_MAXSIZE           (PACKET_STATIC_LENGTH)  //!< Packet payload maximum size in bytes
    
    /* Tx/Rx buffer */
    #define %<blockid>_Payload_SIZE %<payload>
    extern uint8_t %<blockid>_Payload[%<blockid>_Payload_SIZE];

    /* Global temporary buffer */
    #define NRF_Radio_Temp_Buffer_SIZE 256
    extern uint8_t NRF_Radio_Temp_Buffer[NRF_Radio_Temp_Buffer_SIZE];

    /* Radio Tx/Rx */
    uint8_t nrf_radio_send(const uint8_t *header, uint8_t header_len, \
               const uint8_t *terminator, uint8_t terminator_len, \
               uint8_t *data, uint16_t data_len);
    uint8_t* nrf_radio_receive(uint8_t *buffer_index);
    RADIO_STATE nrf_select_radio_state(RADIO_STATE state);
  %else
    %if header_len > 0
      /* Binary header */
      #define %<blockid>_Header_SIZE %<header_len>
      extern const uint8_t %<blockid>_Header[%<blockid>_Header_SIZE];
    %endif
    %if terminator_len > 0
      /* Binary terminator */
      #define %<blockid>_Terminator_SIZE %<terminator_len>
      extern const uint8_t %<blockid>_Terminator[%<blockid>_Terminator_SIZE];
    %endif
    %if conf == "Rx"
      extern uint8_t %<blockid>_Rx_Buffer_Ready; /* Ready status for non-blocking mode */
      extern void %<blockid>_Receive(uint8_t *data, uint8_t count);
    %endif
  %endif
  void enable_%<blockid>(void);
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid> 
 * ########################################################################
*/
%if conf == "Setup"
/* Global temporary buffer */
uint8_t NRF_Radio_Temp_Buffer[NRF_Radio_Temp_Buffer_SIZE];
volatile uint8_t NRF_Radio_End_Event = 0;

/* Payload */
uint8_t %<blockid>_Payload[%<blockid>_Payload_SIZE];

/* Radio state */
RADIO_STATE %<blockid>_Radio_State = RADIO_DISABLE;

/* These are set to zero as Shockburst packets don't have corresponding fields. */
#define PACKET_S1_FIELD_SIZE             (0UL)  /**< Packet S1 field size in bits. */
#define PACKET_S0_FIELD_SIZE             (0UL)  /**< Packet S0 field size in bits. */
#define PACKET_LENGTH_FIELD_SIZE         (0UL)  /**< Packet length field size in bits. */

static uint32_t swap_bits(uint32_t inp)
{
	uint32_t i;
	uint32_t retval = 0;    
	inp = (inp & 0x000000FFUL);    
	for(i = 0; i < 8; i++) {
			retval |= ((inp >> i) & 0x01) << (7 - i);     
	}    
	return retval;    
}

static uint32_t bytewise_bitswap(uint32_t inp)
{
	return (swap_bits(inp >> 24) << 24)
			 | (swap_bits(inp >> 16) << 16)
			 | (swap_bits(inp >> 8) << 8)
			 | (swap_bits(inp));
}

static void nrf_radio_select_tx(void) {
  /* Enable Radio, Tx */
  NRF_RADIO->EVENTS_READY = 0U;
  NRF_RADIO->TASKS_TXEN   = 1; // Enable radio and wait for ready.
  while (NRF_RADIO->EVENTS_READY == 0U);  
}

static void nrf_radio_select_rx(void) {
  /* Enable radio, Rx */
  NRF_RADIO->EVENTS_READY = 0U;        
  NRF_RADIO->TASKS_RXEN   = 1U; // Enable radio.	
  while(NRF_RADIO->EVENTS_READY == 0U); /* Wait for an event to be ready. */
  /* Listen */
  NRF_RADIO->EVENTS_END  = 0U;        
  NRF_RADIO->TASKS_START = 1U; // Start listening and wait for address received event.
}

static void nrf_radio_disable(void) {
  /* Disable radio */
  NRF_RADIO->EVENTS_DISABLED = 0U;
  NRF_RADIO->TASKS_DISABLE   = 1U;  // Disable the radio.
  while(NRF_RADIO->EVENTS_DISABLED == 0U);  
}

RADIO_STATE nrf_select_radio_state(RADIO_STATE state) {
  /* Disbale IRQ */
  if(%<blockid>_Radio_State != state) {
    __disable_irq();
  }

  /* Radio state check */
  switch (%<blockid>_Radio_State) {
    case RADIO_DISABLE:
      if(state == RADIO_TX)
	    nrf_radio_select_tx();
      else if(state == RADIO_RX)
	    nrf_radio_select_rx();
      break;

    case RADIO_TX:
      /* Disable current Tx */
      if ((state == RADIO_DISABLE) || (state == RADIO_RX))
        nrf_radio_disable();
      /* Enable Rx */
      if (state == RADIO_RX)
        nrf_radio_select_rx();
      break;

    case RADIO_RX:
      /* Disable current Rx */
      if ((state == RADIO_DISABLE) || (state == RADIO_TX))
        nrf_radio_disable();
      /* Enable Tx */
      if (state == RADIO_TX)
        nrf_radio_select_tx();
      break;
  }

  /* New radio state */
  if(%<blockid>_Radio_State != state) {
    %<blockid>_Radio_State = state;
    /* Re-enable IRQ */
    __enable_irq();
  }

  /* Return current operation state */
  return %<blockid>_Radio_State;
}

/* Radio Send.
 * Return 0-Success, 1-Error, 2-Timeout, 3-Invalid.
 */
uint8_t nrf_radio_send(const uint8_t *header, uint8_t header_len, \
         const uint8_t *terminator, uint8_t terminator_len, \
         uint8_t *data, uint16_t data_len) {
  uint16_t packet_len;


  /* TODO: To add timeout check while wait for status */

  /* Check length */
  packet_len = header_len + terminator_len + data_len;
  if (packet_len > %<blockid>_Payload_SIZE)
    return 3;

  /* Enable Tx state */
  nrf_select_radio_state(RADIO_TX);

  /* Copy data into buffer */
  if(header_len > 0)
    memcpy(&%<blockid>_Payload[0], header, header_len);
  if(data_len > 0)
    memcpy(&%<blockid>_Payload[header_len], data, data_len);
  if(terminator_len > 0)
    memcpy(&%<blockid>_Payload[header_len + data_len], terminator, terminator_len);

  /* Start transmission. */
  NRF_RADIO->TASKS_START = 1U;
  NRF_Radio_End_Event = 0; //NRF_RADIO->EVENTS_END  = 0U;    
  while (NRF_Radio_End_Event == 0);//while(NRF_RADIO->EVENTS_END == 0U); /* Wait for end of the transmission packet. */  

  /* Success */
  return 0;
}

/* Rx buffer, count = %<buffercount>
*/
#define RADIO_Rx_Buffer_COUNT %<buffercount> /* Must be number of 2^N ;N= 2,3,4,...,6 */

uint8_t Radio_Rx_Packet_Count = 0;
%foreach idx=buffercount
  uint8_t Radio_Rx_%<idx>[PACKET_PAYLOAD_MAXSIZE];
%endforeach
uint8_t *Radio_Rx_Buffer_List[RADIO_Rx_Buffer_COUNT] =\
{\
%assign sep = ""
%foreach idx=buffercount
%<sep>&Radio_Rx_%<idx>[0]\
  %assign sep = ","
%endforeach
};

/* Radio Rx IRQ */
void RADIO_IRQHandler(void)
{
  if (NRF_RADIO->EVENTS_END != 0) {
    /* Clear flag */
    NRF_RADIO->EVENTS_END = 0;    

    /* Process Rx */
    if(%<blockid>_Radio_State == RADIO_RX) {
      if (NRF_RADIO->CRCSTATUS == 1U) {
        memcpy(Radio_Rx_Buffer_List[Radio_Rx_Packet_Count], &%<blockid>_Payload[0], PACKET_PAYLOAD_MAXSIZE);
        Radio_Rx_Packet_Count ++;
        Radio_Rx_Packet_Count &= (RADIO_Rx_Buffer_COUNT - 1);
      }
    }

    /* Setup disable state */
    nrf_select_radio_state(RADIO_DISABLE);
    nrf_select_radio_state(RADIO_RX);
 
    /* Activate END event */
    NRF_Radio_End_Event = 1;
  }
}

/* Return valid data pointer if buffer is ready.
 * Return NULL if data not ready.
 */
uint8_t* nrf_radio_receive(uint8_t *buffer_index)
{
  uint8_t *buffer;
  uint8_t index;

  /* Enable Rx state (if not enabled) */
  nrf_select_radio_state(RADIO_RX);

  /* Buffer is ready? */
  index = *buffer_index;
  if(index != Radio_Rx_Packet_Count) {
    buffer = (uint8_t *)Radio_Rx_Buffer_List[index];
    index ++;
    index &= (RADIO_Rx_Buffer_COUNT - 1);
    *buffer_index = index;

    /* Buffer is ready */
    return buffer;
  }

  /* Buffer data is not ready */
  return (uint8_t *)0;
}

%endif

%% === Tx or Rx ===
%if (conf == "Tx") || (conf == "Rx")
  %if (header_len > 0)
    /* Binary header */
    const uint8_t %<blockid>_Header[%<blockid>_Header_SIZE] = \
    {\
    %assign sep = ""
    %foreach idx=header_len
      %<sep>%<headerstring[idx]>\
      %assign sep = ","
    %endforeach
    };
  %endif
  %if (terminator_len > 0)
    /* Binary terminator */
    const uint8_t %<blockid>_Terminator[%<blockid>_Terminator_SIZE] = \
    {\
    %assign sep = ""
    %foreach idx=terminator_len
      %<sep>%<terminatorstring[idx]>\
      %assign sep = ","
    %endforeach
    };
  %endif
%endif

%% === Rx ===
%if conf == "Rx"
  uint8_t %<blockid>_Rx_Buffer_Index = 0;
  uint8_t %<blockid>_Rx_Buffer_Ready = 0; /* Ready status for non-blocking mode */
  void %<blockid>_Receive(uint8_t *data, uint8_t count)
  {
    uint8_t *buffer;

    %<blockid>_Rx_Buffer_Ready = 0;
    %if transfer == "Blocking"
    do {
    %endif
    buffer = nrf_radio_receive(&%<blockid>_Rx_Buffer_Index);
    if(buffer) { /* Valid buffer */
      %if (header_len > 0) || (terminator_len > 0)
      if(\
      %endif
      %if (header_len > 0)
        (memcmp(&buffer[0], &%<blockid>_Header[0], %<blockid>_Header_SIZE) == 0)\        
        %if (terminator_len > 0)
          && (memcmp(&buffer[%<blockid>_Header_SIZE+count], &%<blockid>_Terminator[0], %<blockid>_Terminator_SIZE) == 0)) {\
          memcpy(data, &buffer[%<blockid>_Header_SIZE], count);
        %else
        ) {\
          memcpy(data, &buffer[0], count);          
        %endif
        %<blockid>_Rx_Buffer_Ready = 1;
        }
      %else
        %if (terminator_len > 0)
        memcmp(&buffer[count], &%<blockid>_Terminator[0], %<blockid>_Terminator_SIZE) == 0) {\        
        memcpy(data, &buffer[0], count);
        }
        %endif
        memcpy(data, &buffer[0], count);
        %<blockid>_Rx_Buffer_Ready = 1;        
      %endif      
    }
    %if transfer == "Blocking"
    } while (%<blockid>_Rx_Buffer_Ready == 0); /* Wait for buffer ready */
    %endif
  }
%endif

void enable_%<blockid>(void){
%if conf == "Setup"
  /* Radio config */
  NRF_RADIO->TXPOWER   = (RADIO_TXPOWER_TXPOWER_%<txpower> << RADIO_TXPOWER_TXPOWER_Pos);
  NRF_RADIO->FREQUENCY = %<frequency>UL;           /* Frequency, 2400+%<frequency> MHz */
  NRF_RADIO->MODE      = (RADIO_MODE_MODE_%<mode> << RADIO_MODE_MODE_Pos);

  /* Radio address config */
  NRF_RADIO->PREFIX0 = 
		((uint32_t)swap_bits(0xC3) << 24) // Prefix byte of address 3 converted to nRF24L series format
		| ((uint32_t)swap_bits(0xC2) << 16) // Prefix byte of address 2 converted to nRF24L series format
		| ((uint32_t)swap_bits(0xC1) << 8)  // Prefix byte of address 1 converted to nRF24L series format
		| ((uint32_t)swap_bits(0xC0) << 0); // Prefix byte of address 0 converted to nRF24L series format

  NRF_RADIO->PREFIX1 = 
		((uint32_t)swap_bits(0xC7) << 24) // Prefix byte of address 7 converted to nRF24L series format
		| ((uint32_t)swap_bits(0xC6) << 16) // Prefix byte of address 6 converted to nRF24L series format
		| ((uint32_t)swap_bits(0xC4) << 0); // Prefix byte of address 4 converted to nRF24L series format

  NRF_RADIO->BASE0       = bytewise_bitswap(0x01234567UL);  // Base address for prefix 0 converted to nRF24L series format
  NRF_RADIO->BASE1       = bytewise_bitswap(0x89ABCDEFUL);  // Base address for prefix 1-7 converted to nRF24L series format

  NRF_RADIO->TXADDRESS   = %<txaddress>UL; /* Set device address %<txaddress> to use when transmitting */
  NRF_RADIO->RXADDRESSES = %<rxaddress>UL; /* Accept all 0-7, TODO: */

  /* Packet configuration */
  NRF_RADIO->PCNF0 = (PACKET_S1_FIELD_SIZE     << RADIO_PCNF0_S1LEN_Pos) |
					 (PACKET_S0_FIELD_SIZE     << RADIO_PCNF0_S0LEN_Pos) |
					 (PACKET_LENGTH_FIELD_SIZE << RADIO_PCNF0_LFLEN_Pos);

  /* Packet configuration */
  NRF_RADIO->PCNF1 = (RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
					 (RADIO_PCNF1_ENDIAN_Big       << RADIO_PCNF1_ENDIAN_Pos)  |
					 (PACKET_BASE_ADDRESS_LENGTH   << RADIO_PCNF1_BALEN_Pos)   |
					 (PACKET_STATIC_LENGTH         << RADIO_PCNF1_STATLEN_Pos) |
					 (PACKET_PAYLOAD_MAXSIZE       << RADIO_PCNF1_MAXLEN_Pos);

  /* CRC Config */
  NRF_RADIO->CRCCNF = (RADIO_CRCCNF_LEN_Two << RADIO_CRCCNF_LEN_Pos); // Number of checksum bits
  if ((NRF_RADIO->CRCCNF & RADIO_CRCCNF_LEN_Msk) == (RADIO_CRCCNF_LEN_Two << RADIO_CRCCNF_LEN_Pos)) {
    NRF_RADIO->CRCINIT = 0xFFFFUL;      // Initial value      
	NRF_RADIO->CRCPOLY = 0x11021UL;     // CRC poly: x^16+x^12^x^5+1
  }
  else if ((NRF_RADIO->CRCCNF & RADIO_CRCCNF_LEN_Msk) == (RADIO_CRCCNF_LEN_One << RADIO_CRCCNF_LEN_Pos)) {
	NRF_RADIO->CRCINIT = 0xFFUL;        // Initial value
	NRF_RADIO->CRCPOLY = 0x107UL;       // CRC poly: x^8+x^2^x^1+1
  }

  /* Buffer */
  NRF_RADIO->PACKETPTR = (uint32_t)(&%<blockid>_Payload[0]);

  /* Enable interrupt for END event, Handle for both Tx and Rx */
  NRF_RADIO->INTENSET = RADIO_INTENSET_END_Enabled << RADIO_INTENSET_END_Pos;    
  NVIC_SetPriority(RADIO_IRQn, 1);
  NVIC_ClearPendingIRQ(RADIO_IRQn);
  NVIC_EnableIRQ(RADIO_IRQn);
%endif
}

%closefile tmpBuf
%assign file = LibCreateSourceFile("Source", "Custom","waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%function Outputs(block, system) Output
%<addParametersToBlock(block)>
%if conf != "Setup"
  /* %<blockid>: '%<block.Name>'
   * Direction: RADIO_%<conf>
   */
  %assign data_size_list = [8, 4, 1, 1, 2, 2, 4, 4, 1]
%endif

%% === Tx ===
%if conf == "Tx"
  %% Data
  %assign data_idx = 0
  %foreach portIdx = LibBlockNumInputPorts(block)
    %assign dtname = LibBlockInputSignalDataTypeName(portIdx,tRealPart)
    memcpy(\
    &NRF_Radio_Temp_Buffer[%<data_idx>],\
    %<LibBlockInputSignalAddr(portIdx, "", "", 0)>,\
    %if LibBlockInputSignalWidth(portIdx) > 1 
    %<LibBlockInputSignalWidth(portIdx)>*sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> [%<LibBlockInputSignalWidth(portIdx)>]*/ 
    %else
    sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> */ 
    %endif        
    %assign data_idx = data_idx + data_size_list[LibBlockInputSignalDataTypeId(portIdx)]*LibBlockInputSignalWidth(portIdx)
  %endforeach
  nrf_radio_send(\
       %if header_len > 0
       &%<blockid>_Header[0], %<blockid>_Header_SIZE,\
       %else
       (void *)0, 0,\
       %endif
       %if terminator_len > 0
       &%<blockid>_Terminator[0], %<blockid>_Terminator_SIZE,\
       %else
       (void *)0, 0,\
       %endif
       &NRF_Radio_Temp_Buffer[0], %<data_idx>);
%endif

%% === Rx ===
%if conf == "Rx"
  %% Get port offset
  %if transfer == "Blocking"
    %assign portOffet = 0
  %else
    %assign portOffet = 1
  %endif
  %% Get ports data bytes count
  %assign data_count = 0
  %foreach portIdx = LibBlockNumOutputPorts(block)
    %if portIdx >= portOffet
      %assign data_count = data_count + data_size_list[LibBlockOutputSignalDataTypeId(portIdx)]
    %endif
  %endforeach
  %<blockid>_Receive(&NRF_Radio_Temp_Buffer[0], %<data_count>); /* Receive data %<data_count> bytes */
  %if transfer != "Blocking"
    %<LibBlockOutputSignal(0, "", "", 0)> = %<blockid>_Rx_Buffer_Ready;
    if(%<blockid>_Rx_Buffer_Ready) {
  %endif
  %assign data_idx = 0
  %foreach portIdx = LibBlockNumOutputPorts(block)
    %if portIdx >= portOffet
    %assign dtname = LibBlockOutputSignalDataTypeName(portIdx,tRealPart)
    %<LibBlockOutputSignal(portIdx, "", "", 0)> = *((%<dtname> *)&NRF_Radio_Temp_Buffer[%<data_idx>]);
    %assign data_idx = data_idx + data_size_list[LibBlockOutputSignalDataTypeId(portIdx)]
    %endif
  %endforeach
  %if transfer != "Blocking"
  }
  %endif
%endif

%endfunction

%function Enable(block, system) Output
%<addParametersToBlock(block)>
enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
%<addParametersToBlock(block)>
%%disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
%<addParametersToBlock(block)>
%%/* terminate_%<blockid>(); */
%endfunction

