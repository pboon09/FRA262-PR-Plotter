%implements nrf5_ble "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
  %assign conf = CAST("String",SFcnParamSettings.conf)
  %assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
  %assign blockid = block.Identifier

  %% Size of optionstring: %<SIZE(optionstring)[1]>
  %assign block = block + conf + sampletime + blockid

  %assign rxbuffersize = optionstring1[0]
  %assign txbuffersize = optionstring1[1]
  %assign transfer     = optionstring1[2]
  %assign packetmode   = optionstring1[3]
  %assign asciiformat        = optionstring1[4]
  %assign asciiterminator    = optionstring1[5]
  %assign asciiterminatorlen = optionstring1[6]
  %assign bleprofile       = optionstring1[7]
  %assign devicename       = optionstring1[8]
  %assign nus_support      = optionstring1[9]
  %assign dfu_support      = optionstring1[10]
  %assign fwupgrade = optionstring1[11]
  %assign dynamicdevicename = optionstring1[12]

  %assign binheaderlen = SIZE(binheader)[1]
  %assign binterminatorlen = SIZE(binterminator)[1]

  %assign block = block + rxbuffersize + txbuffersize + transfer \
                + packetmode + binheaderlen \
                + binterminatorlen + asciiformat + asciiterminator \
                + asciiterminatorlen + bleprofile + devicename + nus_support \
                + dfu_support + fwupgrade + dynamicdevicename
%endfunction

%function BlockTypeSetup(block, system) void
%<addParametersToBlock(block)>

   %if (EXISTS(::__STRING_LIB_H__) == 0)
      %assign :: __STRING_LIB_H__ = 1
      %openfile tmpBuf
         #include <string.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STDIO_LIB_H__) == 0)
      %assign :: __STDIO_LIB_H__ = 1
      %openfile tmpBuf
         #include <stdlib.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STDIO_IO_H__) == 0)
      %assign :: __STDIO_IO_H__ = 1
      %openfile tmpBuf
         #include <stdio.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %openfile tmpBuf

   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %openfile tmpBuf

   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%endfunction

%function BlockInstanceSetup(block, system) void
%<addParametersToBlock(block)>

%if (conf == "Setup")
  %if (dfu_support == "1")
    %include "nrf5_dfu_nus_hwdrvlib.tlc"
  %else
    %% Single NUS
    %if (nus_support == "1")
      %include "nrf5_ble_nus_hwdrvlib.tlc"
    %endif
  %endif
  
%endif

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid>
 * ########################################################################
*/
%if conf == "Setup"

  %if fwupgrade == "on"
    #define BLE_SUPPORT_FIRMWARE_UPGRADE 1

  %endif

  #define BLE_DEVICE_NAME "%<devicename>"

  %if (dfu_support == "1") || (nus_support == "1")
  #define BLE_BLOCK_PRESENT %% Used by Mesh block to determine it need to init BLE or not
  %endif

  /* Data read structure */
  typedef struct {
    uint16_t index; /* Index of data in buffer */
    uint16_t count; /* Return data count */
    uint8_t *buffer; /* Return buffer pointer of valid data */
  } BLE_NUS_BUFFER_READ_STRUCT;

  #define BLE_NUS_RX_BUFFER_SIZE %<rxbuffersize> /* Must be 2^N ;N=4,5,6,... */
  #define BLE_NUS_TX_BUFFER_SIZE %<txbuffersize> /* Must be 2^N ;N=4,5,6,... */

  extern uint8_t BLE_NUS_Tx_Buffer[BLE_NUS_TX_BUFFER_SIZE];
  extern volatile uint8_t BLE_NUS_Rx_Buffer[BLE_NUS_RX_BUFFER_SIZE];
  extern uint8_t BLE_NUS_Temp_Buffer[BLE_NUS_RX_BUFFER_SIZE];

  uint16_t BLE_NUS_ReadLine(BLE_NUS_BUFFER_READ_STRUCT *read_struct, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t buffer_size);
  uint8_t BLE_NUS_ReadBinary(BLE_NUS_BUFFER_READ_STRUCT *read_struct, \
                            const char *header, uint16_t header_count, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t data_count);

  void BLE_NUS_Input(const uint8_t *data, uint16_t len);
  void BLE_NUS_Write(uint8_t *data, uint16_t count);
%else
  %% --- Tx/Rx Binary ---
  %if packetmode == "Binary"
    %if binheaderlen > 0
      /* Binary header */
      #define %<blockid>_Header_SIZE %<binheaderlen>
      extern const char %<blockid>_Header[%<blockid>_Header_SIZE];
    %endif
    %if binterminatorlen > 0
      /* Binary terminator */
      #define %<blockid>_Terminator_SIZE %<binterminatorlen>
      extern const char %<blockid>_Terminator[%<blockid>_Terminator_SIZE];
    %endif
  %endif
  %% --- Tx/Rx Ascii ---
  %if (packetmode == "Ascii") || (packetmode == "String Buffer") || (packetmode == "Read Line")
    %if asciiterminator != ""
      /* End of packet, ascii mode */
      #define %<blockid>_AsciiTerminator_SIZE %<asciiterminatorlen>
      extern const char %<blockid>_AsciiTerminator[%<blockid>_AsciiTerminator_SIZE];
    %endif
  %endif
%endif

%if conf == "Rx"
  %if transfer == "Blocking"
    void \
  %else
    uint8_t \
  %endif
  %<blockid>_Receive(uint8_t *buffer, uint16_t size);
  %if packetmode == "Binary"
  %else
    /* Data */
    %foreach idx=SIZE(optionstring2)[1]
      extern %<optionstring2[idx]> %<blockid>_data%<idx>; /* D%<idx> */
    %endforeach
  %endif
%endif

%if packetmode == "Read Line"
uint16_t %<blockid>_ReadLine(uint8_t *buffer, uint16_t size);
%endif

void enable_%<blockid>(void);
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid> 
 * ########################################################################
*/
%if conf == "Setup"
  
  %if (nus_support == "1")

    %if fwupgrade == "on"
#define FW_UPGRADE_KEY 0xAAAADDDD
void _sys_evt_handler(uint32_t sys_evt, void * p_context);

// FW_UPGRADE_KEY defined in control string

#if    defined (NRF51)
    #define FLASH_PAGE_SIZE    (1024)
#elif (defined (NRF52) || defined(NRF52840_XXAA))
    #define FLASH_PAGE_SIZE    (4096)
#endif

#if    defined (NRF51)
  #define MAIN_APPLICATION_START_ADDR           0x1D000
  #define MAIN_SECTOR_SIZE                      (64*1024) // 64k
#else
  #define MAIN_APPLICATION_START_ADDR           0x26000
  #define MAIN_SECTOR_SIZE                      0x28000 //(160*1024) // 160k
#endif

#define MAIN_SECTOR_START_ADDR   MAIN_APPLICATION_START_ADDR
#define TEMP_SECTOR_START_ADDR   (MAIN_APPLICATION_START_ADDR + MAIN_SECTOR_SIZE)
#define TEMP_EMBEDDED_CRC_ADDR   (TEMP_SECTOR_START_ADDR + MAIN_SECTOR_SIZE - 4UL)

uint32_t ble_uart_send_string (const char *s);


uint32_t get_current_fw(void)
{
		return *((uint32_t *) (MAIN_SECTOR_START_ADDR + MAIN_SECTOR_SIZE - 4));
}

/* Define a nrf_sdh_soc event observer to receive SoftDevice system events. */
NRF_SDH_SOC_OBSERVER(m_sys_obs, 0, _sys_evt_handler, NULL);

static uint32_t flash_write_status = 0xFFFFFFFF; 
static uint32_t get_flash_status(void) // <---- Read -clear-
{
	uint32_t ret = flash_write_status;
	flash_write_status = 0xFFFFFFFF;
	return  ret;
}

void _sys_evt_handler(uint32_t sys_evt, void * p_context)
{
    UNUSED_PARAMETER(p_context);

    if ((sys_evt != NRF_EVT_FLASH_OPERATION_SUCCESS) && (sys_evt != NRF_EVT_FLASH_OPERATION_ERROR))
    {
        /* Ignore any non-flash events. */
        return;
    }
		
		switch (sys_evt)
		{
				case NRF_EVT_FLASH_OPERATION_SUCCESS:
						flash_write_status = NRF_EVT_FLASH_OPERATION_SUCCESS;
						break;

				case NRF_EVT_FLASH_OPERATION_ERROR:
						flash_write_status = NRF_EVT_FLASH_OPERATION_ERROR;
						break;

				default:
						break;
		}
}

void wait_for_flash_ready(void)
{
    static SYS_TIMER_STRUCT timer = {0,0};
		uint32_t flash_sta = 0xFFFFFFFF;
    
    SysTimer_Start(&timer, 500);
    /* While fstorage is busy, sleep and wait for an event. */
    while ((flash_sta != NRF_EVT_FLASH_OPERATION_SUCCESS) && !SysTimer_IsTimeout(&timer))
    {
        flash_sta = get_flash_status();
    }
}

uint32_t blocking_flash_page_erase(uint32_t page_number)
{
  uint32_t err_code =  sd_flash_page_erase(page_number);
	if (err_code == NRF_SUCCESS) {
		wait_for_flash_ready();
	}
	return err_code;
}

uint32_t blocking_flash_page_erase_address(uint32_t page_address)
{
	uint32_t err_code =  sd_flash_page_erase(page_address/FLASH_PAGE_SIZE);
	if (err_code == NRF_SUCCESS) {
		wait_for_flash_ready();
	}
	return err_code;
}

uint32_t blocking_flash_word_write(uint32_t * const p_dst, uint32_t data)
{
	uint32_t err_code = sd_flash_write(p_dst, &data, 1);
	APP_ERROR_CHECK(err_code);

	if (err_code == NRF_SUCCESS) {
		wait_for_flash_ready();
	}
	return err_code;
}

uint32_t blocking_flash_buffer_write(uint32_t * const p_dst, uint32_t * data, int count)
{
	
	uint32_t err_code = sd_flash_write(p_dst, data, count);
	APP_ERROR_CHECK(err_code);
	
	if (err_code == NRF_SUCCESS) {
		wait_for_flash_ready();
	}
	return err_code;
}

void blocking_sector_temp_erase(void)
{
		uint32_t addr;
	
		// Erase
		addr = TEMP_SECTOR_START_ADDR;
		//for (i=0; i<64; i++) {
		while (addr < (TEMP_SECTOR_START_ADDR + MAIN_SECTOR_SIZE))
		{
				// Erase
				blocking_flash_page_erase(addr/ FLASH_PAGE_SIZE);
				// Address increment
				addr += FLASH_PAGE_SIZE;
		}

		nrf_delay_ms(10);
}

uint32_t blocking_sector_temp_write(uint32_t offset, uint32_t *write_buffer, uint32_t count)
{
	uint32_t err_code;
	uint32_t addr;
	
	addr = (TEMP_SECTOR_START_ADDR+offset);
	err_code = blocking_flash_buffer_write((uint32_t *)addr, write_buffer, count);
	if (err_code)
		return err_code;
	
	err_code = memcmp((const char *)addr, (const char *)&write_buffer[0], count*sizeof(uint32_t));
	
	return err_code;
}

// Write buffer
uint32_t ble_fw_write_address = 0; 			// 0-62*1024
uint32_t ble_fw_write_buffer_index = 0; // 0-512
uint32_t ble_fw_write_buffer[128];

uint32_t ble_fw_upgrading_crc32 = 0;
uint32_t ble_fw_upgrade_size = 0;

static uint32_t ble_fw_upgrade_erase_cmd = 0;
void Erase_Temporary_Page(uint32_t cmd)
{
		ble_fw_upgrade_erase_cmd = cmd;
}

void ble_fw_upgrade_task(const char *s);


uint8_t ble_fw_upgrade_cmd [256];
int ble_fw_upgrade_cmd_len = 0;
void ble_fw_upgrade_set(const uint8_t *s, int len)
{
	if (ble_fw_upgrade_cmd_len == 0) {
		memcpy(ble_fw_upgrade_cmd, s, len);
		ble_fw_upgrade_cmd_len = len;
		
		ble_fw_upgrade_cmd[len] = 0;
	}
}

void ble_fw_upgrade_main (void)
{
	char msg[32];
	uint32_t addr;
	if (ble_fw_upgrade_erase_cmd == 0xAA55) {
		// Erase
		addr = TEMP_SECTOR_START_ADDR;
		while (addr < (TEMP_SECTOR_START_ADDR + MAIN_SECTOR_SIZE))
		{
				nrf_delay_ms(50);
			
				// Erase
				if (blocking_flash_page_erase(addr/ FLASH_PAGE_SIZE)) {
					sprintf(msg," !Error %X", addr);
					ble_uart_send_string (msg);
				}
				else {
					// Response
					sprintf(msg,"Earased %X", addr);
					ble_uart_send_string (msg);					
				}

				// Address increment
				addr += FLASH_PAGE_SIZE;
		}
		
		// Clear
		ble_fw_upgrade_erase_cmd = 0;		
	}
	
	
	// Firmware upgrade check
	if (ble_fw_upgrade_cmd_len == 0) {
		ble_fw_upgrade_task("");
	}
	else {
		ble_fw_upgrade_task((const char *)ble_fw_upgrade_cmd);
		ble_fw_upgrade_cmd_len = 0;
	}
}

uint32_t ble_upgrade_last_active = 0;
extern volatile uint32_t systick_count;
uint8_t is_ble_upgrade_active (void)
{
		if ((systick_count >= ble_upgrade_last_active) && ((systick_count - ble_upgrade_last_active) < 5000)){
				return 1;
		}
		else {
				return 0;
		}
}

typedef enum {
	BLE_FW_IDLE = 0,
	BLE_FW_UPGRADE_VAIDATE_KEY1,
	BLE_FW_UPGRADE_VAIDATE_KEY2,
	BLE_FW_LOADFILE,
	BLE_FW_UPGRADE_PREPARE,
	BLE_FW_UPGRADE_TRANSFER,
	BLE_FW_UPGRADE_TRANSFER_CHECK,
	BLE_FW_UPGRADE_VALIDATE,
	
	BLE_FW_UPGRADE_SUCCESS,
	BLE_FW_UPGRADE_ERROR
} BLE_FW_UPGRADE_STATE;

char ble_fw_upgrade_str [32];


#define CHANGE_STATE(q) {ble_upgrade_state = q;}
void ble_fw_upgrade_task(const char *s)
{
	uint8_t on_enter;
	const char *cmd = s;
	
	static BLE_FW_UPGRADE_STATE ble_upgrade_state = BLE_FW_IDLE;
	static BLE_FW_UPGRADE_STATE ble_upgrade_state_last = BLE_FW_IDLE;
	
	// Update
	ble_upgrade_last_active = systick_count;
	
	if (ble_upgrade_state != ble_upgrade_state_last) {
		ble_upgrade_state_last = ble_upgrade_state;
		on_enter = 1;
	}
	else {
		on_enter = 0;
	}
	
	if (!strcmp(cmd, ">reset")) {
		CHANGE_STATE (BLE_FW_IDLE);
	}
	
	switch (ble_upgrade_state) {
		case BLE_FW_IDLE:
			if (!strcmp(cmd, ">init")) {
				CHANGE_STATE (BLE_FW_UPGRADE_VAIDATE_KEY1);
			}
			break;
		
		// CRC32 of firmware
		case BLE_FW_UPGRADE_VAIDATE_KEY1:
			if (on_enter) {
				ble_uart_send_string ("key1?");
			}
			if (!strncmp(cmd, ">crc ", 5)) {
				ble_fw_upgrading_crc32 = 0;
				if (sscanf(&cmd[5], "%X", &ble_fw_upgrading_crc32) == 1) {
					CHANGE_STATE (BLE_FW_UPGRADE_VAIDATE_KEY2);
				}
				else {
					ble_uart_send_string ("Error.");
				}
			}
			break;
		
		// Upgrade Key (Protection Key)
		case BLE_FW_UPGRADE_VAIDATE_KEY2:
			if (on_enter) {
				ble_uart_send_string ("key2?");
			}
			if (cmd[0] == '>') {
				uint32_t tmp = 0;
				if ((sscanf(&cmd[1],"%X",&tmp) == 1) && (tmp == FW_UPGRADE_KEY)){
					CHANGE_STATE (BLE_FW_LOADFILE);
				}
				else {
					ble_uart_send_string ("Invalid");
				}
			}
			break;
			
		case BLE_FW_LOADFILE:
			if (on_enter) {
				ble_uart_send_string ("loadfile");
			}

			if (!strncmp(cmd, ">loaded ", 8)) {
				CHANGE_STATE (BLE_FW_UPGRADE_PREPARE);
				ble_fw_upgrade_size = 0;
				if ((sscanf(&cmd[8], "%X", &ble_fw_upgrade_size) == 1) && (ble_fw_upgrade_size > 0)) {
					if ((ble_fw_upgrade_size & 0x1FF) > 0) {
						ble_fw_upgrade_size = (ble_fw_upgrade_size | 0x1FF)+1;
					}
					ble_uart_send_string ("wait");
				}
				else {
					ble_uart_send_string ("Error.");
				}
			}
			break;
			
		case BLE_FW_UPGRADE_PREPARE:
			if (on_enter){
				ble_uart_send_string ("Erasing...");
				
				// Activate Flash Erase command
				ble_fw_upgrade_erase_cmd = 0xAA55;
			}
			if (ble_fw_upgrade_erase_cmd == 0) {
				ble_uart_send_string ("Done.");
				CHANGE_STATE (BLE_FW_UPGRADE_TRANSFER);
			}
			break;
			
		case BLE_FW_UPGRADE_TRANSFER:
			if (on_enter) {
				ble_uart_send_string ("r:0");
				
				// Reset buffer index
				ble_fw_write_address = 0;
				ble_fw_write_buffer_index = 0;
				
				// Start timeout
	
			}
			if (!strncmp(cmd,">w", 2)) {
				
				//_LOGF(cmd);
				
				// OLD
				//memcpy(&ble_fw_write_buffer[ble_fw_write_buffer_index], &cmd[2], 16);
				//ble_fw_write_buffer_index+= 4; // 16/sizeof(uint32_t)
				
				// NEW
				memcpy(&ble_fw_write_buffer[ble_fw_write_buffer_index], &cmd[2], 128);
				ble_fw_write_buffer_index+= 32; // 128/sizeof(uint32_t)
				
				// Write to Flash
				if (ble_fw_write_buffer_index == 128) {
					//_LOGF("Write address: %04X\r\n", (uint32_t *)(TEMP_SECTOR_START_ADDR+ble_fw_write_address));
					if (blocking_flash_buffer_write((uint32_t *)(TEMP_SECTOR_START_ADDR+ble_fw_write_address), ble_fw_write_buffer, 128)) {
						sprintf(ble_fw_upgrade_str, "Error:%X", ble_fw_write_address + (ble_fw_write_buffer_index*4));
						ble_uart_send_string(ble_fw_upgrade_str);						
					}
					nrf_delay_ms(10);
					// Reset index
					ble_fw_write_address += (128*4);
					ble_fw_write_buffer_index = 0;
				}
				
				if (ble_fw_write_address < ble_fw_upgrade_size) {
					// Request next package
					sprintf(ble_fw_upgrade_str, "r:%X", ble_fw_write_address + (ble_fw_write_buffer_index*4));
					ble_uart_send_string(ble_fw_upgrade_str);
				}
				else {
					// Done file transfer
					ble_uart_send_string("Done.");
					CHANGE_STATE (BLE_FW_UPGRADE_TRANSFER_CHECK);
				}
			}
			break;
		
		case BLE_FW_UPGRADE_TRANSFER_CHECK:
			if (on_enter) {
				ble_uart_send_string("Validating...");
				
				// Write key
				if (ble_fw_write_address < MAIN_SECTOR_SIZE) {
					ble_fw_write_buffer[0] = FW_UPGRADE_KEY;
					ble_fw_write_buffer[1] = ble_fw_upgrading_crc32;
					if (blocking_flash_buffer_write((uint32_t *)(TEMP_SECTOR_START_ADDR + MAIN_SECTOR_SIZE - 8), ble_fw_write_buffer, 2)) {
						ble_uart_send_string("Error");
					}
				}
			}
			CHANGE_STATE (BLE_FW_UPGRADE_VALIDATE);
			break;
			
		case BLE_FW_UPGRADE_VALIDATE:
			ble_uart_send_string("Disconnecting...");
			CHANGE_STATE (BLE_FW_UPGRADE_SUCCESS);
			break;
		
		case BLE_FW_UPGRADE_SUCCESS:
			NVIC_SystemReset();
			break;
		
		case BLE_FW_UPGRADE_ERROR:
			break;
	}
}

  %endif %%fwupgrade

  uint8_t BLE_NUS_Tx_Buffer[BLE_NUS_TX_BUFFER_SIZE];
  volatile uint8_t BLE_NUS_Rx_Buffer[BLE_NUS_RX_BUFFER_SIZE];          
  uint8_t BLE_NUS_Temp_Buffer[BLE_NUS_RX_BUFFER_SIZE];
  volatile uint16_t BLE_NUS_Rx_Count = 0;

  void BLE_NUS_Input(const uint8_t *data, uint16_t len)
  {
   if (len) {
    %if fwupgrade == "on"
    if (data[0] == '>') {
      // BLE upgrade service
      ble_fw_upgrade_set(data, (int)len);
    }

    //fw
    else if (!strncmp((char*)data,"fw?", len)) {
      char tmp_buff[32];
      uint32_t fw = get_current_fw();
      sprintf(tmp_buff, "fw: %X", fw);
      ble_uart_send_string(tmp_buff);
    }

    // reset!
    else if (!strncmp((char*)data,"reset!", len)) {
      sd_nvic_SystemReset();
    }
    else 
    %endif %%fwupgrade
    {
      for (int i=0; i<len; i++) {
        BLE_NUS_Rx_Buffer[BLE_NUS_Rx_Count++] = data[i];
        BLE_NUS_Rx_Count &= (BLE_NUS_RX_BUFFER_SIZE-1);
      }

      // Temporary
      // Append \r\n for package terminator
      BLE_NUS_Rx_Buffer[BLE_NUS_Rx_Count++] = 0x0D;
      BLE_NUS_Rx_Count &= (BLE_NUS_RX_BUFFER_SIZE-1);
      BLE_NUS_Rx_Buffer[BLE_NUS_Rx_Count++] = 0x0A;
      BLE_NUS_Rx_Count &= (BLE_NUS_RX_BUFFER_SIZE-1);
    }
   }
  }

  void BLE_NUS_RestoreBytes(BLE_NUS_BUFFER_READ_STRUCT *read_struct, uint16_t count)
  {
    uint16_t roll_count = count;
    
    /* Remove overflow buffer */
    while(roll_count > BLE_NUS_RX_BUFFER_SIZE)
      roll_count -= BLE_NUS_RX_BUFFER_SIZE;

    /* Return bytes back into buffer */
    if(roll_count > read_struct->index)
      read_struct->index = BLE_NUS_RX_BUFFER_SIZE - roll_count + read_struct->index;
    else
      read_struct->index -= roll_count;
  }

  /* Read
  ** Return value: Number of bytes vaiable.
  */
  void BLE_NUS_Read(BLE_NUS_BUFFER_READ_STRUCT *read_struct)
  {
    volatile uint16_t data_int_curr_count;

    uint16_t data_index = 0;
    uint16_t data_count = 0;

    /* Current data received count of Rx-buffer */
    data_int_curr_count = BLE_NUS_Rx_Count;

    /* Read single part of data buffer */
    if(read_struct->index < data_int_curr_count) { /* Data is available */      
      data_index = read_struct->index;
      data_count = data_int_curr_count - read_struct->index;
      read_struct->index += data_count;
      read_struct->index &= (BLE_NUS_RX_BUFFER_SIZE-1);
    }
    else if(read_struct->index > data_int_curr_count) { /* Data is available with overlap */      
      data_index = read_struct->index;
      data_count = BLE_NUS_RX_BUFFER_SIZE-read_struct->index;
      read_struct->index = 0;
    }
    else { /* No new data */
    }

    /* Return the reading */
    if(data_count > 0) {
      read_struct->buffer = (uint8_t *)&BLE_NUS_Rx_Buffer[data_index];
      read_struct->count = data_count;
    }
    else { read_struct->count = 0; }
  }

  void BLE_NUS_ReadEx(BLE_NUS_BUFFER_READ_STRUCT *read_struct, \
           uint8_t *buffer, uint16_t buffer_size, uint16_t*reading_count) {
    uint16_t bytes_to_read, data_read_index;     

    bytes_to_read = buffer_size; /* Tracking count of data readings */
    data_read_index = 0; /* Increment buffer index */
    do {
      BLE_NUS_Read(read_struct);
      if(read_struct->count <= bytes_to_read) {
        memcpy(&buffer[data_read_index], read_struct->buffer, read_struct->count);
        data_read_index += read_struct->count;
        bytes_to_read -= read_struct->count;
      }
      else {
        /* Return some byte back to buffer */
        BLE_NUS_RestoreBytes(read_struct, (read_struct->count - bytes_to_read)); /* Fixed: Waijung 14.08a */
        /* Return reading data */
        memcpy(&buffer[data_read_index], read_struct->buffer, bytes_to_read);          
        bytes_to_read = 0;
      }        
    } while ((bytes_to_read > 0) && (read_struct->count > 0));

    /* Number of reading bytes */
    *reading_count = buffer_size - bytes_to_read;
  }

  /* Read Ascii packet
   * Return char count, exclude NULL
   * Terminator: "\n", "\r", "\r\n"
   */
  uint16_t BLE_NUS_ReadLine(BLE_NUS_BUFFER_READ_STRUCT *read_struct, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t buffer_size) {
    uint16_t count, packet_len = 0, receive_count = 0;
    uint16_t i;
    uint8_t terminator_found = 0;

    /* Determine maximum number of bytes to read */
    count = buffer_size - 1;
    if(count >= BLE_NUS_RX_BUFFER_SIZE)
       count = BLE_NUS_RX_BUFFER_SIZE-1;

    /* Ignore terminator is invalid */
    if(terminator_count < 1)
      return 0;

    /* Read packet */
    do {
      BLE_NUS_Read(read_struct); /* Check buffer */
      receive_count += read_struct->count; /* Total number of data received */

      /* Search terminator */
      i = 0;
      while(!terminator_found && (i < read_struct->count)) {
        if(read_struct->buffer[i] == (uint8_t)terminator[terminator_count - 1])
          terminator_found = 1;
        i++;
      }
      packet_len += i;
      if(terminator_found) {
        terminator_found = 0;

        /* Roll-back buffer index */
        if ((packet_len > count) || (packet_len < terminator_count)) { /* Packet count is invalid, drop it */
          BLE_NUS_RestoreBytes(read_struct, (receive_count-packet_len));
          /* Reset */
          packet_len       = 0;
          receive_count    = 0;
        }
        else {
          BLE_NUS_RestoreBytes(read_struct, receive_count);

          /* Load data into buffer */
          BLE_NUS_ReadEx(read_struct, buffer, packet_len, &i);
          buffer[packet_len] = '\0'; /* Append NULL */

          /* Validate terminator */
          if(!strncmp((char *)&buffer[packet_len-terminator_count], terminator, terminator_count)) {
            return packet_len; /* packet reading success, return number of received bytes */
          }
          else {
            /* Invalid terminator */              
            packet_len       = 0;            
            receive_count    = 0;
          }
        }
      }
    } while (read_struct->count > 0);

    /* Could not find the packet terminator, reset reading struct to its original position */
    if(receive_count > 0) {
      BLE_NUS_RestoreBytes(read_struct, receive_count);
    }
     
    /* No byte receive */
    return 0;
  }

  /* Read Binary packet
   * 0: Not ready, 1: Data is ready
   */
  uint8_t BLE_NUS_ReadBinary(BLE_NUS_BUFFER_READ_STRUCT *read_struct, \
                                     const char *header, uint16_t header_count, \
                                     const char *terminator, uint16_t terminator_count, \
                                     uint8_t *buffer, uint16_t data_count)
  {
    uint16_t receive_count = 0, drop_count = 0, binary_state = 0, binary_index = 0;
    uint16_t i;

    do {
      BLE_NUS_Read(read_struct); /* Check buffer */
      receive_count += read_struct->count; /* Total number of data received */
       
      /* Binary packet processing */
      for(i=0; i<read_struct->count; i++) {
        switch( binary_state ) {
          case 0: /* Search for header */
            if(binary_index < header_count) {
              if(read_struct->buffer[i] == header[binary_index]) {
                binary_index ++;
              }
              else {
                binary_index = 0;                  
                drop_count = receive_count - (read_struct->count - i - 1); /* Drop packet */
              }
              break;
            }
            else { /* Change to DATA state */
              binary_index = 0;
              binary_state ++;
            }

          case 1: /* Wait for data */
            /* Wait for DATA */
            if(binary_index < data_count) {
              buffer[binary_index] = read_struct->buffer[i];
              binary_index ++;

              /* Check if ready (No terminator) */
              if ((binary_index >= data_count) && (terminator_count == 0)) {
                BLE_NUS_RestoreBytes(read_struct, (read_struct->count - i - 1)); /* Restore some bytes */
                return 1; /* Return success status */
              }
              break;
            }
            else { /* Change to Terminator state */
              binary_index = 0;
              binary_state ++;                
            }

          case 2: /* Scan for terminator */
            if(binary_index < terminator_count) {
              if(read_struct->buffer[i] == terminator[binary_index]) {
                binary_index ++;
              }
              else {
                binary_state = 0;
                binary_index = 0;                  
                drop_count = receive_count - (read_struct->count - i - 1); /* Drop packet */
              }
            }

            if(binary_index >= terminator_count) { /* Success */
              /* Restore some bytes */
              BLE_NUS_RestoreBytes(read_struct, (read_struct->count - i - 1));                
              return 1; /* Return success status */
            }
            break;
        }
      }
    } while (read_struct->count > 0);

    /* Restore bytes */
    BLE_NUS_RestoreBytes(read_struct, (receive_count - drop_count));
    return 0;
  }

  void BLE_NUS_Write(uint8_t *data, uint16_t count)
  { 
    uint32_t err_code;
    if ((count > 0) && (m_conn_handle != BLE_CONN_HANDLE_INVALID))
    {
      do
      {
        uint16_t length = (uint16_t)count;
        err_code = ble_nus_data_send(&m_nus, data, &length, m_conn_handle);
        if ( (err_code != NRF_ERROR_INVALID_STATE) && (err_code != NRF_ERROR_BUSY) )
        {
          //APP_ERROR_CHECK(err_code);
        }
      } while (err_code == NRF_ERROR_BUSY);
    }
  }
  %endif %% (nus_support == "1")

%else
  %% --- Binary mode
  %if packetmode == "Binary"
    %if binheaderlen > 0
      /* Binary header */
      const char %<blockid>_Header[%<blockid>_Header_SIZE] = \
      {\
        %assign sep = ""
        %foreach idx=binheaderlen
        %<sep>%<binheader[idx]>\
        %assign sep = ","
        %endforeach
      };
    %endif
    %if binterminatorlen > 0
      /* Binary terminator */
      const char %<blockid>_Terminator[%<blockid>_Terminator_SIZE] = \
      {\
        %assign sep = ""
        %foreach idx=binterminatorlen
        %<sep>%<binterminator[idx]>\
        %assign sep = ","
        %endforeach
      };
    %endif
  %endif

  %% --- Ascii mode
  %if (packetmode == "Ascii") || (packetmode == "String Buffer") || (packetmode == "Read Line")
    %if asciiterminator != ""
      /* End of packet, ascii mode */
      const char %<blockid>_AsciiTerminator[%<blockid>_AsciiTerminator_SIZE] =\
      { %<asciiterminator> };
    %endif
  %endif
%endif

%% === Rx ===
%if conf == "Rx"
  /* Data read structure */
  BLE_NUS_BUFFER_READ_STRUCT %<blockid>_read_structure = {0, 0, (uint8_t *)0};
  
  %% Binary
  %if packetmode == "Binary"
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
    %if transfer == "Blocking"
      while(!\
    %else
      return (\
    %endif
    BLE_NUS_ReadBinary(&%<blockid>_read_structure, \
            %if binheaderlen > 0
            %<blockid>_Header, %<blockid>_Header_SIZE, \
            %else
            (void *)0, 0,\
            %endif
            %if binterminatorlen > 0
            %<blockid>_Terminator, %<blockid>_Terminator_SIZE, \
            %else
            (void *)0, 0,\
            %endif
            buffer, size));
   }
  %endif

  %% Ascii
  %if packetmode == "Ascii"
    /* Data */
    %foreach idx=SIZE(optionstring2)[1]
      %<optionstring2[idx]> %<blockid>_data%<idx> = 0; /* D%<idx> */
    %endforeach

    /* %<transfer> */
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
      uint8_T ready = 0;
      %if SIZE(optionstring2)[1] < 1
      uint16_t len;
      %endif

      %if transfer == "Blocking"
      do { /* Rx Blocking */
      %else
        /* Rx Non-Blocking */
        %endif
          if(BLE_NUS_ReadLine(&%<blockid>_read_structure, \
               %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
               buffer, size) > 0) {
            %if SIZE(optionstring2)[1] > 0
              ready = (uint8_t)(sscanf((const char*)buffer,"%<asciiformat>"\
              %foreach idx=SIZE(optionstring2)[1]
              ,&%<blockid>_data%<idx>
              %endforeach
              ) == %<SIZE(optionstring2)[1]>);
            %else
              // trim
              len = strlen((const char*)buffer);
              while (len && ((buffer[len-1] == '\r') || (buffer[len-1] == '\n')))
                buffer[--len] = 0;
              ready = (uint8_t)(strcmp((const char*)buffer, "%<asciiformat>") == 0);
            %endif
          }
        %if transfer == "Blocking"
        } while (!ready);
        %else
          return ready;
        %endif
    }
  %endif

  %% String Buffer
  %if packetmode == "String Buffer"
    /* %<transfer> */
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
      %if transfer == "Blocking"
        while (!(BLE_NUS_ReadLine(&%<blockid>_read_structure, \
            %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
            buffer, size) > 0)); 
      %else
        return (uint8_t)(BLE_NUS_ReadLine(&%<blockid>_read_structure, \
            %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
            buffer, size) > 0);
      %endif
    }
  %endif

  %% Read Line
  %if packetmode == "Read Line"
  uint16_t %<blockid>_ReadLine(uint8_t *buffer, uint16_t size)
  {
    return BLE_NUS_ReadLine(&%<blockid>_read_structure, \
               %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
               buffer, size);
  }
  %endif
%endif

void enable_%<blockid>(void){
  %if conf == "Setup"
  
  %endif
}

%closefile tmpBuf
%assign file = LibCreateSourceFile("Source", "Custom","waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%function Outputs(block, system) Output
%<addParametersToBlock(block)>
%if conf != "Setup"
  /* %<blockid>: '%<block.Name>' 
   * Packet: %<packetmode>
   */
%endif

%% === Setup ===
%if conf == "Setup"
  %if dynamicdevicename == "on"
  /* %<blockid>: '%<block.Name>' 
   * Packet: %<packetmode>
   */
  %assign trig = LibBlockInputSignal(0, "", "", 0)
  if (%<trig>)
  {
    %assign port_len = LibBlockInputSignalWidth(1)
    %if port_len > 32
      %assign port_len = 32
    %endif
    %assign port_data = LibBlockInputSignalAddr(1, "", "", 0)
    %assign mac_addr_data = LibBlockInputSignalAddr(2, "", "", 0)
    
    char tmp_device_name_buff[%<port_len+1>];
    uint8_t mac_addr [BLE_GAP_ADDR_LEN];

    memcpy(tmp_device_name_buff, %<port_data>,%<port_len>);
    tmp_device_name_buff[%<port_len>] = 0;

    mac_addr[0] = %<LibBlockInputSignal(2, "", "", 0)>;
    mac_addr[1] = %<LibBlockInputSignal(2, "", "", 1)>;
    mac_addr[2] = %<LibBlockInputSignal(2, "", "", 2)>;
    mac_addr[3] = %<LibBlockInputSignal(2, "", "", 3)>;
    mac_addr[4] = %<LibBlockInputSignal(2, "", "", 4)>;
    mac_addr[5] = %<LibBlockInputSignal(2, "", "", 5)>;

    %if (dfu_support == "1")
    BLE_DFU_NUS_Init(tmp_device_name_buff, mac_addr);
    %else
      %if (nus_support == "1")
      %% BLE enable here
      BLE_NUS_Init(tmp_device_name_buff, mac_addr);
      %endif
    %endif
   }
  %endif
%endif

%% === Rssi ===
%if conf == "Rssi"
%<LibBlockOutputSignal(0, "", "", 0)> = (int)ble_peropheral_rssi_get();
%endif

%% === Rx ===
%if conf == "Rx"
  %% Find port index offset
  %if transfer == "Blocking"
    %assign portOffset = 0
  %else
    %assign portOffset = 1
  %endif

  %% --- Binary ---
  %if packetmode == "Binary"
    %% Find binary data length
    %assign binary_data_len = 0
    %assign data_size_list = [8, 4, 1, 1, 2, 2, 4, 4, 1]
    %foreach idx=LibBlockNumOutputPorts(block)
      %if idx >= portOffset
        %assign binary_data_len = binary_data_len + data_size_list[LibBlockOutputSignalDataTypeId(idx)]
      %endif
    %endforeach

    %if transfer == "Blocking"
      %<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], %<binary_data_len>); /* Blocking */
    %else
      if(%<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], %<binary_data_len>)) { /* Non-blocking */
    %endif

    %assign dataIdx = 0
    %foreach idx=LibBlockNumOutputPorts(block)  
      %if idx >= portOffset
        memcpy(%<LibBlockOutputSignalAddr(idx, "", "", 0)>, &BLE_NUS_Temp_Buffer[%<dataIdx>], sizeof(%<LibBlockOutputSignalDataTypeName(idx, "")>)); /* D%<CAST("Number",idx-portOffset)> */
        %assign dataIdx = dataIdx +  data_size_list[LibBlockOutputSignalDataTypeId(idx)]
      %endif
    %endforeach
    %if transfer != "Blocking"      
      %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
    }
    else {
      %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
    }
    %endif
  %endif  

  %% --- Ascii ---
  %if packetmode == "Ascii" 
    %if transfer == "Blocking"
      %<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], BLE_NUS_RX_BUFFER_SIZE); /* %<transfer> */
    %else
      if(%<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], BLE_NUS_RX_BUFFER_SIZE)) { /* %<transfer> */
    %endif

    %foreach idx=SIZE(optionstring2)[1]
      %%%<optionstring2[idx]> %<blockid>_data%<idx> = 0; /* D%<idx> */
      %<LibBlockOutputSignal(idx+portOffset, "", "", 0)> = %<blockid>_data%<idx>; /* D%<idx> */
    %endforeach

    %if transfer == "Blocking"
      %%%foreach idx=(outputtypearray[0])
      %%%<LibBlockOutputSignal(idx, "", "", 0)> = %<blockid>_data%<idx>; /* D%<idx> */
      %%%endforeach
    %else
      %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
      }
      else {
        %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
      }
    %endif
  %endif

  %% --- String Buffer ---
  %if packetmode == "String Buffer" 
    %if transfer == "Blocking"
      %<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], BLE_NUS_RX_BUFFER_SIZE); /* %<transfer> */
    %else
      if(%<blockid>_Receive(&BLE_NUS_Temp_Buffer[0], BLE_NUS_RX_BUFFER_SIZE)) { /* %<transfer> */
    %endif     
    if(strlen((const char *)BLE_NUS_Temp_Buffer) < %<stringbuffer>_SIZE) { /* Check size */
      strcpy(%<stringbuffer>, (char*)BLE_NUS_Temp_Buffer);
    }
    else { /* Truncated */
      strncpy(%<stringbuffer>, (char*)BLE_NUS_Temp_Buffer, %<stringbuffer>_SIZE-1);
      %<stringbuffer>[%<stringbuffer>_SIZE-1] = '\0';
    }
    %if transfer == "Blocking"
    %else
        %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
      }
      else {
        %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
      }
    %endif    
  %endif

  %% --- Read Line ---
  %if packetmode == "Read Line"
  %<LibBlockOutputSignal(0, "", "", 0)> = %<blockid>_ReadLine((uint8_t *)%<LibBlockOutputSignalAddr(1, "", "", 0)>, %<LibBlockOutputSignalWidth(1)>);
  %endif
  

%endif

%% === Tx ===
%if conf == "Tx"

  %% --- Binary ---
  %if packetmode == "Binary"
    %% Header
    %if binheaderlen > 0
      BLE_NUS_Write(&%<blockid>_Header[0], %<blockid>_Header_SIZE); /* Binary header */
    %endif
    %% Data
    %assign data_size_list = [8, 4, 1, 1, 2, 2, 4, 4, 1]
    %assign data_idx = 0
    %foreach portIdx=LibBlockNumInputPorts(block)
      %assign dtname = LibBlockInputSignalDataTypeName(portIdx,tRealPart)
          BLE_NUS_Write(\
                 (uint8_t *)%<LibBlockInputSignalAddr(portIdx, "", "", 0)>, \
                 %if LibBlockInputSignalWidth(portIdx) > 1 
                   %<LibBlockInputSignalWidth(portIdx)>*sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> [%<LibBlockInputSignalWidth(portIdx)>]*/ 
                 %else
                   sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> */ 
                 %endif      
      %assign data_idx = data_idx + data_size_list[LibBlockInputSignalDataTypeId(portIdx)]
    %endforeach
    %% Terminator
    %if binterminatorlen > 0
      BLE_NUS_Write(&%<blockid>_Terminator[0], %<blockid>_Terminator_SIZE); /* Binary terminator */
    %endif
  %endif

  %% --- Ascii ---
  %if packetmode == "Ascii"
  {
    int i, str_size;
    sprintf((char *)&BLE_NUS_Tx_Buffer[0], "%<asciiformat>"
    %foreach portIdx=LibBlockNumInputPorts(block)
      ,(%<optionstring2[portIdx]>)%<LibBlockInputSignal(portIdx, "", "", 0)> /* D%<portIdx> */
    %endforeach
    );
    str_size = strlen((char *)&BLE_NUS_Tx_Buffer[0]);
    %if asciiterminator != ""
    for (i=0; i<%<blockid>_AsciiTerminator_SIZE; i++)
     BLE_NUS_Tx_Buffer[str_size ++] = %<blockid>_AsciiTerminator[i];
    %endif
    BLE_NUS_Write((uint8_t *)&BLE_NUS_Tx_Buffer[0], str_size); /* Ascii data */
  }
  %endif
  
  %% --- Raw Buffer ---
  %if packetmode == "Raw Buffer"
  {
    uint16_t len = %<LibBlockInputSignal(0, "", "", 0)>;
    //if (len > %<LibBlockInputSignalWidth(1)>)
    //  len = %<LibBlockInputSignalWidth(1)>;
    BLE_NUS_Write (%<LibBlockInputSignalAddr(1, "", "", 0)>, len);
  }
  %endif

%endif

%endfunction

%function Enable(block, system) Output
%<addParametersToBlock(block)>

%if dynamicdevicename == "on"
  %% Do not Init here.
%else
  %if conf == "Setup"
    %if (dfu_support == "1")
    BLE_DFU_NUS_Init();
    %else
      %if (nus_support == "1")
      %% BLE enable here
      BLE_NUS_Init();
      %endif
    %endif
  %endif
%endif
enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
%<addParametersToBlock(block)>
%%disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
%<addParametersToBlock(block)>
%%/* terminate_%<blockid>(); */
%endfunction

