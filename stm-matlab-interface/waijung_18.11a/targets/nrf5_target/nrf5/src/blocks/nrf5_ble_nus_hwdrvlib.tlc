
%openfile tmpBuf
/* ########################################################################
* BLE NUS
* ########################################################################
*/
#include "ble_hci.h"
#include "ble_advdata.h"
#include "ble_advertising.h"
#include "ble_conn_params.h"
#include "nrf_sdh_soc.h"
#include "nrf_sdh_ble.h"
#include "nrf_ble_gatt.h"
#include "nrf_ble_qwr.h"
#include "ble_nus.h"
#include "app_util_platform.h"

void Ble_NUS_C_Send_To_Address (uint8_t *addr, uint8_t *data, uint16_t count);
uint16_t ble_nus_c_rx_buffer_get (uint8_t *data, uint16_t len);
int8_t ble_peropheral_rssi_get (void);
%if dynamicdevicename == "on"
  void BLE_NUS_Init(const char *device_name, const uint8_t *mac_override);
%else
  void BLE_NUS_Init(void);
%endif
void BLE_NUS_C_Init(const uint8_t *addr1, const uint8_t *addr2, const uint8_t *addr3, uint8_t addr_count);
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cDefines")>
%<LibSetSourceFileCustomSection(file,"cDefines",tmpBuf)>

%openfile tmpBuf
/* ########################################################################
* BLE NUS
* ########################################################################
*/

#ifdef BLE_CENTRAL_BLOCK_PRESENT
	/** @brief The maximum number of peripheral and central links combined. */
	#define NRF_BLE_LINK_COUNT              (NRF_SDH_BLE_PERIPHERAL_LINK_COUNT + NRF_SDH_BLE_CENTRAL_LINK_COUNT)
    typedef struct
    {
        bool           is_connected;
        ble_gap_addr_t address;
    } conn_peer_t;

#endif

#define APP_BLE_CONN_CFG_TAG            1                                           /**< A tag identifying the SoftDevice BLE configuration. */

#define DEVICE_NAME                     BLE_DEVICE_NAME                               /**< Name of device. Will be included in the advertising data. */
#define NUS_SERVICE_UUID_TYPE           BLE_UUID_TYPE_VENDOR_BEGIN                  /**< UUID type for the Nordic UART Service (vendor specific). */

#define APP_BLE_OBSERVER_PRIO           3                                           /**< Application's BLE observer priority. You shouldn't need to modify this value. */

#define APP_ADV_INTERVAL                64                                          /**< The advertising interval (in units of 0.625 ms. This value corresponds to 40 ms). */

#define APP_ADV_DURATION                18000                                       /**< The advertising duration (180 seconds) in units of 10 milliseconds. */

#define MIN_CONN_INTERVAL               MSEC_TO_UNITS(20, UNIT_1_25_MS)             /**< Minimum acceptable connection interval (20 ms), Connection interval uses 1.25 ms units. */
#define MAX_CONN_INTERVAL               MSEC_TO_UNITS(75, UNIT_1_25_MS)             /**< Maximum acceptable connection interval (75 ms), Connection interval uses 1.25 ms units. */

#define SLAVE_LATENCY                   0                                           /**< Slave latency. */
#define CONN_SUP_TIMEOUT                MSEC_TO_UNITS(4000, UNIT_10_MS)             /**< Connection supervisory timeout (4 seconds), Supervision Timeout uses 10 ms units. */
#define FIRST_CONN_PARAMS_UPDATE_DELAY  APP_TIMER_TICKS(5000)                       /**< Time from initiating event (connect or start of notification) to first time sd_ble_gap_conn_param_update is called (5 seconds). */
#define NEXT_CONN_PARAMS_UPDATE_DELAY   APP_TIMER_TICKS(30000)                      /**< Time between each call to sd_ble_gap_conn_param_update after the first call (30 seconds). */
#define MAX_CONN_PARAMS_UPDATE_COUNT    3                                           /**< Number of attempts before giving up the connection parameter negotiation. */

#define DEAD_BEEF                       0xDEADBEEF                                  /**< Value used as error code on stack dump, can be used to identify stack location on stack unwind. */

#define UART_TX_BUF_SIZE                256                                         /**< UART TX buffer size. */
#define UART_RX_BUF_SIZE                256                                         /**< UART RX buffer size. */


BLE_NUS_DEF(m_nus, NRF_SDH_BLE_TOTAL_LINK_COUNT);                              /**< BLE NUS service instance. */
NRF_BLE_GATT_DEF(m_gatt);                                                           /**< GATT module instance. */
#ifdef BLE_CENTRAL_BLOCK_PRESENT
NRF_BLE_QWRS_DEF(m_qwr, NRF_SDH_BLE_TOTAL_LINK_COUNT);                      /**< Context for the Queued Write module.*/
#else
NRF_BLE_QWR_DEF(m_qwr);                                                             /**< Context for the Queued Write module.*/
#endif
BLE_ADVERTISING_DEF(m_advertising);                                                 /**< Advertising module instance. */

static uint16_t   m_conn_handle          = BLE_CONN_HANDLE_INVALID;                 /**< Handle of the current connection. */
static uint16_t   m_ble_nus_max_data_len = BLE_GATT_ATT_MTU_DEFAULT - 3;            /**< Maximum length of data (in bytes) that can be transmitted to the peer by the Nordic UART service module. */
static ble_uuid_t m_adv_uuids[]          =                                          /**< Universally unique service identifier. */
{
    {BLE_UUID_NUS_SERVICE, NUS_SERVICE_UUID_TYPE}
};

uint32_t ble_uart_send_string (const char *s)
{
    uint32_t err_code;
    do
    {
        uint16_t length = (uint16_t)strlen(s);
        err_code = ble_nus_data_send(&m_nus, (uint8_t *)s, &length, m_conn_handle);
        if ( (err_code != NRF_ERROR_INVALID_STATE) && (err_code != NRF_ERROR_BUSY) && (err_code != NRF_ERROR_NOT_FOUND) )
        {
            //APP_ERROR_CHECK(err_code);
			if (err_code != NRF_SUCCESS) {
			}
        }
    } while (err_code == NRF_ERROR_BUSY);  
    
    return err_code;
}

static int8_t ble_peropheral_rssi = -100;

int8_t ble_peropheral_rssi_get (void)
{
  return ble_peropheral_rssi;
}

/**@brief Function for handling Queued Write Module errors.
 *
 * @details A pointer to this function will be passed to each service which may need to inform the
 *          application about an error.
 *
 * @param[in]   nrf_error   Error code containing information about what went wrong.
 */
static void nrf_qwr_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}

#ifdef BLE_CENTRAL_BLOCK_PRESENT

	BLE_NUS_C_ARRAY_DEF(m_ble_nus_c, NRF_SDH_BLE_CENTRAL_LINK_COUNT);           /**< LED button client instances. */
	NRF_BLE_SCAN_DEF(m_scan);                                               /**< Scanning Module instance. */
    BLE_DB_DISCOVERY_ARRAY_DEF(m_db_disc, NRF_SDH_BLE_CENTRAL_LINK_COUNT);  /**< Database discovery module instances. */

	/**@brief NUS UUID. */
	static ble_uuid_t const m_nus_uuid =
	{
			.uuid = BLE_UUID_NUS_SERVICE,
			.type = NUS_SERVICE_UUID_TYPE
	};
	
	static conn_peer_t        m_connected_peers[NRF_BLE_LINK_COUNT];                         /**< Array of connected peers. */

	static char * roles_str[] =
	{
			"INVALID_ROLE",
			"PERIPHERAL",
			"CENTRAL",
	};

void scan_start(void);

int get_connected_peer_index_from_address (uint8_t *address)
{
	int ret = -1;
	
	uint8_t comp_addr [BLE_GAP_ADDR_LEN];
	
	comp_addr[0] = address[5];
	comp_addr[1] = address[4];
	comp_addr[2] = address[3];
	comp_addr[3] = address[2];
	comp_addr[4] = address[1];
	comp_addr[5] = address[0];
	
	for (uint32_t i = 0; i < NRF_BLE_LINK_COUNT; i++) {
		if (m_connected_peers[i].is_connected) {
				if (memcmp(m_connected_peers[i].address.addr, comp_addr,  BLE_GAP_ADDR_LEN) == 0) {
					ret = i;
				}
		}
	}
	return ret;
}

void Ble_NUS_C_Send_To_Address (uint8_t *addr, uint8_t *data, uint16_t count)
{
	uint32_t ret_val;
	
  if (count > 0) {
    // Get connection handle from address
		int index = get_connected_peer_index_from_address(addr);
		
		if (index >= 0) {
		
			do
			{
					ret_val = ble_nus_c_string_send(&m_ble_nus_c[index], data, count);
					if ( (ret_val != NRF_ERROR_INVALID_STATE) && (ret_val != NRF_ERROR_RESOURCES) )
					{
							APP_ERROR_CHECK(ret_val);
					}
			} while (ret_val == NRF_ERROR_RESOURCES);
		}
  }
}

void scan_start(void);

uint16_t ble_nus_data_receive_len1 = 0;
uint8_t ble_nus_data_receive_buffer1[128];
uint8_t ble_nus_data_receive_from1[6] = {0,0,0,0,0,0};

uint16_t ble_nus_data_receive_len2 = 0;
uint8_t ble_nus_data_receive_buffer2[128];
uint8_t ble_nus_data_receive_from2[6] = {0,0,0,0,0,0};

uint16_t ble_nus_c_rx_buffer_get (uint8_t *data, uint16_t len)
{
    uint16_t ret = 0;

    if (ble_nus_data_receive_len1 > 0)
    {
      if (len > ble_nus_data_receive_len1)
         len = ble_nus_data_receive_len1;

      memcpy(data, ble_nus_data_receive_buffer1, len);
      

      ret = len;
      
      ble_nus_data_receive_len1 = 0;
    }
    else if (ble_nus_data_receive_len2 > 0)
    {
      if (len > ble_nus_data_receive_len2) 
         len = ble_nus_data_receive_len2;

      memcpy(data, ble_nus_data_receive_buffer2, len);
      ret = len;
      ble_nus_data_receive_len2 = 0;
    }

    return ret;
}

/**@brief Function for handling characters received by the Nordic UART Service (NUS).
 *
 * @details This function takes a list of characters of length data_len and prints the characters out on UART.
 *          If @ref ECHOBACK_BLE_UART_DATA is set, the data is sent back to sender.
 */
static void ble_nus_chars_received_uart_print(uint16_t connection_handle, ble_nus_c_evt_t const * p_ble_nus_evt)
{

   if (ble_nus_data_receive_len1 == 0) { // Free
      ble_nus_data_receive_len1 = p_ble_nus_evt->data_len;
      if (ble_nus_data_receive_len1 < sizeof(ble_nus_data_receive_buffer1)) {
          memcpy(ble_nus_data_receive_buffer1, p_ble_nus_evt->p_data, ble_nus_data_receive_len1);
      }
      //ble_nus_data_receive_from1
   }
   else if (ble_nus_data_receive_len2 == 0)
   {
      ble_nus_data_receive_len2 = p_ble_nus_evt->data_len;
      if (ble_nus_data_receive_len2 < sizeof(ble_nus_data_receive_buffer2)) {
          memcpy(ble_nus_data_receive_buffer2, p_ble_nus_evt->p_data, ble_nus_data_receive_len2);
      }
   }
   else {
     // Drop the package
   }
   //BLE_NUS_Write(p_ble_nus_evt->p_data, p_ble_nus_evt->data_len);
}

static void qwr_init(void)
{
    ret_code_t         err_code;
    nrf_ble_qwr_init_t qwr_init_obj = {0};

    qwr_init_obj.error_handler = nrf_qwr_error_handler;

    for (uint32_t i = 0; i < NRF_BLE_LINK_COUNT; i++)
    {
        err_code = nrf_ble_qwr_init(&m_qwr[i], &qwr_init_obj);
        APP_ERROR_CHECK(err_code);
    }
}

/**@brief Function for checking whether a link already exists with a newly connected peer.
 *
 * @details This function checks whether the newly connected device is already connected.
 *
 * @param[in]   p_connected_evt Bluetooth connected event.
 * @return                      True if the peer's address is found in the list of connected peers,
 *                              false otherwise.
 */
static bool is_already_connected(ble_gap_addr_t const * p_connected_adr)
{
    for (uint32_t i = 0; i < NRF_BLE_LINK_COUNT; i++)
    {
        if (m_connected_peers[i].is_connected)
        {
            if (m_connected_peers[i].address.addr_type == p_connected_adr->addr_type)
            {
                if (memcmp(m_connected_peers[i].address.addr,
                           p_connected_adr->addr,
                           sizeof(m_connected_peers[i].address.addr)) == 0)
                {
                    return true;
                }
            }
        }
    }
    return false;
}

/**@brief Function for assigning new connection handle to the available instance of QWR module.
 *
 * @param[in] conn_handle New connection handle.
 */
static void multi_qwr_conn_handle_assign(uint16_t conn_handle)
{
    for (uint32_t i = 0; i < NRF_BLE_LINK_COUNT; i++)
    {
        if (m_qwr[i].conn_handle == BLE_CONN_HANDLE_INVALID)
        {
            ret_code_t err_code = nrf_ble_qwr_conn_handle_assign(&m_qwr[i], conn_handle);
            APP_ERROR_CHECK(err_code);
            break;
        }
    }
}

#endif // BLE_CENTRAL_BLOCK_PRESENT


/**@brief Function for the GAP initialization.
 *
 * @details This function will set up all the necessary GAP (Generic Access Profile) parameters of
 *          the device. It also sets the permissions and appearance.
 */
%if dynamicdevicename == "on"
static void gap_params_init(const char *devive_name)
%else
static void gap_params_init(void)
%endif
{
    uint32_t                err_code;
    ble_gap_conn_params_t   gap_conn_params;
    ble_gap_conn_sec_mode_t sec_mode;

    BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
%if dynamicdevicename == "on"
    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *) devive_name,
                                          strlen(devive_name));
%else
    err_code = sd_ble_gap_device_name_set(&sec_mode,
                                          (const uint8_t *) DEVICE_NAME,
                                          strlen(DEVICE_NAME));
%endif
    APP_ERROR_CHECK(err_code);

    memset(&gap_conn_params, 0, sizeof(gap_conn_params));

    gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
    gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
    gap_conn_params.slave_latency     = SLAVE_LATENCY;
    gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;

    err_code = sd_ble_gap_ppcp_set(&gap_conn_params);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling the data from the Nordic UART Service.
 *
 * @details This function will process the data received from the Nordic UART BLE Service and send
 *          it to the UART module.
 *
 * @param[in] p_nus    Nordic UART Service structure.
 * @param[in] p_data   Data to be send to UART module.
 * @param[in] length   Length of the data.
 */
/**@snippet [Handling the data received over BLE] */
static void nus_data_handler(ble_nus_evt_t * p_evt)
{
    if (p_evt->type == BLE_NUS_EVT_RX_DATA)
    {
       BLE_NUS_Input(p_evt->params.rx_data.p_data, p_evt->params.rx_data.length);
    }

}
/**@snippet [Handling the data received over BLE] */


/**@brief Function for initializing services that will be used by the application.
 */
static void services_init(void)
{
    uint32_t           err_code;
    ble_nus_init_t     nus_init;

    #ifdef BLE_CENTRAL_BLOCK_PRESENT

    #else
    nrf_ble_qwr_init_t qwr_init = {0};

    // Initialize Queued Write Module.
    qwr_init.error_handler = nrf_qwr_error_handler;

    err_code = nrf_ble_qwr_init(&m_qwr, &qwr_init);
    APP_ERROR_CHECK(err_code);
    #endif

    // Initialize NUS.
    memset(&nus_init, 0, sizeof(nus_init));

    nus_init.data_handler = nus_data_handler;

    err_code = ble_nus_init(&m_nus, &nus_init);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for handling an event from the Connection Parameters Module.
 *
 * @details This function will be called for all events in the Connection Parameters Module
 *          which are passed to the application.
 *
 * @note All this function does is to disconnect. This could have been done by simply setting
 *       the disconnect_on_fail config parameter, but instead we use the event handler
 *       mechanism to demonstrate its use.
 *
 * @param[in] p_evt  Event received from the Connection Parameters Module.
 */
static void on_conn_params_evt(ble_conn_params_evt_t * p_evt)
{
    uint32_t err_code;

    if (p_evt->evt_type == BLE_CONN_PARAMS_EVT_FAILED)
    {
        err_code = sd_ble_gap_disconnect(m_conn_handle, BLE_HCI_CONN_INTERVAL_UNACCEPTABLE);
        APP_ERROR_CHECK(err_code);
    }
}


/**@brief Function for handling errors from the Connection Parameters module.
 *
 * @param[in] nrf_error  Error code containing information about what went wrong.
 */
static void conn_params_error_handler(uint32_t nrf_error)
{
    APP_ERROR_HANDLER(nrf_error);
}

/**@brief Function for initializing the Connection Parameters module.
 */
static void conn_params_init(void)
{
    uint32_t               err_code;
    ble_conn_params_init_t cp_init;

    memset(&cp_init, 0, sizeof(cp_init));

    cp_init.p_conn_params                  = NULL;
    cp_init.first_conn_params_update_delay = FIRST_CONN_PARAMS_UPDATE_DELAY;
    cp_init.next_conn_params_update_delay  = NEXT_CONN_PARAMS_UPDATE_DELAY;
    cp_init.max_conn_params_update_count   = MAX_CONN_PARAMS_UPDATE_COUNT;
    cp_init.start_on_notify_cccd_handle    = BLE_GATT_HANDLE_INVALID;
    cp_init.disconnect_on_fail             = false;
    cp_init.evt_handler                    = on_conn_params_evt;
    cp_init.error_handler                  = conn_params_error_handler;

    err_code = ble_conn_params_init(&cp_init);
    APP_ERROR_CHECK(err_code);
}


/**@brief Function for putting the chip into sleep mode.
 *
 * @note This function will not return.
 */
static void sleep_mode_enter(void)
{
    APP_ERROR_CHECK(ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST));
}

#ifdef BLE_CENTRAL_BLOCK_PRESENT

/**@brief Function for handling BLE Stack events that are related to central application.
 *
 * @details This function keeps the connection handles of central application up-to-date. It
 * parses scanning reports, initiates a connection attempt to peripherals when a target UUID
 * is found, and manages connection parameter update requests. Additionally, it updates the status
 * of LEDs used to report the central application's activity.
 *
 * @note        Since this function updates connection handles, @ref BLE_GAP_EVT_DISCONNECTED events
 *              must be dispatched to the target application before invoking this function.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 */
static void on_ble_central_evt(ble_evt_t const * p_ble_evt)
{
    ret_code_t            err_code;
    ble_gap_evt_t const * p_gap_evt = &p_ble_evt->evt.gap_evt;

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
				
		    multi_qwr_conn_handle_assign(p_gap_evt->conn_handle);

            m_connected_peers[p_gap_evt->conn_handle].is_connected = true;
            m_connected_peers[p_gap_evt->conn_handle].address = p_ble_evt->evt.gap_evt.params.connected.peer_addr;
				
				
            //NRF_LOG_INFO("Connection 0x%x established, starting DB discovery.",
            //            p_gap_evt->conn_handle);

            APP_ERROR_CHECK_BOOL(p_gap_evt->conn_handle < NRF_SDH_BLE_CENTRAL_LINK_COUNT);

            err_code = ble_nus_c_handles_assign(&m_ble_nus_c[p_gap_evt->conn_handle],
                                                p_gap_evt->conn_handle,
                                                NULL);
            APP_ERROR_CHECK(err_code);

            err_code = ble_db_discovery_start(&m_db_disc[p_gap_evt->conn_handle],
                                              p_gap_evt->conn_handle);
            if (err_code != NRF_ERROR_BUSY)
            {
                APP_ERROR_CHECK(err_code);
            }

            // Update LEDs status and check whether it is needed to look for more
            // peripherals to connect to.
            //bsp_board_led_on(CENTRAL_CONNECTED_LED);
            if (ble_conn_state_central_conn_count() == NRF_SDH_BLE_CENTRAL_LINK_COUNT)
            {
                //bsp_board_led_off(CENTRAL_SCANNING_LED);
							
							
            }
            else
            {
                // Resume scanning.
                //bsp_board_led_on(CENTRAL_SCANNING_LED);
                scan_start();
            }				
            break;

        case BLE_GAP_EVT_DISCONNECTED:
            memset(&m_connected_peers[ p_gap_evt->conn_handle], 0x00, sizeof(m_connected_peers[0]));

            //NRF_LOG_INFO("Disconnected. conn_handle: 0x%x, reason: 0x%x",
            //             p_gap_evt->conn_handle,
            //             p_gap_evt->params.disconnected.reason);
				
            //NRF_LOG_INFO("NUS central link 0x%x disconnected (reason: 0x%x)",
            //             p_gap_evt->conn_handle,
            //             p_gap_evt->params.disconnected.reason);

            if (ble_conn_state_central_conn_count() == 0)
            {
               
            }

            // Start scanning.
            scan_start();

            break;

        case BLE_GAP_EVT_TIMEOUT:

            // Timeout for scanning is not specified, so only the connection requests can time out.
            if (p_gap_evt->params.timeout.src == BLE_GAP_TIMEOUT_SRC_CONN)
            {
                //NRF_LOG_DEBUG("Connection request timed out.");
            }						
            break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported.
            err_code = sd_ble_gap_sec_params_reply(p_ble_evt->evt.gap_evt.conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST:
				
            //NRF_LOG_DEBUG("BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST.");
            // Accept parameters requested by peer.
            err_code = sd_ble_gap_conn_param_update(p_gap_evt->conn_handle,
                                        &p_gap_evt->params.conn_param_update_request.conn_params);
            APP_ERROR_CHECK(err_code);				
            break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            //NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
											
        } break;

        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            //NRF_LOG_DEBUG("GATT Client Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            //NRF_LOG_DEBUG("GATT Server Timeout.");
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        default:
					//NRF_LOG_INFO("Unhandled evt: 0x%X (%d)", p_ble_evt->header.evt_id, p_ble_evt->header.evt_id);
            break;
    }
}


/**@brief Function for handling BLE Stack events that involves peripheral applications. Manages the
 * LEDs used to report the status of the peripheral applications.
 *
 * @param[in] p_ble_evt  Bluetooth stack event.
 */
static void on_ble_peripheral_evt(ble_evt_t const * p_ble_evt)
{
    uint32_t err_code;

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
            //NRF_LOG_INFO("Connected");
            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;

            sd_ble_gap_rssi_start(m_conn_handle, 3, 0);

            m_connected_peers[m_conn_handle].is_connected = true;
            m_connected_peers[m_conn_handle].address = p_ble_evt->evt.gap_evt.params.connected.peer_addr;

		    multi_qwr_conn_handle_assign(m_conn_handle);
				
			//NRF_LOG_INFO("Handle: %d", m_conn_handle);
            break;

        case BLE_GAP_EVT_DISCONNECTED:
            memset(&m_connected_peers[m_conn_handle], 0x00, sizeof(m_connected_peers[0]));

            //NRF_LOG_INFO("Disconnected");
            // LED indication will be changed when advertising starts.
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
            break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            //NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GAP_EVT_RSSI_CHANGED:
        {
            uint8_t ch_index;
            ble_peropheral_rssi = p_ble_evt->evt.gap_evt.params.rssi_changed.rssi; //p_ble_evt->evt.gap_evt.params.rssi_changed.rssi;
           // sd_ble_gap_rssi_get(m_conn_handle, &ble_peropheral_rssi, &ch_index);
            break;
        }

        default:
            // No implementation needed.
            break;
    }
}


/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    uint16_t conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
    uint16_t role        = ble_conn_state_role(conn_handle);

    //if (    (p_ble_evt->header.evt_id == BLE_GAP_EVT_CONNECTED)
    //    &&  (is_already_connected(&p_ble_evt->evt.gap_evt.params.connected.peer_addr)))
    //{
    //    (void)sd_ble_gap_disconnect(conn_handle, BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
    //
    //    // Do not process the event further.
    //    return;
    //}



    if (role == BLE_GAP_ROLE_PERIPH)
    {
        // Manages peripheral LEDs.
        on_ble_peripheral_evt(p_ble_evt);
    }
    else if ((role == BLE_GAP_ROLE_CENTRAL) || (p_ble_evt->header.evt_id == BLE_GAP_EVT_ADV_REPORT))
    {
        on_ble_central_evt(p_ble_evt);
    }
}

/**@brief Function for handling Scanning Module events.
 */
static void scan_evt_handler(scan_evt_t const * p_scan_evt)
{
    ret_code_t err_code;

    switch(p_scan_evt->scan_evt_id)
    {
         case NRF_BLE_SCAN_EVT_CONNECTING_ERROR:
         {
              err_code = p_scan_evt->params.connecting_err.err_code;
              APP_ERROR_CHECK(err_code);
         } break;

         case NRF_BLE_SCAN_EVT_CONNECTED:
         {
             // ble_gap_evt_connected_t const * p_connected = p_scan_evt->params.connected.p_connected;

             // Scan is automatically stopped by the connection.
             //NRF_LOG_INFO("Connecting to target %02x%02x%02x%02x%02x%02x",
             //         p_connected->peer_addr.addr[0],
             //         p_connected->peer_addr.addr[1],
             //         p_connected->peer_addr.addr[2],
             //         p_connected->peer_addr.addr[3],
             //         p_connected->peer_addr.addr[4],
             //         p_connected->peer_addr.addr[5]
             //         );
         } break;

         case NRF_BLE_SCAN_EVT_SCAN_TIMEOUT:
         {
             //NRF_LOG_INFO("Scan timed out.");
					 
             scan_start();
         } break;

         default:
             break;
    }
}


/**@brief Function for initializing the scanning and setting the filters.
 */
void scan_init(const uint8_t *addr1, const uint8_t *addr2, const uint8_t *addr3, uint8_t addr_count)
{
    ret_code_t          err_code;
    nrf_ble_scan_init_t init_scan;

    memset(&init_scan, 0, sizeof(init_scan));

    init_scan.connect_if_match = true;
    init_scan.conn_cfg_tag     = APP_BLE_CONN_CFG_TAG;

    err_code = nrf_ble_scan_init(&m_scan, &init_scan, scan_evt_handler);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_UUID_FILTER, &m_nus_uuid);
    APP_ERROR_CHECK(err_code);

    if ((addr_count >0) && (addr1[0] + addr1[1]+ addr1[2]+ addr1[3]+ addr1[4]+ addr1[5])) {
      err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_ADDR_FILTER, addr1);
      APP_ERROR_CHECK(err_code);
    }
    if ((addr_count >1) && (addr2[0] + addr2[1]+ addr2[2]+ addr2[3]+ addr2[4]+ addr2[5])) {
      err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_ADDR_FILTER, addr2);
      APP_ERROR_CHECK(err_code);
    }
    if ((addr_count >2) && (addr3[0] + addr3[1]+ addr3[2]+ addr3[3]+ addr3[4]+ addr3[5])) {
      err_code = nrf_ble_scan_filter_set(&m_scan, SCAN_ADDR_FILTER, addr3);
      APP_ERROR_CHECK(err_code);
    }

    //err_code = nrf_ble_scan_filters_enable(&m_scan, NRF_BLE_SCAN_UUID_FILTER, false);
    err_code = nrf_ble_scan_filters_enable(&m_scan, NRF_BLE_SCAN_ADDR_FILTER, false);
    APP_ERROR_CHECK(err_code);
}



/**@brief Function for starting scanning. */
void scan_start(void)
{
    ret_code_t ret;

    ret = nrf_ble_scan_start(&m_scan);
    APP_ERROR_CHECK(ret);
}


/**@brief Callback handling Nordic UART Service (NUS) client events.
 *
 * @details This function is called to notify the application of NUS client events.
 *
 * @param[in]   p_ble_nus_c   NUS client handle. This identifies the NUS client.
 * @param[in]   p_ble_nus_evt Pointer to the NUS client event.
 */

/**@snippet [Handling events from the ble_nus_c module] */
static void ble_nus_c_evt_handler(ble_nus_c_t * p_ble_nus_c, ble_nus_c_evt_t const * p_ble_nus_evt)
{
    ret_code_t err_code;

    switch (p_ble_nus_evt->evt_type)
    {
        case BLE_NUS_C_EVT_DISCOVERY_COMPLETE:
            //NRF_LOG_INFO("Discovery complete.");
            err_code = ble_nus_c_handles_assign(p_ble_nus_c, p_ble_nus_evt->conn_handle, &p_ble_nus_evt->handles);
            APP_ERROR_CHECK(err_code);

            err_code = ble_nus_c_tx_notif_enable(p_ble_nus_c);
            APP_ERROR_CHECK(err_code);
            //NRF_LOG_INFO("Connected to device with Nordic UART Service.");

            break;

        case BLE_NUS_C_EVT_NUS_TX_EVT:
            //ble_nus_chars_received_uart_print(p_ble_nus_evt->p_data, p_ble_nus_evt->data_len);

			ble_nus_chars_received_uart_print(p_ble_nus_evt->conn_handle, p_ble_nus_evt);
            break;

        case BLE_NUS_C_EVT_DISCONNECTED:
            //NRF_LOG_INFO("Disconnected.");
            scan_start();
            break;
				
		default:
			break;
    }
}
/**@snippet [Handling events from the ble_nus_c module] */


/**@brief Function for initializing the Nordic UART Service (NUS) client. */
static void nus_c_init(void)
{
    ret_code_t       err_code;
    ble_nus_c_init_t init;

    init.evt_handler = ble_nus_c_evt_handler;

    for (uint32_t i = 0; i < NRF_SDH_BLE_CENTRAL_LINK_COUNT; i++)
    {
        err_code = ble_nus_c_init(&m_ble_nus_c[i], &init);
        APP_ERROR_CHECK(err_code);
    }	
}

/**@brief Function for handling database discovery events.
 *
 * @details This function is a callback function to handle events from the database discovery module.
 *          Depending on the UUIDs that are discovered, this function forwards the events
 *          to their respective services.
 *
 * @param[in] p_event  Pointer to the database discovery event.
 */
static void db_disc_handler(ble_db_discovery_evt_t * p_evt)
{	
    //NRF_LOG_DEBUG("call to ble_nus_c_on_db_disc_evt for instance %d and link 0x%x!",
    //              p_evt->conn_handle,
    //              p_evt->conn_handle);

    ble_nus_c_on_db_disc_evt(&m_ble_nus_c[p_evt->conn_handle], p_evt);	
}

/** @brief Function for initializing the database discovery module. */
static void db_discovery_init(void)
{
    ret_code_t err_code = ble_db_discovery_init(db_disc_handler);
    APP_ERROR_CHECK(err_code);
}
#else

/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    uint32_t err_code;

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
            //NRF_LOG_INFO("Connected");
            m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;

            sd_ble_gap_rssi_start(m_conn_handle, 3, 0);

            err_code = nrf_ble_qwr_conn_handle_assign(&m_qwr, m_conn_handle);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GAP_EVT_DISCONNECTED:
            //NRF_LOG_INFO("Disconnected");
            // LED indication will be changed when advertising starts.
            m_conn_handle = BLE_CONN_HANDLE_INVALID;
            break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            //NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
            // Pairing not supported
            err_code = sd_ble_gap_sec_params_reply(m_conn_handle, BLE_GAP_SEC_STATUS_PAIRING_NOT_SUPP, NULL, NULL);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_SYS_ATTR_MISSING:
            // No system attributes have been stored.
            err_code = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0, 0);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTC_EVT_TIMEOUT:
            // Disconnect on GATT Client timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GATTS_EVT_TIMEOUT:
            // Disconnect on GATT Server timeout event.
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
            break;

        case BLE_GAP_EVT_RSSI_CHANGED:
        {
            uint8_t ch_index;
            ble_peropheral_rssi = p_ble_evt->evt.gap_evt.params.rssi_changed.rssi; //p_ble_evt->evt.gap_evt.params.rssi_changed.rssi;
           // sd_ble_gap_rssi_get(m_conn_handle, &ble_peropheral_rssi, &ch_index);
            break;
        }

        default:
            // No implementation needed.
            break;
    }
}

#endif //BLE_CENTRAL_BLOCK_PRESENT

/**@brief Function for handling advertising events.
 *
 * @details This function will be called for advertising events which are passed to the application.
 *
 * @param[in] ble_adv_evt  Advertising event.
 */
static void on_adv_evt(ble_adv_evt_t ble_adv_evt)
{
    uint32_t err_code;

    switch (ble_adv_evt)
    {
        case BLE_ADV_EVT_FAST:
            break;

        case BLE_ADV_EVT_IDLE:
            sleep_mode_enter();
            break;

        default:
            break;
    }
}

/**@brief Function for the SoftDevice initialization.
 *
 * @details This function initializes the SoftDevice and the BLE event interrupt.
 */
static void ble_stack_init(void)
{
    ret_code_t err_code;

    //err_code = nrf_sdh_enable_request();
    //APP_ERROR_CHECK(err_code);

    // Configure the BLE stack using the default settings.
    // Fetch the start address of the application RAM.
    uint32_t ram_start = 0;
    err_code = nrf_sdh_ble_default_cfg_set(APP_BLE_CONN_CFG_TAG, &ram_start);
    APP_ERROR_CHECK(err_code);

    // Enable BLE stack.
    err_code = nrf_sdh_ble_enable(&ram_start);
    APP_ERROR_CHECK(err_code);

    // Register a handler for BLE events.
    NRF_SDH_BLE_OBSERVER(m_ble_observer, APP_BLE_OBSERVER_PRIO, ble_evt_handler, NULL);
}

/**@brief Function for handling events from the GATT library. */
void gatt_evt_handler(nrf_ble_gatt_t * p_gatt, nrf_ble_gatt_evt_t const * p_evt)
{
    if ((m_conn_handle == p_evt->conn_handle) && (p_evt->evt_id == NRF_BLE_GATT_EVT_ATT_MTU_UPDATED))
    {
        m_ble_nus_max_data_len = p_evt->params.att_mtu_effective - OPCODE_LENGTH - HANDLE_LENGTH;
        //NRF_LOG_INFO("Data len is set to 0x%X(%d)", m_ble_nus_max_data_len, m_ble_nus_max_data_len);
    }
    //NRF_LOG_DEBUG("ATT MTU exchange completed. central 0x%x peripheral 0x%x",
    //              p_gatt->att_mtu_desired_central,
    //              p_gatt->att_mtu_desired_periph);
}


/**@brief Function for initializing the GATT library. */
void gatt_init(void)
{
    ret_code_t err_code;

    err_code = nrf_ble_gatt_init(&m_gatt, gatt_evt_handler);
    APP_ERROR_CHECK(err_code);

    err_code = nrf_ble_gatt_att_mtu_periph_set(&m_gatt, NRF_SDH_BLE_GATT_MAX_MTU_SIZE);
    APP_ERROR_CHECK(err_code);
}

/**@brief Function for initializing the Advertising functionality.
 */
static void advertising_init(void)
{
    uint32_t               err_code;
    ble_advertising_init_t init;

    memset(&init, 0, sizeof(init));

    init.advdata.name_type          = BLE_ADVDATA_FULL_NAME;
    init.advdata.include_appearance = false;
    init.advdata.flags              = BLE_GAP_ADV_FLAGS_LE_ONLY_LIMITED_DISC_MODE;

    init.srdata.uuids_complete.uuid_cnt = sizeof(m_adv_uuids) / sizeof(m_adv_uuids[0]);
    init.srdata.uuids_complete.p_uuids  = m_adv_uuids;

    init.config.ble_adv_fast_enabled  = true;
    init.config.ble_adv_fast_interval = APP_ADV_INTERVAL;
    init.config.ble_adv_fast_timeout  = APP_ADV_DURATION;
    init.evt_handler = on_adv_evt;

    err_code = ble_advertising_init(&m_advertising, &init);
    APP_ERROR_CHECK(err_code);

    ble_advertising_conn_cfg_tag_set(&m_advertising, APP_BLE_CONN_CFG_TAG);
}

%if dynamicdevicename == "on"
void BLE_NUS_Init(const char *device_name, const uint8_t *mac_override)
{
  static uint8_t init_once_trigged = 0;

  if (!init_once_trigged)
  {
    init_once_trigged = 1;
%else
void BLE_NUS_Init(void)
{
%endif
    #ifdef BLE_CENTRAL_BLOCK_PRESENT
	db_discovery_init();  
    #endif

    /* BLE Init */
    ble_stack_init();
%if dynamicdevicename == "on"
    // Override MAC address
    if ((uint32_t)mac_override[0] + (uint32_t)mac_override[1] + (uint32_t)mac_override[2] 
         + (uint32_t)mac_override[3] + (uint32_t)mac_override[4] + (uint32_t)mac_override[5])
    {
		ble_gap_addr_t addr;
			
		// get
		sd_ble_gap_addr_get(&addr);
			
		// modify
        addr.addr[0] = mac_override[5];
        addr.addr[1] = mac_override[4];
        addr.addr[2] = mac_override[3];
        addr.addr[3] = mac_override[2];
        addr.addr[4] = mac_override[1];
        addr.addr[5] = mac_override[0];
			
		// set
		sd_ble_gap_addr_set(&addr);
    }

    gap_params_init(device_name);
%else
    gap_params_init();
%endif
    gatt_init();
    services_init();
    advertising_init();
    conn_params_init();  

    /* BLE Start */
    APP_ERROR_CHECK(ble_advertising_start(&m_advertising, BLE_ADV_MODE_FAST));
    // Set ADV Status
    
%if dynamicdevicename == "on"
  }
%endif
}

void BLE_NUS_C_Init(const uint8_t *addr1, const uint8_t *addr2, const uint8_t *addr3, uint8_t addr_count)
{
    #ifdef BLE_CENTRAL_BLOCK_PRESENT
    static uint8_t init = 1;
    if (init)
    {
      init = 0;

	  qwr_init();
      nus_c_init();
      scan_init(addr1,addr2,addr3,addr_count);
	  scan_start();
    }
    #endif	
}

%closefile tmpBuf
%assign file = LibCreateSourceFile("Source", "Custom","waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
    