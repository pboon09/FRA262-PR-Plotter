%implements nrf5_mesh "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
  %assign conf = CAST("String",SFcnParamSettings.conf)
  %assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
  %assign blockid = block.Identifier

  %% Size of optionstring: %<SIZE(optionstring)[1]>
  %assign block = block + conf + sampletime + blockid

  %assign rxbuffersize = optionstring1[0]
  %assign txbuffersize = optionstring1[1]
  %assign transfer     = optionstring1[2]
  %assign packetmode   = optionstring1[3]
  %assign asciiformat        = optionstring1[4]
  %assign asciiterminator    = optionstring1[5]
  %assign asciiterminatorlen = optionstring1[6]
  %assign meshprofile       = optionstring1[7]
  %assign ownaddress        = optionstring1[8]

  %assign binheaderlen = SIZE(binheader)[1]
  %assign binterminatorlen = SIZE(binterminator)[1]

  %assign appkeylen = SIZE(appkey)[1]
  %assign subnetkeylen = SIZE(subnetkey)[1]

  %assign block = block + rxbuffersize + txbuffersize + transfer \
                + packetmode + binheaderlen \
                + binterminatorlen + asciiformat + asciiterminator \
                + asciiterminatorlen + meshprofile + appkeylen + subnetkeylen + ownaddress
%endfunction

%function BlockTypeSetup(block, system) void
%<addParametersToBlock(block)>

   %if (EXISTS(::__STRING_LIB_H__) == 0)
      %assign :: __STRING_LIB_H__ = 1
      %openfile tmpBuf
         #include <string.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STDIO_LIB_H__) == 0)
      %assign :: __STDIO_LIB_H__ = 1
      %openfile tmpBuf
         #include <stdlib.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
   %if (EXISTS(::__STDIO_IO_H__) == 0)
      %assign :: __STDIO_IO_H__ = 1
      %openfile tmpBuf
         #include <stdio.h>
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif

   %openfile tmpBuf
/%
     #include "ble.h"

     #include "log.h"
     #include "nrf_mesh.h"
     #include "nrf_mesh_opt.h"
     #include "utils.h"

     #include "access.h"
     #include "device_state_manager.h"
     #include "nrf_mesh_serial.h"
     %%#include "nrf_mesh_sdk.h"
     #include "nrf_delay.h"
     #include "nrf_gpio.h"
     %%#include "boards.h"

     #include "serial_packet.h"
     #include "nrf_mesh_events.h"
     #include "nrf_sdh_soc.h"
%/

#include "log.h"
#include "nrf_mesh_serial.h"
#include "mesh_app_utils.h"
#include "simple_hal.h"
#include "mesh_stack.h"
#include "mesh_softdevice_init.h"
#include "mesh_provisionee.h"
#include "nrf_mesh_config_examples.h"
#include "nrf_sdh_soc.h"


   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

   %openfile tmpBuf

   %closefile tmpBuf
   %assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
   %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
   %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%endfunction

%function BlockInstanceSetup(block, system) void
%<addParametersToBlock(block)>

%if conf == "Setup"
  %%include "nrf5_ble_nus_hwdrvlib.tlc"
%endif

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid>
 * ########################################################################
*/
%if conf == "Setup"
  /* Data read structure */
  typedef struct {
    uint16_t index; /* Index of data in buffer */
    uint16_t count; /* Return data count */
    uint8_t *buffer; /* Return buffer pointer of valid data */
  } MESH_BUFFER_READ_STRUCT;

  #define MESH_RX_BUFFER_SIZE %<rxbuffersize> /* Must be 2^N ;N=4,5,6,... */
  #define MESH_TX_BUFFER_SIZE %<txbuffersize> /* Must be 2^N ;N=4,5,6,... */

  extern uint8_t MESH_Tx_Buffer[MESH_TX_BUFFER_SIZE];
  extern volatile uint8_t MESH_Rx_Buffer[MESH_RX_BUFFER_SIZE];
  extern uint8_t MESH_Temp_Buffer[MESH_RX_BUFFER_SIZE];

  uint16_t MESH_ReadLine(MESH_BUFFER_READ_STRUCT *read_struct, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t buffer_size);
  uint8_t MESH_ReadBinary(MESH_BUFFER_READ_STRUCT *read_struct, \
                            const char *header, uint16_t header_count, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t data_count);

  void MESH_Input(const uint8_t *data, uint16_t len);
  void MESH_Write(uint8_t *data, uint16_t count);

  void MESH_Configure(void);
  uint8_t Mesh_Configure_Ready(void);

  extern const uint8_t DEFAULT_APP_KEY[];
  extern const uint8_t DEFAULT_SUBNET_KEY[];
%else
  %% --- Tx/Rx Binary ---
  %if packetmode == "Binary"
    %if binheaderlen > 0
      /* Binary header */
      #define %<blockid>_Header_SIZE %<binheaderlen>
      extern const char %<blockid>_Header[%<blockid>_Header_SIZE];
    %endif
    %if binterminatorlen > 0
      /* Binary terminator */
      #define %<blockid>_Terminator_SIZE %<binterminatorlen>
      extern const char %<blockid>_Terminator[%<blockid>_Terminator_SIZE];
    %endif
  %endif
  %% --- Tx/Rx Ascii ---
  %if (packetmode == "Ascii") || (packetmode == "String Buffer") || (packetmode == "Read Line")
    %if asciiterminator != ""
      /* End of packet, ascii mode */
      #define %<blockid>_AsciiTerminator_SIZE %<asciiterminatorlen>
      extern const char %<blockid>_AsciiTerminator[%<blockid>_AsciiTerminator_SIZE];
    %endif
  %endif
%endif

%if conf == "Rx"
  %if transfer == "Blocking"
    void \
  %else
    uint8_t \
  %endif
  %<blockid>_Receive(uint8_t *buffer, uint16_t size);
  %if packetmode == "Binary"
  %else
    /* Data */
    %foreach idx=SIZE(optionstring2)[1]
      extern %<optionstring2[idx]> %<blockid>_data%<idx>; /* D%<idx> */
    %endforeach
  %endif
%endif

%if packetmode == "Read Line"
uint16_t %<blockid>_ReadLine(uint8_t *buffer, uint16_t size);
%endif

void enable_%<blockid>(void);
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%openfile tmpBuf
/* ########################################################################
 * Name: %<Name>
 * Id: %<blockid> 
 * ########################################################################
*/
%if conf == "Setup"

  uint8_t MESH_Tx_Buffer[MESH_TX_BUFFER_SIZE];
  volatile uint8_t MESH_Rx_Buffer[MESH_RX_BUFFER_SIZE];          
  uint8_t MESH_Temp_Buffer[MESH_RX_BUFFER_SIZE];
  volatile uint16_t MESH_Rx_Count = 0;

  void MESH_Input(const uint8_t *data, uint16_t len)
  {
    int i;
    for (i=0; i<len; i++) {
	  MESH_Rx_Buffer[MESH_Rx_Count++] = data[i];
      MESH_Rx_Count &= (MESH_RX_BUFFER_SIZE-1);    
    }

    // Temporary
    // Append \r\n for package terminator
	MESH_Rx_Buffer[MESH_Rx_Count++] = 0x0D;
    MESH_Rx_Count &= (MESH_RX_BUFFER_SIZE-1); 
	MESH_Rx_Buffer[MESH_Rx_Count++] = 0x0A;
    MESH_Rx_Count &= (MESH_RX_BUFFER_SIZE-1); 
  }

  void MESH_RestoreBytes(MESH_BUFFER_READ_STRUCT *read_struct, uint16_t count)
  {
    uint16_t roll_count = count;
    
    /* Remove overflow buffer */
    while(roll_count > MESH_RX_BUFFER_SIZE)
      roll_count -= MESH_RX_BUFFER_SIZE;

    /* Return bytes back into buffer */
    if(roll_count > read_struct->index)
      read_struct->index = MESH_RX_BUFFER_SIZE - roll_count + read_struct->index;
    else
      read_struct->index -= roll_count;
  }

  /* Read
  ** Return value: Number of bytes vaiable.
  */
  void MESH_Read(MESH_BUFFER_READ_STRUCT *read_struct)
  {
    volatile uint16_t data_int_curr_count;

    uint16_t data_index = 0;
    uint16_t data_count = 0;

    /* Current data received count of Rx-buffer */
    data_int_curr_count = MESH_Rx_Count;

    /* Read single part of data buffer */
    if(read_struct->index < data_int_curr_count) { /* Data is available */      
      data_index = read_struct->index;
      data_count = data_int_curr_count - read_struct->index;
      read_struct->index += data_count;
      read_struct->index &= (MESH_RX_BUFFER_SIZE-1);
    }
    else if(read_struct->index > data_int_curr_count) { /* Data is available with overlap */      
      data_index = read_struct->index;
      data_count = MESH_RX_BUFFER_SIZE-read_struct->index;
      read_struct->index = 0;
    }
    else { /* No new data */
    }

    /* Return the reading */
    if(data_count > 0) {
      read_struct->buffer = (uint8_t *)&MESH_Rx_Buffer[data_index];
      read_struct->count = data_count;
    }
    else { read_struct->count = 0; }
  }

  void MESH_ReadEx(MESH_BUFFER_READ_STRUCT *read_struct, \
           uint8_t *buffer, uint16_t buffer_size, uint16_t*reading_count) {
    uint16_t bytes_to_read, data_read_index;     

    bytes_to_read = buffer_size; /* Tracking count of data readings */
    data_read_index = 0; /* Increment buffer index */
    do {
      MESH_Read(read_struct);
      if(read_struct->count <= bytes_to_read) {
        memcpy(&buffer[data_read_index], read_struct->buffer, read_struct->count);
        data_read_index += read_struct->count;
        bytes_to_read -= read_struct->count;
      }
      else {
        /* Return some byte back to buffer */
        MESH_RestoreBytes(read_struct, (read_struct->count - bytes_to_read)); /* Fixed: Waijung 14.08a */
        /* Return reading data */
        memcpy(&buffer[data_read_index], read_struct->buffer, bytes_to_read);          
        bytes_to_read = 0;
      }        
    } while ((bytes_to_read > 0) && (read_struct->count > 0));

    /* Number of reading bytes */
    *reading_count = buffer_size - bytes_to_read;
  }

  /* Read Ascii packet
   * Return char count, exclude NULL
   * Terminator: "\n", "\r", "\r\n"
   */
  uint16_t MESH_ReadLine(MESH_BUFFER_READ_STRUCT *read_struct, \
                            const char *terminator, uint16_t terminator_count, \
                            uint8_t *buffer, uint16_t buffer_size) {
    uint16_t count, packet_len = 0, receive_count = 0;
    uint16_t i;
    uint8_t terminator_found = 0;

    /* Determine maximum number of bytes to read */
    count = buffer_size - 1;
    if(count >= MESH_RX_BUFFER_SIZE)
       count = MESH_RX_BUFFER_SIZE-1;

    /* Ignore terminator is invalid */
    if(terminator_count < 1)
      return 0;

    /* Read packet */
    do {
      MESH_Read(read_struct); /* Check buffer */
      receive_count += read_struct->count; /* Total number of data received */

      /* Search terminator */
      i = 0;
      while(!terminator_found && (i < read_struct->count)) {
        if(read_struct->buffer[i] == (uint8_t)terminator[terminator_count - 1])
          terminator_found = 1;
        i++;
      }
      packet_len += i;
      if(terminator_found) {
        terminator_found = 0;

        /* Roll-back buffer index */
        if ((packet_len > count) || (packet_len < terminator_count)) { /* Packet count is invalid, drop it */
          MESH_RestoreBytes(read_struct, (receive_count-packet_len));
          /* Reset */
          packet_len       = 0;
          receive_count    = 0;
        }
        else {
          MESH_RestoreBytes(read_struct, receive_count);

          /* Load data into buffer */
          MESH_ReadEx(read_struct, buffer, packet_len, &i);
          buffer[packet_len] = '\0'; /* Append NULL */

          /* Validate terminator */
          if(!strncmp((char *)&buffer[packet_len-terminator_count], terminator, terminator_count)) {
            return packet_len; /* packet reading success, return number of received bytes */
          }
          else {
            /* Invalid terminator */              
            packet_len       = 0;            
            receive_count    = 0;
          }
        }
      }
    } while (read_struct->count > 0);

    /* Could not find the packet terminator, reset reading struct to its original position */
    if(receive_count > 0) {
      MESH_RestoreBytes(read_struct, receive_count);
    }
     
    /* No byte receive */
    return 0;
  }

  /* Read Binary packet
   * 0: Not ready, 1: Data is ready
   */
  uint8_t MESH_ReadBinary(MESH_BUFFER_READ_STRUCT *read_struct, \
                                     const char *header, uint16_t header_count, \
                                     const char *terminator, uint16_t terminator_count, \
                                     uint8_t *buffer, uint16_t data_count)
  {
    uint16_t receive_count = 0, drop_count = 0, binary_state = 0, binary_index = 0;
    uint16_t i;

    do {
      MESH_Read(read_struct); /* Check buffer */
      receive_count += read_struct->count; /* Total number of data received */
       
      /* Binary packet processing */
      for(i=0; i<read_struct->count; i++) {
        switch( binary_state ) {
          case 0: /* Search for header */
            if(binary_index < header_count) {
              if(read_struct->buffer[i] == header[binary_index]) {
                binary_index ++;
              }
              else {
                binary_index = 0;                  
                drop_count = receive_count - (read_struct->count - i - 1); /* Drop packet */
              }
              break;
            }
            else { /* Change to DATA state */
              binary_index = 0;
              binary_state ++;
            }

          case 1: /* Wait for data */
            /* Wait for DATA */
            if(binary_index < data_count) {
              buffer[binary_index] = read_struct->buffer[i];
              binary_index ++;

              /* Check if ready (No terminator) */
              if ((binary_index >= data_count) && (terminator_count == 0)) {
                MESH_RestoreBytes(read_struct, (read_struct->count - i - 1)); /* Restore some bytes */
                return 1; /* Return success status */
              }
              break;
            }
            else { /* Change to Terminator state */
              binary_index = 0;
              binary_state ++;                
            }

          case 2: /* Scan for terminator */
            if(binary_index < terminator_count) {
              if(read_struct->buffer[i] == terminator[binary_index]) {
                binary_index ++;
              }
              else {
                binary_state = 0;
                binary_index = 0;                  
                drop_count = receive_count - (read_struct->count - i - 1); /* Drop packet */
              }
            }

            if(binary_index >= terminator_count) { /* Success */
              /* Restore some bytes */
              MESH_RestoreBytes(read_struct, (read_struct->count - i - 1));                
              return 1; /* Return success status */
            }
            break;
        }
      }
    } while (read_struct->count > 0);

    /* Restore bytes */
    MESH_RestoreBytes(read_struct, (receive_count - drop_count));
    return 0;
  }

  void MESH_Write(uint8_t *data, uint16_t count)
  { 
    // TODO:
  }
%else
  %% --- Binary mode
  %if packetmode == "Binary"
    %if binheaderlen > 0
      /* Binary header */
      const char %<blockid>_Header[%<blockid>_Header_SIZE] = \
      {\
        %assign sep = ""
        %foreach idx=binheaderlen
        %<sep>%<binheader[idx]>\
        %assign sep = ","
        %endforeach
      };
    %endif
    %if binterminatorlen > 0
      /* Binary terminator */
      const char %<blockid>_Terminator[%<blockid>_Terminator_SIZE] = \
      {\
        %assign sep = ""
        %foreach idx=binterminatorlen
        %<sep>%<binterminator[idx]>\
        %assign sep = ","
        %endforeach
      };
    %endif
  %endif

  %% --- Ascii mode
  %if (packetmode == "Ascii") || (packetmode == "String Buffer") || (packetmode == "Read Line")
    %if asciiterminator != ""
      /* End of packet, ascii mode */
      const char %<blockid>_AsciiTerminator[%<blockid>_AsciiTerminator_SIZE] =\
      { %<asciiterminator> };
    %endif
  %endif
%endif

%% === Rx ===
%if conf == "Rx"
  /* Data read structure */
  MESH_BUFFER_READ_STRUCT %<blockid>_read_structure = {0, 0, (uint8_t *)0};
  
  %% Binary
  %if packetmode == "Binary"
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
    %if transfer == "Blocking"
      while(!\
    %else
      return (\
    %endif
    MESH_ReadBinary(&%<blockid>_read_structure, \
            %if binheaderlen > 0
            %<blockid>_Header, %<blockid>_Header_SIZE, \
            %else
            (void *)0, 0,\
            %endif
            %if binterminatorlen > 0
            %<blockid>_Terminator, %<blockid>_Terminator_SIZE, \
            %else
            (void *)0, 0,\
            %endif
            buffer, size));
   }
  %endif

  %% Ascii
  %if packetmode == "Ascii"
    /* Data */
    %foreach idx=SIZE(optionstring2)[1]
      %<optionstring2[idx]> %<blockid>_data%<idx> = 0; /* D%<idx> */
    %endforeach

    /* %<transfer> */
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
      uint8_T ready = 0;
      %if SIZE(optionstring2)[1] < 1
      uint16_t len;
      %endif

      %if transfer == "Blocking"
      do { /* Rx Blocking */
      %else
        /* Rx Non-Blocking */
        %endif
          if(MESH_ReadLine(&%<blockid>_read_structure, \
               %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
               buffer, size) > 0) {
            %if SIZE(optionstring2)[1] > 0
              ready = (uint8_t)(sscanf((const char*)buffer,"%<asciiformat>"\
              %foreach idx=SIZE(optionstring2)[1]
              ,&%<blockid>_data%<idx>
              %endforeach
              ) == %<SIZE(optionstring2)[1]>);
            %else
              // trim
              len = strlen((const char*)buffer);
              while (len && ((buffer[len-1] == '\r') || (buffer[len-1] == '\n')))
                buffer[--len] = 0;
              ready = (uint8_t)(strcmp((const char*)buffer, "%<asciiformat>") == 0);
            %endif
          }
        %if transfer == "Blocking"
        } while (!ready);
        %else
          return ready;
        %endif
    }
  %endif

  %% String Buffer
  %if packetmode == "String Buffer"
    /* %<transfer> */
    %if transfer == "Blocking"
    void \
    %else
    uint8_t \
    %endif
    %<blockid>_Receive(uint8_t *buffer, uint16_t size) {
      %if transfer == "Blocking"
        while (!(MESH_ReadLine(&%<blockid>_read_structure, \
            %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
            buffer, size) > 0)); 
      %else
        return (uint8_t)(MESH_ReadLine(&%<blockid>_read_structure, \
            %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
            buffer, size) > 0);
      %endif
    }
  %endif

  %% Read Line
  %if packetmode == "Read Line"
  uint16_t %<blockid>_ReadLine(uint8_t *buffer, uint16_t size)
  {
    return MESH_ReadLine(&%<blockid>_read_structure, \
               %<blockid>_AsciiTerminator, %<blockid>_AsciiTerminator_SIZE, \
               buffer, size);
  }
  %endif
%endif

%% ========================================================================
%% MESH Setup
%if conf == "Setup"
  const uint8_t DEFAULT_APP_KEY[16] = {\
    %assign sep = ""
    %foreach idx=appkeylen
      %<sep>%<appkey[idx]>\
      %assign sep = ","
    %endforeach
  };
  const uint8_t DEFAULT_SUBNET_KEY[16] = {\
    %assign sep = ""
    %foreach idx=subnetkeylen
      %<sep>%<subnetkey[idx]>\
      %assign sep = ","
    %endforeach
  };

#define MESH_SOC_OBSERVER_PRIO 0

static void mesh_soc_evt_handler(uint32_t evt_id, void * p_context)
{
  nrf_mesh_on_sd_evt(evt_id);
}

NRF_SDH_SOC_OBSERVER(m_mesh_soc_observer, MESH_SOC_OBSERVER_PRIO, mesh_soc_evt_handler, NULL);

static uint32_t Mesh_Configured_Flag = 1;

uint8_t Mesh_Configure_Ready(void)
{
  return (Mesh_Configured_Flag == 0);
}

#define STATIC_AUTH_DATA {0x6E, 0x6F, 0x72, 0x64, 0x69, 0x63, 0x5F, 0x65, 0x78, 0x61, 0x6D, 0x70, 0x6C, 0x65, 0x5F, 0x31}

static bool m_device_provisioned;

static void mesh_init(void)
{
    mesh_stack_init_params_t init_params =
    {
        .core.irq_priority = NRF_MESH_IRQ_PRIORITY_LOWEST,
        .core.lfclksrc     = DEV_BOARD_LF_CLK_CFG
    };
    ERROR_CHECK(mesh_stack_init(&init_params, &m_device_provisioned));

    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Enabling ECDH offloading...\n");
    nrf_mesh_opt_t value = {.len = 4, .opt.val = 1 };
    ERROR_CHECK(nrf_mesh_opt_set(NRF_MESH_OPT_PROV_ECDH_OFFLOADING, &value));

    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Initializing serial interface...\n");
    ERROR_CHECK(nrf_mesh_serial_init(NULL));
}

#ifndef BLE_BLOCK_PRESENT
static uint32_t ble_enable(void)
{
    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Enabling BLE...\n");
#if defined(_lint)
    uint32_t ram_start = 0ul;
#elif defined ( __CC_ARM )
    extern uint32_t Image$$RW_IRAM1$$Base;
    const volatile uint32_t ram_start = (uint32_t) &Image$$RW_IRAM1$$Base;
#elif defined   ( __GNUC__ )
    extern uint32_t __data_start__;
    volatile uint32_t ram_start = (uint32_t) &__data_start__;
#endif
    uint32_t app_ram_base = ram_start;
    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Ram base: 0x%x\n", ram_start);

#if NRF_SD_BLE_API_VERSION == 1
    ble_enable_params_t ble_enable_params = {{0}};
    uint32_t error_code = sd_ble_enable(&ble_enable_params);
#elif (NRF_SD_BLE_API_VERSION >= 2) && (NRF_SD_BLE_API_VERSION < 5)
    ble_enable_params_t ble_enable_params = {{0}};
    uint32_t error_code = sd_ble_enable(&ble_enable_params, &app_ram_base);
#elif NRF_SD_BLE_API_VERSION == 5 || NRF_SD_BLE_API_VERSION == 6
    uint32_t error_code = sd_ble_enable(&app_ram_base);
#else
    #error Unsupported NRF_SD_BLE_API_VERSION
#endif
    if (app_ram_base != ram_start) 
    {
        __LOG(LOG_SRC_APP, LOG_LEVEL_WARN,
              "sd_ble_enable: app_ram_base should be adjusted to 0x%0x\n", app_ram_base);
    }
    return error_code;
}
#endif // BLE_BLOCK_PRESENT

static void initialize(void)
{
#if defined(NRF51) && defined(NRF_MESH_STACK_DEPTH)
    stack_depth_paint_stack();
#endif

    __LOG_INIT(LOG_MSK_DEFAULT | LOG_SRC_ACCESS | LOG_SRC_SERIAL | LOG_SRC_APP, LOG_LEVEL_INFO, log_callback_rtt);
    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "----- Bluetooth Mesh Serial Interface Application -----\n");

%%    hal_leds_init();

    #ifndef BLE_BLOCK_PRESENT
    nrf_clock_lf_cfg_t lfc_cfg = DEV_BOARD_LF_CLK_CFG;
    %%ERROR_CHECK(mesh_softdevice_init(lfc_cfg));
    
    ERROR_CHECK(ble_enable());
    #endif
    mesh_init();

    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Initialization complete!\n");
}

static void start(void)
{
    ERROR_CHECK(mesh_stack_start());

    if (!m_device_provisioned)
    {
        static const uint8_t static_auth_data[NRF_MESH_KEY_SIZE] = STATIC_AUTH_DATA;
        mesh_provisionee_start_params_t prov_start_params =
        {
            .p_static_data = static_auth_data
        };
        ERROR_CHECK(mesh_provisionee_prov_start(&prov_start_params));
    }
    ERROR_CHECK(nrf_mesh_serial_enable());

    __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "Bluetooth Mesh Serial Interface Application started!\n");
}

static dsm_handle_t subnet_handle;
static dsm_handle_t appkey_handle;
static dsm_handle_t publish_handle;

uint32_t mesh_quick_setup(uint16_t address)
{
  uint32_t status;
  
  // dsm_subnet_add
  status = dsm_subnet_add(0, DEFAULT_SUBNET_KEY, &subnet_handle);

  // dsm_appkey_add
  if (status == 0)
    status = dsm_appkey_add(0, subnet_handle, DEFAULT_APP_KEY, &appkey_handle);
  
  // dsm_local_unicast_addresses_set
  dsm_local_unicast_address_t local = {
    .address_start = address,//DEFAULT_LOCAL_UNICAST_ADRESS_START,
    .count         = ACCESS_ELEMENT_COUNT
  };
  if (status == 0)
    status = dsm_local_unicast_addresses_set(&local);
 
              
  return status;
}

uint32_t mesh_addr_publication_add(uint16_t address)
{
    uint32_t status = dsm_address_publish_add(address, &publish_handle);
    return status;
}

uint32_t mesh_packet_send(uint16_t src_addr, dsm_handle_t dst_addr_handle, uint8_t *data, uint16_t length)
{
    nrf_mesh_tx_params_t tx_params;
    memset(&tx_params, 0, sizeof(tx_params));

    uint32_t status = dsm_address_get(dst_addr_handle, &tx_params.dst);


    if (status == NRF_SUCCESS)
    {
        dsm_local_unicast_address_t valid_src_addrs;
        dsm_local_unicast_addresses_get(&valid_src_addrs);

        if (src_addr <  valid_src_addrs.address_start || src_addr >= valid_src_addrs.address_start + valid_src_addrs.count)
        {
            status = NRF_ERROR_INVALID_ADDR;
        }
        else
        {
            status = dsm_tx_secmat_get(subnet_handle/*DSM_HANDLE_INVALID*/, appkey_handle, &tx_params.security_material);
            if (status == NRF_SUCCESS)
            {
                tx_params.src       = src_addr;
                tx_params.ttl       = 1;
                tx_params.force_segmented  = 1;
                tx_params.transmic_size = NRF_MESH_TRANSMIC_SIZE_DEFAULT;

                tx_params.p_data    = data;
                tx_params.data_len  = length;

                status = nrf_mesh_packet_send(&tx_params, NULL);
            }
        }
    }
    return status;
}

  const uint16_t MESH_OWN_ADDRESS = %<ownaddress>;
  void MESH_Configure(void)
  {
    static uint32_t counter = 0;
    static uint32_t status = 0;

    // DEBUG:
    char tmp_tx[128];
    uint16_t own_addr = 86; // Set own address
    uint16_t dst_addr;

    if (own_addr == 18) dst_addr = 86;
    else dst_addr = 18;

    if (Mesh_Configured_Flag) {
      Mesh_Configured_Flag = 0;

      initialize();
      execution_start(start); 

      // quick_setup
      status = mesh_quick_setup(own_addr);
      __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "quick_setup: %u\n", status);

      // cmd_addr_publication_add
      status = mesh_addr_publication_add(dst_addr);
      //status = cmd_addr_publication_add(0);
      __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "handle_cmd_addr_publication_add: %u\n", status);  

    }

    if (status == 0) {
      sprintf(tmp_tx, "Value: %u\r\n", ++counter);
      status = mesh_packet_send(own_addr, publish_handle, (uint8_t *)tmp_tx, strlen(tmp_tx));
      __LOG(LOG_SRC_APP, LOG_LEVEL_INFO, "handle_cmd_packet_send: %u\n", status);
    }
  }
%endif

void enable_%<blockid>(void){

}

%closefile tmpBuf
%assign file = LibCreateSourceFile("Source", "Custom","waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
%endfunction

%function Outputs(block, system) Output
%<addParametersToBlock(block)>
  /* %<blockid>: '%<block.Name>' 
   * Packet: %<packetmode>
   */

%if conf == "Setup"
  MESH_Configure();
%endif

%% === Rx ===
%if conf == "Rx"
  %% Find port index offset
  %if transfer == "Blocking"
    %assign portOffset = 0
  %else
    %assign portOffset = 1
  %endif

  %% --- Binary ---
  %if packetmode == "Binary"
    %% Find binary data length
    %assign binary_data_len = 0
    %assign data_size_list = [8, 4, 1, 1, 2, 2, 4, 4, 1]
    %foreach idx=LibBlockNumOutputPorts(block)
      %if idx >= portOffset
        %assign binary_data_len = binary_data_len + data_size_list[LibBlockOutputSignalDataTypeId(idx)]
      %endif
    %endforeach

    %if transfer == "Blocking"
      %<blockid>_Receive(&MESH_Temp_Buffer[0], %<binary_data_len>); /* Blocking */
    %else
      if(%<blockid>_Receive(&MESH_Temp_Buffer[0], %<binary_data_len>)) { /* Non-blocking */
    %endif

    %assign dataIdx = 0
    %foreach idx=LibBlockNumOutputPorts(block)  
      %if idx >= portOffset
        memcpy(%<LibBlockOutputSignalAddr(idx, "", "", 0)>, &MESH_Temp_Buffer[%<dataIdx>], sizeof(%<LibBlockOutputSignalDataTypeName(idx, "")>)); /* D%<CAST("Number",idx-portOffset)> */
        %assign dataIdx = dataIdx +  data_size_list[LibBlockOutputSignalDataTypeId(idx)]
      %endif
    %endforeach
    %if transfer != "Blocking"      
      %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
    }
    else {
      %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
    }
    %endif
  %endif  

  %% --- Ascii ---
  %if packetmode == "Ascii" 
    %if transfer == "Blocking"
      %<blockid>_Receive(&MESH_Temp_Buffer[0], MESH_RX_BUFFER_SIZE); /* %<transfer> */
    %else
      if(%<blockid>_Receive(&MESH_Temp_Buffer[0], MESH_RX_BUFFER_SIZE)) { /* %<transfer> */
    %endif

    %foreach idx=SIZE(optionstring2)[1]
      %%%<optionstring2[idx]> %<blockid>_data%<idx> = 0; /* D%<idx> */
      %<LibBlockOutputSignal(idx+portOffset, "", "", 0)> = %<blockid>_data%<idx>; /* D%<idx> */
    %endforeach

    %if transfer == "Blocking"
      %%%foreach idx=(outputtypearray[0])
      %%%<LibBlockOutputSignal(idx, "", "", 0)> = %<blockid>_data%<idx>; /* D%<idx> */
      %%%endforeach
    %else
      %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
      }
      else {
        %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
      }
    %endif
  %endif

  %% --- String Buffer ---
  %if packetmode == "String Buffer" 
    %if transfer == "Blocking"
      %<blockid>_Receive(&MESH_Temp_Buffer[0], MESH_RX_BUFFER_SIZE); /* %<transfer> */
    %else
      if(%<blockid>_Receive(&MESH_Temp_Buffer[0], MESH_RX_BUFFER_SIZE)) { /* %<transfer> */
    %endif     
    if(strlen((const char *)MESH_Temp_Buffer) < %<stringbuffer>_SIZE) { /* Check size */
      strcpy(%<stringbuffer>, (char*)MESH_Temp_Buffer);
    }
    else { /* Truncated */
      strncpy(%<stringbuffer>, (char*)MESH_Temp_Buffer, %<stringbuffer>_SIZE-1);
      %<stringbuffer>[%<stringbuffer>_SIZE-1] = '\0';
    }
    %if transfer == "Blocking"
    %else
        %<LibBlockOutputSignal(0, "", "", 0)> = 1; /* READY */
      }
      else {
        %<LibBlockOutputSignal(0, "", "", 0)> = 0; /* Not READY */
      }
    %endif    
  %endif

  %% --- Read Line ---
  %if packetmode == "Read Line"
  %<LibBlockOutputSignal(0, "", "", 0)> = %<blockid>_ReadLine((uint8_t *)%<LibBlockOutputSignalAddr(1, "", "", 0)>, %<LibBlockOutputSignalWidth(1)>);
  %endif
  

%endif

%% === Tx ===
%if conf == "Tx"

  %% --- Binary ---
  %if packetmode == "Binary"
    %% Header
    %if binheaderlen > 0
      MESH_Write(&%<blockid>_Header[0], %<blockid>_Header_SIZE); /* Binary header */
    %endif
    %% Data
    %assign data_size_list = [8, 4, 1, 1, 2, 2, 4, 4, 1]
    %assign data_idx = 0
    %foreach portIdx=LibBlockNumInputPorts(block)
      %assign dtname = LibBlockInputSignalDataTypeName(portIdx,tRealPart)
          MESH_Write(\
                 (uint8_t *)%<LibBlockInputSignalAddr(portIdx, "", "", 0)>, \
                 %if LibBlockInputSignalWidth(portIdx) > 1 
                   %<LibBlockInputSignalWidth(portIdx)>*sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> [%<LibBlockInputSignalWidth(portIdx)>]*/ 
                 %else
                   sizeof(%<LibBlockInputSignalDataTypeName(portIdx, "")>)); /* Data %<portIdx> */ 
                 %endif      
      %assign data_idx = data_idx + data_size_list[LibBlockInputSignalDataTypeId(portIdx)]
    %endforeach
    %% Terminator
    %if binterminatorlen > 0
      MESH_Write(&%<blockid>_Terminator[0], %<blockid>_Terminator_SIZE); /* Binary terminator */
    %endif
  %endif

  %% --- Ascii ---
  %if packetmode == "Ascii"
  {
    int i, str_size;
    sprintf((char *)&MESH_Tx_Buffer[0], "%<asciiformat>"
    %foreach portIdx=LibBlockNumInputPorts(block)
      ,(%<optionstring2[portIdx]>)%<LibBlockInputSignal(portIdx, "", "", 0)> /* D%<portIdx> */
    %endforeach
    );
    str_size = strlen((char *)&MESH_Tx_Buffer[0]);
    %if asciiterminator != ""
    for (i=0; i<%<blockid>_AsciiTerminator_SIZE; i++)
     MESH_Tx_Buffer[str_size ++] = %<blockid>_AsciiTerminator[i];
    %endif
    MESH_Write((uint8_t *)&MESH_Tx_Buffer[0], str_size); /* Ascii data */
  }
  %endif

  %% --- Raw Buffer ---
  %if packetmode == "Raw Buffer"
  {
    uint16_t len = %<LibBlockInputSignal(0, "", "", 0)>;
    if (len > %<LibBlockInputSignalWidth(1)>)
      len = %<LibBlockInputSignalWidth(1)>;
    MESH_Write (%<LibBlockInputSignalAddr(1, "", "", 0)>, len);
  }
  %endif

%endif

%endfunction

%function Enable(block, system) Output
%<addParametersToBlock(block)>
enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
%<addParametersToBlock(block)>
%%disable_%<blockid>();
%endfunction

%function Terminate(block, system) Output
%<addParametersToBlock(block)>
%%/* terminate_%<blockid>(); */
%endfunction

