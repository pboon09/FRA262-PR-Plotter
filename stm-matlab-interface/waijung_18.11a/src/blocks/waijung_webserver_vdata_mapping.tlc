%implements waijung_webserver_vdata_mapping "C"
%selectfile NULL_FILE

%function addParametersToBlock(block) void
  %assign sampletime = CAST("Number",SFcnParamSettings.sampletime)
  %assign callbackenable = CAST("Number",SFcnParamSettings.callbackenable)
  %assign blockid = CAST("String",SFcnParamSettings.blockid)
  %assign block = block + sampletime+ blockid + callbackenable
%endfunction

%function BlockTypeSetup(block, system) void
%<addParametersToBlock(block)>
   %if (EXISTS(::__VDATA_MAPPING_MODELBASE__) == 0)
      %assign :: __VDATA_MAPPING_MODELBASE__ = 1
      %openfile tmpBuf
         #include "waijung_hwdrvlib.h" 
         #include "%<LibGetMdlPubHdrBaseName()>.h"
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Source", "Custom", "webserver_cgivarset_isr")
      %<LibAddSourceFileCustomSection(file,"Declarations","cIncludes")>
      %<LibSetSourceFileCustomSection(file,"cIncludes",tmpBuf)>
   %endif
%endfunction

%function BlockInstanceSetup(block, system) void
%addtorecord block AsyncCallerGenCode TLC_TRUE
%<addParametersToBlock(block)>

%openfile tmpBuf
  %%void enable_%<blockid>(void);
  /* ########################################################################
   * Block Name: %<block.Name>
   * Block ID: %<blockid>
   * ########################################################################
   */
  void %<blockid>_varset_ISR(void);
%closefile tmpBuf
%assign file = LibCreateSourceFile("Header", "Custom", "waijung_hwdrvlib")
%<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
%<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>

%endfunction

%function Outputs(block, system) Output
  %<addParametersToBlock(block)>

  %if callbackenable
    %if LibBlockOutputSignalConnected(0)
      %% Get the downstream block
      %assign callIdx = 0  %% Only allowed to connect one function call subsystem
      %assign ssBlock = LibGetFcnCallBlock(block,callIdx)
  
      %if !block.GenCodeForTopAsyncSS     
        %%Don't generate code for downstream f-c subsystem
        %%if GenCodeForTopAsyncSS is not set yet.
        %return
      %endif

      %% Call the downstream function call subsystem
      %openfile tmpBuf
        %<LibBlockExecuteFcnCall(block, callIdx)>\
      %closefile tmpBuf   

      %% Always create the ISR function
      %openfile funcbuf
        /* ########################################################################
         * Block Name: %<block.Name>
         * Block ID: %<blockid>
         * ########################################################################
         * Function call: %<blockid> IRQ
         */
        void %<blockid>_varset_ISR(void) {
           %if WHITE_SPACE(tmpBuf)
              /* Nothing to do for system: %<ssBlock.Name> */
           %else
              /* Call the system: %<ssBlock.Name> */
              %<tmpBuf>
           %endif
        }
      %closefile funcbuf
      %%assign file = LibCreateSourceFile("Source", "Custom", "waijung_hwdrvlib")
      %assign file = LibCreateSourceFile("Source", "Custom", "webserver_cgivarset_isr")
      %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
      %<LibSetSourceFileCustomSection(file,"cFunctions",funcbuf)>
    
    %else
      %openfile tmpBuf
        /* ########################################################################
         * Block Name: %<block.Name>
         * Block ID: %<blockid>
         * ########################################################################
         * Function call: %<blockid> IRQ
         */
        void %<blockid>_varset_ISR(void) {
          /* Ouput ISR block is not connected */
        }
      %closefile tmpBuf
      %assign file = LibCreateSourceFile("Source", "Custom", "webserver_cgivarset_isr")
      %<LibAddSourceFileCustomSection(file,"Declarations","cFunctions")>
      %<LibSetSourceFileCustomSection(file,"cFunctions",tmpBuf)>
    %endif
  %endif  
%endfunction

%function Enable(block, system) Output
%<addParametersToBlock(block)>
%%enable_%<blockid>();
%endfunction

%function Disable(block, system) Output
%<addParametersToBlock(block)>
%%/* disable_%<blockid>(); */
%endfunction

%function Terminate(block, system) Output
%<addParametersToBlock(block)>
%%/* terminate_%<blockid>(); */
%endfunction

